[{"path":[]},{"path":"/CONTRIBUTING.html","id":"tldr","dir":"","previous_headings":"","what":"TL;DR","title":"How to Contribute to the igraph R package","text":"Send PR! Thanks!","code":""},{"path":"/CONTRIBUTING.html","id":"slightly-more-details","dir":"","previous_headings":"","what":"Slightly more Details","title":"How to Contribute to the igraph R package","text":"want contribute? Awesome! Small changes, like fixing typos documentation completely fine also welcome. bigger changes, suggest open issue start coding, can maximize probability can successfully merge code.","code":""},{"path":"/CONTRIBUTING.html","id":"r-or-c","dir":"","previous_headings":"","what":"R or C","title":"How to Contribute to the igraph R package","text":"guide igraph R package, note package uses igraph C library internally things. changes involve C library well, need make changes first, repository C library: https://github.com/igraph/igraph.","code":""},{"path":"/CONTRIBUTING.html","id":"development-and-compilation","dir":"","previous_headings":"","what":"Development and Compilation","title":"How to Contribute to the igraph R package","text":"development done default branch, can automatically installed using remotes::install_github(\"igraph/rigraph\") pak::pak(\"igraph/rigraph\") . parts code (sources C library, .Rd documentation files, …) stored redundantly updated running make make igraph. clone repository, can locally build test igraph package using testthat package follows: building source Windows, need RTools installed. Additionally, two system requirements glpk libxml2 optional, hard requirements. version R >= 4.0 can install two RTools terminal using update files stored redundantly, run . done automatically CI/CD, cases changes committed directly branch tested.","code":"testthat::test_local() pacman -Sy mingw-w64-{i686,x86_64}-glpk mingw-w64-{i686,x86_64}-libxml2 make igraph"},{"path":"/CONTRIBUTING.html","id":"making-trivial-changes","dir":"","previous_headings":"","what":"Making Trivial Changes","title":"How to Contribute to the igraph R package","text":"look file want modify. Click edit symbol (pen) upper right corner file view. Make edits. Write short commit message, less 65 characters. E.g. “Fix manual page typo” “Fix degree bug loops”. needed, elaborate changes “extended description” field. Commit changes. Go back start page forked repository. https://github.com/<username>/rigraph. Click green button branch name create pull request. Click “Create pull request”. Provide detailed description like. Please also indicate fine licensing contribution igraph’s license (see Legal Stuff ). Click “Create pull request”. ’s ! probably good idea keep forked repository change accepted igraph, case need modify . Now need wait us, unfortunately. Please ping us, takes long respond. E.g. week considered long. pull request accepted, can delete forked repository.","code":""},{"path":"/CONTRIBUTING.html","id":"making-more-involved-changes","dir":"","previous_headings":"","what":"Making More Involved Changes","title":"How to Contribute to the igraph R package","text":"mostly trivial changes, probably want edit sources computer, instead online GitHub. Open issue issue tracker proposed changes. required smaller things, suggest others. Just case somebody already working thing, something don’t want igraph. Fork repository, clone machine ’ll work . Make sure work dev branch, alternatively, create new branch based dev branch. ready changes, build igraph, run tests indicated . Submit pull request. Now need wait us, unfortunately. Please ping us, takes long respond. E.g. week considered long.","code":""},{"path":"/CONTRIBUTING.html","id":"writing-igraph-code","dir":"","previous_headings":"","what":"Writing igraph Code","title":"How to Contribute to the igraph R package","text":"tips writing igraph code. general, look things done, try similarly. (Unless think done well, case please tell us.)","code":""},{"path":"/CONTRIBUTING.html","id":"code-formatting","dir":"","previous_headings":"Writing igraph Code","what":"Code Formatting","title":"How to Contribute to the igraph R package","text":"follow tidyverse style guide formatting. styler package helps apply style code. Look style (indentation, braces, etc.) recently committed bigger change, try mimic .","code":""},{"path":"/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"Writing igraph Code","what":"Documentation","title":"How to Contribute to the igraph R package","text":"Please document new functions using roxygen2, run devtools::document() make igraph update .Rd files.","code":""},{"path":"/CONTRIBUTING.html","id":"test-cases","dir":"","previous_headings":"Writing igraph Code","what":"Test Cases","title":"How to Contribute to the igraph R package","text":"Unless change something trivial, please consider adding test cases. important! See files inst/tests directory examples.","code":""},{"path":"/CONTRIBUTING.html","id":"ask-us","dir":"","previous_headings":"Writing igraph Code","what":"Ask Us!","title":"How to Contribute to the igraph R package","text":"general, sure something, please ask! can open issue Github, write igraph-help mailing list (see homepage http://igraph.org), write Tamás Gábor. prefer public forums, though, others can learn , .","code":""},{"path":"/CONTRIBUTING.html","id":"legal-stuff","dir":"","previous_headings":"","what":"Legal Stuff","title":"How to Contribute to the igraph R package","text":"pain deal , can’t avoid , unfortunately. , igraph licensed “General Public License (GPL) version 2, later”. igraph manual licensed “GNU Free Documentation License”. contribution bigger typo fix, please indicate fine releasing code/text licenses. E.g. adding sentence reads “’m fine GPL 2 later FDL.” perfectly enough.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tamás Nepusz. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csardi G, Nepusz T: igraph software package complex network research, InterJournal, Complex Systems 1695. 2006. https://igraph.org","code":"@Article{,   title = {The igraph software package for complex network research},   author = {Gabor Csardi and Tamas Nepusz},   journal = {InterJournal},   volume = {Complex Systems},   pages = {1695},   year = {2006},   url = {https://igraph.org}, }"},{"path":"/cran-comments.template.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"local R installation, R 4.1.1 ubuntu 20.04 (Github Actions), R 3.4.4, R 3.5.3, R 4.0.5, R 4.1.1 R-devel windows-latest (Github Actions), R 4.1.1 macOS-latest (Github Actions), R 4.1.1","code":""},{"path":"/cran-comments.template.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"X errors | Y warnings | Z notes Add comments CRAN maintainers .","code":""},{"path":"/cran-comments.template.html","id":"revdepcheck-results","dir":"","previous_headings":"","what":"revdepcheck results","title":"NA","text":"Paste output revdepcheck revdep/ Extend output explanations failure believe ignored fault","code":""},{"path":"/index.html","id":"rigraph","dir":"","previous_headings":"","what":"Network Analysis and Visualization","title":"Network Analysis and Visualization","text":"R/igraph R package igraph network analysis library.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Network Analysis and Visualization","text":"can install stable version R/igraph CRAN: development version, can use Github, remotes package: installation source Windows, need RTools installed. Additionally, three system requirements glpk, libxml2 gmp optional, hard requirements. versions R >= 4.0 can install using","code":"install.packages(\"igraph\") remotes::install_github(\"igraph/rigraph\") pacman -Sy mingw-w64-{i686,x86_64}-glpk mingw-w64-{i686,x86_64}-libxml2 mingw-w64-{i686,x86_64}-gmp"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Network Analysis and Visualization","text":"See igraph homepage complete manual.","code":""},{"path":"/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Network Analysis and Visualization","text":"Please read contribution guide.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Network Analysis and Visualization","text":"GNU GPL version 2 later","code":""},{"path":"/reference/E.html","id":null,"dir":"Reference","previous_headings":"","what":"Edges of a graph — E","title":"Edges of a graph — E","text":"edge sequence vector containing numeric edge ids, special class attribute allows custom operations: selecting subsets edges based attributes, graph structure, creating intersection, union edges, etc.","code":""},{"path":"/reference/E.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edges of a graph — E","text":"","code":"E(graph, P = NULL, path = NULL, directed = TRUE)"},{"path":"/reference/E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edges of a graph — E","text":"graph graph. P list vertices select edges via pairs vertices. first second vertices select first edge, third fourth second, etc. path list vertices, select edges along path. Note works reliable simple graphs. graph multiple edges, one chosen arbitrarily included edge sequence. directed Whether consider edge directions P argument, directed graphs.","code":""},{"path":"/reference/E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edges of a graph — E","text":"edge sequence graph.","code":""},{"path":"/reference/E.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edges of a graph — E","text":"Edge sequences usually used igraph function arguments refer edges graph. edge sequence tied graph refers : really denoted specific edges graph, used together another graph. edge sequence often created E() function. result includes edges increasing edge id order default (. none P path arguments used). edge sequence can indexed numeric vector, just like regular R vector. See links edge sequence operations .","code":""},{"path":"/reference/E.html","id":"indexing-edge-sequences","dir":"Reference","previous_headings":"","what":"Indexing edge sequences","title":"Edges of a graph — E","text":"Edge sequences mostly behave like regular vectors, additional indexing operations specific ; e.g. selecting edges based graph structure, based edge attributes. See [.igraph.es details.","code":""},{"path":"/reference/E.html","id":"querying-or-setting-attributes","dir":"Reference","previous_headings":"","what":"Querying or setting attributes","title":"Edges of a graph — E","text":"Edge sequences can used query set attributes edges sequence. See $.igraph.es() details.","code":""},{"path":[]},{"path":"/reference/E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edges of a graph — E","text":"","code":"# Edges of an unnamed graph g <- make_ring(10) E(g) #> + 10/10 edges from 5b2828c: #>  [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10  # Edges of a named graph g2 <- make_ring(10) %>%   set_vertex_attr(\"name\", value = letters[1:10]) E(g2) #> + 10/10 edges from f2b513f (vertex names): #>  [1] a--b b--c c--d d--e e--f f--g g--h h--i i--j a--j"},{"path":"/reference/V.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertices of a graph — V","title":"Vertices of a graph — V","text":"Create vertex sequence (vs) containing vertices graph.","code":""},{"path":"/reference/V.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertices of a graph — V","text":"","code":"V(graph)"},{"path":"/reference/V.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertices of a graph — V","text":"graph graph","code":""},{"path":"/reference/V.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertices of a graph — V","text":"vertex sequence containing vertices, order numeric vertex ids.","code":""},{"path":"/reference/V.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertices of a graph — V","text":"vertex sequence just name says : sequence vertices. Vertex sequences usually used igraph function arguments refer vertices graph. vertex sequence tied graph refers : really denoted specific vertices graph, used together another graph. implementation level, vertex sequence simply vector containing numeric vertex ids, special class attribute makes possible perform graph specific operations , like selecting subset vertices based graph structure, vertex attributes. vertex sequence often created V() function. result includes vertices increasing vertex id order. vertex sequence can indexed numeric vector, just like regular R vector. See [.igraph.vs additional links vertex sequence operations .","code":""},{"path":"/reference/V.html","id":"indexing-vertex-sequences","dir":"Reference","previous_headings":"","what":"Indexing vertex sequences","title":"Vertices of a graph — V","text":"Vertex sequences mostly behave like regular vectors, additional indexing operations specific ; e.g. selecting vertices based graph structure, based vertex attributes. See [.igraph.vs details.","code":""},{"path":"/reference/V.html","id":"querying-or-setting-attributes","dir":"Reference","previous_headings":"","what":"Querying or setting attributes","title":"Vertices of a graph — V","text":"Vertex sequences can used query set attributes vertices sequence. See $.igraph.vs() details.","code":""},{"path":[]},{"path":"/reference/V.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertices of a graph — V","text":"","code":"# Vertex ids of an unnamed graph g <- make_ring(10) V(g) #> + 10/10 vertices, from 7e272c9: #>  [1]  1  2  3  4  5  6  7  8  9 10  # Vertex ids of a named graph g2 <- make_ring(10) %>%   set_vertex_attr(\"name\", value = letters[1:10]) V(g2) #> + 10/10 vertices, named, from bd2565b: #>  [1] a b c d e f g h i j"},{"path":"/reference/aaa-igraph-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The igraph package — igraph-package","title":"The igraph package — igraph-package","text":"igraph library R package network analysis.","code":""},{"path":"/reference/aaa-igraph-package.html","id":"introduction","dir":"Reference","previous_headings":"","what":"Introduction","title":"The igraph package — igraph-package","text":"main goals igraph library provide set data types functions 1) pain-free implementation graph algorithms, 2) fast handling large graphs, millions vertices edges, 3) allowing rapid prototyping via high level languages like R.","code":""},{"path":"/reference/aaa-igraph-package.html","id":"igraph-graphs","dir":"Reference","previous_headings":"","what":"igraph graphs","title":"The igraph package — igraph-package","text":"igraph graphs class ‘igraph’. printed screen special format, example, ring graph created using make_ring(): ‘IGRAPH’ denotes igraph graph. come four bits denote kind graph: first ‘U’ undirected ‘D’ directed graphs. second ‘N’ named graph (.e. graph ‘name’ vertex attribute set). third ‘W’ weighted graphs (.e. ‘weight’ edge attribute set). fourth ‘B’ bipartite graphs (.e. ‘type’ vertex attribute set). come two numbers, number vertices number edges graph, double dash, name graph (‘name’ graph attribute) printed present. second line optional contains attributes graph. graph ‘name’ graph attribute, type character, two graph attributes called ‘mutual’ ‘circular’, complex type. complex type simply anything numeric character. See documentation print.igraph() details. want see edges graph well, use print_all() function:","code":"IGRAPH U--- 10 10 -- Ring graph     + attr: name (g/c), mutual (g/x), circular (g/x) > print_all(g)     IGRAPH badcafe U--- 10 10 -- Ring graph     + attr: name (g/c), mutual (g/x), circular (g/x)     + edges:      [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10"},{"path":"/reference/aaa-igraph-package.html","id":"creating-graphs","dir":"Reference","previous_headings":"","what":"Creating graphs","title":"The igraph package — igraph-package","text":"many functions igraph creating graphs, deterministic stochastic; stochastic graph constructors called ‘games’. create small graphs given structure probably graph_from_literal() function easiest. uses R's formula interface, manual page contains many examples. Another option graph(), takes numeric vertex ids directly. graph_from_atlas() creates graph Graph Atlas, make_graph() can create special graphs. create graphs field data, graph_from_edgelist(), graph_from_data_frame() graph_from_adjacency_matrix() probably best choices. igraph package includes classic random graphs like Erdos-Renyi GNP GNM graphs (sample_gnp(), sample_gnm()) recent  popular models, like preferential attachment (sample_pa()) small-world model (sample_smallworld()).","code":""},{"path":"/reference/aaa-igraph-package.html","id":"vertex-and-edge-ids","dir":"Reference","previous_headings":"","what":"Vertex and edge IDs","title":"The igraph package — igraph-package","text":"Vertices edges numerical vertex ids igraph. Vertex ids always consecutive start one. .e. graph \\(n\\) vertices vertex ids \\(1\\) \\(n\\). operation changes number vertices graphs, e.g. subgraph created via induced_subgraph(), vertices renumbered satisfy criteria. true edges well, edge ids always one \\(m\\), total number edges graph. often desirable follow vertices along number graph operations, vertex ids allow renumbering. solution assign attributes vertices. kept operations, possible. See attributes next section.","code":""},{"path":"/reference/aaa-igraph-package.html","id":"attributes","dir":"Reference","previous_headings":"","what":"Attributes","title":"The igraph package — igraph-package","text":"igraph possible assign attributes vertices edges graph, graph . igraph provides flexible constructs selecting set vertices edges based attribute values, see vertex_attr(), V() E() details. vertex/edge/graph attributes treated specially. One ‘name’ attribute. used printing graph instead numerical ids, exists. Vertex names can also used specify vector set vertices, igraph functions. E.g. degree() v argument gives vertices degree calculated. argument can given character vector vertex names. Edges can also ‘name’ attribute, treated specially well. Just like vertices, edges can also selected based names, e.g. delete_edges() functions. note , vertex names can also used select edges. form ‘|’, ‘’ ‘’ vertex names, select single, possibly directed, edge going ‘’ ‘’. two forms can also mixed edge selector. attributes define visualization parameters, see igraph.plotting details. Attribute values can set R object, note storing graph file formats might result loss complex attribute values. attribute values preserved use base::save() base::load() store/retrieve graphs.","code":""},{"path":"/reference/aaa-igraph-package.html","id":"visualization","dir":"Reference","previous_headings":"","what":"Visualization","title":"The igraph package — igraph-package","text":"igraph provides three different ways visualization. first plot.igraph() function. (Actually need write plot.igraph(), plot() enough. function uses regular R graphics can used R device. second function tkplot(), uses Tk GUI basic interactive graph manipulation. (Tk quite resource hungry, try large graphs.) third way requires rgl package uses OpenGL. See rglplot() function details. Make sure read igraph.plotting start plotting graphs.","code":""},{"path":"/reference/aaa-igraph-package.html","id":"file-formats","dir":"Reference","previous_headings":"","what":"File formats","title":"The igraph package — igraph-package","text":"igraph can handle various graph file formats, usually reading writing. suggest use GraphML file format graphs, except graphs big. big graphs simpler format recommended. See read_graph() write_graph() details.","code":""},{"path":"/reference/aaa-igraph-package.html","id":"further-information","dir":"Reference","previous_headings":"","what":"Further information","title":"The igraph package — igraph-package","text":"igraph homepage https://igraph.org. See especially documentation section. Join discussion forum https://igraph.discourse.group questions comments.","code":""},{"path":"/reference/add_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Add edges to a graph — add_edges","title":"Add edges to a graph — add_edges","text":"new edges given vertex sequence, e.g. internal numeric vertex ids, vertex names. first edge points edges[1] edges[2], second edges[3] edges[4], etc.","code":""},{"path":"/reference/add_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add edges to a graph — add_edges","text":"","code":"add_edges(graph, edges, ..., attr = list())"},{"path":"/reference/add_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add edges to a graph — add_edges","text":"graph input graph edges edges add, vertex sequence even number vertices. ... Additional arguments, must named, added edge attributes, newly added edges. See also details . attr named list, elements added edge attributes, newly added edges. See also details .","code":""},{"path":"/reference/add_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add edges to a graph — add_edges","text":"graph, edges (attributes) added.","code":""},{"path":"/reference/add_edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add edges to a graph — add_edges","text":"attributes supplied, present graph, values original edges graph set NA.","code":""},{"path":[]},{"path":"/reference/add_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add edges to a graph — add_edges","text":"","code":"g <- make_empty_graph(n = 5) %>%   add_edges(c(     1, 2,     2, 3,     3, 4,     4, 5   )) %>%   set_edge_attr(\"color\", value = \"red\") %>%   add_edges(c(5, 1), color = \"green\") E(g)[[]] #> + 5/5 edges from 84d1b4b: #>   tail head tid hid color #> 1    1    2   1   2   red #> 2    2    3   2   3   red #> 3    3    4   3   4   red #> 4    4    5   4   5   red #> 5    5    1   5   1 green plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/add_layout_.html","id":null,"dir":"Reference","previous_headings":"","what":"Add layout to graph — add_layout_","title":"Add layout to graph — add_layout_","text":"Add layout graph","code":""},{"path":"/reference/add_layout_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add layout to graph — add_layout_","text":"","code":"add_layout_(graph, ..., overwrite = TRUE)"},{"path":"/reference/add_layout_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add layout to graph — add_layout_","text":"graph input graph. ... Additional arguments passed layout_(). overwrite Whether overwrite layout graph, already one.","code":""},{"path":"/reference/add_layout_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add layout to graph — add_layout_","text":"input graph, layout added.","code":""},{"path":[]},{"path":"/reference/add_layout_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add layout to graph — add_layout_","text":"","code":"(make_star(11) + make_star(11)) %>%   add_layout_(as_star(), component_wise()) %>%   plot() #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/add_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Add vertices to a graph — add_vertices","title":"Add vertices to a graph — add_vertices","text":"attributes supplied, present graph, values original vertices graph set NA.","code":""},{"path":"/reference/add_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add vertices to a graph — add_vertices","text":"","code":"add_vertices(graph, nv, ..., attr = list())"},{"path":"/reference/add_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add vertices to a graph — add_vertices","text":"graph input graph. nv number vertices add. ... Additional arguments, must named, added vertex attributes, newly added vertices. See also details . attr named list, elements added vertex attributes, newly added vertices. See also details .","code":""},{"path":"/reference/add_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add vertices to a graph — add_vertices","text":"graph, vertices (attributes) added.","code":""},{"path":[]},{"path":"/reference/add_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add vertices to a graph — add_vertices","text":"","code":"g <- make_empty_graph() %>%   add_vertices(3, color = \"red\") %>%   add_vertices(2, color = \"green\") %>%   add_edges(c(     1, 2,     2, 3,     3, 4,     4, 5   )) g #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 2 3 #>  #> [[4]] #> [1] 1 2 3 4 #>  #> [[5]] #> [1] 0 1 2 3 #>  #> [[6]] #> [1] 0 1 2 3 #>  #> [[7]] #> [1] 0 1 2 3 4 4 #>  #> [[8]] #> [1] 0 0 1 2 3 4 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$color #> [1] \"red\"   \"red\"   \"red\"   \"green\" \"green\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb2492af0> #>  #> attr(,\"class\") #> [1] \"igraph\" V(g)[[]] #> + 5/5 vertices, from b213d30: #>   color #> 1   red #> 2   red #> 3   red #> 4 green #> 5 green plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/adjacent_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjacent vertices of multiple vertices in a graph — adjacent_vertices","title":"Adjacent vertices of multiple vertices in a graph — adjacent_vertices","text":"function similar neighbors(), queries adjacent vertices multiple vertices .","code":""},{"path":"/reference/adjacent_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjacent vertices of multiple vertices in a graph — adjacent_vertices","text":"","code":"adjacent_vertices(graph, v, mode = c(\"out\", \"in\", \"all\", \"total\"))"},{"path":"/reference/adjacent_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjacent vertices of multiple vertices in a graph — adjacent_vertices","text":"graph Input graph. v vertices query. mode Whether query outgoing (‘’), incoming (‘’) edges, types (‘’). ignored undirected graphs.","code":""},{"path":"/reference/adjacent_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjacent vertices of multiple vertices in a graph — adjacent_vertices","text":"list vertex sequences.","code":""},{"path":[]},{"path":"/reference/adjacent_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjacent vertices of multiple vertices in a graph — adjacent_vertices","text":"","code":"g <- make_graph(\"Zachary\") adjacent_vertices(g, c(1, 34)) #> [[1]] #> + 16/34 vertices, from 3ad30cd: #>  [1]  2  3  4  5  6  7  8  9 11 12 13 14 18 20 22 32 #>  #> [[2]] #> + 17/34 vertices, from 3ad30cd: #>  [1]  9 10 14 15 16 19 20 21 23 24 27 28 29 30 31 32 33 #>"},{"path":"/reference/all_simple_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"List all simple paths from one source — all_simple_paths","title":"List all simple paths from one source — all_simple_paths","text":"function lists simple paths one source vertex another vertex vertices. path simple vertices visits visited .","code":""},{"path":"/reference/all_simple_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all simple paths from one source — all_simple_paths","text":"","code":"all_simple_paths(   graph,   from,   to = V(graph),   mode = c(\"out\", \"in\", \"all\", \"total\"),   cutoff = -1 )"},{"path":"/reference/all_simple_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all simple paths from one source — all_simple_paths","text":"graph input graph. source vertex. target vertex vertices. Defaults vertices. mode Character constant, gives whether shortest paths given vertices calculated directed graphs. shortest paths vertex, considered. , default, corresponding undirected graph used, ie. directed paths searched. argument ignored undirected graphs. cutoff Maximum length path considered. negative, paths lengths considered.","code":""},{"path":"/reference/all_simple_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all simple paths from one source — all_simple_paths","text":"list integer vectors, integer vector path source vertex one target vertices. path given vertex ids.","code":""},{"path":"/reference/all_simple_paths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List all simple paths from one source — all_simple_paths","text":"Note potentially exponentially many paths two vertices graph, may run memory using function, graph lattice-like. function currently ignored multiple loop edges.","code":""},{"path":[]},{"path":"/reference/all_simple_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all simple paths from one source — all_simple_paths","text":"","code":"g <- make_ring(10) all_simple_paths(g, 1, 5) #> [[1]] #> + 5/10 vertices, from 62d1afe: #> [1] 1 2 3 4 5 #>  #> [[2]] #> + 7/10 vertices, from 62d1afe: #> [1]  1 10  9  8  7  6  5 #>  all_simple_paths(g, 1, c(3, 5)) #> [[1]] #> + 3/10 vertices, from 62d1afe: #> [1] 1 2 3 #>  #> [[2]] #> + 5/10 vertices, from 62d1afe: #> [1] 1 2 3 4 5 #>  #> [[3]] #> + 7/10 vertices, from 62d1afe: #> [1]  1 10  9  8  7  6  5 #>  #> [[4]] #> + 9/10 vertices, from 62d1afe: #> [1]  1 10  9  8  7  6  5  4  3 #>"},{"path":"/reference/alpha_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"alpha_centrality() calculates alpha centrality () vertices graph.","code":""},{"path":"/reference/alpha_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"","code":"alpha_centrality(   graph,   nodes = V(graph),   alpha = 1,   loops = FALSE,   exo = 1,   weights = NULL,   tol = 1e-07,   sparse = TRUE )"},{"path":"/reference/alpha_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"graph input graph, can directed undirected. undirected graphs, edges treated reciprocal directed ones. nodes Vertex sequence, vertices alpha centrality values returned. (technical reasons calculated vertices, anyway.) alpha Parameter specifying relative importance endogenous versus exogenous factors determination centrality. See details . loops Whether eliminate loop edges graph calculation. exo exogenous factors, cases either constant -- factor every node, vector giving factor every vertex. Note long vectors truncated short vectors replicated match number vertices. weights character scalar gives name edge attribute use adjacency matrix. NULL, ‘weight’ edge attribute graph used, one. Otherwise, NA, calculation uses standard adjacency matrix. tol Tolerance near-singularities matrix inversion, see solve(). sparse Logical scalar, whether use sparse matrices calculation. ‘Matrix’ package required sparse matrix support","code":""},{"path":"/reference/alpha_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"numeric vector contaning centrality scores selected vertices.","code":""},{"path":"/reference/alpha_centrality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"alpha centrality measure can considered generalization eigenvector centrality directed graphs. proposed Bonacich 2001 (see reference ). alpha centrality vertices graph defined solution following matrix equation: $$x=\\alpha ^T x+e,$$ \\(\\) (necessarily symmetric) adjacency matrix graph, \\(e\\) vector exogenous sources status vertices \\(\\alpha\\) relative importance endogenous versus exogenous factors.","code":""},{"path":"/reference/alpha_centrality.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"Singular adjacency matrices cause problems algorithm, routine may fail certain cases.","code":""},{"path":"/reference/alpha_centrality.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"Bonacich, P. Lloyd, P. (2001). ``Eigenvector-like measures centrality asymmetric relations'' Social Networks, 23, 191-201.","code":""},{"path":[]},{"path":"/reference/alpha_centrality.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/alpha_centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Bonacich alpha centrality scores of network positions — alpha_centrality","text":"","code":"# The examples from Bonacich's paper g.1 <- graph(c(1, 3, 2, 3, 3, 4, 4, 5)) g.2 <- graph(c(2, 1, 3, 1, 4, 1, 5, 1)) g.3 <- graph(c(1, 2, 2, 3, 3, 4, 4, 1, 5, 1)) alpha_centrality(g.1) #> [1] 1 1 3 4 5 alpha_centrality(g.2) #> [1] 5 1 1 1 1 alpha_centrality(g.3, alpha = 0.5) #> [1] 2.533333 2.266667 2.133333 2.066667 1.000000"},{"path":"/reference/are_adjacent.html","id":null,"dir":"Reference","previous_headings":"","what":"Are two vertices adjacent? — are_adjacent","title":"Are two vertices adjacent? — are_adjacent","text":"order vertices matters directed graphs, existence directed (v1, v2) edge queried.","code":""},{"path":"/reference/are_adjacent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are two vertices adjacent? — are_adjacent","text":"","code":"are_adjacent(graph, v1, v2)"},{"path":"/reference/are_adjacent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are two vertices adjacent? — are_adjacent","text":"graph graph. v1 first vertex, tail directed graphs. v2 second vertex, head directed graphs.","code":""},{"path":"/reference/are_adjacent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are two vertices adjacent? — are_adjacent","text":"logical scalar, TRUE (v1, v2) exists graph.","code":""},{"path":[]},{"path":"/reference/are_adjacent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are two vertices adjacent? — are_adjacent","text":"","code":"ug <- make_ring(10) ug #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf649758> #>  #> attr(,\"class\") #> [1] \"igraph\" are_adjacent(ug, 1, 2) #> [1] TRUE are_adjacent(ug, 2, 1) #> [1] TRUE  dg <- make_ring(10, directed = TRUE) dg #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 0 1 2 3 4 5 6 7 8 9 #>  #> [[4]] #>  [1] 1 2 3 4 5 6 7 8 9 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 8 9 #>  #> [[6]] #>  [1] 9 0 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 #>  #> [[8]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf7f5e28> #>  #> attr(,\"class\") #> [1] \"igraph\" are_adjacent(ug, 1, 2) #> [1] TRUE are_adjacent(ug, 2, 1) #> [1] TRUE"},{"path":"/reference/arpack.html","id":null,"dir":"Reference","previous_headings":"","what":"ARPACK eigenvector calculation — arpack_defaults","title":"ARPACK eigenvector calculation — arpack_defaults","text":"Interface ARPACK library calculating eigenvectors sparse matrices","code":""},{"path":"/reference/arpack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARPACK eigenvector calculation — arpack_defaults","text":"","code":"arpack_defaults  arpack(   func,   extra = NULL,   sym = FALSE,   options = arpack_defaults,   env = parent.frame(),   complex = !sym )"},{"path":"/reference/arpack.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ARPACK eigenvector calculation — arpack_defaults","text":"object class list length 14.","code":""},{"path":"/reference/arpack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARPACK eigenvector calculation — arpack_defaults","text":"func function perform matrix-vector multiplication. ARPACK requires perform user. function gets vector \\(x\\) first argument, return \\(Ax\\), \\(\\) “input matrix”. (input matrix never given explicitly.) second argument extra. extra Extra argument supply func. sym Logical scalar, whether input matrix symmetric. Always supply TRUE , since can speed computation. options Options ARPACK, named list overwrite default option values. See details . env environment func evaluated. complex Whether convert eigenvectors returned ARPACK R complex vectors. default done symmetric problems (real eigenvectors/values), non-symmetric ones. non-symmetric problem, sure results real, supply FALSE .","code":""},{"path":"/reference/arpack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARPACK eigenvector calculation — arpack_defaults","text":"named list following members: values Numeric vector, desired eigenvalues. vectors Numeric matrix, desired eigenvectors columns. complex=TRUE (default non-symmetric problems), matrix complex. options named list supplied options information performed calculation, including ARPACK exit code. See details .","code":""},{"path":"/reference/arpack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ARPACK eigenvector calculation — arpack_defaults","text":"ARPACK library solving large scale eigenvalue problems.  package designed compute eigenvalues corresponding eigenvectors general \\(n\\) \\(n\\) matrix \\(\\). appropriate large sparse structured matrices \\(\\) structured means matrix-vector product w <- Av requires order \\(n\\) rather usual order \\(n^2\\) floating point operations. function interface ARPACK. igraph contain ARPACK routines, ones dealing symmetric non-symmetric eigenvalue problems using double precision real numbers. eigenvalue calculation ARPACK (simplest case) involves calculation \\(Av\\) product \\(\\) matrix work \\(v\\) arbitrary vector. function supplied fun argument expected perform product. product can done efficiently, e.g. matrix sparse, arpack() usually able calculate eigenvalues quickly. options argument specifies kind calculation perform. list following members, correspond directly ARPACK parameters. input following fields: bmat Character constant, possible values: ‘’, standard eigenvalue problem, \\(Ax=\\lambda x\\); ‘G’, generalized eigenvalue problem, \\(Ax=\\lambda B x\\). Currently ‘’ supported. n Numeric scalar. dimension eigenproblem. need set call arpack() directly. (.e. needed eigen_centrality(), page_rank(), etc.) Specify eigenvalues/vectors compute, character constant exactly two characters. Possible values symmetric input matrices: \"LA\" Compute nev largest (algebraic) eigenvalues. \"SA\" Compute nev smallest (algebraic) eigenvalues. \"LM\" Compute nev largest (magnitude) eigenvalues. \"SM\" Compute nev smallest (magnitude) eigenvalues. \"\" Compute nev eigenvalues, half end spectrum. nev odd, compute one high end low end. Possible values non-symmetric input matrices: \"LM\" Compute nev eigenvalues largest magnitude. \"SM\" Compute nev eigenvalues smallest magnitude. \"LR\" Compute nev eigenvalues largest real part. \"SR\" Compute nev eigenvalues smallest real part. \"LI\" Compute nev eigenvalues largest imaginary part. \"SI\" Compute nev eigenvalues smallest imaginary part. parameter sometimes overwritten various functions, e.g. page_rank() always sets ‘LM’. nev Numeric scalar. number eigenvalues computed. tol Numeric scalar. Stopping criterion: relative accuracy Ritz value considered acceptable error less tol times estimated value. set zero machine precision used. ncv Number Lanczos vectors generated. ldv Numberic scalar. set zero current implementation. ishift Either zero one. zero shifts provided user via reverse communication. one exact shifts respect reduced tridiagonal matrix \\(T\\).  Please always set one. maxiter Maximum number Arnoldi update iterations allowed. nb Blocksize used recurrence. Please always leave default value, one. mode type eigenproblem solved.  Possible values input matrix symmetric: 1 \\(Ax=\\lambda x\\), \\(\\) symmetric. 2 \\(Ax=\\lambda Mx\\), \\(\\) symmetric, \\(M\\) symmetric positive definite. 3 \\(Kx=\\lambda Mx\\), \\(K\\) symmetric, \\(M\\) symmetric positive semi-definite. 4 \\(Kx=\\lambda KGx\\), \\(K\\) symmetric positive semi-definite, \\(KG\\) symmetric indefinite. 5 \\(Ax=\\lambda Mx\\), \\(\\) symmetric, \\(M\\) symmetric positive semi-definite. (Cayley transformed mode.) Please note mode==1 tested values might work properly. Possible values input matrix symmetric: 1 \\(Ax=\\lambda x\\). 2 \\(Ax=\\lambda Mx\\), \\(M\\) symmetric positive definite. 3 \\(Ax=\\lambda Mx\\), \\(M\\) symmetric semi-definite. 4 \\(Ax=\\lambda Mx\\), \\(M\\) symmetric semi-definite. Please note mode==1 tested values might work properly. start used currently. Later used set starting vector. sigma used currently. sigmai use currently. Please see ARPACK documentation additional details.","code":""},{"path":"/reference/arpack.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ARPACK eigenvector calculation — arpack_defaults","text":"D.C. Sorensen, Implicit Application Polynomial Filters k-Step Arnoldi Method. SIAM J. Matr. Anal. Apps., 13 (1992), pp 357-385. R.B. Lehoucq, Analysis Implementation Implicitly Restarted Arnoldi Iteration. Rice University Technical Report TR95-13, Department Computational Applied Mathematics. B.N. Parlett & Y. Saad, Complex Shift Invert Strategies Real Matrices. Linear Algebra Applications, vol 88/89, pp 575-595, (1987).","code":""},{"path":[]},{"path":"/reference/arpack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ARPACK eigenvector calculation — arpack_defaults","text":"Rich Lehoucq, Kristi Maschhoff, Danny Sorensen, Chao Yang ARPACK, Gabor Csardi csardi.gabor@gmail.com R interface.","code":""},{"path":"/reference/arpack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARPACK eigenvector calculation — arpack_defaults","text":"","code":"# Identity matrix f <- function(x, extra = NULL) x arpack(f, options = list(n = 10, nev = 2, ncv = 4), sym = TRUE) #> $values #> [1] 1 1 #>  #> $vectors #>             [,1]        [,2] #>  [1,] -0.4424629 -0.03298663 #>  [2,]  0.2469133  0.17420776 #>  [3,]  0.1768547 -0.52408100 #>  [4,]  0.3529599 -0.39594066 #>  [5,]  0.1383023  0.17987625 #>  [6,] -0.1047718 -0.28421958 #>  [7,] -0.2260154  0.47623993 #>  [8,]  0.4637003  0.15001895 #>  [9,]  0.2281016  0.39385425 #> [10,]  0.4890462  0.13987885 #>  #> $options #> $options$bmat #> [1] \"I\" #>  #> $options$n #> [1] 10 #>  #> $options$which #> [1] \"XX\" #>  #> $options$nev #> [1] 2 #>  #> $options$tol #> [1] 0 #>  #> $options$ncv #> [1] 4 #>  #> $options$ldv #> [1] 0 #>  #> $options$ishift #> [1] 1 #>  #> $options$maxiter #> [1] 3000 #>  #> $options$nb #> [1] 1 #>  #> $options$mode #> [1] 1 #>  #> $options$start #> [1] 0 #>  #> $options$sigma #> [1] 0 #>  #> $options$sigmai #> [1] 0 #>  #> $options$info #> [1] 0 #>  #> $options$iter #> [1] 1 #>  #> $options$nconv #> [1] 2 #>  #> $options$numop #> [1] 4 #>  #> $options$numopb #> [1] 0 #>  #> $options$numreo #> [1] 4 #>  #>   # Graph laplacian of a star graph (undirected), n>=2 # Note that this is a linear operation f <- function(x, extra = NULL) {   y <- x   y[1] <- (length(x) - 1) * x[1] - sum(x[-1])   for (i in 2:length(x)) {     y[i] <- x[i] - x[1]   }   y }  arpack(f, options = list(n = 10, nev = 1, ncv = 3), sym = TRUE) #> $values #> [1] 10 #>  #> $vectors #>  [1]  0.9486833 -0.1054093 -0.1054093 -0.1054093 -0.1054093 -0.1054093 #>  [7] -0.1054093 -0.1054093 -0.1054093 -0.1054093 #>  #> $options #> $options$bmat #> [1] \"I\" #>  #> $options$n #> [1] 10 #>  #> $options$which #> [1] \"XX\" #>  #> $options$nev #> [1] 1 #>  #> $options$tol #> [1] 0 #>  #> $options$ncv #> [1] 3 #>  #> $options$ldv #> [1] 0 #>  #> $options$ishift #> [1] 1 #>  #> $options$maxiter #> [1] 3000 #>  #> $options$nb #> [1] 1 #>  #> $options$mode #> [1] 1 #>  #> $options$start #> [1] 0 #>  #> $options$sigma #> [1] 0 #>  #> $options$sigmai #> [1] 0 #>  #> $options$info #> [1] 0 #>  #> $options$iter #> [1] 1 #>  #> $options$nconv #> [1] 1 #>  #> $options$numop #> [1] 3 #>  #> $options$numopb #> [1] 0 #>  #> $options$numreo #> [1] 3 #>  #>   # double check eigen(laplacian_matrix(make_star(10, mode = \"undirected\"))) #> eigen() decomposition #> $values #>  [1] 1.000000e+01 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 #>  [6] 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 3.552714e-15 #>  #> $vectors #>             [,1]          [,2]          [,3]          [,4]          [,5] #>  [1,]  0.9486833  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #>  [2,] -0.1054093  2.220446e-16  1.850372e-17  2.775558e-17  3.700743e-17 #>  [3,] -0.1054093  9.217652e-01 -6.785364e-02  8.561849e-02  5.619618e-02 #>  [4,] -0.1054093 -5.739675e-02  9.080341e-01 -6.385514e-02  1.089764e-01 #>  [5,] -0.1054093 -1.873938e-01 -6.231407e-02 -1.480006e-01 -4.117769e-02 #>  [6,] -0.1054093 -1.873938e-01 -6.231407e-02 -8.668417e-02  5.645815e-02 #>  [7,] -0.1054093 -5.739675e-02 -1.645470e-01 -3.137915e-01 -7.164727e-01 #>  [8,] -0.1054093 -5.739675e-02 -1.645470e-01 -3.528665e-01  1.280199e-01 #>  [9,] -0.1054093 -1.873938e-01 -6.231407e-02  8.577394e-01 -2.244443e-01 #> [10,] -0.1054093 -1.873938e-01 -3.241442e-01  2.184005e-02  6.324441e-01 #>                [,6]        [,7]          [,8]       [,9]      [,10] #>  [1,]  0.000000e+00  0.00000000  0.000000e+00  0.0000000 -0.3162278 #>  [2,]  1.850372e-17  0.00000000 -1.850372e-17  0.9428090 -0.3162278 #>  [3,]  3.890906e-02  0.05650060  7.449795e-02 -0.1178511 -0.3162278 #>  [4,]  8.337636e-02 -0.11274209 -1.075362e-01 -0.1178511 -0.3162278 #>  [5,] -2.557185e-02 -0.12385352  8.924165e-01 -0.1178511 -0.3162278 #>  [6,]  4.504285e-02  0.90473873 -6.868659e-02 -0.1178511 -0.3162278 #>  [7,]  3.591786e-01 -0.18466585 -2.640472e-01 -0.1178511 -0.3162278 #>  [8,] -7.745345e-01 -0.18466585 -2.640472e-01 -0.1178511 -0.3162278 #>  [9,] -1.967497e-01 -0.08049949 -6.868659e-02 -0.1178511 -0.3162278 #> [10,]  4.703491e-01 -0.27481251 -1.939106e-01 -0.1178511 -0.3162278 #>   ## First three eigenvalues of the adjacency matrix of a graph ## We need the 'Matrix' package for this if (require(Matrix)) {   set.seed(42)   g <- sample_gnp(1000, 5 / 1000)   M <- as_adj(g, sparse = TRUE)   f2 <- function(x, extra = NULL) {     cat(\".\")     as.vector(M %*% x)   }   baev <- arpack(f2, sym = TRUE, options = list(     n = vcount(g), nev = 3, ncv = 8,     which = \"LM\", maxiter = 2000   )) } #> Loading required package: Matrix},{"path":"/reference/articulation_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Articulation points and bridges of a graph — articulation_points","title":"Articulation points and bridges of a graph — articulation_points","text":"articulation_points() finds articulation points (cut vertices)","code":""},{"path":"/reference/articulation_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Articulation points and bridges of a graph — articulation_points","text":"","code":"articulation_points(graph)  bridges(graph)"},{"path":"/reference/articulation_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Articulation points and bridges of a graph — articulation_points","text":"graph input graph. treated undirected graph, even directed.","code":""},{"path":"/reference/articulation_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Articulation points and bridges of a graph — articulation_points","text":"articulation_points(), numeric vector giving vertex IDs articulation points input graph. bridges(), numeric vector giving edge IDs bridges input graph.","code":""},{"path":"/reference/articulation_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Articulation points and bridges of a graph — articulation_points","text":"Articulation points cut vertices vertices whose removal increases number connected components graph. Similarly, bridges cut-edges edges whose removal increases number connected components graph. original graph connected, removal single articulation point single bridge makes undirected. graph contains articulation points, vertex connectivity least two.","code":""},{"path":[]},{"path":"/reference/articulation_points.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Articulation points and bridges of a graph — articulation_points","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/articulation_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Articulation points and bridges of a graph — articulation_points","text":"","code":"g <- disjoint_union(make_full_graph(5), make_full_graph(5)) clu <- components(g)$membership g <- add_edges(g, c(match(1, clu), match(2, clu))) articulation_points(g) #> + 2/10 vertices, from 9cca5ac: #> [1] 6 1  g <- make_graph(\"krackhardt_kite\") bridges(g) #> + 2/18 edges from 5f56ebe: #> [1] 9--10 8-- 9"},{"path":"/reference/as.directed.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between directed and undirected graphs — as.directed","title":"Convert between directed and undirected graphs — as.directed","text":".directed() converts undirected graph directed, .undirected() opposite, converts directed graph undirected.","code":""},{"path":"/reference/as.directed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between directed and undirected graphs — as.directed","text":"","code":"as.directed(graph, mode = c(\"mutual\", \"arbitrary\", \"random\", \"acyclic\"))  as.undirected(   graph,   mode = c(\"collapse\", \"each\", \"mutual\"),   edge.attr.comb = igraph_opt(\"edge.attr.comb\") )"},{"path":"/reference/as.directed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between directed and undirected graphs — as.directed","text":"graph graph convert. mode Character constant, defines conversion algorithm. .directed() can mutual arbitrary. .undirected() can , collapse mutual. See details . edge.attr.comb Specifies edge attributes, mode=\"collapse\" mode=\"mutual\".  cases many edges might mapped single one new graph, attributes combined. Please see attribute.combination() details .","code":""},{"path":"/reference/as.directed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between directed and undirected graphs — as.directed","text":"new graph object.","code":""},{"path":"/reference/as.directed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert between directed and undirected graphs — as.directed","text":"Conversion algorithms .directed(): \"arbitrary\" number edges graph stays , arbitrarily directed edge created undirected edge, direction edge deterministic (.e. always points way call function multiple times). \"mutual\" Two directed edges created undirected edge, one direction. \"random\" number edges graph stays , randomly directed edge created undirected edge. get different results call function multiple times graph. \"acyclic\" number edges graph stays , directed edge created undirected edge resulting graph guaranteed acyclic. achieved ensuring edges always point lower index vertex higher index. Note graph may include cycles length 1 original graph contained loop edges. Conversion algorithms .undirected(): \"\" number edges remains constant, undirected edge created directed one, version might create graphs multiple edges. \"collapse\" One undirected edge created pair vertices connected least one directed edge, multiple edges created. \"mutual\" One undirected edge created pair mutual edges. Non-mutual edges ignored. mode might create multiple edges one mutual edge pairs pair vertices.","code":""},{"path":[]},{"path":"/reference/as.directed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert between directed and undirected graphs — as.directed","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/as.directed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between directed and undirected graphs — as.directed","text":"","code":"g <- make_ring(10) as.directed(g, \"mutual\") #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 1 2 3 4 5 6 7 8 9 9 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1]  0  9 10  1 11  2 12  3 13  4 14  5 15  6 16  7 17  8 19 18 #>  #> [[6]] #>  [1] 10 19  0 11  1 12  2 13  3 14  4 15  5 16  6 17  7 18  9  8 #>  #> [[7]] #>  [1]  0  2  4  6  8 10 12 14 16 18 20 #>  #> [[8]] #>  [1]  0  2  4  6  8 10 12 14 16 18 20 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbd4d0d28> #>  #> attr(,\"class\") #> [1] \"igraph\" g2 <- make_star(10) as.undirected(g) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 2 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbd5bfa50> #>  #> attr(,\"class\") #> [1] \"igraph\"  # Combining edge attributes g3 <- make_ring(10, directed = TRUE, mutual = TRUE) E(g3)$weight <- seq_len(ecount(g3)) ug3 <- as.undirected(g3) print(ug3, e = TRUE) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 0 8 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 8 9 #>  #> [[6]] #>  [1] 0 8 1 2 3 4 5 6 7 9 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] TRUE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$weight #>  [1]  5  9 13 17 21 25 29 33 21 37 #>  #>  #>  #> [[10]] #> <environment: 0x564cbd70e7e8> #>  #> attr(,\"class\") #> [1] \"igraph\" if (FALSE) { x11(width = 10, height = 5) layout(rbind(1:2)) plot(g3, layout = layout_in_circle, edge.label = E(g3)$weight) plot(ug3, layout = layout_in_circle, edge.label = E(ug3)$weight) }  g4 <- graph(c(   1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 4,   6, 7, 7, 6, 7, 8, 7, 8, 8, 7, 8, 9, 8, 9,   9, 8, 9, 8, 9, 9, 10, 10, 10, 10 )) E(g4)$weight <- seq_len(ecount(g4)) ug4 <- as.undirected(g4,   mode = \"mutual\",   edge.attr.comb = list(weight = length) ) print(ug4, e = TRUE) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 6 7 8 8 8 9 9 #>  #> [[4]] #> [1] 5 6 7 7 8 9 9 #>  #> [[5]] #> [1] 0 1 3 2 4 6 5 #>  #> [[6]] #> [1] 0 1 3 2 4 6 5 #>  #> [[7]] #>  [1] 0 0 0 0 0 0 0 1 2 5 7 #>  #> [[8]] #>  [1] 0 0 0 0 0 0 1 2 4 5 7 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$weight #> [1] 2 2 2 2 1 1 1 #>  #>  #>  #> [[10]] #> <environment: 0x564cbd9491f0> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/as.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion to igraph — as.igraph","title":"Conversion to igraph — as.igraph","text":"functions convert various objects igraph graphs.","code":""},{"path":"/reference/as.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion to igraph — as.igraph","text":"","code":"as.igraph(x, ...)"},{"path":"/reference/as.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion to igraph — as.igraph","text":"x object convert. ... Additional arguments. None currently.","code":""},{"path":"/reference/as.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion to igraph — as.igraph","text":"functions return igraph graph.","code":""},{"path":"/reference/as.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conversion to igraph — as.igraph","text":"can use .igraph() convert various objects igraph graphs. Right now following objects supported: codeigraphHRG objects created fit_hrg() consensus_tree() functions.","code":""},{"path":"/reference/as.igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conversion to igraph — as.igraph","text":"Gabor Csardi csardi.gabor@gmail.com.","code":""},{"path":"/reference/as.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conversion to igraph — as.igraph","text":"","code":"g <- make_full_graph(5) + make_full_graph(5) hrg <- fit_hrg(g) as.igraph(hrg) #> [[1]] #> [1] 19 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 10 11 12 13 14 15 16 17 18 10 11 12 13 14 15 16 17 18 #>  #> [[4]] #>  [1] 13  0  1 15  7 11 18  5  6 17 12  3  2  8  4 14 16  9 #>  #> [[5]] #>  [1]  0  9  1 10  2 11 12  3  4 13 14  5 15  6  7 16  8 17 #>  #> [[6]] #>  [1]  1  2 12 11 14  7  8  4 13 17  5 10  0 15  3 16  9  6 #>  #> [[7]] #>  [1]  0  0  0  0  0  0  0  0  0  0  0  2  4  6  8 10 12 14 16 18 #>  #> [[8]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 10 11 12 13 14 15 16 17 18 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Fitted HRG\" #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"g1\" \"g2\" \"g3\" \"g4\" \"g5\" #> [16] \"g6\" \"g7\" \"g8\" \"g9\" #>  #> [[9]][[3]]$prob #>  [1] NA NA NA NA NA NA NA NA NA NA  0  1  1  1  1  1  1  1  1 #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb958ebc0> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/as.matrix.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert igraph objects to adjacency or edge list matrices — as.matrix.igraph","title":"Convert igraph objects to adjacency or edge list matrices — as.matrix.igraph","text":"Get adjacency edgelist representation network stored igraph object.","code":""},{"path":"/reference/as.matrix.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert igraph objects to adjacency or edge list matrices — as.matrix.igraph","text":"","code":"# S3 method for igraph as.matrix(x, matrix.type = c(\"adjacency\", \"edgelist\"), ...)"},{"path":"/reference/as.matrix.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert igraph objects to adjacency or edge list matrices — as.matrix.igraph","text":"x object class igraph, network matrix.type character, type matrix return, currently \"adjacency\" \"edgelist\" supported ... arguments /methods","code":""},{"path":"/reference/as.matrix.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert igraph objects to adjacency or edge list matrices — as.matrix.igraph","text":"Depending value matrix.type either square adjacency matrix two-column numeric matrix representing edgelist.","code":""},{"path":"/reference/as.matrix.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert igraph objects to adjacency or edge list matrices — as.matrix.igraph","text":"matrix.type \"edgelist\", two-column numeric edge list matrix returned.  value attrname ignored. matrix.type \"adjacency\", square adjacency matrix returned. adjacency matrices, can use attr keyword argument use values edge attribute matrix cells. See documentation as_adjacency_matrix details. arguments passed ... passed either as_adjacency_matrix() as_edgelist() depending value matrix.type.","code":""},{"path":[]},{"path":"/reference/as.matrix.igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert igraph objects to adjacency or edge list matrices — as.matrix.igraph","text":"Michal Bojanowski, originally intergraph package","code":""},{"path":"/reference/as.matrix.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert igraph objects to adjacency or edge list matrices — as.matrix.igraph","text":"","code":"g <- make_graph(\"zachary\") as.matrix(g, \"adjacency\") #> 34 x 34 sparse Matrix of class \"dgCMatrix\" #>                                                                           #>  [1,] . 1 1 1 1 1 1 1 1 . 1 1 1 1 . . . 1 . 1 . 1 . . . . . . . . . 1 . . #>  [2,] 1 . 1 1 . . . 1 . . . . . 1 . . . 1 . 1 . 1 . . . . . . . . 1 . . . #>  [3,] 1 1 . 1 . . . 1 1 1 . . . 1 . . . . . . . . . . . . . 1 1 . . . 1 . #>  [4,] 1 1 1 . . . . 1 . . . . 1 1 . . . . . . . . . . . . . . . . . . . . #>  [5,] 1 . . . . . 1 . . . 1 . . . . . . . . . . . . . . . . . . . . . . . #>  [6,] 1 . . . . . 1 . . . 1 . . . . . 1 . . . . . . . . . . . . . . . . . #>  [7,] 1 . . . 1 1 . . . . . . . . . . 1 . . . . . . . . . . . . . . . . . #>  [8,] 1 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #>  [9,] 1 . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1 1 #> [10,] . . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 #> [11,] 1 . . . 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . #> [12,] 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #> [13,] 1 . . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #> [14,] 1 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 #> [15,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 #> [16,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 #> [17,] . . . . . 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . #> [18,] 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #> [19,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 #> [20,] 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 #> [21,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 #> [22,] 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . #> [23,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 #> [24,] . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1 . 1 . . 1 1 #> [25,] . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1 . . . 1 . . #> [26,] . . . . . . . . . . . . . . . . . . . . . . . 1 1 . . . . . . 1 . . #> [27,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . . . 1 #> [28,] . . 1 . . . . . . . . . . . . . . . . . . . . 1 1 . . . . . . . . 1 #> [29,] . . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1 #> [30,] . . . . . . . . . . . . . . . . . . . . . . . 1 . . 1 . . . . . 1 1 #> [31,] . 1 . . . . . . 1 . . . . . . . . . . . . . . . . . . . . . . . 1 1 #> [32,] 1 . . . . . . . . . . . . . . . . . . . . . . . 1 1 . . 1 . . . 1 1 #> [33,] . . 1 . . . . . 1 . . . . . 1 1 . . 1 . 1 . 1 1 . . . . . 1 1 1 . 1 #> [34,] . . . . . . . . 1 1 . . . 1 1 1 . . 1 1 1 . 1 1 . . 1 1 1 1 1 1 1 . as.matrix(g, \"edgelist\") #>       [,1] [,2] #>  [1,]    1    2 #>  [2,]    1    3 #>  [3,]    1    4 #>  [4,]    1    5 #>  [5,]    1    6 #>  [6,]    1    7 #>  [7,]    1    8 #>  [8,]    1    9 #>  [9,]    1   11 #> [10,]    1   12 #> [11,]    1   13 #> [12,]    1   14 #> [13,]    1   18 #> [14,]    1   20 #> [15,]    1   22 #> [16,]    1   32 #> [17,]    2    3 #> [18,]    2    4 #> [19,]    2    8 #> [20,]    2   14 #> [21,]    2   18 #> [22,]    2   20 #> [23,]    2   22 #> [24,]    2   31 #> [25,]    3    4 #> [26,]    3    8 #> [27,]    3   28 #> [28,]    3   29 #> [29,]    3   33 #> [30,]    3   10 #> [31,]    3    9 #> [32,]    3   14 #> [33,]    4    8 #> [34,]    4   13 #> [35,]    4   14 #> [36,]    5    7 #> [37,]    5   11 #> [38,]    6    7 #> [39,]    6   11 #> [40,]    6   17 #> [41,]    7   17 #> [42,]    9   31 #> [43,]    9   33 #> [44,]    9   34 #> [45,]   10   34 #> [46,]   14   34 #> [47,]   15   33 #> [48,]   15   34 #> [49,]   16   33 #> [50,]   16   34 #> [51,]   19   33 #> [52,]   19   34 #> [53,]   20   34 #> [54,]   21   33 #> [55,]   21   34 #> [56,]   23   33 #> [57,]   23   34 #> [58,]   24   26 #> [59,]   24   28 #> [60,]   24   33 #> [61,]   24   34 #> [62,]   24   30 #> [63,]   25   26 #> [64,]   25   28 #> [65,]   25   32 #> [66,]   26   32 #> [67,]   27   30 #> [68,]   27   34 #> [69,]   28   34 #> [70,]   29   32 #> [71,]   29   34 #> [72,]   30   33 #> [73,]   30   34 #> [74,]   31   33 #> [75,]   31   34 #> [76,]   32   33 #> [77,]   32   34 #> [78,]   33   34 # use edge attribute \"weight\" E(g)$weight <- rep(1:10, each = ecount(g)) #> Warning: number of items to replace is not a multiple of replacement length as.matrix(g, \"adjacency\", sparse = FALSE, attr = \"weight\") #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    0    1    1    1    1    1    1    1    1     0     1     1     1 #>  [2,]    1    0    1    1    0    0    0    1    0     0     0     0     0 #>  [3,]    1    1    0    1    0    0    0    1    1     1     0     0     0 #>  [4,]    1    1    1    0    0    0    0    1    0     0     0     0     1 #>  [5,]    1    0    0    0    0    0    1    0    0     0     1     0     0 #>  [6,]    1    0    0    0    0    0    1    0    0     0     1     0     0 #>  [7,]    1    0    0    0    1    1    0    0    0     0     0     0     0 #>  [8,]    1    1    1    1    0    0    0    0    0     0     0     0     0 #>  [9,]    1    0    1    0    0    0    0    0    0     0     0     0     0 #> [10,]    0    0    1    0    0    0    0    0    0     0     0     0     0 #> [11,]    1    0    0    0    1    1    0    0    0     0     0     0     0 #> [12,]    1    0    0    0    0    0    0    0    0     0     0     0     0 #> [13,]    1    0    0    1    0    0    0    0    0     0     0     0     0 #> [14,]    1    1    1    1    0    0    0    0    0     0     0     0     0 #> [15,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [16,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [17,]    0    0    0    0    0    1    1    0    0     0     0     0     0 #> [18,]    1    1    0    0    0    0    0    0    0     0     0     0     0 #> [19,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [20,]    1    1    0    0    0    0    0    0    0     0     0     0     0 #> [21,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [22,]    1    1    0    0    0    0    0    0    0     0     0     0     0 #> [23,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [24,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [25,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [26,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [27,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [28,]    0    0    1    0    0    0    0    0    0     0     0     0     0 #> [29,]    0    0    1    0    0    0    0    0    0     0     0     0     0 #> [30,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [31,]    0    1    0    0    0    0    0    0    1     0     0     0     0 #> [32,]    1    0    0    0    0    0    0    0    0     0     0     0     0 #> [33,]    0    0    1    0    0    0    0    0    1     0     0     0     0 #> [34,]    0    0    0    0    0    0    0    0    1     1     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     1     0     0     0     1     0     1     0     1     0     0     0 #>  [2,]     1     0     0     0     1     0     1     0     1     0     0     0 #>  [3,]     1     0     0     0     0     0     0     0     0     0     0     0 #>  [4,]     1     0     0     0     0     0     0     0     0     0     0     0 #>  [5,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [6,]     0     0     0     1     0     0     0     0     0     0     0     0 #>  [7,]     0     0     0     1     0     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [11,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [12,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [13,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [14,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [15,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [16,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [17,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [18,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [19,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [20,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [21,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [22,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [23,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [24,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [25,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [26,]     0     0     0     0     0     0     0     0     0     0     1     1 #> [27,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [28,]     0     0     0     0     0     0     0     0     0     0     1     1 #> [29,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [30,]     0     0     0     0     0     0     0     0     0     0     1     0 #> [31,]     0     0     0     0     0     0     0     0     0     0     0     0 #> [32,]     0     0     0     0     0     0     0     0     0     0     0     1 #> [33,]     0     1     1     0     0     1     0     1     0     1     1     0 #> [34,]     1     1     1     0     0     1     1     1     0     1     1     0 #>       [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] #>  [1,]     0     0     0     0     0     0     1     0     0 #>  [2,]     0     0     0     0     0     1     0     0     0 #>  [3,]     0     0     1     1     0     0     0     1     0 #>  [4,]     0     0     0     0     0     0     0     0     0 #>  [5,]     0     0     0     0     0     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     1     0     1     1 #> [10,]     0     0     0     0     0     0     0     0     1 #> [11,]     0     0     0     0     0     0     0     0     0 #> [12,]     0     0     0     0     0     0     0     0     0 #> [13,]     0     0     0     0     0     0     0     0     0 #> [14,]     0     0     0     0     0     0     0     0     1 #> [15,]     0     0     0     0     0     0     0     1     1 #> [16,]     0     0     0     0     0     0     0     1     1 #> [17,]     0     0     0     0     0     0     0     0     0 #> [18,]     0     0     0     0     0     0     0     0     0 #> [19,]     0     0     0     0     0     0     0     1     1 #> [20,]     0     0     0     0     0     0     0     0     1 #> [21,]     0     0     0     0     0     0     0     1     1 #> [22,]     0     0     0     0     0     0     0     0     0 #> [23,]     0     0     0     0     0     0     0     1     1 #> [24,]     1     0     1     0     1     0     0     1     1 #> [25,]     1     0     1     0     0     0     1     0     0 #> [26,]     0     0     0     0     0     0     1     0     0 #> [27,]     0     0     0     0     1     0     0     0     1 #> [28,]     0     0     0     0     0     0     0     0     1 #> [29,]     0     0     0     0     0     0     1     0     1 #> [30,]     0     1     0     0     0     0     0     1     1 #> [31,]     0     0     0     0     0     0     0     1     1 #> [32,]     1     0     0     1     0     0     0     1     1 #> [33,]     0     0     0     0     1     1     1     0     1 #> [34,]     0     1     1     1     1     1     1     1     0"},{"path":"/reference/as_adj_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjacency lists — as_adj_list","title":"Adjacency lists — as_adj_list","text":"Create adjacency lists graph, either adjacent edges neighboring vertices","code":""},{"path":"/reference/as_adj_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjacency lists — as_adj_list","text":"","code":"as_adj_list(   graph,   mode = c(\"all\", \"out\", \"in\", \"total\"),   loops = c(\"twice\", \"once\", \"ignore\"),   multiple = TRUE )  as_adj_edge_list(   graph,   mode = c(\"all\", \"out\", \"in\", \"total\"),   loops = c(\"twice\", \"once\", \"ignore\") )"},{"path":"/reference/as_adj_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjacency lists — as_adj_list","text":"graph input graph. mode Character scalar, gives kind adjacent edges/vertices include lists. ‘’ outgoing edges/vertices, ‘’ incoming edges/vertices, ‘’ . argument ignored undirected graphs. loops Character scalar, one \"ignore\" (omit loops), \"twice\" (include loop edges twice) \"\" (include ). \"twice\" allowed directed graphs replaced \"\". multiple Logical scalar, set FALSE use one representative set parallel edges.","code":""},{"path":"/reference/as_adj_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjacency lists — as_adj_list","text":"list igraph.vs list numeric vectors depending value igraph_opt(\"return.vs.es\"), see details performance characteristics.","code":""},{"path":"/reference/as_adj_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjacency lists — as_adj_list","text":"as_adj_list() returns list numeric vectors, include ids neighbor vertices (according mode argument) vertices. as_adj_edge_list() returns list numeric vectors, include ids adjacent edges (according mode argument) vertices. igraph_opt(\"return.vs.es\") true (default), numeric vectors adjacency lists coerced igraph.vs, can expensive operation large graphs.","code":""},{"path":[]},{"path":"/reference/as_adj_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adjacency lists — as_adj_list","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/as_adj_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjacency lists — as_adj_list","text":"","code":"g <- make_ring(10) as_adj_list(g) #> [[1]] #> + 2/10 vertices, from 3cbafdc: #> [1]  2 10 #>  #> [[2]] #> + 2/10 vertices, from 3cbafdc: #> [1] 1 3 #>  #> [[3]] #> + 2/10 vertices, from 3cbafdc: #> [1] 2 4 #>  #> [[4]] #> + 2/10 vertices, from 3cbafdc: #> [1] 3 5 #>  #> [[5]] #> + 2/10 vertices, from 3cbafdc: #> [1] 4 6 #>  #> [[6]] #> + 2/10 vertices, from 3cbafdc: #> [1] 5 7 #>  #> [[7]] #> + 2/10 vertices, from 3cbafdc: #> [1] 6 8 #>  #> [[8]] #> + 2/10 vertices, from 3cbafdc: #> [1] 7 9 #>  #> [[9]] #> + 2/10 vertices, from 3cbafdc: #> [1]  8 10 #>  #> [[10]] #> + 2/10 vertices, from 3cbafdc: #> [1] 1 9 #>  as_adj_edge_list(g) #> [[1]] #> + 2/10 edges from 3cbafdc: #> [1] 1-- 2 1--10 #>  #> [[2]] #> + 2/10 edges from 3cbafdc: #> [1] 1--2 2--3 #>  #> [[3]] #> + 2/10 edges from 3cbafdc: #> [1] 2--3 3--4 #>  #> [[4]] #> + 2/10 edges from 3cbafdc: #> [1] 3--4 4--5 #>  #> [[5]] #> + 2/10 edges from 3cbafdc: #> [1] 4--5 5--6 #>  #> [[6]] #> + 2/10 edges from 3cbafdc: #> [1] 5--6 6--7 #>  #> [[7]] #> + 2/10 edges from 3cbafdc: #> [1] 6--7 7--8 #>  #> [[8]] #> + 2/10 edges from 3cbafdc: #> [1] 7--8 8--9 #>  #> [[9]] #> + 2/10 edges from 3cbafdc: #> [1] 8-- 9 9--10 #>  #> [[10]] #> + 2/10 edges from 3cbafdc: #> [1] 1--10 9--10 #>"},{"path":"/reference/as_adjacency_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a graph to an adjacency matrix — as_adjacency_matrix","title":"Convert a graph to an adjacency matrix — as_adjacency_matrix","text":"Sometimes useful work standard representation graph, like adjacency matrix.","code":""},{"path":"/reference/as_adjacency_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a graph to an adjacency matrix — as_adjacency_matrix","text":"","code":"as_adjacency_matrix(   graph,   type = c(\"both\", \"upper\", \"lower\"),   attr = NULL,   edges = FALSE,   names = TRUE,   sparse = igraph_opt(\"sparsematrices\") )  as_adj(   graph,   type = c(\"both\", \"upper\", \"lower\"),   attr = NULL,   edges = FALSE,   names = TRUE,   sparse = igraph_opt(\"sparsematrices\") )"},{"path":"/reference/as_adjacency_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a graph to an adjacency matrix — as_adjacency_matrix","text":"graph graph convert. type Gives create adjacency matrix undirected graphs. ignored directed graphs. Possible values: upper: upper right triangle matrix used, lower: lower left triangle matrix used. : whole matrix used, symmetric matrix returned. attr Either NULL character string giving edge attribute name. NULL traditional adjacency matrix returned. NULL values given edge attribute included adjacency matrix. graph multiple edges, edge attribute arbitrarily chosen edge (multiple edges) included. argument ignored edges TRUE. Note works certain attribute types. sparse argumen TRUE, attribute must either logical numeric. sparse argument FALSE, character also allowed. reason difference Matrix package support character sparse matrices yet. edges Logical scalar, whether return edge ids matrix. non-existant edges zero returned. names Logical constant, whether assign row column names matrix. assigned name vertex attribute present graph. sparse Logical scalar, whether create sparse matrix. ‘Matrix’ package must installed creating sparse matrices.","code":""},{"path":"/reference/as_adjacency_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a graph to an adjacency matrix — as_adjacency_matrix","text":"vcount(graph) vcount(graph) (usually) numeric matrix.","code":""},{"path":"/reference/as_adjacency_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a graph to an adjacency matrix — as_adjacency_matrix","text":"as_adjacency_matrix() returns adjacency matrix graph, regular matrix sparse FALSE, sparse matrix, defined ‘Matrix’ package, sparse TRUE.","code":""},{"path":[]},{"path":"/reference/as_adjacency_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a graph to an adjacency matrix — as_adjacency_matrix","text":"","code":"g <- sample_gnp(10, 2 / 10) as_adjacency_matrix(g) #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>                           #>  [1,] . . . . . . . 1 1 . #>  [2,] . . 1 . . . . . . . #>  [3,] . 1 . . . . 1 1 . . #>  [4,] . . . . . . . . . . #>  [5,] . . . . . 1 . 1 . . #>  [6,] . . . . 1 . 1 . . . #>  [7,] . . 1 . . 1 . . . 1 #>  [8,] 1 . 1 . 1 . . . . 1 #>  [9,] 1 . . . . . . . . 1 #> [10,] . . . . . . 1 1 1 . V(g)$name <- letters[1:vcount(g)] as_adjacency_matrix(g) #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>    [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]] #>                       #> a . . . . . . . 1 1 . #> b . . 1 . . . . . . . #> c . 1 . . . . 1 1 . . #> d . . . . . . . . . . #> e . . . . . 1 . 1 . . #> f . . . . 1 . 1 . . . #> g . . 1 . . 1 . . . 1 #> h 1 . 1 . 1 . . . . 1 #> i 1 . . . . . . . . 1 #> j . . . . . . 1 1 1 . E(g)$weight <- runif(ecount(g)) as_adjacency_matrix(g, attr = \"weight\") #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>    [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]] #>                                                                                 #> a .         .         .         . .           .          .          0.125495772 #> b .         .         0.9695255 . .           .          .          .           #> c .         0.9695255 .         . .           .          0.14713281 0.514231354 #> d .         .         .         . .           .          .          .           #> e .         .         .         . .           0.00332753 .          0.003141262 #> f .         .         .         . 0.003327530 .          0.60409122 .           #> g .         .         0.1471328 . .           0.60409122 .          .           #> h 0.1254958 .         0.5142314 . 0.003141262 .          .          .           #> i 0.1863833 .         .         . .           .          .          .           #> j .         .         .         . .           .          0.02471268 0.330121691 #>                           #> a 0.186383283 .           #> b .           .           #> c .           .           #> d .           .           #> e .           .           #> f .           .           #> g .           0.024712676 #> h .           0.330121691 #> i .           0.009822477 #> j 0.009822477 ."},{"path":"/reference/as_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a graph to an edge list — as_edgelist","title":"Convert a graph to an edge list — as_edgelist","text":"Sometimes useful work standard representation graph, like edge list.","code":""},{"path":"/reference/as_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a graph to an edge list — as_edgelist","text":"","code":"as_edgelist(graph, names = TRUE)"},{"path":"/reference/as_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a graph to an edge list — as_edgelist","text":"graph graph convert. names Whether return character matrix containing vertex names (ie. name vertex attribute) exist numeric vertex ids.","code":""},{"path":"/reference/as_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a graph to an edge list — as_edgelist","text":"gsize(graph) 2 numeric matrix.","code":""},{"path":"/reference/as_edgelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a graph to an edge list — as_edgelist","text":"as_edgelist() returns list edges graph.","code":""},{"path":[]},{"path":"/reference/as_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a graph to an edge list — as_edgelist","text":"","code":"g <- sample_gnp(10, 2 / 10) as_edgelist(g) #>      [,1] [,2] #> [1,]    1    6 #> [2,]    3    7 #> [3,]    3    8 #> [4,]    1    9 #> [5,]    8    9 #> [6,]    3   10 #> [7,]    6   10 #> [8,]    8   10  V(g)$name <- LETTERS[seq_len(gorder(g))] as_edgelist(g) #>      [,1] [,2] #> [1,] \"A\"  \"F\"  #> [2,] \"C\"  \"G\"  #> [3,] \"C\"  \"H\"  #> [4,] \"A\"  \"I\"  #> [5,] \"H\"  \"I\"  #> [6,] \"C\"  \"J\"  #> [7,] \"F\"  \"J\"  #> [8,] \"H\"  \"J\""},{"path":"/reference/as_graphnel.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert igraph graphs to graphNEL objects from the graph package — as_graphnel","title":"Convert igraph graphs to graphNEL objects from the graph package — as_graphnel","text":"graphNEL class defined graph package, another way represent graphs. functions provided convert igraph graphNEL objects.","code":""},{"path":"/reference/as_graphnel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert igraph graphs to graphNEL objects from the graph package — as_graphnel","text":"","code":"as_graphnel(graph)"},{"path":"/reference/as_graphnel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert igraph graphs to graphNEL objects from the graph package — as_graphnel","text":"graph igraph graph object.","code":""},{"path":"/reference/as_graphnel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert igraph graphs to graphNEL objects from the graph package — as_graphnel","text":"as_graphnel() returns graphNEL graph object.","code":""},{"path":"/reference/as_graphnel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert igraph graphs to graphNEL objects from the graph package — as_graphnel","text":"as_graphnel() converts igraph graph graphNEL graph. converts graph/vertex/edge attributes. igraph graph vertex attribute ‘name’, used assign vertex names graphNEL graph. Otherwise numeric igraph vertex ids used purpose.","code":""},{"path":[]},{"path":"/reference/as_graphnel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert igraph graphs to graphNEL objects from the graph package — as_graphnel","text":"","code":"## Undirected if (FALSE) { g <- make_ring(10) V(g)$name <- letters[1:10] GNEL <- as_graphnel(g) g2 <- graph_from_graphnel(GNEL) g2  ## Directed g3 <- make_star(10, mode = \"in\") V(g3)$name <- letters[1:10] GNEL2 <- as_graphnel(g3) g4 <- graph_from_graphnel(GNEL2) g4 }"},{"path":"/reference/as_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vertex or edge sequence to an ordinary vector — as_ids","title":"Convert a vertex or edge sequence to an ordinary vector — as_ids","text":"Convert vertex edge sequence ordinary vector","code":""},{"path":"/reference/as_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vertex or edge sequence to an ordinary vector — as_ids","text":"","code":"as_ids(seq)  # S3 method for igraph.vs as_ids(seq)  # S3 method for igraph.es as_ids(seq)"},{"path":"/reference/as_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vertex or edge sequence to an ordinary vector — as_ids","text":"seq vertex edge sequence.","code":""},{"path":"/reference/as_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a vertex or edge sequence to an ordinary vector — as_ids","text":"character numeric vector, see details .","code":""},{"path":"/reference/as_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a vertex or edge sequence to an ordinary vector — as_ids","text":"graphs without names, numeric vector returned, containing internal numeric vertex edge ids. graphs names, vertex sequences, vertex names returned character vector. graphs names edge sequences, character vector returned, ‘bar’ notation: |b means edge vertex vertex b.","code":""},{"path":"/reference/as_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a vertex or edge sequence to an ordinary vector — as_ids","text":"","code":"g <- make_ring(10) as_ids(V(g)) #>  [1]  1  2  3  4  5  6  7  8  9 10 as_ids(E(g)) #>  [1]  1  2  3  4  5  6  7  8  9 10  V(g)$name <- letters[1:10] as_ids(V(g)) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" as_ids(E(g)) #>  [1] \"a|b\" \"b|c\" \"c|d\" \"d|e\" \"e|f\" \"f|g\" \"g|h\" \"h|i\" \"i|j\" \"a|j\""},{"path":"/reference/as_incidence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Incidence matrix of a bipartite graph — as_incidence_matrix","title":"Incidence matrix of a bipartite graph — as_incidence_matrix","text":"function can return sparse dense incidence matrix bipartite network. incidence matrix \\(n\\) times \\(m\\) matrix, \\(n\\) \\(m\\) number vertices two kinds.","code":""},{"path":"/reference/as_incidence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Incidence matrix of a bipartite graph — as_incidence_matrix","text":"","code":"as_incidence_matrix(   graph,   types = NULL,   attr = NULL,   names = TRUE,   sparse = FALSE )"},{"path":"/reference/as_incidence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Incidence matrix of a bipartite graph — as_incidence_matrix","text":"graph input graph. direction edges ignored directed graphs. types optional vertex type vector use instead type vertex attribute. must supply argument graph type vertex attribute. attr Either NULL character string giving edge attribute name. NULL, traditional incidence matrix returned. NULL values given edge attribute included incidence matrix. graph multiple edges, edge attribute arbitrarily chosen edge (multiple edges) included. names Logical scalar, TRUE vertices graph named (.e. graph vertex attribute called name), vertex names added result row column names. Otherwise ids vertices used row column names. sparse Logical scalar, TRUE sparse matrix created, need Matrix package .","code":""},{"path":"/reference/as_incidence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Incidence matrix of a bipartite graph — as_incidence_matrix","text":"sparse dense matrix.","code":""},{"path":"/reference/as_incidence_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Incidence matrix of a bipartite graph — as_incidence_matrix","text":"Bipartite graphs type vertex attribute igraph, boolean FALSE vertices first kind TRUE vertices second kind.","code":""},{"path":[]},{"path":"/reference/as_incidence_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Incidence matrix of a bipartite graph — as_incidence_matrix","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/as_incidence_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Incidence matrix of a bipartite graph — as_incidence_matrix","text":"","code":"g <- make_bipartite_graph(c(0, 1, 0, 1, 0, 0), c(1, 2, 2, 3, 3, 4)) as_incidence_matrix(g) #>   2 4 #> 1 1 0 #> 3 1 1 #> 5 0 0 #> 6 0 0"},{"path":"/reference/as_long_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a graph to a long data frame — as_long_data_frame","title":"Convert a graph to a long data frame — as_long_data_frame","text":"long data frame contains metadata vertices edges graph. contains one row edge, metadata edge incident vertices included row. names columns contain metadata incident vertices prefixed from_ to_. first two columns always named contain numeric ids incident vertices. rows listed order numeric vertex ids.","code":""},{"path":"/reference/as_long_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a graph to a long data frame — as_long_data_frame","text":"","code":"as_long_data_frame(graph)"},{"path":"/reference/as_long_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a graph to a long data frame — as_long_data_frame","text":"graph Input graph","code":""},{"path":"/reference/as_long_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a graph to a long data frame — as_long_data_frame","text":"long data frame.","code":""},{"path":[]},{"path":"/reference/as_long_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a graph to a long data frame — as_long_data_frame","text":"","code":"g <- make_(   ring(10),   with_vertex_(name = letters[1:10], color = \"red\"),   with_edge_(weight = 1:10, color = \"green\") ) as_long_data_frame(g) #>    from to weight color from_name from_color to_name to_color #> 1     1  2      1 green         a        red       b      red #> 2     2  3      2 green         b        red       c      red #> 3     3  4      3 green         c        red       d      red #> 4     4  5      4 green         d        red       e      red #> 5     5  6      5 green         e        red       f      red #> 6     6  7      6 green         f        red       g      red #> 7     7  8      7 green         g        red       h      red #> 8     8  9      8 green         h        red       i      red #> 9     9 10      9 green         i        red       j      red #> 10    1 10     10 green         a        red       j      red"},{"path":"/reference/as_membership.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a numeric vector as a membership vector — as_membership","title":"Declare a numeric vector as a membership vector — as_membership","text":"useful want use functions defined membership vectors, membership vector come igraph clustering method.","code":""},{"path":"/reference/as_membership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a numeric vector as a membership vector — as_membership","text":"","code":"as_membership(x)"},{"path":"/reference/as_membership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a numeric vector as a membership vector — as_membership","text":"x input vector.","code":""},{"path":"/reference/as_membership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare a numeric vector as a membership vector — as_membership","text":"input vector, membership class added.","code":""},{"path":[]},{"path":"/reference/as_membership.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare a numeric vector as a membership vector — as_membership","text":"","code":"## Compare to the correct clustering g <- (make_full_graph(10) + make_full_graph(10)) %>%   rewire(each_edge(p = 0.2)) correct <- rep(1:2, each = 10) %>% as_membership() fc <- cluster_fast_greedy(g) compare(correct, fc) #> [1] 0.5205379 compare(correct, membership(fc)) #> [1] 0.5205379"},{"path":"/reference/assortativity.html","id":null,"dir":"Reference","previous_headings":"","what":"Assortativity coefficient — assortativity","title":"Assortativity coefficient — assortativity","text":"assortativity coefficient positive similar vertices (based external property) tend connect , negative otherwise.","code":""},{"path":"/reference/assortativity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assortativity coefficient — assortativity","text":"","code":"assortativity(graph, types1, types2 = NULL, directed = TRUE)  assortativity_nominal(graph, types, directed = TRUE)  assortativity_degree(graph, directed = TRUE)"},{"path":"/reference/assortativity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assortativity coefficient — assortativity","text":"graph input graph, can directed undirected. types1 vertex values, can arbitrary numeric values. types2 second value vector using incoming edges calculating assortativity directed graph.  Supply NULL want use values outgoing incoming edges. argument ignored (warning) NULL undirected assortativity coefficient calculated. directed Logical scalar, whether consider edge directions directed graphs. argument ignored undirected graphs. Supply TRUE natural thing, .e. use directed version measure directed graphs undirected version undirected graphs. types Vector giving vertex types. assumed integer numbers, starting one. Non-integer values converted integers .integer().","code":""},{"path":"/reference/assortativity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assortativity coefficient — assortativity","text":"single real number.","code":""},{"path":"/reference/assortativity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assortativity coefficient — assortativity","text":"assortativity coefficient measures level homophyly graph, based vertex labeling values assigned vertices. coefficient high, means connected vertices tend labels similar assigned values. M.E.J. Newman defined two kinds assortativity coefficients, first one categorical labels vertices. assortativity_nominal() calculates measure. defines $$r=\\frac{\\sum_i e_{ii}-\\sum_i a_i b_i}{1-\\sum_i a_i b_i}$$ \\(e_{ij}\\) fraction edges connecting vertices type \\(\\) \\(j\\), \\(a_i=\\sum_j e_{ij}\\) \\(b_j=\\sum_i e_{ij}\\). second assortativity variant based values assigned vertices. assortativity() calculates measure. defined $$r=\\frac1{\\sigma_q^2}\\sum_{jk} jk(e_{jk}-q_j q_k)$$ undirected graphs (\\(q_i=\\sum_j e_{ij}\\)) $$r=\\frac1{\\sigma_o\\sigma_i}\\sum_{jk}jk(e_{jk}-q_j^o q_k^)$$ directed ones. \\(q_i^o=\\sum_j e_{ij}\\), \\(q_i^=\\sum_j e_{ji}\\), moreover, \\(\\sigma_q\\), \\(sigma_o\\) \\(sigma_i\\) standard deviations \\(q\\), \\(q^o\\) \\(q^\\), respectively. reason difference directed networks relationship symmetric, possible assign different values outgoing incoming end edges. assortativity_degree() uses vertex degree (minus one) vertex values calls assortativity().","code":""},{"path":"/reference/assortativity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Assortativity coefficient — assortativity","text":"M. E. J. Newman: Mixing patterns networks, Phys. Rev. E 67, 026126 (2003) https://arxiv.org/abs/cond-mat/0209450 M. E. J. Newman: Assortative mixing networks, Phys. Rev. Lett. 89, 208701 (2002) https://arxiv.org/abs/cond-mat/0205405","code":""},{"path":"/reference/assortativity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assortativity coefficient — assortativity","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/assortativity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assortativity coefficient — assortativity","text":"","code":"# random network, close to zero assortativity_degree(sample_gnp(10000, 3 / 10000)) #> [1] 0.0008739295  # BA model, tends to be dissortative assortativity_degree(sample_pa(10000, m = 4)) #> [1] -0.0242601"},{"path":"/reference/authority_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Kleinberg's authority centrality scores. — authority_score","title":"Kleinberg's authority centrality scores. — authority_score","text":"authority scores vertices defined principal eigenvector \\(^T \\), \\(\\) adjacency matrix graph.","code":""},{"path":"/reference/authority_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kleinberg's authority centrality scores. — authority_score","text":"","code":"authority_score(graph, scale = TRUE, weights = NULL, options = arpack_defaults)"},{"path":"/reference/authority_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kleinberg's authority centrality scores. — authority_score","text":"graph input graph. scale Logical scalar, whether scale result maximum score one. scaling used result vector unit length Euclidean norm. weights Optional positive weight vector calculating weighted scores. graph weight edge attribute, used default. function interprets edge weights connection strengths. random surfer model, edge larger weight likely selected surfer. options named list, override ARPACK options. See arpack() details.","code":""},{"path":"/reference/authority_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kleinberg's authority centrality scores. — authority_score","text":"named list members: vector authority/hub scores vertices. value corresponding eigenvalue calculated principal eigenvector. options information ARPACK computation, members options member returned arpack(), see documentation.","code":""},{"path":"/reference/authority_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kleinberg's authority centrality scores. — authority_score","text":"undirected matrices adjacency matrix symmetric authority scores hub scores, see hub_score().","code":""},{"path":"/reference/authority_score.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kleinberg's authority centrality scores. — authority_score","text":"J. Kleinberg. Authoritative sources hyperlinked environment. Proc. 9th ACM-SIAM Symposium Discrete Algorithms, 1998. Extended version Journal ACM 46(1999). Also appears IBM Research Report RJ 10076, May 1997.","code":""},{"path":[]},{"path":"/reference/authority_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kleinberg's authority centrality scores. — authority_score","text":"","code":"## An in-star g <- make_star(10) hub_score(g)$vector #>  [1] 3.370123e-16 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 #>  [6] 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 authority_score(g)$vector #>  [1] 1.000000e+00 5.506804e-17 5.506804e-17 5.506804e-17 5.506804e-17 #>  [6] 5.506804e-17 5.506804e-17 5.506804e-17 5.506804e-17 5.506804e-17  ## A ring g2 <- make_ring(10) hub_score(g2)$vector #>  [1] 1 1 1 1 1 1 1 1 1 1 authority_score(g2)$vector #>  [1] 1 0 1 0 1 0 1 0 1 0"},{"path":"/reference/automorphism_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating set of the automorphism group of a graph — automorphism_group","title":"Generating set of the automorphism group of a graph — automorphism_group","text":"Compute generating set automorphism group graph.","code":""},{"path":"/reference/automorphism_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating set of the automorphism group of a graph — automorphism_group","text":"","code":"automorphism_group(   graph,   colors,   sh = c(\"fm\", \"f\", \"fs\", \"fl\", \"flm\", \"fsm\"),   details = FALSE )"},{"path":"/reference/automorphism_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating set of the automorphism group of a graph — automorphism_group","text":"graph input graph, treated undirected. colors colors individual vertices graph; vertices color allowed match automorphism. omitted, igraph uses color attribute vertices, , vertex attribute, simply assumes vertices color. Pass NULL explicitly graph color vertex attribute want use . sh splitting heuristics BLISS algorithm. Possible values : ‘f’: first non-singleton cell, ‘fl’: first largest non-singleton cell, ‘fs’: first smallest non-singleton cell, ‘fm’: first maximally non-trivially connected non-singleton cell, ‘flm’: first largest maximally non-trivially connected non-singleton cell, ‘fsm’: first smallest maximally non-trivially connected non-singleton cell. details Specifies whether provide additional details BLISS internals result.","code":""},{"path":"/reference/automorphism_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating set of the automorphism group of a graph — automorphism_group","text":"details FALSE, list vertex permutations form generating set automorphism group input graph. details TRUE, named list two members: generators Returns generators info Additional information BLISS internals. See count_automorphisms() details.","code":""},{"path":"/reference/automorphism_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating set of the automorphism group of a graph — automorphism_group","text":"automorphism graph permutation vertices brings graph . automorphisms graph form group exists subset group (.e. set permutations) every permutation can expressed combination permutations. permutations called generating set automorphism group. function calculates possible generating set automorphism graph using BLISS algorithm. See also BLISS homepage http://www.tcs.hut.fi/Software/bliss/index.html. calculated generating set necessarily minimal, may depend splitting heuristics used BLISS.","code":""},{"path":"/reference/automorphism_group.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generating set of the automorphism group of a graph — automorphism_group","text":"Tommi Junttila Petteri Kaski: Engineering Efficient Canonical Labeling Tool Large Sparse Graphs, Proceedings Ninth Workshop Algorithm Engineering Experiments Fourth Workshop Analytic Algorithms Combinatorics. 2007.","code":""},{"path":[]},{"path":"/reference/automorphism_group.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generating set of the automorphism group of a graph — automorphism_group","text":"Tommi Junttila (http://users.ics.aalto.fi/tjunttil/) BLISS, Gabor Csardi csardi.gabor@gmail.com igraph glue code Tamas Nepusz ntamas@gmail.com manual page.","code":""},{"path":"/reference/automorphism_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating set of the automorphism group of a graph — automorphism_group","text":"","code":"## A ring has n*2 automorphisms, and a possible generating set is one that ## \"turns\" the ring by one vertex to the left or right g <- make_ring(10) automorphism_group(g) #> [[1]] #> + 10/10 vertices, from c47848a: #>  [1]  1 10  9  8  7  6  5  4  3  2 #>  #> [[2]] #> + 10/10 vertices, from c47848a: #>  [1]  2  3  4  5  6  7  8  9 10  1 #>"},{"path":"/reference/betweenness.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertex and edge betweenness centrality — estimate_betweenness","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"vertex edge betweenness (roughly) defined number geodesics (shortest paths) going vertex edge.","code":""},{"path":"/reference/betweenness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"","code":"estimate_betweenness(   graph,   vids = V(graph),   directed = TRUE,   cutoff,   weights = NULL,   nobigint = TRUE )  betweenness(   graph,   v = V(graph),   directed = TRUE,   weights = NULL,   nobigint = TRUE,   normalized = FALSE,   cutoff = -1 )  edge_betweenness(   graph,   e = E(graph),   directed = TRUE,   weights = NULL,   cutoff = -1 )"},{"path":"/reference/betweenness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"graph graph analyze. vids vertices vertex betweenness estimation calculated. directed Logical, whether directed paths considered determining shortest paths. cutoff maximum path length consider calculating betweenness. zero negative limit. weights Optional positive weight vector calculating weighted betweenness. graph weight edge attribute, used default. Weights used calculate weighted shortest paths, interpreted distances. nobigint Logical scalar, whether use big integers calculation. Deprecated since igraph 1.3 removed igraph 1.4. v vertices vertex betweenness calculated. normalized Logical scalar, whether normalize betweenness scores. TRUE, results normalized number ordered unordered vertex pairs directed undirected graphs, respectively. undirected graph, $$B^n=\\frac{2B}{(n-1)(n-2)},$$ \\(B^n\\) normalized, \\(B\\) raw betweenness, \\(n\\) number vertices graph. e edges edge betweenness calculated.","code":""},{"path":"/reference/betweenness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"numeric vector betweenness score vertex v betweenness(). numeric vector edge betweenness score edge e edge_betweenness().","code":""},{"path":"/reference/betweenness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"vertex betweenness vertex v defined $$\\sum_{\\ne j, \\ne v, j\\ne v} g_{ivj}/g_{ij}$$ edge betweenness edge e defined $$\\sum_{\\ne j} g_{iej}/g_{ij}.$$ betweenness() calculates vertex betweenness, edge_betweenness() calculates edge betweenness. \\(g_{ij}\\) total number shortest paths vertices \\(\\) \\(j\\) \\(g_{ivj}\\) number shortest paths pass though vertex \\(v\\). functions allow consider paths length cutoff smaller; can run larger graphs, running time quadratic (cutoff small). cutoff zero negative, function calculates exact betweenness scores. Using zero cutoff deprecated future versions (1.4.0) treat zero cutoff literally (.e. paths considered ). want cutoff, use negative number. estimate_betweenness() estimate_edge_betweenness() aliases betweenness() edge_betweenness(), different argument order, sake compatibility older versions igraph. calculating betweenness similar algorithm one proposed Brandes (see References) used.","code":""},{"path":"/reference/betweenness.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"edge_betweenness() might give false values graphs multiple edges.","code":""},{"path":"/reference/betweenness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"Freeman, L.C. (1979). Centrality Social Networks : Conceptual Clarification. Social Networks, 1, 215-239. Ulrik Brandes, Faster Algorithm Betweenness Centrality. Journal Mathematical Sociology 25(2):163-177, 2001.","code":""},{"path":[]},{"path":"/reference/betweenness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/betweenness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertex and edge betweenness centrality — estimate_betweenness","text":"","code":"g <- sample_gnp(10, 3 / 10) betweenness(g) #>  [1]  5.166667  0.000000  1.750000 11.666667  9.750000  5.500000  2.583333 #>  [8]  8.000000  0.000000  5.583333 edge_betweenness(g) #>  [1]  3.083333  9.166667  9.000000  5.416667  6.916667  7.250000 10.416667 #>  [8]  7.666667  6.916667  9.000000  7.083333  4.000000  9.083333"},{"path":"/reference/bfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Breadth-first search — bfs","title":"Breadth-first search — bfs","text":"Breadth-first search algorithm traverse graph. start root vertex spread along every edge “simultaneously”.","code":""},{"path":"/reference/bfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breadth-first search — bfs","text":"","code":"bfs(   graph,   root,   mode = c(\"out\", \"in\", \"all\", \"total\"),   unreachable = TRUE,   restricted = NULL,   order = TRUE,   rank = FALSE,   father = FALSE,   pred = FALSE,   succ = FALSE,   dist = FALSE,   callback = NULL,   extra = NULL,   rho = parent.frame(),   neimode )"},{"path":"/reference/bfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breadth-first search — bfs","text":"graph input graph. root Numeric vector, usually length one. root vertex, root vertices start search . mode directed graphs specifies type edges follow. ‘’ follows outgoing, ‘’ incoming edges. ‘’ ignores edge directions completely. ‘total’ synonym ‘’. argument ignored undirected graphs. unreachable Logical scalar, whether search visit vertices unreachable given root vertex (vertices). TRUE, additional searches performed vertices visited. restricted NULL (=restriction), vector vertices (ids symbolic names). latter case, search restricted given vertices. order Logical scalar, whether return ordering vertices. rank Logical scalar, whether return rank vertices. father Logical scalar, whether return father vertices. pred Logical scalar, whether return predecessors vertices. succ Logical scalar, whether return successors vertices. dist Logical scalar, whether return distance root search tree. callback NULL, must callback function. called whenever vertex visited. See details . extra Additional argument supply callback function. rho environment callback function evaluated. neimode argument deprecated igraph 1.3.0; use mode instead.","code":""},{"path":"/reference/bfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breadth-first search — bfs","text":"named list following entries: root Numeric scalar. root vertex used starting point search. neimode Character scalar. mode argument function call. Note undirected graphs always ‘’, irrespectively supplied value. order Numeric vector. vertex ids, order visited search. rank Numeric vector. rank vertex. father Numeric vector. father vertex, .e. vertex discovered . pred Numeric vector. previously visited vertex vertex, 0 vertex. succ Numeric vector. next vertex visited current one, 0 vertex. dist Numeric vector, vertex distance root search tree. Note order, rank, father, pred, succ dist might NULL corresponding argument FALSE, .e. calculation requested.","code":""},{"path":"/reference/bfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Breadth-first search — bfs","text":"callback function must following arguments: graph input graph passed callback function . data named numeric vector, following entries: ‘vid’, vertex just visited, ‘pred’, predecessor (zero first vertex), ‘succ’, successor (zero last vertex), ‘rank’, rank current vertex, ‘dist’, distance root search tree. extra extra argument. callback must return FALSE continue search TRUE terminate . See examples use callback function.","code":""},{"path":[]},{"path":"/reference/bfs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Breadth-first search — bfs","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/bfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breadth-first search — bfs","text":"","code":"## Two rings bfs(make_ring(10) %du% make_ring(10),   root = 1, \"out\",   order = TRUE, rank = TRUE, father = TRUE, pred = TRUE,   succ = TRUE, dist = TRUE ) #> $root #> [1] 1 #>  #> $mode #> [1] \"out\" #>  #> $order #> + 20/20 vertices, from 5feb41f: #>  [1]  1  2 10  3  9  4  8  5  7  6 11 12 20 13 19 14 18 15 17 16 #>  #> $rank #>  [1]  1  2  4  6  8 10  9  7  5  3 11 12 14 16 18 20 19 17 15 13 #>  #> $father #> + 20/20 vertices, from 5feb41f: #>  [1] NA  1  2  3  4  5  8  9 10  1 NA 11 12 13 14 15 18 19 20 11 #>  #> $pred #> + 20/20 vertices, from 5feb41f: #>  [1] NA  1 10  9  8  7  5  4  3  2 NA 11 20 19 18 17 15 14 13 12 #>  #> $succ #> + 20/20 vertices, from 5feb41f: #>  [1]  2 10  9  8  7 NA  6  5  4  3 12 20 19 18 17 NA 16 15 14 13 #>  #> $dist #>  [1] 0 1 2 3 4 5 4 3 2 1 0 1 2 3 4 5 4 3 2 1 #>  #> $neimode #> [1] \"out\" #>   ## How to use a callback f <- function(graph, data, extra) {   print(data)   FALSE } tmp <- bfs(make_ring(10) %du% make_ring(10),   root = 1, \"out\",   callback = f ) #>  vid pred succ rank dist  #>    1    0    2    1    0  #>  vid pred succ rank dist  #>    2    1   10    2    1  #>  vid pred succ rank dist  #>   10    2    3    3    1  #>  vid pred succ rank dist  #>    3   10    9    4    2  #>  vid pred succ rank dist  #>    9    3    4    5    2  #>  vid pred succ rank dist  #>    4    9    8    6    3  #>  vid pred succ rank dist  #>    8    4    5    7    3  #>  vid pred succ rank dist  #>    5    8    7    8    4  #>  vid pred succ rank dist  #>    7    5    6    9    4  #>  vid pred succ rank dist  #>    6    7    0   10    5  #>  vid pred succ rank dist  #>   11    0   12   11    0  #>  vid pred succ rank dist  #>   12   11   20   12    1  #>  vid pred succ rank dist  #>   20   12   13   13    1  #>  vid pred succ rank dist  #>   13   20   19   14    2  #>  vid pred succ rank dist  #>   19   13   14   15    2  #>  vid pred succ rank dist  #>   14   19   18   16    3  #>  vid pred succ rank dist  #>   18   14   15   17    3  #>  vid pred succ rank dist  #>   15   18   17   18    4  #>  vid pred succ rank dist  #>   17   15   16   19    4  #>  vid pred succ rank dist  #>   16   17    0   20    5   ## How to use a callback to stop the search ## We stop after visiting all vertices in the initial component f <- function(graph, data, extra) {   data[\"succ\"] == -1 } bfs(make_ring(10) %du% make_ring(10), root = 1, callback = f) #> $root #> [1] 1 #>  #> $mode #> [1] \"out\" #>  #> $order #> + 20/20 vertices, from 297d73f: #>  [1]  1  2 10  3  9  4  8  5  7  6 11 12 20 13 19 14 18 15 17 16 #>  #> $rank #> NULL #>  #> $father #> NULL #>  #> $pred #> NULL #>  #> $succ #> NULL #>  #> $dist #> NULL #>  #> $neimode #> [1] \"out\" #>"},{"path":"/reference/biconnected_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Biconnected components — biconnected_components","title":"Biconnected components — biconnected_components","text":"Finding biconnected components graph","code":""},{"path":"/reference/biconnected_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biconnected components — biconnected_components","text":"","code":"biconnected_components(graph)"},{"path":"/reference/biconnected_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Biconnected components — biconnected_components","text":"graph input graph. treated undirected graph, even directed.","code":""},{"path":"/reference/biconnected_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Biconnected components — biconnected_components","text":"named list three components: Numeric scalar, integer giving number biconnected components graph. tree_edges components , list numeric vectors. vector set edge ids giving edges biconnected component. edges define spanning tree component. component_edges list numeric vectors. gives edges components. components list numeric vectors, vertices components. articulation_points articulation points graph. See articulation_points().","code":""},{"path":"/reference/biconnected_components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Biconnected components — biconnected_components","text":"graph biconnected removal single vertex (adjacent edges) disconnect . biconnected component graph maximal biconnected subgraph . biconnected components graph can given partition edges: every edge member exactly one biconnected component. Note true vertices: vertex can part many biconnected components.","code":""},{"path":[]},{"path":"/reference/biconnected_components.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Biconnected components — biconnected_components","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/biconnected_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Biconnected components — biconnected_components","text":"","code":"g <- disjoint_union(make_full_graph(5), make_full_graph(5)) clu <- components(g)$membership g <- add_edges(g, c(which(clu == 1), which(clu == 2))) bc <- biconnected_components(g)"},{"path":"/reference/bipartite_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide whether a graph is bipartite — bipartite_mapping","title":"Decide whether a graph is bipartite — bipartite_mapping","text":"function decides whether vertices network can mapped two vertex types way vertices type connected.","code":""},{"path":"/reference/bipartite_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide whether a graph is bipartite — bipartite_mapping","text":"","code":"bipartite_mapping(graph)"},{"path":"/reference/bipartite_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide whether a graph is bipartite — bipartite_mapping","text":"graph input graph.","code":""},{"path":"/reference/bipartite_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide whether a graph is bipartite — bipartite_mapping","text":"named list two elements: res logical scalar, TRUE can bipartite, FALSE otherwise. type possible vertex type mapping, logical vector. mapping exists, empty vector.","code":""},{"path":"/reference/bipartite_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decide whether a graph is bipartite — bipartite_mapping","text":"bipartite graph igraph ‘type’ vertex attribute giving two vertex types. function simply checks whether graph bipartite. tries find mapping gives possible division vertices two classes, two vertices class connected edge. existence mapping equivalent circuits odd length graph. graph loop edges bipartite. Note mapping necessarily unique, e.g. graph least two components, vertices separate components can mapped independently.","code":""},{"path":[]},{"path":"/reference/bipartite_mapping.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decide whether a graph is bipartite — bipartite_mapping","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/bipartite_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decide whether a graph is bipartite — bipartite_mapping","text":"","code":"## Rings with an even number of vertices are bipartite g <- make_ring(10) bipartite_mapping(g) #> $res #> [1] TRUE #>  #> $type #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE #>   ## All star graphs are bipartite g2 <- make_star(10) bipartite_mapping(g2) #> $res #> [1] TRUE #>  #> $type #>  [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>   ## A graph containing a triangle is not bipartite g3 <- make_ring(10) g3 <- add_edges(g3, c(1, 3)) bipartite_mapping(g3) #> $res #> [1] FALSE #>  #> $type #> logical(0) #>"},{"path":"/reference/bipartite_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Project a bipartite graph — bipartite_projection","title":"Project a bipartite graph — bipartite_projection","text":"bipartite graph projected two one-mode networks","code":""},{"path":"/reference/bipartite_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project a bipartite graph — bipartite_projection","text":"","code":"bipartite_projection(   graph,   types = NULL,   multiplicity = TRUE,   probe1 = NULL,   which = c(\"both\", \"true\", \"false\"),   remove.type = TRUE )"},{"path":"/reference/bipartite_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project a bipartite graph — bipartite_projection","text":"graph input graph. can directed, edge directions ignored computation. types optional vertex type vector use instead ‘type’ vertex attribute. must supply argument graph ‘type’ vertex attribute. multiplicity TRUE, igraph keeps multiplicity edges edge attribute called ‘weight’. E.g. -C-B also -D-B triple bipartite graph (X, -X-B also graph), multiplicity -B edge projection 2. probe1 argument can used specify order projections resulting list. given, considered vertex id (symbolic vertex name); projection containing vertex first one result list.  argument ignored one projection requested argument . character scalar specify projection(s) calculate. default calculate . remove.type Logical scalar, whether remove type vertex attribute projections. makes sense graphs bipartite . However want combine (bipartite graphs), worth keeping attribute. default removed.","code":""},{"path":"/reference/bipartite_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project a bipartite graph — bipartite_projection","text":"list two undirected graphs. See details .","code":""},{"path":"/reference/bipartite_projection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Project a bipartite graph — bipartite_projection","text":"Bipartite graphs type vertex attribute igraph, boolean FALSE vertices first kind TRUE vertices second kind. bipartite_projection_size() calculates number vertices edges two projections bipartite graphs, without calculating projections . useful check much memory projections need large bipartite graph. bipartite_projection() calculates actual projections.  can use probe1 argument specify order projections result. default vertex type FALSE first TRUE second. bipartite_projection() keeps vertex attributes.","code":""},{"path":[]},{"path":"/reference/bipartite_projection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Project a bipartite graph — bipartite_projection","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/bipartite_projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project a bipartite graph — bipartite_projection","text":"","code":"## Projection of a full bipartite graph is a full graph g <- make_full_bipartite_graph(10, 5) proj <- bipartite_projection(g) graph.isomorphic(proj[[1]], make_full_graph(10)) #> [1] TRUE graph.isomorphic(proj[[2]], make_full_graph(5)) #> [1] TRUE  ## The projection keeps the vertex attributes M <- matrix(0, nrow = 5, ncol = 3) rownames(M) <- c(\"Alice\", \"Bob\", \"Cecil\", \"Dan\", \"Ethel\") colnames(M) <- c(\"Party\", \"Skiing\", \"Badminton\") M[] <- sample(0:1, length(M), replace = TRUE) M #>       Party Skiing Badminton #> Alice     1      0         0 #> Bob       1      1         0 #> Cecil     1      1         1 #> Dan       0      0         1 #> Ethel     1      0         1 g2 <- graph_from_incidence_matrix(M) g2$name <- \"Event network\" proj2 <- bipartite_projection(g2) print(proj2[[1]], g = TRUE, e = TRUE) #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 4 2 4 4 3 4 #>  #> [[4]] #> [1] 0 0 0 1 1 2 2 3 #>  #> [[5]] #> [1] 0 1 3 6 2 4 5 7 #>  #> [[6]] #> [1] 0 1 2 3 4 6 5 7 #>  #> [[7]] #> [1] 0 0 1 3 4 8 #>  #> [[8]] #> [1] 0 3 5 7 8 8 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Event network\" #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"Alice\" \"Bob\"   \"Cecil\" \"Dan\"   \"Ethel\" #>  #>  #> [[9]][[4]] #> [[9]][[4]]$weight #> [1] 1 1 1 2 1 2 1 1 #>  #>  #>  #> [[10]] #> <environment: 0x564cbe6ff8d8> #>  #> attr(,\"class\") #> [1] \"igraph\" print(proj2[[2]], g = TRUE, e = TRUE) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 2 #>  #> [[4]] #> [1] 0 0 1 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 0 1 3 #>  #> [[8]] #> [1] 0 2 3 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Event network\" #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"Party\"     \"Skiing\"    \"Badminton\" #>  #>  #> [[9]][[4]] #> [[9]][[4]]$weight #> [1] 2 2 1 #>  #>  #>  #> [[10]] #> <environment: 0x564cbe6ff7f8> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/c.igraph.es.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate edge sequences — c.igraph.es","title":"Concatenate edge sequences — c.igraph.es","text":"Concatenate edge sequences","code":""},{"path":"/reference/c.igraph.es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate edge sequences — c.igraph.es","text":"","code":"# S3 method for igraph.es c(..., recursive = FALSE)"},{"path":"/reference/c.igraph.es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate edge sequences — c.igraph.es","text":"... edge sequences concatenate. must refer graph. recursive Ignored, included S3 compatibility base c function.","code":""},{"path":"/reference/c.igraph.es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate edge sequences — c.igraph.es","text":"edge sequence, input sequences concatenated.","code":""},{"path":[]},{"path":"/reference/c.igraph.es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate edge sequences — c.igraph.es","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) c(E(g)[1], E(g)[\"A|B\"], E(g)[1:4]) #> + 6/10 edges from fcbe2cb (vertex names): #> [1] A--B A--B A--B B--C C--D D--E"},{"path":"/reference/c.igraph.vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate vertex sequences — c.igraph.vs","title":"Concatenate vertex sequences — c.igraph.vs","text":"Concatenate vertex sequences","code":""},{"path":"/reference/c.igraph.vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate vertex sequences — c.igraph.vs","text":"","code":"# S3 method for igraph.vs c(..., recursive = FALSE)"},{"path":"/reference/c.igraph.vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate vertex sequences — c.igraph.vs","text":"... vertex sequences concatenate. must refer graph. recursive Ignored, included S3 compatibility base c function.","code":""},{"path":"/reference/c.igraph.vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate vertex sequences — c.igraph.vs","text":"vertex sequence, input sequences concatenated.","code":""},{"path":[]},{"path":"/reference/c.igraph.vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate vertex sequences — c.igraph.vs","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) c(V(g)[1], V(g)[\"A\"], V(g)[1:4]) #> + 6/10 vertices, named, from 371f7ee: #> [1] A A A B C D"},{"path":"/reference/canonical_permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Canonical permutation of a graph — canonical_permutation","title":"Canonical permutation of a graph — canonical_permutation","text":"canonical permutation brings every isomorphic graphs (labeled) graph.","code":""},{"path":"/reference/canonical_permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canonical permutation of a graph — canonical_permutation","text":"","code":"canonical_permutation(   graph,   colors,   sh = c(\"fm\", \"f\", \"fs\", \"fl\", \"flm\", \"fsm\") )"},{"path":"/reference/canonical_permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Canonical permutation of a graph — canonical_permutation","text":"graph input graph, treated undirected. colors colors individual vertices graph; vertices color allowed match automorphism. omitted, igraph uses color attribute vertices, , vertex attribute, simply assumes vertices color. Pass NULL explicitly graph color vertex attribute want use . sh Type heuristics use BLISS algorithm. See details possible values.","code":""},{"path":"/reference/canonical_permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Canonical permutation of a graph — canonical_permutation","text":"list following members: labeling canonical permutation takes input graph canonical form. numeric vector, first element new label vertex 0, second element vertex 1, etc. info information BLISS computation. named list following members: \"nof_nodes\" number nodes search tree. \"nof_leaf_nodes\" number leaf nodes search tree. \"nof_bad_nodes\" Number bad nodes. \"nof_canupdates\" Number canrep updates. \"max_level\" Maximum level. \"group_size\" size automorphism group input graph, string. string representation necessary group size can easily exceed values exactly representable floating point.","code":""},{"path":"/reference/canonical_permutation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Canonical permutation of a graph — canonical_permutation","text":"canonical_permutation() computes permutation brings graph canonical form, defined BLISS algorithm.  isomorphic graphs canonical form. See paper details BLISS. information available http://www.tcs.hut.fi/Software/bliss/index.html. possible values sh argument : \"f\" First non-singleton cell. \"fl\" First largest non-singleton cell. \"fs\" First smallest non-singleton cell. \"fm\" First maximally non-trivially connectec non-singleton cell. \"flm\" Largest maximally non-trivially connected non-singleton cell. \"fsm\" Smallest maximally non-trivially connected non-singleton cell. See paper references details .","code":""},{"path":"/reference/canonical_permutation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Canonical permutation of a graph — canonical_permutation","text":"Tommi Junttila Petteri Kaski: Engineering Efficient Canonical Labeling Tool Large Sparse Graphs, Proceedings Ninth Workshop Algorithm Engineering Experiments Fourth Workshop Analytic Algorithms Combinatorics. 2007.","code":""},{"path":[]},{"path":"/reference/canonical_permutation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Canonical permutation of a graph — canonical_permutation","text":"Tommi Junttila BLISS, Gabor Csardi csardi.gabor@gmail.com igraph R interfaces.","code":""},{"path":"/reference/canonical_permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Canonical permutation of a graph — canonical_permutation","text":"","code":"## Calculate the canonical form of a random graph g1 <- sample_gnm(10, 20) cp1 <- canonical_permutation(g1) cf1 <- permute(g1, cp1$labeling)  ## Do the same with a random permutation of it g2 <- permute(g1, sample(vcount(g1))) cp2 <- canonical_permutation(g2) cf2 <- permute(g2, cp2$labeling)  ## Check that they are the same el1 <- as_edgelist(cf1) el2 <- as_edgelist(cf2) el1 <- el1[order(el1[, 1], el1[, 2]), ] el2 <- el2[order(el2[, 1], el2[, 2]), ] all(el1 == el2) #> [1] TRUE"},{"path":"/reference/categorical_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Palette for categories — categorical_pal","title":"Palette for categories — categorical_pal","text":"color blind friendly palette https://jfly.uni-koeln.de/color/. 8 colors.","code":""},{"path":"/reference/categorical_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Palette for categories — categorical_pal","text":"","code":"categorical_pal(n)"},{"path":"/reference/categorical_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Palette for categories — categorical_pal","text":"n number colors palette. simply take first n colors total 8.","code":""},{"path":"/reference/categorical_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Palette for categories — categorical_pal","text":"character vector RGB color codes.","code":""},{"path":"/reference/categorical_pal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Palette for categories — categorical_pal","text":"suggested palette visualizations vertex colors mark categories, e.g. community membership.","code":""},{"path":"/reference/categorical_pal.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Palette for categories — categorical_pal","text":"","code":"library(igraphdata) data(karate) karate <- karate    add_layout_(with_fr())    set_vertex_attr(\"size\", value = 10)  cl_k <- cluster_optimal(karate)  V(karate)$color <- membership(cl_k) karate$palette <- categorical_pal(length(cl_k)) plot(karate)"},{"path":[]},{"path":"/reference/centr_betw.html","id":null,"dir":"Reference","previous_headings":"","what":"Centralize a graph according to the betweenness of vertices — centr_betw","title":"Centralize a graph according to the betweenness of vertices — centr_betw","text":"See centralize() summary graph centralization.","code":""},{"path":"/reference/centr_betw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centralize a graph according to the betweenness of vertices — centr_betw","text":"","code":"centr_betw(graph, directed = TRUE, nobigint = TRUE, normalized = TRUE)"},{"path":"/reference/centr_betw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centralize a graph according to the betweenness of vertices — centr_betw","text":"graph input graph. directed logical scalar, whether use directed shortest paths calculating betweenness. nobigint Logical scalar, whether use big integers betweenness calculation. argument deprecated igraph 1.3 removed igraph 1.4. normalized Logical scalar. Whether normalize graph level centrality score dividing theoretical maximum.","code":""},{"path":"/reference/centr_betw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centralize a graph according to the betweenness of vertices — centr_betw","text":"named list following components: res node-level centrality scores. centralization graph level centrality index. theoretical_max maximum theoretical graph level centralization score graph given number vertices, using parameters. normalized argument TRUE, result divided number.","code":""},{"path":[]},{"path":"/reference/centr_betw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centralize a graph according to the betweenness of vertices — centr_betw","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_degree(g)$centralization #> [1] 0.1623345 centr_clo(g, mode = \"all\")$centralization #> [1] 0.4380748 centr_betw(g, directed = FALSE)$centralization #> [1] 0.2690137 centr_eigen(g, directed = FALSE)$centralization #> [1] 0.9464587"},{"path":"/reference/centr_betw_tmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical maximum for betweenness centralization — centr_betw_tmax","title":"Theoretical maximum for betweenness centralization — centr_betw_tmax","text":"See centralize() summary graph centralization.","code":""},{"path":"/reference/centr_betw_tmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical maximum for betweenness centralization — centr_betw_tmax","text":"","code":"centr_betw_tmax(graph = NULL, nodes = 0, directed = TRUE)"},{"path":"/reference/centr_betw_tmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical maximum for betweenness centralization — centr_betw_tmax","text":"graph input graph. can also NULL, nodes given. nodes number vertices. ignored graph given. directed logical scalar, whether use directed shortest paths calculating betweenness.","code":""},{"path":"/reference/centr_betw_tmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical maximum for betweenness centralization — centr_betw_tmax","text":"Real scalar, theoretical maximum (unnormalized) graph betweenness centrality score graphs given order parameters.","code":""},{"path":[]},{"path":"/reference/centr_betw_tmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical maximum for betweenness centralization — centr_betw_tmax","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_betw(g, normalized = FALSE)$centralization %>%   `/`(centr_betw_tmax(g)) #> [1] 0.002327438 centr_betw(g, normalized = TRUE)$centralization #> [1] 0.002327438"},{"path":"/reference/centr_clo.html","id":null,"dir":"Reference","previous_headings":"","what":"Centralize a graph according to the closeness of vertices — centr_clo","title":"Centralize a graph according to the closeness of vertices — centr_clo","text":"See centralize() summary graph centralization.","code":""},{"path":"/reference/centr_clo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centralize a graph according to the closeness of vertices — centr_clo","text":"","code":"centr_clo(graph, mode = c(\"out\", \"in\", \"all\", \"total\"), normalized = TRUE)"},{"path":"/reference/centr_clo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centralize a graph according to the closeness of vertices — centr_clo","text":"graph input graph. mode mode argument closeness(). normalized Logical scalar. Whether normalize graph level centrality score dividing theoretical maximum.","code":""},{"path":"/reference/centr_clo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centralize a graph according to the closeness of vertices — centr_clo","text":"named list following components: res node-level centrality scores. centralization graph level centrality index. theoretical_max maximum theoretical graph level centralization score graph given number vertices, using parameters. normalized argument TRUE, result divided number.","code":""},{"path":[]},{"path":"/reference/centr_clo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centralize a graph according to the closeness of vertices — centr_clo","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_degree(g)$centralization #> [1] 0.1573245 centr_clo(g, mode = \"all\")$centralization #> [1] 0.4249982 centr_betw(g, directed = FALSE)$centralization #> [1] 0.248871 centr_eigen(g, directed = FALSE)$centralization #> [1] 0.9443575"},{"path":"/reference/centr_clo_tmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical maximum for closeness centralization — centr_clo_tmax","title":"Theoretical maximum for closeness centralization — centr_clo_tmax","text":"See centralize() summary graph centralization.","code":""},{"path":"/reference/centr_clo_tmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical maximum for closeness centralization — centr_clo_tmax","text":"","code":"centr_clo_tmax(graph = NULL, nodes = 0, mode = c(\"out\", \"in\", \"all\", \"total\"))"},{"path":"/reference/centr_clo_tmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical maximum for closeness centralization — centr_clo_tmax","text":"graph input graph. can also NULL, nodes given. nodes number vertices. ignored graph given. mode mode argument closeness().","code":""},{"path":"/reference/centr_clo_tmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical maximum for closeness centralization — centr_clo_tmax","text":"Real scalar, theoretical maximum (unnormalized) graph closeness centrality score graphs given order parameters.","code":""},{"path":[]},{"path":"/reference/centr_clo_tmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical maximum for closeness centralization — centr_clo_tmax","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_clo(g, normalized = FALSE)$centralization %>%   `/`(centr_clo_tmax(g)) #> [1] NaN centr_clo(g, normalized = TRUE)$centralization #> [1] NaN"},{"path":"/reference/centr_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Centralize a graph according to the degrees of vertices — centr_degree","title":"Centralize a graph according to the degrees of vertices — centr_degree","text":"See centralize() summary graph centralization.","code":""},{"path":"/reference/centr_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centralize a graph according to the degrees of vertices — centr_degree","text":"","code":"centr_degree(   graph,   mode = c(\"all\", \"out\", \"in\", \"total\"),   loops = TRUE,   normalized = TRUE )"},{"path":"/reference/centr_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centralize a graph according to the degrees of vertices — centr_degree","text":"graph input graph. mode mode argument degree(). loops Logical scalar, whether consider loops edges calculating degree. normalized Logical scalar. Whether normalize graph level centrality score dividing theoretical maximum.","code":""},{"path":"/reference/centr_degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centralize a graph according to the degrees of vertices — centr_degree","text":"named list following components: res node-level centrality scores. centralization graph level centrality index. theoretical_max maximum theoretical graph level centralization score graph given number vertices, using parameters. normalized argument TRUE, result divided number.","code":""},{"path":[]},{"path":"/reference/centr_degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centralize a graph according to the degrees of vertices — centr_degree","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_degree(g)$centralization #> [1] 0.1658415 centr_clo(g, mode = \"all\")$centralization #> [1] 0.4299737 centr_betw(g, directed = FALSE)$centralization #> [1] 0.2556298 centr_eigen(g, directed = FALSE)$centralization #> [1] 0.9438796"},{"path":"/reference/centr_degree_tmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical maximum for degree centralization — centr_degree_tmax","title":"Theoretical maximum for degree centralization — centr_degree_tmax","text":"See centralize() summary graph centralization.","code":""},{"path":"/reference/centr_degree_tmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical maximum for degree centralization — centr_degree_tmax","text":"","code":"centr_degree_tmax(   graph = NULL,   nodes = 0,   mode = c(\"all\", \"out\", \"in\", \"total\"),   loops = FALSE )"},{"path":"/reference/centr_degree_tmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical maximum for degree centralization — centr_degree_tmax","text":"graph input graph. can also NULL, nodes, mode loops given. nodes number vertices. ignored graph given. mode mode argument degree(). loops Logical scalar, whether consider loops edges calculating degree. Currently default value FALSE, argument required igraph 1.4.0.","code":""},{"path":"/reference/centr_degree_tmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical maximum for degree centralization — centr_degree_tmax","text":"Real scalar, theoretical maximum (unnormalized) graph degree centrality score graphs given order parameters.","code":""},{"path":[]},{"path":"/reference/centr_degree_tmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical maximum for degree centralization — centr_degree_tmax","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_degree(g, normalized = FALSE)$centralization %>%   `/`(centr_degree_tmax(g, loops = FALSE)) #> [1] 0.1604912 centr_degree(g, normalized = TRUE)$centralization #> [1] 0.1603305"},{"path":"/reference/centr_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"Centralize a graph according to the eigenvector centrality of vertices — centr_eigen","title":"Centralize a graph according to the eigenvector centrality of vertices — centr_eigen","text":"See centralize() summary graph centralization.","code":""},{"path":"/reference/centr_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centralize a graph according to the eigenvector centrality of vertices — centr_eigen","text":"","code":"centr_eigen(   graph,   directed = FALSE,   scale = TRUE,   options = arpack_defaults,   normalized = TRUE )"},{"path":"/reference/centr_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centralize a graph according to the eigenvector centrality of vertices — centr_eigen","text":"graph input graph. directed logical scalar, whether use directed shortest paths calculating eigenvector centrality. scale Whether rescale eigenvector centrality scores, maximum score one. options passed eigen_centrality(), options ARPACK eigensolver. normalized Logical scalar. Whether normalize graph level centrality score dividing theoretical maximum.","code":""},{"path":"/reference/centr_eigen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centralize a graph according to the eigenvector centrality of vertices — centr_eigen","text":"named list following components: vector node-level centrality scores. value corresponding eigenvalue. options ARPACK options, see return value eigen_centrality() details. centralization graph level centrality index. theoretical_max , theoretical maximum centralization score graph number vertices.","code":""},{"path":[]},{"path":"/reference/centr_eigen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centralize a graph according to the eigenvector centrality of vertices — centr_eigen","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_degree(g)$centralization #> [1] 0.1357814 centr_clo(g, mode = \"all\")$centralization #> [1] 0.3885529 centr_betw(g, directed = FALSE)$centralization #> [1] 0.2004031 centr_eigen(g, directed = FALSE)$centralization #> [1] 0.9345768  # The most centralized graph according to eigenvector centrality g0 <- make_graph(c(2, 1), n = 10, dir = FALSE) g1 <- make_star(10, mode = \"undirected\") centr_eigen(g0)$centralization #> [1] 1 centr_eigen(g1)$centralization #> [1] 0.75"},{"path":"/reference/centr_eigen_tmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical maximum for betweenness centralization — centr_eigen_tmax","title":"Theoretical maximum for betweenness centralization — centr_eigen_tmax","text":"See centralize() summary graph centralization.","code":""},{"path":"/reference/centr_eigen_tmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical maximum for betweenness centralization — centr_eigen_tmax","text":"","code":"centr_eigen_tmax(graph = NULL, nodes = 0, directed = FALSE, scale = TRUE)"},{"path":"/reference/centr_eigen_tmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical maximum for betweenness centralization — centr_eigen_tmax","text":"graph input graph. can also NULL, nodes given. nodes number vertices. ignored graph given. directed logical scalar, whether use directed shortest paths calculating betweenness. scale Whether rescale eigenvector centrality scores, maximum score one.","code":""},{"path":"/reference/centr_eigen_tmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical maximum for betweenness centralization — centr_eigen_tmax","text":"Real scalar, theoretical maximum (unnormalized) graph betweenness centrality score graphs given order parameters.","code":""},{"path":[]},{"path":"/reference/centr_eigen_tmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical maximum for betweenness centralization — centr_eigen_tmax","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_eigen(g, normalized = FALSE)$centralization %>%   `/`(centr_eigen_tmax(g)) #> [1] 0.935047 centr_eigen(g, normalized = TRUE)$centralization #> [1] 0.935047"},{"path":"/reference/centralize.html","id":null,"dir":"Reference","previous_headings":"","what":"Centralization of a graph — centralize","title":"Centralization of a graph — centralize","text":"Centralization method creating graph level centralization measure centrality scores vertices.","code":""},{"path":"/reference/centralize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centralization of a graph — centralize","text":"","code":"centralize(scores, theoretical.max = 0, normalized = TRUE)"},{"path":"/reference/centralize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centralization of a graph — centralize","text":"scores vertex level centrality scores. theoretical.max Real scalar. graph-level centralization measure centralized graph number vertices graph study. used normalized argument set TRUE. normalized Logical scalar. Whether normalize graph level centrality score dividing supplied theoretical maximum.","code":""},{"path":"/reference/centralize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centralization of a graph — centralize","text":"real scalar, centralization graph scores derived.","code":""},{"path":"/reference/centralize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Centralization of a graph — centralize","text":"Centralization general method calculating graph-level centrality score based node-level centrality measure. formula $$C(G)=\\sum_v (\\max_w c_w - c_v),$$ \\(c_v\\) centrality vertex \\(v\\). graph-level centralization measure can normalized dividing maximum theoretical score graph number vertices, using parameters, e.g. directedness, whether consider loop edges, etc. degree, closeness betweenness centralized structure version star graph, -star, -star undirected star. eigenvector centrality centralized structure graph single edge (potentially many isolates). centralize() implements general centralization formula calculate graph-level score vertex-level scores.","code":""},{"path":"/reference/centralize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Centralization of a graph — centralize","text":"Freeman, L.C.  (1979).  Centrality Social Networks : Conceptual Clarification. Social Networks 1, 215--239. Wasserman, S., Faust, K.  (1994).  Social Network Analysis: Methods Applications. Cambridge University Press.","code":""},{"path":[]},{"path":"/reference/centralize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centralization of a graph — centralize","text":"","code":"# A BA graph is quite centralized g <- sample_pa(1000, m = 4) centr_degree(g)$centralization #> [1] 0.1543185 centr_clo(g, mode = \"all\")$centralization #> [1] 0.4168858 centr_eigen(g, directed = FALSE)$centralization #> [1] 0.9423069  # Calculate centralization from pre-computed scores deg <- degree(g) tmax <- centr_degree_tmax(g, loops = FALSE) centralize(deg, tmax) #> [1] 0.1544731  # The most centralized graph according to eigenvector centrality g0 <- graph(c(2, 1), n = 10, dir = FALSE) g1 <- make_star(10, mode = \"undirected\") centr_eigen(g0)$centralization #> [1] 1 centr_eigen(g1)$centralization #> [1] 0.75"},{"path":"/reference/cliques.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","title":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","text":"functions find , largest maximal cliques undirected graph. size largest clique can also calculated.","code":""},{"path":"/reference/cliques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","text":"","code":"cliques(graph, min = 0, max = 0)  max_cliques(graph, min = NULL, max = NULL, subset = NULL, file = NULL)"},{"path":"/reference/cliques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","text":"graph input graph, directed graphs considered undirected ones, multiple edges loops ignored. min Numeric constant, lower limit size cliques find. NULL means limit, ie. 0. max Numeric constant, upper limit size cliques find. NULL means limit. subset NULL, must vector vertex ids, numeric symbolic graph named. algorithm run vertices , subset maximal cliques returned. See Eppstein paper details. argument makes possible easily parallelize finding maximal cliques. file NULL, must file name, .e. character scalar. output algorithm written file. (exists, overwritten.) clique separate line file, given numeric ids vertices, separated whitespace.","code":""},{"path":"/reference/cliques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","text":"cliques(), largest_cliques() clique_num() return list containing numeric vectors vertex ids. list element clique, .e. vertex sequence class igraph.vs(). max_cliques() returns NULL, invisibly, file argument NULL. output written specified file case. clique_num() count_max_cliques() return integer scalar. clique_size_counts() returns numeric vector clique sizes -th item belongs cliques size . Trailing zeros currently truncated, might change future versions.","code":""},{"path":"/reference/cliques.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","text":"cliques() find complete subgraphs input graph, obeying size limitations given min max arguments. largest_cliques() finds largest cliques input graph. clique largest clique including vertices. max_cliques() finds maximal cliques input graph.  clique maximal extended larger clique. largest cliques always maximal, maximal clique necessarily largest. count_max_cliques() counts maximal cliques. clique_num() calculates size largest clique(s). clique_size_counts() returns numeric vector representing histogram clique sizes, given minimum maximum clique size.","code":""},{"path":"/reference/cliques.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","text":"maximal cliques following algorithm implemented: David Eppstein, Maarten Loffler, Darren Strash: Listing Maximal Cliques Sparse Graphs Near-optimal Time.  https://arxiv.org/abs/1006.5440","code":""},{"path":[]},{"path":"/reference/cliques.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/cliques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to find cliques, ie. complete subgraphs in a graph — cliques","text":"","code":"# this usually contains cliques of size six g <- sample_gnp(100, 0.3) clique_num(g) #> [1] 6 cliques(g, min = 6) #> [[1]] #> + 6/100 vertices, from 49beb40: #> [1]   8  17  34  87  94 100 #>  #> [[2]] #> + 6/100 vertices, from 49beb40: #> [1]  8 17 22 34 87 94 #>  #> [[3]] #> + 6/100 vertices, from 49beb40: #> [1] 26 31 58 61 63 94 #>  #> [[4]] #> + 6/100 vertices, from 49beb40: #> [1]  8 17 22 34 52 64 #>  #> [[5]] #> + 6/100 vertices, from 49beb40: #> [1]  8 17 22 34 64 94 #>  #> [[6]] #> + 6/100 vertices, from 49beb40: #> [1] 41 54 56 66 78 81 #>  #> [[7]] #> + 6/100 vertices, from 49beb40: #> [1] 10 11 12 25 95 99 #>  #> [[8]] #> + 6/100 vertices, from 49beb40: #> [1] 16 32 46 60 74 77 #>  largest_cliques(g) #> [[1]] #> + 6/100 vertices, from 49beb40: #> [1] 12 99 10 25 95 11 #>  #> [[2]] #> + 6/100 vertices, from 49beb40: #> [1] 16 60 46 77 32 74 #>  #> [[3]] #> + 6/100 vertices, from 49beb40: #> [1]  17 100  87  34  94   8 #>  #> [[4]] #> + 6/100 vertices, from 49beb40: #> [1] 17 64 52  8 22 34 #>  #> [[5]] #> + 6/100 vertices, from 49beb40: #> [1] 17 64 94 34  8 22 #>  #> [[6]] #> + 6/100 vertices, from 49beb40: #> [1] 17 34 87 94  8 22 #>  #> [[7]] #> + 6/100 vertices, from 49beb40: #> [1] 26 58 94 63 31 61 #>  #> [[8]] #> + 6/100 vertices, from 49beb40: #> [1] 41 81 66 54 78 56 #>   # To have a bit less maximal cliques, about 100-200 usually g <- sample_gnp(100, 0.03) max_cliques(g) #> [[1]] #> + 1/100 vertex, from 910e4f6: #> [1] 65 #>  #> [[2]] #> + 1/100 vertex, from 910e4f6: #> [1] 7 #>  #> [[3]] #> + 1/100 vertex, from 910e4f6: #> [1] 47 #>  #> [[4]] #> + 1/100 vertex, from 910e4f6: #> [1] 29 #>  #> [[5]] #> + 1/100 vertex, from 910e4f6: #> [1] 27 #>  #> [[6]] #> + 1/100 vertex, from 910e4f6: #> [1] 14 #>  #> [[7]] #> + 2/100 vertices, from 910e4f6: #> [1] 21 73 #>  #> [[8]] #> + 2/100 vertices, from 910e4f6: #> [1] 21 42 #>  #> [[9]] #> + 2/100 vertices, from 910e4f6: #> [1] 51 85 #>  #> [[10]] #> + 2/100 vertices, from 910e4f6: #> [1] 52  6 #>  #> [[11]] #> + 2/100 vertices, from 910e4f6: #> [1] 34 61 #>  #> [[12]] #> + 2/100 vertices, from 910e4f6: #> [1] 15 28 #>  #> [[13]] #> + 2/100 vertices, from 910e4f6: #> [1] 82 72 #>  #> [[14]] #> + 2/100 vertices, from 910e4f6: #> [1] 36 58 #>  #> [[15]] #> + 2/100 vertices, from 910e4f6: #> [1] 56 57 #>  #> [[16]] #> + 2/100 vertices, from 910e4f6: #> [1] 56 25 #>  #> [[17]] #> + 2/100 vertices, from 910e4f6: #> [1]  9 66 #>  #> [[18]] #> + 2/100 vertices, from 910e4f6: #> [1]  9 32 #>  #> [[19]] #> + 2/100 vertices, from 910e4f6: #> [1] 24 55 #>  #> [[20]] #> + 2/100 vertices, from 910e4f6: #> [1] 12 64 #>  #> [[21]] #> + 2/100 vertices, from 910e4f6: #> [1] 63 53 #>  #> [[22]] #> + 2/100 vertices, from 910e4f6: #> [1]  92 100 #>  #> [[23]] #> + 2/100 vertices, from 910e4f6: #> [1] 94 70 #>  #> [[24]] #> + 2/100 vertices, from 910e4f6: #> [1] 43 88 #>  #> [[25]] #> + 2/100 vertices, from 910e4f6: #> [1] 99 50 #>  #> [[26]] #> + 2/100 vertices, from 910e4f6: #> [1] 19 46 #>  #> [[27]] #> + 2/100 vertices, from 910e4f6: #> [1] 100  49 #>  #> [[28]] #> + 2/100 vertices, from 910e4f6: #> [1] 46 39 #>  #> [[29]] #> + 2/100 vertices, from 910e4f6: #> [1] 72 62 #>  #> [[30]] #> + 2/100 vertices, from 910e4f6: #> [1] 74 31 #>  #> [[31]] #> + 2/100 vertices, from 910e4f6: #> [1] 50 95 #>  #> [[32]] #> + 2/100 vertices, from 910e4f6: #> [1] 50 91 #>  #> [[33]] #> + 2/100 vertices, from 910e4f6: #> [1] 50 87 #>  #> [[34]] #> + 2/100 vertices, from 910e4f6: #> [1] 53 60 #>  #> [[35]] #> + 2/100 vertices, from 910e4f6: #> [1] 53  8 #>  #> [[36]] #> + 2/100 vertices, from 910e4f6: #> [1] 54 70 #>  #> [[37]] #> + 2/100 vertices, from 910e4f6: #> [1] 54 10 #>  #> [[38]] #> + 2/100 vertices, from 910e4f6: #> [1] 55 68 #>  #> [[39]] #> + 2/100 vertices, from 910e4f6: #> [1] 55  8 #>  #> [[40]] #> + 2/100 vertices, from 910e4f6: #> [1] 58 98 #>  #> [[41]] #> + 3/100 vertices, from 910e4f6: #> [1] 58 35 81 #>  #> [[42]] #> + 2/100 vertices, from 910e4f6: #> [1] 59 39 #>  #> [[43]] #> + 2/100 vertices, from 910e4f6: #> [1] 59 30 #>  #> [[44]] #> + 2/100 vertices, from 910e4f6: #> [1] 60 78 #>  #> [[45]] #> + 2/100 vertices, from 910e4f6: #> [1] 60 69 #>  #> [[46]] #> + 2/100 vertices, from 910e4f6: #> [1] 62 77 #>  #> [[47]] #> + 2/100 vertices, from 910e4f6: #> [1] 62 33 #>  #> [[48]] #> + 2/100 vertices, from 910e4f6: #> [1] 62 16 #>  #> [[49]] #> + 2/100 vertices, from 910e4f6: #> [1] 64 71 #>  #> [[50]] #> + 2/100 vertices, from 910e4f6: #> [1] 64 10 #>  #> [[51]] #> + 2/100 vertices, from 910e4f6: #> [1] 66 83 #>  #> [[52]] #> + 2/100 vertices, from 910e4f6: #> [1] 66 78 #>  #> [[53]] #> + 2/100 vertices, from 910e4f6: #> [1] 66 71 #>  #> [[54]] #> + 2/100 vertices, from 910e4f6: #> [1] 66 26 #>  #> [[55]] #> + 3/100 vertices, from 910e4f6: #> [1] 66 22 91 #>  #> [[56]] #> + 2/100 vertices, from 910e4f6: #> [1] 66  5 #>  #> [[57]] #> + 2/100 vertices, from 910e4f6: #> [1] 67 91 #>  #> [[58]] #> + 2/100 vertices, from 910e4f6: #> [1] 67 84 #>  #> [[59]] #> + 2/100 vertices, from 910e4f6: #> [1] 67  3 #>  #> [[60]] #> + 3/100 vertices, from 910e4f6: #> [1] 67  1 28 #>  #> [[61]] #> + 2/100 vertices, from 910e4f6: #> [1] 68 87 #>  #> [[62]] #> + 2/100 vertices, from 910e4f6: #> [1] 68 42 #>  #> [[63]] #> + 2/100 vertices, from 910e4f6: #> [1] 68 17 #>  #> [[64]] #> + 2/100 vertices, from 910e4f6: #> [1] 68  3 #>  #> [[65]] #> + 2/100 vertices, from 910e4f6: #> [1] 69 10 #>  #> [[66]] #> + 2/100 vertices, from 910e4f6: #> [1] 70 84 #>  #> [[67]] #> + 2/100 vertices, from 910e4f6: #> [1] 70 81 #>  #> [[68]] #> + 2/100 vertices, from 910e4f6: #> [1] 70 42 #>  #> [[69]] #> + 2/100 vertices, from 910e4f6: #> [1] 70 39 #>  #> [[70]] #> + 2/100 vertices, from 910e4f6: #> [1] 75 93 #>  #> [[71]] #> + 2/100 vertices, from 910e4f6: #> [1] 75 90 #>  #> [[72]] #> + 2/100 vertices, from 910e4f6: #> [1] 75 84 #>  #> [[73]] #> + 2/100 vertices, from 910e4f6: #> [1] 75 83 #>  #> [[74]] #> + 2/100 vertices, from 910e4f6: #> [1] 75 23 #>  #> [[75]] #> + 2/100 vertices, from 910e4f6: #> [1] 75  6 #>  #> [[76]] #> + 2/100 vertices, from 910e4f6: #> [1] 76 98 #>  #> [[77]] #> + 2/100 vertices, from 910e4f6: #> [1] 76 97 #>  #> [[78]] #> + 2/100 vertices, from 910e4f6: #> [1] 76 40 #>  #> [[79]] #> + 2/100 vertices, from 910e4f6: #> [1] 76 11 #>  #> [[80]] #> + 2/100 vertices, from 910e4f6: #> [1] 76  5 #>  #> [[81]] #> + 2/100 vertices, from 910e4f6: #> [1] 77 84 #>  #> [[82]] #> + 2/100 vertices, from 910e4f6: #> [1] 77 20 #>  #> [[83]] #> + 2/100 vertices, from 910e4f6: #> [1] 78 40 #>  #> [[84]] #> + 2/100 vertices, from 910e4f6: #> [1] 78  6 #>  #> [[85]] #> + 2/100 vertices, from 910e4f6: #> [1] 79 95 #>  #> [[86]] #> + 2/100 vertices, from 910e4f6: #> [1] 79 85 #>  #> [[87]] #> + 2/100 vertices, from 910e4f6: #> [1] 79 48 #>  #> [[88]] #> + 2/100 vertices, from 910e4f6: #> [1] 79 39 #>  #> [[89]] #> + 2/100 vertices, from 910e4f6: #> [1] 79 31 #>  #> [[90]] #> + 2/100 vertices, from 910e4f6: #> [1] 80 33 #>  #> [[91]] #> + 2/100 vertices, from 910e4f6: #> [1] 80 17 #>  #> [[92]] #> + 2/100 vertices, from 910e4f6: #> [1] 81 31 #>  #> [[93]] #> + 2/100 vertices, from 910e4f6: #> [1] 83 13 #>  #> [[94]] #> + 2/100 vertices, from 910e4f6: #> [1] 84 96 #>  #> [[95]] #> + 2/100 vertices, from 910e4f6: #> [1] 85 44 #>  #> [[96]] #> + 2/100 vertices, from 910e4f6: #> [1] 86 37 #>  #> [[97]] #> + 2/100 vertices, from 910e4f6: #> [1] 86 28 #>  #> [[98]] #> + 2/100 vertices, from 910e4f6: #> [1] 86  6 #>  #> [[99]] #> + 2/100 vertices, from 910e4f6: #> [1] 86  2 #>  #> [[100]] #> + 2/100 vertices, from 910e4f6: #> [1] 87 98 #>  #> [[101]] #> + 2/100 vertices, from 910e4f6: #> [1] 87 28 #>  #> [[102]] #> + 2/100 vertices, from 910e4f6: #> [1]  1 48 #>  #> [[103]] #> + 3/100 vertices, from 910e4f6: #> [1]  1 18 28 #>  #> [[104]] #> + 2/100 vertices, from 910e4f6: #> [1]  1 17 #>  #> [[105]] #> + 2/100 vertices, from 910e4f6: #> [1] 89 38 #>  #> [[106]] #> + 2/100 vertices, from 910e4f6: #> [1] 89  3 #>  #> [[107]] #> + 2/100 vertices, from 910e4f6: #> [1] 90 45 #>  #> [[108]] #> + 2/100 vertices, from 910e4f6: #> [1] 91 41 #>  #> [[109]] #> + 2/100 vertices, from 910e4f6: #> [1] 91 39 #>  #> [[110]] #> + 2/100 vertices, from 910e4f6: #> [1] 93 48 #>  #> [[111]] #> + 2/100 vertices, from 910e4f6: #> [1] 93 40 #>  #> [[112]] #> + 2/100 vertices, from 910e4f6: #> [1] 93 30 #>  #> [[113]] #> + 2/100 vertices, from 910e4f6: #> [1] 96 97 #>  #> [[114]] #> + 2/100 vertices, from 910e4f6: #> [1] 96 11 #>  #> [[115]] #> + 2/100 vertices, from 910e4f6: #> [1] 98 41 #>  #> [[116]] #> + 2/100 vertices, from 910e4f6: #> [1] 88 44 #>  #> [[117]] #> + 2/100 vertices, from 910e4f6: #> [1] 88 38 #>  #> [[118]] #> + 2/100 vertices, from 910e4f6: #> [1] 88 20 #>  #> [[119]] #> + 2/100 vertices, from 910e4f6: #> [1] 88 17 #>  #> [[120]] #> + 2/100 vertices, from 910e4f6: #> [1]  2 33 #>  #> [[121]] #> + 2/100 vertices, from 910e4f6: #> [1] 2 8 #>  #> [[122]] #> + 2/100 vertices, from 910e4f6: #> [1]  3 26 #>  #> [[123]] #> + 2/100 vertices, from 910e4f6: #> [1]  3 16 #>  #> [[124]] #> + 2/100 vertices, from 910e4f6: #> [1]  4 33 #>  #> [[125]] #> + 2/100 vertices, from 910e4f6: #> [1]  4 28 #>  #> [[126]] #> + 2/100 vertices, from 910e4f6: #> [1]  5 48 #>  #> [[127]] #> + 2/100 vertices, from 910e4f6: #> [1]  5 42 #>  #> [[128]] #> + 2/100 vertices, from 910e4f6: #> [1]  5 28 #>  #> [[129]] #> + 2/100 vertices, from 910e4f6: #> [1]  6 10 #>  #> [[130]] #> + 2/100 vertices, from 910e4f6: #> [1]  8 28 #>  #> [[131]] #> + 2/100 vertices, from 910e4f6: #> [1]  8 11 #>  #> [[132]] #> + 2/100 vertices, from 910e4f6: #> [1] 11 49 #>  #> [[133]] #> + 2/100 vertices, from 910e4f6: #> [1] 11 23 #>  #> [[134]] #> + 2/100 vertices, from 910e4f6: #> [1] 13 48 #>  #> [[135]] #> + 2/100 vertices, from 910e4f6: #> [1] 16 48 #>  #> [[136]] #> + 2/100 vertices, from 910e4f6: #> [1] 20 37 #>  #> [[137]] #> + 2/100 vertices, from 910e4f6: #> [1] 26 48 #>  #> [[138]] #> + 2/100 vertices, from 910e4f6: #> [1] 26 45 #>  #> [[139]] #> + 2/100 vertices, from 910e4f6: #> [1] 31 42 #>  #> [[140]] #> + 2/100 vertices, from 910e4f6: #> [1] 35 49 #>"},{"path":"/reference/closeness.html","id":null,"dir":"Reference","previous_headings":"","what":"Closeness centrality of vertices — closeness","title":"Closeness centrality of vertices — closeness","text":"Closeness centrality measures many steps required access every vertex given vertex.","code":""},{"path":"/reference/closeness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Closeness centrality of vertices — closeness","text":"","code":"closeness(   graph,   vids = V(graph),   mode = c(\"out\", \"in\", \"all\", \"total\"),   weights = NULL,   normalized = FALSE,   cutoff = -1 )"},{"path":"/reference/closeness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Closeness centrality of vertices — closeness","text":"graph graph analyze. vids vertices closeness calculated. mode Character string, defined types paths used measuring distance directed graphs. “” measures paths vertex, “” measures paths vertex, uses undirected paths. argument ignored undirected graphs. weights Optional positive weight vector calculating weighted closeness. graph weight edge attribute, used default. Weights used calculating weighted shortest paths, interpreted distances. normalized Logical scalar, whether calculate normalized closeness, .e. inverse average distance reachable vertices. non-normalized closeness inverse sum distances reachable vertices. cutoff maximum path length consider calculating closeness. zero negative limit.","code":""},{"path":"/reference/closeness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Closeness centrality of vertices — closeness","text":"Numeric vector closeness values vertices v.","code":""},{"path":"/reference/closeness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Closeness centrality of vertices — closeness","text":"closeness centrality vertex defined inverse sum distances vertices graph: $$\\frac{1}{\\sum_{\\ne v} d_{vi}}$$ (directed) path vertex v , omitted calculation. vertices reachable v, closeness returned NaN. cutoff smaller. can run larger graphs, running time quadratic (cutoff small). cutoff zero negative (default), function calculates exact closeness scores. Using zero cutoff deprecated future versions (1.4.0) treat zero cutoff literally (.e. paths considered ). want cutoff, use negative number. estimate_closeness() alias closeness() different argument order, sake compatibility older versions igraph. Closeness centrality meaningful connected graphs. disconnected graphs, consider using harmonic centrality harmonic_centrality()","code":""},{"path":"/reference/closeness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Closeness centrality of vertices — closeness","text":"Freeman, L.C. (1979). Centrality Social Networks : Conceptual Clarification. Social Networks, 1, 215-239.","code":""},{"path":[]},{"path":"/reference/closeness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Closeness centrality of vertices — closeness","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/closeness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closeness centrality of vertices — closeness","text":"","code":"g <- make_ring(10) g2 <- make_star(10) closeness(g) #>  [1] 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 closeness(g2, mode = \"in\") #>  [1] 0.1111111       NaN       NaN       NaN       NaN       NaN       NaN #>  [8]       NaN       NaN       NaN closeness(g2, mode = \"out\") #>  [1] NaN   1   1   1   1   1   1   1   1   1 closeness(g2, mode = \"all\") #>  [1] 0.11111111 0.05882353 0.05882353 0.05882353 0.05882353 0.05882353 #>  [7] 0.05882353 0.05882353 0.05882353 0.05882353"},{"path":"/reference/cluster_edge_betweenness.html","id":null,"dir":"Reference","previous_headings":"","what":"Community structure detection based on edge betweenness — cluster_edge_betweenness","title":"Community structure detection based on edge betweenness — cluster_edge_betweenness","text":"Many networks consist modules densely connected sparsely connected modules.","code":""},{"path":"/reference/cluster_edge_betweenness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community structure detection based on edge betweenness — cluster_edge_betweenness","text":"","code":"cluster_edge_betweenness(   graph,   weights = NULL,   directed = TRUE,   edge.betweenness = TRUE,   merges = TRUE,   bridges = TRUE,   modularity = TRUE,   membership = TRUE )"},{"path":"/reference/cluster_edge_betweenness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community structure detection based on edge betweenness — cluster_edge_betweenness","text":"graph graph analyze. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. Edge weights used calculate weighted edge betweenness. means edges interpreted distances, connection strengths. directed Logical constant, whether calculate directed edge betweenness directed graphs. ignored undirected graphs. edge.betweenness Logical constant, whether return edge betweenness edges time removal. merges Logical constant, whether return merge matrix representing hierarchical community structure network.  argument called merges, even community structure algorithm divisive agglomerative: builds tree top bottom. one line merge (.e. split) matrix, first line first merge (last split). communities identified integer number starting one. Community ids smaller equal \\(N\\), number vertices graph, belong singleton communities, ie. individual vertices. first merge \\(N\\) communities numbered one \\(N\\). first merge, first line matrix creates community \\(N+1\\), second merge creates community \\(N+2\\), etc. bridges Logical constant, whether return list edge removals actually splitted component graph. modularity Logical constant, whether calculate maximum modularity score, considering possibly community structures along edge-betweenness based edge removals. membership Logical constant, whether calculate membership vector corresponding highest possible modularity score.","code":""},{"path":"/reference/cluster_edge_betweenness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community structure detection based on edge betweenness — cluster_edge_betweenness","text":"cluster_edge_betweenness() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_edge_betweenness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Community structure detection based on edge betweenness — cluster_edge_betweenness","text":"edge betweenness score edge measures number shortest paths , see edge_betweenness() details. idea edge betweenness based community structure detection likely edges connecting separate modules high edge betweenness shortest paths one module another must traverse . gradually remove edge highest edge betweenness score get hierarchical map, rooted tree, called dendrogram graph. leafs tree individual vertices root tree represents whole graph. cluster_edge_betweenness() performs algorithm calculating edge betweenness graph, removing edge highest edge betweenness score, recalculating edge betweenness edges removing one highest score, etc. edge.betweeness.community returns various information collected run algorithm. See return value .","code":""},{"path":"/reference/cluster_edge_betweenness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Community structure detection based on edge betweenness — cluster_edge_betweenness","text":"M Newman M Girvan: Finding evaluating community structure networks, Physical Review E 69, 026113 (2004)","code":""},{"path":[]},{"path":"/reference/cluster_edge_betweenness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Community structure detection based on edge betweenness — cluster_edge_betweenness","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/cluster_edge_betweenness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community structure detection based on edge betweenness — cluster_edge_betweenness","text":"","code":"g <- sample_pa(100, m = 2, directed = FALSE) eb <- cluster_edge_betweenness(g)  g <- make_full_graph(10) %du% make_full_graph(10) g <- add_edges(g, c(1, 11)) eb <- cluster_edge_betweenness(g) eb #> IGRAPH clustering edge betweenness, groups: 2, mod: 0.49 #> + groups: #>   $`1` #>    [1]  1  2  3  4  5  6  7  8  9 10 #>    #>   $`2` #>    [1] 11 12 13 14 15 16 17 18 19 20 #>"},{"path":"/reference/cluster_fast_greedy.html","id":null,"dir":"Reference","previous_headings":"","what":"Community structure via greedy optimization of modularity — cluster_fast_greedy","title":"Community structure via greedy optimization of modularity — cluster_fast_greedy","text":"function tries find dense subgraph, also called communities graphs via directly optimizing modularity score.","code":""},{"path":"/reference/cluster_fast_greedy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community structure via greedy optimization of modularity — cluster_fast_greedy","text":"","code":"cluster_fast_greedy(   graph,   merges = TRUE,   modularity = TRUE,   membership = TRUE,   weights = NULL )"},{"path":"/reference/cluster_fast_greedy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community structure via greedy optimization of modularity — cluster_fast_greedy","text":"graph input graph merges Logical scalar, whether return merge matrix. modularity Logical scalar, whether return vector containing modularity merge. membership Logical scalar, whether calculate membership vector corresponding maximum modularity score, considering possible community structures along merges. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. larger edge weight means stronger connection function.","code":""},{"path":"/reference/cluster_fast_greedy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community structure via greedy optimization of modularity — cluster_fast_greedy","text":"cluster_fast_greedy() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_fast_greedy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Community structure via greedy optimization of modularity — cluster_fast_greedy","text":"function implements fast greedy modularity optimization algorithm finding community structure, see Clauset, MEJ Newman, C Moore: Finding community structure large networks, http://www.arxiv.org/abs/cond-mat/0408187 details.","code":""},{"path":"/reference/cluster_fast_greedy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Community structure via greedy optimization of modularity — cluster_fast_greedy","text":"Clauset, MEJ Newman, C Moore: Finding community structure large networks, http://www.arxiv.org/abs/cond-mat/0408187","code":""},{"path":[]},{"path":"/reference/cluster_fast_greedy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Community structure via greedy optimization of modularity — cluster_fast_greedy","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com R interface.","code":""},{"path":"/reference/cluster_fast_greedy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community structure via greedy optimization of modularity — cluster_fast_greedy","text":"","code":"g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5) g <- add_edges(g, c(1, 6, 1, 11, 6, 11)) fc <- cluster_fast_greedy(g) membership(fc) #>  [1] 3 3 3 3 3 1 1 1 1 1 2 2 2 2 2 sizes(fc) #> Community sizes #> 1 2 3  #> 5 5 5"},{"path":"/reference/cluster_fluid_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Community detection algorithm based on interacting fluids — cluster_fluid_communities","title":"Community detection algorithm based on interacting fluids — cluster_fluid_communities","text":"algorithm detects communities based simple idea several fluids interacting non-homogeneous environment (graph topology), expanding contracting based interaction density.","code":""},{"path":"/reference/cluster_fluid_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community detection algorithm based on interacting fluids — cluster_fluid_communities","text":"","code":"cluster_fluid_communities(graph, no.of.communities)"},{"path":"/reference/cluster_fluid_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community detection algorithm based on interacting fluids — cluster_fluid_communities","text":"graph input graph. graph must simple connected. Empty graphs supported well single vertex graphs. Edge directions ignored. Weights considered. ..communities number communities found. Must greater 0 fewer number vertices graph.","code":""},{"path":"/reference/cluster_fluid_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community detection algorithm based on interacting fluids — cluster_fluid_communities","text":"cluster_fluid_communities() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_fluid_communities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Community detection algorithm based on interacting fluids — cluster_fluid_communities","text":"Parés F, Gasulla DG, et. al. (2018) Fluid Communities: Competitive, Scalable Diverse Community Detection Algorithm. : Complex Networks & Applications VI: Proceedings Complex Networks 2017 (Sixth International Conference Complex Networks Applications), Springer, vol 689, p 229, doi: 10.1007/978-3-319-72150-7_19","code":""},{"path":[]},{"path":"/reference/cluster_fluid_communities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Community detection algorithm based on interacting fluids — cluster_fluid_communities","text":"Ferran Parés","code":""},{"path":"/reference/cluster_fluid_communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community detection algorithm based on interacting fluids — cluster_fluid_communities","text":"","code":"g <- graph.famous(\"Zachary\") comms <- cluster_fluid_communities(g, 2)"},{"path":"/reference/cluster_infomap.html","id":null,"dir":"Reference","previous_headings":"","what":"Infomap community finding — cluster_infomap","title":"Infomap community finding — cluster_infomap","text":"Find community structure minimizes expected description length random walker trajectory","code":""},{"path":"/reference/cluster_infomap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infomap community finding — cluster_infomap","text":"","code":"cluster_infomap(   graph,   e.weights = NULL,   v.weights = NULL,   nb.trials = 10,   modularity = TRUE )"},{"path":"/reference/cluster_infomap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infomap community finding — cluster_infomap","text":"graph input graph. e.weights NULL, numeric vector edge weights. length must match number edges graph.  default ‘weight’ edge attribute used weights. present, edges considered weight. Larger edge weights correspond stronger connections. v.weights NULL, numeric vector vertex weights. length must match number vertices graph.  default ‘weight’ vertex attribute used weights. present, vertices considered weight. larger vertex weight means larger probability random surfer jumps vertex. nb.trials number attempts partition network (can integer value equal larger 1). modularity Logical scalar, whether calculate modularity score detected community structure.","code":""},{"path":"/reference/cluster_infomap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infomap community finding — cluster_infomap","text":"cluster_infomap() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_infomap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infomap community finding — cluster_infomap","text":"Please see details method references given .","code":""},{"path":"/reference/cluster_infomap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Infomap community finding — cluster_infomap","text":"original paper: M. Rosvall C. T. Bergstrom, Maps information flow reveal community structure complex networks, PNAS 105, 1118 (2008) doi:10.1073/pnas.0706851105 , https://arxiv.org/abs/0707.0609 detailed paper: M. Rosvall, D. Axelsson, C. T. Bergstrom, map equation, Eur. Phys. J. Special Topics 178, 13 (2009). doi:10.1140/epjst/e2010-01179-1 , https://arxiv.org/abs/0906.1405.","code":""},{"path":[]},{"path":"/reference/cluster_infomap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Infomap community finding — cluster_infomap","text":"Martin Rosvall wrote original C++ code. ported igraph-like Emmanuel Navarro.  R interface cosmetics done Gabor Csardi csardi.gabor@gmail.com.","code":""},{"path":"/reference/cluster_infomap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infomap community finding — cluster_infomap","text":"","code":"## Zachary's karate club g <- make_graph(\"Zachary\")  imc <- cluster_infomap(g) membership(imc) #>  [1] 1 1 1 1 2 2 2 1 3 1 2 1 1 1 3 3 2 1 3 1 3 1 3 3 3 3 3 3 3 3 3 3 3 3 communities(imc) #> $`1` #>  [1]  1  2  3  4  8 10 12 13 14 18 20 22 #>  #> $`2` #> [1]  5  6  7 11 17 #>  #> $`3` #>  [1]  9 15 16 19 21 23 24 25 26 27 28 29 30 31 32 33 34 #>"},{"path":"/reference/cluster_label_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding communities based on propagating labels — cluster_label_prop","title":"Finding communities based on propagating labels — cluster_label_prop","text":"fast, nearly linear time algorithm detecting community structure networks. works labeling vertices unique labels updating labels majority voting neighborhood vertex.","code":""},{"path":"/reference/cluster_label_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding communities based on propagating labels — cluster_label_prop","text":"","code":"cluster_label_prop(graph, weights = NULL, initial = NULL, fixed = NULL)"},{"path":"/reference/cluster_label_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding communities based on propagating labels — cluster_label_prop","text":"graph input graph, undirected make sense. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. larger edge weight means stronger connection function. initial initial state. NULL, every vertex different label beginning. Otherwise must vector entry vertex. Non-negative values denote different labels, negative entries denote vertices without labels. fixed Logical vector denoting labels fixed. course makes sense provided initial state, otherwise element ignored. Also note vertices without labels fixed.","code":""},{"path":"/reference/cluster_label_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding communities based on propagating labels — cluster_label_prop","text":"cluster_label_prop() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_label_prop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finding communities based on propagating labels — cluster_label_prop","text":"function implements community detection method described : Raghavan, U.N. Albert, R. Kumara, S.: Near linear time algorithm detect community structures large-scale networks. Phys Rev E 76, 036106. (2007). version extends original method ability take edge weights consideration also allowing labels fixed. abstract paper: “algorithm every node initialized unique label every step node adopts label neighbors currently . iterative process densely connected groups nodes form consensus unique label form communities.”","code":""},{"path":"/reference/cluster_label_prop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Finding communities based on propagating labels — cluster_label_prop","text":"Raghavan, U.N. Albert, R. Kumara, S.: Near linear time algorithm detect community structures large-scale networks. Phys Rev E 76, 036106. (2007)","code":""},{"path":[]},{"path":"/reference/cluster_label_prop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding communities based on propagating labels — cluster_label_prop","text":"Tamas Nepusz ntamas@gmail.com C implementation, Gabor Csardi csardi.gabor@gmail.com manual page.","code":""},{"path":"/reference/cluster_label_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding communities based on propagating labels — cluster_label_prop","text":"","code":"g <- sample_gnp(10, 5 / 10) %du% sample_gnp(9, 5 / 9) g <- add_edges(g, c(1, 12)) cluster_label_prop(g) #> IGRAPH clustering label propagation, groups: 2, mod: 0.47 #> + groups: #>   $`1` #>    [1]  1  2  3  4  5  6  7  8  9 10 #>    #>   $`2` #>   [1] 11 12 13 14 15 16 17 18 19 #>"},{"path":"/reference/cluster_leading_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"function tries find densely connected subgraphs graph calculating leading non-negative eigenvector modularity matrix graph.","code":""},{"path":"/reference/cluster_leading_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"","code":"cluster_leading_eigen(   graph,   steps = -1,   weights = NULL,   start = NULL,   options = arpack_defaults,   callback = NULL,   extra = NULL,   env = parent.frame() )"},{"path":"/reference/cluster_leading_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"graph input graph. undirected method needs symmetric matrix. steps number steps take, actually number tries make step. particularly useful parameter. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. larger edge weight means stronger connection function. start NULL, numeric membership vector, giving start configuration algorithm. options named list override ARPACK options. callback NULL, must callback function. called iteration, calculating leading eigenvector modularity matrix. See details . extra Additional argument supply callback function. env environment callback function evaluated.","code":""},{"path":"/reference/cluster_leading_eigen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"cluster_leading_eigen() returns named list following members: membership membership vector end algorithm, splits possible. merges merges matrix starting state described membership member. two-column matrix line describes merge two communities, first line first merge creates community ‘N’, N number initial communities graph, second line creates community N+1, etc. options Information underlying ARPACK computation, see arpack() details.","code":""},{"path":"/reference/cluster_leading_eigen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"function documented section implements ‘leading eigenvector’ method developed Mark Newman, see reference . heart method definition modularity matrix, B, B=-P, adjacency matrix (undirected) network, P contains probability certain edges present according ‘configuration model’. words, P[,j] element P probability edge vertices j random network degrees vertices input graph. leading eigenvector method works calculating eigenvector modularity matrix largest positive eigenvalue separating vertices two community based sign corresponding element eigenvector. elements eigenvector sign means network underlying comuunity structure.  Check Newman's paper understand good method detecting community structure.","code":""},{"path":"/reference/cluster_leading_eigen.html","id":"callback-functions","dir":"Reference","previous_headings":"","what":"Callback functions","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"callback argument can used supply function called eigenvector calculation. following arguments supplied function: membership actual membership vector, zero-based indexing. community community algorithm just tried split, community numbering starts zero . value eigenvalue belonging leading eigenvector algorithm just found. vector leading eigenvector algorithm just found. multiplier R function can used multiple actual modularity matrix arbitrary vector. Supply vector argument perform multiplication. function can used ARPACK. extra extra argument passed cluster_leading_eigen().","code":""},{"path":"/reference/cluster_leading_eigen.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"MEJ Newman: Finding community structure using eigenvectors matrices, Physical Review E 74 036104, 2006.","code":""},{"path":[]},{"path":"/reference/cluster_leading_eigen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/cluster_leading_eigen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community structure detecting based on the leading eigenvector of the\ncommunity matrix — cluster_leading_eigen","text":"","code":"g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5) g <- add_edges(g, c(1, 6, 1, 11, 6, 11)) lec <- cluster_leading_eigen(g) lec #> IGRAPH clustering leading eigenvector, groups: 3, mod: 0.58 #> + groups: #>   $`1` #>   [1] 1 2 3 4 5 #>    #>   $`2` #>   [1]  6  7  8  9 10 #>    #>   $`3` #>   [1] 11 12 13 14 15 #>     cluster_leading_eigen(g, start = membership(lec)) #> IGRAPH clustering leading eigenvector, groups: 3, mod: 0.58 #> + groups: #>   $`1` #>   [1] 1 2 3 4 5 #>    #>   $`2` #>   [1]  6  7  8  9 10 #>    #>   $`3` #>   [1] 11 12 13 14 15 #>"},{"path":"/reference/cluster_leiden.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","title":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","text":"Leiden algorithm similar Louvain algorithm, cluster_louvain(), faster yields higher quality solutions. can optimize modularity Constant Potts Model, suffer resolution-limit (see preprint http://arxiv.org/abs/1104.3083).","code":""},{"path":"/reference/cluster_leiden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","text":"","code":"cluster_leiden(   graph,   objective_function = c(\"CPM\", \"modularity\"),   weights = NULL,   resolution_parameter = 1,   beta = 0.01,   initial_membership = NULL,   n_iterations = 2,   vertex_weights = NULL )"},{"path":"/reference/cluster_leiden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","text":"graph input graph, undirected graphs supported. objective_function Whether use Constant Potts Model (CPM) modularity. Must either \"CPM\" \"modularity\". weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. larger edge weight means stronger connection function. resolution_parameter resolution parameter use. Higher resolutions lead smaller communities, lower resolutions lead fewer larger communities. beta Parameter affecting randomness Leiden algorithm. affects refinement step algorithm. initial_membership provided, Leiden algorithm try improve provided membership. argument provided, aglorithm simply starts singleton partition. n_iterations number iterations iterate Leiden algorithm. iteration may improve partition . vertex_weights vertex weights used Leiden algorithm. provided, automatically determined basis objective_function. Please see details function interpret vertex weights.","code":""},{"path":"/reference/cluster_leiden.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","text":"cluster_leiden() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_leiden.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","text":"Leiden algorithm consists three phases: (1) local moving nodes, (2) refinement partition (3) aggregation network based refined partition, using non-refined partition create initial partition aggregate network. local move procedure Leiden algorithm, nodes whose neighborhood changed visited. refinement done restarting singleton partition within cluster gradually merging subclusters. aggregating, single cluster may represented several nodes (subclusters identified refinement). Leiden algorithm provides several guarantees. Leiden algorithm typically iterated: output one iteration used input next iteration. iteration clusters guaranteed connected well-separated. iteration nothing changed, nodes parts guaranteed locally optimally assigned. Finally, asymptotically, subsets clusters guaranteed locally optimally assigned. details, please see Traag, Waltman & van Eck (2019). objective function optimized $$\\frac{1}{2m} \\sum_{ij} (A_{ij} - \\gamma n_i n_j)\\delta(\\sigma_i, \\sigma_j)$$ \\(m\\) total edge weight, \\(A_{ij}\\) weight edge \\((, j)\\), \\(\\gamma\\) -called resolution parameter, \\(n_i\\) node weight node \\(\\), \\(\\sigma_i\\) cluster node \\(\\) \\(\\delta(x, y) = 1\\) \\(x = y\\) \\(0\\) otherwise. setting \\(n_i = k_i\\), degree node \\(\\), dividing \\(\\gamma\\) \\(2m\\), effectively obtain expression modularity. Hence, standard modularity optimized supply degrees vertex_weights supplying resolution parameter \\(\\frac{1}{2m}\\), \\(m\\) number edges. specify vertex_weights, correct vertex weights scaling \\(\\gamma\\) determined automatically objective_function argument.","code":""},{"path":"/reference/cluster_leiden.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","text":"Traag, V. ., Waltman, L., & van Eck, N. J. (2019). Louvain Leiden: guaranteeing well-connected communities. Scientific reports, 9(1), 5233. doi: 10.1038/s41598-019-41695-z, arXiv:1810.08473v3 [cs.SI]","code":""},{"path":[]},{"path":"/reference/cluster_leiden.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","text":"Vincent Traag","code":""},{"path":"/reference/cluster_leiden.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding community structure of a graph using the Leiden algorithm of Traag,\nvan Eck & Waltman. — cluster_leiden","text":"","code":"g <- make_graph(\"Zachary\") # By default CPM is used r <- quantile(strength(g))[2] / (gorder(g) - 1) # Set seed for sake of reproducibility set.seed(1) ldc <- cluster_leiden(g, resolution_parameter = r) print(ldc) #> IGRAPH clustering leiden, groups: 2, mod: NA #> + groups: #>   $`1` #>    [1]  1  2  3  4  5  6  7  8 10 11 12 13 14 17 18 20 22 #>    #>   $`2` #>    [1]  9 15 16 19 21 23 24 25 26 27 28 29 30 31 32 33 34 #>    plot(ldc, g)"},{"path":"/reference/cluster_louvain.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding community structure by multi-level optimization of modularity — cluster_louvain","title":"Finding community structure by multi-level optimization of modularity — cluster_louvain","text":"function implements multi-level modularity optimization algorithm finding community structure, see references . based modularity measure hierarchical approach.","code":""},{"path":"/reference/cluster_louvain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding community structure by multi-level optimization of modularity — cluster_louvain","text":"","code":"cluster_louvain(graph, weights = NULL, resolution = 1)"},{"path":"/reference/cluster_louvain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding community structure by multi-level optimization of modularity — cluster_louvain","text":"graph input graph. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. larger edge weight means stronger connection function. resolution Optional resolution parameter allows user adjust resolution parameter modularity function algorithm uses internally. Lower values typically yield fewer, larger clusters. original definition modularity recovered resolution parameter set 1.","code":""},{"path":"/reference/cluster_louvain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding community structure by multi-level optimization of modularity — cluster_louvain","text":"cluster_louvain() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_louvain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finding community structure by multi-level optimization of modularity — cluster_louvain","text":"function implements multi-level modularity optimization algorithm finding community structure, see VD Blondel, J-L Guillaume, R Lambiotte E Lefebvre: Fast unfolding community hierarchies large networks, https://arxiv.org/abs/0803.0476 details. based modularity measure hierarchical approach. Initially, vertex assigned community . every step, vertices re-assigned communities local, greedy way: vertex moved community achieves highest contribution modularity. vertices can reassigned, community considered vertex , process starts merged communities. process stops single vertex left modularity increased step. Since igraph 1.3, vertices processed random order. function contributed Tom Gregorovic.","code":""},{"path":"/reference/cluster_louvain.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Finding community structure by multi-level optimization of modularity — cluster_louvain","text":"Vincent D. Blondel, Jean-Loup Guillaume, Renaud Lambiotte, Etienne Lefebvre: Fast unfolding communities large networks. J. Stat. Mech. (2008) P10008","code":""},{"path":[]},{"path":"/reference/cluster_louvain.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding community structure by multi-level optimization of modularity — cluster_louvain","text":"Tom Gregorovic, Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/cluster_louvain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding community structure by multi-level optimization of modularity — cluster_louvain","text":"","code":"# This is so simple that we will have only one level g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5) g <- add_edges(g, c(1, 6, 1, 11, 6, 11)) cluster_louvain(g) #> IGRAPH clustering multi level, groups: 3, mod: 0.58 #> + groups: #>   $`1` #>   [1] 1 2 3 4 5 #>    #>   $`2` #>   [1]  6  7  8  9 10 #>    #>   $`3` #>   [1] 11 12 13 14 15 #>"},{"path":"/reference/cluster_optimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal community structure — cluster_optimal","title":"Optimal community structure — cluster_optimal","text":"function calculates optimal community structure graph, maximizing modularity measure possible partitions.","code":""},{"path":"/reference/cluster_optimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal community structure — cluster_optimal","text":"","code":"cluster_optimal(graph, weights = NULL)"},{"path":"/reference/cluster_optimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal community structure — cluster_optimal","text":"graph input graph. Edge directions ignored directed graphs. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. larger edge weight means stronger connection function.","code":""},{"path":"/reference/cluster_optimal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal community structure — cluster_optimal","text":"cluster_optimal() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_optimal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal community structure — cluster_optimal","text":"function calculates optimal community structure graph, terms maximal modularity score. calculation done transforming modularity maximization integer programming problem, calling GLPK library solve . Please reference details. Note modularity optimization NP-complete problem, known algorithms exponential time complexity. means probably want run function larger graphs. Graphs fifty vertices fine, graphs couple hundred vertices might possible.","code":""},{"path":"/reference/cluster_optimal.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal community structure — cluster_optimal","text":"","code":"## Zachary's karate club g <- make_graph(\"Zachary\")  ## We put everything into a big 'try' block, in case ## igraph was compiled without GLPK support  ## The calculation only takes a couple of seconds oc <- cluster_optimal(g)  ## Double check the result print(modularity(oc)) print(modularity(g, membership(oc)))  ## Compare to the greedy optimizer fc <- cluster_fast_greedy(g) print(modularity(fc))"},{"path":"/reference/cluster_optimal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimal community structure — cluster_optimal","text":"Ulrik Brandes, Daniel Delling, Marco Gaertler, Robert Gorke, Martin Hoefer, Zoran Nikoloski, Dorothea Wagner: Modularity Clustering, IEEE Transactions Knowledge Data Engineering 20(2):172-188, 2008.","code":""},{"path":[]},{"path":"/reference/cluster_optimal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimal community structure — cluster_optimal","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/cluster_spinglass.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","title":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","text":"function tries find communities graphs via spin-glass model simulated annealing.","code":""},{"path":"/reference/cluster_spinglass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","text":"","code":"cluster_spinglass(   graph,   weights = NULL,   vertex = NULL,   spins = 25,   parupdate = FALSE,   start.temp = 1,   stop.temp = 0.01,   cool.fact = 0.99,   update.rule = c(\"config\", \"random\", \"simple\"),   gamma = 1,   implementation = c(\"orig\", \"neg\"),   gamma.minus = 1 )"},{"path":"/reference/cluster_spinglass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","text":"graph input graph, can directed direction edges neglected. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. larger edge weight means stronger connection function. vertex parameter can used calculate community given vertex without calculating communities. Note argument present arguments ignored. spins Integer constant, number spins use. upper limit number communities. problem supply (reasonably) big number , case spin states unpopulated. parupdate Logical constant, whether update spins vertices parallel (synchronously) . argument ignored second form function used (ie. ‘vertex’ argument present). also implemented “neg” implementation. start.temp Real constant, start temperature.  argument ignored second form function used (ie. ‘vertex’ argument present). stop.temp Real constant, stop temperature. simulation terminates temperature lowers level.  argument ignored second form function used (ie. ‘vertex’ argument present). cool.fact Cooling factor simulated annealing.  argument ignored second form function used (ie. ‘vertex’ argument present). update.rule Character constant giving ‘null-model’ simulation. Possible values: “simple” “config”. “simple” uses random graph number edges baseline probability “config” uses random graph vertex degrees input graph. gamma Real constant, gamma argument algorithm. specifies balance importance present non-present edges community. Roughly, comunity set vertices many edges inside community edges outside community. default 1.0 value makes existing non-existing links equally important. Smaller values make existing links, greater values missing links important. implementation Character scalar. Currently igraph contains two implementations Spin-glass community finding algorithm. faster original implementation default. implementation, takes account negative weights, can chosen supplying ‘neg’ . gamma.minus Real constant, gamma.minus parameter algorithm. specifies balance importance present non-present negative weighted edges community. Smaller values gamma.minus, leads communities lesser negative intra-connectivity. argument set zero, algorithm reduces graph coloring algorithm, using number spins number colors. argument ignored ‘orig’ implementation chosen.","code":""},{"path":"/reference/cluster_spinglass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","text":"vertex argument given, ie. first form used cluster_spinglass() returns communities() object. vertex argument present, ie. second form used named list returned following components: community Numeric vector giving ids vertices community vertex. cohesion cohesion score result, see references. adhesion adhesion score result, see references. inner.links number edges within community vertex. outer.links number edges community vertex rest graph.","code":""},{"path":"/reference/cluster_spinglass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","text":"function tries find communities graph. community set nodes many edges inside community edges outside (.e. community rest graph.) idea reversed edges negative weight, ie. negative edges inside community many negative edges communities. Note ‘neg’ implementation supports negative edge weights. spinglass.cummunity function can solve two problems related community detection. vertex argument given (NULL), regular community detection problem solved (approximately), .e. partitioning vertices communities, optimizing energy function. vertex argument given NULL, must vertex id, energy function used find community given vertex. See also examples .","code":""},{"path":"/reference/cluster_spinglass.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","text":"J. Reichardt S. Bornholdt: Statistical Mechanics Community Detection, Phys. Rev. E, 74, 016110 (2006), https://arxiv.org/abs/cond-mat/0603718 M. E. J. Newman M. Girvan: Finding evaluating community structure networks, Phys. Rev. E 69, 026113 (2004) V.. Traag Jeroen Bruggeman: Community detection networks positive negative links, https://arxiv.org/abs/0811.2329 (2008).","code":""},{"path":[]},{"path":"/reference/cluster_spinglass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","text":"Jorg Reichardt original code Gabor Csardi csardi.gabor@gmail.com igraph glue code. Changes original function including possibility negative ties implemented Vincent Traag (http://www.traag.net/).","code":""},{"path":"/reference/cluster_spinglass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding communities in graphs based on statistical meachanics — cluster_spinglass","text":"","code":"g <- sample_gnp(10, 5 / 10) %du% sample_gnp(9, 5 / 9) g <- add_edges(g, c(1, 12)) g <- induced_subgraph(g, subcomponent(g, 1)) cluster_spinglass(g, spins = 2) #> IGRAPH clustering spinglass, groups: 2, mod: 0.48 #> + groups: #>   $`1` #>    [1]  1  2  3  4  5  6  7  8  9 10 #>    #>   $`2` #>   [1] 11 12 13 14 15 16 17 18 19 #>    cluster_spinglass(g, vertex = 1) #> $community #>  [1]  1  2  5  6  9  7  8 10  4  3 #>  #> $cohesion #> [1] 11.66837 #>  #> $adhesion #> [1] -23.33673 #>  #> $inner.links #> [1] 26 #>  #> $outer.links #> [1] 1 #>"},{"path":"/reference/cluster_walktrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Community structure via short random walks — cluster_walktrap","title":"Community structure via short random walks — cluster_walktrap","text":"function tries find densely connected subgraphs, also called communities graph via random walks. idea short random walks tend stay community.","code":""},{"path":"/reference/cluster_walktrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community structure via short random walks — cluster_walktrap","text":"","code":"cluster_walktrap(   graph,   weights = NULL,   steps = 4,   merges = TRUE,   modularity = TRUE,   membership = TRUE )"},{"path":"/reference/cluster_walktrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community structure via short random walks — cluster_walktrap","text":"graph input graph, edge directions ignored directed graphs. weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use community detection. Larger edge weights increase probability edge selected random walker. words, larger edge weights correspond stronger connections. steps length random walks perform. merges Logical scalar, whether include merge matrix result. modularity Logical scalar, whether include vector modularity scores result. membership argument true, always calculated. membership Logical scalar, whether calculate membership vector split corresponding highest modularity value.","code":""},{"path":"/reference/cluster_walktrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community structure via short random walks — cluster_walktrap","text":"cluster_walktrap() returns communities() object, please see communities() manual page details.","code":""},{"path":"/reference/cluster_walktrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Community structure via short random walks — cluster_walktrap","text":"function implementation Walktrap community finding algorithm, see Pascal Pons, Matthieu Latapy: Computing communities large networks using random walks, https://arxiv.org/abs/physics/0512106","code":""},{"path":"/reference/cluster_walktrap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Community structure via short random walks — cluster_walktrap","text":"Pascal Pons, Matthieu Latapy: Computing communities large networks using random walks, https://arxiv.org/abs/physics/0512106","code":""},{"path":[]},{"path":"/reference/cluster_walktrap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Community structure via short random walks — cluster_walktrap","text":"Pascal Pons (http://psl.pons.free.fr/) Gabor Csardi csardi.gabor@gmail.com R igraph interface","code":""},{"path":"/reference/cluster_walktrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community structure via short random walks — cluster_walktrap","text":"","code":"g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5) g <- add_edges(g, c(1, 6, 1, 11, 6, 11)) cluster_walktrap(g) #> IGRAPH clustering walktrap, groups: 3, mod: 0.58 #> + groups: #>   $`1` #>   [1] 11 12 13 14 15 #>    #>   $`2` #>   [1]  6  7  8  9 10 #>    #>   $`3` #>   [1] 1 2 3 4 5 #>"},{"path":"/reference/cocitation.html","id":null,"dir":"Reference","previous_headings":"","what":"Cocitation coupling — cocitation","title":"Cocitation coupling — cocitation","text":"Two vertices cocited another vertex citing . cocitation() simply counts many types two vertices cocited. bibliographic coupling two vertices number vertices cite, bibcoupling() calculates .","code":""},{"path":"/reference/cocitation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cocitation coupling — cocitation","text":"","code":"cocitation(graph, v = V(graph))"},{"path":"/reference/cocitation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cocitation coupling — cocitation","text":"graph graph object analyze v Vertex sequence numeric vector, vertex ids cocitation bibliographic coupling values want calculate. default vertices.","code":""},{"path":"/reference/cocitation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cocitation coupling — cocitation","text":"numeric matrix length(v) lines vcount(graph) columns. Element (,j) contains cocitation bibliographic coupling vertices v[] j.","code":""},{"path":"/reference/cocitation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cocitation coupling — cocitation","text":"cocitation() calculates cocitation counts vertices v argument vertices graph. bibcoupling() calculates bibliographic coupling vertices v vertices graph. Calculating cocitation bibliographic coupling one vertex costs amount computation vertices. might change future.","code":""},{"path":"/reference/cocitation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cocitation coupling — cocitation","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/cocitation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cocitation coupling — cocitation","text":"","code":"g <- make_kautz_graph(2, 3) cocitation(g) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    0    2    0    0    0    0    0    0    0     0     0     0     0 #>  [2,]    2    0    0    0    0    0    0    0    0     0     0     0     0 #>  [3,]    0    0    0    2    0    0    0    0    0     0     0     0     0 #>  [4,]    0    0    2    0    0    0    0    0    0     0     0     0     0 #>  [5,]    0    0    0    0    0    2    0    0    0     0     0     0     0 #>  [6,]    0    0    0    0    2    0    0    0    0     0     0     0     0 #>  [7,]    0    0    0    0    0    0    0    2    0     0     0     0     0 #>  [8,]    0    0    0    0    0    0    2    0    0     0     0     0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     2     0     0     0 #> [10,]    0    0    0    0    0    0    0    0    2     0     0     0     0 #> [11,]    0    0    0    0    0    0    0    0    0     0     0     2     0 #> [12,]    0    0    0    0    0    0    0    0    0     0     2     0     0 #> [13,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [14,]    0    0    0    0    0    0    0    0    0     0     0     0     2 #> [15,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [16,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [17,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [18,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [19,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [20,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [21,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [22,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [23,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [24,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] #>  [1,]     0     0     0     0     0     0     0     0     0     0     0 #>  [2,]     0     0     0     0     0     0     0     0     0     0     0 #>  [3,]     0     0     0     0     0     0     0     0     0     0     0 #>  [4,]     0     0     0     0     0     0     0     0     0     0     0 #>  [5,]     0     0     0     0     0     0     0     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     0     0     0     0     0     0     0 #> [11,]     0     0     0     0     0     0     0     0     0     0     0 #> [12,]     0     0     0     0     0     0     0     0     0     0     0 #> [13,]     2     0     0     0     0     0     0     0     0     0     0 #> [14,]     0     0     0     0     0     0     0     0     0     0     0 #> [15,]     0     0     2     0     0     0     0     0     0     0     0 #> [16,]     0     2     0     0     0     0     0     0     0     0     0 #> [17,]     0     0     0     0     2     0     0     0     0     0     0 #> [18,]     0     0     0     2     0     0     0     0     0     0     0 #> [19,]     0     0     0     0     0     0     2     0     0     0     0 #> [20,]     0     0     0     0     0     2     0     0     0     0     0 #> [21,]     0     0     0     0     0     0     0     0     2     0     0 #> [22,]     0     0     0     0     0     0     0     2     0     0     0 #> [23,]     0     0     0     0     0     0     0     0     0     0     2 #> [24,]     0     0     0     0     0     0     0     0     0     2     0 bibcoupling(g) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0     0     0     2 #>  [6,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [11,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [12,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #> [13,]    0    0    0    0    2    0    0    0    0     0     0     0     0 #> [14,]    0    0    0    0    0    2    0    0    0     0     0     0     0 #> [15,]    0    0    0    0    0    0    2    0    0     0     0     0     0 #> [16,]    0    0    0    0    0    0    0    2    0     0     0     0     0 #> [17,]    0    0    0    0    0    0    0    0    2     0     0     0     0 #> [18,]    0    0    0    0    0    0    0    0    0     2     0     0     0 #> [19,]    0    0    0    0    0    0    0    0    0     0     2     0     0 #> [20,]    0    0    0    0    0    0    0    0    0     0     0     2     0 #> [21,]    2    0    0    0    0    0    0    0    0     0     0     0     0 #> [22,]    0    2    0    0    0    0    0    0    0     0     0     0     0 #> [23,]    0    0    2    0    0    0    0    0    0     0     0     0     0 #> [24,]    0    0    0    2    0    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] #>  [1,]     0     0     0     0     0     0     0     2     0     0     0 #>  [2,]     0     0     0     0     0     0     0     0     2     0     0 #>  [3,]     0     0     0     0     0     0     0     0     0     2     0 #>  [4,]     0     0     0     0     0     0     0     0     0     0     2 #>  [5,]     0     0     0     0     0     0     0     0     0     0     0 #>  [6,]     2     0     0     0     0     0     0     0     0     0     0 #>  [7,]     0     2     0     0     0     0     0     0     0     0     0 #>  [8,]     0     0     2     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     2     0     0     0     0     0     0     0 #> [10,]     0     0     0     0     2     0     0     0     0     0     0 #> [11,]     0     0     0     0     0     2     0     0     0     0     0 #> [12,]     0     0     0     0     0     0     2     0     0     0     0 #> [13,]     0     0     0     0     0     0     0     0     0     0     0 #> [14,]     0     0     0     0     0     0     0     0     0     0     0 #> [15,]     0     0     0     0     0     0     0     0     0     0     0 #> [16,]     0     0     0     0     0     0     0     0     0     0     0 #> [17,]     0     0     0     0     0     0     0     0     0     0     0 #> [18,]     0     0     0     0     0     0     0     0     0     0     0 #> [19,]     0     0     0     0     0     0     0     0     0     0     0 #> [20,]     0     0     0     0     0     0     0     0     0     0     0 #> [21,]     0     0     0     0     0     0     0     0     0     0     0 #> [22,]     0     0     0     0     0     0     0     0     0     0     0 #> [23,]     0     0     0     0     0     0     0     0     0     0     0 #> [24,]     0     0     0     0     0     0     0     0     0     0     0"},{"path":"/reference/cohesive_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cohesive Blocks — cohesive_blocks","title":"Calculate Cohesive Blocks — cohesive_blocks","text":"Calculates cohesive blocks objects class igraph.","code":""},{"path":"/reference/cohesive_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cohesive Blocks — cohesive_blocks","text":"","code":"cohesive_blocks(graph, labels = TRUE)  # S3 method for cohesiveBlocks length(x)  blocks(blocks)  graphs_from_cohesive_blocks(blocks, graph)  # S3 method for cohesiveBlocks cohesion(x, ...)  hierarchy(blocks)  parent(blocks)  # S3 method for cohesiveBlocks print(x, ...)  # S3 method for cohesiveBlocks summary(object, ...)  # S3 method for cohesiveBlocks plot(   x,   y,   colbar = rainbow(max(cohesion(x)) + 1),   col = colbar[max_cohesion(x) + 1],   mark.groups = blocks(x)[-1],   ... )  plot_hierarchy(   blocks,   layout = layout_as_tree(hierarchy(blocks), root = 1),   ... )  export_pajek(blocks, graph, file, project.file = TRUE)  max_cohesion(blocks)"},{"path":"/reference/cohesive_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cohesive Blocks — cohesive_blocks","text":"graph cohesive_blocks() graph object class igraph. must undirected simple. (See is_simple().) graphs_from_cohesive_blocks() export_pajek() graph must supplied whose cohesive block structure given blocks() argument. labels Logical scalar, whether add vertex labels result object. labels can used reporting plotting cohesive blocks. blocks, x, object cohesiveBlocks object, created cohesive_blocks() function. ... Additional arguments. plot_hierarchy() plot() pass plot.igraph().  print() summary() ignore . y graph whose cohesive blocks supplied x argument. colbar Color bar vertex colors. length least \\(m+1\\), \\(m\\) maximum cohesion graph. Alternatively, vertex colors can also directly specified via col argument. col vector vertex colors, usual formats. (Symbolic color names (e.g. ‘red’, ‘blue’, etc.) , RGB colors (e.g. ‘#FF9900FF’), integer numbers referring current palette. default given colbar used vertices maximal cohesion color. mark.groups list vertex sets mark plot circling . default cohesive blocks marked, except one corresponding vertices. layout layout plot, simply passed plot.igraph(), see possible formats . default Reingold-Tilford layout generator used. file Defines file (connection) Pajek file written . project.file argument TRUE, can filename (extension), file object, general king connection object. file/connection opened already. project.file argument FALSE, several files created file must character scalar containing base name files, without extension. (can contain path files.) See also details . project.file Logical scalar, whether create single Pajek project file containing data, create separated files item. See details .","code":""},{"path":"/reference/cohesive_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cohesive Blocks — cohesive_blocks","text":"cohesive_blocks() returns cohesiveBlocks object. blocks() returns list numeric vectors, containing vertex ids. graphs_from_cohesive_blocks() returns list igraph graphs, corresponding cohesive blocks. cohesion() returns numeric vector, cohesion block. hierarchy() returns igraph graph, representation cohesive block hierarchy. parent() returns numeric vector giving parent block cohesive block, block hierarchy. block root hierarchy parent 0 returned . plot_hierarchy(), plot() export_pajek() return NULL, invisibly. max_cohesion() returns numeric vector one entry vertex, giving cohesion cohesive block. print() summary() return cohesiveBlocks object , invisibly. length returns numeric scalar, number blocks.","code":""},{"path":"/reference/cohesive_blocks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Cohesive Blocks — cohesive_blocks","text":"Cohesive blocking method determining hierarchical subsets graph vertices based structural cohesion (vertex connectivity). given graph \\(G\\), subset vertices \\(S\\subset V(G)\\) said maximally \\(k\\)-cohesive superset \\(S\\) vertex connectivity greater equal \\(k\\). Cohesive blocking process , given \\(k\\)-cohesive set vertices, maximally \\(l\\)-cohesive subsets recursively identified \\(l>k\\). Thus hierarchy vertex subsets found, entire graph \\(G\\) root. function cohesive_blocks() implements cohesive blocking.  returns cohesiveBlocks object. cohesiveBlocks handled opaque class, .e. internal structure accessed directly, functions listed . function length can used cohesiveBlocks objects gives number blocks. function blocks() returns actual blocks stored cohesiveBlocks object. returned list numeric vectors, containing vertex ids. function graphs_from_cohesive_blocks() similar, returns blocks (induced) subgraphs input graph. various (graph, vertex edge) attributes kept subgraph. function cohesion() returns numeric vector, cohesion different blocks. order blocks blocks() graphs_from_cohesive_blocks() functions. block hierarchy can queried using hierarchy() function. returns igraph graph, vertex ids ordered according order blocks blocks() graphs_from_cohesive_blocks(), cohesion(), etc. functions. parent() gives parent vertex block, block hierarchy, root vertex gives 0. plot_hierarchy() plots hierarchy tree cohesive blocks active graphics device, calling igraph.plot. export_pajek() function can used export graph cohesive blocks Pajek format. can either export single Pajek project file information, set files, depending project.file argument. project.file TRUE, following information written file (connection) given file argument: (1) input graph, together attributes, see write_graph() details; (2) hierarchy graph; (3) one binary partition cohesive block. project.file FALSE, file argument must character scalar used base name generated files. file ‘basename’, following files created: (1) ‘basename.net’ original graph; (2) ‘basename_hierarchy.net’ hierarchy graph; (3) ‘basename_block_x.net’ cohesive block, ‘x’ number block, starting one. max_cohesion() returns maximal cohesion vertex, .e. cohesion cohesive block vertex. generic function summary() works cohesiveBlocks objects prints one line summary terminal. generic function print() also defined cohesiveBlocks objects invoked automatically name cohesiveBlocks object typed . produces output like : left part shows block structure, case five blocks. first block always corresponds whole graph, even cohesion zero. cohesion block number vertices block shown. last part printed display wide enough shows vertices blocks, ordered vertex ids. ‘o’ means vertex included, dot means , vertices shown groups ten. generic function plot() plots graph, showing one cohesive blocks .","code":"Cohesive block structure: B-1 c 1, n 23 '- B-2 c 2, n 14 oooooooo.. .o......oo ooo '- B-4 c 5, n  7 ooooooo... .......... ... '- B-3 c 2, n 10 ......o.oo o.oooooo.. ... '- B-5 c 3, n  4 ......o.oo o......... ..."},{"path":"/reference/cohesive_blocks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Cohesive Blocks — cohesive_blocks","text":"J. Moody D. R. White. Structural cohesion embeddedness: hierarchical concept social groups. American Sociological Review, 68(1):103--127, Feb 2003.","code":""},{"path":[]},{"path":"/reference/cohesive_blocks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Cohesive Blocks — cohesive_blocks","text":"Gabor Csardi csardi.gabor@gmail.com current implementation, Peter McMahan (https://socialsciences.uchicago.edu/news/alumni-profile-peter-mcmahan-phd17-sociology) wrote first version R.","code":""},{"path":"/reference/cohesive_blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cohesive Blocks — cohesive_blocks","text":"","code":"## The graph from the Moody-White paper mw <- graph_from_literal(   1 - 2:3:4:5:6, 2 - 3:4:5:7, 3 - 4:6:7, 4 - 5:6:7,   5 - 6:7:21, 6 - 7, 7 - 8:11:14:19, 8 - 9:11:14, 9 - 10,   10 - 12:13, 11 - 12:14, 12 - 16, 13 - 16, 14 - 15, 15 - 16,   17 - 18:19:20, 18 - 20:21, 19 - 20:22:23, 20 - 21,   21 - 22:23, 22 - 23 )  mwBlocks <- cohesive_blocks(mw)  # Inspect block membership and cohesion mwBlocks #> Cohesive block structure: #> B-1         c 1, n 23 #> '- B-2      c 2, n 14   oooooooo.. .o......oo ooo  #>    '- B-4   c 5, n  7   ooooooo... .......... ...  #> '- B-3      c 2, n 10   ......o.oo o.oooooo.. ...  #>    '- B-5   c 3, n  4   ......o.oo o......... ...  blocks(mwBlocks) #> [[1]] #> + 23/23 vertices, named, from 06d8d70: #>  [1] 1  2  3  4  5  6  7  21 8  11 14 19 9  10 12 13 16 15 17 18 20 22 23 #>  #> [[2]] #> + 14/23 vertices, named, from 06d8d70: #>  [1] 1  2  3  4  5  6  7  21 19 17 18 20 22 23 #>  #> [[3]] #> + 10/23 vertices, named, from 06d8d70: #>  [1] 7  8  11 14 9  10 12 13 16 15 #>  #> [[4]] #> + 7/23 vertices, named, from 06d8d70: #> [1] 1 2 3 4 5 6 7 #>  #> [[5]] #> + 4/23 vertices, named, from 06d8d70: #> [1] 7  8  11 14 #>  cohesion(mwBlocks) #> [1] 1 2 2 5 3  # Save results in a Pajek file file <- tempfile(fileext = \".paj\") export_pajek(mwBlocks, mw, file = file) if (!interactive()) {   unlink(file) }  # Plot the results plot(mwBlocks, mw)   ## The science camp network camp <- graph_from_literal(   Harry:Steve:Don:Bert - Harry:Steve:Don:Bert,   Pam:Brazey:Carol:Pat - Pam:Brazey:Carol:Pat,   Holly - Carol:Pat:Pam:Jennie:Bill,   Bill - Pauline:Michael:Lee:Holly,   Pauline - Bill:Jennie:Ann,   Jennie - Holly:Michael:Lee:Ann:Pauline,   Michael - Bill:Jennie:Ann:Lee:John,   Ann - Michael:Jennie:Pauline,   Lee - Michael:Bill:Jennie,   Gery - Pat:Steve:Russ:John,   Russ - Steve:Bert:Gery:John,   John - Gery:Russ:Michael ) campBlocks <- cohesive_blocks(camp) campBlocks #> Cohesive block structure: #> B-1      c 2, n 18 #> '- B-2   c 3, n  4   oooo...... ........  #> '- B-3   c 3, n  5   ....ooooo. ........  #> '- B-4   c 3, n  6   .........o ooooo...   plot(campBlocks, camp,   vertex.label = V(camp)$name, margin = -0.2,   vertex.shape = \"rectangle\", vertex.size = 24, vertex.size2 = 8,   mark.border = 1, colbar = c(NA, NA, \"cyan\", \"orange\") )"},{"path":"/reference/communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to deal with the result of network community detection — membership","title":"Functions to deal with the result of network community detection — membership","text":"igraph community detection functions return results object communities class. manual page describes operations class.","code":""},{"path":"/reference/communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to deal with the result of network community detection — membership","text":"","code":"membership(communities)  # S3 method for communities print(x, ...)  # S3 method for communities modularity(x, ...)  # S3 method for communities length(x)  sizes(communities)  algorithm(communities)  merges(communities)  crossing(communities, graph)  code_len(communities)  is_hierarchical(communities)  # S3 method for communities as.dendrogram(object, hang = -1, use.modularity = FALSE, ...)  # S3 method for communities as.hclust(x, hang = -1, use.modularity = FALSE, ...)  as_phylo(x, ...)  # S3 method for communities as_phylo(x, use.modularity = FALSE, ...)  cut_at(communities, no, steps)  show_trace(communities)  # S3 method for communities plot(   x,   y,   col = membership(x),   mark.groups = communities(x),   edge.color = c(\"black\", \"red\")[crossing(x, y) + 1],   ... )"},{"path":"/reference/communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to deal with the result of network community detection — membership","text":"communities, x, object communities object, result igraph community detection function. ... Additional arguments. plot.communities passes plot.igraph(). functions silently ignore . graph igraph graph object, corresponding communities. hang Numeric scalar indicating height leaves computed heights parents; see plot.hclust(). use.modularity Logical scalar, whether use modularity values define height branches. Integer scalar, desired number communities. low two high, error message given. Exactly one steps must supplied. steps number merge operations perform produce communities. Exactly one steps must supplied. y igraph graph object, corresponding communities x. col vector colors, format accepted regular R plotting methods. vector gives colors vertices explicitly. mark.groups list numeric vectors. communities can highlighted using colored polygons. groups polygons drawn given . default use groups given communities. Supply NULL want highlight groups. edge.color colors edges. default edges within communities colored green edges red. membership Numeric vector, one value vertex, membership vector community structure. Might also NULL community structure given another way, e.g. merge matrix. algorithm NULL (meaning unknown algorithm), character scalar, name algorithm produced community structure. merges NULL, merge matrix hierarchical community structure. See merges() information format. modularity Numeric scalar vector, modularity value community structure. can also NULL, modularity (best) split available.","code":""},{"path":"/reference/communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to deal with the result of network community detection — membership","text":"print() returns communities object , invisibly. length returns integer scalar. sizes() returns numeric vector. membership() returns numeric vector, one number vertex graph input community detection. modularity() returns numeric scalar. algorithm() returns character scalar. crossing() returns logical vector. is_hierarchical() returns logical scalar. merges() returns two-column numeric matrix. cut_at() returns numeric vector, membership vector vertices. .dendrogram() returns dendrogram object. show_trace() returns character vector. code_len() returns numeric scalar communities found InfoMAP method NULL methods. plot() communities objects returns NULL, invisibly. #' @author Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/communities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to deal with the result of network community detection — membership","text":"Community structure detection algorithms try find dense subgraphs directed undirected graphs, optimizing criteria, usually using heuristics. igraph implements number community detection methods (see ), return object class communities. community structure detection algorithms different, communities objects always structure. Nevertheless, common operations, documented . print() generic function defined communities, prints short summary. length generic function call called communities returns number communities. sizes() function returns community sizes, order ids. membership() gives division vertices, communities. returns numeric vector, one value vertex, id community. Community ids start one. Note algorithms calculate complete (incomplete) hierarchical structure communities, just single partitioning. algorithms typically membership highest modularity value returned, see also manual pages individual algorithms. communities() also name function, returns list communities, identified vertices. vertices symbolic names add.vertex.names igraph option set, graph named. Otherwise numeric vertex ids used. modularity() gives modularity score partitioning. (See modularity.igraph() details. algorithms result single partitioning, highest modularity value returned. algorithm() gives name algorithm used calculate community structure. crossing() returns logical vector, one value edge, ordered according edge ids. value TRUE iff edge connects two different communities, according (best) membership vector, returned membership(). is_hierarchical() checks whether hierarchical algorithm used find community structure. functions make sense hierarchical methods (e.g. merges(), cut_at() .dendrogram()). merges() returns merge matrix hierarchical methods. error message given, non-hierarchical method used find community structure. can check calling is_hierarchical() communities object. cut_at() cuts merge tree hierarchical community finding method, desired place returns membership vector. desired place can expressed desired number communities number merge steps make. function gives error message, called non-hierarchical method. .dendrogram() converts hierarchical community structure dendrogram object. works hierarchical methods, gives error message others. See stats::dendrogram() details. .hclust similar .dendrogram(), converts hierarchical community structure hclust object. as_phylo() converts hierarchical community structure phylo object, need ape package . show_trace() works (currently) communities found leading eigenvector method (cluster_leading_eigen()), returns character vector gives steps performed algorithm finding communities. code_len() defined InfoMAP method (cluster_infomap() returns code length partition. possibly call plot() function communities objects. plot graph (uses plot.igraph() internally), communities shown. default colores vertices according communities, also marks vertex groups corresponding communities. passes additional arguments plot.igraph(), please see also igraph.plotting change plot.","code":""},{"path":[]},{"path":"/reference/communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to deal with the result of network community detection — membership","text":"","code":"karate <- make_graph(\"Zachary\") wc <- cluster_walktrap(karate) modularity(wc) #> [1] 0.3532216 membership(wc) #>  [1] 1 1 2 1 5 5 5 1 2 2 5 1 1 2 3 3 5 1 3 1 3 1 3 4 4 4 3 4 2 3 2 2 3 3 plot(wc, karate)"},{"path":"/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares community structures using various metrics — compare","title":"Compares community structures using various metrics — compare","text":"function assesses distance two community structures.","code":""},{"path":"/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares community structures using various metrics — compare","text":"","code":"compare(   comm1,   comm2,   method = c(\"vi\", \"nmi\", \"split.join\", \"rand\", \"adjusted.rand\") )"},{"path":"/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares community structures using various metrics — compare","text":"comm1 communities() object containing community structure; numeric vector, membership vector first community structure. membership vector contain community id vertex, numbering communities starts one. comm2 communities() object containing community structure; numeric vector, membership vector second community structure, format previous argument. method Character scalar, comparison method use. Possible values: ‘vi’ variation information (VI) metric Meila (2003), ‘nmi’ normalized mutual information measure proposed Danon et al. (2005), ‘split.join’ split-join distance can Dongen (2000), ‘rand’ Rand index Rand (1971), ‘adjusted.rand’ adjusted Rand index Hubert Arabie (1985).","code":""},{"path":"/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compares community structures using various metrics — compare","text":"real number.","code":""},{"path":"/reference/compare.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compares community structures using various metrics — compare","text":"Meila M: Comparing clusterings variation information. : Scholkopf B, Warmuth MK (eds.). Learning Theory Kernel Machines: 16th Annual Conference Computational Learning Theory 7th Kernel Workshop, COLT/Kernel 2003, Washington, DC, USA. Lecture Notes Computer Science, vol. 2777, Springer, 2003. ISBN: 978-3-540-40720-1. Danon L, Diaz-Guilera , Duch J, Arenas : Comparing community structure identification. J Stat Mech P09008, 2005. van Dongen S: Performance criteria graph clustering Markov cluster experiments. Technical Report INS-R0012, National Research Institute Mathematics Computer Science Netherlands, Amsterdam, May 2000. Rand WM: Objective criteria evaluation clustering methods. J Stat Assoc 66(336):846-850, 1971. Hubert L Arabie P: Comparing partitions. Journal Classification 2:193-218, 1985.","code":""},{"path":[]},{"path":"/reference/compare.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compares community structures using various metrics — compare","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares community structures using various metrics — compare","text":"","code":"g <- make_graph(\"Zachary\") sg <- cluster_spinglass(g) le <- cluster_leading_eigen(g) compare(sg, le, method = \"rand\") #> [1] 0.9500891 compare(membership(sg), membership(le)) #> [1] 0.2765712"},{"path":"/reference/complementer.html","id":null,"dir":"Reference","previous_headings":"","what":"Complementer of a graph — complementer","title":"Complementer of a graph — complementer","text":"complementer graph contains edges present input graph.","code":""},{"path":"/reference/complementer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complementer of a graph — complementer","text":"","code":"complementer(graph, loops = FALSE)"},{"path":"/reference/complementer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complementer of a graph — complementer","text":"graph input graph, can directed undirected. loops Logical constant, whether generate loop edges.","code":""},{"path":"/reference/complementer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complementer of a graph — complementer","text":"new graph object.","code":""},{"path":"/reference/complementer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complementer of a graph — complementer","text":"complementer() creates complementer graph. edges present original graph included new graph. complementer() keeps graph vertex attriubutes, edge attributes lost.","code":""},{"path":"/reference/complementer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Complementer of a graph — complementer","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/complementer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complementer of a graph — complementer","text":"","code":"## Complementer of a ring g <- make_ring(10) complementer(g) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 8 7 6 5 4 3 2 9 8 7 6 5 4 3 9 8 7 6 5 4 9 8 7 6 5 9 8 7 6 9 8 7 9 8 9 #>  #> [[4]] #>  [1] 0 0 0 0 0 0 0 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 4 4 4 4 5 5 5 6 6 7 #>  #> [[5]] #>  [1]  6  5 13  4 12 19  3 11 18 24  2 10 17 23 28  1  9 16 22 27 31  0  8 15 21 #> [26] 26 30 33  7 14 20 25 29 32 34 #>  #> [[6]] #>  [1]  6  5  4  3  2  1  0 13 12 11 10  9  8  7 19 18 17 16 15 14 24 23 22 21 20 #> [26] 28 27 26 25 31 30 29 33 32 34 #>  #> [[7]] #>  [1]  0  0  0  1  3  6 10 15 21 28 35 #>  #> [[8]] #>  [1]  0  7 14 20 25 29 32 34 35 35 35 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbb8a4800> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## A graph and its complementer give together the full graph g <- make_ring(10) gc <- complementer(g) gu <- union(g, gc) gu #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 9 9 8 9 8 7 9 8 7 6 9 8 7 6 5 9 8 7 6 5 4 9 8 7 6 5 4 3 9 8 7 6 5 4 3 2 9 8 #> [39] 7 6 5 4 3 2 1 #>  #> [[4]] #>  [1] 8 7 7 6 6 6 5 5 5 5 4 4 4 4 4 3 3 3 3 3 3 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 0 0 #> [39] 0 0 0 0 0 0 0 #>  #> [[5]] #>  [1] 44 43 35 42 34 27 41 33 26 20 40 32 25 19 14 39 31 24 18 13  9 38 30 23 17 #> [26] 12  8  5 37 29 22 16 11  7  4  2 36 28 21 15 10  6  3  1  0 #>  #> [[6]] #>  [1] 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 #> [26] 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0 #>  #> [[7]] #>  [1]  0  0  1  3  6 10 15 21 28 36 45 #>  #> [[8]] #>  [1]  0  9 17 24 30 35 39 42 44 45 45 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name_1 #> [1] \"Ring graph\" #>  #> [[9]][[2]]$name_2 #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual_1 #> [1] FALSE #>  #> [[9]][[2]]$mutual_2 #> [1] FALSE #>  #> [[9]][[2]]$circular_1 #> [1] TRUE #>  #> [[9]][[2]]$circular_2 #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbba01cc0> #>  #> attr(,\"class\") #> [1] \"igraph\" graph.isomorphic(gu, make_full_graph(vcount(g))) #> [1] TRUE"},{"path":"/reference/component_wise.html","id":null,"dir":"Reference","previous_headings":"","what":"Component-wise layout — component_wise","title":"Component-wise layout — component_wise","text":"layout modifier function, can used calculate layout separately component graph.","code":""},{"path":"/reference/component_wise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Component-wise layout — component_wise","text":"","code":"component_wise(merge_method = \"dla\")"},{"path":"/reference/component_wise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Component-wise layout — component_wise","text":"merge_method Merging algorithm, method argument merge_coords().","code":""},{"path":[]},{"path":"/reference/component_wise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Component-wise layout — component_wise","text":"","code":"g <- make_ring(10) + make_ring(10) g %>%   add_layout_(in_circle(), component_wise()) %>%   plot() #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/components.html","id":null,"dir":"Reference","previous_headings":"","what":"Connected components of a graph — component_distribution","title":"Connected components of a graph — component_distribution","text":"Calculate maximal (weakly strongly) connected components graph","code":""},{"path":"/reference/components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connected components of a graph — component_distribution","text":"","code":"component_distribution(graph, cumulative = FALSE, mul.size = FALSE, ...)  components(graph, mode = c(\"weak\", \"strong\"))  is_connected(graph, mode = c(\"weak\", \"strong\"))  count_components(graph, mode = c(\"weak\", \"strong\"))"},{"path":"/reference/components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connected components of a graph — component_distribution","text":"graph graph analyze. cumulative Logical, TRUE cumulative distirubution (relative frequency) calculated. mul.size Logical. TRUE relative frequencies multiplied cluster sizes. ... Additional attributes pass cluster, right now mode makes sense. mode Character string, either “weak” “strong”.  directed graphs “weak” implies weakly, “strong” strongly connected components search. ignored undirected graphs.","code":""},{"path":"/reference/components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connected components of a graph — component_distribution","text":"is_connected() logical constant. components() named list three components: membership numeric vector giving cluster id vertex belongs. csize numeric vector giving sizes clusters. numeric constant, number clusters. count_components() integer constant returned. component_distribution() numeric vector relative frequencies. length vector size largest component plus one. Note (currently unknown reasons) first element vector number clusters size zero, always zero.","code":""},{"path":"/reference/components.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Connected components of a graph — component_distribution","text":"is_connected() decides whether graph weakly strongly connected. null graph considered disconnected. components() finds maximal (weakly strongly) connected components graph. count_components() almost components() returns number clusters found instead returning actual clusters. component_distribution() creates histogram maximal connected component sizes. weakly connected components found simple breadth-first search. strongly connected components implemented two consecutive depth-first searches.","code":""},{"path":[]},{"path":"/reference/components.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Connected components of a graph — component_distribution","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connected components of a graph — component_distribution","text":"","code":"g <- sample_gnp(20, 1 / 20) clu <- components(g) groups(clu) #> $`1` #> [1]  1  6  7  8 16 17 #>  #> $`2` #> [1] 2 #>  #> $`3` #> [1] 3 #>  #> $`4` #> [1] 4 #>  #> $`5` #> [1] 5 #>  #> $`6` #> [1]  9 12 #>  #> $`7` #> [1] 10 #>  #> $`8` #> [1] 11 #>  #> $`9` #> [1] 13 19 #>  #> $`10` #> [1] 14 #>  #> $`11` #> [1] 15 #>  #> $`12` #> [1] 18 #>  #> $`13` #> [1] 20 #>"},{"path":"/reference/compose.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose two graphs as binary relations — compose","title":"Compose two graphs as binary relations — compose","text":"Relational composition two graph.","code":""},{"path":"/reference/compose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose two graphs as binary relations — compose","text":"","code":"compose(g1, g2, byname = \"auto\")"},{"path":"/reference/compose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose two graphs as binary relations — compose","text":"g1 first input graph. g2 second input graph. byname logical scalar, character scalar auto. Whether perform operation based symbolic vertex names. auto, means TRUE graphs named FALSE otherwise. warning generated auto one graph, graphs named.","code":""},{"path":"/reference/compose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose two graphs as binary relations — compose","text":"new graph object.","code":""},{"path":"/reference/compose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compose two graphs as binary relations — compose","text":"compose() creates relational composition two graphs. new graph contain (,b) edge vertex c, edge (,c) included first graph (c,b) included second graph. corresponding operator %c%. function gives error one input graphs directed undirected. byname argument TRUE (auto graphs named), operation performed based symbolic vertex names. Otherwise numeric vertex ids used. compose() keeps attributes graphs. graph, vertex edge attributes copied result. attribute present multiple graphs result name clash, attribute renamed adding suffixes: _1, _2, etc. name vertex attribute treated specially operation performed based symbolic vertex names. case name must present graphs, renamed result graph. Note edge result graph corresponds two edges input, one first graph, one second. mapping injective several edges result might correspond edge first (/second) graph. edge attributes result graph updated accordingly. Also note function may generate multigraphs, one way find edges (,b) g1 (b,c) g2 edge (,c) result. See simplify() want get rid multiple edges. function may create loop edges, edges (,b) (b,) present g1 g2, respectively, (,) included result. See simplify() want get rid self-loops.","code":""},{"path":"/reference/compose.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compose two graphs as binary relations — compose","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/compose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose two graphs as binary relations — compose","text":"","code":"g1 <- make_ring(10) g2 <- make_star(10, mode = \"undirected\") gc <- compose(g1, g2) print_all(gc) #> IGRAPH c63a7ae U--- 10 36 --  #> + attr: name_1 (g/c), name_2 (g/c), mutual (g/l), circular (g/l), mode #> | (g/c), center (g/n) #> + edges: #>  1 --  1  1  1  1  2  3  3  4  4  5  5  6  6  7  7  8  8  9  9 10 #>  2 --  1  2  2  3  4  5  6  7  8  9 10 10 #>  3 --  1  1  2 10 #>  4 --  1  1  2 10 #>  5 --  1  1  2 10 #>  6 --  1  1  2 10 #>  7 --  1  1  2 10 #>  8 --  1  1  2 10 #>  9 --  1  1  2 10 #> 10 --  1  2  2  3  4  5  6  7  8  9 10 10 print_all(simplify(gc)) #> IGRAPH 6414dfa U--- 10 24 --  #> + attr: name_1 (g/c), name_2 (g/c), mutual (g/l), circular (g/l), mode #> | (g/c), center (g/n) #> + edges: #>  1 --  2  3  4  5  6  7  8  9 10    2 --  1  3  4  5  6  7  8  9 10 #>  3 --  1  2 10                      4 --  1  2 10                   #>  5 --  1  2 10                      6 --  1  2 10                   #>  7 --  1  2 10                      8 --  1  2 10                   #>  9 --  1  2 10                     10 --  1  2  3  4  5  6  7  8  9"},{"path":"/reference/consensus_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a consensus tree from several hierarchical random graph models — consensus_tree","title":"Create a consensus tree from several hierarchical random graph models — consensus_tree","text":"consensus_tree() creates consensus tree several fitted hierarchical random graph models, using phylogeny methods. hrg() argument given start set TRUE, starts sampling given HRG. Otherwise optimizes HRG log-likelihood first, samples starting optimum.","code":""},{"path":"/reference/consensus_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a consensus tree from several hierarchical random graph models — consensus_tree","text":"","code":"consensus_tree(graph, hrg = NULL, start = FALSE, num.samples = 10000)"},{"path":"/reference/consensus_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a consensus tree from several hierarchical random graph models — consensus_tree","text":"graph graph models fitted . hrg hierarchical random graph model, form igraphHRG object. consensus_tree() allows NULL well, HRG fitted graph first, random starting point. start Logical, whether start fitting/sampling supplied igraphHRG object, random starting point. num.samples Number samples use consensus generation missing edge prediction.","code":""},{"path":"/reference/consensus_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a consensus tree from several hierarchical random graph models — consensus_tree","text":"consensus_tree() returns list two objects. first igraphHRGConsensus object, second igraphHRG object.  igraphHRGConsensus object following members: parents vertex, id parent vertex stored, zero, vertex root vertex tree. first n vertex ids (0) refer original vertices graph, ids refer vertex groups. weights Numeric vector, counts number times given tree split occurred generated network samples, internal vertices. order parents vector.","code":""},{"path":[]},{"path":"/reference/console.html","id":null,"dir":"Reference","previous_headings":"","what":"The igraph console — console","title":"The igraph console — console","text":"igraph console GUI windows shows currently running igraph function .","code":""},{"path":"/reference/console.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The igraph console — console","text":"","code":"console()"},{"path":"/reference/console.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The igraph console — console","text":"NULL, invisibly.","code":""},{"path":"/reference/console.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The igraph console — console","text":"console can started calling console() function. stays open, user closes . Another way start set verbose igraph option “tkconsole” via igraph_options(). console (re)opens time igraph function supporting starts; close , set verbose option another value. console written Tcl/Tk required tcltk package.","code":""},{"path":[]},{"path":"/reference/console.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The igraph console — console","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Burt's constraint — constraint","title":"Burt's constraint — constraint","text":"Given graph, constraint() calculates Burt's constraint vertex.","code":""},{"path":"/reference/constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Burt's constraint — constraint","text":"","code":"constraint(graph, nodes = V(graph), weights = NULL)"},{"path":"/reference/constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Burt's constraint — constraint","text":"graph graph object, input graph. nodes vertices constraint calculated. Defaults vertices. weights weights edges. NULL weight edge attribute used. edge attribute edges weight.","code":""},{"path":"/reference/constraint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Burt's constraint — constraint","text":"numeric vector constraint scores","code":""},{"path":"/reference/constraint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Burt's constraint — constraint","text":"Burt's constraint higher ego less, mutually stronger related (.e. redundant) contacts. Burt's measure constraint, \\(C_i\\), vertex \\(\\)'s ego network \\(V_i\\), defined directed valued graphs, $$C_i=\\sum_{j \\V_i \\setminus \\{\\}} (p_{ij}+\\sum_{q \\V_i     \\setminus \\{,j\\}} p_{iq} p_{qj})^2$$ graph order (ie. number vertices) \\(N\\), proportional tie strengths defined $$p_{ij} = \\frac{a_{ij}+a_{ji}}{\\sum_{k \\V_i \\setminus \\{\\}}(a_{ik}+a_{ki})},$$ \\(a_{ij}\\) elements \\(\\) latter graph adjacency matrix. isolated vertices, constraint undefined.","code":""},{"path":"/reference/constraint.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Burt's constraint — constraint","text":"Burt, R.S. (2004). Structural holes good ideas. American Journal Sociology 110, 349-399.","code":""},{"path":[]},{"path":"/reference/constraint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Burt's constraint — constraint","text":"Jeroen Bruggeman (https://sites.google.com/site/jebrug/jeroen-bruggeman-social-science) Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/constraint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Burt's constraint — constraint","text":"","code":"g <- sample_gnp(20, 5 / 20) constraint(g) #>  [1] 0.2198129 0.2951389 0.3333333 0.2600191 0.3337674 0.5000000 0.3333333 #>  [8] 0.5000000 0.5377614 0.2500000 0.4583333 0.4175347 0.3337674 0.2658179 #> [15] 0.3042889 0.5000000 1.0000000 0.4566061 0.4930083 0.4583333"},{"path":"/reference/contract.html","id":null,"dir":"Reference","previous_headings":"","what":"Contract several vertices into a single one — contract","title":"Contract several vertices into a single one — contract","text":"function creates new graph, merging several vertices one. vertices new graph correspond sets vertices input graph.","code":""},{"path":"/reference/contract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contract several vertices into a single one — contract","text":"","code":"contract(graph, mapping, vertex.attr.comb = igraph_opt(\"vertex.attr.comb\"))"},{"path":"/reference/contract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contract several vertices into a single one — contract","text":"graph input graph, can directed undirected. mapping numeric vector specifies mapping. elements correspond vertices, element id new graph given. vertex.attr.comb Specifies combine vertex attributes new graph. Please see attribute.combination() details.","code":""},{"path":"/reference/contract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contract several vertices into a single one — contract","text":"new graph object.","code":""},{"path":"/reference/contract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Contract several vertices into a single one — contract","text":"attributes graph kept. Graph edge attributes unchanged, vertex attributes combined, according vertex.attr.comb parameter.","code":""},{"path":[]},{"path":"/reference/contract.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Contract several vertices into a single one — contract","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/contract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contract several vertices into a single one — contract","text":"","code":"g <- make_ring(10) g$name <- \"Ring\" V(g)$name <- letters[1:vcount(g)] E(g)$weight <- runif(ecount(g))  g2 <- contract(g, rep(1:5, each = 2),   vertex.attr.comb = toString )  ## graph and edge attributes are kept, vertex attributes are ## combined using the 'toString' function. print(g2, g = TRUE, v = TRUE, e = TRUE) #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 0 1 1 2 2 3 3 4 4 4 #>  #> [[4]] #>  [1] 0 0 1 1 2 2 3 3 4 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 9 7 8 #>  #> [[6]] #>  [1] 0 1 9 2 3 4 5 6 7 8 #>  #> [[7]] #> [1]  0  1  3  5  7 10 #>  #> [[8]] #> [1]  0  3  5  7  9 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"a, b\" \"c, d\" \"e, f\" \"g, h\" \"i, j\" #>  #>  #> [[9]][[4]] #> [[9]][[4]]$weight #>  [1] 0.86795557 0.07158433 0.39243180 0.46365109 0.90225842 0.51534032 #>  [7] 0.72742747 0.13077260 0.42861111 0.83284648 #>  #>  #>  #> [[10]] #> <environment: 0x564cbf0a6468> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/convex_hull.html","id":null,"dir":"Reference","previous_headings":"","what":"Convex hull of a set of vertices — convex_hull","title":"Convex hull of a set of vertices — convex_hull","text":"Calculate convex hull set points, .e. covering polygon smallest area.","code":""},{"path":"/reference/convex_hull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convex hull of a set of vertices — convex_hull","text":"","code":"convex_hull(data)"},{"path":"/reference/convex_hull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convex hull of a set of vertices — convex_hull","text":"data data points, numeric matrix two columns.","code":""},{"path":"/reference/convex_hull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convex hull of a set of vertices — convex_hull","text":"named list components: resverts indices input vertices constritute convex hull. rescoords coordinates corners convex hull.","code":""},{"path":"/reference/convex_hull.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convex hull of a set of vertices — convex_hull","text":"Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction Algorithms, Second Edition. MIT Press McGraw-Hill, 2001. ISBN 0262032937. Pages 949-955 section 33.3: Finding convex hull.","code":""},{"path":[]},{"path":"/reference/convex_hull.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convex hull of a set of vertices — convex_hull","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/convex_hull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convex hull of a set of vertices — convex_hull","text":"","code":"M <- cbind(runif(100), runif(100)) convex_hull(M) #> $resverts #>  [1] 48 47 25 52 13 31 22 81 87 90 75 #>  #> $rescoords #>             [,1]       [,2] #>  [1,] 0.08480494 0.01659262 #>  [2,] 0.05346635 0.09977567 #>  [3,] 0.01687217 0.38908972 #>  [4,] 0.04061678 0.91853576 #>  [5,] 0.04357912 0.93930814 #>  [6,] 0.06030939 0.96819511 #>  [7,] 0.47452902 0.99233001 #>  [8,] 0.99629088 0.92147951 #>  [9,] 0.98579117 0.41043798 #> [10,] 0.93966259 0.04107204 #> [11,] 0.92792213 0.02049245 #>"},{"path":"/reference/coreness.html","id":null,"dir":"Reference","previous_headings":"","what":"K-core decomposition of graphs — coreness","title":"K-core decomposition of graphs — coreness","text":"k-core graph maximal subgraph vertex least degree k. coreness vertex k belongs k-core (k+1)-core.","code":""},{"path":"/reference/coreness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-core decomposition of graphs — coreness","text":"","code":"coreness(graph, mode = c(\"all\", \"out\", \"in\"))"},{"path":"/reference/coreness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-core decomposition of graphs — coreness","text":"graph input graph, can directed undirected mode type core directed graphs. Character constant, possible values: : -cores computed, : -cores computed, : corresponding undirected graph considered. argument ignored undirected graphs.","code":""},{"path":"/reference/coreness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"K-core decomposition of graphs — coreness","text":"Numeric vector integer numbers giving coreness vertex.","code":""},{"path":"/reference/coreness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K-core decomposition of graphs — coreness","text":"k-core graph maximal subgraph every vertex least degree k. cores graph form layers: (k+1)-core always subgraph k-core. function calculates coreness vertex.","code":""},{"path":"/reference/coreness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"K-core decomposition of graphs — coreness","text":"Vladimir Batagelj, Matjaz Zaversnik: O(m) Algorithm Cores Decomposition Networks, 2002 Seidman S. B. (1983) Network structure minimum degree, Social Networks, 5, 269--287.","code":""},{"path":[]},{"path":"/reference/coreness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"K-core decomposition of graphs — coreness","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/coreness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"K-core decomposition of graphs — coreness","text":"","code":"g <- make_ring(10) g <- add_edges(g, c(1, 2, 2, 3, 1, 3)) coreness(g) # small core triangle in a ring #>  [1] 3 3 3 2 2 2 2 2 2 2"},{"path":"/reference/count_automorphisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of automorphisms — count_automorphisms","title":"Number of automorphisms — count_automorphisms","text":"Calculate number automorphisms graph, .e. number isomorphisms .","code":""},{"path":"/reference/count_automorphisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of automorphisms — count_automorphisms","text":"","code":"count_automorphisms(graph, colors, sh = c(\"fm\", \"f\", \"fs\", \"fl\", \"flm\", \"fsm\"))"},{"path":"/reference/count_automorphisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of automorphisms — count_automorphisms","text":"graph input graph, treated undirected. colors colors individual vertices graph; vertices color allowed match automorphism. omitted, igraph uses color attribute vertices, , vertex attribute, simply assumes vertices color. Pass NULL explicitly graph color vertex attribute want use . sh splitting heuristics BLISS algorithm. Possible values : ‘f’: first non-singleton cell, ‘fl’: first largest non-singleton cell, ‘fs’: first smallest non-singleton cell, ‘fm’: first maximally non-trivially connected non-singleton cell, ‘flm’: first largest maximally non-trivially connected non-singleton cell, ‘fsm’: first smallest maximally non-trivially connected non-singleton cell.","code":""},{"path":"/reference/count_automorphisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of automorphisms — count_automorphisms","text":"named list following members: group_size size automorphism group input graph, string. number exact igraph compiled GMP library, approximate otherwise. nof_nodes number nodes search tree. nof_leaf_nodes number leaf nodes search tree. nof_bad_nodes Number bad nodes. nof_canupdates Number canrep updates. max_level Maximum level.","code":""},{"path":"/reference/count_automorphisms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of automorphisms — count_automorphisms","text":"automorphism graph permutation vertices brings graph . function calculates number automorphism graph using BLISS algorithm. See also BLISS homepage http://www.tcs.hut.fi/Software/bliss/index.html. need automorphisms , use automorphism_group() obtain compact representation automorphism group.","code":""},{"path":"/reference/count_automorphisms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Number of automorphisms — count_automorphisms","text":"Tommi Junttila Petteri Kaski: Engineering Efficient Canonical Labeling Tool Large Sparse Graphs, Proceedings Ninth Workshop Algorithm Engineering Experiments Fourth Workshop Analytic Algorithms Combinatorics. 2007.","code":""},{"path":[]},{"path":"/reference/count_automorphisms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of automorphisms — count_automorphisms","text":"Tommi Junttila (http://users.ics.aalto.fi/tjunttil/) BLISS Gabor Csardi csardi.gabor@gmail.com igraph glue code manual page.","code":""},{"path":"/reference/count_automorphisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of automorphisms — count_automorphisms","text":"","code":"## A ring has n*2 automorphisms, you can \"turn\" it by 0-9 vertices ## and each of these graphs can be \"flipped\" g <- make_ring(10) count_automorphisms(g) #> $nof_nodes #> [1] 6 #>  #> $nof_leaf_nodes #> [1] 4 #>  #> $nof_bad_nodes #> [1] 0 #>  #> $nof_canupdates #> [1] 1 #>  #> $max_level #> [1] 2 #>  #> $group_size #> [1] \"20\" #>   ## A full graph has n! automorphisms; however, we restrict the vertex ## matching by colors, leading to only 4 automorphisms g <- make_full_graph(4) count_automorphisms(g, colors = c(1, 2, 1, 2)) #> $nof_nodes #> [1] 5 #>  #> $nof_leaf_nodes #> [1] 3 #>  #> $nof_bad_nodes #> [1] 0 #>  #> $nof_canupdates #> [1] 1 #>  #> $max_level #> [1] 2 #>  #> $group_size #> [1] \"4\" #>"},{"path":"/reference/count_isomorphisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of isomorphic mappings between two graphs — count_isomorphisms","title":"Count the number of isomorphic mappings between two graphs — count_isomorphisms","text":"Count number isomorphic mappings two graphs","code":""},{"path":"/reference/count_isomorphisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of isomorphic mappings between two graphs — count_isomorphisms","text":"","code":"count_isomorphisms(graph1, graph2, method = \"vf2\", ...)"},{"path":"/reference/count_isomorphisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of isomorphic mappings between two graphs — count_isomorphisms","text":"graph1 first graph. graph2 second graph. method Currently ‘vf2’ supported, see isomorphic() details extra arguments. ... Passed individual methods.","code":""},{"path":"/reference/count_isomorphisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of isomorphic mappings between two graphs — count_isomorphisms","text":"Number isomorphic mappings two graphs.","code":""},{"path":"/reference/count_isomorphisms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Count the number of isomorphic mappings between two graphs — count_isomorphisms","text":"LP Cordella,  P Foggia, C Sansone, M Vento: improved algorithm matching large graphs, Proc. 3rd IAPR TC-15 Workshop Graphbased Representations Pattern Recognition, 149--159, 2001.","code":""},{"path":[]},{"path":"/reference/count_isomorphisms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of isomorphic mappings between two graphs — count_isomorphisms","text":"","code":"# colored graph isomorphism g1 <- make_ring(10) g2 <- make_ring(10) isomorphic(g1, g2) #> [1] TRUE  V(g1)$color <- rep(1:2, length = vcount(g1)) V(g2)$color <- rep(2:1, length = vcount(g2)) # consider colors by default count_isomorphisms(g1, g2) #> [1] 10 # ignore colors count_isomorphisms(g1, g2,   vertex.color1 = NULL,   vertex.color2 = NULL ) #> [1] 20"},{"path":"/reference/count_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph motifs — count_motifs","title":"Graph motifs — count_motifs","text":"Graph motifs small connected subgraphs well-defined structure.  functions search graph various motifs.","code":""},{"path":"/reference/count_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph motifs — count_motifs","text":"","code":"count_motifs(graph, size = 3, cut.prob = rep(0, size))"},{"path":"/reference/count_motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph motifs — count_motifs","text":"graph Graph object, input graph. size size motif. cut.prob Numeric vector giving probabilities search graph cut certain level. length size motif (size argument). default cuts made.","code":""},{"path":"/reference/count_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph motifs — count_motifs","text":"count_motifs() returns  numeric scalar.","code":""},{"path":"/reference/count_motifs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph motifs — count_motifs","text":"count_motifs() calculates total number motifs given size graph.","code":""},{"path":[]},{"path":"/reference/count_motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph motifs — count_motifs","text":"","code":"g <- barabasi.game(100) motifs(g, 3) #>  [1]  NA  NA 404  NA  75   0   0   0   0   0   0   0   0   0   0   0 count_motifs(g, 3) #> [1] 479 sample_motifs(g, 3) #> [1] 190"},{"path":"/reference/count_subgraph_isomorphisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the isomorphic mappings between a graph and the subgraphs of\nanother graph — count_subgraph_isomorphisms","title":"Count the isomorphic mappings between a graph and the subgraphs of\nanother graph — count_subgraph_isomorphisms","text":"Count isomorphic mappings graph subgraphs another graph","code":""},{"path":"/reference/count_subgraph_isomorphisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the isomorphic mappings between a graph and the subgraphs of\nanother graph — count_subgraph_isomorphisms","text":"","code":"count_subgraph_isomorphisms(pattern, target, method = c(\"lad\", \"vf2\"), ...)"},{"path":"/reference/count_subgraph_isomorphisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the isomorphic mappings between a graph and the subgraphs of\nanother graph — count_subgraph_isomorphisms","text":"pattern smaller graph, might directed undirected. Undirected graphs treated directed graphs mutual edges. target bigger graph, might directed undirected. Undirected graphs treated directed graphs mutual edges. method method use. Possible values: ‘lad’, ‘vf2’. See details . ... Additional arguments, passed various methods.","code":""},{"path":"/reference/count_subgraph_isomorphisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the isomorphic mappings between a graph and the subgraphs of\nanother graph — count_subgraph_isomorphisms","text":"Logical scalar, TRUE pattern isomorphic (possibly induced) subgraph target.","code":""},{"path":"/reference/count_subgraph_isomorphisms.html","id":"-lad-method","dir":"Reference","previous_headings":"","what":"‘lad’ method","title":"Count the isomorphic mappings between a graph and the subgraphs of\nanother graph — count_subgraph_isomorphisms","text":"LAD algorithm Solnon, see reference . following extra arguments: domains NULL, specifies matching restrictions. must list target vertex sets, given numeric vertex ids symbolic vertex names. length list must vcount(pattern) vertex pattern gives allowed matching vertices target. Defaults NULL. induced Logical scalar, whether search induced subgraph. FALSE default. time.limit processor time limit computation, seconds. defaults Inf, means limit.","code":""},{"path":"/reference/count_subgraph_isomorphisms.html","id":"-vf-method","dir":"Reference","previous_headings":"","what":"‘vf2’ method","title":"Count the isomorphic mappings between a graph and the subgraphs of\nanother graph — count_subgraph_isomorphisms","text":"method uses VF2 algorithm Cordella, Foggia et al., see references . supports vertex edge colors following extra arguments: vertex.color1, vertex.color2 Optional integer vectors giving colors vertices colored graph isomorphism. given, graph “color” vertex attribute, used. want ignore attributes, supply NULL arguments. See also examples . edge.color1, edge.color2 Optional integer vectors giving colors edges edge-colored (sub)graph isomorphism. given, graph “color” edge attribute, used. want ignore attributes, supply NULL arguments.","code":""},{"path":"/reference/count_subgraph_isomorphisms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Count the isomorphic mappings between a graph and the subgraphs of\nanother graph — count_subgraph_isomorphisms","text":"LP Cordella,  P Foggia, C Sansone, M Vento: improved algorithm matching large graphs, Proc. 3rd IAPR TC-15 Workshop Graphbased Representations Pattern Recognition, 149--159, 2001. C. Solnon: AllDifferent-based Filtering Subgraph Isomorphism, Artificial Intelligence 174(12-13):850--864, 2010.","code":""},{"path":[]},{"path":"/reference/count_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Find triangles in graphs — count_triangles","title":"Find triangles in graphs — count_triangles","text":"Count many triangles vertex part , graph, just list triangles graph.","code":""},{"path":"/reference/count_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find triangles in graphs — count_triangles","text":"","code":"count_triangles(graph, vids = V(graph))"},{"path":"/reference/count_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find triangles in graphs — count_triangles","text":"graph input graph. might directed, edge directions ignored. vids vertices query, default. might vector numeric ids, character vector symbolic vertex names named graphs.","code":""},{"path":"/reference/count_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find triangles in graphs — count_triangles","text":"triangles() numeric vector vertex ids, first three vertices belong first triangle found, etc. count_triangles() numeric vector, number triangles vertices queried.","code":""},{"path":"/reference/count_triangles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find triangles in graphs — count_triangles","text":"triangles() lists triangles graph. efficiency, triangles returned single vector. first three vertices belong first triangle, etc. count_triangles() counts many triangles vertex part .","code":""},{"path":[]},{"path":"/reference/count_triangles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find triangles in graphs — count_triangles","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/count_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find triangles in graphs — count_triangles","text":"","code":"## A small graph kite <- make_graph(\"Krackhardt_Kite\") plot(kite) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' matrix(triangles(kite), nrow = 3) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] #> [1,]    4    4    4    4    4    4    4    4    6     6     7 #> [2,]    1    1    2    6    6    6    7    7    1     7     2 #> [3,]    2    3    5    1    3    7    2    5    3     8     5  ## Adjacenct triangles atri <- count_triangles(kite) plot(kite, vertex.label = atri) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ## Always true sum(count_triangles(kite)) == length(triangles(kite)) #> [1] TRUE  ## Should match, local transitivity is the ## number of adjacent triangles divided by the number ## of adjacency triples transitivity(kite, type = \"local\") #>  [1] 0.6666667 0.6666667 1.0000000 0.5333333 1.0000000 0.5000000 0.5000000 #>  [8] 0.3333333 0.0000000       NaN count_triangles(kite) / (degree(kite) * (degree(kite) - 1) / 2) #>  [1] 0.6666667 0.6666667 1.0000000 0.5333333 1.0000000 0.5000000 0.5000000 #>  [8] 0.3333333 0.0000000       NaN"},{"path":"/reference/curve_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimal edge curvature when plotting graphs — curve_multiple","title":"Optimal edge curvature when plotting graphs — curve_multiple","text":"graphs multiple edges, drawing straight lines show plotting graphs; top . One solution bend edges, diffenent curvature, visible.","code":""},{"path":"/reference/curve_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimal edge curvature when plotting graphs — curve_multiple","text":"","code":"curve_multiple(graph, start = 0.5)"},{"path":"/reference/curve_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimal edge curvature when plotting graphs — curve_multiple","text":"graph input graph. start curvature two extreme edges. edges curvature -start start, spaced equally.","code":""},{"path":"/reference/curve_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimal edge curvature when plotting graphs — curve_multiple","text":"numeric vector, length number edges graph.","code":""},{"path":"/reference/curve_multiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimal edge curvature when plotting graphs — curve_multiple","text":"curve_multiple() calculates optimal edge.curved vector plotting graph multiple edges, edges visible.","code":""},{"path":[]},{"path":"/reference/curve_multiple.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimal edge curvature when plotting graphs — curve_multiple","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/curve_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimal edge curvature when plotting graphs — curve_multiple","text":"","code":"g <- graph(c(   0, 1, 1, 0, 1, 2, 1, 3, 1, 3, 1, 3,   2, 3, 2, 3, 2, 3, 2, 3, 0, 1 ) + 1)  curve_multiple(g) #>  [1] -0.5000000  0.0000000  0.0000000 -0.5000000  0.0000000  0.5000000 #>  [7] -0.5000000 -0.1666667  0.1666667  0.5000000  0.5000000  set.seed(42) plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/decompose.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompose a graph into components — decompose","title":"Decompose a graph into components — decompose","text":"Creates separate graph component graph.","code":""},{"path":"/reference/decompose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompose a graph into components — decompose","text":"","code":"decompose(graph, mode = c(\"weak\", \"strong\"), max.comps = NA, min.vertices = 0)"},{"path":"/reference/decompose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decompose a graph into components — decompose","text":"graph original graph. mode Character constant giving type components, wither weak weakly connected components strong strongly connected components. max.comps maximum number components return. first max.comps components returned (hold least min.vertices vertices, see next parameter), others ignored. Supply NA want limit number components. min.vertices minimum number vertices component contain order place result list. Eg. supply 2 ignore isolate vertices.","code":""},{"path":"/reference/decompose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decompose a graph into components — decompose","text":"list graph objects.","code":""},{"path":[]},{"path":"/reference/decompose.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decompose a graph into components — decompose","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/decompose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decompose a graph into components — decompose","text":"","code":"# the diameter of each component in a random graph g <- sample_gnp(1000, 1 / 1000) components <- decompose(g, min.vertices = 2) sapply(components, diameter) #>   [1] 19  5  3  3  4  3  1  1  4  1  5  1  2  1  5  2  5  1  1  1  1  1  5 11  1 #>  [26]  4  2  1  2  1  9  2  2  2 11  1  2  6  3  1  3  2  1  1  4  2  2  8  3  1 #>  [51]  2  5  1  1  2  1  2  3  1  2  1  6  5  1  8  2  3  2  9  2  2  2  1  2  3 #>  [76]  1  6  2  5  3  1  1  4  2  6  2  3  2  1  3  1  1  4  1  1  5  1  1  7  1 #> [101]  4  2  6  1  1  2  4  1  1  1  1  3  1  1  1  1  2  1  1  4  2  1  1  3  1 #> [126]  3  1  2  1  1  1  1  1  1  1  1  1"},{"path":"/reference/degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree and degree distribution of the vertices — degree","title":"Degree and degree distribution of the vertices — degree","text":"degree vertex basic structural property, number adjacent edges.","code":""},{"path":"/reference/degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree and degree distribution of the vertices — degree","text":"","code":"degree(   graph,   v = V(graph),   mode = c(\"all\", \"out\", \"in\", \"total\"),   loops = TRUE,   normalized = FALSE )  degree_distribution(graph, cumulative = FALSE, ...)"},{"path":"/reference/degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degree and degree distribution of the vertices — degree","text":"graph graph analyze. v ids vertices degree calculated. mode Character string, “” -degree, “” -degree “total” sum two. undirected graphs argument ignored. “” synonym “total”. loops Logical; whether loop edges also counted. normalized Logical scalar, whether normalize degree.  TRUE result divided \\(n-1\\), \\(n\\) number vertices graph. cumulative Logical; whether cumulative degree distribution calculated. ... Additional arguments pass degree(), eg. mode useful also v loops make sense.","code":""},{"path":"/reference/degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degree and degree distribution of the vertices — degree","text":"degree() numeric vector length argument v. degree_distribution() numeric vector length maximum degree plus one. first element relative frequency zero degree vertices, second vertices degree one, etc.","code":""},{"path":[]},{"path":"/reference/degree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Degree and degree distribution of the vertices — degree","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Degree and degree distribution of the vertices — degree","text":"","code":"g <- make_ring(10) degree(g) #>  [1] 2 2 2 2 2 2 2 2 2 2 g2 <- sample_gnp(1000, 10 / 1000) degree_distribution(g2) #>  [1] 0.000 0.001 0.001 0.009 0.021 0.035 0.063 0.093 0.102 0.125 0.123 0.120 #> [13] 0.111 0.078 0.046 0.035 0.013 0.013 0.004 0.004 0.000 0.003"},{"path":"/reference/delete_edge_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an edge attribute — delete_edge_attr","title":"Delete an edge attribute — delete_edge_attr","text":"Delete edge attribute","code":""},{"path":"/reference/delete_edge_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete an edge attribute — delete_edge_attr","text":"","code":"delete_edge_attr(graph, name)"},{"path":"/reference/delete_edge_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an edge attribute — delete_edge_attr","text":"graph graph name name edge attribute delete.","code":""},{"path":"/reference/delete_edge_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete an edge attribute — delete_edge_attr","text":"graph, specified edge attribute removed.","code":""},{"path":[]},{"path":"/reference/delete_edge_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete an edge attribute — delete_edge_attr","text":"","code":"g <- make_ring(10) %>%   set_edge_attr(\"name\", value = LETTERS[1:10]) edge_attr_names(g) #> [1] \"name\" g2 <- delete_edge_attr(g, \"name\") edge_attr_names(g2) #> character(0)"},{"path":"/reference/delete_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete edges from a graph — delete_edges","title":"Delete edges from a graph — delete_edges","text":"Delete edges graph","code":""},{"path":"/reference/delete_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete edges from a graph — delete_edges","text":"","code":"delete_edges(graph, edges)"},{"path":"/reference/delete_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete edges from a graph — delete_edges","text":"graph input graph. edges edges remove, specified edge sequence. Typically either numeric vector containing edge IDs, character vector containing IDs names source target vertices, separated |","code":""},{"path":"/reference/delete_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete edges from a graph — delete_edges","text":"graph, edges removed.","code":""},{"path":[]},{"path":"/reference/delete_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete edges from a graph — delete_edges","text":"","code":"g <- make_ring(10) %>%   delete_edges(seq(1, 9, by = 2)) g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 2 4 6 8 9 #>  #> [[4]] #> [1] 1 3 5 7 0 #>  #> [[5]] #> [1] 0 1 2 3 4 #>  #> [[6]] #> [1] 4 0 1 2 3 #>  #> [[7]] #>  [1] 0 0 0 1 1 2 2 3 3 4 5 #>  #> [[8]] #>  [1] 0 1 2 2 3 3 4 4 5 5 5 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbfdb910> #>  #> attr(,\"class\") #> [1] \"igraph\"  g <- make_ring(10) %>%   delete_edges(\"10|1\") g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 4 5 6 7 8 9 #>  #> [[4]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[5]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[6]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1] 0 0 1 2 3 4 5 6 7 8 9 #>  #> [[8]] #>  [1] 0 1 2 3 4 5 6 7 8 9 9 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbc0fc040> #>  #> attr(,\"class\") #> [1] \"igraph\"  g <- make_ring(5) g <- delete_edges(g, get.edge.ids(g, c(1, 5, 4, 5))) g #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 #>  #> [[4]] #> [1] 0 1 2 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 0 1 2 3 3 #>  #> [[8]] #> [1] 0 1 2 3 3 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbc262b90> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/delete_graph_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a graph attribute — delete_graph_attr","title":"Delete a graph attribute — delete_graph_attr","text":"Delete graph attribute","code":""},{"path":"/reference/delete_graph_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a graph attribute — delete_graph_attr","text":"","code":"delete_graph_attr(graph, name)"},{"path":"/reference/delete_graph_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a graph attribute — delete_graph_attr","text":"graph graph. name Name attribute delete.","code":""},{"path":"/reference/delete_graph_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a graph attribute — delete_graph_attr","text":"graph, specified attribute removed.","code":""},{"path":[]},{"path":"/reference/delete_graph_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a graph attribute — delete_graph_attr","text":"","code":"g <- make_ring(10) graph_attr_names(g) #> [1] \"name\"     \"mutual\"   \"circular\" g2 <- delete_graph_attr(g, \"name\") graph_attr_names(g2) #> [1] \"mutual\"   \"circular\""},{"path":"/reference/delete_vertex_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a vertex attribute — delete_vertex_attr","title":"Delete a vertex attribute — delete_vertex_attr","text":"Delete vertex attribute","code":""},{"path":"/reference/delete_vertex_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a vertex attribute — delete_vertex_attr","text":"","code":"delete_vertex_attr(graph, name)"},{"path":"/reference/delete_vertex_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a vertex attribute — delete_vertex_attr","text":"graph graph name name vertex attribute delete.","code":""},{"path":"/reference/delete_vertex_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a vertex attribute — delete_vertex_attr","text":"graph, specified vertex attribute removed.","code":""},{"path":[]},{"path":"/reference/delete_vertex_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a vertex attribute — delete_vertex_attr","text":"","code":"g <- make_ring(10) %>%   set_vertex_attr(\"name\", value = LETTERS[1:10]) vertex_attr_names(g) #> [1] \"name\" g2 <- delete_vertex_attr(g, \"name\") vertex_attr_names(g2) #> character(0)"},{"path":"/reference/delete_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete vertices from a graph — delete_vertices","title":"Delete vertices from a graph — delete_vertices","text":"Delete vertices graph","code":""},{"path":"/reference/delete_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete vertices from a graph — delete_vertices","text":"","code":"delete_vertices(graph, v)"},{"path":"/reference/delete_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete vertices from a graph — delete_vertices","text":"graph input graph. v vertices remove, vertex sequence.","code":""},{"path":"/reference/delete_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete vertices from a graph — delete_vertices","text":"graph, vertices removed.","code":""},{"path":[]},{"path":"/reference/delete_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete vertices from a graph — delete_vertices","text":"","code":"g <- make_ring(10) %>%   set_vertex_attr(\"name\", value = LETTERS[1:10]) g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbd6723e8> #>  #> attr(,\"class\") #> [1] \"igraph\" V(g) #> + 10/10 vertices, named, from b6669a0: #>  [1] A B C D E F G H I J  g2 <- delete_vertices(g, c(1, 5)) %>%   delete_vertices(\"B\") g2 #> [[1]] #> [1] 7 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 3 4 5 6 #>  #> [[4]] #> [1] 0 2 3 4 5 #>  #> [[5]] #> [1] 0 1 2 3 4 #>  #> [[6]] #> [1] 0 1 2 3 4 #>  #> [[7]] #> [1] 0 0 1 1 2 3 4 5 #>  #> [[8]] #> [1] 0 1 1 2 3 4 5 5 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"C\" \"D\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbe639918> #>  #> attr(,\"class\") #> [1] \"igraph\" V(g2) #> + 7/7 vertices, named, from 6c77bf4: #> [1] C D F G H I J"},{"path":"/reference/dfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Depth-first search — dfs","title":"Depth-first search — dfs","text":"Depth-first search algorithm traverse graph. starts root vertex tries go quickly far possible.","code":""},{"path":"/reference/dfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Depth-first search — dfs","text":"","code":"dfs(   graph,   root,   mode = c(\"out\", \"in\", \"all\", \"total\"),   unreachable = TRUE,   order = TRUE,   order.out = FALSE,   father = FALSE,   dist = FALSE,   in.callback = NULL,   out.callback = NULL,   extra = NULL,   rho = parent.frame(),   neimode )"},{"path":"/reference/dfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Depth-first search — dfs","text":"graph input graph. root single root vertex start search . mode directed graphs specifies type edges follow. ‘’ follows outgoing, ‘’ incoming edges. ‘’ ignores edge directions completely. ‘total’ synonym ‘’. argument ignored undirected graphs. unreachable Logical scalar, whether search visit vertices unreachable given root vertex (vertices). TRUE, additional searches performed vertices visited. order Logical scalar, whether return DFS ordering vertices. order.Logical scalar, whether return ordering based leaving subtree vertex. father Logical scalar, whether return father vertices. dist Logical scalar, whether return distance root search tree. .callback NULL, must callback function. called whenever vertex visited. See details . .callback NULL, must callback function. called whenever subtree vertex completed algorithm. See details . extra Additional argument supply callback function. rho environment callback function evaluated. neimode argument deprecated igraph 1.3.0; use mode instead.","code":""},{"path":"/reference/dfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Depth-first search — dfs","text":"named list following entries: root Numeric scalar. root vertex used starting point search. neimode Character scalar. mode argument function call. Note undirected graphs always ‘’, irrespectively supplied value. order Numeric vector. vertex ids, order visited search. order.Numeric vector, vertex ids, order completion subtree. father Numeric vector. father vertex, .e. vertex discovered . dist Numeric vector, vertex distance root search tree. Note order, order., father, dist might NULL corresponding argument FALSE, .e. calculation requested.","code":""},{"path":"/reference/dfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Depth-first search — dfs","text":"callback functions must following arguments: graph input graph passed callback function . data named numeric vector, following entries: ‘vid’, vertex just visited ‘dist’, distance root search tree. extra extra argument. callback must return FALSE continue search TRUE terminate . See examples use callback functions.","code":""},{"path":[]},{"path":"/reference/dfs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Depth-first search — dfs","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/dfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Depth-first search — dfs","text":"","code":"## A graph with two separate trees dfs(make_tree(10) %du% make_tree(10),   root = 1, \"out\",   TRUE, TRUE, TRUE, TRUE ) #> $root #> [1] 1 #>  #> $mode #> [1] \"out\" #>  #> $order #> + 20/20 vertices, from 8ea74bb: #>  [1]  1  2  4  8  9  5 10  3  6  7 11 12 14 18 19 15 20 13 16 17 #>  #> $order.out #> + 20/20 vertices, from 8ea74bb: #>  [1]  8  9  4 10  5  2  6  7  3  1 18 19 14 20 15 12 16 17 13 11 #>  #> $father #> + 20/20 vertices, from 8ea74bb: #>  [1] NA  1  1  2  2  3  3  4  4  5 NA 11 11 12 12 13 13 14 14 15 #>  #> $dist #> NULL #>  #> $neimode #> [1] \"out\" #>   ## How to use a callback f.in <- function(graph, data, extra) {   cat(\"in:\", paste(collapse = \", \", data), \"\\n\")   FALSE } f.out <- function(graph, data, extra) {   cat(\"out:\", paste(collapse = \", \", data), \"\\n\")   FALSE } tmp <- dfs(make_tree(10),   root = 1, \"out\",   in.callback = f.in, out.callback = f.out ) #> in: 1, 0  #> in: 2, 1  #> in: 4, 2  #> in: 8, 3  #> out: 8, 2  #> in: 9, 3  #> out: 9, 2  #> out: 4, 1  #> in: 5, 2  #> in: 10, 3  #> out: 10, 2  #> out: 5, 1  #> out: 2, 0  #> in: 3, 1  #> in: 6, 2  #> out: 6, 1  #> in: 7, 2  #> out: 7, 1  #> out: 3, 0  #> out: 1, -1   ## Terminate after the first component, using a callback f.out <- function(graph, data, extra) {   data[\"vid\"] == 1 } tmp <- dfs(make_tree(10) %du% make_tree(10),   root = 1,   out.callback = f.out )"},{"path":"/reference/diameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter of a graph — diameter","title":"Diameter of a graph — diameter","text":"diameter graph length longest geodesic.","code":""},{"path":"/reference/diameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter of a graph — diameter","text":"","code":"diameter(graph, directed = TRUE, unconnected = TRUE, weights = NULL)"},{"path":"/reference/diameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter of a graph — diameter","text":"graph graph analyze. directed Logical, whether directed undirected paths considered. ignored undirected graphs. unconnected Logical, graph unconnected. FALSE, function return number one larger largest possible diameter, always number vertices. TRUE, diameters connected components calculated largest one returned. weights Optional positive weight vector calculating weighted distances. graph weight edge attribute, used default.","code":""},{"path":"/reference/diameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter of a graph — diameter","text":"numeric constant diameter(), numeric vector get_diameter(). farthest_vertices() returns list two entries: vertices two vertices farthest. distance distance.","code":""},{"path":"/reference/diameter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter of a graph — diameter","text":"diameter calculated using breadth-first search like method. get_diameter() returns path actual diameter. many shortest paths length diameter, returns first one found. farthest_vertices() returns two vertex ids, vertices connected diameter path.","code":""},{"path":[]},{"path":"/reference/diameter.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diameter of a graph — diameter","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/diameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter of a graph — diameter","text":"","code":"g <- make_ring(10) g2 <- delete_edges(g, c(1, 2, 1, 10)) diameter(g2, unconnected = TRUE) #> [1] 7 diameter(g2, unconnected = FALSE) #> [1] Inf  ## Weighted diameter set.seed(1) g <- make_ring(10) E(g)$weight <- sample(seq_len(ecount(g))) diameter(g) #> [1] 27 get_diameter(g) #> + 5/10 vertices, from 88672e4: #> [1]  1 10  9  8  7 diameter(g, weights = NA) #> [1] 5 get_diameter(g, weights = NA) #> + 6/10 vertices, from 88672e4: #> [1] 1 2 3 4 5 6"},{"path":"/reference/difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference of two sets — difference","title":"Difference of two sets — difference","text":"S3 generic function. See methods(\"difference\") actual implementations various S3 classes. Initially implemented igraph graphs (difference edges two graphs), igraph vertex edge sequences. See difference.igraph(), difference.igraph.vs().","code":""},{"path":"/reference/difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference of two sets — difference","text":"","code":"difference(...)"},{"path":"/reference/difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference of two sets — difference","text":"... Arguments, number interpretation depends function implements difference().","code":""},{"path":"/reference/difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference of two sets — difference","text":"Depends function implements method.","code":""},{"path":"/reference/difference.igraph.es.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference of edge sequences — difference.igraph.es","title":"Difference of edge sequences — difference.igraph.es","text":"Difference edge sequences","code":""},{"path":"/reference/difference.igraph.es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference of edge sequences — difference.igraph.es","text":"","code":"# S3 method for igraph.es difference(big, small, ...)"},{"path":"/reference/difference.igraph.es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference of edge sequences — difference.igraph.es","text":"big ‘big’ edge sequence. small ‘small’ edge sequence. ... Ignored, included S3 signature compatibility.","code":""},{"path":"/reference/difference.igraph.es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference of edge sequences — difference.igraph.es","text":"edge sequence contains edges part big, part small.","code":""},{"path":"/reference/difference.igraph.es.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Difference of edge sequences — difference.igraph.es","text":"must belong graph. Note function ‘set’ semantics multiplicity edges lost result.","code":""},{"path":[]},{"path":"/reference/difference.igraph.es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference of edge sequences — difference.igraph.es","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) difference(V(g), V(g)[6:10]) #> + 5/10 vertices, named, from aed62f6: #> [1] A B C D E"},{"path":"/reference/difference.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference of graphs — difference.igraph","title":"Difference of graphs — difference.igraph","text":"difference two graphs created.","code":""},{"path":"/reference/difference.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference of graphs — difference.igraph","text":"","code":"# S3 method for igraph difference(big, small, byname = \"auto\", ...)"},{"path":"/reference/difference.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference of graphs — difference.igraph","text":"big left hand side argument minus operator. directed undirected graph. small right hand side argument minus operator. directed ot undirected graph. byname logical scalar, character scalar auto. Whether perform operation based symbolic vertex names. auto, means TRUE graphs named FALSE otherwise. warning generated auto one graph, graphs named. ... Ignored, included S3 compatibility.","code":""},{"path":"/reference/difference.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference of graphs — difference.igraph","text":"new graph object.","code":""},{"path":"/reference/difference.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Difference of graphs — difference.igraph","text":"difference() creates difference two graphs. edges present first graph second included new graph. corresponding operator %m%. byname argument TRUE (auto graphs named), operation performed based symbolic vertex names. Otherwise numeric vertex ids used. difference() keeps attributes (graph, vertex edge) first graph. Note big small must directed undirected, otherwise error message given.","code":""},{"path":"/reference/difference.igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Difference of graphs — difference.igraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/difference.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference of graphs — difference.igraph","text":"","code":"## Create a wheel graph wheel <- union(   make_ring(10),   make_star(11, center = 11, mode = \"undirected\") ) V(wheel)$name <- letters[seq_len(vcount(wheel))]  ## Subtract a star graph from it sstar <- make_star(6, center = 6, mode = \"undirected\") V(sstar)$name <- letters[c(1, 3, 5, 7, 9, 11)] G <- wheel %m% sstar print_all(G) #> IGRAPH 632ec26 UN-- 11 15 --  #> + attr: name_1 (g/c), name_2 (g/c), mutual (g/l), circular (g/l), mode #> | (g/c), center (g/n), name (v/c) #> + edges (vertex names): #> a -- b, j #> b -- a, c, k #> c -- b, d #> d -- c, e, k #> e -- d, f #> f -- e, g, k #> g -- f, h #> h -- g, i, k #> i -- h, j #> j -- a, i, k #> k -- b, d, f, h, j plot(G, layout = layout_nicely(wheel)) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/difference.igraph.vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference of vertex sequences — difference.igraph.vs","title":"Difference of vertex sequences — difference.igraph.vs","text":"Difference vertex sequences","code":""},{"path":"/reference/difference.igraph.vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference of vertex sequences — difference.igraph.vs","text":"","code":"# S3 method for igraph.vs difference(big, small, ...)"},{"path":"/reference/difference.igraph.vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference of vertex sequences — difference.igraph.vs","text":"big ‘big’ vertex sequence. small ‘small’ vertex sequence. ... Ignored, included S3 signature compatibility.","code":""},{"path":"/reference/difference.igraph.vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference of vertex sequences — difference.igraph.vs","text":"vertex sequence contains vertices part big, part small.","code":""},{"path":"/reference/difference.igraph.vs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Difference of vertex sequences — difference.igraph.vs","text":"must belong graph. Note function ‘set’ semantics multiplicity vertices lost result.","code":""},{"path":[]},{"path":"/reference/difference.igraph.vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference of vertex sequences — difference.igraph.vs","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) difference(V(g), V(g)[6:10]) #> + 5/10 vertices, named, from 1dd1283: #> [1] A B C D E"},{"path":"/reference/dim_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensionality selection for singular values using profile likelihood. — dim_select","title":"Dimensionality selection for singular values using profile likelihood. — dim_select","text":"Select number significant singular values, finding ‘elbow’ scree plot, principled way.","code":""},{"path":"/reference/dim_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensionality selection for singular values using profile likelihood. — dim_select","text":"","code":"dim_select(sv)"},{"path":"/reference/dim_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensionality selection for singular values using profile likelihood. — dim_select","text":"sv numeric vector, ordered singular values.","code":""},{"path":"/reference/dim_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensionality selection for singular values using profile likelihood. — dim_select","text":"numeric scalar, estimate \\(d\\).","code":""},{"path":"/reference/dim_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dimensionality selection for singular values using profile likelihood. — dim_select","text":"input function numeric vector contains measure ‘importance’ dimension. spectral embedding, singular values adjacency matrix. singular values assumed generated Gaussian mixture distribution two components different means variance. dimensionality \\(d\\) chosen maximize likelihood \\(d\\) largest singular values assigned one component mixture rest singular values assigned component. function can also used general separation problem, assume left right vector coming two Normal distributions, different means, want know border. See examples .","code":""},{"path":"/reference/dim_select.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dimensionality selection for singular values using profile likelihood. — dim_select","text":"M. Zhu, . Ghodsi (2006). Automatic dimensionality selection scree plot via use profile likelihood. Computational Statistics Data Analysis, Vol. 51, 918--930.","code":""},{"path":[]},{"path":"/reference/dim_select.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dimensionality selection for singular values using profile likelihood. — dim_select","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/dim_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dimensionality selection for singular values using profile likelihood. — dim_select","text":"","code":"# Generate the two groups of singular values with # Gaussian mixture of two components that have different means sing.vals <- c(rnorm(10, mean = 1, sd = 1), rnorm(10, mean = 3, sd = 1)) dim.chosen <- dim_select(sing.vals) dim.chosen #> [1] 9  # Sample random vectors with multivariate normal distribution # and normalize to unit length lpvs <- matrix(rnorm(200), 10, 20) lpvs <- apply(lpvs, 2, function(x) {   (abs(x) / sqrt(sum(x^2))) }) RDP.graph <- sample_dot_product(lpvs) dim_select(embed_adjacency_matrix(RDP.graph, 10)$D) #> [1] 1  # Sample random vectors with the Dirichlet distribution lpvs.dir <- sample_dirichlet(n = 20, rep(1, 10)) RDP.graph.2 <- sample_dot_product(lpvs.dir) dim_select(embed_adjacency_matrix(RDP.graph.2, 10)$D) #> [1] 2  # Sample random vectors from hypersphere with radius 1. lpvs.sph <- sample_sphere_surface(dim = 10, n = 20, radius = 1) RDP.graph.3 <- sample_dot_product(lpvs.sph) dim_select(embed_adjacency_matrix(RDP.graph.3, 10)$D) #> [1] 1"},{"path":"/reference/disjoint_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Disjoint union of graphs — disjoint_union","title":"Disjoint union of graphs — disjoint_union","text":"union two graphs created. graphs assumed disjoint vertex sets.","code":""},{"path":"/reference/disjoint_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disjoint union of graphs — disjoint_union","text":"","code":"disjoint_union(...)  x %du% y"},{"path":"/reference/disjoint_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disjoint union of graphs — disjoint_union","text":"... Graph objects lists graph objects. x, y Graph objects.","code":""},{"path":"/reference/disjoint_union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disjoint union of graphs — disjoint_union","text":"new graph object.","code":""},{"path":"/reference/disjoint_union.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Disjoint union of graphs — disjoint_union","text":"disjoint_union() creates union two disjoint graphs. Thus first vertices second, third, etc. graphs relabeled completely disjoint graphs. simple union created. function can also used via %du% operator. graph.disjont.union handles graph, vertex edge attributes.  particular, merges vertex edge attributes using basic c() function. graphs lack vertex/edge attribute, corresponding values new graph set NA. Graph attributes simply copied result. result name clash, renamed adding suffixes: _1, _2, etc. Note graphs vertex names (ie. name vertex attribute), concatenated vertex names might non-unique result. warning given happens. error generated input graphs directed others undirected.","code":""},{"path":"/reference/disjoint_union.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Disjoint union of graphs — disjoint_union","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/disjoint_union.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disjoint union of graphs — disjoint_union","text":"","code":"## A star and a ring g1 <- make_star(10, mode = \"undirected\") V(g1)$name <- letters[1:10] g2 <- make_ring(10) V(g2)$name <- letters[11:20] print_all(g1 %du% g2) #> IGRAPH 35d30b7 UN-- 20 19 --  #> + attr: name_1 (g/c), name_2 (g/c), mode (g/c), center (g/n), mutual #> | (g/l), circular (g/l), name (v/c) #> + edges from 35d30b7 (vertex names): #>  [1] a--b a--c a--d a--e a--f a--g a--h a--i a--j k--l l--m m--n n--o o--p p--q #> [16] q--r r--s s--t k--t"},{"path":"/reference/distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Shortest (directed or undirected) paths between vertices — distance_table","title":"Shortest (directed or undirected) paths between vertices — distance_table","text":"distances() calculates length shortest paths vertices network. shortest_paths() calculates one shortest path (path , just length) given vertex.","code":""},{"path":"/reference/distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shortest (directed or undirected) paths between vertices — distance_table","text":"","code":"distance_table(graph, directed = TRUE)  mean_distance(   graph,   weights = NULL,   directed = TRUE,   unconnected = TRUE,   details = FALSE )  distances(   graph,   v = V(graph),   to = V(graph),   mode = c(\"all\", \"out\", \"in\"),   weights = NULL,   algorithm = c(\"automatic\", \"unweighted\", \"dijkstra\", \"bellman-ford\", \"johnson\") )  shortest_paths(   graph,   from,   to = V(graph),   mode = c(\"out\", \"all\", \"in\"),   weights = NULL,   output = c(\"vpath\", \"epath\", \"both\"),   predecessors = FALSE,   inbound.edges = FALSE,   algorithm = c(\"automatic\", \"unweighted\", \"dijkstra\", \"bellman-ford\") )  all_shortest_paths(   graph,   from,   to = V(graph),   mode = c(\"out\", \"all\", \"in\"),   weights = NULL )"},{"path":"/reference/distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shortest (directed or undirected) paths between vertices — distance_table","text":"graph graph work . directed Whether consider directed paths directed graphs, argument ignored undirected graphs. weights Possibly numeric vector giving edge weights. NULL graph weight edge attribute, attribute used. NA weights used (even graph weight attribute). unconnected graph unconnected (strongly connected directed paths considered). TRUE, lengths existing paths considered averaged; FALSE, length missing paths considered infinite length, making mean distance infinite well. details Whether provide additional details result. Functions accepting argument (like mean_distance()) return additional information like number disconnected vertex pairs result parameter set TRUE. v Numeric vector, vertices shortest paths calculated. Numeric vector, vertices shortest paths calculated. default includes vertices. Note distances() every vertex must included . (required shortest_paths(). mode Character constant, gives whether shortest paths given vertices calculated directed graphs. shortest paths vertex, considered. , default, corresponding undirected graph used, ie. directed paths searched. argument ignored undirected graphs. algorithm algorithm use calculation. default igraph tries select fastest suitable algorithm. weights, unweighted breadth-first search used, otherwise weights positive, Dijkstra's algorithm used. negative weights calculation 100 sources, Johnson's algorithm used. Otherwise Bellman-Ford algorithm used. can override igraph's choice explicitly giving parameter. Note igraph C core might still override choice obvious cases, .e. edge weights, unweighted algorithm used, regardless argument. Numeric constant, vertex shortest paths calculated. Note right now vector vertex ids, single vertex. output Character scalar, defines report shortest paths. “vpath” means vertices along paths reported, form used prior igraph version 0.6. “epath” means edges along paths reported. “” means forms returned, named list components “vpath” “epath”. predecessors Logical scalar, whether return predecessor vertex vertex. predecessor vertex tree vertex vertex reached. predecessor start vertex (argument) definition. predecessor zero, means given vertex reached source search. Note search terminates vertices reached. inbound.edges Logical scalar, whether return inbound edge vertex. inbound edge vertex tree edge via vertex reached. start vertex vertices reached search zero corresponding entry vector. Note search terminates vertices reached.","code":""},{"path":"/reference/distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shortest (directed or undirected) paths between vertices — distance_table","text":"distances() numeric matrix length() columns length(v) rows. shortest path length vertex always zero. unreachable vertices Inf included. shortest_paths() named list four entries returned: vpath list, length length(); list element contains vertex ids path vertex vertex [] (way directed graphs depending mode argument). vector also contains first last elements. included . path two vertices numeric vector length zero returned list element. output requested output argument, NULL. epath list similar vpath, vectors list contain edge ids along shortest paths, instead vertex ids. entry set NULL requested output argument. predecessors Numeric vector, predecessor vertex argument, NULL requested. inbound_edges Numeric vector, inbound edge vertex, NULL, requested. all_shortest_paths() list returned, list element contains shortest path vertex . shortest paths vertex collected consecutive elements list. mean_distance() single number returned details=FALSE, named list two entries: res mean distance numeric scalar unconnected number unconnected vertex pairs, also numeric scalar. distance_table() returns named list two entries: res numeric vector, histogram distances, unconnected numeric scalar, number pairs first vertex reachable second. sum two entries always \\(n(n-1)\\) directed graphs \\(n(n-1)/2\\) undirected graphs.","code":""},{"path":"/reference/distances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shortest (directed or undirected) paths between vertices — distance_table","text":"shortest path, geodesic two pair vertices path minimal number vertices. functions documented manual page calculate shortest paths vertex pairs. distances() calculates lengths pairwise shortest paths set vertices () another set vertices (). uses different algorithms, depending algorithm argument weight edge attribute graph. implemented algorithms breadth-first search (‘unweighted’), works unweighted graphs; Dijkstra algorithm (‘dijkstra’), works graphs non-negative edge weights; Bellman-Ford algorithm (‘bellman-ford’), Johnson's algorithm (‘johnson’). latter two algorithms work arbitrary edge weights, (naturally) graphs negative cycle. Note negative-weight edge undirected graph implies cycle. Johnson's algorithm performs better Bellman-Ford one many source (target) vertices given, -pairs shortest path length calculations typical use case. igraph can choose automatically algorithms, chooses efficient one appropriate supplied weights (). automatic algorithm selection, supply ‘automatic’ algorithm argument. (also default.) shortest_paths() calculates single shortest path (.e. path , just length) source vertex given , target vertices given . shortest_paths() uses breadth-first search unweighted graphs Dijkstra's algorithm weighted graphs. latter works edge weights non-negative. all_shortest_paths() calculates shortest paths pairs vertices. precisely, vertex vertices given . uses breadth-first search unweighted graphs Dijkstra's algorithm weighted ones. latter supports non-negative edge weights. mean_distance() calculates average path length graph, calculating shortest paths pairs vertices (ways directed graphs). uses breadth-=first search unweighted graphs Dijkstra's algorithm weighted ones. latter supports non-negative edge weights. distance_table() calculates histogram, calculating shortest path length pair vertices. directed graphs directions considered, every pair vertices appears twice histogram.","code":""},{"path":"/reference/distances.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shortest (directed or undirected) paths between vertices — distance_table","text":"West, D.B. (1996). Introduction Graph Theory. Upper Saddle River, N.J.: Prentice Hall.","code":""},{"path":[]},{"path":"/reference/distances.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Shortest (directed or undirected) paths between vertices — distance_table","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shortest (directed or undirected) paths between vertices — distance_table","text":"","code":"g <- make_ring(10) distances(g) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    1    2    3    4    5    4    3    2     1 #>  [2,]    1    0    1    2    3    4    5    4    3     2 #>  [3,]    2    1    0    1    2    3    4    5    4     3 #>  [4,]    3    2    1    0    1    2    3    4    5     4 #>  [5,]    4    3    2    1    0    1    2    3    4     5 #>  [6,]    5    4    3    2    1    0    1    2    3     4 #>  [7,]    4    5    4    3    2    1    0    1    2     3 #>  [8,]    3    4    5    4    3    2    1    0    1     2 #>  [9,]    2    3    4    5    4    3    2    1    0     1 #> [10,]    1    2    3    4    5    4    3    2    1     0 shortest_paths(g, 5) #> $vpath #> $vpath[[1]] #> + 5/10 vertices, from 13220d5: #> [1] 5 4 3 2 1 #>  #> $vpath[[2]] #> + 4/10 vertices, from 13220d5: #> [1] 5 4 3 2 #>  #> $vpath[[3]] #> + 3/10 vertices, from 13220d5: #> [1] 5 4 3 #>  #> $vpath[[4]] #> + 2/10 vertices, from 13220d5: #> [1] 5 4 #>  #> $vpath[[5]] #> + 1/10 vertex, from 13220d5: #> [1] 5 #>  #> $vpath[[6]] #> + 2/10 vertices, from 13220d5: #> [1] 5 6 #>  #> $vpath[[7]] #> + 3/10 vertices, from 13220d5: #> [1] 5 6 7 #>  #> $vpath[[8]] #> + 4/10 vertices, from 13220d5: #> [1] 5 6 7 8 #>  #> $vpath[[9]] #> + 5/10 vertices, from 13220d5: #> [1] 5 6 7 8 9 #>  #> $vpath[[10]] #> + 6/10 vertices, from 13220d5: #> [1]  5  4  3  2  1 10 #>  #>  #> $epath #> NULL #>  #> $predecessors #> NULL #>  #> $inbound_edges #> NULL #>  all_shortest_paths(g, 1, 6:8) #> $res #> $res[[1]] #> + 6/10 vertices, from 13220d5: #> [1]  1 10  9  8  7  6 #>  #> $res[[2]] #> + 6/10 vertices, from 13220d5: #> [1] 1 2 3 4 5 6 #>  #> $res[[3]] #> + 5/10 vertices, from 13220d5: #> [1]  1 10  9  8  7 #>  #> $res[[4]] #> + 4/10 vertices, from 13220d5: #> [1]  1 10  9  8 #>  #>  #> $nrgeo #>  [1] 1 1 1 1 1 2 1 1 1 1 #>  mean_distance(g) #> [1] 2.777778 ## Weighted shortest paths el <- matrix(   ncol = 3, byrow = TRUE,   c(     1, 2, 0,     1, 3, 2,     1, 4, 1,     2, 3, 0,     2, 5, 5,     2, 6, 2,     3, 2, 1,     3, 4, 1,     3, 7, 1,     4, 3, 0,     4, 7, 2,     5, 6, 2,     5, 8, 8,     6, 3, 2,     6, 7, 1,     6, 9, 1,     6, 10, 3,     8, 6, 1,     8, 9, 1,     9, 10, 4   ) ) g2 <- add_edges(make_empty_graph(10), t(el[, 1:2]), weight = el[, 3]) distances(g2, mode = \"out\") #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    1    5    2    1   13    3     5 #>  [2,]  Inf    0    0    1    5    2    1   13    3     5 #>  [3,]  Inf    1    0    1    6    3    1   14    4     6 #>  [4,]  Inf    1    0    0    6    3    1   14    4     6 #>  [5,]  Inf    5    4    5    0    2    3    8    3     5 #>  [6,]  Inf    3    2    3    8    0    1   16    1     3 #>  [7,]  Inf  Inf  Inf  Inf  Inf  Inf    0  Inf  Inf   Inf #>  [8,]  Inf    4    3    4    9    1    2    0    1     4 #>  [9,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf    0     4 #> [10,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf     0"},{"path":"/reference/diverging_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Diverging palette — diverging_pal","title":"Diverging palette — diverging_pal","text":"‘PuOr’ palette https://colorbrewer2.org/. eleven colors.","code":""},{"path":"/reference/diverging_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diverging palette — diverging_pal","text":"","code":"diverging_pal(n)"},{"path":"/reference/diverging_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diverging palette — diverging_pal","text":"n number colors palette. maximum eleven currently.","code":""},{"path":"/reference/diverging_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diverging palette — diverging_pal","text":"character vector RGB color codes.","code":""},{"path":"/reference/diverging_pal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diverging palette — diverging_pal","text":"similar sequential_pal(), also puts emphasis mid-range values, plus two extreme ends. Use palette, quantity mark vertex colors.","code":""},{"path":[]},{"path":"/reference/diverging_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diverging palette — diverging_pal","text":"","code":"library(igraphdata) data(foodwebs) fw <- foodwebs[[1]] %>%   induced_subgraph(V(.)[ECO == 1]) %>%   add_layout_(with_fr()) %>%   set_vertex_attr(\"label\", value = seq_len(gorder(.))) %>%   set_vertex_attr(\"size\", value = 10) %>%   set_edge_attr(\"arrow.size\", value = 0.3)  V(fw)$color <- scales::dscale(V(fw)$Biomass %>% cut(10), diverging_pal) plot(fw) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  data(karate) karate <- karate %>%   add_layout_(with_kk()) %>%   set_vertex_attr(\"size\", value = 10)  V(karate)$color <- scales::dscale(degree(karate) %>% cut(5), diverging_pal) plot(karate) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph diversity — diversity","title":"Graph diversity — diversity","text":"Calculates measure diversity vertices.","code":""},{"path":"/reference/diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph diversity — diversity","text":"","code":"diversity(graph, weights = NULL, vids = V(graph))"},{"path":"/reference/diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph diversity — diversity","text":"graph input graph. Edge directions ignored. weights NULL, vector edge weights use computation. NULL, ‘weight’ attibute used. Note measure defined unweighted graphs. vids vertex ids calculate measure.","code":""},{"path":"/reference/diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph diversity — diversity","text":"numeric vector, length number vertices.","code":""},{"path":"/reference/diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph diversity — diversity","text":"diversity vertex defined (scaled) Shannon entropy weights incident edges: $$D()=\\frac{H()}{\\log k_i}$$ $$H()=-\\sum_{j=1}^{k_i} p_{ij}\\log p_{ij},$$ $$p_{ij}=\\frac{w_{ij}}{\\sum_{l=1}^{k_i}}V_{il},$$ \\(k_i\\) (total) degree vertex \\(\\), \\(w_{ij}\\) weight edge(s) vertices \\(\\) \\(j\\). vertices degree less two function returns NaN.","code":""},{"path":"/reference/diversity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Graph diversity — diversity","text":"Nathan Eagle, Michael Macy Rob Claxton: Network Diversity Economic Development, Science 328, 1029--1031, 2010.","code":""},{"path":[]},{"path":"/reference/diversity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph diversity — diversity","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph diversity — diversity","text":"","code":"g1 <- sample_gnp(20, 2 / 20) g2 <- sample_gnp(20, 2 / 20) g3 <- sample_gnp(20, 5 / 20) E(g1)$weight <- 1 E(g2)$weight <- runif(ecount(g2)) E(g3)$weight <- runif(ecount(g3)) diversity(g1) #>  [1] NaN NaN   1   0   1 NaN   0   1   1   1 NaN   0   0   0   1   0 NaN   1   0 #> [20]   0 diversity(g2) #>  [1] 0.8919084 0.7159881 0.7156520 0.7339904 0.7812073 0.9904457 0.9519929 #>  [8] 0.7809504 0.7886627       NaN       NaN 0.9998514 0.7189212 0.9980711 #> [15] 0.8955019 0.8454865 0.7289966 0.9179547 0.0000000 0.9987394 diversity(g3) #>  [1] 0.9752332 0.9624751 0.9666688 0.9055578 0.9326814 0.9555206 0.8381534 #>  [8] 0.8964948 0.8541865 0.9572629 0.9568683 0.9999942 0.8670179 0.9892606 #> [15] 0.8281073 0.9861651 0.9371715 0.9249891 0.9012561       NaN"},{"path":"/reference/dominator_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Dominator tree — dominator_tree","title":"Dominator tree — dominator_tree","text":"Dominator tree directed graph.","code":""},{"path":"/reference/dominator_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dominator tree — dominator_tree","text":"","code":"dominator_tree(graph, root, mode = c(\"out\", \"in\", \"all\", \"total\"))"},{"path":"/reference/dominator_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dominator tree — dominator_tree","text":"graph directed graph. flowgraph, contains vertices reachable root vertex, vertices collected returned part result. root id root (source) vertex, root tree. mode Constant, must ‘’ ‘’. ‘’, directions considered opposite original one input graph.","code":""},{"path":"/reference/dominator_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dominator tree — dominator_tree","text":"list components: dom numeric vector giving immediate dominators vertex. vertices unreachable root, contains NaN. root vertex contains minus one. domtree graph object, dominator tree. vertex ids vertex ids input graph. Isolate vertices ones unreachable root. leftout numeric vector containing vertex ids unreachable root.","code":""},{"path":"/reference/dominator_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dominator tree — dominator_tree","text":"flowgraph directed graph distinguished start (root) vertex \\(r\\), vertex \\(v\\), path \\(r\\) \\(v\\). vertex \\(v\\) dominates another vertex \\(w\\) (equal \\(v\\)), every path \\(r\\) \\(w\\) contains \\(v\\). Vertex \\(v\\) immediate dominator \\(w\\), \\(v=\\textrm{idom}(w)\\), \\(v\\) dominates \\(w\\) every dominator \\(w\\) dominates \\(v\\). edges \\({(\\textrm{idom}(w), w)| w \\ne r}\\) form directed tree, rooted \\(r\\), called dominator tree graph. Vertex \\(v\\) dominates vertex \\(w\\) \\(v\\) ancestor \\(w\\) dominator tree. function implements Lengauer-Tarjan algorithm construct dominator tree directed graph. details see reference .","code":""},{"path":"/reference/dominator_tree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dominator tree — dominator_tree","text":"Thomas Lengauer, Robert Endre Tarjan: fast algorithm finding dominators flowgraph, ACM Transactions Programming Languages Systems (TOPLAS) /1, 121--141, 1979.","code":""},{"path":[]},{"path":"/reference/dominator_tree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dominator tree — dominator_tree","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/dominator_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dominator tree — dominator_tree","text":"","code":"## The example from the paper g <- graph_from_literal(   R -+ A:B:C, A -+ D, B -+ A:D:E, C -+ F:G, D -+ L,   E -+ H, F -+ I, G -+ I:J, H -+ E:K, I -+ K, J -+ I,   K -+ I:R, L -+ H ) dtree <- dominator_tree(g, root = \"R\") layout <- layout_as_tree(dtree$domtree, root = \"R\") layout[, 2] <- -layout[, 2] plot(dtree$domtree, layout = layout, vertex.label = V(dtree$domtree)$name) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/dot-apply_modifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies a set of constructor modifiers to an already constructed graph. — .apply_modifiers","title":"Applies a set of constructor modifiers to an already constructed graph. — .apply_modifiers","text":"helper function common parts make_() sample_().","code":""},{"path":"/reference/dot-apply_modifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies a set of constructor modifiers to an already constructed graph. — .apply_modifiers","text":"","code":".apply_modifiers(graph, mods)"},{"path":"/reference/dot-apply_modifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies a set of constructor modifiers to an already constructed graph. — .apply_modifiers","text":"graph graph apply modifiers mods modifiers apply","code":""},{"path":"/reference/dot-apply_modifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies a set of constructor modifiers to an already constructed graph. — .apply_modifiers","text":"modified graph","code":""},{"path":"/reference/dot-data.html","id":null,"dir":"Reference","previous_headings":"","what":".data and .env pronouns — dot-data","title":".data and .env pronouns — dot-data","text":".data .env pronouns make explicit look attribute names indexing V(g) E(g), .e. vertex edge sequence graph. pronouns inspired .data .env rlang - thanks Michał Bojanowski bringing attention. rules simple: .data retrieves attributes graph whose vertex edge sequence evaluated. .env retrieves variables calling environment. Note .data .env injected dynamically environment indexing expressions evaluated; get access objects outside context indexing expression. avoid warnings printed R CMD check code containing .data .env checked, can import .data .env igraph needed. Alternatively, can declare explicitly utils::globalVariables() silence warnings.","code":""},{"path":"/reference/dot-extract_constructor_and_modifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes an argument list and extracts the constructor specification and\nconstructor modifiers from it. — .extract_constructor_and_modifiers","title":"Takes an argument list and extracts the constructor specification and\nconstructor modifiers from it. — .extract_constructor_and_modifiers","text":"helper function common parts make_() sample_().","code":""},{"path":"/reference/dot-extract_constructor_and_modifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes an argument list and extracts the constructor specification and\nconstructor modifiers from it. — .extract_constructor_and_modifiers","text":"","code":".extract_constructor_and_modifiers(..., .operation, .variant)"},{"path":"/reference/dot-extract_constructor_and_modifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes an argument list and extracts the constructor specification and\nconstructor modifiers from it. — .extract_constructor_and_modifiers","text":"... Parameters extract .operation Human-readable description operation helper part .variant Constructor variant; must one ‘make’, ‘graph’ ‘sample’. Used cases constructor specification deterministic random variants.","code":""},{"path":"/reference/dot-extract_constructor_and_modifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes an argument list and extracts the constructor specification and\nconstructor modifiers from it. — .extract_constructor_and_modifiers","text":"named list three items: ‘cons’ constructor function, ‘mods’ modifiers ‘args’ remaining, unparsed arguments.","code":""},{"path":"/reference/dyad_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Dyad census of a graph — dyad_census","title":"Dyad census of a graph — dyad_census","text":"Classify dyads directed graphs. relationship pair vertices measured. can three states: mutual, asymmetric non-existent.","code":""},{"path":"/reference/dyad_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dyad census of a graph — dyad_census","text":"","code":"dyad_census(graph)"},{"path":"/reference/dyad_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dyad census of a graph — dyad_census","text":"graph input graph. warning given directed.","code":""},{"path":"/reference/dyad_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dyad census of a graph — dyad_census","text":"named numeric vector three elements: mut number pairs mutual connections. asym number pairs non-mutual connections. null number pairs connection .","code":""},{"path":"/reference/dyad_census.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dyad census of a graph — dyad_census","text":"Holland, P.W. Leinhardt, S. Method Detecting Structure Sociometric Data. American Journal Sociology, 76, 492--513. 1970. Wasserman, S., Faust, K. Social Network Analysis: Methods Applications. Cambridge: Cambridge University Press. 1994.","code":""},{"path":[]},{"path":"/reference/dyad_census.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dyad census of a graph — dyad_census","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/dyad_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dyad census of a graph — dyad_census","text":"","code":"g <- sample_pa(100) dyad_census(g) #> $mut #> [1] 0 #>  #> $asym #> [1] 99 #>  #> $null #> [1] 4851 #>"},{"path":"/reference/each_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Rewires the endpoints of the edges of a graph to a random vertex — each_edge","title":"Rewires the endpoints of the edges of a graph to a random vertex — each_edge","text":"function can used together rewire(). method rewires endpoints edges constant probability uniformly randomly new vertex graph.","code":""},{"path":"/reference/each_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rewires the endpoints of the edges of a graph to a random vertex — each_edge","text":"","code":"each_edge(   prob,   loops = FALSE,   multiple = FALSE,   mode = c(\"all\", \"out\", \"in\", \"total\") )"},{"path":"/reference/each_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rewires the endpoints of the edges of a graph to a random vertex — each_edge","text":"prob rewiring probability, real number zero one. loops Logical scalar, whether loop edges allowed rewired graph. multiple Logical scalar, whether multiple edges allowed generated graph. mode Character string, specifies endpoint edges rewire directed graphs. ‘’ rewires endpoints, ‘’ rewires start (tail) directed edge, ‘’ rewires end (head) directed edge. Ignored undirected graphs.","code":""},{"path":"/reference/each_edge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rewires the endpoints of the edges of a graph to a random vertex — each_edge","text":"Note method might create graphs multiple /loop edges.","code":""},{"path":[]},{"path":"/reference/each_edge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rewires the endpoints of the edges of a graph to a random vertex — each_edge","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/each_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rewires the endpoints of the edges of a graph to a random vertex — each_edge","text":"","code":"# Some random shortcuts shorten the distances on a lattice g <- make_lattice(length = 100, dim = 1, nei = 5) mean_distance(g) #> [1] 7.141414 g <- rewire(g, each_edge(prob = 0.05)) mean_distance(g) #> [1] 2.802828  # Rewiring the start of each directed edge preserves the in-degree distribution # but not the out-degree distribution g <- barabasi.game(1000) g2 <- g %>% rewire(each_edge(mode = \"in\", multiple = TRUE, prob = 0.2)) degree(g, mode = \"in\") == degree(g2, mode = \"in},{"path":"/reference/eccentricity.html","id":null,"dir":"Reference","previous_headings":"","what":"Eccentricity of the vertices in a graph — eccentricity","title":"Eccentricity of the vertices in a graph — eccentricity","text":"eccentricity vertex shortest path distance farthest node graph.","code":""},{"path":"/reference/eccentricity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eccentricity of the vertices in a graph — eccentricity","text":"","code":"eccentricity(graph, vids = V(graph), mode = c(\"all\", \"out\", \"in\", \"total\"))"},{"path":"/reference/eccentricity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eccentricity of the vertices in a graph — eccentricity","text":"graph input graph, can directed undirected. vids vertices eccentricity calculated. mode Character constant, gives whether shortest paths given vertices calculated directed graphs. shortest paths vertex, considered. , default, corresponding undirected graph used, edge directions ignored. argument ignored undirected graphs.","code":""},{"path":"/reference/eccentricity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eccentricity of the vertices in a graph — eccentricity","text":"eccentricity() returns numeric vector, containing eccentricity score given vertex.","code":""},{"path":"/reference/eccentricity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Eccentricity of the vertices in a graph — eccentricity","text":"eccentricity vertex calculated measuring shortest distance () vertex, () vertices graph, taking maximum. implementation ignores vertex pairs different components. Isolate vertices eccentricity zero.","code":""},{"path":"/reference/eccentricity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Eccentricity of the vertices in a graph — eccentricity","text":"Harary, F. Graph Theory. Reading, MA: Addison-Wesley, p. 35, 1994.","code":""},{"path":[]},{"path":"/reference/eccentricity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eccentricity of the vertices in a graph — eccentricity","text":"","code":"g <- make_star(10, mode = \"undirected\") eccentricity(g) #>  [1] 1 2 2 2 2 2 2 2 2 2"},{"path":"/reference/edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for adding and deleting edges — edge","title":"Helper function for adding and deleting edges — edge","text":"helper function simplifies adding deleting edges /graphs.","code":""},{"path":"/reference/edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for adding and deleting edges — edge","text":"","code":"edge(...)  edges(...)"},{"path":"/reference/edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for adding and deleting edges — edge","text":"... See details .","code":""},{"path":"/reference/edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for adding and deleting edges — edge","text":"special object can used together igraph graphs plus minus operators.","code":""},{"path":"/reference/edge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function for adding and deleting edges — edge","text":"edges() alias edge(). adding edges via +, unnamed arguments edge() (edges()) concatenated, passed add_edges(). interpreted pairs vertex ids, edge added pair. Named arguments used edge attributes new edges. deleting edges via -, arguments edge() (edges()) concatenated via c() passed delete_edges().","code":""},{"path":[]},{"path":"/reference/edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for adding and deleting edges — edge","text":"","code":"g <- make_ring(10) %>%   set_edge_attr(\"color\", value = \"red\")  g <- g + edge(1, 5, color = \"green\") +   edge(2, 6, color = \"blue\") -   edge(\"8|9\")  E(g)[[]] #> + 11/11 edges from a882f5d: #>    tail head tid hid color #> 1     1    2   1   2   red #> 2     2    3   2   3   red #> 3     3    4   3   4   red #> 4     4    5   4   5   red #> 5     5    6   5   6   red #> 6     6    7   6   7   red #> 7     7    8   7   8   red #> 8     9   10   9  10   red #> 9     1   10   1  10   red #> 10    1    5   1   5 green #> 11    2    6   2   6  blue  g %>%   add_layout_(in_circle()) %>%   plot() #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g <- make_ring(10) + edges(1:10) plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/edge_attr-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set one or more edge attributes — edge_attr<-","title":"Set one or more edge attributes — edge_attr<-","text":"Set one edge attributes","code":""},{"path":"/reference/edge_attr-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set one or more edge attributes — edge_attr<-","text":"","code":"edge_attr(graph, name, index = E(graph)) <- value"},{"path":"/reference/edge_attr-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set one or more edge attributes — edge_attr<-","text":"graph graph. name name edge attribute set. missing, value must named list, entries set edge attributes. index optional edge sequence set attributes subset edges. value new value attribute(s) (index) edges.","code":""},{"path":"/reference/edge_attr-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set one or more edge attributes — edge_attr<-","text":"graph, edge attribute(s) added set.","code":""},{"path":[]},{"path":"/reference/edge_attr-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set one or more edge attributes — edge_attr<-","text":"","code":"g <- make_ring(10) edge_attr(g) <- list(   name = LETTERS[1:10],   color = rep(\"green\", gsize(g)) ) edge_attr(g, \"label\") <- E(g)$name g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$name #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #> [[9]][[4]]$color #>  [1] \"green\" \"green\" \"green\" \"green\" \"green\" \"green\" \"green\" \"green\" \"green\" #> [10] \"green\" #>  #> [[9]][[4]]$label #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #>  #>  #> [[10]] #> <environment: 0x564cbd1a6ec0> #>  #> attr(,\"class\") #> [1] \"igraph\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/edge_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Query edge attributes of a graph — edge_attr","title":"Query edge attributes of a graph — edge_attr","text":"Query edge attributes graph","code":""},{"path":"/reference/edge_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query edge attributes of a graph — edge_attr","text":"","code":"edge_attr(graph, name, index = E(graph))"},{"path":"/reference/edge_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query edge attributes of a graph — edge_attr","text":"graph graph name name attribute query. missing, edge attributes returned list. index optional edge sequence query edge attributes subset edges.","code":""},{"path":"/reference/edge_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query edge attributes of a graph — edge_attr","text":"value edge attribute, list edge attributes name missing.","code":""},{"path":[]},{"path":"/reference/edge_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query edge attributes of a graph — edge_attr","text":"","code":"g <- make_ring(10) %>%   set_edge_attr(\"weight\", value = 1:10) %>%   set_edge_attr(\"color\", value = \"red\") g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$weight #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> [[9]][[4]]$color #>  [1] \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" #>  #>  #>  #> [[10]] #> <environment: 0x564cb62ba7d0> #>  #> attr(,\"class\") #> [1] \"igraph\" plot(g, edge.width = E(g)$weight) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/edge_attr_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List names of edge attributes — edge_attr_names","title":"List names of edge attributes — edge_attr_names","text":"List names edge attributes","code":""},{"path":"/reference/edge_attr_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List names of edge attributes — edge_attr_names","text":"","code":"edge_attr_names(graph)"},{"path":"/reference/edge_attr_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List names of edge attributes — edge_attr_names","text":"graph graph.","code":""},{"path":"/reference/edge_attr_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List names of edge attributes — edge_attr_names","text":"Character vector, names edge attributes.","code":""},{"path":[]},{"path":"/reference/edge_attr_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List names of edge attributes — edge_attr_names","text":"","code":"g <- make_ring(10) %>%   set_edge_attr(\"label\", value = letters[1:10]) edge_attr_names(g) #> [1] \"label\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/edge_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge connectivity. — edge_connectivity","title":"Edge connectivity. — edge_connectivity","text":"edge connectivity graph two vertices, recently also called group adhesion.","code":""},{"path":"/reference/edge_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge connectivity. — edge_connectivity","text":"","code":"edge_connectivity(graph, source = NULL, target = NULL, checks = TRUE)"},{"path":"/reference/edge_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge connectivity. — edge_connectivity","text":"graph input graph. source id source vertex, edge_connectivity() can NULL, see details . target id target vertex, edge_connectivity() can NULL, see details . checks Logical constant. Whether check graph connected also degree vertices. graph (strongly) connected connectivity obviously zero. Otherwise minimum degree one edge connectivity also one. good idea perform checks, can done quickly compared connectivity calculation .  suggested Peter McMahan, thanks Peter.","code":""},{"path":"/reference/edge_connectivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge connectivity. — edge_connectivity","text":"scalar real value.","code":""},{"path":"/reference/edge_connectivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edge connectivity. — edge_connectivity","text":"edge connectivity pair vertices (source target) minimum number edges needed remove eliminate (directed) paths source target. edge_connectivity() calculates quantity source target arguments given (NULL). edge connectivity graph minimum edge connectivity every (ordered) pair vertices graph.  edge_connectivity() calculates quantity neither source target arguments given (ie. NULL). set edge disjoint paths two vertices set paths containing common edges. maximum number edge disjoint paths two vertices edge connectivity. adhesion graph minimum number edges needed remove obtain graph strongly connected. edge connectivity graph. three functions documented page calculate similar properties, precisely general edge_connectivity(), others included descriptive function names.","code":""},{"path":"/reference/edge_connectivity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Edge connectivity. — edge_connectivity","text":"Douglas R. White Frank Harary: cohesiveness blocks social networks: node connectivity conditional density, TODO: citation","code":""},{"path":[]},{"path":"/reference/edge_connectivity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Edge connectivity. — edge_connectivity","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/edge_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edge connectivity. — edge_connectivity","text":"","code":"g <- barabasi.game(100, m = 1) g2 <- barabasi.game(100, m = 5) edge_connectivity(g, 100, 1) #> [1] 1 edge_connectivity(g2, 100, 1) #> [1] 5 edge_disjoint_paths(g2, 100, 1) #> [1] 5  g <- sample_gnp(50, 5 / 50) g <- as.directed(g) g <- induced_subgraph(g, subcomponent(g, 1)) adhesion(g) #> [1] 1"},{"path":"/reference/edge_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph density — edge_density","title":"Graph density — edge_density","text":"density graph ratio actual number edges largest possible number edges graph, assuming multi-edges present.","code":""},{"path":"/reference/edge_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph density — edge_density","text":"","code":"edge_density(graph, loops = FALSE)"},{"path":"/reference/edge_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph density — edge_density","text":"graph input graph. loops Logical constant, whether loop edges may exist graph. affects calculation largest possible number edges graph. parameter set FALSE yet graph contains self-loops, result meaningful.","code":""},{"path":"/reference/edge_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph density — edge_density","text":"real constant. function returns NaN (=0.0/0.0) empty graph zero vertices.","code":""},{"path":"/reference/edge_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph density — edge_density","text":"concept density ill-defined multigraphs. Note function check whether graph multi-edges return meaningless results graphs.","code":""},{"path":"/reference/edge_density.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Graph density — edge_density","text":"Wasserman, S., Faust, K.  (1994).  Social Network Analysis: Methods Applications.  Cambridge: Cambridge University Press.","code":""},{"path":[]},{"path":"/reference/edge_density.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph density — edge_density","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/edge_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph density — edge_density","text":"","code":"g1 <- make_empty_graph(n = 10) g2 <- make_full_graph(n = 10) g3 <- sample_gnp(n = 10, 0.4)  # loop edges g <- graph(c(1, 2, 2, 2, 2, 3)) # graph with a self-loop edge_density(g, loops = FALSE) # this is wrong!!! #> [1] 0.5 edge_density(g, loops = TRUE) # this is right!!! #> [1] 0.3333333 edge_density(simplify(g), loops = FALSE) # this is also right, but different #> [1] 0.3333333"},{"path":"/reference/ego.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighborhood of graph vertices — connect","title":"Neighborhood of graph vertices — connect","text":"functions find vertices farther given limit another fixed vertex, called neighborhood vertex.","code":""},{"path":"/reference/ego.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighborhood of graph vertices — connect","text":"","code":"connect(graph, order, mode = c(\"all\", \"out\", \"in\", \"total\"))  ego_size(   graph,   order = 1,   nodes = V(graph),   mode = c(\"all\", \"out\", \"in\"),   mindist = 0 )  ego(   graph,   order = 1,   nodes = V(graph),   mode = c(\"all\", \"out\", \"in\"),   mindist = 0 )  make_ego_graph(   graph,   order = 1,   nodes = V(graph),   mode = c(\"all\", \"out\", \"in\"),   mindist = 0 )"},{"path":"/reference/ego.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighborhood of graph vertices — connect","text":"graph input graph. order Integer giving order neighborhood. mode Character constant, specifies use direction edges directed graph analyzed. ‘’ outgoing edges followed, vertices reachable source vertex order steps counted. ‘\"\"’ vertices source vertex reachable order steps counted. ‘\"\"’ ignores direction edges. argument ignored undirected graphs. nodes vertices calculation performed. mindist minimum distance include vertex result.","code":""},{"path":"/reference/ego.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighborhood of graph vertices — connect","text":"ego_size() returns integer vector. ego() returns list igraph.vs list numeric vectors depending value igraph_opt(\"return.vs.es\"), see details performance characteristics. make_ego_graph() returns list graphs. connect() returns new graph object.","code":""},{"path":"/reference/ego.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Neighborhood of graph vertices — connect","text":"neighborhood given order o vertex v includes vertices closer v order. Ie. order 0 always v , order 1 v plus immediate neighbors, order 2 order 1 plus immediate neighbors vertices order 1, etc. ego_size() calculates size neighborhoods given vertices given order. ego() calculates neighborhoods given vertices given order parameter. make_ego_graph() creates (sub)graphs neighborhoods given vertices given order parameter. function preserves vertex, edge graph attributes. connect() creates new graph connecting vertex vertices neighborhood.","code":""},{"path":[]},{"path":"/reference/ego.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Neighborhood of graph vertices — connect","text":"Gabor Csardi csardi.gabor@gmail.com, first version done Vincent Matossian","code":""},{"path":"/reference/ego.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighborhood of graph vertices — connect","text":"","code":"g <- make_ring(10) ego_size(g, order = 0, 1:3) #> [1] 1 1 1 ego_size(g, order = 1, 1:3) #> [1] 3 3 3 ego_size(g, order = 2, 1:3) #> [1] 5 5 5 ego(g, order = 0, 1:3) #> [[1]] #> + 1/10 vertex, from 22d7bba: #> [1] 1 #>  #> [[2]] #> + 1/10 vertex, from 22d7bba: #> [1] 2 #>  #> [[3]] #> + 1/10 vertex, from 22d7bba: #> [1] 3 #>  ego(g, order = 1, 1:3) #> [[1]] #> + 3/10 vertices, from 22d7bba: #> [1]  1  2 10 #>  #> [[2]] #> + 3/10 vertices, from 22d7bba: #> [1] 2 1 3 #>  #> [[3]] #> + 3/10 vertices, from 22d7bba: #> [1] 3 2 4 #>  ego(g, order = 2, 1:3) #> [[1]] #> + 5/10 vertices, from 22d7bba: #> [1]  1  2 10  3  9 #>  #> [[2]] #> + 5/10 vertices, from 22d7bba: #> [1]  2  1  3 10  4 #>  #> [[3]] #> + 5/10 vertices, from 22d7bba: #> [1] 3 2 4 1 5 #>   # attributes are preserved V(g)$name <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\") make_ego_graph(g, order = 2, 1:3) #> [[1]] #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 4 4 #>  #> [[4]] #> [1] 0 1 0 3 #>  #> [[5]] #> [1] 0 1 2 3 #>  #> [[6]] #> [1] 0 2 1 3 #>  #> [[7]] #> [1] 0 0 1 2 2 4 #>  #> [[8]] #> [1] 0 2 3 3 4 4 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"a\" \"b\" \"c\" \"i\" \"j\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf0a2660> #>  #> attr(,\"class\") #> [1] \"igraph\" #>  #> [[2]] #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 4 #>  #> [[4]] #> [1] 0 1 2 0 #>  #> [[5]] #> [1] 0 1 2 3 #>  #> [[6]] #> [1] 0 3 1 2 #>  #> [[7]] #> [1] 0 0 1 2 3 4 #>  #> [[8]] #> [1] 0 2 3 4 4 4 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 3 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"a\" \"b\" \"c\" \"d\" \"j\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf0a2580> #>  #> attr(,\"class\") #> [1] \"igraph\" #>  #> [[3]] #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 4 #>  #> [[4]] #> [1] 0 1 2 3 #>  #> [[5]] #> [1] 0 1 2 3 #>  #> [[6]] #> [1] 0 1 2 3 #>  #> [[7]] #> [1] 0 0 1 2 3 4 #>  #> [[8]] #> [1] 0 1 2 3 4 4 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 5 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf0a24a0> #>  #> attr(,\"class\") #> [1] \"igraph\" #>   # connecting to the neighborhood g <- make_ring(10) g <- connect(g, 2)"},{"path":"/reference/eigen_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","title":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","text":"eigen_centrality() takes graph (graph) returns eigenvector centralities positions v within ","code":""},{"path":"/reference/eigen_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","text":"","code":"eigen_centrality(   graph,   directed = FALSE,   scale = TRUE,   weights = NULL,   options = arpack_defaults )"},{"path":"/reference/eigen_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","text":"graph Graph analyzed. directed Logical scalar, whether consider direction edges directed graphs. ignored undirected graphs. scale Logical scalar, whether scale result maximum score one. scaling used result vector unit length Euclidean norm. weights numerical vector NULL. argument can used give edge weights calculating weighted eigenvector centrality vertices. NULL graph weight edge attribute used. weights numerical vector used, even graph weight edge attribute. NA, edge weights used (even graph weight edge attribute. Note negative edge weights direction edges considered, eigenvector might complex. case real part reported. function interprets weights connection strength. Higher weights spread centrality better. options named list, override ARPACK options. See arpack() details.","code":""},{"path":"/reference/eigen_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","text":"named list components: vector vector containing centrality scores. value eigenvalue corresponding calculated eigenvector, .e. centrality scores. options named list, information underlying ARPACK computation. See arpack() details.","code":""},{"path":"/reference/eigen_centrality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","text":"Eigenvector centrality scores correspond values first eigenvector graph adjacency matrix; scores may, turn, interpreted arising reciprocal process centrality actor proportional sum centralities actors connected.  general, vertices high eigenvector centralities connected many vertices , turn, connected many others ().  (perceptive may realize implies largest values obtained individuals large cliques (high-density substructures).  also intelligible algebraic point view, first eigenvector closely related best rank-1 approximation adjacency matrix (relationship easy see special case diagonalizable symmetric real matrix via \\(SLS^-1\\) decomposition).) adjacency matrix used eigenvector centrality calculation assumes loop edges counted twice; loop edge two endpoints connected vertex, traverse loop edge via either endpoint. directed case, left eigenvector adjacency matrix calculated. words, centrality vertex proportional sum centralities vertices pointing . Eigenvector centrality meaningful connected graphs. Graphs connected decomposed connected components, eigenvector centrality calculated separately. function verify graph connected. , undirected case scores one component zeros. Also note adjacency matrix directed acyclic graph adjacency matrix empty graph possess positive eigenvalues, therefore eigenvector centrality defined graphs. igraph return eigenvalue zero cases. eigenvector centralities equal empty graph zeros directed acyclic graph. pathological cases can detected checking whether eigenvalue close zero. igraph version 0.5 function uses ARPACK underlying computation, see arpack() ARPACK igraph.","code":""},{"path":"/reference/eigen_centrality.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","text":"Bonacich, P.  (1987).  Power Centrality: Family Measures. American Journal Sociology, 92, 1170-1182.","code":""},{"path":[]},{"path":"/reference/eigen_centrality.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","text":"Gabor Csardi csardi.gabor@gmail.com Carter T. Butts (http://www.faculty.uci.edu/profile.cfm?faculty_id=5057) manual page.","code":""},{"path":"/reference/eigen_centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Eigenvector Centrality Scores of Network Positions — eigen_centrality","text":"","code":"# Generate some test data g <- make_ring(10, directed = FALSE) # Compute eigenvector centrality scores eigen_centrality(g) #> $vector #>  [1] 1 1 1 1 1 1 1 1 1 1 #>  #> $value #> [1] 2 #>  #> $options #> $options$bmat #> [1] \"I\" #>  #> $options$n #> [1] 10 #>  #> $options$which #> [1] \"LA\" #>  #> $options$nev #> [1] 1 #>  #> $options$tol #> [1] 0 #>  #> $options$ncv #> [1] 0 #>  #> $options$ldv #> [1] 0 #>  #> $options$ishift #> [1] 1 #>  #> $options$maxiter #> [1] 3000 #>  #> $options$nb #> [1] 1 #>  #> $options$mode #> [1] 1 #>  #> $options$start #> [1] 1 #>  #> $options$sigma #> [1] 0 #>  #> $options$sigmai #> [1] 0 #>  #> $options$info #> [1] 0 #>  #> $options$iter #> [1] 7 #>  #> $options$nconv #> [1] 1 #>  #> $options$numop #> [1] 23 #>  #> $options$numopb #> [1] 0 #>  #> $options$numreo #> [1] 18 #>  #>"},{"path":"/reference/embed_adjacency_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral Embedding of Adjacency Matrices — embed_adjacency_matrix","title":"Spectral Embedding of Adjacency Matrices — embed_adjacency_matrix","text":"Spectral decomposition adjacency matrices graphs.","code":""},{"path":"/reference/embed_adjacency_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectral Embedding of Adjacency Matrices — embed_adjacency_matrix","text":"","code":"embed_adjacency_matrix(   graph,   no,   weights = NULL,   which = c(\"lm\", \"la\", \"sa\"),   scaled = TRUE,   cvec = graph.strength(graph, weights = weights)/(vcount(graph) - 1),   options = igraph.arpack.default )"},{"path":"/reference/embed_adjacency_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectral Embedding of Adjacency Matrices — embed_adjacency_matrix","text":"graph input graph, directed undirected. integer scalar. value embedding dimension spectral embedding. smaller number vertices. largest -dimensional non-zero singular values used spectral embedding. weights Optional positive weight vector calculating weighted embedding. graph weight edge attribute, used default. weighted embedding, edge weights used instead binary adjacencny matrix. eigenvalues (singular values, directed graphs) use. ‘lm’ means ones largest magnitude, ‘la’ ones (algebraic) largest, ‘sa’ (algebraic) smallest eigenvalues. default ‘lm’. Note directed graphs ‘la’ ‘lm’ equivalent, singular values used ordering. scaled Logical scalar, FALSE, \\(U\\) \\(V\\) returned instead \\(X\\) \\(Y\\). cvec numeric vector, length number vertices graph. vector added diagonal adjacency matrix. options named list containing parameters SVD computation algorithm ARPACK. default, list values assigned values given igraph.arpack.default.","code":""},{"path":"/reference/embed_adjacency_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectral Embedding of Adjacency Matrices — embed_adjacency_matrix","text":"list containing entries: X Estimated latent positions, n times matrix, n number vertices. Y NULL undirected graphs, second half latent positions directed graphs, n times matrix, n number vertices. D eigenvalues (undirected graphs) singular values (directed graphs) calculated algorithm. options named list, information underlying ARPACK computation. See arpack() details.","code":""},{"path":"/reference/embed_adjacency_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spectral Embedding of Adjacency Matrices — embed_adjacency_matrix","text":"function computes -dimensional Euclidean representation graph based adjacency matrix, \\(\\). representation computed via singular value decomposition adjacency matrix, \\(=UDV^T\\).case, graph random dot product graph generated using latent position vectors \\(R^{}\\) vertex, embedding provide estimate latent vectors. undirected graphs latent positions calculated \\(X=U^{}D^{1/2}\\), \\(U^{}\\) equals first columns \\(U\\), \\(D^{1/2}\\) diagonal matrix containing top singular values diagonal. directed graphs embedding defined pair \\(X=U^{}D^{1/2}\\) \\(Y=V^{}D^{1/2}\\). (undirected graphs \\(U=V\\), enough keep one .)","code":""},{"path":"/reference/embed_adjacency_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spectral Embedding of Adjacency Matrices — embed_adjacency_matrix","text":"Sussman, D.L., Tang, M., Fishkind, D.E., Priebe, C.E.  Consistent Adjacency Spectral Embedding Stochastic Blockmodel Graphs, Journal American Statistical Association, Vol. 107(499), 2012","code":""},{"path":[]},{"path":"/reference/embed_adjacency_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectral Embedding of Adjacency Matrices — embed_adjacency_matrix","text":"","code":"## A small graph lpvs <- matrix(rnorm(200), 20, 10) lpvs <- apply(lpvs, 2, function(x) {   return(abs(x) / sqrt(sum(x^2))) }) RDP <- sample_dot_product(lpvs) embed <- embed_adjacency_matrix(RDP, 5)"},{"path":"/reference/embed_laplacian_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","title":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","text":"Spectral decomposition Laplacian matrices graphs.","code":""},{"path":"/reference/embed_laplacian_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","text":"","code":"embed_laplacian_matrix(   graph,   no,   weights = NULL,   which = c(\"lm\", \"la\", \"sa\"),   type = c(\"default\", \"D-A\", \"DAD\", \"I-DAD\", \"OAP\"),   scaled = TRUE,   options = igraph.arpack.default )"},{"path":"/reference/embed_laplacian_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","text":"graph input graph, directed undirected. integer scalar. value embedding dimension spectral embedding. smaller number vertices. largest -dimensional non-zero singular values used spectral embedding. weights Optional positive weight vector calculating weighted embedding. graph weight edge attribute, used default. weighted embedding, edge weights used instead binary adjacency matrix, vertex strength (see strength()) used instead degrees. eigenvalues (singular values, directed graphs) use. ‘lm’ means ones largest magnitude, ‘la’ ones (algebraic) largest, ‘sa’ (algebraic) smallest eigenvalues. default ‘lm’. Note directed graphs ‘la’ ‘lm’ equivalent, singular values used ordering. type type Laplacian use. Various definitions exist Laplacian graph, one can choose argument. Possible values: D-means \\(D-\\) \\(D\\) degree matrix \\(\\) adjacency matrix; DAD means \\(D^{1/2}\\) times \\(\\) times \\(D^{1/2}{D^1/2}\\), \\(D^{1/2}\\) inverse square root degree matrix; -DAD means \\(-D^{1/2}\\), \\(\\) identity matrix.  OAP \\(O^{1/2}AP^{1/2}\\), \\(O^{1/2}\\) inverse square root -degree matrix \\(P^{1/2}\\) -degree matrix. OAP defined undirected graphs, defined type directed graphs. default (.e. type default) use D-undirected graphs OAP directed graphs. scaled Logical scalar, FALSE, \\(U\\) \\(V\\) returned instead \\(X\\) \\(Y\\). options named list containing parameters SVD computation algorithm ARPACK. default, list values assigned values given igraph.arpack.default.","code":""},{"path":"/reference/embed_laplacian_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","text":"list containing entries: X Estimated latent positions, n times matrix, n number vertices. Y NULL undirected graphs, second half latent positions directed graphs, n times matrix, n number vertices. D eigenvalues (undirected graphs) singular values (directed graphs) calculated algorithm. options named list, information underlying ARPACK computation. See arpack() details.","code":""},{"path":"/reference/embed_laplacian_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","text":"function computes -dimensional Euclidean representation graph based Laplacian matrix, \\(L\\). representation computed via singular value decomposition Laplacian matrix. essentially embed_adjacency_matrix(), work Laplacian matrix, instead adjacency matrix.","code":""},{"path":"/reference/embed_laplacian_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","text":"Sussman, D.L., Tang, M., Fishkind, D.E., Priebe, C.E.  Consistent Adjacency Spectral Embedding Stochastic Blockmodel Graphs, Journal American Statistical Association, Vol. 107(499), 2012","code":""},{"path":[]},{"path":"/reference/embed_laplacian_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/embed_laplacian_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectral Embedding of the Laplacian of a Graph — embed_laplacian_matrix","text":"","code":"## A small graph lpvs <- matrix(rnorm(200), 20, 10) lpvs <- apply(lpvs, 2, function(x) {   return(abs(x) / sqrt(sum(x^2))) }) RDP <- sample_dot_product(lpvs) embed <- embed_laplacian_matrix(RDP, 5)"},{"path":"/reference/ends.html","id":null,"dir":"Reference","previous_headings":"","what":"Incident vertices of some graph edges — ends","title":"Incident vertices of some graph edges — ends","text":"Incident vertices graph edges","code":""},{"path":"/reference/ends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Incident vertices of some graph edges — ends","text":"","code":"ends(graph, es, names = TRUE)"},{"path":"/reference/ends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Incident vertices of some graph edges — ends","text":"graph input graph es sequence edges query names Whether return vertex names numeric vertex ids. default vertex names used.","code":""},{"path":"/reference/ends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Incident vertices of some graph edges — ends","text":"two column matrix vertex names vertex ids.","code":""},{"path":[]},{"path":"/reference/ends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Incident vertices of some graph edges — ends","text":"","code":"g <- make_ring(5) ends(g, E(g)) #>      [,1] [,2] #> [1,]    1    2 #> [2,]    2    3 #> [3,]    3    4 #> [4,]    4    5 #> [5,]    1    5"},{"path":"/reference/erdos.renyi.game.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"model simple, every possible edge created constant probability.","code":""},{"path":"/reference/erdos.renyi.game.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"","code":"erdos.renyi.game(   n,   p.or.m,   type = c(\"gnp\", \"gnm\"),   directed = FALSE,   loops = FALSE )"},{"path":"/reference/erdos.renyi.game.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"n number vertices graph. p..m Either probability drawing edge two arbitrary vertices (\\(G(n,p)\\) graph), number edges graph (\\(G(n,m)\\) graphs). type type random graph create, either gnp() (\\(G(n,p)\\) graph) gnm() (\\(G(n,m)\\) graph). directed Logical, whether graph directed, defaults FALSE. loops Logical, whether add loop edges, defaults FALSE.","code":""},{"path":"/reference/erdos.renyi.game.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"graph object.","code":""},{"path":"/reference/erdos.renyi.game.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"\\(G(n,p)\\) graphs, graph ‘n’ vertices edge probability present graph ‘p’. \\(G(n,m)\\) graphs, graph ‘n’ vertices ‘m’ edges, ‘m’ edges chosen uniformly randomly set possible edges. set includes loop edges well loops parameter TRUE. random.graph.game() alias function.","code":""},{"path":"/reference/erdos.renyi.game.html","id":"deprecated","dir":"Reference","previous_headings":"","what":"Deprecated","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"Since igraph version 0.8.0, erdos.renyi.game() random.graph.game() deprecated, sample_gnp() sample_gnm() used instead.","code":""},{"path":"/reference/erdos.renyi.game.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"Erdos, P. Renyi, ., random graphs, Publicationes Mathematicae 6, 290--297 (1959).","code":""},{"path":[]},{"path":"/reference/erdos.renyi.game.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/erdos.renyi.game.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random graphs according to the Erdős-Rényi model — erdos.renyi.game","text":"","code":"g <- erdos.renyi.game(1000, 1 / 1000) degree_distribution(g) #> [1] 0.362 0.356 0.196 0.075 0.010 0.001"},{"path":"/reference/feedback_arc_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding a feedback arc set in a graph — feedback_arc_set","title":"Finding a feedback arc set in a graph — feedback_arc_set","text":"feedback arc set graph subset edges whose removal breaks cycles graph.","code":""},{"path":"/reference/feedback_arc_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding a feedback arc set in a graph — feedback_arc_set","text":"","code":"feedback_arc_set(graph, weights = NULL, algo = c(\"approx_eades\", \"exact_ip\"))"},{"path":"/reference/feedback_arc_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding a feedback arc set in a graph — feedback_arc_set","text":"graph input graph weights Potential edge weights. graph edge attribute called ‘weight’, argument NULL, edge attribute used automatically. goal feedback arc set problem find feedback arc set smallest total weight. algo Specifies algorithm use. “exact_ip” solves feedback arc set problem exact integer programming algorithm guarantees total weight removed edges small possible. “approx_eades” uses fast (linear-time) approximation algorithm Eades, Lin Smyth. “exact” alias “exact_ip” “approx” alias “approx_eades”.","code":""},{"path":"/reference/feedback_arc_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding a feedback arc set in a graph — feedback_arc_set","text":"edge sequence (default, see return.vs.es option igraph_options()) containing feedback arc set.","code":""},{"path":"/reference/feedback_arc_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finding a feedback arc set in a graph — feedback_arc_set","text":"Feedback arc sets typically used directed graphs. removal feedback arc set directed graph ensures remaining graph directed acyclic graph (DAG). undirected graphs, removal feedback arc set ensures remaining graph forest (.e. every connected component tree).","code":""},{"path":"/reference/feedback_arc_set.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Finding a feedback arc set in a graph — feedback_arc_set","text":"Peter Eades, Xuemin Lin W.F.Smyth: fast effective heuristic feedback arc set problem. Information Processing Letters 47:6, pp. 319-323, 1993","code":""},{"path":[]},{"path":"/reference/feedback_arc_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding a feedback arc set in a graph — feedback_arc_set","text":"","code":"g <- sample_gnm(20, 40, directed = TRUE) feedback_arc_set(g) #> + 4/40 edges from a2dbd27: #> [1]  5-> 2  5->13 16->13 18-> 1 feedback_arc_set(g, algo = \"approx\") #> + 4/40 edges from a2dbd27: #> [1]  5-> 2  5->13 16->13 18-> 1"},{"path":"/reference/fit_hrg.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a hierarchical random graph model — fit_hrg","title":"Fit a hierarchical random graph model — fit_hrg","text":"fit_hrg() fits HRG given graph. takes specified steps number MCMC steps perform fitting, convergence criteria specified number steps zero. fit_hrg() can start given HRG, given hrg() argument start argument TRUE.","code":""},{"path":"/reference/fit_hrg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a hierarchical random graph model — fit_hrg","text":"","code":"fit_hrg(graph, hrg = NULL, start = FALSE, steps = 0)"},{"path":"/reference/fit_hrg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a hierarchical random graph model — fit_hrg","text":"graph graph fit model . Edge directions ignored directed graphs. hrg hierarchical random graph model, form igraphHRG object. fit_hrg() allows NULL, case random starting point used fitting. start Logical, whether start fitting/sampling supplied igraphHRG object, random starting point. steps number MCMC steps make. zero, MCMC procedure performed convergence.","code":""},{"path":"/reference/fit_hrg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a hierarchical random graph model — fit_hrg","text":"fit_hrg() returns igraphHRG object. list following members: left Vector contains left children internal tree vertices. first vertex always root vertex, first element vector left child root vertex. Internal vertices denoted negative numbers, starting -1 going , .e. root vertex -1. Leaf vertices denoted non-negative number, starting zero . right Vector contains right children vertices, encoding left vector. prob connection probabilities attached internal vertices, first number belongs root vertex (.e. internal vertex -1), second internal vertex -2, etc. edges number edges subtree given internal vertex. vertices number vertices subtree given internal vertex, including .","code":""},{"path":"/reference/fit_hrg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit a hierarchical random graph model — fit_hrg","text":". Clauset, C. Moore, M.E.J. Newman. Hierarchical structure prediction missing links networks. Nature 453, 98--101 (2008); . Clauset, C. Moore, M.E.J. Newman. Structural Inference Hierarchies Networks. E. M. Airoldi et al. (Eds.): ICML 2006 Ws, Lecture Notes Computer Science 4503, 1--13. Springer-Verlag, Berlin Heidelberg (2007).","code":""},{"path":[]},{"path":"/reference/fit_hrg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a hierarchical random graph model — fit_hrg","text":"","code":"## We are not running these examples any more, because they ## take a long time (~15 seconds) to run and this is against the CRAN ## repository policy. Copy and paste them by hand to your R prompt if ## you want to run them.  ## A graph with two dense groups g <- sample_gnp(10, p = 1 / 2) + sample_gnp(10, p = 1 / 2) hrg <- fit_hrg(g) hrg #> Hierarchical random graph, at level 3: #> g1        p=0.06   #> '- g15    p=   0   #>    '- g5  p=0.62  1  7  3  8  2  6  5  10 9  #>    '- g16 p=0.67  15 19 12 20 16 #> '- g2     p=0.38   #>    '- g9  p=   0  4  11 #>    '- g14 p=   1  14 17 13 18  ## The consensus tree for it consensus_tree(g, hrg = hrg, start = TRUE) #> $parents #>  [1] 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 -1 #>  #> $weights #> [1]  6788  9039 10000 #>  #> $hrg #> $hrg$left #>  [1] -15  -9 -10 -13   0  15 -18  -3   3   1   8  11  12  -4  -5 -17 -12   4  -8 #>  #> $hrg$right #>  [1]  -2 -14   2  13 -19  19 -11  -7  10   7   9  18  16  17 -16  -6  14   5   6 #>  #> $hrg$prob #>  [1] 0.05952381 0.37500000 0.00000000 0.50000000 0.62500000 1.00000000 #>  [7] 0.00000000 1.00000000 0.00000000 0.00000000 0.00000000 0.00000000 #> [13] 1.00000000 1.00000000 0.00000000 0.66666667 1.00000000 1.00000000 #> [19] 0.14285714 #>  #> $hrg$edges #>  [1]  5  3  0  1  5  1  0 12  0  0  0  0  1  3  0  4  2  1  1 #>  #> $hrg$vertices #>  [1] 20  6  3  3  9  2  4  7  2  2  2  2  2  4 14  5  3  2  8 #>  #>   ## Prediction of missing edges g2 <- make_full_graph(4) + (make_full_graph(4) - path(1, 2)) predict_edges(g2) #> $edges #>       [,1] [,2] #>  [1,]    5    6 #>  [2,]    4    6 #>  [3,]    2    6 #>  [4,]    1    6 #>  [5,]    3    6 #>  [6,]    2    5 #>  [7,]    3    5 #>  [8,]    4    5 #>  [9,]    1    5 #> [10,]    3    7 #> [11,]    2    7 #> [12,]    4    7 #> [13,]    1    7 #> [14,]    1    8 #> [15,]    3    8 #> [16,]    4    8 #> [17,]    2    8 #>  #> $prob #>  [1] 0.276373020 0.004641428 0.004424832 0.004404252 0.004370966 0.003922240 #>  [7] 0.003904642 0.003834868 0.003821421 0.003289436 0.003244359 0.003188349 #> [13] 0.003065094 0.002676969 0.002626216 0.002605210 0.002444697 #>  #> $hrg #> Hierarchical random graph, at level 3: #> g1        p=0   #> '- g7     p=1  3 #>    '- g5  p=1  4 1 2 #> '- g6     p=1  8 #>    '- g4  p=1  6 5 7 #>"},{"path":"/reference/fit_power_law.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting a power-law distribution function to discrete data — fit_power_law","title":"Fitting a power-law distribution function to discrete data — fit_power_law","text":"fit_power_law() fits power-law distribution data set.","code":""},{"path":"/reference/fit_power_law.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting a power-law distribution function to discrete data — fit_power_law","text":"","code":"fit_power_law(   x,   xmin = NULL,   start = 2,   force.continuous = FALSE,   implementation = c(\"plfit\", \"R.mle\"),   ... )"},{"path":"/reference/fit_power_law.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting a power-law distribution function to discrete data — fit_power_law","text":"x data fit, numeric vector. implementation ‘R.mle’ data must integer values. ‘plfit’ implementation non-integer values might present continuous power-law distribution fitted. xmin Numeric scalar, NULL. lower bound fitting power-law. NULL, smallest value x used ‘R.mle’ implementation, value automatically determined ‘plfit’ implementation. argument makes possible fit tail distribution. start Numeric scalar. initial value exponent minimizing function, ‘R.mle’ implementation. Usually safe leave untouched. force.continuous Logical scalar. Whether force continuous distribution ‘plfit’ implementation, even sample vector contains integer values (chance). argument false, igraph assume continuous distribution least one sample non-integer assume discrete distribution otherwise. implementation Character scalar. implementation use. See details . ... Additional arguments, passed maximum likelihood optimizing function, stats4::mle(), ‘R.mle’ implementation chosen. ignored ‘plfit’ implementation.","code":""},{"path":"/reference/fit_power_law.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting a power-law distribution function to discrete data — fit_power_law","text":"Depends implementation argument. ‘R.mle’, object class ‘mle’. can used calculate confidence intervals log-likelihood. See stats4::mle-class() details. implementation ‘plfit’, result named list entries: continuous Logical scalar, whether fitted power-law distribution continuous discrete. alpha Numeric scalar, exponent fitted power-law distribution. xmin Numeric scalar, minimum value power-law distribution fitted. words, values larger xmin used input vector. logLik Numeric scalar, log-likelihood fitted parameters. KS.stat Numeric scalar, test statistic Kolmogorov-Smirnov test compares fitted distribution input vector. Smaller scores denote better fit. KS.p Numeric scalar, p-value Kolmogorov-Smirnov test. Small p-values (less 0.05) indicate test rejected hypothesis original data drawn fitted power-law distribution.","code":""},{"path":"/reference/fit_power_law.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fitting a power-law distribution function to discrete data — fit_power_law","text":"function fits power-law distribution vector containing samples distribution (assumed follow power-law course). power-law distribution, generally assumed \\(P(X=x)\\) proportional \\(x^{-alpha}\\), \\(x\\) positive number \\(\\alpha\\) greater 1. many real-world cases, power-law behaviour kicks threshold value \\(x_{min}\\). goal function determine \\(\\alpha\\) \\(x_{min}\\) given, determine \\(x_{min}\\) corresponding value \\(\\alpha\\). fit_power_law() provides two maximum likelihood implementations.  implementation argument ‘R.mle’, BFGS optimization (see mle) algorithm applied.  additional arguments passed mle function, possible change optimization method /parameters.  implementation can fit \\(x_{min}\\) argument, use ‘plfit’ implementation want . ‘plfit’ implementation also uses maximum likelihood principle determine \\(\\alpha\\) given \\(x_{min}\\); \\(x_{min}\\) given advance, algorithm attempt find itsoptimal value \\(p\\)-value Kolmogorov-Smirnov test fitted distribution original sample largest. function uses method Clauset, Shalizi Newman calculate parameters fitted distribution. See references details.","code":""},{"path":"/reference/fit_power_law.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fitting a power-law distribution function to discrete data — fit_power_law","text":"Power laws, Pareto distributions Zipf's law, M. E. J. Newman, Contemporary Physics, 46, 323-351, 2005. Aaron Clauset, Cosma R .Shalizi Mark E.J. Newman: Power-law distributions empirical data. SIAM Review 51(4):661-703, 2009.","code":""},{"path":[]},{"path":"/reference/fit_power_law.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fitting a power-law distribution function to discrete data — fit_power_law","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/fit_power_law.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting a power-law distribution function to discrete data — fit_power_law","text":"","code":"# This should approximately yield the correct exponent 3 g <- barabasi.game(1000) # increase this number to have a better estimate d <- degree(g, mode = \"in\") fit1 <- fit_power_law(d + 1, 10) fit2 <- fit_power_law(d + 1, 10, implementation = \"R.mle\")  fit1$alpha #> [1] 2.918645 stats4::coef(fit2) #>    alpha  #> 2.918605  fit1$logLik #> [1] -59.37072 stats4::logLik(fit2) #> 'log Lik.' -59.37069 (df=1)"},{"path":"/reference/get.edge.ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the edge ids based on the incident vertices of the edges — get.edge.ids","title":"Find the edge ids based on the incident vertices of the edges — get.edge.ids","text":"Find edges igraph graph specified end points. function handles multi-graph (graphs multiple edges) can consider ignore edge directions directed graphs.","code":""},{"path":"/reference/get.edge.ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the edge ids based on the incident vertices of the edges — get.edge.ids","text":"","code":"get.edge.ids(graph, vp, directed = TRUE, error = FALSE, multi = FALSE)"},{"path":"/reference/get.edge.ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the edge ids based on the incident vertices of the edges — get.edge.ids","text":"graph input graph. vp incident vertices, given vertex ids symbolic vertex names. interpreted pairwise, .e. first second used first edge, third fourth second, etc. directed Logical scalar, whether consider edge directions directed graphs. argument ignored undirected graphs. error Logical scalar, whether report error edge found graph. FALSE, error reported, zero returned non-existant edge(s). multi Logical scalar, whether handle multiple edges properly. FALSE, pair vertices given twice (), always edge id reported back . TRUE, edge ids multiple edges correctly reported.","code":""},{"path":"/reference/get.edge.ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the edge ids based on the incident vertices of the edges — get.edge.ids","text":"numeric vector edge ids, one pair input vertices. edge input graph given pair vertices, zero reported. (error argument FALSE.)","code":""},{"path":"/reference/get.edge.ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the edge ids based on the incident vertices of the edges — get.edge.ids","text":"igraph vertex ids natural numbers, starting one, number vertices graph. Similarly, edges also numbered one, number edges. function allows finding edges graph, via incident vertices.","code":""},{"path":[]},{"path":"/reference/get.edge.ids.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find the edge ids based on the incident vertices of the edges — get.edge.ids","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/get.edge.ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the edge ids based on the incident vertices of the edges — get.edge.ids","text":"","code":"g <- make_ring(10) ei <- get.edge.ids(g, c(1, 2, 4, 5)) E(g)[ei] #> + 2/10 edges from ba54005: #> [1] 1--2 4--5  ## non-existant edge get.edge.ids(g, c(2, 1, 1, 4, 5, 4)) #> [1] 1 0 4  ## multiple edges ## multi = FALSE, a single edge id is returned, ## as many times as corresponding pairs in the vertex series. g <- make_graph(rep(c(1, 2), 5)) eis <- get.edge.ids(g, c(1, 2, 1, 2), multi = FALSE) eis #> [1] 5 5 E(g)[eis] #> + 2/5 edges from 5ea5822: #> [1] 1->2 1->2  ## multi = TRUE, as many different edges, if any, ## are returned as pairs in the vertex series. eim <- get.edge.ids(g, c(1, 2, 1, 2, 1, 2), multi = TRUE) eim #> [1] 5 4 3 E(g)[eim] #> + 3/5 edges from 5ea5822: #> [1] 1->2 1->2 1->2"},{"path":"/reference/girth.html","id":null,"dir":"Reference","previous_headings":"","what":"Girth of a graph — girth","title":"Girth of a graph — girth","text":"girth graph length shortest circle .","code":""},{"path":"/reference/girth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Girth of a graph — girth","text":"","code":"girth(graph, circle = TRUE)"},{"path":"/reference/girth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Girth of a graph — girth","text":"graph input graph. may directed, algorithm searches undirected circles anyway. circle Logical scalar, whether return shortest circle .","code":""},{"path":"/reference/girth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Girth of a graph — girth","text":"named list two components: girth Integer constant, girth graph, 0 graph acyclic. circle Numeric vector vertex ids shortest circle.","code":""},{"path":"/reference/girth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Girth of a graph — girth","text":"current implementation works undirected graphs , directed graphs treated undirected graphs. Loop edges multiple edges ignored. graph forest (ie. acyclic), zero returned. implementation based Alon Itai Michael Rodeh: Finding minimum circuit graph Proceedings ninth annual ACM symposium Theory computing, 1-10, 1977. first implementation function done Keith Briggs, thanks Keith.","code":""},{"path":"/reference/girth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Girth of a graph — girth","text":"Alon Itai Michael Rodeh: Finding minimum circuit graph Proceedings ninth annual ACM symposium Theory computing, 1-10, 1977","code":""},{"path":[]},{"path":"/reference/girth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Girth of a graph — girth","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/girth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Girth of a graph — girth","text":"","code":"# No circle in a tree g <- make_tree(1000, 3) girth(g) #> $girth #> [1] 0 #>  #> $circle #> + 0/1000 vertices, from d50001e: #>   # The worst case running time is for a ring g <- make_ring(100) girth(g) #> $girth #> [1] 100 #>  #> $circle #> + 100/100 vertices, from 5039007: #>   [1]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68 #>  [19]  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86 #>  [37]  87  88  89  90  91  92  93  94  95  96  97  98  99 100   1   2   3   4 #>  [55]   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22 #>  [73]  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40 #>  [91]  41  42  43  44  45  46  47  48  49  50 #>   # What about a random graph? g <- sample_gnp(1000, 1 / 1000) girth(g) #> $girth #> [1] 5 #>  #> $circle #> + 5/1000 vertices, from ce448da: #> [1] 629 416  38 510 916 #>"},{"path":"/reference/global_efficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency of a graph — global_efficiency","title":"Efficiency of a graph — global_efficiency","text":"functions calculate global average local efficiency network, local efficiency every vertex network. See definitions.","code":""},{"path":"/reference/global_efficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency of a graph — global_efficiency","text":"","code":"global_efficiency(graph, weights = NULL, directed = TRUE)  local_efficiency(   graph,   vids = V(graph),   weights = NULL,   directed = TRUE,   mode = c(\"all\", \"out\", \"in\", \"total\") )  average_local_efficiency(   graph,   weights = NULL,   directed = TRUE,   mode = c(\"all\", \"out\", \"in\", \"total\") )"},{"path":"/reference/global_efficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency of a graph — global_efficiency","text":"graph graph analyze. weights edge weights. edge weights must non-negative; additionally, edge weight may NaN. NULL (default) graph weight edge attribute, used automatically. directed Logical scalar, whether consider directed paths. Ignored undirected graphs. vids vertex ids vertices calculation done. Applies local efficiency calculation . mode Specifies define local neighborhood vertex directed graphs. “” considers -neighbors , “” considers -neighbors , “” considers .","code":""},{"path":"/reference/global_efficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficiency of a graph — global_efficiency","text":"global_efficiency(), global efficiency graph single number. average_local_efficiency(), average local efficiency graph single number. local_efficiency(), local efficiency vertex vector.","code":""},{"path":"/reference/global_efficiency.html","id":"global-efficiency","dir":"Reference","previous_headings":"","what":"Global efficiency","title":"Efficiency of a graph — global_efficiency","text":"global efficiency network defined average inverse distances pairs vertices. precisely: $$E_g = \\frac{1}{n (n-1)} \\sum_{\\ne j} \\frac{1}{d_{ij}}$$ \\(n\\) number vertices. inverse distance pairs reachable considered zero. graphs fewer 2 vertices, NaN returned.","code":""},{"path":"/reference/global_efficiency.html","id":"local-efficiency","dir":"Reference","previous_headings":"","what":"Local efficiency","title":"Efficiency of a graph — global_efficiency","text":"local efficiency network around vertex defined follows: remove vertex compute distances (shortest path lengths) neighbours rest network. local efficiency around removed vertex average inverse distances. inverse distance two vertices reachable considered zero. local efficiency around vertex fewer two neighbours taken zero convention.","code":""},{"path":"/reference/global_efficiency.html","id":"average-local-efficiency","dir":"Reference","previous_headings":"","what":"Average local efficiency","title":"Efficiency of a graph — global_efficiency","text":"average local efficiency network simply arithmetic mean local efficiencies vertices; see definition local efficiency .","code":""},{"path":"/reference/global_efficiency.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Efficiency of a graph — global_efficiency","text":"V. Latora M. Marchiori: Efficient Behavior Small-World Networks, Phys. Rev. Lett. 87, 198701 (2001). . Vragović, E. Louis, . Díaz-Guilera, Efficiency informational transfer regular complex networks, Phys. Rev. E 71, 1 (2005).","code":""},{"path":"/reference/global_efficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency of a graph — global_efficiency","text":"","code":"g <- make_graph(\"zachary\") global_efficiency(g) #> [1] 0.4920083 average_local_efficiency(g) #> [1] 0.752932"},{"path":"/reference/gorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Order (number of vertices) of a graph — gorder","title":"Order (number of vertices) of a graph — gorder","text":"vcount() alias function.","code":""},{"path":"/reference/gorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order (number of vertices) of a graph — gorder","text":"","code":"gorder(graph)"},{"path":"/reference/gorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order (number of vertices) of a graph — gorder","text":"graph graph","code":""},{"path":"/reference/gorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order (number of vertices) of a graph — gorder","text":"Number vertices, numeric scalar.","code":""},{"path":[]},{"path":"/reference/gorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order (number of vertices) of a graph — gorder","text":"","code":"g <- make_ring(10) gorder(g) #> [1] 10 vcount(g) #> [1] 10"},{"path":"/reference/graph_.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert object to a graph — graph_","title":"Convert object to a graph — graph_","text":"generic function convert R objects igraph graphs.","code":""},{"path":"/reference/graph_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert object to a graph — graph_","text":"","code":"graph_(...)"},{"path":"/reference/graph_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert object to a graph — graph_","text":"... Parameters, see details .","code":""},{"path":"/reference/graph_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert object to a graph — graph_","text":"TODO","code":""},{"path":"/reference/graph_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert object to a graph — graph_","text":"","code":"## These are equivalent graph_(cbind(1:5, 2:6), from_edgelist(directed = FALSE)) #> [[1]] #> [1] 6 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 4 5 #>  #> [[4]] #> [1] 0 1 2 3 4 #>  #> [[5]] #> [1] 0 1 2 3 4 #>  #> [[6]] #> [1] 0 1 2 3 4 #>  #> [[7]] #> [1] 0 0 1 2 3 4 5 #>  #> [[8]] #> [1] 0 1 2 3 4 5 5 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb5602448> #>  #> attr(,\"class\") #> [1] \"igraph\" graph_(cbind(1:5, 2:6), from_edgelist(), directed = FALSE) #> [[1]] #> [1] 6 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 4 5 #>  #> [[4]] #> [1] 0 1 2 3 4 #>  #> [[5]] #> [1] 0 1 2 3 4 #>  #> [[6]] #> [1] 0 1 2 3 4 #>  #> [[7]] #> [1] 0 0 1 2 3 4 5 #>  #> [[8]] #> [1] 0 1 2 3 4 5 5 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb639c7e0> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/graph_attr-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set all or some graph attributes — graph_attr<-","title":"Set all or some graph attributes — graph_attr<-","text":"Set graph attributes","code":""},{"path":"/reference/graph_attr-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set all or some graph attributes — graph_attr<-","text":"","code":"graph_attr(graph, name) <- value"},{"path":"/reference/graph_attr-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set all or some graph attributes — graph_attr<-","text":"graph graph. name name attribute set. missing, value named list, list members set attributes. value value attribute set","code":""},{"path":"/reference/graph_attr-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set all or some graph attributes — graph_attr<-","text":"graph, attribute(s) added.","code":""},{"path":[]},{"path":"/reference/graph_attr-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set all or some graph attributes — graph_attr<-","text":"","code":"g <- make_graph(~ A - B:C:D) graph_attr(g, \"name\") <- \"4-star\" g #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 #>  #> [[4]] #> [1] 0 0 0 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 0 1 2 3 #>  #> [[8]] #> [1] 0 3 3 3 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"4-star\" #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"A\" \"B\" \"C\" \"D\" #>  #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cbb720318> #>  #> attr(,\"class\") #> [1] \"igraph\"  graph_attr(g) <- list(   layout = layout_with_fr(g),   name = \"4-star layed out\" ) plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/graph_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph attributes of a graph — graph_attr","title":"Graph attributes of a graph — graph_attr","text":"Graph attributes graph","code":""},{"path":"/reference/graph_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph attributes of a graph — graph_attr","text":"","code":"graph_attr(graph, name)"},{"path":"/reference/graph_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph attributes of a graph — graph_attr","text":"graph Input graph. name name attribute query. missing, attributes returned list.","code":""},{"path":"/reference/graph_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph attributes of a graph — graph_attr","text":"list graph attributes, single graph attribute.","code":""},{"path":[]},{"path":"/reference/graph_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph attributes of a graph — graph_attr","text":"","code":"g <- make_ring(10) graph_attr(g) #> $name #> [1] \"Ring graph\" #>  #> $mutual #> [1] FALSE #>  #> $circular #> [1] TRUE #>  graph_attr(g, \"name\") #> [1] \"Ring graph\""},{"path":"/reference/graph_attr_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List names of graph attributes — graph_attr_names","title":"List names of graph attributes — graph_attr_names","text":"List names graph attributes","code":""},{"path":"/reference/graph_attr_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List names of graph attributes — graph_attr_names","text":"","code":"graph_attr_names(graph)"},{"path":"/reference/graph_attr_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List names of graph attributes — graph_attr_names","text":"graph graph.","code":""},{"path":"/reference/graph_attr_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List names of graph attributes — graph_attr_names","text":"Character vector, names graph attributes.","code":""},{"path":[]},{"path":"/reference/graph_attr_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List names of graph attributes — graph_attr_names","text":"","code":"g <- make_ring(10) graph_attr_names(g) #> [1] \"name\"     \"mutual\"   \"circular\""},{"path":"/reference/graph_from_adj_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create graphs from adjacency lists — graph_from_adj_list","title":"Create graphs from adjacency lists — graph_from_adj_list","text":"adjacency list list numeric vectors, containing neighbor vertices vertex. function creates igraph graph object list.","code":""},{"path":"/reference/graph_from_adj_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create graphs from adjacency lists — graph_from_adj_list","text":"","code":"graph_from_adj_list(   adjlist,   mode = c(\"out\", \"in\", \"all\", \"total\"),   duplicate = TRUE )"},{"path":"/reference/graph_from_adj_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create graphs from adjacency lists — graph_from_adj_list","text":"adjlist adjacency list. consistent, .e. maximum throughout vectors list must less number vectors (=number vertices graph). mode Character scalar, specifies whether graph create undirected (‘’ ‘total’) directed; latter case, whether contains outgoing (‘’) incoming (‘’) neighbors vertices. duplicate Logical scalar. undirected graphs gives whether edges included list twice. E.g. TRUE undirected {,B} edge graph_from_adj_list() expects included neighbors B B included neighbors . argument ignored mode .","code":""},{"path":"/reference/graph_from_adj_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create graphs from adjacency lists — graph_from_adj_list","text":"igraph graph object.","code":""},{"path":"/reference/graph_from_adj_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create graphs from adjacency lists — graph_from_adj_list","text":"Adjacency lists handy intend many (small) modifications graph. case adjacency lists efficient igraph graphs. idea convert graph adjacency list as_adj_list(), modifications graphs finally create igraph graph calling graph_from_adj_list().","code":""},{"path":[]},{"path":"/reference/graph_from_adj_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create graphs from adjacency lists — graph_from_adj_list","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/graph_from_adj_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create graphs from adjacency lists — graph_from_adj_list","text":"","code":"## Directed g <- make_ring(10, directed = TRUE) al <- as_adj_list(g, mode = \"out\") g2 <- graph_from_adj_list(al) graph.isomorphic(g, g2) #> [1] TRUE  ## Undirected g <- make_ring(10) al <- as_adj_list(g) g2 <- graph_from_adj_list(al, mode = \"all\") graph.isomorphic(g, g2) #> [1] TRUE ecount(g2) #> [1] 10 g3 <- graph_from_adj_list(al, mode = \"all\", duplicate = FALSE) ecount(g3) #> [1] 20 which_multiple(g3) #>  [1] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE #> [13]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE"},{"path":"/reference/graph_from_adjacency_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create graphs from adjacency matrices — graph_from_adjacency_matrix","title":"Create graphs from adjacency matrices — graph_from_adjacency_matrix","text":"graph_from_adjacency_matrix() flexible function creating igraph graphs adjacency matrices.","code":""},{"path":"/reference/graph_from_adjacency_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create graphs from adjacency matrices — graph_from_adjacency_matrix","text":"","code":"graph_from_adjacency_matrix(   adjmatrix,   mode = c(\"directed\", \"undirected\", \"max\", \"min\", \"upper\", \"lower\", \"plus\"),   weighted = NULL,   diag = TRUE,   add.colnames = NULL,   add.rownames = NA )  from_adjacency(...)"},{"path":"/reference/graph_from_adjacency_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create graphs from adjacency matrices — graph_from_adjacency_matrix","text":"adjmatrix square adjacency matrix. igraph version 0.5.1 can sparse matrix created Matrix package. mode Character scalar, specifies igraph interpret supplied matrix. See also weighted argument, interpretation depends . Possible values : directed, undirected, upper, lower, max, min, plus. See details . weighted argument specifies whether create weighted graph adjacency matrix. NULL unweighted graph created elements adjacency matrix gives number edges vertices. character constant every non-zero matrix entry edge created value entry added edge attribute named weighted argument. TRUE weighted graph created name edge attribute weight. See also details . diag Logical scalar, whether include diagonal matrix calculation. FALSE diagonal zerod first. add.colnames Character scalar, whether add column names vertex attributes. ‘NULL’ (default) , present, column names added vertex attribute ‘name’. ‘NA’ added.  character constant, gives name vertex attribute add. add.rownames Character scalar, whether add row names vertex attributes. Possible values previous argument. default row names added. ‘add.rownames’ ‘add.colnames’ specify vertex attribute, former ignored. ... Passed graph_from_adjacency_matrix().","code":""},{"path":"/reference/graph_from_adjacency_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create graphs from adjacency matrices — graph_from_adjacency_matrix","text":"igraph graph object.","code":""},{"path":"/reference/graph_from_adjacency_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create graphs from adjacency matrices — graph_from_adjacency_matrix","text":"order vertices preserved, .e. vertex corresponding first row vertex 0 graph, etc. graph_from_adjacency_matrix() operates two main modes, depending weighted argument. argument NULL unweighted graph created element adjacency matrix gives number edges create two corresponding vertices.  details depend value mode argument: \"directed\" graph directed matrix element gives number edges two vertices. \"undirected\" exactly max, convenience. Note checked whether matrix symmetric. \"max\" undirected graph created max((,j), (j,)) gives number edges. \"upper\" undirected graph created, upper right triangle (including diagonal) used number edges. \"lower\" undirected graph created, lower left triangle (including diagonal) used creating edges. \"min\" undirected graph created min((,j), (j,)) edges vertex j. \"plus\" undirected graph created (,j)+(j,) edges vertex j. weighted argument NULL elements matrix give weights edges (zero).  details depend value mode argument: \"directed\" graph directed matrix element gives edge weights. \"undirected\" First check matrix symmetric. error . upper triangle used create weighted undirected graph. \"max\" undirected graph created max((,j), (j,)) gives edge weights. \"upper\" undirected graph created, upper right triangle (including diagonal) used (edge weights). \"lower\" undirected graph created, lower left triangle (including diagonal) used creating edges. \"min\" undirected graph created, min((,j), (j,)) gives edge weights. \"plus\" undirected graph created, (,j)+(j,) gives edge weights.","code":""},{"path":[]},{"path":"/reference/graph_from_adjacency_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create graphs from adjacency matrices — graph_from_adjacency_matrix","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/graph_from_adjacency_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create graphs from adjacency matrices — graph_from_adjacency_matrix","text":"","code":"adjm <- matrix(sample(0:1, 100, replace = TRUE, prob = c(0.9, 0.1)), ncol = 10) g1 <- graph_from_adjacency_matrix(adjm) adjm <- matrix(sample(0:5, 100,   replace = TRUE,   prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02) ), ncol = 10) g2 <- graph_from_adjacency_matrix(adjm, weighted = TRUE) E(g2)$weight #>  [1] 2 4 1 1 3 5 5 3 4 5 4  ## various modes for weighted graphs, with some tests nzs <- function(x) sort(x[x != 0]) adjm <- matrix(runif(100), 10) adjm[adjm < 0.5] <- 0 g3 <- graph_from_adjacency_matrix((adjm + t(adjm)) / 2,   weighted = TRUE,   mode = \"undirected\" )  g4 <- graph_from_adjacency_matrix(adjm, weighted = TRUE, mode = \"max\") all(nzs(pmax(adjm, t(adjm))[upper.tri(adjm)]) == sort(E(g4)$weight)) #> Warning: longer object length is not a multiple of shorter object length #> [1] FALSE  g5 <- graph_from_adjacency_matrix(adjm, weighted = TRUE, mode = \"min\") all(nzs(pmin(adjm, t(adjm))[upper.tri(adjm)]) == sort(E(g5)$weight)) #> Warning: longer object length is not a multiple of shorter object length #> [1] FALSE  g6 <- graph_from_adjacency_matrix(adjm, weighted = TRUE, mode = \"upper\") all(nzs(adjm[upper.tri(adjm)]) == sort(E(g6)$weight)) #> Warning: longer object length is not a multiple of shorter object length #> [1] FALSE  g7 <- graph_from_adjacency_matrix(adjm, weighted = TRUE, mode = \"lower\") all(nzs(adjm[lower.tri(adjm)]) == sort(E(g7)$weight)) #> Warning: longer object length is not a multiple of shorter object length #> [1] FALSE  g8 <- graph_from_adjacency_matrix(adjm, weighted = TRUE, mode = \"plus\") d2 <- function(x) {   diag(x) <- diag(x) / 2   x } all(nzs((d2(adjm + t(adjm)))[lower.tri(adjm)]) == sort(E(g8)$weight)) #> Warning: longer object length is not a multiple of shorter object length #> [1] FALSE  g9 <- graph_from_adjacency_matrix(adjm, weighted = TRUE, mode = \"plus\", diag = FALSE) d0 <- function(x) {   diag(x) <- 0 } all(nzs((d0(adjm + t(adjm)))[lower.tri(adjm)]) == sort(E(g9)$weight)) #> [1] TRUE  ## row/column names rownames(adjm) <- sample(letters, nrow(adjm)) colnames(adjm) <- seq(ncol(adjm)) g10 <- graph_from_adjacency_matrix(adjm, weighted = TRUE, add.rownames = \"code\") summary(g10) #> IGRAPH b868f44 DNW- 10 52 --  #> + attr: name (v/c), code (v/c), weight (e/n)"},{"path":"/reference/graph_from_atlas.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a graph from the Graph Atlas — graph_from_atlas","title":"Create a graph from the Graph Atlas — graph_from_atlas","text":"graph_from_atlas() creates graphs book ‘Atlas Graphs’ Roland C. Read Robin J. Wilson. atlas contains undirected graphs seven vertices, numbered 0 1252. graphs listed: increasing order number nodes; fixed number nodes, increasing order number edges; fixed numbers nodes edges, increasing order degree sequence, example 111223 < 112222; fixed degree sequence, increasing number automorphisms.","code":""},{"path":"/reference/graph_from_atlas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a graph from the Graph Atlas — graph_from_atlas","text":"","code":"graph_from_atlas(n)  atlas(...)"},{"path":"/reference/graph_from_atlas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a graph from the Graph Atlas — graph_from_atlas","text":"n id graph create. ... Passed graph_from_atlas().","code":""},{"path":"/reference/graph_from_atlas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a graph from the Graph Atlas — graph_from_atlas","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/graph_from_atlas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a graph from the Graph Atlas — graph_from_atlas","text":"","code":"## Some randomly picked graphs from the atlas graph_from_atlas(sample(0:1252, 1)) #> [[1]] #> [1] 7 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 5 2 5 3 3 5 6 6 #>  #> [[4]] #> [1] 0 2 0 3 1 2 1 4 0 #>  #> [[5]] #> [1] 0 2 4 5 6 1 3 8 7 #>  #> [[6]] #> [1] 0 2 8 4 6 5 1 3 7 #>  #> [[7]] #> [1] 0 0 1 2 4 4 7 9 #>  #> [[8]] #> [1] 0 3 5 7 8 9 9 9 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Graph from the Atlas #549\" #>  #> [[9]][[2]]$n #> [1] 549 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb5b54f88> #>  #> attr(,\"class\") #> [1] \"igraph\" graph_from_atlas(sample(0:1252, 1)) #> [[1]] #> [1] 7 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 2 3 4 5 5 2 4 5 6 #>  #> [[4]] #> [1] 0 2 3 4 2 1 1 3 5 #>  #> [[5]] #> [1] 0 5 1 6 2 4 7 3 8 #>  #> [[6]] #> [1] 0 5 6 1 4 2 7 3 8 #>  #> [[7]] #> [1] 0 0 0 2 3 5 8 9 #>  #> [[8]] #> [1] 0 1 3 5 7 8 9 9 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Graph from the Atlas #490\" #>  #> [[9]][[2]]$n #> [1] 490 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb54b9388> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/graph_from_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating igraph graphs from data frames or vice-versa — as_data_frame","title":"Creating igraph graphs from data frames or vice-versa — as_data_frame","text":"function creates igraph graph one two data frames containing (symbolic) edge list edge/vertex attributes.","code":""},{"path":"/reference/graph_from_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating igraph graphs from data frames or vice-versa — as_data_frame","text":"","code":"as_data_frame(x, what = c(\"edges\", \"vertices\", \"both\"))  graph_from_data_frame(d, directed = TRUE, vertices = NULL)  from_data_frame(...)"},{"path":"/reference/graph_from_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating igraph graphs from data frames or vice-versa — as_data_frame","text":"x igraph object. Character constant, whether return info vertices, edges, . default ‘edges’. d data frame containing symbolic edge list first two columns. Additional columns considered edge attributes.  Since version 0.7 argument coerced data frame .data.frame. directed Logical scalar, whether create directed graph. vertices data frame vertex metadata, NULL. See details . Since version 0.7 argument coerced data frame .data.frame, NULL. ... Passed graph_from_data_frame().","code":""},{"path":"/reference/graph_from_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating igraph graphs from data frames or vice-versa — as_data_frame","text":"igraph graph object graph_from_data_frame(), either data frame list two data frames named edges vertices .data.frame.","code":""},{"path":"/reference/graph_from_data_frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating igraph graphs from data frames or vice-versa — as_data_frame","text":"graph_from_data_frame() creates igraph graphs one two data frames. two modes operation, depending whether vertices argument NULL . vertices NULL, first two columns d used symbolic edge list additional columns edge attributes. names attributes taken names columns. vertices NULL, must data frame giving vertex metadata. first column vertices assumed contain symbolic vertex names, added graphs ‘name’ vertex attribute. columns added additional vertex attributes. vertices NULL symbolic edge list given d checked contain vertex names listed vertices. Typically, data frames exported spreadsheet software like Excel imported R via read.table(), read.delim() read.csv(). edges data frame included graph, may include multiple parallel edges loops. as_data_frame() converts igraph graph one data frames, depending argument. argument edges (default), edges graph also edge attributes returned. edges first two columns, named . (also denotes edge direction directed graphs.)  named graphs, vertex names included columns, graphs, numeric vertex ids. edge attributes columns. good idea edge attribute named , column named data frame unique. edges listed order numeric ids. argument vertices, vertex attributes returned. Vertices listed order numeric vertex ids. argument , vertex edge data returned, list named entries vertices edges.","code":""},{"path":"/reference/graph_from_data_frame.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Creating igraph graphs from data frames or vice-versa — as_data_frame","text":"graph_from_data_frame() NA elements first two columns ‘d’ replaced string “NA” creating graph. means NAs correspond single vertex. NA elements first column ‘vertices’ also replaced string “NA”, rest ‘vertices’ touched. words, vertex names (=first column) NA, vertex attributes can.","code":""},{"path":[]},{"path":"/reference/graph_from_data_frame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating igraph graphs from data frames or vice-versa — as_data_frame","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/graph_from_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating igraph graphs from data frames or vice-versa — as_data_frame","text":"","code":"## A simple example with a couple of actors ## The typical case is that these tables are read in from files.... actors <- data.frame(   name = c(     \"Alice\", \"Bob\", \"Cecil\", \"David\",     \"Esmeralda\"   ),   age = c(48, 33, 45, 34, 21),   gender = c(\"F\", \"M\", \"F\", \"M\", \"F\") ) relations <- data.frame(   from = c(     \"Bob\", \"Cecil\", \"Cecil\", \"David\",     \"David\", \"Esmeralda\"   ),   to = c(\"Alice\", \"Bob\", \"Alice\", \"Alice\", \"Bob\", \"Alice\"),   same.dept = c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE),   friendship = c(4, 5, 5, 2, 1, 1), advice = c(4, 5, 5, 4, 2, 3) ) g <- graph_from_data_frame(relations, directed = TRUE, vertices = actors) print(g, e = TRUE, v = TRUE) #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 1 2 2 3 3 4 #>  #> [[4]] #> [1] 0 1 0 0 1 0 #>  #> [[5]] #> [1] 0 2 1 3 4 5 #>  #> [[6]] #> [1] 0 2 3 5 1 4 #>  #> [[7]] #> [1] 0 0 1 3 5 6 #>  #> [[8]] #> [1] 0 4 6 6 6 6 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"Alice\"     \"Bob\"       \"Cecil\"     \"David\"     \"Esmeralda\" #>  #> [[9]][[3]]$age #> [1] 48 33 45 34 21 #>  #> [[9]][[3]]$gender #> [1] \"F\" \"M\" \"F\" \"M\" \"F\" #>  #>  #> [[9]][[4]] #> [[9]][[4]]$same.dept #> [1] FALSE FALSE  TRUE FALSE FALSE  TRUE #>  #> [[9]][[4]]$friendship #> [1] 4 5 5 2 1 1 #>  #> [[9]][[4]]$advice #> [1] 4 5 5 4 2 3 #>  #>  #>  #> [[10]] #> <environment: 0x564cbc49da78> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## The opposite operation as_data_frame(g, what = \"vertices\") #>                name age gender #> Alice         Alice  48      F #> Bob             Bob  33      M #> Cecil         Cecil  45      F #> David         David  34      M #> Esmeralda Esmeralda  21      F as_data_frame(g, what = \"edges\") #>        from    to same.dept friendship advice #> 1       Bob Alice     FALSE          4      4 #> 2     Cecil   Bob     FALSE          5      5 #> 3     Cecil Alice      TRUE          5      5 #> 4     David Alice     FALSE          2      4 #> 5     David   Bob     FALSE          1      2 #> 6 Esmeralda Alice      TRUE          1      3"},{"path":"/reference/graph_from_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a graph from an edge list matrix — graph_from_edgelist","title":"Create a graph from an edge list matrix — graph_from_edgelist","text":"graph_from_edgelist() creates graph edge list. argument two-column matrix, row defines one edge. numeric matrix elements interpreted vertex ids. character matrix interpreted symbolic vertex names vertex id assigned name, also name vertex attribute added.","code":""},{"path":"/reference/graph_from_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a graph from an edge list matrix — graph_from_edgelist","text":"","code":"graph_from_edgelist(el, directed = TRUE)  from_edgelist(...)"},{"path":"/reference/graph_from_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a graph from an edge list matrix — graph_from_edgelist","text":"el edge list, two column matrix, character numeric. directed Whether create directed graph. ... Passed graph_from_edgelist().","code":""},{"path":"/reference/graph_from_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a graph from an edge list matrix — graph_from_edgelist","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/graph_from_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a graph from an edge list matrix — graph_from_edgelist","text":"","code":"el <- matrix(c(\"foo\", \"bar\", \"bar\", \"foobar\"), nc = 2, byrow = TRUE) graph_from_edgelist(el) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 #>  #> [[4]] #> [1] 1 2 #>  #> [[5]] #> [1] 0 1 #>  #> [[6]] #> [1] 0 1 #>  #> [[7]] #> [1] 0 1 2 2 #>  #> [[8]] #> [1] 0 0 1 2 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"foo\"    \"bar\"    \"foobar\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb5265b50> #>  #> attr(,\"class\") #> [1] \"igraph\"  # Create a ring by hand graph_from_edgelist(cbind(1:10, c(2:10, 1))) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 0 1 2 3 4 5 6 7 8 9 #>  #> [[4]] #>  [1] 1 2 3 4 5 6 7 8 9 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 8 9 #>  #> [[6]] #>  [1] 9 0 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 #>  #> [[8]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb5a13c48> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/graph_from_graphdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","title":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","text":"function downloads graph database created evaluation graph isomorphism testing algothitms.","code":""},{"path":"/reference/graph_from_graphdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","text":"","code":"graph_from_graphdb(   url = NULL,   prefix = \"iso\",   type = \"r001\",   nodes = NULL,   pair = \"A\",   which = 0,   base = \"http://cneurocvs.rmki.kfki.hu/graphdb/gzip\",   compressed = TRUE,   directed = TRUE )"},{"path":"/reference/graph_from_graphdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","text":"url NULL complete URL file import. prefix Gives prefix. See details . Possible values: iso, i2, si4, si6, mcs10, mcs30, mcs50, mcs70, mcs90. type Gives graph type identifier. See details . Possible values: r001, r005, r01, r02, m2D, m2Dr2, m2Dr4, m2Dr6 m3D, m3Dr2, m3Dr4, m3Dr6, m4D, m4Dr2, m4Dr4, m4Dr6, b03, b03m, b06, b06m, b09, b09m. nodes number vertices graph. pair Specifies graph pair read. Possible values: B. Gives number graph read. every graph type number actual graphs database. argument specifies one read. base base address database. See details . compressed Logical constant, TRUE file expected compressed gzip. url NULL ‘.gz’ suffix added filename. directed Logical constant, whether create directed graph.","code":""},{"path":"/reference/graph_from_graphdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","text":"new graph object.","code":""},{"path":"/reference/graph_from_graphdb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","text":"graph_from_graphdb() reads graph graph database FTP HTTP server local copy. two modes operation: url argument specified complete path local remote graph database file. case simply call read_graph() proper arguments read file. url NULL, default, filename assembled base, prefix, type, nodes, pair arguments. Unfortunately original graph database homepage now defunct, see old version http://web.archive.org/web/20090215182331/http://amalfi.dis.unina./graph/db/doc/graphdbat.html actual format graph database file information.","code":""},{"path":"/reference/graph_from_graphdb.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","text":"","code":"g <- graph_from_graphdb(prefix=\"iso\", type=\"r001\", nodes=20, pair=\"A\",   which=10, compressed=TRUE) g2 <- graph_from_graphdb(prefix=\"iso\", type=\"r001\", nodes=20, pair=\"B\",   which=10, compressed=TRUE) graph.isomorphic.vf2(g, g2)\t% should be TRUE g3 <- graph_from_graphdb(url=paste(sep=\"/\",                               \"http://cneurocvs.rmki.kfki.hu\",                               \"graphdb/gzip/iso/bvg/b06m\",                               \"iso_b06m_m200.A09.gz\"))"},{"path":"/reference/graph_from_graphdb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","text":"M. De Santo, P. Foggia, C. Sansone, M. Vento: large database graphs use benchmarking graph isomorphism algorithms, Pattern Recognition Letters, Volume 24, Issue 8 (May 2003)","code":""},{"path":[]},{"path":"/reference/graph_from_graphdb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load a graph from the graph database for testing graph isomorphism. — graph_from_graphdb","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/graph_from_graphnel.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert graphNEL objects from the graph package to igraph — graph_from_graphnel","title":"Convert graphNEL objects from the graph package to igraph — graph_from_graphnel","text":"graphNEL class defined graph package, another way represent graphs. graph_from_graphnel() takes graphNEL graph converts igraph graph. handles graph/vertex/edge attributes. graphNEL graph vertex attribute called ‘name’ used igraph vertex attribute ‘name’ graphNEL vertex names ignored.","code":""},{"path":"/reference/graph_from_graphnel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert graphNEL objects from the graph package to igraph — graph_from_graphnel","text":"","code":"graph_from_graphnel(graphNEL, name = TRUE, weight = TRUE, unlist.attrs = TRUE)"},{"path":"/reference/graph_from_graphnel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert graphNEL objects from the graph package to igraph — graph_from_graphnel","text":"graphNEL graphNEL graph. name Logical scalar, whether add graphNEL vertex names igraph vertex attribute called ‘name’. weight Logical scalar, whether add graphNEL edge weights igraph edge attribute called ‘weight’. (graphNEL graphs always weighted.) unlist.attrs Logical scalar. graphNEL attribute query functions return values attributes R lists, argument TRUE (default) converted atomic vectors, whenever possible, adding igraph graph.","code":""},{"path":"/reference/graph_from_graphnel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert graphNEL objects from the graph package to igraph — graph_from_graphnel","text":"graph_from_graphnel() returns igraph graph object.","code":""},{"path":"/reference/graph_from_graphnel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert graphNEL objects from the graph package to igraph — graph_from_graphnel","text":"graphNEL graphs poorly support multiple edges, edge attributes multiple edges lost: replaced attributes first multiple edges.","code":""},{"path":[]},{"path":"/reference/graph_from_graphnel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert graphNEL objects from the graph package to igraph — graph_from_graphnel","text":"","code":"if (FALSE) { ## Undirected g <- make_ring(10) V(g)$name <- letters[1:10] GNEL <- as_graphnel(g) g2 <- graph_from_graphnel(GNEL) g2  ## Directed g3 <- make_star(10, mode = \"in\") V(g3)$name <- letters[1:10] GNEL2 <- as_graphnel(g3) g4 <- graph_from_graphnel(GNEL2) g4 }"},{"path":"/reference/graph_from_incidence_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create graphs from an incidence matrix — graph_from_incidence_matrix","title":"Create graphs from an incidence matrix — graph_from_incidence_matrix","text":"graph_from_incidence_matrix() creates bipartite igraph graph incidence matrix.","code":""},{"path":"/reference/graph_from_incidence_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create graphs from an incidence matrix — graph_from_incidence_matrix","text":"","code":"graph_from_incidence_matrix(   incidence,   directed = FALSE,   mode = c(\"all\", \"out\", \"in\", \"total\"),   multiple = FALSE,   weighted = NULL,   add.names = NULL )  from_incidence_matrix(...)"},{"path":"/reference/graph_from_incidence_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create graphs from an incidence matrix — graph_from_incidence_matrix","text":"incidence input incidence matrix. can also sparse matrix Matrix package. directed Logical scalar, whether create directed graph. mode character constant, defines direction edges directed graphs, ignored undirected graphs. ‘’, edges go vertices first kind (corresponding rows incidence matrix) vertices second kind (columns incidence matrix). ‘’, opposite direction used. ‘’ ‘total’, mutual edges created. multiple Logical scalar, specifies interpret matrix elements. See details . weighted argument specifies whether create weighted graph incidence matrix. NULL unweighted graph created multiple argument used determine edges graph. character constant every non-zero matrix entry edge created value entry added edge attribute named weighted argument. TRUE weighted graph created name edge attribute ‘weight’. add.names character constant, NA NULL. graph_from_incidence_matrix() can add row column names incidence matrix vertex attributes. argument NULL (default) incidence matrix row column names, added ‘name’ vertex attribute. want different vertex attribute , give name attributes character string. argument NA, vertex attributes (type) added. ... Passed graph_from_incidence_matrix().","code":""},{"path":"/reference/graph_from_incidence_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create graphs from an incidence matrix — graph_from_incidence_matrix","text":"bipartite igraph graph. words, igraph graph vertex attribute type.","code":""},{"path":"/reference/graph_from_incidence_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create graphs from an incidence matrix — graph_from_incidence_matrix","text":"Bipartite graphs ‘type’ vertex attribute igraph, boolean FALSE vertices first kind TRUE vertices second kind. graph_from_incidence_matrix() can operate two modes, depending multiple argument. FALSE single edge created every non-zero element incidence matrix. multiple TRUE, matrix elements rounded closest non-negative integer get number edges create pair vertices.","code":""},{"path":[]},{"path":"/reference/graph_from_incidence_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create graphs from an incidence matrix — graph_from_incidence_matrix","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/graph_from_incidence_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create graphs from an incidence matrix — graph_from_incidence_matrix","text":"","code":"inc <- matrix(sample(0:1, 15, repl = TRUE), 3, 5) colnames(inc) <- letters[1:5] rownames(inc) <- LETTERS[1:3] graph_from_incidence_matrix(inc) #> [[1]] #> [1] 8 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 3 4 5 6 7 4 6 3 4 7 #>  #> [[4]] #>  [1] 0 0 0 0 0 1 1 2 2 2 #>  #> [[5]] #>  [1] 0 7 1 5 8 2 3 6 4 9 #>  #> [[6]] #>  [1] 0 1 2 3 4 5 6 7 8 9 #>  #> [[7]] #> [1]  0  0  0  0  2  5  6  8 10 #>  #> [[8]] #> [1]  0  5  7 10 10 10 10 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$type #> [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE #>  #> [[9]][[3]]$name #> [1] \"A\" \"B\" \"C\" \"a\" \"b\" \"c\" \"d\" \"e\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb98a8678> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/graph_from_isomorphism_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a graph from an isomorphism class — graph_from_isomorphism_class","title":"Create a graph from an isomorphism class — graph_from_isomorphism_class","text":"isomorphism class non-negative integer number. Graphs (number vertices) isomorphism class isomorphic isomorphic graphs always isomorphism class. Currently can handle directed graphs 3 4 vertices undirected graphd 3 6 vertices.","code":""},{"path":"/reference/graph_from_isomorphism_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a graph from an isomorphism class — graph_from_isomorphism_class","text":"","code":"graph_from_isomorphism_class(size, number, directed = TRUE)"},{"path":"/reference/graph_from_isomorphism_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a graph from an isomorphism class — graph_from_isomorphism_class","text":"size number vertices graph. number isomorphism class. directed Whether create directed graph (default).","code":""},{"path":"/reference/graph_from_isomorphism_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a graph from an isomorphism class — graph_from_isomorphism_class","text":"igraph object, graph given size, directedness isomorphism class.","code":""},{"path":[]},{"path":"/reference/graph_from_lcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a graph from LCF notation — graph_from_lcf","title":"Creating a graph from LCF notation — graph_from_lcf","text":"LCF short Lederberg-Coxeter-Frucht, concise notation 3-regular Hamiltonian graphs. constists three parameters, number vertices graph, list shifts giving additional edges cycle backbone another integer giving many times shifts performed. See http://mathworld.wolfram.com/LCFNotation.html details.","code":""},{"path":"/reference/graph_from_lcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a graph from LCF notation — graph_from_lcf","text":"","code":"graph_from_lcf(n, shifts, repeats = 1)"},{"path":"/reference/graph_from_lcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a graph from LCF notation — graph_from_lcf","text":"n Integer, number vertices graph. shifts Integer vector, shifts. repeats Integer constant, many times repeat shifts.","code":""},{"path":"/reference/graph_from_lcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a graph from LCF notation — graph_from_lcf","text":"graph object.","code":""},{"path":[]},{"path":"/reference/graph_from_lcf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating a graph from LCF notation — graph_from_lcf","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/graph_from_lcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a graph from LCF notation — graph_from_lcf","text":"","code":"# This is the Franklin graph: g1 <- graph_from_lcf(12, c(5, -5), 6) g2 <- make_graph(\"Franklin\") isomorphic(g1, g2) #> [1] TRUE"},{"path":"/reference/graph_from_literal.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating (small) graphs via a simple interface — graph_from_literal","title":"Creating (small) graphs via a simple interface — graph_from_literal","text":"function useful want create small (named) graph quickly, works directed undirected graphs.","code":""},{"path":"/reference/graph_from_literal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating (small) graphs via a simple interface — graph_from_literal","text":"","code":"graph_from_literal(..., simplify = TRUE)  from_literal(...)"},{"path":"/reference/graph_from_literal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating (small) graphs via a simple interface — graph_from_literal","text":"... graph_from_literal() formulae giving structure graph, see details . from_literal() arguments passed graph_from_literal(). simplify Logical scalar, whether call simplify() created graph. default graph simplified, loop multiple edges removed.","code":""},{"path":"/reference/graph_from_literal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating (small) graphs via a simple interface — graph_from_literal","text":"igraph graph","code":""},{"path":"/reference/graph_from_literal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating (small) graphs via a simple interface — graph_from_literal","text":"graph_from_literal() handy creating small graphs quickly. need supply one R expressions giving structure graph. expressions consist vertex names edge operators. edge operator sequence ‘-’ ‘+’ characters, former edges latter used arrow heads. edges can arbitrarily long, ie. may use many ‘-’ characters “draw” like. edge operators consist ‘-’ characters graph undirected, whereas single ‘+’ character implies directed graph. Let us see simple examples. Without arguments function creates empty graph: simple undirected graph two vertices called ‘’ ‘B’ one edge : Remember length edges matter, written following, creates graph: many disconnected components graph, separate commas. can also give isolate vertices. ‘:’ operator can used define vertex sets. edge operator connects two vertex sets every vertex first set connected every vertex second set. following form creates full graph, including loop edges: directed graphs, edges created edge operator includes arrow head (‘+’) end edge: Thus third example edge created vertices B C. Mutual edges can also created simple edge operator: Note length edge operators arbitrary, ‘+’, ‘++’ ‘+-----+’ exactly meaning. vertex names include spaces special characters need quote : can include character vertex names way, even ‘+’ ‘-’ characters. See examples .","code":"graph_from_literal() graph_from_literal(A-B) graph_from_literal( A-----B ) graph_from_literal( A--B, C--D, E--F, G--H, I, J, K ) graph_from_literal( A:B:C:D -- A:B:C:D ) graph_from_literal( A -+ B -+ C )   graph_from_literal( A +- B -+ C )   graph_from_literal( A +- B -- C ) graph_from_literal( A +-+ B +---+ C ++ D + E) graph_from_literal( \"this is\" +- \"a silly\" -+ \"graph here\" )"},{"path":[]},{"path":"/reference/graph_from_literal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating (small) graphs via a simple interface — graph_from_literal","text":"","code":"# A simple undirected graph g <- graph_from_literal(   Alice - Bob - Cecil - Alice,   Daniel - Cecil - Eugene,   Cecil - Gordon ) g #> [[1]] #> [1] 6 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 2 3 4 5 #>  #> [[4]] #> [1] 0 0 1 2 2 2 #>  #> [[5]] #> [1] 0 1 2 3 4 5 #>  #> [[6]] #> [1] 0 1 2 3 4 5 #>  #> [[7]] #> [1] 0 0 1 3 4 5 6 #>  #> [[8]] #> [1] 0 2 3 6 6 6 6 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"Alice\"  \"Bob\"    \"Cecil\"  \"Daniel\" \"Eugene\" \"Gordon\" #>  #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cba379a00> #>  #> attr(,\"class\") #> [1] \"igraph\"  # Another undirected graph, \":\" notation g2 <- graph_from_literal(Alice - Bob:Cecil:Daniel, Cecil:Daniel - Eugene:Gordon) g2 #> [[1]] #> [1] 6 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 4 5 4 5 #>  #> [[4]] #> [1] 0 0 0 2 2 3 3 #>  #> [[5]] #> [1] 0 1 2 3 5 4 6 #>  #> [[6]] #> [1] 0 1 2 3 4 5 6 #>  #> [[7]] #> [1] 0 0 1 2 3 5 7 #>  #> [[8]] #> [1] 0 3 3 5 7 7 7 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"Alice\"  \"Bob\"    \"Cecil\"  \"Daniel\" \"Eugene\" \"Gordon\" #>  #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cba5d2668> #>  #> attr(,\"class\") #> [1] \"igraph\"  # A directed graph g3 <- graph_from_literal(   Alice +-+ Bob --+ Cecil +-- Daniel,   Eugene --+ Gordon:Helen ) g3 #> [[1]] #> [1] 7 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 1 3 4 4 #>  #> [[4]] #> [1] 1 0 2 2 5 6 #>  #> [[5]] #> [1] 0 1 2 3 4 5 #>  #> [[6]] #> [1] 1 0 2 3 4 5 #>  #> [[7]] #> [1] 0 1 3 3 4 6 6 6 #>  #> [[8]] #> [1] 0 1 2 4 4 4 5 6 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"Alice\"  \"Bob\"    \"Cecil\"  \"Daniel\" \"Eugene\" \"Gordon\" \"Helen\"  #>  #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cba7e27a8> #>  #> attr(,\"class\") #> [1] \"igraph\"  # A graph with isolate vertices g4 <- graph_from_literal(Alice -- Bob -- Daniel, Cecil:Gordon, Helen) g4 #> [[1]] #> [1] 6 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 #>  #> [[4]] #> [1] 0 1 #>  #> [[5]] #> [1] 0 1 #>  #> [[6]] #> [1] 0 1 #>  #> [[7]] #> [1] 0 0 1 2 2 2 2 #>  #> [[8]] #> [1] 0 1 2 2 2 2 2 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"Alice\"  \"Bob\"    \"Daniel\" \"Cecil\"  \"Gordon\" \"Helen\"  #>  #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cbab54c08> #>  #> attr(,\"class\") #> [1] \"igraph\" V(g4)$name #> [1] \"Alice\"  \"Bob\"    \"Daniel\" \"Cecil\"  \"Gordon\" \"Helen\"   # \"Arrows\" can be arbitrarily long g5 <- graph_from_literal(Alice +---------+ Bob) g5 #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 #>  #> [[4]] #> [1] 1 0 #>  #> [[5]] #> [1] 0 1 #>  #> [[6]] #> [1] 1 0 #>  #> [[7]] #> [1] 0 1 2 #>  #> [[8]] #> [1] 0 1 2 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"Alice\" \"Bob\"   #>  #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cbad97a08> #>  #> attr(,\"class\") #> [1] \"igraph\"  # Special vertex names g6 <- graph_from_literal(\"+\" -- \"-\", \"*\" -- \"/\", \"%%\" -- \"%/%\") g6 #> [[1]] #> [1] 6 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 3 5 #>  #> [[4]] #> [1] 0 2 4 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 0 1 1 2 2 3 #>  #> [[8]] #> [1] 0 1 1 2 2 3 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"+\"   \"-\"   \"*\"   \"/\"   \"%%\"  \"%/%\" #>  #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cbaf11c30> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/graph_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the id of a graph — graph_id","title":"Get the id of a graph — graph_id","text":"Graph ids used check vertex edge sequence belongs graph. create new graph changing structure graph, new graph new id. Changing attributes change id.","code":""},{"path":"/reference/graph_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the id of a graph — graph_id","text":"","code":"graph_id(x, ...)"},{"path":"/reference/graph_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the id of a graph — graph_id","text":"x graph vertex sequence edge sequence. ... used currently.","code":""},{"path":"/reference/graph_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the id of a graph — graph_id","text":"id graph, character scalar. vertex edge sequences id graph created .","code":""},{"path":"/reference/graph_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the id of a graph — graph_id","text":"","code":"g <- make_ring(10) graph_id(g) #> [1] \"8fe58d13-7856-4963-9445-62ea7fc6939b\" graph_id(V(g)) #> [1] \"8fe58d13-7856-4963-9445-62ea7fc6939b\" graph_id(E(g)) #> [1] \"8fe58d13-7856-4963-9445-62ea7fc6939b\"  g2 <- g + 1 graph_id(g2) #> [1] \"a96a923f-cdb0-4475-993b-dbab5936d803\""},{"path":"/reference/graph_version.html","id":null,"dir":"Reference","previous_headings":"","what":"igraph data structure versions — graph_version","title":"igraph data structure versions — graph_version","text":"igraph's internal data representation changes sometimes versions. means possible use igraph objects created (possibly saved file) older igraph version.","code":""},{"path":"/reference/graph_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igraph data structure versions — graph_version","text":"","code":"graph_version(graph)"},{"path":"/reference/graph_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"igraph data structure versions — graph_version","text":"graph input graph. missing, version number current data format returned.","code":""},{"path":"/reference/graph_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"igraph data structure versions — graph_version","text":"character scalar.","code":""},{"path":"/reference/graph_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"igraph data structure versions — graph_version","text":"graph_version() queries current data format, data format possibly older igraph graph. upgrade_graph() can convert older data format current one.","code":""},{"path":[]},{"path":"/reference/graphlet_basis.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphlet decomposition of a graph — graphlet_basis","title":"Graphlet decomposition of a graph — graphlet_basis","text":"Graphlet decomposition models weighted undirected graph via union potentially overlapping dense social groups.  done two-step algorithm. first step candidate set groups (candidate basis) created finding cliques thresholded input graph. second step graph projected candidate basis, resulting weight coefficient clique candidate basis.","code":""},{"path":"/reference/graphlet_basis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphlet decomposition of a graph — graphlet_basis","text":"","code":"graphlet_basis(graph, weights = NULL)  graphlet_proj(   graph,   weights = NULL,   cliques,   niter = 1000,   Mu = rep(1, length(cliques)) )"},{"path":"/reference/graphlet_basis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphlet decomposition of a graph — graphlet_basis","text":"graph input graph, edge directions ignored. simple graph (.e. graphs without self-loops multiple edges) supported. weights Edge weights. graph weight edge attribute argument NULL (default), weight edge attribute used. cliques list vertex ids, graphlet basis use projection. niter Integer scalar, number iterations perform. Mu Starting weights projection.","code":""},{"path":"/reference/graphlet_basis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphlet decomposition of a graph — graphlet_basis","text":"graphlets() returns list two members: cliques list subgraphs, candidate graphlet basis. subgraph give vector vertex ids. Mu weights subgraphs graphlet basis. graphlet_basis() returns list two elements: cliques list subgraphs, candidate graphlet basis. subgraph give vector vertex ids. thresholds weight thresholds used finding subgraphs. graphlet_proj() return numeric vector, weights graphlet basis subgraphs.","code":""},{"path":"/reference/graphlet_basis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graphlet decomposition of a graph — graphlet_basis","text":"igraph contains three functions performing graph decomponsition graph. first graphlets(), performed steps method returns list subgraphs, corresponding weights. second third functions correspond first second steps algorithm, useful user wishes perform individually: graphlet_basis() graphlet_proj().","code":""},{"path":"/reference/graphlet_basis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphlet decomposition of a graph — graphlet_basis","text":"","code":"## Create an example graph first D1 <- matrix(0, 5, 5) D2 <- matrix(0, 5, 5) D3 <- matrix(0, 5, 5) D1[1:3, 1:3] <- 2 D2[3:5, 3:5] <- 3 D3[2:5, 2:5] <- 1  g <- simplify(graph_from_adjacency_matrix(D1 + D2 + D3,   mode = \"undirected\", weighted = TRUE )) V(g)$color <- \"white\" E(g)$label <- E(g)$weight E(g)$label.cex <- 2 E(g)$color <- \"black\" layout(matrix(1:6, nrow = 2, byrow = TRUE)) co <- layout_with_kk(g) par(mar = c(1, 1, 1, 1)) plot(g, layout = co) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ## Calculate graphlets gl <- graphlets(g, niter = 1000)  ## Plot graphlets for (i in 1:length(gl$cliques)) {   sel <- gl$cliques[[i]]   V(g)$color <- \"white\"   V(g)[sel]$color <- \"#E495A5\"   E(g)$width <- 1   E(g)[V(g)[sel] %--% V(g)[sel]]$width <- 2   E(g)$label <- \"\"   E(g)[width == 2]$label <- round(gl$Mu[i], 2)   E(g)$color <- \"black\"   E(g)[width == 2]$color <- \"#E495A5\"   plot(g, layout = co) } #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/greedy_vertex_coloring.html","id":null,"dir":"Reference","previous_headings":"","what":"Greedy vertex coloring — greedy_vertex_coloring","title":"Greedy vertex coloring — greedy_vertex_coloring","text":"greedy_vertex_coloring() finds coloring vertices graph based simple greedy algorithm.","code":""},{"path":"/reference/greedy_vertex_coloring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Greedy vertex coloring — greedy_vertex_coloring","text":"","code":"greedy_vertex_coloring(graph, heuristic = c(\"colored_neighbors\"))"},{"path":"/reference/greedy_vertex_coloring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Greedy vertex coloring — greedy_vertex_coloring","text":"graph graph object color heuristic selection heuristic next vertex consider. Currently one heuristic supported: “colored_neighbors” selects vertex largest number already colored neighbors.","code":""},{"path":"/reference/greedy_vertex_coloring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Greedy vertex coloring — greedy_vertex_coloring","text":"numeric vector item contains color index associated vertex ","code":""},{"path":"/reference/greedy_vertex_coloring.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Greedy vertex coloring — greedy_vertex_coloring","text":"goal vertex coloring assign \"color\" (.e. positive integer index) vertex graph neighboring vertices never color. function solves problem considering vertices one one according heuristic, always choosing smallest color index differs already colored neighbors. coloring obtained way necessarily minimal can calculated linear time.","code":""},{"path":"/reference/greedy_vertex_coloring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Greedy vertex coloring — greedy_vertex_coloring","text":"","code":"g <- make_graph(\"petersen\") col <- greedy_vertex_coloring(g) plot(g, vertex.color = col) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Groups of a vertex partitioning — groups","title":"Groups of a vertex partitioning — groups","text":"Create list vertex groups graph clustering community structure.","code":""},{"path":"/reference/groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Groups of a vertex partitioning — groups","text":"","code":"groups(x)"},{"path":"/reference/groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Groups of a vertex partitioning — groups","text":"x object represents grouping vertices. See details .","code":""},{"path":"/reference/groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Groups of a vertex partitioning — groups","text":"named list numeric character vectors. names just numbers refer groups. vectors numeric symbolic vertex ids.","code":""},{"path":"/reference/groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Groups of a vertex partitioning — groups","text":"Currently two methods defined function. default method works output components(). (fact works object list entry called membership.) second method works communities() objects.","code":""},{"path":[]},{"path":"/reference/groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Groups of a vertex partitioning — groups","text":"","code":"g <- make_graph(\"Zachary\") fgc <- cluster_fast_greedy(g) groups(fgc) #> $`1` #> [1]  1  5  6  7 11 12 17 20 #>  #> $`2` #>  [1]  9 15 16 19 21 23 24 25 26 27 28 29 30 31 32 33 34 #>  #> $`3` #> [1]  2  3  4  8 10 13 14 18 22 #>   g2 <- make_ring(10) + make_full_graph(5) groups(components(g2)) #> $`1` #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $`2` #> [1] 11 12 13 14 15 #>"},{"path":"/reference/gsize.html","id":null,"dir":"Reference","previous_headings":"","what":"The size of the graph (number of edges) — gsize","title":"The size of the graph (number of edges) — gsize","text":"ecount() alias function.","code":""},{"path":"/reference/gsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The size of the graph (number of edges) — gsize","text":"","code":"gsize(graph)"},{"path":"/reference/gsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The size of the graph (number of edges) — gsize","text":"graph graph.","code":""},{"path":"/reference/gsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The size of the graph (number of edges) — gsize","text":"Numeric scalar, number edges.","code":""},{"path":[]},{"path":"/reference/gsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The size of the graph (number of edges) — gsize","text":"","code":"g <- sample_gnp(100, 2 / 100) gsize(g) #> [1] 99 ecount(g) #> [1] 99  # Number of edges in a G(n,p) graph replicate(100, sample_gnp(10, 1 / 2), simplify = FALSE) %>%   vapply(gsize, 0) %>%   hist()"},{"path":"/reference/handle_vertex_type_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Common handler for vertex type arguments in igraph functions — handle_vertex_type_arg","title":"Common handler for vertex type arguments in igraph functions — handle_vertex_type_arg","text":"function takes types graph arguments public igraph function call validates vertex type vector.","code":""},{"path":"/reference/handle_vertex_type_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common handler for vertex type arguments in igraph functions — handle_vertex_type_arg","text":"","code":"handle_vertex_type_arg(types, graph, required = T)"},{"path":"/reference/handle_vertex_type_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Common handler for vertex type arguments in igraph functions — handle_vertex_type_arg","text":"types vertex types graph graph required whether graph bipartite","code":""},{"path":"/reference/handle_vertex_type_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Common handler for vertex type arguments in igraph functions — handle_vertex_type_arg","text":"logical vector representing resolved vertex type vertex graph","code":""},{"path":"/reference/handle_vertex_type_arg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Common handler for vertex type arguments in igraph functions — handle_vertex_type_arg","text":"provided vertex types NULL graph types vertex attribute, value vertex attribute used vertex types. Non-logical vertex type vectors coerced logical vectors printing warning.","code":""},{"path":"/reference/handle_vertex_type_arg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Common handler for vertex type arguments in igraph functions — handle_vertex_type_arg","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/harmonic_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonic centrality of vertices — harmonic_centrality","title":"Harmonic centrality of vertices — harmonic_centrality","text":"harmonic centrality vertex mean inverse distance vertices. inverse distance unreachable vertex considered zero.","code":""},{"path":"/reference/harmonic_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonic centrality of vertices — harmonic_centrality","text":"","code":"harmonic_centrality(   graph,   vids = V(graph),   mode = c(\"out\", \"in\", \"all\", \"total\"),   weights = NULL,   normalized = FALSE,   cutoff = -1 )"},{"path":"/reference/harmonic_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonic centrality of vertices — harmonic_centrality","text":"graph graph analyze. vids vertices harmonic centrality calculated. mode Character string, defining types paths used measuring distance directed graphs. “” follows paths along edge directions , “” traverses edges reverse, “” ignores edge directions. argument ignored undirected graphs. weights Optional positive weight vector calculating weighted harmonic centrality. graph weight edge attribute, used default. Weights used calculating weighted shortest paths, interpreted distances. normalized Logical scalar, whether calculate normalized harmonic centrality. true, result mean inverse path length vertices, .e. normalized number vertices minus one. false, result sum inverse path lengths vertices. cutoff maximum path length consider calculating harmonic centrality. limit cutoff negative. Note zero cutoff means paths length 0 considered.","code":""},{"path":"/reference/harmonic_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonic centrality of vertices — harmonic_centrality","text":"Numeric vector harmonic centrality scores vertices v.","code":""},{"path":"/reference/harmonic_centrality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Harmonic centrality of vertices — harmonic_centrality","text":"cutoff argument can used restrict calculation paths length cutoff smaller ; can used larger graphs speed calculation. cutoff negative (default), function calculates exact harmonic centrality scores.","code":""},{"path":"/reference/harmonic_centrality.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Harmonic centrality of vertices — harmonic_centrality","text":"M. Marchiori V. Latora, Harmony small-world, Physica 285, pp. 539-546 (2000).","code":""},{"path":[]},{"path":"/reference/harmonic_centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonic centrality of vertices — harmonic_centrality","text":"","code":"g <- make_ring(10) g2 <- make_star(10) harmonic_centrality(g) #>  [1] 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 #>  [9] 4.366667 4.366667 harmonic_centrality(g2, mode = \"in\") #>  [1] 9 0 0 0 0 0 0 0 0 0 harmonic_centrality(g2, mode = \"out\") #>  [1] 0 1 1 1 1 1 1 1 1 1 harmonic_centrality(g %du% make_full_graph(5), mode = \"all\") #>  [1] 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 #>  [9] 4.366667 4.366667 4.000000 4.000000 4.000000 4.000000 4.000000"},{"path":"/reference/has_eulerian_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Eulerian paths or cycles in a graph — has_eulerian_path","title":"Find Eulerian paths or cycles in a graph — has_eulerian_path","text":"has_eulerian_path() has_eulerian_cycle() checks whether Eulerian path cycle input graph. eulerian_path() eulerian_cycle() return path cycle exists, throws error otherwise.","code":""},{"path":"/reference/has_eulerian_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Eulerian paths or cycles in a graph — has_eulerian_path","text":"","code":"has_eulerian_path(graph)  has_eulerian_cycle(graph)  eulerian_path(graph)  eulerian_cycle(graph)"},{"path":"/reference/has_eulerian_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Eulerian paths or cycles in a graph — has_eulerian_path","text":"graph igraph graph object","code":""},{"path":"/reference/has_eulerian_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Eulerian paths or cycles in a graph — has_eulerian_path","text":"has_eulerian_path() has_eulerian_cycle(), logical value indicates whether graph contains Eulerian path cycle. eulerian_path() eulerian_cycle(), named list two entries: epath vector containing edge ids along Eulerian path cycle. vpath vector containing vertex ids along Eulerian path cycle.","code":""},{"path":"/reference/has_eulerian_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Eulerian paths or cycles in a graph — has_eulerian_path","text":"has_eulerian_path() decides whether input graph Eulerian path, .e. path passes every edge graph exactly , returns logical value result. eulerian_path() returns possible Eulerian path, described edge vertex sequence, throws error path exists. has_eulerian_cycle() decides whether input graph Eulerian cycle, .e. path passes every edge graph exactly returns starting point, returns logical value result. eulerian_cycle() returns possible Eulerian cycle, described edge vertex sequence, throws error cycle exists.","code":""},{"path":"/reference/has_eulerian_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Eulerian paths or cycles in a graph — has_eulerian_path","text":"","code":"g <- make_graph(~ A - B - C - D - E - A - F - D - B - F - E)  has_eulerian_path(g) #> [1] TRUE eulerian_path(g) #> $epath #> + 10/10 edges from ab9747a (vertex names): #>  [1] A--B B--C C--D B--D B--F A--F A--E D--E D--F E--F #>  #> $vpath #> + 11/6 vertices, named, from ab9747a: #>  [1] A B C D B F A E D F E #>   has_eulerian_cycle(g) #> [1] FALSE try(eulerian_cycle(g)) #> Error in eulerian_cycle(g) :  #>   At core/paths/eulerian.c:613 : The graph does not have an Eulerian cycle. Invalid value"},{"path":"/reference/head_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Head of the edge(s) in a graph — head_of","title":"Head of the edge(s) in a graph — head_of","text":"undirected graphs, head tail defined.  case head_of() returns vertices incident supplied edges, tail_of() returns end(s) edge(s).","code":""},{"path":"/reference/head_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Head of the edge(s) in a graph — head_of","text":"","code":"head_of(graph, es)"},{"path":"/reference/head_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Head of the edge(s) in a graph — head_of","text":"graph input graph. es edges query.","code":""},{"path":"/reference/head_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Head of the edge(s) in a graph — head_of","text":"vertex sequence head(s) edge(s).","code":""},{"path":[]},{"path":"/reference/head_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the only the head of an R object — head_print","title":"Print the only the head of an R object — head_print","text":"Print head R object","code":""},{"path":"/reference/head_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the only the head of an R object — head_print","text":"","code":"head_print(   x,   max_lines = 20,   header = \"\",   footer = \"\",   omitted_footer = \"\",   ... )"},{"path":"/reference/head_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the only the head of an R object — head_print","text":"x object print, callback function. See printer_callback() details. max_lines Maximum number lines print, including header footer. header header, function, called, otherwise printed using cat. footer footer, function, called, otherwise printed using cat. omitted_footer Footer printed anything omitted printout. function, called, otherwise printed using cat. ... Extra arguments pass print().","code":""},{"path":"/reference/head_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the only the head of an R object — head_print","text":"x, invisibly.","code":""},{"path":"/reference/hrg-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical random graphs — hrg-methods","title":"Hierarchical random graphs — hrg-methods","text":"Fitting sampling hierarchical random graph models.","code":""},{"path":"/reference/hrg-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hierarchical random graphs — hrg-methods","text":"hierarchical random graph ensemble undirected graphs \\(n\\) vertices. defined via binary tree \\(n\\) leaf \\(n-1\\) internal vertices, internal vertices labeled probabilities.  probability two vertices connected random graph given probability label closest common ancestor. Please see references hierarchical random graphs. igraph contains functions fitting HRG models given network (fit_hrg(), generating networks given HRG ensemble (sample_hrg()), converting igraph graph HRG back (hrg(), hrg_tree()), calculating consensus tree set sampled HRGs (consensus_tree()) predicting missing edges network based HRG models (predict_edges()). igraph HRG implementation heavily based code published Aaron Clauset, website (functional ).","code":""},{"path":[]},{"path":"/reference/hrg.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a hierarchical random graph from an igraph graph — hrg","title":"Create a hierarchical random graph from an igraph graph — hrg","text":"hrg() creates HRG igraph graph. igraph graph must directed binary tree, \\(n-1\\) internal \\(n\\) leaf vertices. prob argument contains HRG probability labels vertex; ignored leaf vertices.","code":""},{"path":"/reference/hrg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a hierarchical random graph from an igraph graph — hrg","text":"","code":"hrg(graph, prob)"},{"path":"/reference/hrg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a hierarchical random graph from an igraph graph — hrg","text":"graph igraph graph create HRG . prob vector probabilities, one vertex, order vertex ids.","code":""},{"path":"/reference/hrg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a hierarchical random graph from an igraph graph — hrg","text":"hrg() returns igraphHRG object.","code":""},{"path":[]},{"path":"/reference/hrg_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an igraph graph from a hierarchical random graph model — hrg_tree","title":"Create an igraph graph from a hierarchical random graph model — hrg_tree","text":"hrg_tree() creates corresponsing igraph tree hierarchical random graph model.","code":""},{"path":"/reference/hrg_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an igraph graph from a hierarchical random graph model — hrg_tree","text":"","code":"hrg_tree(hrg)"},{"path":"/reference/hrg_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an igraph graph from a hierarchical random graph model — hrg_tree","text":"hrg hierarchical random graph model.","code":""},{"path":"/reference/hrg_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an igraph graph from a hierarchical random graph model — hrg_tree","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/hub_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Kleinberg's hub centrality scores. — hub_score","title":"Kleinberg's hub centrality scores. — hub_score","text":"hub scores vertices defined principal eigenvector \\(^T\\), \\(\\) adjacency matrix graph.","code":""},{"path":"/reference/hub_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kleinberg's hub centrality scores. — hub_score","text":"","code":"hub_score(graph, scale = TRUE, weights = NULL, options = arpack_defaults)"},{"path":"/reference/hub_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kleinberg's hub centrality scores. — hub_score","text":"graph input graph. scale Logical scalar, whether scale result maximum score one. scaling used result vector unit length Euclidean norm. weights Optional positive weight vector calculating weighted scores. graph weight edge attribute, used default. function interprets edge weights connection strengths. random surfer model, edge larger weight likely selected surfer. options named list, override ARPACK options. See arpack() details.","code":""},{"path":"/reference/hub_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kleinberg's hub centrality scores. — hub_score","text":"named list members: vector authority/hub scores vertices. value corresponding eigenvalue calculated principal eigenvector. options information ARPACK computation, members options member returned arpack(), see documentation.","code":""},{"path":"/reference/hub_score.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kleinberg's hub centrality scores. — hub_score","text":"undirected matrices adjacency matrix symmetric hub scores authority scores, see authority_score().","code":""},{"path":"/reference/hub_score.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kleinberg's hub centrality scores. — hub_score","text":"J. Kleinberg. Authoritative sources hyperlinked environment. Proc. 9th ACM-SIAM Symposium Discrete Algorithms, 1998. Extended version Journal ACM 46(1999). Also appears IBM Research Report RJ 10076, May 1997.","code":""},{"path":[]},{"path":"/reference/hub_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kleinberg's hub centrality scores. — hub_score","text":"","code":"## An in-star g <- make_star(10) hub_score(g)$vector #>  [1] 3.370123e-16 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 #>  [6] 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00  ## A ring g2 <- make_ring(10) hub_score(g2)$vector #>  [1] 1 1 1 1 1 1 1 1 1 1"},{"path":"/reference/identical_graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide if two graphs are identical — identical_graphs","title":"Decide if two graphs are identical — identical_graphs","text":"Two graphs considered identical function represented exactly way internal R representation. means two graphs must list vertices edges, exactly order, directedness, two graphs must also identical graph, vertex edge attributes.","code":""},{"path":"/reference/identical_graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide if two graphs are identical — identical_graphs","text":"","code":"identical_graphs(g1, g2, attrs = TRUE)"},{"path":"/reference/identical_graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide if two graphs are identical — identical_graphs","text":"g1, g2 two graphs attrs Whether compare attributes graphs","code":""},{"path":"/reference/identical_graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide if two graphs are identical — identical_graphs","text":"Logical scalar","code":""},{"path":"/reference/identical_graphs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decide if two graphs are identical — identical_graphs","text":"similar identical base package, ignores mutable piece igraph objects; might different even two graphs identical. Attribute comparison can turned attrs parameter attributes two graphs allowed different.","code":""},{"path":"/reference/igraph-attribute-combination.html","id":null,"dir":"Reference","previous_headings":"","what":"How igraph functions handle attributes when the graph changes — igraph-attribute-combination","title":"How igraph functions handle attributes when the graph changes — igraph-attribute-combination","text":"Many times, structure graph modified, vertices/edges map original graph map vertices/edges newly created (modified) graph. example simplify() maps multiple edges single edges. igraph provides flexible mechanism specify vertex/edge attributes cases.","code":""},{"path":"/reference/igraph-attribute-combination.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"How igraph functions handle attributes when the graph changes — igraph-attribute-combination","text":"functions support combination attributes one two extra arguments called vertex.attr.comb /edge.attr.comb specify perform mapping attributes. E.g. contract() contracts many vertices single one, attributes vertices can combined stores vertex attributes new graph. specification combination (vertex edge) attributes can given character scalar, function object list character scalars /function objects. character scalar, refers one predefined combinations, see list . function, given function expected perform combination. called new vertex/edge graph, single argument: attribute values vertices map single vertex. third option, list can used specify different combination methods different attributes. named entry list corresponds attribute name. unnamed entry (.e. name empty string) list specifies default combination method. .e. specifies weight new edge sum weights corresponding edges old graph; rest attributes ignored (=dropped).","code":"list(weight=\"sum\", \"ignore\")"},{"path":"/reference/igraph-attribute-combination.html","id":"predefined-combination-functions","dir":"Reference","previous_headings":"","what":"Predefined combination functions","title":"How igraph functions handle attributes when the graph changes — igraph-attribute-combination","text":"following combination behaviors predefined: \"ignore\" attribute ignored dropped. \"sum\" sum attributes calculated. work character attributes works complex attributes sum generic defined. (E.g. works sparse matrices Matrix package, sum method.) \"prod\" product attributes calculated. work character attributes works complex attributes prod function defined. \"min\" minimum attributes calculated returned. character complex attributes standard R min function used. \"max\" maximum attributes calculated returned. character complex attributes standard R max function used. \"random\" Chooses one supplied attribute values, uniformly randomly. character complex attributes implemented calling sample. \"first\" Always chooses first attribute value. implemented calling head function. \"last\" Always chooses last attribute value. implemented calling tail function. \"mean\" mean attributes calculated returned. character complex attributes simply calls mean function. \"median\" median attributes selected. Calls R median function attribute types. \"concat\" Concatenate attributes, using c function. results almost always complex attribute.","code":""},{"path":[]},{"path":"/reference/igraph-attribute-combination.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"How igraph functions handle attributes when the graph changes — igraph-attribute-combination","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/igraph-attribute-combination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"How igraph functions handle attributes when the graph changes — igraph-attribute-combination","text":"","code":"g <- graph(c(1, 2, 1, 2, 1, 2, 2, 3, 3, 4)) E(g)$weight <- 1:5  ## print attribute values with the graph igraph_options(print.graph.attributes = TRUE) igraph_options(print.vertex.attributes = TRUE) igraph_options(print.edge.attributes = TRUE)  ## new attribute is the sum of the old ones simplify(g, edge.attr.comb = \"sum\") #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 2 #>  #> [[4]] #> [1] 1 2 3 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 1 2 3 3 #>  #> [[8]] #> [1] 0 0 1 2 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$weight #> [1] 6 4 5 #>  #>  #>  #> [[10]] #> <environment: 0x564cbf45f710> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## collect attributes into a string simplify(g, edge.attr.comb = toString) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 2 #>  #> [[4]] #> [1] 1 2 3 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 1 2 3 3 #>  #> [[8]] #> [1] 0 0 1 2 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$weight #> [1] \"1, 2, 3\" \"4\"       \"5\"       #>  #>  #>  #> [[10]] #> <environment: 0x564cbe4121d0> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## concatenate them into a vector, this creates a complex ## attribute simplify(g, edge.attr.comb = \"concat\") #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 2 #>  #> [[4]] #> [1] 1 2 3 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 1 2 3 3 #>  #> [[8]] #> [1] 0 0 1 2 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$weight #> [[9]][[4]]$weight[[1]] #> [1] 1 2 3 #>  #> [[9]][[4]]$weight[[2]] #> [1] 4 #>  #> [[9]][[4]]$weight[[3]] #> [1] 5 #>  #>  #>  #>  #> [[10]] #> <environment: 0x564cbcc3eb10> #>  #> attr(,\"class\") #> [1] \"igraph\"  E(g)$name <- letters[seq_len(ecount(g))]  ## both attributes are collected into strings simplify(g, edge.attr.comb = toString) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 2 #>  #> [[4]] #> [1] 1 2 3 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 1 2 3 3 #>  #> [[8]] #> [1] 0 0 1 2 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$weight #> [1] \"1, 2, 3\" \"4\"       \"5\"       #>  #> [[9]][[4]]$name #> [1] \"a, b, c\" \"d\"       \"e\"       #>  #>  #>  #> [[10]] #> <environment: 0x564cbdd683a0> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## harmonic average of weights, names are dropped simplify(g, edge.attr.comb = list(   weight = function(x) length(x) / sum(1 / x),   name = \"ignore\" )) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 1 2 #>  #> [[4]] #> [1] 1 2 3 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 1 2 3 3 #>  #> [[8]] #> [1] 0 0 1 2 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$weight #> [1] 1.636364 4.000000 5.000000 #>  #>  #>  #> [[10]] #> <environment: 0x564cbc4550b8> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/igraph-dollar.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting and setting graph attributes, shortcut — igraph-dollar","title":"Getting and setting graph attributes, shortcut — igraph-dollar","text":"$ operator shortcut get set graph attributes. shorter just readable graph_attr() set_graph_attr().","code":""},{"path":"/reference/igraph-dollar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting and setting graph attributes, shortcut — igraph-dollar","text":"","code":"# S3 method for igraph $(x, name)  # S3 method for igraph $(x, name) <- value"},{"path":"/reference/igraph-dollar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting and setting graph attributes, shortcut — igraph-dollar","text":"x igraph graph name Name attribute get/set. value New value graph attribute.","code":""},{"path":[]},{"path":"/reference/igraph-dollar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getting and setting graph attributes, shortcut — igraph-dollar","text":"","code":"g <- make_ring(10) g$name #> [1] \"Ring graph\" g$name <- \"10-ring\" g$name #> [1] \"10-ring\""},{"path":"/reference/igraph-es-attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Query or set attributes of the edges in an edge sequence — igraph-es-attributes","title":"Query or set attributes of the edges in an edge sequence — igraph-es-attributes","text":"$ operator syntactic sugar query set edge attributes, edges edge sequence.","code":""},{"path":"/reference/igraph-es-attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query or set attributes of the edges in an edge sequence — igraph-es-attributes","text":"","code":"# S3 method for igraph.es [[(x, i) <- value  # S3 method for igraph.es [(x, i) <- value  # S3 method for igraph.es $(x, name)  # S3 method for igraph.es $(x, name) <- value  E(x, path = NULL, P = NULL, directed = NULL) <- value"},{"path":"/reference/igraph-es-attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query or set attributes of the edges in an edge sequence — igraph-es-attributes","text":"x edge sequence. E<- graph. Index. value New value attribute, edges edge sequence. name Name edge attribute query set. path Select edges along path, given vertex sequence See E(). P Select edges via pairs vertices. See E(). directed Whether use edge directions path P arguments.","code":""},{"path":"/reference/igraph-es-attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query or set attributes of the edges in an edge sequence — igraph-es-attributes","text":"vector list, containing values attribute name edges sequence. numeric, character logical attributes, vector appropriate type, otherwise list.","code":""},{"path":"/reference/igraph-es-attributes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query or set attributes of the edges in an edge sequence — igraph-es-attributes","text":"query form $ shortcut edge_attr(), e.g. E(g)[idx]$attr equivalent edge_attr(g, attr, E(g)[idx]). assignment form $ shortcut set_edge_attr(), e.g. E(g)[idx]$attr <- value equivalent g <- set_edge_attr(g, attr, E(g)[idx], value).","code":""},{"path":[]},{"path":"/reference/igraph-es-attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query or set attributes of the edges in an edge sequence — igraph-es-attributes","text":"","code":"# color edges of the largest component largest_comp <- function(graph) {   cl <- components(graph)   V(graph)[which.max(cl$csize) == cl$membership] } g <- sample_(   gnp(100, 1 / 100),   with_vertex_(size = 3, label = \"\"),   with_graph_(layout = layout_with_fr) ) giant_v <- largest_comp(g) E(g)$color <- \"orange\" E(g)[giant_v %--% giant_v]$color <- \"blue\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/igraph-es-indexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Indexing edge sequences — igraph-es-indexing","title":"Indexing edge sequences — igraph-es-indexing","text":"Edge sequences can indexed much like plain numeric R vector, extras.","code":""},{"path":"/reference/igraph-es-indexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indexing edge sequences — igraph-es-indexing","text":"","code":"# S3 method for igraph.es [(x, ...)"},{"path":"/reference/igraph-es-indexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indexing edge sequences — igraph-es-indexing","text":"x edge sequence ... Indices, see details .","code":""},{"path":"/reference/igraph-es-indexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indexing edge sequences — igraph-es-indexing","text":"Another edge sequence, referring graph.","code":""},{"path":"/reference/igraph-es-indexing.html","id":"multiple-indices","dir":"Reference","previous_headings":"","what":"Multiple indices","title":"Indexing edge sequences — igraph-es-indexing","text":"using multiple indices within bracket, evaluated independently, results concatenated using c() function. E.g. E(g)[1, 2, .inc(1)] equivalent c(E(g)[1], E(g)[2], E(g)[.inc(1)]).","code":""},{"path":"/reference/igraph-es-indexing.html","id":"index-types","dir":"Reference","previous_headings":"","what":"Index types","title":"Indexing edge sequences — igraph-es-indexing","text":"Edge sequences can indexed positive numeric vectors, negative numeric vectors, logical vectors, character vectors: indexed positive numeric vectors, edges given positions sequence selected. indexing regular R atomic vector positive numeric vectors. indexed negative numeric vectors, edges given positions sequence omitted. , indexing regular R atomic vector. indexed logical vector, lengths edge sequence index must match, edges index TRUE selected. Named graphs can indexed character vectors, select edges given names. Note graph may edge names vertex names, can used select edges. Edge names simply used names numeric edge id vector. Vertex names effectively work graphs without multiple edges, must separated | bar character select edges incident two given vertices. See examples .","code":""},{"path":"/reference/igraph-es-indexing.html","id":"edge-attributes","dir":"Reference","previous_headings":"","what":"Edge attributes","title":"Indexing edge sequences — igraph-es-indexing","text":"indexing edge sequences, edge attributes can referred simply using names. E.g. graph weight edge attribute, E(G)[weight > 1] selects edges weight larger one. See examples . Note attribute names mask names variables present calling environment; need look variable want similarly named edge attribute mask , use .env pronoun perform name lookup calling environment. words, use E(g)[.env$weight > 1] make sure weight looked calling environment even edge attribute name. Similarly, can use .data match attribute names .","code":""},{"path":"/reference/igraph-es-indexing.html","id":"special-functions","dir":"Reference","previous_headings":"","what":"Special functions","title":"Indexing edge sequences — igraph-es-indexing","text":"special igraph functions can used expressions indexing edge sequences: .inc takes vertex sequence, selects edges least one incident vertex vertex sequence. .similar .inc(), tails edges considered. .similar .inc(), heads edges considered. \\%--\\% special operator can used select edges two sets vertices. ignores edge directions directed graphs. \\%->\\% similar \\%--\\%, edges left hand side argument, pointing right hand side argument, selected, directed graphs. \\%<-\\% similar \\%--\\%, edges left hand side argument, pointing right hand side argument, selected, directed graphs. Note multiple special functions can used together, regular indices, results concatenated. See examples .","code":""},{"path":[]},{"path":"/reference/igraph-es-indexing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indexing edge sequences — igraph-es-indexing","text":"","code":"# ----------------------------------------------------------------- # Special operators for indexing based on graph structure g <- sample_pa(100, power = 0.3) E(g)[1:3 %--% 2:6] #> + 5/99 edges from c9f09f2: #> [1] 2->1 3->1 4->3 5->1 6->1 E(g)[1:5 %->% 1:6] #> + 4/99 edges from c9f09f2: #> [1] 2->1 3->1 4->3 5->1 E(g)[1:3 %<-% 2:6] #> + 5/99 edges from c9f09f2: #> [1] 2->1 3->1 4->3 5->1 6->1  # ----------------------------------------------------------------- # The edges along the diameter g <- sample_pa(100, directed = FALSE) d <- get_diameter(g) E(g, path = d) #> + 11/99 edges from d798fed: #>  [1] 43--62 30--43 18--30  4--18  1-- 4  1-- 2  2-- 3  3-- 6  6-- 9  9--10 #> [11] 10--70  # ----------------------------------------------------------------- # Select edges based on attributes g <- sample_gnp(20, 3 / 20) %>%   set_edge_attr(\"weight\", value = rnorm(gsize(.))) E(g)[[weight < 0]] #> + 15/32 edges from 8ed2608: #>    tail head tid hid      weight #> 2     8    9   8   9 -0.18691413 #> 4     2   12   2  12 -0.38855432 #> 5     4   12   4  12 -0.72215733 #> 6     7   12   7  12 -1.20432286 #> 8     8   13   8  13 -0.01344193 #> 10    1   14   1  14 -0.18721921 #> 13    4   15   4  15 -1.65206445 #> 15    7   15   7  15 -0.25365557 #> 19    8   16   8  16 -2.27958657 #> 21    9   17   9  17 -0.98796477 #> 23    5   18   5  18 -0.57384456 #> 24   12   18  12  18 -0.07942537 #> 26   11   19  11  19 -0.23016799 #> 29    2   20   2  20 -0.58784686 #> 32   13   20  13  20 -1.60913058  # Indexing with a variable whose name matches the name of an attribute # may fail; use .env to force the name lookup in the parent environment E(g)$x <- E(g)$weight x <- 2 E(g)[.env$x] #> + 1/32 edge from 8ed2608: #> [1] 8--9"},{"path":"/reference/igraph-es-indexing2.html","id":null,"dir":"Reference","previous_headings":"","what":"Select edges and show their metadata — igraph-es-indexing2","title":"Select edges and show their metadata — igraph-es-indexing2","text":"double bracket operator can used edge sequences, print meta-data (edge attributes) edges sequence.","code":""},{"path":"/reference/igraph-es-indexing2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select edges and show their metadata — igraph-es-indexing2","text":"","code":"# S3 method for igraph.es [[(x, ...)"},{"path":"/reference/igraph-es-indexing2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select edges and show their metadata — igraph-es-indexing2","text":"x edge sequence. ... Additional arguments, passed [.","code":""},{"path":"/reference/igraph-es-indexing2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select edges and show their metadata — igraph-es-indexing2","text":"Another edge sequence, metadata printing turned . See details .","code":""},{"path":"/reference/igraph-es-indexing2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select edges and show their metadata — igraph-es-indexing2","text":"Technically, used edge sequences, double bracket operator exactly single bracket operator, resulting edge sequence printed differently: attributes edges sequence printed well. See [.igraph.es indexing edge sequences.","code":""},{"path":[]},{"path":"/reference/igraph-es-indexing2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select edges and show their metadata — igraph-es-indexing2","text":"","code":"g <- make_(   ring(10),   with_vertex_(name = LETTERS[1:10]),   with_edge_(weight = 1:10, color = \"green\") ) E(g) #> + 10/10 edges from 7099e2c (vertex names): #>  [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J E(g)[[]] #> + 10/10 edges from 7099e2c (vertex names): #>    tail head tid hid weight color #> 1     A    B   1   2      1 green #> 2     B    C   2   3      2 green #> 3     C    D   3   4      3 green #> 4     D    E   4   5      4 green #> 5     E    F   5   6      5 green #> 6     F    G   6   7      6 green #> 7     G    H   7   8      7 green #> 8     H    I   8   9      8 green #> 9     I    J   9  10      9 green #> 10    A    J   1  10     10 green E(g)[[.inc(\"A\")]] #> + 2/10 edges from 7099e2c (vertex names): #>    tail head tid hid weight color #> 1     A    B   1   2      1 green #> 10    A    J   1  10     10 green"},{"path":"/reference/igraph-minus.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete vertices or edges from a graph — igraph-minus","title":"Delete vertices or edges from a graph — igraph-minus","text":"Delete vertices edges graph","code":""},{"path":"/reference/igraph-minus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete vertices or edges from a graph — igraph-minus","text":"","code":"# S3 method for igraph -(e1, e2)"},{"path":"/reference/igraph-minus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete vertices or edges from a graph — igraph-minus","text":"e1 Left argument, see details . e2 Right argument, see details .","code":""},{"path":"/reference/igraph-minus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete vertices or edges from a graph — igraph-minus","text":"igraph graph.","code":""},{"path":"/reference/igraph-minus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delete vertices or edges from a graph — igraph-minus","text":"minus operator (‘-’) can used remove vertices edges graph. operation performed selected based type right hand side argument: igraph graph object, difference two graphs calculated, see difference(). numeric character vector, interpreted vector vertex ids specified vertices deleted graph. Example: e2 vertex sequence (e.g. created V() function), vertices deleted graph. edge sequence (e.g. created E() function), edges deleted graph. object created vertex() (vertices()) function, arguments vertices() concatenated result interpreted vector vertex ids. vertices removed graph. object created edge() (edges()) function, arguments edges() concatenated interpreted edges removed graph. Example: object created path() function, path() arguments concatenated interpreted path along edges removed graph. Example:","code":"g <- make_ring(10) V(g)$name <- letters[1:10] g <- g - c(\"a\", \"b\") g <- make_ring(10) V(g)$name <- letters[1:10] E(g)$name <- LETTERS[1:10] g <- g - edge(\"e|f\") g <- g - edge(\"H\") g <- make_ring(10) V(g)$name <- letters[1:10] g <- g - path(\"a\", \"b\", \"c\", \"d\")"},{"path":[]},{"path":"/reference/igraph-vs-attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Query or set attributes of the vertices in a vertex sequence — igraph-vs-attributes","title":"Query or set attributes of the vertices in a vertex sequence — igraph-vs-attributes","text":"$ operator syntactic sugar query set attributes vertices vertex sequence.","code":""},{"path":"/reference/igraph-vs-attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query or set attributes of the vertices in a vertex sequence — igraph-vs-attributes","text":"","code":"# S3 method for igraph.vs [[(x, i) <- value  # S3 method for igraph.vs [(x, i) <- value  # S3 method for igraph.vs $(x, name)  # S3 method for igraph.vs $(x, name) <- value  V(x) <- value"},{"path":"/reference/igraph-vs-attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query or set attributes of the vertices in a vertex sequence — igraph-vs-attributes","text":"x vertex sequence. V<- graph. Index. value New value attribute, vertices vertex sequence. name Name vertex attribute query set.","code":""},{"path":"/reference/igraph-vs-attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query or set attributes of the vertices in a vertex sequence — igraph-vs-attributes","text":"vector list, containing values attribute name vertices vertex sequence. numeric, character logical attributes, vector appropriate type, otherwise list.","code":""},{"path":"/reference/igraph-vs-attributes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query or set attributes of the vertices in a vertex sequence — igraph-vs-attributes","text":"query form $ shortcut vertex_attr(), e.g. V(g)[idx]$attr equivalent vertex_attr(g, attr, V(g)[idx]). assignment form $ shortcut set_vertex_attr(), e.g. V(g)[idx]$attr <- value equivalent g <- set_vertex_attr(g, attr, V(g)[idx], value).","code":""},{"path":[]},{"path":"/reference/igraph-vs-attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query or set attributes of the vertices in a vertex sequence — igraph-vs-attributes","text":"","code":"g <- make_(   ring(10),   with_vertex_(     name = LETTERS[1:10],     color = sample(1:2, 10, replace = TRUE)   ) ) V(g)$name #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" V(g)$color #>  [1] 2 1 2 2 1 2 1 1 2 2 V(g)$frame.color <- V(g)$color  # color vertices of the largest component largest_comp <- function(graph) {   cl <- components(graph)   V(graph)[which.max(cl$csize) == cl$membership] } g <- sample_(   gnp(100, 2 / 100),   with_vertex_(size = 3, label = \"\"),   with_graph_(layout = layout_with_fr) ) giant_v <- largest_comp(g) V(g)$color <- \"blue\" V(g)[giant_v]$color <- \"orange\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/igraph-vs-indexing.html","id":null,"dir":"Reference","previous_headings":"","what":"Indexing vertex sequences — igraph-vs-indexing","title":"Indexing vertex sequences — igraph-vs-indexing","text":"Vertex sequences can indexed much like plain numeric R vector, extras.","code":""},{"path":"/reference/igraph-vs-indexing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indexing vertex sequences — igraph-vs-indexing","text":"","code":"# S3 method for igraph.vs [(x, ..., na_ok = FALSE)"},{"path":"/reference/igraph-vs-indexing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indexing vertex sequences — igraph-vs-indexing","text":"x vertex sequence. ... Indices, see details . na_ok Whether OK NAs vertex sequence.","code":""},{"path":"/reference/igraph-vs-indexing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indexing vertex sequences — igraph-vs-indexing","text":"Another vertex sequence, referring graph.","code":""},{"path":"/reference/igraph-vs-indexing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indexing vertex sequences — igraph-vs-indexing","text":"Vertex sequences can indexed using single bracket double bracket operators, work way. difference double bracket operator marks result printing vertex attributes.","code":""},{"path":"/reference/igraph-vs-indexing.html","id":"multiple-indices","dir":"Reference","previous_headings":"","what":"Multiple indices","title":"Indexing vertex sequences — igraph-vs-indexing","text":"using multiple indices within bracket, evaluated independently, results concatenated using c() function (except na_ok argument, special must named. E.g. V(g)[1, 2, .nei(1)] equivalent c(V(g)[1], V(g)[2], V(g)[.nei(1)]).","code":""},{"path":"/reference/igraph-vs-indexing.html","id":"index-types","dir":"Reference","previous_headings":"","what":"Index types","title":"Indexing vertex sequences — igraph-vs-indexing","text":"Vertex sequences can indexed positive numeric vectors, negative numeric vectors, logical vectors, character vectors: indexed positive numeric vectors, vertices given positions sequence selected. indexing regular R atomic vector positive numeric vectors. indexed negative numeric vectors, vertices given positions sequence omitted. , indexing regular R atomic vector. indexed logical vector, lengths vertex sequence index must match, vertices index TRUE selected. Named graphs can indexed character vectors, select vertices given names.","code":""},{"path":"/reference/igraph-vs-indexing.html","id":"vertex-attributes","dir":"Reference","previous_headings":"","what":"Vertex attributes","title":"Indexing vertex sequences — igraph-vs-indexing","text":"indexing vertex sequences, vertex attributes can referred simply using names. E.g. graph name vertex attribute, V(g)[name == \"foo\"] equivalent V(g)[V(g)$name == \"foo\"]. See examples . Note attribute names mask names variables present calling environment; need look variable want similarly named vertex attribute mask , use .env pronoun perform name lookup calling environment. words, use V(g)[.env$name == \"foo\"] make sure name looked calling environment even vertex attribute name. Similarly, can use .data match attribute names .","code":""},{"path":"/reference/igraph-vs-indexing.html","id":"special-functions","dir":"Reference","previous_headings":"","what":"Special functions","title":"Indexing vertex sequences — igraph-vs-indexing","text":"special igraph functions can used expressions indexing vertex sequences: .nei takes vertex sequence argument selects neighbors vertices. optional mode argument can used select successors (mode=\"\"), predecessors (mode=\"\") directed graphs. .inc Takes edge sequence argument, selects vertices least one incident edge edge sequence. .Similar .inc, considers tails edges. .Similar .inc, considers heads edges. .innei, .outnei .innei(v) shorthand .nei(v, mode = \"\"), .outnei(v) shorthand .nei(v, mode = \"\"). Note multiple special functions can used together, regular indices, results concatenated. See examples .","code":""},{"path":[]},{"path":"/reference/igraph-vs-indexing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indexing vertex sequences — igraph-vs-indexing","text":"","code":"# ----------------------------------------------------------------- # Setting attributes for subsets of vertices largest_comp <- function(graph) {   cl <- components(graph)   V(graph)[which.max(cl$csize) == cl$membership] } g <- sample_(   gnp(100, 2 / 100),   with_vertex_(size = 3, label = \"\"),   with_graph_(layout = layout_with_fr) ) giant_v <- largest_comp(g) V(g)$color <- \"green\" V(g)[giant_v]$color <- \"red\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  # ----------------------------------------------------------------- # nei() special function g <- graph(c(1, 2, 2, 3, 2, 4, 4, 2)) V(g)[.nei(c(2, 4))] #> + 4/4 vertices, from 5dff7c2: #> [1] 1 2 3 4 V(g)[.nei(c(2, 4), \"in\")] #> + 3/4 vertices, from 5dff7c2: #> [1] 1 2 4 V(g)[.nei(c(2, 4), \"out\")] #> + 3/4 vertices, from 5dff7c2: #> [1] 2 3 4  # ----------------------------------------------------------------- # The same with vertex names g <- graph(~ A -+ B, B -+ C:D, D -+ B) V(g)[.nei(c(\"B\", \"D\"))] #> + 4/4 vertices, named, from 6366803: #> [1] A B C D V(g)[.nei(c(\"B\", \"D\"), \"in\")] #> + 3/4 vertices, named, from 6366803: #> [1] A B D V(g)[.nei(c(\"B\", \"D\"), \"out\")] #> + 3/4 vertices, named, from 6366803: #> [1] B C D  # ----------------------------------------------------------------- # Resolving attributes g <- graph(~ A -+ B, B -+ C:D, D -+ B) V(g)$color <- c(\"red\", \"red\", \"green\", \"green\") V(g)[color == \"red\"] #> + 2/4 vertices, named, from 3c67595: #> [1] A B  # Indexing with a variable whose name matches the name of an attribute # may fail; use .env to force the name lookup in the parent environment V(g)$x <- 10:13 x <- 2 V(g)[.env$x] #> + 1/4 vertex, named, from 3c67595: #> [1] B"},{"path":"/reference/igraph-vs-indexing2.html","id":null,"dir":"Reference","previous_headings":"","what":"Select vertices and show their metadata — igraph-vs-indexing2","title":"Select vertices and show their metadata — igraph-vs-indexing2","text":"double bracket operator can used vertex sequences, print meta-data (vertex attributes) vertices sequence.","code":""},{"path":"/reference/igraph-vs-indexing2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select vertices and show their metadata — igraph-vs-indexing2","text":"","code":"# S3 method for igraph.vs [[(x, ...)"},{"path":"/reference/igraph-vs-indexing2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select vertices and show their metadata — igraph-vs-indexing2","text":"x vertex sequence. ... Additional arguments, passed [.","code":""},{"path":"/reference/igraph-vs-indexing2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select vertices and show their metadata — igraph-vs-indexing2","text":"double bracket operator returns another vertex sequence, meta-data (attribute) printing turned . See details .","code":""},{"path":"/reference/igraph-vs-indexing2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select vertices and show their metadata — igraph-vs-indexing2","text":"Technically, used vertex sequences, double bracket operator exactly single bracket operator, resulting vertex sequence printed differently: attributes vertices sequence printed well. See [.igraph.vs indexing vertex sequences.","code":""},{"path":[]},{"path":"/reference/igraph-vs-indexing2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select vertices and show their metadata — igraph-vs-indexing2","text":"","code":"g <- make_ring(10) %>%   set_vertex_attr(\"color\", value = \"red\") %>%   set_vertex_attr(\"name\", value = LETTERS[1:10]) V(g) #> + 10/10 vertices, named, from f117eb9: #>  [1] A B C D E F G H I J V(g)[[]] #> + 10/10 vertices, named, from f117eb9: #>    color name #> 1    red    A #> 2    red    B #> 3    red    C #> 4    red    D #> 5    red    E #> 6    red    F #> 7    red    G #> 8    red    H #> 9    red    I #> 10   red    J V(g)[1:5] #> + 5/10 vertices, named, from f117eb9: #> [1] A B C D E V(g)[[1:5]] #> + 5/10 vertices, named, from f117eb9: #>   color name #> 1   red    A #> 2   red    B #> 3   red    C #> 4   red    D #> 5   red    E"},{"path":"/reference/igraph_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Run igraph demos, step by step — igraph_demo","title":"Run igraph demos, step by step — igraph_demo","text":"Run one accompanying igraph demos, somewhat interactively, using Tk window.","code":""},{"path":"/reference/igraph_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run igraph demos, step by step — igraph_demo","text":"","code":"igraph_demo(which)"},{"path":"/reference/igraph_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run igraph demos, step by step — igraph_demo","text":"given, names available demos listed. Otherwise either filename name igraph demo.","code":""},{"path":"/reference/igraph_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run igraph demos, step by step — igraph_demo","text":"Returns NULL, invisibly.","code":""},{"path":"/reference/igraph_demo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run igraph demos, step by step — igraph_demo","text":"function provides somewhat nicer interface igraph demos come package, standard demo() function. igraph demos divided chunks igraph_demo() runs chunk chunk, possibility inspecting workspace two chunks. tcltk package needed igraph_demo().","code":""},{"path":[]},{"path":"/reference/igraph_demo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run igraph demos, step by step — igraph_demo","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/igraph_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run igraph demos, step by step — igraph_demo","text":"","code":"igraph_demo() #> [1] \"centrality\" \"cohesive\"   \"community\"  \"crashR\"     \"hrg\"        #> [6] \"smallworld\" if (interactive()) {   igraph_demo(\"centrality\") }"},{"path":"/reference/igraph_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for the igraph package — igraph_options","title":"Parameters for the igraph package — igraph_options","text":"igraph parameters (usually) affect behavior many functions. can set whole session via igraph_options().","code":""},{"path":"/reference/igraph_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for the igraph package — igraph_options","text":"","code":"igraph_options(...)  igraph_opt(x, default = NULL)"},{"path":"/reference/igraph_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for the igraph package — igraph_options","text":"... list may given argument, number arguments may name=value form, argument may given. See Value Details sections explanation. x character string holding option name. default specified option set options list, value returned. facilitates retrieving option checking whether set setting separately .","code":""},{"path":"/reference/igraph_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters for the igraph package — igraph_options","text":"igraph_options() returns list old values updated parameters, invisibly. Without arguments, returns values options. igraph_opt(), current value set option x, NULL option unset.","code":""},{"path":"/reference/igraph_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameters for the igraph package — igraph_options","text":"parameter values set via call igraph_options() function remain effect rest session, affecting subsequent behaviour functions igraph package given parameters relevant. offers possibility customizing functioning igraph package, instance insertions appropriate calls igraph_options() load hook package igraph. currently used parameters alphabetical order: add.params Logical scalar, whether add model parameter graphs created various graph constructors. default TRUE. add.vertex.names Logical scalar, whether add vertex names node level indices, like degree, betweenness scores, etc. default TRUE. annotate.plot Logical scalar, whether annotate igraph plots graph's name (name graph attribute, present) main, number vertices edges xlab. Defaults FALSE. dend.plot.type plotting function use plotting community structure dendrograms via plot_dendrogram() edge.attr.comb Specifies edge attributes graph modified. default value list(weight=\"sum\", name=\"concat\", \"ignore\"). See attribute.combination() details . print.edge.attributes Logical constant, whether print edge attributes printing graphs. Defaults FALSE. print.full Logical scalar, whether print.igraph() show graph structure well, summary graph. print.graph.attributes Logical constant, whether print graph attributes printing graphs. Defaults FALSE. print.vertex.attributes Logical constant, whether print vertex attributes printing graphs. Defaults FALSE. return.vs.es Whether functions return set sequence vertices/edges return formal vertex/edge sequence objects. option introduced igraph version 1.0.0 defaults TRUE. package requires old behavior, can set FALSE .onLoad function package, without affecting packages. sparsematrices Whether use Matrix package (sparse) matrices. recommended, user works larger graphs. verbose Logical constant, whether igraph functions talk minimal. Eg. TRUE functions use progress bars computing. Defaults FALSE. vertex.attr.comb Specifies vertex attributes graph modified. default value list(name=\"concat\", \"ignore\") See attribute.combination() details .","code":""},{"path":[]},{"path":"/reference/igraph_options.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parameters for the igraph package — igraph_options","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/igraph_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for the igraph package — igraph_options","text":"","code":"oldval <- igraph_opt(\"verbose\") igraph_options(verbose = TRUE) layout_with_kk(make_ring(10)) #>             [,1]         [,2] #>  [1,]  1.1483519 -0.003216317 #>  [2,]  0.9291475  0.676715503 #>  [3,]  0.3521535  1.097946790 #>  [4,] -0.3622379  1.099581508 #>  [5,] -0.9411536  0.680995251 #>  [6,] -1.1634674  0.002073742 #>  [7,] -0.9442631 -0.677858079 #>  [8,] -0.3672691 -1.099089365 #>  [9,]  0.3471224 -1.100724083 #> [10,]  0.9260381 -0.682137826 igraph_options(verbose = oldval)  oldval <- igraph_options(verbose = TRUE, sparsematrices = FALSE) make_ring(10)[] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    1    0    0    0    0    0    0    0     1 #>  [2,]    1    0    1    0    0    0    0    0    0     0 #>  [3,]    0    1    0    1    0    0    0    0    0     0 #>  [4,]    0    0    1    0    1    0    0    0    0     0 #>  [5,]    0    0    0    1    0    1    0    0    0     0 #>  [6,]    0    0    0    0    1    0    1    0    0     0 #>  [7,]    0    0    0    0    0    1    0    1    0     0 #>  [8,]    0    0    0    0    0    0    1    0    1     0 #>  [9,]    0    0    0    0    0    0    0    1    0     1 #> [10,]    1    0    0    0    0    0    0    0    1     0 igraph_options(oldval) igraph_opt(\"verbose\") #> [1] FALSE"},{"path":"/reference/igraph_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Run package tests — igraph_test","title":"Run package tests — igraph_test","text":"Runs package tests.","code":""},{"path":"/reference/igraph_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run package tests — igraph_test","text":"","code":"igraph_test()"},{"path":"/reference/igraph_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run package tests — igraph_test","text":"Whatever returned test_dir testthat package.","code":""},{"path":"/reference/igraph_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run package tests — igraph_test","text":"testthat package needed run tests. location tests can extracted package via system.file(\"tests\", package=\"igraph\"). function simply calls test_dir function testthat package test directory.","code":""},{"path":[]},{"path":"/reference/igraph_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run package tests — igraph_test","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/igraph_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Query igraph's version string — igraph_version","title":"Query igraph's version string — igraph_version","text":"Returns package version.","code":""},{"path":"/reference/igraph_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query igraph's version string — igraph_version","text":"","code":"igraph_version()"},{"path":"/reference/igraph_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query igraph's version string — igraph_version","text":"character scalar, igraph version string.","code":""},{"path":"/reference/igraph_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query igraph's version string — igraph_version","text":"igraph version string always version R package.","code":""},{"path":[]},{"path":"/reference/igraph_version.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Query igraph's version string — igraph_version","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/igraph_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query igraph's version string — igraph_version","text":"","code":"## Compare to the package version packageDescription(\"igraph\")$Version #> [1] \"1.3.5.9098\" igraph_version() #> [1] \"1.3.5.9098\""},{"path":"/reference/incident.html","id":null,"dir":"Reference","previous_headings":"","what":"Incident edges of a vertex in a graph — incident","title":"Incident edges of a vertex in a graph — incident","text":"Incident edges vertex graph","code":""},{"path":"/reference/incident.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Incident edges of a vertex in a graph — incident","text":"","code":"incident(graph, v, mode = c(\"all\", \"out\", \"in\", \"total\"))"},{"path":"/reference/incident.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Incident edges of a vertex in a graph — incident","text":"graph input graph. v vertex incident edges queried. mode Whether query outgoing (‘’), incoming (‘’) edges, types (‘’). ignored undirected graphs.","code":""},{"path":"/reference/incident.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Incident edges of a vertex in a graph — incident","text":"edge sequence containing incident edges input vertex.","code":""},{"path":[]},{"path":"/reference/incident.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Incident edges of a vertex in a graph — incident","text":"","code":"g <- make_graph(\"Zachary\") incident(g, 1) #> + 16/78 edges from a8af734: #>  [1] 1-- 2 1-- 3 1-- 4 1-- 5 1-- 6 1-- 7 1-- 8 1-- 9 1--11 1--12 1--13 1--14 #> [13] 1--18 1--20 1--22 1--32 incident(g, 34) #> + 17/78 edges from a8af734: #>  [1]  9--34 10--34 14--34 15--34 16--34 19--34 20--34 21--34 23--34 24--34 #> [11] 27--34 28--34 29--34 30--34 31--34 32--34 33--34"},{"path":"/reference/incident_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Incident edges of multiple vertices in a graph — incident_edges","title":"Incident edges of multiple vertices in a graph — incident_edges","text":"function similar incident(), queries multiple vertices .","code":""},{"path":"/reference/incident_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Incident edges of multiple vertices in a graph — incident_edges","text":"","code":"incident_edges(graph, v, mode = c(\"out\", \"in\", \"all\", \"total\"))"},{"path":"/reference/incident_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Incident edges of multiple vertices in a graph — incident_edges","text":"graph Input graph. v vertices query mode Whether query outgoing (‘’), incoming (‘’) edges, types (‘’). ignored undirected graphs.","code":""},{"path":"/reference/incident_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Incident edges of multiple vertices in a graph — incident_edges","text":"list edge sequences.","code":""},{"path":[]},{"path":"/reference/incident_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Incident edges of multiple vertices in a graph — incident_edges","text":"","code":"g <- make_graph(\"Zachary\") incident_edges(g, c(1, 34)) #> [[1]] #> + 16/78 edges from a221520: #>  [1] 1-- 2 1-- 3 1-- 4 1-- 5 1-- 6 1-- 7 1-- 8 1-- 9 1--11 1--12 1--13 1--14 #> [13] 1--18 1--20 1--22 1--32 #>  #> [[2]] #> + 17/78 edges from a221520: #>  [1]  9--34 10--34 14--34 15--34 16--34 19--34 20--34 21--34 23--34 24--34 #> [11] 27--34 28--34 29--34 30--34 31--34 32--34 33--34 #>"},{"path":"/reference/indent_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Indent a printout — indent_print","title":"Indent a printout — indent_print","text":"Indent printout","code":""},{"path":"/reference/indent_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indent a printout — indent_print","text":"","code":"indent_print(..., .indent = \" \", .printer = print)"},{"path":"/reference/indent_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indent a printout — indent_print","text":"... Passed printing function. .indent Character scalar, indent printout . .printer printing function, defaults print.","code":""},{"path":"/reference/indent_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indent a printout — indent_print","text":"first element ..., invisibly.","code":""},{"path":"/reference/intersection.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersection of two or more sets — intersection","title":"Intersection of two or more sets — intersection","text":"S3 generic function. See methods(\"intersection\") actual implementations various S3 classes. Initially implemented igraph graphs igraph vertex edge sequences. See intersection.igraph(), intersection.igraph.vs().","code":""},{"path":"/reference/intersection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersection of two or more sets — intersection","text":"","code":"intersection(...)"},{"path":"/reference/intersection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersection of two or more sets — intersection","text":"... Arguments, number interpretation depends function implements intersection().","code":""},{"path":"/reference/intersection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersection of two or more sets — intersection","text":"Depends function implements method.","code":""},{"path":"/reference/intersection.igraph.es.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersection of edge sequences — intersection.igraph.es","title":"Intersection of edge sequences — intersection.igraph.es","text":"Intersection edge sequences","code":""},{"path":"/reference/intersection.igraph.es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersection of edge sequences — intersection.igraph.es","text":"","code":"# S3 method for igraph.es intersection(...)"},{"path":"/reference/intersection.igraph.es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersection of edge sequences — intersection.igraph.es","text":"... edge sequences take intersection .","code":""},{"path":"/reference/intersection.igraph.es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersection of edge sequences — intersection.igraph.es","text":"edge sequence contains edges appear given sequences, edge exactly .","code":""},{"path":"/reference/intersection.igraph.es.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Intersection of edge sequences — intersection.igraph.es","text":"must belong graph. Note function ‘set’ semantics multiplicity edges lost result.","code":""},{"path":[]},{"path":"/reference/intersection.igraph.es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersection of edge sequences — intersection.igraph.es","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) intersection(E(g)[1:6], E(g)[5:9]) #> + 2/10 edges from 5a3f539 (vertex names): #> [1] E--F F--G"},{"path":"/reference/intersection.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersection of graphs — intersection.igraph","title":"Intersection of graphs — intersection.igraph","text":"intersection two graphs created.  graphs may identical overlapping vertex sets.","code":""},{"path":"/reference/intersection.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersection of graphs — intersection.igraph","text":"","code":"# S3 method for igraph intersection(..., byname = \"auto\", keep.all.vertices = TRUE)"},{"path":"/reference/intersection.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersection of graphs — intersection.igraph","text":"... Graph objects lists graph objects. byname logical scalar, character scalar auto. Whether perform operation based symbolic vertex names. auto, means TRUE graphs named FALSE otherwise. warning generated auto () graphs named. keep..vertices Logical scalar, whether keep vertices appear subset input graphs.","code":""},{"path":"/reference/intersection.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersection of graphs — intersection.igraph","text":"new graph object.","code":""},{"path":"/reference/intersection.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Intersection of graphs — intersection.igraph","text":"intersection() creates intersection two graphs: edges present graphs included.  corresponding operator %s%. byname argument TRUE (auto graphs named), operation performed symbolic vertex names instead internal numeric vertex ids. intersection() keeps attributes graphs. graph, vertex edge attributes copied result. attribute present multiple graphs result name clash, attribute renamed adding suffixes: _1, _2, etc. name vertex attribute treated specially operation performed based symbolic vertex names. case name must present graphs, renamed result graph. error generated input graphs directed others undirected.","code":""},{"path":"/reference/intersection.igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Intersection of graphs — intersection.igraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/intersection.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersection of graphs — intersection.igraph","text":"","code":"## Common part of two social networks net1 <- graph_from_literal(   D - A:B:F:G, A - C - F - A, B - E - G - B, A - B, F - G,   H - F:G, H - I - J ) net2 <- graph_from_literal(D - A:F:Y, B - A - X - F - H - Z, F - Y) print_all(net1 %s% net2) #> IGRAPH 5b8934c UN-- 13 4 --  #> + attr: name (v/c) #> + vertex attributes: #> |      name #> | [1]     D #> | [2]     A #> | [3]     B #> | [4]     F #> | [5]     G #> | [6]     C #> | [7]     E #> | [8]     H #> | [9]     I #> | [10]    J #> | [11]    Y #> | [12]    X #> | [13]    Z #> + edges from 5b8934c (vertex names): #> [1] F--H A--B D--F D--A"},{"path":"/reference/intersection.igraph.vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersection of vertex sequences — intersection.igraph.vs","title":"Intersection of vertex sequences — intersection.igraph.vs","text":"Intersection vertex sequences","code":""},{"path":"/reference/intersection.igraph.vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersection of vertex sequences — intersection.igraph.vs","text":"","code":"# S3 method for igraph.vs intersection(...)"},{"path":"/reference/intersection.igraph.vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersection of vertex sequences — intersection.igraph.vs","text":"... vertex sequences take intersection .","code":""},{"path":"/reference/intersection.igraph.vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersection of vertex sequences — intersection.igraph.vs","text":"vertex sequence contains vertices appear given sequences, vertex exactly .","code":""},{"path":"/reference/intersection.igraph.vs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Intersection of vertex sequences — intersection.igraph.vs","text":"must belong graph. Note function ‘set’ semantics multiplicity vertices lost result.","code":""},{"path":[]},{"path":"/reference/intersection.igraph.vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersection of vertex sequences — intersection.igraph.vs","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) intersection(E(g)[1:6], E(g)[5:9]) #> + 2/10 edges from 93c2b27 (vertex names): #> [1] E--F F--G"},{"path":"/reference/is_chordal.html","id":null,"dir":"Reference","previous_headings":"","what":"Chordality of a graph — is_chordal","title":"Chordality of a graph — is_chordal","text":"graph chordal (triangulated) cycles four nodes chord, edge joining two nodes adjacent cycle. equivalent definition chordless cycles three nodes.","code":""},{"path":"/reference/is_chordal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chordality of a graph — is_chordal","text":"","code":"is_chordal(   graph,   alpha = NULL,   alpham1 = NULL,   fillin = FALSE,   newgraph = FALSE )"},{"path":"/reference/is_chordal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chordality of a graph — is_chordal","text":"graph input graph. may directed, edge directions ignored, algorithm defined undirected graphs. alpha Numeric vector, maximal chardinality ordering vertices. NULL, automatically calculated calling max_cardinality(), alpham1 given.. alpham1 Numeric vector, inverse alpha. NULL, automatically calculated calling max_cardinality(), alpha. fillin Logical scalar, whether calculate fill-edges. newgraph Logical scalar, whether calculate triangulated graph.","code":""},{"path":"/reference/is_chordal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chordality of a graph — is_chordal","text":"list three members: chordal Logical scalar, TRUE iff input graph chordal. fillin requested, numeric vector giving fill-edges. NULL otherwise. newgraph requested, triangulated graph, igraph object. NULL otherwise.","code":""},{"path":"/reference/is_chordal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chordality of a graph — is_chordal","text":"chordality graph decided first performing maximum cardinality search (alpha alpham1 arguments NULL), calculating set fill-edges. set fill-edges empty graph chordal. also true adding fill-edges graph makes chordal.","code":""},{"path":"/reference/is_chordal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Chordality of a graph — is_chordal","text":"Robert E Tarjan Mihalis Yannakakis. (1984). Simple linear-time algorithms test chordality graphs, test acyclicity hypergraphs, selectively reduce acyclic hypergraphs.  SIAM Journal Computation 13, 566--579.","code":""},{"path":[]},{"path":"/reference/is_chordal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chordality of a graph — is_chordal","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/is_chordal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chordality of a graph — is_chordal","text":"","code":"## The examples from the Tarjan-Yannakakis paper g1 <- graph_from_literal(   A - B:C:I, B - A:C:D, C - A:B:E:H, D - B:E:F,   E - C:D:F:H, F - D:E:G, G - F:H, H - C:E:G:I,   I - A:H ) max_cardinality(g1) #> $alpha #> [1] 9 4 6 8 3 5 7 2 1 #>  #> $alpham1 #> + 9/9 vertices, named, from e9f9826: #> [1] G F D B E C H I A #>  is_chordal(g1, fillin = TRUE) #> $chordal #> [1] FALSE #>  #> $fillin #>  [1] 2 6 8 7 5 7 2 7 6 1 7 1 #>  #> $newgraph #> NULL #>   g2 <- graph_from_literal(   A - B:E, B - A:E:F:D, C - E:D:G, D - B:F:E:C:G,   E - A:B:C:D:F, F - B:D:E, G - C:D:H:I, H - G:I:J,   I - G:H:J, J - H:I ) max_cardinality(g2) #> $alpha #>  [1] 10  8  9  6  7  5  4  2  3  1 #>  #> $alpham1 #> + 10/10 vertices, named, from fe3c509: #>  [1] J H I G C F D B E A #>  is_chordal(g2, fillin = TRUE) #> $chordal #> [1] TRUE #>  #> $fillin #> numeric(0) #>  #> $newgraph #> NULL #>"},{"path":"/reference/is_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Directed acyclic graphs — is_dag","title":"Directed acyclic graphs — is_dag","text":"function tests whether given graph DAG, directed acyclic graph.","code":""},{"path":"/reference/is_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directed acyclic graphs — is_dag","text":"","code":"is_dag(graph)"},{"path":"/reference/is_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directed acyclic graphs — is_dag","text":"graph input graph. may undirected, case FALSE reported.","code":""},{"path":"/reference/is_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directed acyclic graphs — is_dag","text":"logical vector length one.","code":""},{"path":"/reference/is_dag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Directed acyclic graphs — is_dag","text":"is_dag() checks whether directed cycle graph. , graph DAG.","code":""},{"path":[]},{"path":"/reference/is_dag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Directed acyclic graphs — is_dag","text":"Tamas Nepusz ntamas@gmail.com C code, Gabor Csardi csardi.gabor@gmail.com R interface.","code":""},{"path":"/reference/is_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directed acyclic graphs — is_dag","text":"","code":"g <- make_tree(10) is_dag(g) #> [1] TRUE g2 <- g + edge(5, 1) is_dag(g2) #> [1] FALSE"},{"path":"/reference/is_degseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a degree sequence is valid for a multi-graph — is_degseq","title":"Check if a degree sequence is valid for a multi-graph — is_degseq","text":"is_degseq() checks whether given vertex degrees (- -degrees directed graphs) can realized graph. Note graph simple, may contain loop multiple edges. undirected graphs, also checks whether sum degrees even. directed graphs, function checks whether lengths two degree vectors equal whether sums also equal. known sufficient necessary conditions degree sequence valid.","code":""},{"path":"/reference/is_degseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a degree sequence is valid for a multi-graph — is_degseq","text":"","code":"is_degseq(out.deg, in.deg = NULL)"},{"path":"/reference/is_degseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a degree sequence is valid for a multi-graph — is_degseq","text":".deg Integer vector, degree sequence undirected graphs, -degree sequence directed graphs. .deg NULL integer vector. undirected graphs, NULL. directed graphs specifies -degrees.","code":""},{"path":"/reference/is_degseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a degree sequence is valid for a multi-graph — is_degseq","text":"logical scalar.","code":""},{"path":"/reference/is_degseq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check if a degree sequence is valid for a multi-graph — is_degseq","text":"Z Kiraly, Recognizing graphic degree sequences generating realizations. TR-2011-11, Egervary Research Group, H-1117, Budapest, Hungary. ISSN 1587-4451 (2012). B. Cloteaux, Real? Fast Graphicality Testing, Comput. Sci. Eng. 17, 91 (2015). . Berger, note characterization digraphic sequences, Discrete Math. 314, 38 (2014). G. Cairns S. Mendan, Degree Sequence Graphs Loops (2013).","code":""},{"path":[]},{"path":"/reference/is_degseq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if a degree sequence is valid for a multi-graph — is_degseq","text":"Tamas Nepusz ntamas@gmail.com Szabolcs Horvat szhorvat@gmail.com","code":""},{"path":"/reference/is_degseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a degree sequence is valid for a multi-graph — is_degseq","text":"","code":"g <- sample_gnp(100, 2 / 100) is_degseq(degree(g)) #> [1] TRUE is_graphical(degree(g)) #> [1] TRUE"},{"path":"/reference/is_directed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a graph is directed — is_directed","title":"Check whether a graph is directed — is_directed","text":"Check whether graph directed","code":""},{"path":"/reference/is_directed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a graph is directed — is_directed","text":"","code":"is_directed(graph)"},{"path":"/reference/is_directed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a graph is directed — is_directed","text":"graph input graph","code":""},{"path":"/reference/is_directed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a graph is directed — is_directed","text":"Logical scalar, whether graph directed.","code":""},{"path":[]},{"path":"/reference/is_directed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a graph is directed — is_directed","text":"","code":"g <- make_ring(10) is_directed(g) #> [1] FALSE  g2 <- make_ring(10, directed = TRUE) is_directed(g2) #> [1] TRUE"},{"path":"/reference/is_graphical.html","id":null,"dir":"Reference","previous_headings":"","what":"Is a degree sequence graphical? — is_graphical","title":"Is a degree sequence graphical? — is_graphical","text":"Determine whether given vertex degrees (- -degrees directed graphs) can realized graph.","code":""},{"path":"/reference/is_graphical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is a degree sequence graphical? — is_graphical","text":"","code":"is_graphical(   out.deg,   in.deg = NULL,   allowed.edge.types = c(\"simple\", \"loops\", \"multi\", \"all\") )"},{"path":"/reference/is_graphical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is a degree sequence graphical? — is_graphical","text":".deg Integer vector, degree sequence undirected graphs, -degree sequence directed graphs. .deg NULL integer vector. undirected graphs, NULL. directed graphs specifies -degrees. allowed.edge.types allowed edge types graph. ‘simple’ means neither loop multiple edges allowed (.e. graph must simple). ‘loops’ means loop edges allowed mutiple edges . ‘multi’ means multiple edges allowed loop edges . ‘’ means loop edges multiple edges allowed.","code":""},{"path":"/reference/is_graphical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is a degree sequence graphical? — is_graphical","text":"logical scalar.","code":""},{"path":"/reference/is_graphical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Is a degree sequence graphical? — is_graphical","text":"classical concept graphicality assumes simple graphs. function can perform check also self-loops, multi-edges, allowed graph.","code":""},{"path":"/reference/is_graphical.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Is a degree sequence graphical? — is_graphical","text":"Hakimi SL: realizability set integers degrees vertices simple graph. J SIAM Appl Math 10:496-506, 1962. PL Erdos, Miklos Z Toroczkai: simple Havel-Hakimi type algorithm realize graphical degree sequences directed graphs.  Electronic Journal Combinatorics 17(1):R66, 2010.","code":""},{"path":[]},{"path":"/reference/is_graphical.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Is a degree sequence graphical? — is_graphical","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/is_graphical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is a degree sequence graphical? — is_graphical","text":"","code":"g <- sample_gnp(100, 2 / 100) is_degseq(degree(g)) #> [1] TRUE is_graphical(degree(g)) #> [1] TRUE"},{"path":"/reference/is_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this object an igraph graph? — is_igraph","title":"Is this object an igraph graph? — is_igraph","text":"object igraph graph?","code":""},{"path":"/reference/is_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this object an igraph graph? — is_igraph","text":"","code":"is_igraph(graph)"},{"path":"/reference/is_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this object an igraph graph? — is_igraph","text":"graph R object.","code":""},{"path":"/reference/is_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is this object an igraph graph? — is_igraph","text":"logical constant, TRUE argument graph graph object.","code":""},{"path":"/reference/is_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Is this object an igraph graph? — is_igraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/is_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is this object an igraph graph? — is_igraph","text":"","code":"g <- make_ring(10) is_igraph(g) #> [1] TRUE is_igraph(numeric(10)) #> [1] FALSE"},{"path":"/reference/is_min_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimal vertex separators — is_min_separator","title":"Minimal vertex separators — is_min_separator","text":"Check whether given set vertices minimal vertex separator.","code":""},{"path":"/reference/is_min_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimal vertex separators — is_min_separator","text":"","code":"is_min_separator(graph, candidate)"},{"path":"/reference/is_min_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimal vertex separators — is_min_separator","text":"graph input graph. may directed, edge directions ignored. candidate numeric vector giving vertex ids candidate separator.","code":""},{"path":"/reference/is_min_separator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimal vertex separators — is_min_separator","text":"logical scalar, whether supplied vertex set (minimal) vertex separator .","code":""},{"path":"/reference/is_min_separator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimal vertex separators — is_min_separator","text":"is_min_separator() decides whether supplied vertex set minimal vertex separator. minimal vertex separator vertex separator, none subsets vertex separator. special case fully connected graph \\(n\\) vertices, set \\(n-1\\) vertices considered vertex separator.","code":""},{"path":[]},{"path":"/reference/is_min_separator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimal vertex separators — is_min_separator","text":"","code":"# The graph from the Moody-White paper mw <- graph_from_literal(   1 - 2:3:4:5:6, 2 - 3:4:5:7, 3 - 4:6:7, 4 - 5:6:7,   5 - 6:7:21, 6 - 7, 7 - 8:11:14:19, 8 - 9:11:14, 9 - 10,   10 - 12:13, 11 - 12:14, 12 - 16, 13 - 16, 14 - 15, 15 - 16,   17 - 18:19:20, 18 - 20:21, 19 - 20:22:23, 20 - 21,   21 - 22:23, 22 - 23 )  # Cohesive subgraphs mw1 <- induced_subgraph(mw, as.character(c(1:7, 17:23))) mw2 <- induced_subgraph(mw, as.character(7:16)) mw3 <- induced_subgraph(mw, as.character(17:23)) mw4 <- induced_subgraph(mw, as.character(c(7, 8, 11, 14))) mw5 <- induced_subgraph(mw, as.character(1:7))  check.sep <- function(G) {   sep <- min_separators(G)   sapply(sep, is_min_separator, graph = G) }  check.sep(mw) #> [1] TRUE check.sep(mw1) #> [1] TRUE TRUE TRUE TRUE check.sep(mw2) #> [1] TRUE TRUE TRUE check.sep(mw3) #> [1] TRUE check.sep(mw4) #> [1] FALSE FALSE FALSE FALSE check.sep(mw5) #> [1] TRUE TRUE TRUE"},{"path":"/reference/is_named.html","id":null,"dir":"Reference","previous_headings":"","what":"Named graphs — is_named","title":"Named graphs — is_named","text":"igraph graph named, symbolic name associated vertices.","code":""},{"path":"/reference/is_named.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Named graphs — is_named","text":"","code":"is_named(graph)"},{"path":"/reference/is_named.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Named graphs — is_named","text":"graph input graph.","code":""},{"path":"/reference/is_named.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Named graphs — is_named","text":"logical scalar.","code":""},{"path":"/reference/is_named.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Named graphs — is_named","text":"igraph vertices can always identified specified via numeric vertex ids. , however, always convenient, many cases exist symbolic ids correspond vertices. allow flexible identification vertices, one can assign vertex attribute called ‘name’ igraph graph. , symbolic vertex names can used igraph functions, instead numeric ids. Note uniqueness vertex names currently enforced igraph, check , assigning vertex names.","code":""},{"path":"/reference/is_named.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Named graphs — is_named","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/is_named.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Named graphs — is_named","text":"","code":"g <- make_ring(10) is_named(g) #> [1] FALSE V(g)$name <- letters[1:10] is_named(g) #> [1] TRUE neighbors(g, \"a\") #> + 2/10 vertices, named, from b8cbaa8: #> [1] b j"},{"path":"/reference/is_printer_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this a printer callback? — is_printer_callback","title":"Is this a printer callback? — is_printer_callback","text":"printer callback?","code":""},{"path":"/reference/is_printer_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this a printer callback? — is_printer_callback","text":"","code":"is_printer_callback(x)"},{"path":"/reference/is_printer_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this a printer callback? — is_printer_callback","text":"x R object.","code":""},{"path":[]},{"path":"/reference/is_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertex separators — is_separator","title":"Vertex separators — is_separator","text":"Check whether given set vertices vertex separator.","code":""},{"path":"/reference/is_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex separators — is_separator","text":"","code":"is_separator(graph, candidate)"},{"path":"/reference/is_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex separators — is_separator","text":"graph input graph. may directed, edge directions ignored. candidate numeric vector giving vertex ids candidate separator.","code":""},{"path":"/reference/is_separator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertex separators — is_separator","text":"logical scalar, whether supplied vertex set (minimal) vertex separator .","code":""},{"path":"/reference/is_separator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertex separators — is_separator","text":"is_separator() decides whether supplied vertex set vertex separator. vertex set vertex separator removal results disconnected graph. special case fully connected graph \\(n\\) vertices, set \\(n-1\\) vertices considered vertex separator.","code":""},{"path":[]},{"path":"/reference/is_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide whether a graph is a tree. — is_tree","title":"Decide whether a graph is a tree. — is_tree","text":"is_tree() decides whether graph tree, optionally returns possible root vertex graph tree.","code":""},{"path":"/reference/is_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide whether a graph is a tree. — is_tree","text":"","code":"is_tree(graph, mode = c(\"out\", \"in\", \"all\", \"total\"), details = FALSE)"},{"path":"/reference/is_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide whether a graph is a tree. — is_tree","text":"graph igraph graph object mode Whether consider edge directions directed graph. ‘’ ignores edge directions; ‘’ requires edges oriented outwards root, ‘’ requires edges oriented towards root. details Whether return whether graph tree (FALSE) also possible root (TRUE)","code":""},{"path":"/reference/is_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide whether a graph is a tree. — is_tree","text":"details FALSE, logical value indicates whether graph tree. details TRUE, named list two entries: res Logical value indicates whether graph tree. root root vertex tree; undefined graph tree.","code":""},{"path":"/reference/is_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decide whether a graph is a tree. — is_tree","text":"undirected graph tree connected cycles. directed case, possible additional requirement edges oriented away root (-tree arborescence) edges oriented towards root (-tree anti-arborescence). test can controlled using mode parameter. convention, null graph (.e. graph vertices) considered tree.","code":""},{"path":[]},{"path":"/reference/is_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decide whether a graph is a tree. — is_tree","text":"","code":"g <- make_tree(7, 2) is_tree(g) #> [1] TRUE is_tree(g, details = TRUE) #> $res #> [1] TRUE #>  #> $root #> + 1/7 vertex, from f1935a2: #> [1] 1 #>"},{"path":"/reference/is_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted graphs — is_weighted","title":"Weighted graphs — is_weighted","text":"weighted graphs, real number assigned (directed undirected) edge.","code":""},{"path":"/reference/is_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted graphs — is_weighted","text":"","code":"is_weighted(graph)"},{"path":"/reference/is_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted graphs — is_weighted","text":"graph input graph.","code":""},{"path":"/reference/is_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted graphs — is_weighted","text":"logical scalar.","code":""},{"path":"/reference/is_weighted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted graphs — is_weighted","text":"igraph edge weights represented via edge attribute, called ‘weight’. is_weighted() function checks attribute exists. (even checks numeric edge attribute.) Edge weights used different purposes different functions. E.g. shortest path functions use cost path; community finding methods use strength relationship two vertices, etc. Check manual pages functions working weighted graphs details.","code":""},{"path":"/reference/is_weighted.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Weighted graphs — is_weighted","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/is_weighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted graphs — is_weighted","text":"","code":"g <- make_ring(10) shortest_paths(g, 8, 2) #> $vpath #> $vpath[[1]] #> + 5/10 vertices, from d072f20: #> [1]  8  9 10  1  2 #>  #>  #> $epath #> NULL #>  #> $predecessors #> NULL #>  #> $inbound_edges #> NULL #>  E(g)$weight <- seq_len(ecount(g)) shortest_paths(g, 8, 2) #> $vpath #> $vpath[[1]] #> + 7/10 vertices, from d072f20: #> [1] 8 7 6 5 4 3 2 #>  #>  #> $epath #> NULL #>  #> $predecessors #> NULL #>  #> $inbound_edges #> NULL #>"},{"path":"/reference/isomorphic.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide if two graphs are isomorphic — isomorphic","title":"Decide if two graphs are isomorphic — isomorphic","text":"Decide two graphs isomorphic","code":""},{"path":"/reference/isomorphic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide if two graphs are isomorphic — isomorphic","text":"","code":"isomorphic(graph1, graph2, method = c(\"auto\", \"direct\", \"vf2\", \"bliss\"), ...)  is_isomorphic_to(   graph1,   graph2,   method = c(\"auto\", \"direct\", \"vf2\", \"bliss\"),   ... )"},{"path":"/reference/isomorphic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide if two graphs are isomorphic — isomorphic","text":"graph1 first graph. graph2 second graph. method method use. Possible values: ‘auto’, ‘direct’, ‘vf2’, ‘bliss’. See details . ... Additional arguments, passed various methods.","code":""},{"path":"/reference/isomorphic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide if two graphs are isomorphic — isomorphic","text":"Logical scalar, TRUE graphs isomorphic.","code":""},{"path":"/reference/isomorphic.html","id":"-auto-method","dir":"Reference","previous_headings":"","what":"‘auto’ method","title":"Decide if two graphs are isomorphic — isomorphic","text":"tries select appropriate method based two graphs. algorithm uses: two graphs agree order size (.e. number vertices edges), return FALSE. graphs three four vertices, ‘direct’ method used. graphs directed, ‘vf2’ method used. Otherwise ‘bliss’ method used.","code":""},{"path":"/reference/isomorphic.html","id":"-direct-method","dir":"Reference","previous_headings":"","what":"‘direct’ method","title":"Decide if two graphs are isomorphic — isomorphic","text":"method works graphs three four vertices, based pre-calculated stored table. extra arguments.","code":""},{"path":"/reference/isomorphic.html","id":"-vf-method","dir":"Reference","previous_headings":"","what":"‘vf2’ method","title":"Decide if two graphs are isomorphic — isomorphic","text":"method uses VF2 algorithm Cordella, Foggia et al., see references . supports vertex edge colors following extra arguments: vertex.color1, vertex.color2 Optional integer vectors giving colors vertices colored graph isomorphism. given, graph “color” vertex attribute, used. want ignore attributes, supply NULL arguments. See also examples . edge.color1, edge.color2 Optional integer vectors giving colors edges edge-colored (sub)graph isomorphism. given, graph “color” edge attribute, used. want ignore attributes, supply NULL arguments.","code":""},{"path":"/reference/isomorphic.html","id":"-bliss-method","dir":"Reference","previous_headings":"","what":"‘bliss’ method","title":"Decide if two graphs are isomorphic — isomorphic","text":"Uses BLISS algorithm Junttila Kaski, works undirected graphs. graphs canonical_permutation() permute() function called transfer canonical form; finally canonical forms compared. Extra arguments: sh Character constant, heuristics use BLISS algorithm graph1 graph2. See sh argument canonical_permutation() possible values. sh defaults ‘fm’.","code":""},{"path":"/reference/isomorphic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Decide if two graphs are isomorphic — isomorphic","text":"Tommi Junttila Petteri Kaski: Engineering Efficient Canonical Labeling Tool Large Sparse Graphs, Proceedings Ninth Workshop Algorithm Engineering Experiments Fourth Workshop Analytic Algorithms Combinatorics. 2007. LP Cordella,  P Foggia, C Sansone, M Vento: improved algorithm matching large graphs, Proc. 3rd IAPR TC-15 Workshop Graphbased Representations Pattern Recognition, 149--159, 2001.","code":""},{"path":[]},{"path":"/reference/isomorphic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decide if two graphs are isomorphic — isomorphic","text":"","code":"# create some non-isomorphic graphs g1 <- graph_from_isomorphism_class(3, 10) g2 <- graph_from_isomorphism_class(3, 11) isomorphic(g1, g2) #> [1] FALSE  # create two isomorphic graphs, by permuting the vertices of the first g1 <- barabasi.game(30, m = 2, directed = FALSE) g2 <- permute(g1, sample(vcount(g1))) # should be TRUE isomorphic(g1, g2) #> [1] TRUE isomorphic(g1, g2, method = \"bliss\") #> [1] TRUE isomorphic(g1, g2, method = \"vf2\") #> [1] TRUE  # colored graph isomorphism g1 <- make_ring(10) g2 <- make_ring(10) isomorphic(g1, g2) #> [1] TRUE  V(g1)$color <- rep(1:2, length = vcount(g1)) V(g2)$color <- rep(2:1, length = vcount(g2)) # consider colors by default count_isomorphisms(g1, g2) #> [1] 10 # ignore colors count_isomorphisms(g1, g2,   vertex.color1 = NULL,   vertex.color2 = NULL ) #> [1] 20"},{"path":"/reference/isomorphism_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Isomorphism class of a graph — isomorphism_class","title":"Isomorphism class of a graph — isomorphism_class","text":"isomorphism class non-negative integer number. Graphs (number vertices) isomorphism class isomorphic isomorphic graphs always isomorphism class. Currently can handle directed graphs 3 4 vertices undirected graphs 3 6 vertices.","code":""},{"path":"/reference/isomorphism_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isomorphism class of a graph — isomorphism_class","text":"","code":"isomorphism_class(graph, v)"},{"path":"/reference/isomorphism_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isomorphism class of a graph — isomorphism_class","text":"graph input graph. v Optionally vertex sequence. missing, induced subgraph input graph, consisting vertices, used.","code":""},{"path":"/reference/isomorphism_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isomorphism class of a graph — isomorphism_class","text":"integer number.","code":""},{"path":[]},{"path":"/reference/isomorphism_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isomorphism class of a graph — isomorphism_class","text":"","code":"# create some non-isomorphic graphs g1 <- graph_from_isomorphism_class(3, 10) g2 <- graph_from_isomorphism_class(3, 11) isomorphism_class(g1) #> [1] 10 isomorphism_class(g2) #> [1] 11 isomorphic(g1, g2) #> [1] FALSE"},{"path":"/reference/isomorphisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate all isomorphic mappings between the vertices of two graphs — isomorphisms","title":"Calculate all isomorphic mappings between the vertices of two graphs — isomorphisms","text":"Calculate isomorphic mappings vertices two graphs","code":""},{"path":"/reference/isomorphisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate all isomorphic mappings between the vertices of two graphs — isomorphisms","text":"","code":"isomorphisms(graph1, graph2, method = \"vf2\", ...)"},{"path":"/reference/isomorphisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate all isomorphic mappings between the vertices of two graphs — isomorphisms","text":"graph1 first graph. graph2 second graph. method Currently ‘vf2’ supported, see isomorphic() details extra arguments. ... Extra arguments, passed various methods.","code":""},{"path":"/reference/isomorphisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate all isomorphic mappings between the vertices of two graphs — isomorphisms","text":"list vertex sequences, corresponding mappings first graph second.","code":""},{"path":[]},{"path":"/reference/ivs.html","id":null,"dir":"Reference","previous_headings":"","what":"Independent vertex sets — ivs","title":"Independent vertex sets — ivs","text":"vertex set called independent edges two vertices . functions find independent vertex sets undirected graphs","code":""},{"path":"/reference/ivs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Independent vertex sets — ivs","text":"","code":"ivs(graph, min = NULL, max = NULL)"},{"path":"/reference/ivs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Independent vertex sets — ivs","text":"graph input graph, directed graphs considered undirected, loop edges multiple edges ignored. min Numeric constant, limit minimum size independent vertex sets find. NULL means limit. max Numeric constant, limit maximum size independent vertex sets find. NULL means limit.","code":""},{"path":"/reference/ivs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Independent vertex sets — ivs","text":"ivs(), largest_ivs() maximal_ivs() return list containing numeric vertex ids, list element independent vertex set. ivs_size() returns integer constant.","code":""},{"path":"/reference/ivs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Independent vertex sets — ivs","text":"ivs() finds independent vertex sets network, obeying size limitations given min max arguments. largest_ivs() finds largest independent vertex sets graph. independent vertex set largest independent vertex set vertices. maximal_ivs() finds maximal independent vertex sets graph. independent vertex set maximal extended larger independent vertex set. largest independent vertex sets maximal, opposite always true. independece.number calculate size largest independent vertex set(s). functions use algorithm described Tsukiyama et al., see reference .","code":""},{"path":"/reference/ivs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Independent vertex sets — ivs","text":"S. Tsukiyama, M. Ide, H. Ariyoshi . Shirawaka. new algorithm generating maximal independent sets. SIAM J Computing, 6:505--517, 1977.","code":""},{"path":[]},{"path":"/reference/ivs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Independent vertex sets — ivs","text":"Tamas Nepusz ntamas@gmail.com ported Nauty Graph Library Keith Briggs (http://keithbriggs.info/) Gabor Csardi csardi.gabor@gmail.com wrote R interface manual page.","code":""},{"path":"/reference/ivs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Independent vertex sets — ivs","text":"","code":"# Do not run, takes a couple of seconds  # A quite dense graph set.seed(42) g <- sample_gnp(100, 0.9) ivs_size(g) #> [1] 4 ivs(g, min = ivs_size(g)) #> [[1]] #> + 4/100 vertices, from c0065ac: #> [1]  7 37 55 56 #>  #> [[2]] #> + 4/100 vertices, from c0065ac: #> [1]  7 55 56 69 #>  #> [[3]] #> + 4/100 vertices, from c0065ac: #> [1]  7 56 69 74 #>  #> [[4]] #> + 4/100 vertices, from c0065ac: #> [1]  8 15 73 80 #>  #> [[5]] #> + 4/100 vertices, from c0065ac: #> [1]  8 15 73 84 #>  #> [[6]] #> + 4/100 vertices, from c0065ac: #> [1] 13 16 37 40 #>  #> [[7]] #> + 4/100 vertices, from c0065ac: #> [1] 21 32 45 61 #>  #> [[8]] #> + 4/100 vertices, from c0065ac: #> [1] 22 55 56 64 #>  #> [[9]] #> + 4/100 vertices, from c0065ac: #> [1] 23 69 75 90 #>  largest_ivs(g) #> [[1]] #> + 4/100 vertices, from c0065ac: #> [1] 21 32 45 61 #>  #> [[2]] #> + 4/100 vertices, from c0065ac: #> [1]  7 37 55 56 #>  #> [[3]] #> + 4/100 vertices, from c0065ac: #> [1]  7 55 56 69 #>  #> [[4]] #> + 4/100 vertices, from c0065ac: #> [1]  7 56 69 74 #>  #> [[5]] #> + 4/100 vertices, from c0065ac: #> [1]  8 15 73 80 #>  #> [[6]] #> + 4/100 vertices, from c0065ac: #> [1]  8 15 73 84 #>  #> [[7]] #> + 4/100 vertices, from c0065ac: #> [1] 22 55 56 64 #>  #> [[8]] #> + 4/100 vertices, from c0065ac: #> [1] 23 69 75 90 #>  #> [[9]] #> + 4/100 vertices, from c0065ac: #> [1] 13 16 37 40 #>  # Empty graph induced_subgraph(g, largest_ivs(g)[[1]]) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> numeric(0) #>  #> [[4]] #> numeric(0) #>  #> [[5]] #> numeric(0) #>  #> [[6]] #> numeric(0) #>  #> [[7]] #> [1] 0 0 0 0 0 #>  #> [[8]] #> [1] 0 0 0 0 0 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Erdos-Renyi (gnp) graph\" #>  #> [[9]][[2]]$type #> [1] \"gnp\" #>  #> [[9]][[2]]$loops #> [1] FALSE #>  #> [[9]][[2]]$p #> [1] 0.9 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbdd28d58> #>  #> attr(,\"class\") #> [1] \"igraph\"  length(maximal_ivs(g)) #> [1] 326"},{"path":"/reference/keeping_degseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph rewiring while preserving the degree distribution — keeping_degseq","title":"Graph rewiring while preserving the degree distribution — keeping_degseq","text":"function can used together rewire() randomly rewire edges preserving original graph's degree distribution.","code":""},{"path":"/reference/keeping_degseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph rewiring while preserving the degree distribution — keeping_degseq","text":"","code":"keeping_degseq(loops = FALSE, niter = 100)"},{"path":"/reference/keeping_degseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph rewiring while preserving the degree distribution — keeping_degseq","text":"loops Whether allow destroying creating loop edges. niter Number rewiring trials perform.","code":""},{"path":"/reference/keeping_degseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph rewiring while preserving the degree distribution — keeping_degseq","text":"rewiring algorithm chooses two arbitrary edges step ((,b) (c,d)) substitutes (,d) (c,b), already exists graph. algorithm create multiple edges.","code":""},{"path":[]},{"path":"/reference/keeping_degseq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph rewiring while preserving the degree distribution — keeping_degseq","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/keeping_degseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph rewiring while preserving the degree distribution — keeping_degseq","text":"","code":"g <- make_ring(10) g %>%   rewire(keeping_degseq(niter = 20)) %>%   degree() #>  [1] 2 2 2 2 2 2 2 2 2 2 print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10))) #> IGRAPH fa2cd4c U--- 10 10 -- Ring graph #> + attr: name (g/c), mutual (g/l), circular (g/l) #> + graph attributes: #> | + name: #> |   [1] \"Ring graph\" #> | + mutual: #> |   [1] FALSE #> | + circular: #> |   [1] TRUE #> + edges from fa2cd4c: #>  [1] 4-- 7 4-- 5 3-- 5 6-- 9 2-- 9 1-- 8 3-- 6 8--10 1-- 2 7--10"},{"path":"/reference/knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Average nearest neighbor degree — knn","title":"Average nearest neighbor degree — knn","text":"Calculate average nearest neighbor degree given vertices quantity function vertex degree","code":""},{"path":"/reference/knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average nearest neighbor degree — knn","text":"","code":"knn(   graph,   vids = V(graph),   mode = c(\"all\", \"out\", \"in\", \"total\"),   neighbor.degree.mode = c(\"all\", \"out\", \"in\", \"total\"),   weights = NULL )"},{"path":"/reference/knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average nearest neighbor degree — knn","text":"graph input graph. may directed. vids vertices calculation performed. Normally includes vertices. Note, vertices given , ‘knn’ ‘knnk’ calculated based given vertices . mode Character constant indicate type neighbors consider directed graphs. considers -neighbors, considers -neighbors ignores edge directions. neighbor.degree.mode type degree average directed graphs. averages -degrees, averages -degrees ignores edge directions degree calculation. weights Weight vector. graph weight edge attribute, used default. argument given, vertex strength (see strength()) used instead vertex degree. note knnk still given function normal vertex degree. Weights used calculate weighted degree (also called strength()) instead degree.","code":""},{"path":"/reference/knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average nearest neighbor degree — knn","text":"list two members: knn numeric vector giving average nearest neighbor degree vertices vids. knnk numeric vector, length maximum (total) vertex degree graph. first element average nearest neighbor degree vertices degree one, etc.","code":""},{"path":"/reference/knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Average nearest neighbor degree — knn","text":"Note zero degree vertices answer ‘knn’ NaN (zero divided zero), true ‘knnk’ given degree never appears network. weighted version computes weighted average neighbor degrees k_nn_u = 1/s_u sum_v w_uv k_v, s_u = sum_v w_uv sum incident edge weights vertex u, .e. strength. sum runs neighbors v vertex u indicated mode. w_uv denotes weighted adjacency matrix k_v neighbors' degree, specified neighbor_degree_mode.","code":""},{"path":"/reference/knn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Average nearest neighbor degree — knn","text":"Alain Barrat, Marc Barthelemy, Romualdo Pastor-Satorras, Alessandro Vespignani: architecture complex weighted networks, Proc. Natl. Acad. Sci. USA 101, 3747 (2004)","code":""},{"path":[]},{"path":"/reference/knn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Average nearest neighbor degree — knn","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average nearest neighbor degree — knn","text":"","code":"# Some trivial ones g <- make_ring(10) knn(g) #> $knn #>  [1] 2 2 2 2 2 2 2 2 2 2 #>  #> $knnk #> [1] NaN   2 #>  g2 <- make_star(10) knn(g2) #> $knn #>  [1] 1 9 9 9 9 9 9 9 9 9 #>  #> $knnk #> [1]   9 NaN NaN NaN NaN NaN NaN NaN   1 #>   # A scale-free one, try to plot 'knnk' g3 <- sample_pa(1000, m = 5) knn(g3) #> $knn #>    [1]  14.560241  14.943038  13.635359  14.597183  16.182759  71.538462 #>    [7]  18.277487  16.269841  85.095238  66.800000  22.737864  19.278912 #>   [13]  32.855072  27.060976  50.675676  48.923077  30.457627  27.850000 #>   [19]  22.421053  96.733333  30.268657 115.583333  34.142857  19.081395 #>   [25]  48.473684  61.923077  54.028571  47.676471  53.241379  86.687500 #>   [31]  59.375000  33.931818  64.625000  18.161765 117.545455  56.407407 #>   [37]  28.416667  40.576923  46.523810  35.156250  33.464286  84.300000 #>   [43]  43.580645  65.411765  45.285714 203.333333  34.970588  86.611111 #>   [49]  65.470588  59.000000 214.000000  38.000000 171.285714  70.476190 #>   [55]  54.906250  28.959184  83.111111 142.545455  42.382353 157.375000 #>   [61]  72.142857  59.040000  45.400000  91.666667 118.888889 275.200000 #>   [67]  50.300000  66.562500 143.200000  30.833333 135.333333  82.250000 #>   [73]  68.333333  28.242424  48.550000  60.894737 118.333333  62.000000 #>   [79] 224.166667  28.152174  58.210526 243.400000  39.121951 142.714286 #>   [85]  43.222222 199.200000  84.307692 138.333333  79.090909   9.758621 #>   [91] 174.000000 100.636364  78.666667 101.250000  88.000000  39.571429 #>   [97]  36.052632  54.588235  79.583333 154.333333 170.500000  85.600000 #>  [103] 109.714286 126.777778  49.625000  75.181818 274.400000  72.363636 #>  [109]  79.142857  46.500000 158.166667 206.500000  58.958333 120.600000 #>  [115] 252.200000 124.000000 117.750000 211.333333  86.600000  27.562500 #>  [121]  92.428571  43.388889  94.166667 113.428571 119.714286 168.800000 #>  [127]  39.142857  98.000000  66.285714 192.200000 135.222222  44.166667 #>  [133]  99.250000 100.833333  19.294118 120.571429 124.571429  82.636364 #>  [139] 146.500000 152.000000 122.666667  31.611111  38.444444 155.000000 #>  [145]  65.200000 102.000000 112.428571 168.000000 196.285714 117.250000 #>  [151] 174.200000  89.857143  53.500000 176.666667 161.600000 157.666667 #>  [157]  86.454545 237.400000 193.833333 168.666667  62.714286 107.636364 #>  [163]  48.625000 180.400000 170.000000 182.285714  56.250000 165.000000 #>  [169]  89.615385  69.000000 117.111111 103.800000 138.375000 112.375000 #>  [175]  85.250000 222.000000 174.200000  91.166667 147.800000 105.571429 #>  [181]  81.400000  83.615385 110.833333 127.400000  91.777778 115.625000 #>  [187] 156.444444 135.500000 117.666667  21.200000  49.214286  80.100000 #>  [193] 124.400000  63.076923 183.666667 138.222222  63.076923 101.222222 #>  [199]  48.800000  91.625000  44.166667 123.222222  26.333333 152.833333 #>  [205]  86.200000 114.000000 158.200000  67.500000  99.142857  46.285714 #>  [211]  97.600000  71.500000  99.750000  70.200000 135.666667 184.571429 #>  [217] 203.000000  49.000000 217.600000 153.000000 188.400000 176.666667 #>  [223]  29.500000 143.875000 162.000000 229.000000  77.714286  59.166667 #>  [229] 115.125000 136.500000 117.428571  97.200000 177.600000 230.000000 #>  [235] 196.000000 117.400000  51.000000  99.454545  39.583333  77.538462 #>  [241]  95.400000 100.555556 191.400000 223.400000  93.000000 118.600000 #>  [247] 116.125000 178.000000 167.625000 128.600000  61.400000  95.428571 #>  [253] 198.000000  87.000000  97.400000  25.461538 225.600000  95.400000 #>  [259] 172.200000 158.714286  77.000000 133.500000 143.400000  73.000000 #>  [265] 186.833333 144.666667 122.333333 117.800000 112.600000  93.545455 #>  [271]  83.888889  91.615385 121.600000 108.200000 119.666667  96.200000 #>  [277] 194.000000 167.333333 165.600000 147.200000  99.400000 162.285714 #>  [283]  62.230769 134.400000 119.200000  30.666667  59.714286 125.200000 #>  [289] 139.000000  53.625000  20.714286  88.666667 146.800000  68.125000 #>  [295] 190.500000 109.428571  70.000000 195.500000  86.800000  48.800000 #>  [301]  24.166667  77.818182  77.375000  83.125000 118.400000  18.125000 #>  [307]  52.000000  53.222222 114.142857 159.800000  68.500000 179.600000 #>  [313]  90.800000 174.000000  95.600000  99.375000 171.400000  79.800000 #>  [319]  74.833333  77.666667  69.000000 113.333333 108.800000 298.200000 #>  [325] 155.500000 233.200000 125.666667 107.285714  79.428571  34.888889 #>  [331]  53.700000 165.400000  88.000000 105.285714  57.222222  87.600000 #>  [337] 160.800000 152.000000 121.833333 105.571429 155.857143 122.000000 #>  [343] 179.142857 217.200000  75.333333  65.500000 129.000000 184.333333 #>  [349]  73.900000  70.111111 122.666667  18.000000  69.181818  84.200000 #>  [355]  41.833333  86.250000  59.500000  72.166667 122.800000 104.333333 #>  [361] 116.600000 123.142857  89.400000  95.400000 119.000000  69.250000 #>  [367] 107.000000  98.000000 109.000000 109.444444  96.666667 214.400000 #>  [373] 125.666667 171.200000  44.000000  26.800000  80.400000 116.666667 #>  [379] 100.800000  74.375000 182.000000 231.800000 134.800000 163.333333 #>  [385] 161.833333 205.000000  87.833333 150.000000  64.142857 131.000000 #>  [391] 139.000000 146.000000 196.833333 117.000000 151.200000  73.200000 #>  [397] 174.857143 114.000000  30.714286  42.833333  82.800000 135.200000 #>  [403]  36.000000  81.250000  54.700000 222.000000 102.142857  90.833333 #>  [409]  79.375000 123.400000  92.000000  77.571429 197.333333  73.428571 #>  [415] 106.000000 108.285714 116.800000  69.333333  32.200000  67.428571 #>  [421] 152.800000 156.800000 114.166667 113.714286 111.142857 205.000000 #>  [427] 140.000000 183.000000 139.333333 129.500000 272.800000 132.500000 #>  [433] 156.800000 121.857143 135.600000 215.400000  76.833333 131.400000 #>  [439] 109.428571 117.000000 128.833333 138.000000 156.000000  93.625000 #>  [445]  84.625000  63.000000  77.600000 184.666667 157.000000  47.800000 #>  [451] 126.500000  81.166667 144.833333 191.400000  29.833333  73.750000 #>  [457] 105.111111 126.000000  79.600000 109.833333  85.666667 166.000000 #>  [463] 180.200000  53.200000  30.400000 244.000000  69.333333 173.142857 #>  [469] 163.857143  47.333333  88.000000  89.000000 214.400000  92.200000 #>  [475]  88.428571 171.600000 179.400000  75.714286 137.800000 151.600000 #>  [481] 184.333333 174.800000 109.400000  87.600000  93.600000 187.000000 #>  [487] 122.500000 122.833333 123.142857  20.000000 130.666667  87.000000 #>  [493] 152.000000 100.800000 204.400000  59.142857 103.833333 139.750000 #>  [499]  76.666667  78.800000  54.000000 171.000000 121.714286 171.200000 #>  [505]  70.666667 262.000000  58.000000 118.400000 161.400000 159.800000 #>  [511] 101.200000 178.600000 142.800000 146.000000 188.200000 103.857143 #>  [517] 109.200000  91.666667 131.000000  60.500000  67.000000  86.250000 #>  [523] 130.833333  39.400000 167.666667  31.250000 116.333333 165.400000 #>  [529]  67.400000 105.200000 190.000000 156.800000 210.400000 110.428571 #>  [535]  44.000000 101.600000 269.000000  86.571429 208.400000  83.333333 #>  [541] 222.400000 123.166667 159.000000 143.600000 177.200000  80.666667 #>  [547] 110.200000 207.200000 193.800000 187.800000 130.600000 133.166667 #>  [553]  21.500000 101.000000 147.500000  44.166667  77.166667 102.400000 #>  [559] 153.400000 140.000000 113.000000  81.200000 129.200000 166.857143 #>  [565] 101.600000  50.600000  20.333333 154.500000  90.800000 135.800000 #>  [571] 197.800000  53.750000  69.666667 172.600000  94.600000 108.625000 #>  [577] 228.400000  54.500000 145.800000 143.000000  73.200000  97.500000 #>  [583]  40.000000  64.400000 164.600000  83.000000 121.833333 284.200000 #>  [589] 128.600000 110.571429 168.333333 103.200000 110.142857  97.142857 #>  [595]  83.500000 138.000000 233.600000  10.400000  75.800000 278.400000 #>  [601] 207.166667 101.200000 109.500000  49.300000 175.600000 115.600000 #>  [607] 172.500000  27.600000 146.800000 212.600000  92.571429  73.800000 #>  [613] 156.000000 149.800000 183.000000 218.800000 107.800000 142.800000 #>  [619] 158.600000 282.600000 123.600000 178.166667 100.666667  89.142857 #>  [625] 163.000000 154.800000 121.800000 102.800000 152.000000 168.285714 #>  [631] 176.000000 268.600000  88.666667 114.400000 127.333333 102.400000 #>  [637] 184.800000  89.800000  96.400000 144.400000 110.600000  72.428571 #>  [643] 102.166667 138.000000 144.600000 157.200000  65.833333 135.000000 #>  [649]  62.857143 162.000000  36.600000 115.200000 128.600000 149.000000 #>  [655] 116.571429 202.000000 228.600000 254.800000 158.000000  99.600000 #>  [661] 107.400000 246.600000  47.200000 200.833333  75.800000  57.400000 #>  [667] 148.000000 232.400000 124.400000 165.400000 242.000000 127.000000 #>  [673]  55.800000 206.000000 230.400000 160.600000  77.333333  46.142857 #>  [679]  74.200000 229.000000 113.333333 122.400000 188.666667 220.800000 #>  [685] 181.400000 146.200000  56.800000 148.400000 198.400000  64.857143 #>  [691] 147.600000  60.285714 112.800000  83.000000 281.600000 160.000000 #>  [697] 100.142857  82.800000 170.000000  88.333333 145.000000 178.200000 #>  [703]  68.600000 170.600000 135.400000 190.400000  38.500000 201.200000 #>  [709] 171.200000  48.400000 138.400000  99.500000 189.200000  96.000000 #>  [715] 176.400000 123.166667 130.333333 157.200000 170.333333  13.800000 #>  [721] 249.200000  82.000000 138.800000  59.500000  49.800000  68.857143 #>  [727] 120.600000  85.200000 175.600000 136.800000  19.285714 174.600000 #>  [733]  28.333333 154.000000  87.400000 150.400000 179.333333 100.600000 #>  [739] 189.142857  87.600000 173.166667 263.800000  74.400000 198.200000 #>  [745]  22.000000  55.600000 181.166667 150.800000  74.000000 131.333333 #>  [751]  86.285714 185.400000 137.333333  77.600000  40.333333  50.400000 #>  [757]  33.000000 116.400000  90.000000  71.666667 100.800000 209.600000 #>  [763] 253.800000 102.000000  82.833333 142.600000  17.142857  82.400000 #>  [769] 136.000000 113.800000  83.800000 156.600000  89.400000 201.000000 #>  [775] 270.400000 150.000000 161.800000 157.600000 170.600000   8.000000 #>  [781] 127.000000 132.800000  37.000000 142.800000 150.200000  83.600000 #>  [787] 134.600000  26.000000 162.200000 116.666667 148.400000  11.000000 #>  [793] 163.400000 200.600000  69.400000 137.200000  27.833333 189.400000 #>  [799]  39.400000 123.600000 140.000000 117.800000  42.000000 137.200000 #>  [805] 128.400000 153.400000 208.600000  28.600000  24.600000 122.166667 #>  [811] 171.400000 102.333333 127.000000 140.600000  98.000000  86.800000 #>  [817]  91.600000  91.600000 125.500000 274.200000  68.800000 164.600000 #>  [823]  28.000000  51.400000 123.600000 209.400000  40.400000 117.500000 #>  [829]  67.166667  31.200000 130.166667 137.000000 105.600000 231.200000 #>  [835]  32.800000 129.200000 181.200000  10.800000 145.000000 191.000000 #>  [841] 268.600000  74.400000 169.000000 181.600000  40.200000  97.200000 #>  [847]  17.800000 179.200000  74.200000  84.000000 175.800000 130.000000 #>  [853] 102.800000 207.600000  15.600000  63.800000  90.200000  83.571429 #>  [859]  49.600000  17.200000  84.000000  76.000000 153.000000 103.800000 #>  [865]  60.600000 166.400000 220.200000 275.600000  31.000000  78.200000 #>  [871] 114.600000 200.200000 104.000000 209.600000 214.800000 221.000000 #>  [877] 131.200000 149.600000 168.000000  89.000000  72.000000  48.400000 #>  [883] 198.800000 184.000000 163.000000 143.400000 144.400000 153.000000 #>  [889] 204.000000  88.000000  83.600000  29.000000 117.400000 127.800000 #>  [895] 111.400000 126.800000  43.400000 162.200000  30.200000  18.400000 #>  [901] 169.000000  34.800000 127.000000 175.600000  70.600000 139.600000 #>  [907]  76.600000 161.000000  90.800000 152.600000 124.800000 146.400000 #>  [913] 165.833333  66.800000 167.800000 156.800000 170.200000 131.600000 #>  [919] 108.400000 146.400000 199.200000  97.400000 147.400000  78.400000 #>  [925] 249.000000  87.000000 115.800000  18.000000 120.200000  80.200000 #>  [931]  77.800000  56.400000  70.333333  16.000000  83.400000  58.600000 #>  [937] 209.200000 139.200000  84.600000 106.800000 139.600000  94.800000 #>  [943] 143.400000 137.200000  24.600000  78.200000 146.800000 102.200000 #>  [949]  77.600000 171.600000  39.600000 116.200000 128.600000 185.800000 #>  [955]  77.600000  77.600000 108.200000  85.200000  96.800000  34.000000 #>  [961]  80.000000 133.600000  66.800000 133.000000  93.800000 188.400000 #>  [967] 197.600000  70.600000  90.400000 133.200000  88.200000  45.200000 #>  [973] 113.600000 146.800000  92.400000 180.000000 140.800000 196.800000 #>  [979] 215.200000 105.166667  93.200000 198.400000  85.600000 146.600000 #>  [985]  82.600000 219.000000 195.800000  24.800000  59.600000 172.800000 #>  [991] 130.400000 179.200000 185.000000 178.000000 141.200000 160.600000 #>  [997] 152.800000 135.400000  82.400000  91.000000 #>  #> $knnk #>   [1]       NaN       NaN       NaN       NaN 134.57579 118.48750 103.71586 #>   [8]  95.50581  97.70370  83.88182  89.86364  70.55303  70.95385  48.08333 #>  [15]  76.11111  62.00893  51.19118  49.46296  50.90789  49.42500  67.36508 #>  [22]       NaN       NaN  50.15625  62.92000  58.01282  56.40741       NaN #>  [29]  31.50000       NaN  43.58065  45.03125  33.12121  41.67647  44.08571 #>  [36]  30.83333  50.67568       NaN  48.92308       NaN  39.12195       NaN #>  [43]       NaN  33.93182       NaN  28.15217       NaN       NaN  28.95918 #>  [50]       NaN       NaN       NaN       NaN       NaN       NaN  33.46429 #>  [57]       NaN       NaN  30.45763  27.85000       NaN       NaN       NaN #>  [64]       NaN       NaN       NaN  30.26866  18.16176  32.85507       NaN #>  [71]       NaN       NaN       NaN       NaN       NaN  22.42105       NaN #>  [78]       NaN       NaN       NaN       NaN  27.06098       NaN       NaN #>  [85]       NaN  19.08140       NaN       NaN       NaN       NaN       NaN #>  [92]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #>  [99]       NaN       NaN       NaN       NaN  22.73786       NaN       NaN #> [106]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [113]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [120]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [127]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [134]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [141]       NaN       NaN       NaN       NaN       NaN       NaN  19.27891 #> [148]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [155]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [162]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [169]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [176]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [183]       NaN       NaN       NaN       NaN       NaN       NaN  16.26984 #> [190]       NaN  18.27749       NaN       NaN       NaN       NaN       NaN #> [197]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [204]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [211]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [218]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [225]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [232]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [239]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [246]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [253]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [260]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [267]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [274]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [281]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [288]       NaN       NaN  16.18276       NaN       NaN       NaN       NaN #> [295]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [302]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [309]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [316]  14.94304       NaN       NaN       NaN       NaN       NaN       NaN #> [323]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [330]       NaN       NaN  14.56024       NaN       NaN       NaN       NaN #> [337]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [344]       NaN       NaN       NaN       NaN       NaN       NaN       NaN #> [351]       NaN       NaN       NaN       NaN  14.59718       NaN       NaN #> [358]       NaN       NaN       NaN       NaN  13.63536 #>   # A random graph g4 <- sample_gnp(1000, p = 5 / 1000) knn(g4) #> $knn #>    [1]  5.571429  5.285714  5.800000  6.800000  7.000000  6.400000  5.600000 #>    [8]  6.400000  5.272727  5.000000  6.230769  8.750000  6.600000  6.333333 #>   [15]  7.250000  6.333333  6.750000  5.500000  5.000000  6.363636  8.200000 #>   [22]  8.000000  5.500000  5.500000  5.333333  6.111111  5.500000  6.250000 #>   [29]  6.000000  5.625000  5.500000  5.000000  5.375000  5.666667  6.833333 #>   [36]  6.400000  5.714286  5.000000  5.800000  8.000000  5.000000  5.000000 #>   [43]  4.800000  5.833333  5.250000  6.285714  7.500000  5.428571  6.125000 #>   [50]  7.500000  6.666667  4.000000  6.666667  7.750000  6.666667  6.000000 #>   [57]  5.666667  7.000000  4.714286  5.750000  4.000000  6.555556  6.000000 #>   [64]  4.500000  5.000000  4.000000  5.000000  3.500000  7.000000  7.666667 #>   [71]  7.142857  5.750000  9.333333  6.142857  5.333333  4.800000  4.250000 #>   [78]  8.000000  5.666667  3.875000  5.833333  7.000000  5.857143  5.625000 #>   [85]  6.666667  6.333333  7.428571  4.000000  5.714286  6.500000  5.166667 #>   [92]  4.333333  8.000000  6.166667  8.000000  6.250000  5.666667  8.333333 #>   [99]  4.750000  5.800000  7.000000  4.666667  6.666667  6.400000  5.666667 #>  [106]  6.600000  5.625000  7.800000  7.200000  6.500000  7.333333  7.500000 #>  [113]  8.750000  6.000000  7.000000  7.200000  6.571429  7.000000  6.600000 #>  [120]  6.400000  4.777778  6.500000  5.200000  6.200000  4.500000  7.500000 #>  [127]  6.000000  6.666667  9.500000  7.000000  4.333333  7.666667  6.250000 #>  [134]  6.500000  6.000000  6.250000  5.555556  6.000000  6.000000  8.333333 #>  [141]  6.500000  5.571429  5.333333  4.000000  5.000000  5.833333       NaN #>  [148]  4.750000  6.250000  6.000000  5.142857  6.500000  5.200000  5.571429 #>  [155]  6.666667  5.800000  5.333333  6.666667  7.333333  4.500000  8.200000 #>  [162]  8.200000  5.000000  5.600000  6.200000  4.000000  6.000000  6.200000 #>  [169]  5.833333  5.000000  5.600000  6.000000  4.333333  5.600000  5.400000 #>  [176]  6.333333  5.200000  6.428571  6.333333  7.000000  7.666667  6.000000 #>  [183]  5.000000  7.000000       NaN  4.333333  5.250000  6.600000  4.750000 #>  [190]  4.625000  6.800000       NaN  6.750000  5.400000  4.000000  8.000000 #>  [197]  7.500000  7.000000  5.500000  7.833333  5.600000  6.666667  6.200000 #>  [204]  5.750000  5.000000  6.000000  5.250000  6.750000  5.714286  9.500000 #>  [211]  4.800000  5.333333  4.600000  7.000000  5.714286  6.666667  6.111111 #>  [218]  6.000000  6.000000  8.250000  4.400000  5.200000  8.000000  5.333333 #>  [225]  4.600000  5.500000  4.750000  4.000000  5.000000  6.333333  6.363636 #>  [232]  5.750000  7.857143  7.125000  5.833333  5.000000  6.500000  5.800000 #>  [239]  5.500000  5.857143  7.000000  6.250000  6.200000  6.200000  6.250000 #>  [246]  6.000000  7.500000  6.111111  6.166667  5.777778  6.250000  6.200000 #>  [253]  6.000000  5.714286  2.500000  5.800000  6.250000  8.571429  3.000000 #>  [260]  6.400000  6.500000  4.500000  5.250000  6.000000  5.666667  7.800000 #>  [267]  5.666667  5.750000  6.750000  5.750000  6.200000  6.400000  6.000000 #>  [274]  4.333333  4.500000  6.166667  5.333333  6.000000  6.700000  6.400000 #>  [281]  7.800000  5.142857  5.000000  6.666667  8.800000  5.000000  4.000000 #>  [288]  8.200000  6.000000  6.400000  7.200000  5.600000  6.800000  5.250000 #>  [295]  6.500000  6.666667  5.777778  6.142857  4.800000  6.000000  4.500000 #>  [302]  6.625000  4.500000  6.000000  6.666667  7.400000  5.444444  7.636364 #>  [309]  7.000000  5.500000  6.857143  5.400000  6.000000  6.333333  7.166667 #>  [316]  5.500000  4.333333  7.666667  7.000000  4.000000  6.166667  4.833333 #>  [323]  6.000000  7.222222  5.800000  4.600000  5.600000  6.500000  5.333333 #>  [330]  9.000000  6.142857  6.600000  7.400000  7.500000  6.200000  6.000000 #>  [337]  6.714286  5.333333  6.500000  6.333333  5.200000  8.000000  7.000000 #>  [344]  7.400000  3.500000  8.666667  4.833333  6.000000  5.200000  5.571429 #>  [351]  7.666667  7.000000  5.833333  6.100000  5.333333  6.666667  9.000000 #>  [358]  6.500000  7.833333  6.500000  5.166667  5.400000  6.222222  7.428571 #>  [365]  7.500000  7.666667  6.250000  6.333333  6.571429  6.250000  8.833333 #>  [372]       NaN  7.000000  6.250000  7.666667  4.333333  6.833333  6.285714 #>  [379]  8.500000  5.625000  5.400000  7.666667  8.000000  6.500000  6.285714 #>  [386]  4.000000  5.000000  5.700000  6.000000  6.714286  8.166667  4.333333 #>  [393]  6.666667  4.333333  7.000000  6.800000  7.000000  6.500000  6.750000 #>  [400]  7.400000  5.777778  6.250000  7.000000  6.400000  6.600000  5.500000 #>  [407]  6.500000  4.800000  7.666667  6.750000  7.750000  7.000000  5.166667 #>  [414]  8.142857  3.500000  6.875000  5.200000  8.000000  7.000000  5.600000 #>  [421]  5.857143  6.750000  7.666667  6.500000  6.571429  7.400000  6.833333 #>  [428]  4.666667  6.500000  6.875000  6.444444  8.500000  4.750000  7.750000 #>  [435]  6.250000  5.600000  5.166667  7.750000  7.500000  7.000000  6.250000 #>  [442]  4.833333  6.571429  5.666667  6.166667  5.000000  5.750000  6.000000 #>  [449]  5.400000  5.625000  5.200000  7.000000  8.000000  6.714286  6.250000 #>  [456]  6.333333  5.333333  8.000000  5.000000  7.000000  6.500000  3.500000 #>  [463]  6.666667  5.666667  6.333333  5.666667  4.500000  6.833333  5.500000 #>  [470]  5.555556  4.000000  7.100000  5.400000  4.250000  6.200000  5.600000 #>  [477]  5.000000  5.250000  7.000000  5.000000  6.333333  7.166667  5.285714 #>  [484]  7.000000  7.000000  9.666667  6.666667  4.750000  6.714286  6.800000 #>  [491]  6.166667  5.200000  9.000000  8.500000  7.500000  5.375000  4.500000 #>  [498]  6.500000  5.857143  4.285714  5.833333  5.857143  5.833333  4.571429 #>  [505]  7.500000  5.000000  8.000000  6.625000  6.000000  7.400000  8.000000 #>  [512]  4.333333  5.250000  4.500000  6.500000  6.600000  6.666667  6.666667 #>  [519]  4.000000  5.000000  5.400000  6.076923  9.333333  6.714286  7.333333 #>  [526]  4.500000  4.200000  6.666667  7.000000  5.555556  6.700000  5.500000 #>  [533]       NaN  7.333333  6.142857  6.166667  7.000000  5.500000  5.000000 #>  [540]  5.000000  7.000000  6.333333  4.714286  6.000000  6.428571  5.600000 #>  [547]  7.200000  6.750000  6.142857  6.111111  6.000000  6.500000  5.600000 #>  [554]  3.000000  4.833333  6.166667  5.666667  4.571429  4.888889  9.333333 #>  [561]  6.300000  3.000000  7.500000  4.600000  7.333333  5.250000  5.875000 #>  [568]  7.000000  6.400000  6.333333  5.666667  4.000000  7.750000  4.000000 #>  [575]  6.000000  5.000000  4.800000  6.250000  8.000000  7.500000  7.000000 #>  [582]  6.571429  7.333333  6.500000  6.333333  7.250000  8.000000  5.400000 #>  [589]  5.333333  8.666667  8.750000  6.400000  6.333333  4.666667  7.000000 #>  [596]  6.000000  9.000000       NaN  7.333333  5.000000  7.000000  4.375000 #>  [603]  5.333333  7.600000  7.500000  8.000000  7.333333  5.714286  6.250000 #>  [610]  5.333333  5.125000  5.111111  6.000000  5.333333  6.833333  7.000000 #>  [617]  5.727273  6.000000  6.600000  4.333333  7.600000  6.000000  6.166667 #>  [624]  6.000000  7.250000  6.375000  5.500000  5.000000  4.250000  4.000000 #>  [631]  7.250000  5.666667  5.500000  6.666667  5.333333  6.800000  7.000000 #>  [638]  5.500000  6.600000  5.333333  4.800000  5.285714  6.222222  9.400000 #>  [645]  7.000000  5.600000  7.250000  3.714286  6.800000  6.750000  5.800000 #>  [652]  6.000000  5.666667  7.250000  5.857143  4.666667  6.500000  6.666667 #>  [659]  5.800000  6.833333  4.428571  5.571429  6.285714  5.285714 10.000000 #>  [666]  4.666667  4.200000  6.500000  5.142857  6.666667  5.444444  7.000000 #>  [673]  4.400000  6.200000  7.000000  5.333333  5.000000  8.000000  6.200000 #>  [680]  7.000000  7.000000  5.500000  5.500000  5.625000  7.166667  6.142857 #>  [687]  6.285714  5.166667  6.500000  3.833333  6.400000  2.666667  5.000000 #>  [694]  6.000000  6.166667  5.800000  6.500000  7.000000  6.400000  6.857143 #>  [701]  4.750000  6.000000  6.000000  5.600000  6.333333  4.500000  5.000000 #>  [708]  7.800000  7.750000  5.666667  6.600000  5.000000  4.000000  7.000000 #>  [715]  7.000000  5.500000  6.800000  6.500000  6.833333  6.833333  6.800000 #>  [722]  5.000000  5.875000  8.500000  6.100000  5.166667  4.500000  4.333333 #>  [729]  6.625000  7.000000  3.857143  5.833333  7.000000  5.333333  5.700000 #>  [736]  9.000000  6.666667  6.000000  6.000000  6.333333  6.444444  5.875000 #>  [743]  4.600000  7.125000  6.666667  6.000000  6.833333  7.400000  7.000000 #>  [750]  6.600000  6.333333  4.000000  5.500000  6.400000  4.800000  5.333333 #>  [757]  6.000000  5.800000  5.666667  6.200000  6.250000  6.333333  6.444444 #>  [764]  5.666667  6.666667  6.250000  5.500000  5.888889  5.750000  4.333333 #>  [771]  5.250000  4.666667  5.800000  4.600000  6.000000  6.250000  6.666667 #>  [778]  5.500000  5.666667  4.200000  5.750000  6.400000  5.000000  7.333333 #>  [785]  6.000000  8.000000  6.000000  5.400000  6.400000  6.285714  6.500000 #>  [792]  5.000000  6.000000  7.000000  6.800000  6.700000  5.285714  5.750000 #>  [799]  6.333333  5.444444  6.000000  6.000000  6.333333  6.500000  5.250000 #>  [806]  8.000000  7.500000  6.000000  5.333333  4.800000  7.875000  6.250000 #>  [813]  6.000000  5.875000  8.000000  6.285714  4.750000  6.166667  7.000000 #>  [820]  6.200000  5.400000  5.600000  7.600000  7.000000  6.000000  6.000000 #>  [827]  8.000000  5.200000  5.333333  5.600000  5.666667  4.800000  5.750000 #>  [834]  5.000000  7.444444  5.500000  7.666667  6.800000  5.500000  8.666667 #>  [841]  7.000000  6.166667  5.000000  6.375000  4.428571  6.000000  6.333333 #>  [848]  5.333333  7.500000  5.833333  7.000000       NaN  5.666667  5.000000 #>  [855]  5.800000  6.000000  4.666667  6.666667  5.250000  4.000000  7.000000 #>  [862]  5.500000  5.600000  7.375000  7.800000  5.000000  6.200000  5.142857 #>  [869]  6.500000  7.000000  5.166667  6.500000  5.333333       NaN  7.600000 #>  [876]  3.333333  4.000000  6.000000  5.750000  5.333333  6.000000  7.000000 #>  [883]  4.500000  6.000000  8.000000  7.000000  6.444444  5.333333  7.400000 #>  [890]  6.600000  5.000000  5.000000  6.714286  6.222222  5.600000  5.333333 #>  [897]  6.333333  6.600000  7.250000  2.500000  7.166667  5.750000  3.500000 #>  [904]  5.000000  6.300000  4.500000  5.571429  5.000000  8.000000  6.400000 #>  [911]  4.857143  5.714286  4.666667  4.500000  6.000000  5.750000       NaN #>  [918]  5.571429  6.000000  4.600000  5.000000  6.333333  4.714286  3.250000 #>  [925]  4.333333  5.250000  8.000000  6.800000  5.250000  6.100000  6.500000 #>  [932]  4.250000  5.250000  6.500000  7.500000       NaN  5.428571  6.000000 #>  [939]  7.000000  4.500000  7.000000  6.000000  7.000000  6.000000  5.250000 #>  [946]  6.000000  5.818182  7.200000  6.000000  5.500000  6.750000  5.500000 #>  [953]  5.000000  6.000000  6.000000  5.600000  5.600000  7.000000  7.000000 #>  [960]  5.000000  6.500000  5.500000  5.900000  6.250000  6.750000  6.500000 #>  [967]  4.333333  7.800000  6.000000  7.200000  7.333333  5.166667  4.857143 #>  [974]       NaN  8.666667  4.166667  5.000000  5.666667  6.600000  5.600000 #>  [981]  5.200000  5.428571  8.666667  6.500000  5.375000  6.000000  4.333333 #>  [988]  6.555556  5.333333  7.400000  7.333333  2.000000  5.000000  5.833333 #>  [995]  6.250000  6.000000  5.888889  6.200000  4.833333       NaN #>  #> $knnk #>  [1] 5.964286 5.782895 6.258547 6.132353 6.155080 6.105145 5.913323 6.034420 #>  [9] 6.012346 6.130435 6.025974 5.854167 6.153846 #>   # A weighted graph g5 <- make_star(10) E(g5)$weight <- seq(ecount(g5)) knn(g5) #> $knn #>  [1] 1 9 9 9 9 9 9 9 9 9 #>  #> $knnk #> [1]   9 NaN NaN NaN NaN NaN NaN NaN   1 #>"},{"path":"/reference/laplacian_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Laplacian — laplacian_matrix","title":"Graph Laplacian — laplacian_matrix","text":"Laplacian graph.","code":""},{"path":"/reference/laplacian_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph Laplacian — laplacian_matrix","text":"","code":"laplacian_matrix(   graph,   normalized = FALSE,   weights = NULL,   sparse = igraph_opt(\"sparsematrices\") )"},{"path":"/reference/laplacian_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph Laplacian — laplacian_matrix","text":"graph input graph. normalized Whether calculate normalized Laplacian. See definitions . weights optional vector giving edge weights weighted Laplacian matrix. NULL graph edge attribute called weight, used automatically. Set NA want unweighted Laplacian graph weight edge attribute. sparse Logical scalar, whether return result sparse matrix. Matrix package required sparse matrices.","code":""},{"path":"/reference/laplacian_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph Laplacian — laplacian_matrix","text":"numeric matrix.","code":""},{"path":"/reference/laplacian_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph Laplacian — laplacian_matrix","text":"Laplacian Matrix graph symmetric matrix number rows columns number vertices graph element (,j) d[], degree vertex ==j, -1 !=j edge vertices j 0 otherwise. normalized version Laplacian Matrix similar: element (,j) 1 ==j, -1/sqrt(d[] d[j]) !=j edge vertices j 0 otherwise. weighted version Laplacian simply works weighted degree instead plain degree. .e. (,j) d[], weighted degree vertex ==j, -w !=j edge vertices j weight w, 0 otherwise. weighted degree vertex sum weights adjacent edges.","code":""},{"path":[]},{"path":"/reference/laplacian_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph Laplacian — laplacian_matrix","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/laplacian_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph Laplacian — laplacian_matrix","text":"","code":"g <- make_ring(10) laplacian_matrix(g) #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>                                     #>  [1,]  2 -1  .  .  .  .  .  .  . -1 #>  [2,] -1  2 -1  .  .  .  .  .  .  . #>  [3,]  . -1  2 -1  .  .  .  .  .  . #>  [4,]  .  . -1  2 -1  .  .  .  .  . #>  [5,]  .  .  . -1  2 -1  .  .  .  . #>  [6,]  .  .  .  . -1  2 -1  .  .  . #>  [7,]  .  .  .  .  . -1  2 -1  .  . #>  [8,]  .  .  .  .  .  . -1  2 -1  . #>  [9,]  .  .  .  .  .  .  . -1  2 -1 #> [10,] -1  .  .  .  .  .  .  . -1  2 laplacian_matrix(g, norm = TRUE) #> 10 x 10 sparse Matrix of class \"dgCMatrix\" #>                                                         #>  [1,]  1.0 -0.5  .    .    .    .    .    .    .   -0.5 #>  [2,] -0.5  1.0 -0.5  .    .    .    .    .    .    .   #>  [3,]  .   -0.5  1.0 -0.5  .    .    .    .    .    .   #>  [4,]  .    .   -0.5  1.0 -0.5  .    .    .    .    .   #>  [5,]  .    .    .   -0.5  1.0 -0.5  .    .    .    .   #>  [6,]  .    .    .    .   -0.5  1.0 -0.5  .    .    .   #>  [7,]  .    .    .    .    .   -0.5  1.0 -0.5  .    .   #>  [8,]  .    .    .    .    .    .   -0.5  1.0 -0.5  .   #>  [9,]  .    .    .    .    .    .    .   -0.5  1.0 -0.5 #> [10,] -0.5  .    .    .    .    .    .    .   -0.5  1.0 laplacian_matrix(g, norm = TRUE, sparse = FALSE) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  1.0 -0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  -0.5 #>  [2,] -0.5  1.0 -0.5  0.0  0.0  0.0  0.0  0.0  0.0   0.0 #>  [3,]  0.0 -0.5  1.0 -0.5  0.0  0.0  0.0  0.0  0.0   0.0 #>  [4,]  0.0  0.0 -0.5  1.0 -0.5  0.0  0.0  0.0  0.0   0.0 #>  [5,]  0.0  0.0  0.0 -0.5  1.0 -0.5  0.0  0.0  0.0   0.0 #>  [6,]  0.0  0.0  0.0  0.0 -0.5  1.0 -0.5  0.0  0.0   0.0 #>  [7,]  0.0  0.0  0.0  0.0  0.0 -0.5  1.0 -0.5  0.0   0.0 #>  [8,]  0.0  0.0  0.0  0.0  0.0  0.0 -0.5  1.0 -0.5   0.0 #>  [9,]  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -0.5  1.0  -0.5 #> [10,] -0.5  0.0  0.0  0.0  0.0  0.0  0.0  0.0 -0.5   1.0"},{"path":"/reference/layout.deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated layout functions — layout.reingold.tilford","title":"Deprecated layout functions — layout.reingold.tilford","text":"Please use new names, see layout_().","code":""},{"path":"/reference/layout.deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated layout functions — layout.reingold.tilford","text":"","code":"layout.reingold.tilford(..., params = list())  layout.circle(..., params = list())  layout.sphere(..., params = list())  layout.random(..., params = list())  layout.fruchterman.reingold(..., params = list())  layout.kamada.kawai(..., params = list())  layout.lgl(..., params = list())"},{"path":"/reference/layout.deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated layout functions — layout.reingold.tilford","text":"... Passed new layout functions. params Passed new layout functions arguments.","code":""},{"path":"/reference/layout.fruchterman.reingold.grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid Fruchterman-Reingold layout, this was removed from igraph — layout.fruchterman.reingold.grid","title":"Grid Fruchterman-Reingold layout, this was removed from igraph — layout.fruchterman.reingold.grid","text":"Now calls Fruchterman-Reingold layout, warning.","code":""},{"path":"/reference/layout.fruchterman.reingold.grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid Fruchterman-Reingold layout, this was removed from igraph — layout.fruchterman.reingold.grid","text":"","code":"layout.fruchterman.reingold.grid(graph, ...)"},{"path":"/reference/layout.fruchterman.reingold.grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid Fruchterman-Reingold layout, this was removed from igraph — layout.fruchterman.reingold.grid","text":"graph Input graph. ... Extra arguments ignored.","code":""},{"path":"/reference/layout.fruchterman.reingold.grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid Fruchterman-Reingold layout, this was removed from igraph — layout.fruchterman.reingold.grid","text":"Layout coordinates, two column matrix.","code":""},{"path":"/reference/layout.spring.html","id":null,"dir":"Reference","previous_headings":"","what":"Spring layout, this was removed from igraph — layout.spring","title":"Spring layout, this was removed from igraph — layout.spring","text":"Now calls Fruchterman-Reingold layout, warning.","code":""},{"path":"/reference/layout.spring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spring layout, this was removed from igraph — layout.spring","text":"","code":"layout.spring(graph, ...)"},{"path":"/reference/layout.spring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spring layout, this was removed from igraph — layout.spring","text":"graph Input graph. ... Extra arguments ignored.","code":""},{"path":"/reference/layout.spring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spring layout, this was removed from igraph — layout.spring","text":"Layout coordinates, two column matrix.","code":""},{"path":"/reference/layout.svd.html","id":null,"dir":"Reference","previous_headings":"","what":"SVD layout, this was removed from igraph — layout.svd","title":"SVD layout, this was removed from igraph — layout.svd","text":"Now calls Fruchterman-Reingold layout, warning.","code":""},{"path":"/reference/layout.svd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SVD layout, this was removed from igraph — layout.svd","text":"","code":"layout.svd(graph, ...)"},{"path":"/reference/layout.svd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SVD layout, this was removed from igraph — layout.svd","text":"graph Input graph. ... Extra arguments ignored.","code":""},{"path":"/reference/layout.svd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SVD layout, this was removed from igraph — layout.svd","text":"Layout coordinates, two column matrix.","code":""},{"path":"/reference/layout_.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph layouts — layout_","title":"Graph layouts — layout_","text":"generic function apply layout function graph.","code":""},{"path":"/reference/layout_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph layouts — layout_","text":"","code":"layout_(graph, layout, ...)  # S3 method for igraph_layout_spec print(x, ...)  # S3 method for igraph_layout_modifier print(x, ...)"},{"path":"/reference/layout_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph layouts — layout_","text":"graph input graph. layout layout specification. must call layout specification function. ... modifiers, see complete list . print() methods, ignored. x layout specification","code":""},{"path":"/reference/layout_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph layouts — layout_","text":"return value layout function, usually two column matrix. 3D layouts three column matrix.","code":""},{"path":"/reference/layout_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph layouts — layout_","text":"two ways calculate graph layouts igraph. first way call layout function (prefix layout_() graph, get vertex coordinates. second way (new igraph 0.8.0), two steps, flexible. First call layout specification function (one without layout_() prefix, layout_() (add_layout_()) perform layouting. second way preferred, flexible. allows operations layouting. E.g. using component_wise() argument, layout can calculated separately component, merged get final results.","code":""},{"path":"/reference/layout_.html","id":"modifiers","dir":"Reference","previous_headings":"","what":"Modifiers","title":"Graph layouts — layout_","text":"Modifiers modify layout calculation performed. Currently implemented modifiers: component_wise() calculates layout separately component graph, merges . normalize() scales layout square.","code":""},{"path":[]},{"path":"/reference/layout_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph layouts — layout_","text":"","code":"g <- make_ring(10) + make_full_graph(5) coords <- layout_(g, as_star()) plot(g, layout = coords) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_as_bipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple two-row layout for bipartite graphs — layout_as_bipartite","title":"Simple two-row layout for bipartite graphs — layout_as_bipartite","text":"Minimize edge-crossings simple two-row (column) layout bipartite graphs.","code":""},{"path":"/reference/layout_as_bipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple two-row layout for bipartite graphs — layout_as_bipartite","text":"","code":"layout_as_bipartite(graph, types = NULL, hgap = 1, vgap = 1, maxiter = 100)  as_bipartite(...)"},{"path":"/reference/layout_as_bipartite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple two-row layout for bipartite graphs — layout_as_bipartite","text":"graph bipartite input graph. logical ‘type’ vertex attribute, types argument must given. types logical vector, vertex types. argument NULL (default), ‘type’ vertex attribute used. hgap Real scalar, minimum horizontal gap vertices layer. vgap Real scalar, distance two layers. maxiter Integer scalar, maximum number iterations crossing minimization stage. 100 reasonable default; feel many edge crossings, increase . ... Arguments pass layout_as_bipartite().","code":""},{"path":"/reference/layout_as_bipartite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple two-row layout for bipartite graphs — layout_as_bipartite","text":"matrix two columns many rows number vertices input graph.","code":""},{"path":"/reference/layout_as_bipartite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple two-row layout for bipartite graphs — layout_as_bipartite","text":"layout created first placing vertices two rows, according types. positions within rows optimized minimize edge crossings, using Sugiyama algorithm (see layout_with_sugiyama()).","code":""},{"path":[]},{"path":"/reference/layout_as_bipartite.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple two-row layout for bipartite graphs — layout_as_bipartite","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_as_bipartite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple two-row layout for bipartite graphs — layout_as_bipartite","text":"","code":"# Random bipartite graph inc <- matrix(sample(0:1, 50, replace = TRUE, prob = c(2, 1)), 10, 5) g <- graph_from_incidence_matrix(inc) plot(g,   layout = layout_as_bipartite,   vertex.color = c(\"green\", \"cyan\")[V(g)$type + 1] ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  # Two columns g %>%   add_layout_(as_bipartite()) %>%   plot() #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_as_star.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate coordinates to place the vertices of a graph in a star-shape — layout_as_star","title":"Generate coordinates to place the vertices of a graph in a star-shape — layout_as_star","text":"simple layout generator, places one vertex center circle rest vertices equidistantly perimeter.","code":""},{"path":"/reference/layout_as_star.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate coordinates to place the vertices of a graph in a star-shape — layout_as_star","text":"","code":"layout_as_star(graph, center = V(graph)[1], order = NULL)  as_star(...)"},{"path":"/reference/layout_as_star.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate coordinates to place the vertices of a graph in a star-shape — layout_as_star","text":"graph graph layout. center id vertex put center. default first vertex. order Numeric vector, order vertices along perimeter. default ordering given vertex ids. ... Arguments pass layout_as_star().","code":""},{"path":"/reference/layout_as_star.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate coordinates to place the vertices of a graph in a star-shape — layout_as_star","text":"matrix two columns many rows number vertices input graph.","code":""},{"path":"/reference/layout_as_star.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate coordinates to place the vertices of a graph in a star-shape — layout_as_star","text":"possible choose vertex center, order vertices can also given.","code":""},{"path":[]},{"path":"/reference/layout_as_star.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate coordinates to place the vertices of a graph in a star-shape — layout_as_star","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_as_star.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate coordinates to place the vertices of a graph in a star-shape — layout_as_star","text":"","code":"g <- make_star(10) layout_as_star(g) #>             [,1]       [,2] #>  [1,]  0.0000000  0.0000000 #>  [2,]  1.0000000  0.0000000 #>  [3,]  0.7660444  0.6427876 #>  [4,]  0.1736482  0.9848078 #>  [5,] -0.5000000  0.8660254 #>  [6,] -0.9396926  0.3420201 #>  [7,] -0.9396926 -0.3420201 #>  [8,] -0.5000000 -0.8660254 #>  [9,]  0.1736482 -0.9848078 #> [10,]  0.7660444 -0.6427876  ## Alternative form layout_(g, as_star()) #>             [,1]       [,2] #>  [1,]  0.0000000  0.0000000 #>  [2,]  1.0000000  0.0000000 #>  [3,]  0.7660444  0.6427876 #>  [4,]  0.1736482  0.9848078 #>  [5,] -0.5000000  0.8660254 #>  [6,] -0.9396926  0.3420201 #>  [7,] -0.9396926 -0.3420201 #>  [8,] -0.5000000 -0.8660254 #>  [9,]  0.1736482 -0.9848078 #> [10,]  0.7660444 -0.6427876"},{"path":"/reference/layout_as_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"The Reingold-Tilford graph layout algorithm — layout_as_tree","title":"The Reingold-Tilford graph layout algorithm — layout_as_tree","text":"tree-like layout, perfect trees, acceptable graphs many cycles.","code":""},{"path":"/reference/layout_as_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Reingold-Tilford graph layout algorithm — layout_as_tree","text":"","code":"layout_as_tree(   graph,   root = numeric(),   circular = FALSE,   rootlevel = numeric(),   mode = c(\"out\", \"in\", \"all\"),   flip.y = TRUE )  as_tree(...)"},{"path":"/reference/layout_as_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Reingold-Tilford graph layout algorithm — layout_as_tree","text":"graph input graph. root index root vertex root vertices.  non-empty vector supplied vertex ids used roots trees (single tree graph connected).  empty vector, root vertices automatically calculated based topological sorting, performed opposite mode mode argument. vertices sorted, one selected component. circular Logical scalar, whether plot tree circular fashion. Defaults FALSE, tree branches going bottom-(top-, see flip.y argument. rootlevel argument can useful drawing forests trees (.e. unconnected tree components). specifies level root vertices every tree forest. considered roots argument empty vector. mode Specifies edges consider building tree.  ‘’, outgoing, ‘’, incoming edges parent considered. ‘’ edges used (behavior igraph 0.5 ). parameter also influences root vertices calculated, given. See roots parameter. flip.y Logical scalar, whether flip ‘y’ coordinates. default flipping puts root vertex top. ... Passed layout_as_tree().","code":""},{"path":"/reference/layout_as_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Reingold-Tilford graph layout algorithm — layout_as_tree","text":"numeric matrix two columns, one row vertex.","code":""},{"path":"/reference/layout_as_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Reingold-Tilford graph layout algorithm — layout_as_tree","text":"Arranges nodes tree given node used root.  tree directed downwards parents centered children. exact algorithm, reference . given graph tree, breadth-first search executed first obtain possible spanning tree.","code":""},{"path":"/reference/layout_as_tree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Reingold-Tilford graph layout algorithm — layout_as_tree","text":"Reingold, E Tilford, J (1981). Tidier drawing trees. IEEE Trans. Softw. Eng., SE-7(2):223--228.","code":""},{"path":[]},{"path":"/reference/layout_as_tree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Reingold-Tilford graph layout algorithm — layout_as_tree","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_as_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Reingold-Tilford graph layout algorithm — layout_as_tree","text":"","code":"tree <- make_tree(20, 3) plot(tree, layout = layout_as_tree) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' plot(tree, layout = layout_as_tree(tree, flip.y = FALSE)) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' plot(tree, layout = layout_as_tree(tree, circular = TRUE)) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  tree2 <- make_tree(10, 3) + make_tree(10, 2) plot(tree2, layout = layout_as_tree) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' plot(tree2, layout = layout_as_tree(tree2,   root = c(1, 11),   rootlevel = c(2, 1) )) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_in_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph layout with vertices on a circle. — layout_in_circle","title":"Graph layout with vertices on a circle. — layout_in_circle","text":"Place vertices circle, order vertex ids.","code":""},{"path":"/reference/layout_in_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph layout with vertices on a circle. — layout_in_circle","text":"","code":"layout_in_circle(graph, order = V(graph))  in_circle(...)"},{"path":"/reference/layout_in_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph layout with vertices on a circle. — layout_in_circle","text":"graph input graph. order vertices place circle, order desired placement. Vertices included placed (0,0). ... Passed layout_in_circle().","code":""},{"path":"/reference/layout_in_circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph layout with vertices on a circle. — layout_in_circle","text":"numeric matrix two columns, one row vertex.","code":""},{"path":"/reference/layout_in_circle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph layout with vertices on a circle. — layout_in_circle","text":"want order vertices differently, permute using permute() function.","code":""},{"path":[]},{"path":"/reference/layout_in_circle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph layout with vertices on a circle. — layout_in_circle","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_in_circle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph layout with vertices on a circle. — layout_in_circle","text":"","code":"## Place vertices on a circle, order them according to their ## community library(igraphdata) data(karate) karate_groups <- cluster_optimal(karate) coords <- layout_in_circle(karate,   order =     order(membership(karate_groups)) ) V(karate)$label <- sub(\"Actor \", \"\", V(karate)$name) V(karate)$label.color <- membership(karate_groups) V(karate)$shape <- \"none\" plot(karate, layout = coords) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_nicely.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose an appropriate graph layout algorithm automatically — layout_nicely","title":"Choose an appropriate graph layout algorithm automatically — layout_nicely","text":"function tries choose appropriate graph layout algorithm graph, automatically, based simple algorithm. See details .","code":""},{"path":"/reference/layout_nicely.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose an appropriate graph layout algorithm automatically — layout_nicely","text":"","code":"layout_nicely(graph, dim = 2, ...)  nicely(...)"},{"path":"/reference/layout_nicely.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose an appropriate graph layout algorithm automatically — layout_nicely","text":"graph input graph dim Dimensions, 2 3. ... layout_nicely() extra arguments passed real layout function. nicely() argument passed layout_nicely().","code":""},{"path":"/reference/layout_nicely.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose an appropriate graph layout algorithm automatically — layout_nicely","text":"numeric matrix two three columns.","code":""},{"path":"/reference/layout_nicely.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose an appropriate graph layout algorithm automatically — layout_nicely","text":"layout_nicely() tries choose appropriate layout function supplied graph, uses generate layout. current implementation works like : graph graph attribute called ‘layout’, used. attribute R function, called, graph extra arguments. Otherwise, graph vertex attributes called ‘x’ ‘y’, used coordinates. graph additional ‘z’ vertex attribute, also used. Otherwise, graph connected less 1000 vertices, Fruchterman-Reingold layout used, calling layout_with_fr(). Otherwise DrL layout used, layout_with_drl() called. layout algorithm implementations, argument named ‘weights’ typically used specify weights edges layout algorithm supports . case, omitting ‘weights’ setting NULL make igraph use 'weight' edge attribute graph present. However, layout algorithms support non-positive weights, layout_nicely() fail simply called graph without specifying explicit weights weights happened include non-positive numbers. strive ensure layout_nicely() works ---box graphs, rule omit ‘weights’ set NULL layout_nicely() end calling layout_with_fr() layout_with_drl(), forward weights functions issue warning . can use weights = NA silence warning.","code":""},{"path":[]},{"path":"/reference/layout_nicely.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Choose an appropriate graph layout algorithm automatically — layout_nicely","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_on_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple grid layout — layout_on_grid","title":"Simple grid layout — layout_on_grid","text":"layout places vertices rectangular grid, two three dimensions.","code":""},{"path":"/reference/layout_on_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple grid layout — layout_on_grid","text":"","code":"layout_on_grid(graph, width = 0, height = 0, dim = 2)  on_grid(...)  layout.grid.3d(graph, width = 0, height = 0)"},{"path":"/reference/layout_on_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple grid layout — layout_on_grid","text":"graph input graph. width number vertices single row grid. zero negative, 2d layouts width grid square root number vertices graph, rounded next integer. Similarly, cube root 3d layouts. height number vertices single column grid, three dimensional layouts. zero negative, determinted automatically. dim Two three. Whether make 2d 3d layout. ... Passed layout_on_grid().","code":""},{"path":"/reference/layout_on_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple grid layout — layout_on_grid","text":"two-column three-column matrix.","code":""},{"path":"/reference/layout_on_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple grid layout — layout_on_grid","text":"function places vertices simple rectangular grid, one . want change order vertices, see permute() function.","code":""},{"path":[]},{"path":"/reference/layout_on_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple grid layout — layout_on_grid","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/layout_on_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple grid layout — layout_on_grid","text":"","code":"g <- make_lattice(c(3, 3)) layout_on_grid(g) #>       [,1] [,2] #>  [1,]    0    0 #>  [2,]    1    0 #>  [3,]    2    0 #>  [4,]    0    1 #>  [5,]    1    1 #>  [6,]    2    1 #>  [7,]    0    2 #>  [8,]    1    2 #>  [9,]    2    2  g2 <- make_lattice(c(3, 3, 3)) layout_on_grid(g2, dim = 3) #>       [,1] [,2] [,3] #>  [1,]    0    0    0 #>  [2,]    1    0    0 #>  [3,]    2    0    0 #>  [4,]    0    1    0 #>  [5,]    1    1    0 #>  [6,]    2    1    0 #>  [7,]    0    2    0 #>  [8,]    1    2    0 #>  [9,]    2    2    0 #> [10,]    0    0    1 #> [11,]    1    0    1 #> [12,]    2    0    1 #> [13,]    0    1    1 #> [14,]    1    1    1 #> [15,]    2    1    1 #> [16,]    0    2    1 #> [17,]    1    2    1 #> [18,]    2    2    1 #> [19,]    0    0    2 #> [20,]    1    0    2 #> [21,]    2    0    2 #> [22,]    0    1    2 #> [23,]    1    1    2 #> [24,]    2    1    2 #> [25,]    0    2    2 #> [26,]    1    2    2 #> [27,]    2    2    2  plot(g, layout = layout_on_grid) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' if (interactive()) {   rglplot(g, layout = layout_on_grid(g, dim = 3)) }"},{"path":"/reference/layout_on_sphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph layout with vertices on the surface of a sphere — layout_on_sphere","title":"Graph layout with vertices on the surface of a sphere — layout_on_sphere","text":"Place vertices sphere, approximately uniformly, order vertex ids.","code":""},{"path":"/reference/layout_on_sphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph layout with vertices on the surface of a sphere — layout_on_sphere","text":"","code":"layout_on_sphere(graph)  on_sphere(...)"},{"path":"/reference/layout_on_sphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph layout with vertices on the surface of a sphere — layout_on_sphere","text":"graph input graph. ... Passed layout_on_sphere().","code":""},{"path":"/reference/layout_on_sphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph layout with vertices on the surface of a sphere — layout_on_sphere","text":"numeric matrix three columns, one row vertex.","code":""},{"path":"/reference/layout_on_sphere.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph layout with vertices on the surface of a sphere — layout_on_sphere","text":"layout_on_sphere() places vertices (approximately) uniformly surface sphere, thus 3d layout. clear however “uniformly sphere” means. want order vertices differently, permute using permute() function.","code":""},{"path":[]},{"path":"/reference/layout_on_sphere.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph layout with vertices on the surface of a sphere — layout_on_sphere","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_randomly.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly place vertices on a plane or in 3d space — layout_randomly","title":"Randomly place vertices on a plane or in 3d space — layout_randomly","text":"function uniformly randomly places vertices graph two three dimensions.","code":""},{"path":"/reference/layout_randomly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly place vertices on a plane or in 3d space — layout_randomly","text":"","code":"layout_randomly(graph, dim = 2)  randomly(...)"},{"path":"/reference/layout_randomly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly place vertices on a plane or in 3d space — layout_randomly","text":"graph input graph. dim Integer scalar, dimension space use. must 2 3. ... Parameters pass layout_randomly().","code":""},{"path":"/reference/layout_randomly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly place vertices on a plane or in 3d space — layout_randomly","text":"numeric matrix two three columns.","code":""},{"path":"/reference/layout_randomly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Randomly place vertices on a plane or in 3d space — layout_randomly","text":"Randomly places vertices [-1,1] square (2d) cube (3d). probably useless layout, can use starting point layout generators.","code":""},{"path":[]},{"path":"/reference/layout_randomly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Randomly place vertices on a plane or in 3d space — layout_randomly","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_with_dh.html","id":null,"dir":"Reference","previous_headings":"","what":"The Davidson-Harel layout algorithm — layout_with_dh","title":"The Davidson-Harel layout algorithm — layout_with_dh","text":"Place vertices graph plane, according simulated annealing algorithm Davidson Harel.","code":""},{"path":"/reference/layout_with_dh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Davidson-Harel layout algorithm — layout_with_dh","text":"","code":"layout_with_dh(   graph,   coords = NULL,   maxiter = 10,   fineiter = max(10, log2(vcount(graph))),   cool.fact = 0.75,   weight.node.dist = 1,   weight.border = 0,   weight.edge.lengths = edge_density(graph)/10,   weight.edge.crossings = 1 - sqrt(edge_density(graph)),   weight.node.edge.dist = 0.2 * (1 - edge_density(graph)) )  with_dh(...)"},{"path":"/reference/layout_with_dh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Davidson-Harel layout algorithm — layout_with_dh","text":"graph graph lay . Edge directions ignored. coords Optional starting positions vertices. argument NULL appropriate matrix starting coordinates. maxiter Number iterations perform first phase. fineiter Number iterations fine tuning phase. cool.fact Cooling factor. weight.node.dist Weight node-node distances component energy function. weight.border Weight distance border component energy function. can set zero, vertices allowed sit border. weight.edge.lengths Weight edge length component energy function. weight.edge.crossings Weight edge crossing component energy function. weight.node.edge.dist Weight node-edge distance component energy function. ... Passed layout_with_dh().","code":""},{"path":"/reference/layout_with_dh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Davidson-Harel layout algorithm — layout_with_dh","text":"two- three-column matrix, row giving coordinates vertex, according ids vertex ids.","code":""},{"path":"/reference/layout_with_dh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Davidson-Harel layout algorithm — layout_with_dh","text":"function implements algorithm Davidson Harel, see Ron Davidson, David Harel: Drawing Graphs Nicely Using Simulated Annealing. ACM Transactions Graphics 15(4), pp. 301-331, 1996. algorithm uses simulated annealing sophisticated energy function, unfortunately hard parameterize different graphs. original publication disclose parameter values, ones determined experimentation. algorithm consists two phases, annealing phase, fine-tuning phase. simulated annealing second phase. implementation tries follow original publication, much possible. major difference coordinates explicitly kept within bounds rectangle layout.","code":""},{"path":"/reference/layout_with_dh.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Davidson-Harel layout algorithm — layout_with_dh","text":"Ron Davidson, David Harel: Drawing Graphs Nicely Using Simulated Annealing. ACM Transactions Graphics 15(4), pp. 301-331, 1996.","code":""},{"path":[]},{"path":"/reference/layout_with_dh.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Davidson-Harel layout algorithm — layout_with_dh","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_with_dh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Davidson-Harel layout algorithm — layout_with_dh","text":"","code":"set.seed(42) ## Figures from the paper g_1b <- make_star(19, mode = \"undirected\") + path(c(2:19, 2)) +   path(c(seq(2, 18, by = 2), 2)) plot(g_1b, layout = layout_with_dh) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_2 <- make_lattice(c(8, 3)) + edges(1, 8, 9, 16, 17, 24) plot(g_2, layout = layout_with_dh) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_3 <- make_empty_graph(n = 70) plot(g_3, layout = layout_with_dh) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_4 <- make_empty_graph(n = 70, directed = FALSE) + edges(1:70) plot(g_4, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_5a <- make_ring(24) plot(g_5a, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_5b <- make_ring(40) plot(g_5b, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_6 <- make_lattice(c(2, 2, 2)) plot(g_6, layout = layout_with_dh) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_7 <- graph_from_literal(1:3:5 -- 2:4:6) plot(g_7, layout = layout_with_dh, vertex.label = V(g_7)$name) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_8 <- make_ring(5) + make_ring(10) + make_ring(5) +   edges(     1, 6, 2, 8, 3, 10, 4, 12, 5, 14,     7, 16, 9, 17, 11, 18, 13, 19, 15, 20   ) plot(g_8, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_9 <- make_lattice(c(3, 2, 2)) plot(g_9, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_10 <- make_lattice(c(6, 6)) plot(g_10, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_11a <- make_tree(31, 2, mode = \"undirected\") plot(g_11a, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_11b <- make_tree(21, 4, mode = \"undirected\") plot(g_11b, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g_12 <- make_empty_graph(n = 37, directed = FALSE) +   path(1:5, 10, 22, 31, 37:33, 27, 16, 6, 1) + path(6, 7, 11, 9, 10) + path(16:22) +   path(27:31) + path(2, 7, 18, 28, 34) + path(3, 8, 11, 19, 29, 32, 35) +   path(4, 9, 20, 30, 36) + path(1, 7, 12, 14, 19, 24, 26, 30, 37) +   path(5, 9, 13, 15, 19, 23, 25, 28, 33) + path(3, 12, 16, 25, 35, 26, 22, 13, 3) plot(g_12, layout = layout_with_dh, vertex.size = 5, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_with_drl.html","id":null,"dir":"Reference","previous_headings":"","what":"The DrL graph layout generator — layout_with_drl","title":"The DrL graph layout generator — layout_with_drl","text":"DrL force-directed graph layout toolbox focused real-world large-scale graphs, developed Shawn Martin colleagues Sandia National Laboratories.","code":""},{"path":"/reference/layout_with_drl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The DrL graph layout generator — layout_with_drl","text":"","code":"layout_with_drl(   graph,   use.seed = FALSE,   seed = matrix(runif(vcount(graph) * 2), ncol = 2),   options = drl_defaults$default,   weights = NULL,   fixed = NULL,   dim = 2 )  with_drl(...)"},{"path":"/reference/layout_with_drl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The DrL graph layout generator — layout_with_drl","text":"graph input graph, can directed undirected. use.seed Logical scalar, whether use coordinates given seed argument starting point. seed matrix two columns, starting coordinates vertices use.seed TRUE. ignored otherwise. options Options layout generator, named list. See details . weights weights edges. must positive numeric vector, NULL NA. NULL input graph ‘weight’ edge attribute, attribute used. NULL attribute present, edges equal weights. Set NA graph ‘weight’ edge attribute, want use layout. Larger edge weights correspond stronger connections. fixed Logical vector, can used fix vertices. Unfortunately never implemented C core igraph library thus never worked. argument now deprecated removed igraph 1.4.0. dim Either ‘2’ ‘3’, specifies whether want two dimensional three dimensional layout. Note nature DrL algorithm, three dimensional layout takes significantly longer compute. ... Passed layout_with_drl().","code":""},{"path":"/reference/layout_with_drl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The DrL graph layout generator — layout_with_drl","text":"numeric matrix two columns.","code":""},{"path":"/reference/layout_with_drl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The DrL graph layout generator — layout_with_drl","text":"function implements force-directed DrL layout generator. generator following parameters: edge.cut Edge cutting done late stages algorithm order achieve less dense layouts.  Edges cut lot stress (large value objective function sum). edge cutting parameter value 0 1 0 representing edge cutting 1 representing maximal edge cutting. init.iterations Number iterations first phase. init.temperature Start temperature, first phase. init.attraction Attraction, first phase. init.damping.mult Damping, first phase. liquid.iterations Number iterations, liquid phase. liquid.temperature Start temperature, liquid phase. liquid.attraction Attraction, liquid phase. liquid.damping.mult Damping, liquid phase. expansion.iterations Number iterations, expansion phase. expansion.temperature Start temperature, expansion phase. expansion.attraction Attraction, expansion phase. expansion.damping.mult Damping, expansion phase. cooldown.iterations Number iterations, cooldown phase. cooldown.temperature Start temperature, cooldown phase. cooldown.attraction Attraction, cooldown phase. cooldown.damping.mult Damping, cooldown phase. crunch.iterations Number iterations, crunch phase. crunch.temperature Start temperature, crunch phase. crunch.attraction Attraction, crunch phase. crunch.damping.mult Damping, crunch phase. simmer.iterations Number iterations, simmer phase. simmer.temperature Start temperature, simmer phase. simmer.attraction Attraction, simmer phase. simmer.damping.mult Damping, simmer phase.","code":""},{"path":"/reference/layout_with_drl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The DrL graph layout generator — layout_with_drl","text":"See following technical report: Martin, S., Brown, W.M., Klavans, R., Boyack, K.W., DrL: Distributed Recursive (Graph) Layout. SAND Reports, 2008. 2936: p. 1-10.","code":""},{"path":[]},{"path":"/reference/layout_with_drl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The DrL graph layout generator — layout_with_drl","text":"Shawn Martin (http://www.cs.otago.ac.nz/homepages/smartin/) Gabor Csardi csardi.gabor@gmail.com R/igraph interface three dimensional version.","code":""},{"path":"/reference/layout_with_drl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The DrL graph layout generator — layout_with_drl","text":"","code":"g <- as.undirected(sample_pa(100, m = 1)) l <- layout_with_drl(g, options = list(simmer.attraction = 0)) plot(g, layout = l, vertex.size = 3, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_with_fr.html","id":null,"dir":"Reference","previous_headings":"","what":"The Fruchterman-Reingold layout algorithm — layout_with_fr","title":"The Fruchterman-Reingold layout algorithm — layout_with_fr","text":"Place vertices plane using force-directed layout algorithm Fruchterman Reingold.","code":""},{"path":"/reference/layout_with_fr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Fruchterman-Reingold layout algorithm — layout_with_fr","text":"","code":"layout_with_fr(   graph,   coords = NULL,   dim = 2,   niter = 500,   start.temp = sqrt(vcount(graph)),   grid = c(\"auto\", \"grid\", \"nogrid\"),   weights = NULL,   minx = NULL,   maxx = NULL,   miny = NULL,   maxy = NULL,   minz = NULL,   maxz = NULL,   coolexp,   maxdelta,   area,   repulserad,   maxiter )  with_fr(...)"},{"path":"/reference/layout_with_fr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Fruchterman-Reingold layout algorithm — layout_with_fr","text":"graph graph lay . Edge directions ignored. coords Optional starting positions vertices. argument NULL appropriate matrix starting coordinates. dim Integer scalar, 2 3, dimension layout.  Two dimensional layouts places plane, three dimensional ones 3d space. niter Integer scalar, number iterations perform. start.temp Real scalar, start temperature. maximum amount movement alloved along one axis, within one step, vertex. Currently decreased linearly zero iteration. grid Character scalar, whether use faster, less accurate grid based implementation algorithm. default (“auto”), grid-based implementation used graph one thousand vertices. weights vector giving edge weights. weight edge attribute used default, present. weights given, attraction along edges multiplied given edge weights. places vertices connected highly weighted edge closer . Weights must positive. minx NULL, must numeric vector gives lower boundaries ‘x’ coordinates vertices. length vector must match number vertices graph. maxx Similar minx, gives upper boundaries. miny Similar minx, gives lower boundaries ‘y’ coordinates. maxy Similar minx, gives upper boundaries ‘y’ coordinates. minz Similar minx, gives lower boundaries ‘z’ coordinates. maxz Similar minx, gives upper boundaries ‘z’ coordinates. coolexp, maxdelta, area, repulserad arguments supported igraph version 0.8.0 ignored (warning). maxiter deprecated synonym niter, compatibility. ... Passed layout_with_fr().","code":""},{"path":"/reference/layout_with_fr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Fruchterman-Reingold layout algorithm — layout_with_fr","text":"two- three-column matrix, row giving coordinates vertex, according ids vertex ids.","code":""},{"path":"/reference/layout_with_fr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Fruchterman-Reingold layout algorithm — layout_with_fr","text":"See referenced paper details algorithm. function rewritten scratch igraph version 0.8.0.","code":""},{"path":"/reference/layout_with_fr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Fruchterman-Reingold layout algorithm — layout_with_fr","text":"Fruchterman, T.M.J. Reingold, E.M. (1991). Graph Drawing Force-directed Placement. Software - Practice Experience, 21(11):1129-1164.","code":""},{"path":[]},{"path":"/reference/layout_with_fr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Fruchterman-Reingold layout algorithm — layout_with_fr","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_with_fr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Fruchterman-Reingold layout algorithm — layout_with_fr","text":"","code":"# Fixing ego g <- sample_pa(20, m = 2) minC <- rep(-Inf, vcount(g)) maxC <- rep(Inf, vcount(g)) minC[1] <- maxC[1] <- 0 co <- layout_with_fr(g,   minx = minC, maxx = maxC,   miny = minC, maxy = maxC ) co[1, ] #> [1] 0 0 plot(g,   layout = co, vertex.size = 30, edge.arrow.size = 0.2,   vertex.label = c(\"ego\", rep(\"\", vcount(g) - 1)), rescale = FALSE,   xlim = range(co[, 1]), ylim = range(co[, 2]), vertex.label.dist = 0,   vertex.label.color = \"red\" ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' axis(1) #> Error in axis(1): plot.new has not been called yet axis(2) #> Error in axis(2): plot.new has not been called yet"},{"path":"/reference/layout_with_gem.html","id":null,"dir":"Reference","previous_headings":"","what":"The GEM layout algorithm — layout_with_gem","title":"The GEM layout algorithm — layout_with_gem","text":"Place vertices plane using GEM force-directed layout algorithm.","code":""},{"path":"/reference/layout_with_gem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The GEM layout algorithm — layout_with_gem","text":"","code":"layout_with_gem(   graph,   coords = NULL,   maxiter = 40 * vcount(graph)^2,   temp.max = max(vcount(graph), 1),   temp.min = 1/10,   temp.init = sqrt(max(vcount(graph), 1)) )  with_gem(...)"},{"path":"/reference/layout_with_gem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The GEM layout algorithm — layout_with_gem","text":"graph input graph. Edge directions ignored. coords NULL, starting coordinates given , two three column matrix, depending dim argument. maxiter maximum number iterations perform. Updating single vertex counts iteration.  reasonable default 40 * n * n, n number vertices. original paper suggests 4 * n * n, usually works parameters set carefully. temp.max maximum allowed local temperature. reasonable default number vertices. temp.min global temperature algorithm terminates (even reaching maxiter iterations). reasonable default 1/10. temp.init Initial local temperature vertices. reasonable default square root number vertices. ... Passed layout_with_gem().","code":""},{"path":"/reference/layout_with_gem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The GEM layout algorithm — layout_with_gem","text":"numeric matrix two columns, many rows number vertices.","code":""},{"path":"/reference/layout_with_gem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The GEM layout algorithm — layout_with_gem","text":"See referenced paper details algorithm.","code":""},{"path":"/reference/layout_with_gem.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The GEM layout algorithm — layout_with_gem","text":"Arne Frick, Andreas Ludwig, Heiko Mehldau: Fast Adaptive Layout Algorithm Undirected Graphs, Proc. Graph Drawing 1994, LNCS 894, pp. 388-403, 1995.","code":""},{"path":[]},{"path":"/reference/layout_with_gem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The GEM layout algorithm — layout_with_gem","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_with_gem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The GEM layout algorithm — layout_with_gem","text":"","code":"set.seed(42) g <- make_ring(10) plot(g, layout = layout_with_gem) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_with_graphopt.html","id":null,"dir":"Reference","previous_headings":"","what":"The graphopt layout algorithm — layout_with_graphopt","title":"The graphopt layout algorithm — layout_with_graphopt","text":"force-directed layout algorithm, scales relatively well large graphs.","code":""},{"path":"/reference/layout_with_graphopt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The graphopt layout algorithm — layout_with_graphopt","text":"","code":"layout_with_graphopt(   graph,   start = NULL,   niter = 500,   charge = 0.001,   mass = 30,   spring.length = 0,   spring.constant = 1,   max.sa.movement = 5 )  with_graphopt(...)"},{"path":"/reference/layout_with_graphopt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The graphopt layout algorithm — layout_with_graphopt","text":"graph input graph. start given, matrix two columns one line vertex. matrix used starting positions algorithm. given, random starting matrix used. niter Integer scalar, number iterations perform.  couple hundred general. large graph might want iterations check result. good enough can feed start argument. default value 500. charge charge vertices, used calculate electric repulsion. default 0.001. mass mass vertices, used spring forces. default 30. spring.length length springs, integer number. default value zero. spring.constant spring constant, default value one. max.sa.movement Real constant, gives maximum amount movement allowed single step along single axis. default value 5. ... Passed layout_with_graphopt().","code":""},{"path":"/reference/layout_with_graphopt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The graphopt layout algorithm — layout_with_graphopt","text":"numeric matrix two columns, row vertex.","code":""},{"path":"/reference/layout_with_graphopt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The graphopt layout algorithm — layout_with_graphopt","text":"layout_with_graphopt() port graphopt layout algorithm Michael Schmuhl. graphopt version 0.4.1 rewritten C support layers removed (might added later) code bit reorganized avoid unnecessary steps node charge (see ) zero. graphopt uses physical analogies defining attracting repelling forces among vertices physical system simulated reaches equilibrium. (simulated annealing anything like , stable fixed point guaranteed.) See also http://www.schmuhl.org/graphopt/ original graphopt.","code":""},{"path":[]},{"path":"/reference/layout_with_graphopt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The graphopt layout algorithm — layout_with_graphopt","text":"Michael Schmuhl original graphopt code, rewritten wrapped Gabor Csardi csardi.gabor@gmail.com.","code":""},{"path":"/reference/layout_with_kk.html","id":null,"dir":"Reference","previous_headings":"","what":"The Kamada-Kawai layout algorithm — layout_with_kk","title":"The Kamada-Kawai layout algorithm — layout_with_kk","text":"Place vertices plane, 3D space, based physical model springs.","code":""},{"path":"/reference/layout_with_kk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Kamada-Kawai layout algorithm — layout_with_kk","text":"","code":"layout_with_kk(   graph,   coords = NULL,   dim = 2,   maxiter = 50 * vcount(graph),   epsilon = 0,   kkconst = max(vcount(graph), 1),   weights = NULL,   minx = NULL,   maxx = NULL,   miny = NULL,   maxy = NULL,   minz = NULL,   maxz = NULL,   niter,   sigma,   initemp,   coolexp,   start )  with_kk(...)"},{"path":"/reference/layout_with_kk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Kamada-Kawai layout algorithm — layout_with_kk","text":"graph input graph. Edge directions ignored. coords NULL, starting coordinates given , two three column matrix, depending dim argument. dim Integer scalar, 2 3, dimension layout.  Two dimensional layouts places plane, three dimensional ones 3d space. maxiter maximum number iterations perform. algorithm might terminate earlier, see epsilon argument. epsilon Numeric scalar, algorithm terminates, maximal delta less . (See reference delta means.) set zero, function always performs maxiter iterations. kkconst Numeric scalar, Kamada-Kawai vertex attraction constant. Typical (default) value number vertices. weights Edge weights, larger values result longer edges. Note opposite layout_with_fr(). Weights must positive. minx NULL, must numeric vector gives lower boundaries ‘x’ coordinates vertices. length vector must match number vertices graph. maxx Similar minx, gives upper boundaries. miny Similar minx, gives lower boundaries ‘y’ coordinates. maxy Similar minx, gives upper boundaries ‘y’ coordinates. minz Similar minx, gives lower boundaries ‘z’ coordinates. maxz Similar minx, gives upper boundaries ‘z’ coordinates. niter, sigma, initemp, coolexp arguments supported igraph version 0.8.0 ignored (warning). start Deprecated synonym coords, compatibility. ... Passed layout_with_kk().","code":""},{"path":"/reference/layout_with_kk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Kamada-Kawai layout algorithm — layout_with_kk","text":"numeric matrix two (dim=2) three (dim=3) columns, many rows number vertices, x, y potentially z coordinates vertices.","code":""},{"path":"/reference/layout_with_kk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Kamada-Kawai layout algorithm — layout_with_kk","text":"See referenced paper details algorithm. function rewritten scratch igraph version 0.8.0 follows truthfully original publication Kamada Kawai now.","code":""},{"path":"/reference/layout_with_kk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Kamada-Kawai layout algorithm — layout_with_kk","text":"Kamada, T. Kawai, S.: Algorithm Drawing General Undirected Graphs. Information Processing Letters, 31/1, 7--15, 1989.","code":""},{"path":[]},{"path":"/reference/layout_with_kk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Kamada-Kawai layout algorithm — layout_with_kk","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_with_kk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Kamada-Kawai layout algorithm — layout_with_kk","text":"","code":"g <- make_ring(10) E(g)$weight <- rep(1:2, length.out = ecount(g)) plot(g, layout = layout_with_kk, edge.label = E(g)$weight) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_with_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Large Graph Layout — layout_with_lgl","title":"Large Graph Layout — layout_with_lgl","text":"layout generator larger graphs.","code":""},{"path":"/reference/layout_with_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Large Graph Layout — layout_with_lgl","text":"","code":"layout_with_lgl(   graph,   maxiter = 150,   maxdelta = vcount(graph),   area = vcount(graph)^2,   coolexp = 1.5,   repulserad = area * vcount(graph),   cellsize = sqrt(sqrt(area)),   root = NULL )  with_lgl(...)"},{"path":"/reference/layout_with_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Large Graph Layout — layout_with_lgl","text":"graph input graph maxiter maximum number iterations perform (150). maxdelta maximum change vertex iteration (number vertices). area area surface vertices placed (square number vertices). coolexp cooling exponent simulated annealing (1.5). repulserad Cancellation radius repulsion (area times number vertices). cellsize size cells grid. calculating repulsion forces vertices vertices neighboring grid cells taken account (fourth root number area. root id vertex place middle layout. default value -1 means random vertex selected. ... Passed layout_with_lgl().","code":""},{"path":"/reference/layout_with_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Large Graph Layout — layout_with_lgl","text":"numeric matrix two columns many rows vertices.","code":""},{"path":"/reference/layout_with_lgl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Large Graph Layout — layout_with_lgl","text":"layout_with_lgl() large connected graphs, similar layout generator Large Graph Layout software (https://lgl.sourceforge.net/).","code":""},{"path":[]},{"path":"/reference/layout_with_lgl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Large Graph Layout — layout_with_lgl","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_with_mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph layout by multidimensional scaling — layout_with_mds","title":"Graph layout by multidimensional scaling — layout_with_mds","text":"Multidimensional scaling distance matrix defined vertices graph.","code":""},{"path":"/reference/layout_with_mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph layout by multidimensional scaling — layout_with_mds","text":"","code":"layout_with_mds(graph, dist = NULL, dim = 2, options = arpack_defaults)  with_mds(...)"},{"path":"/reference/layout_with_mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph layout by multidimensional scaling — layout_with_mds","text":"graph input graph. dist distance matrix multidimensional scaling.  NULL (default), unweighted shortest path matrix used. dim layout_with_mds() supports dimensions number nodes minus one, graph connected; unconnected graphs, possible values 2. merge_coords() works 2D. options currently ignored, ARPACK used solving eigenproblem ... Passed layout_with_mds().","code":""},{"path":"/reference/layout_with_mds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph layout by multidimensional scaling — layout_with_mds","text":"numeric matrix dim columns.","code":""},{"path":"/reference/layout_with_mds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph layout by multidimensional scaling — layout_with_mds","text":"layout_with_mds() uses metric multidimensional scaling generating coordinates. Multidimensional scaling aims place points higher dimensional space (typically) 2 dimensional plane, distance points kept much possible. default igraph uses shortest path matrix distances nodes, user can override via dist argument. function generates layout separately graph component merges via merge_coords().","code":""},{"path":"/reference/layout_with_mds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Graph layout by multidimensional scaling — layout_with_mds","text":"Cox, T. F. Cox, M. . . (2001) Multidimensional Scaling.  Second edition. Chapman Hall.","code":""},{"path":[]},{"path":"/reference/layout_with_mds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph layout by multidimensional scaling — layout_with_mds","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/layout_with_mds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph layout by multidimensional scaling — layout_with_mds","text":"","code":"g <- sample_gnp(100, 2 / 100) l <- layout_with_mds(g) plot(g, layout = l, vertex.label = NA, vertex.size = 3) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/layout_with_sugiyama.html","id":null,"dir":"Reference","previous_headings":"","what":"The Sugiyama graph layout generator — layout_with_sugiyama","title":"The Sugiyama graph layout generator — layout_with_sugiyama","text":"Sugiyama layout algorithm layered directed acyclic graphs. algorithm minimized edge crossings.","code":""},{"path":"/reference/layout_with_sugiyama.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Sugiyama graph layout generator — layout_with_sugiyama","text":"","code":"layout_with_sugiyama(   graph,   layers = NULL,   hgap = 1,   vgap = 1,   maxiter = 100,   weights = NULL,   attributes = c(\"default\", \"all\", \"none\") )  with_sugiyama(...)"},{"path":"/reference/layout_with_sugiyama.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Sugiyama graph layout generator — layout_with_sugiyama","text":"graph input graph. layers numeric vector NULL. NULL, specify layer index vertices. Layers numbered one. NULL, igraph calculates layers automatically. hgap Real scalar, minimum horizontal gap vertices layer. vgap Real scalar, distance layers. maxiter Integer scalar, maximum number iterations crossing minimization stage. 100 reasonable default; feel many edge crossings, increase . weights Optional edge weight vector. NULL, 'weight' edge attribute used, one. Supply NA igraph ignores edge weights. used graph contains cycles; igraph tend reverse edges smaller weights breaking cycles. attributes graph/vertex/edge attributes keep extended graph. ‘default’ keeps ‘size’, ‘size2’, ‘shape’, ‘label’ ‘color’ vertex attributes ‘arrow.mode’ ‘arrow.size’ edge attributes. ‘’ keep graph, vertex edge attributes, ‘none’ keeps none . ... Passed layout_with_sugiyama().","code":""},{"path":"/reference/layout_with_sugiyama.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Sugiyama graph layout generator — layout_with_sugiyama","text":"list components: layout layout, two-column matrix, original graph vertices. layout.dummy layout dummy vertices, two column matrix. extd_graph original graph, extended dummy vertices.  ‘dummy’ vertex attribute set graph, logical attributes, tells whether vertex dummy vertex. ‘layout’ graph attribute also set, layout matrix (original dummy) vertices.","code":""},{"path":"/reference/layout_with_sugiyama.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Sugiyama graph layout generator — layout_with_sugiyama","text":"layout algorithm designed directed acyclic graphs vertex assigned layer. Layers indexed zero, vertices layer placed horizontal line. X coordinates vertices within layer decided heuristic proposed Sugiyama et al. minimize edge crossings. can also try lay undirected graphs, graphs containing cycles, graphs without priori layered assignment algorithm. igraph try eliminate cycles assign vertices layers, guarantee quality layout cases. Sugiyama layout may introduce “bends” edges order obtain visually pleasing layout. achieved adding dummy nodes edges spanning one layer. resulting layout assigns coordinates nodes original graph also dummy nodes. layout algorithm also return extended graph dummy nodes. details, see reference .","code":""},{"path":"/reference/layout_with_sugiyama.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Sugiyama graph layout generator — layout_with_sugiyama","text":"K. Sugiyama, S. Tagawa M. Toda, \"Methods Visual Understanding Hierarchical Systems\". IEEE Transactions Systems, Man Cybernetics 11(2):109-125, 1981.","code":""},{"path":[]},{"path":"/reference/layout_with_sugiyama.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Sugiyama graph layout generator — layout_with_sugiyama","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/layout_with_sugiyama.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Sugiyama graph layout generator — layout_with_sugiyama","text":"","code":"## Data taken from http://tehnick-8.narod.ru/dc_clients/ DC <- graph_from_literal(   \"DC++\" -+ \"LinuxDC++\":\"BCDC++\":\"EiskaltDC++\":\"StrongDC++\":\"DiCe!++\",   \"LinuxDC++\" -+ \"FreeDC++\", \"BCDC++\" -+ \"StrongDC++\",   \"FreeDC++\" -+ \"BMDC++\":\"EiskaltDC++\",   \"StrongDC++\" -+ \"AirDC++\":\"zK++\":\"ApexDC++\":\"TkDC++\",   \"StrongDC++\" -+ \"StrongDC++ SQLite\":\"RSX++\",   \"ApexDC++\" -+ \"FlylinkDC++ ver <= 4xx\",   \"ApexDC++\" -+ \"ApexDC++ Speed-Mod\":\"DiCe!++\",   \"StrongDC++ SQLite\" -+ \"FlylinkDC++ ver >= 5xx\",   \"ApexDC++ Speed-Mod\" -+ \"FlylinkDC++ ver <= 4xx\",   \"ApexDC++ Speed-Mod\" -+ \"GreylinkDC++\",   \"FlylinkDC++ ver <= 4xx\" -+ \"FlylinkDC++ ver >= 5xx\",   \"FlylinkDC++ ver <= 4xx\" -+ AvaLink,   \"GreylinkDC++\" -+ AvaLink:\"RayLinkDC++\":\"SparkDC++\":PeLink )  ## Use edge types E(DC)$lty <- 1 E(DC)[\"BCDC++\" %->% \"StrongDC++\"]$lty <- 2 E(DC)[\"FreeDC++\" %->% \"EiskaltDC++\"]$lty <- 2 E(DC)[\"ApexDC++\" %->% \"FlylinkDC++ ver <= 4xx\"]$lty <- 2 E(DC)[\"ApexDC++\" %->% \"DiCe!++\"]$lty <- 2 E(DC)[\"StrongDC++ SQLite\" %->% \"FlylinkDC++ ver >= 5xx\"]$lty <- 2 E(DC)[\"GreylinkDC++\" %->% \"AvaLink\"]$lty <- 2  ## Layers, as on the plot layers <- list(   c(\"DC++\"),   c(\"LinuxDC++\", \"BCDC++\"),   c(\"FreeDC++\", \"StrongDC++\"),   c(     \"BMDC++\", \"EiskaltDC++\", \"AirDC++\", \"zK++\", \"ApexDC++\",     \"TkDC++\", \"RSX++\"   ),   c(\"StrongDC++ SQLite\", \"ApexDC++ Speed-Mod\", \"DiCe!++\"),   c(\"FlylinkDC++ ver <= 4xx\", \"GreylinkDC++\"),   c(     \"FlylinkDC++ ver >= 5xx\", \"AvaLink\", \"RayLinkDC++\",     \"SparkDC++\", \"PeLink\"   ) )  ## Check that we have all nodes all(sort(unlist(layers)) == sort(V(DC)$name)) #> [1] TRUE  ## Add some graphical parameters V(DC)$color <- \"white\" V(DC)$shape <- \"rectangle\" V(DC)$size <- 20 V(DC)$size2 <- 10 V(DC)$label <- lapply(V(DC)$name, function(x) {   paste(strwrap(x, 12), collapse = \"\\n\") }) E(DC)$arrow.size <- 0.5  ## Create a similar layout using the predefined layers lay1 <- layout_with_sugiyama(DC, layers = apply(sapply(   layers,   function(x) V(DC)$name %in% x ), 1, which))  ## Simple plot, not very nice par(mar = rep(.1, 4)) plot(DC, layout = lay1$layout, vertex.label.cex = 0.5) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ## Sugiyama plot plot(lay1$extd_graph, vertex.label.cex = 0.5) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ## The same with automatic layer calculation ## Keep vertex/edge attributes in the extended graph lay2 <- layout_with_sugiyama(DC, attributes = \"all\") plot(lay2$extd_graph, vertex.label.cex = 0.5) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ## Another example, from the following paper: ## Markus Eiglsperger, Martin Siebenhaller, Michael Kaufmann: ## An Efficient Implementation of Sugiyama's Algorithm for ## Layered Graph Drawing, Journal of Graph Algorithms and ## Applications 9, 305--325 (2005).  ex <- graph_from_literal(   0 -+ 29:6:5:20:4,   1 -+ 12,   2 -+ 23:8,   3 -+ 4,   4,   5 -+ 2:10:14:26:4:3,   6 -+ 9:29:25:21:13,   7,   8 -+ 20:16,   9 -+ 28:4,   10 -+ 27,   11 -+ 9:16,   12 -+ 9:19,   13 -+ 20,   14 -+ 10,   15 -+ 16:27,   16 -+ 27,   17 -+ 3,   18 -+ 13,   19 -+ 9,   20 -+ 4,   21 -+ 22,   22 -+ 8:9,   23 -+ 9:24,   24 -+ 12:15:28,   25 -+ 11,   26 -+ 18,   27 -+ 13:19,   28 -+ 7,   29 -+ 25 )  layers <- list(   0, c(5, 17), c(2, 14, 26, 3), c(23, 10, 18), c(1, 24),   12, 6, c(29, 21), c(25, 22), c(11, 8, 15), 16, 27, c(13, 19),   c(9, 20), c(4, 28), 7 )  layex <- layout_with_sugiyama(ex, layers = apply(   sapply(     layers,     function(x) V(ex)$name %in% as.character(x)   ),   1, which ))  origvert <- c(rep(TRUE, vcount(ex)), rep(FALSE, nrow(layex$layout.dummy))) realedge <- as_edgelist(layex$extd_graph)[, 2] <= vcount(ex) plot(layex$extd_graph,   vertex.label.cex = 0.5,   edge.arrow.size = .5,   vertex.size = ifelse(origvert, 5, 0),   vertex.shape = ifelse(origvert, \"square\", \"none\"),   vertex.label = ifelse(origvert, V(ex)$name, \"\"),   edge.arrow.mode = ifelse(realedge, 2, 0) ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/local_scan.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute local scan statistics on graphs — local_scan","title":"Compute local scan statistics on graphs — local_scan","text":"scan statistic summary locality statistics computed local neighborhood vertex. local_scan() function computes local statistics vertex given neighborhood size statistic function.","code":""},{"path":"/reference/local_scan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute local scan statistics on graphs — local_scan","text":"","code":"local_scan(   graph.us,   graph.them = NULL,   k = 1,   FUN = NULL,   weighted = FALSE,   mode = c(\"out\", \"in\", \"all\"),   neighborhoods = NULL,   ... )"},{"path":"/reference/local_scan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute local scan statistics on graphs — local_scan","text":"graph.us, graph igraph object, graph scan statistics computed graph.igraph object NULL, NULL, ‘’ statistics computed, .e. neighborhoods calculated graph.us evaluated graph.. k integer scalar, size local neighborhood vertex. non-negative. FUN Character, function name, function object , computing local statistic neighborhood. NULL(default value), ecount() used unweighted graphs (weighted=FALSE) function computes sum edge weights used weighted graphs (weighted=TRUE). argument ignored k zero. weighted Logical scalar, TRUE edge weights used computation scan statistic. TRUE, graph weighted.  Note argument ignored FUN NULL, \"ecount\" \"sumweights\". mode Character scalar, kind neighborhoods use calculation. One ‘’, ‘’, ‘’ ‘total’. argument ignored undirected graphs. neighborhoods list neighborhoods, one vertex, NULL. NULL, function evaluated induced subgraphs specified neighborhoods. theory useful graph.us graph used multiple graph.arguments. neighborhoods can calculated graph.us used multiple graphs. practice, currently slower simply using graph.multiple times. ... Arguments passed FUN, function computes local statistics.","code":""},{"path":"/reference/local_scan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute local scan statistics on graphs — local_scan","text":"local_scan() typically numeric vector containing computed local statistics vertex. general list vector objects, returned FUN.","code":""},{"path":"/reference/local_scan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute local scan statistics on graphs — local_scan","text":"See given reference details local scan statistics. local_scan() calculates exact local scan statistics. graph.NULL, local_scan() computes ‘us’ variant scan statistics.  Otherwise, graph.igraph object ‘’ variant computed using graph.us extract neighborhood information, applying FUN neighborhoods graph..","code":""},{"path":"/reference/local_scan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute local scan statistics on graphs — local_scan","text":"Priebe, C. E., Conroy, J. M., Marchette, D. J., Park, Y. (2005).  Scan Statistics Enron Graphs. Computational Mathematical Organization Theory.","code":""},{"path":[]},{"path":"/reference/local_scan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute local scan statistics on graphs — local_scan","text":"","code":"pair <- sample_correlated_gnp_pair(n = 10^3, corr = 0.8, p = 0.1) local_0_us <- local_scan(graph.us = pair$graph1, k = 0) local_1_us <- local_scan(graph.us = pair$graph1, k = 1)  local_0_them <- local_scan(   graph.us = pair$graph1,   graph.them = pair$graph2, k = 0 ) local_1_them <- local_scan(   graph.us = pair$graph1,   graph.them = pair$graph2, k = 1 )  Neigh_1 <- neighborhood(pair$graph1, order = 1) local_1_them_nhood <- local_scan(   graph.us = pair$graph1,   graph.them = pair$graph2,   neighborhoods = Neigh_1 )"},{"path":"/reference/make_.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a new graph — make_","title":"Make a new graph — make_","text":"generic function creating graphs.","code":""},{"path":"/reference/make_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a new graph — make_","text":"","code":"make_(...)"},{"path":"/reference/make_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a new graph — make_","text":"... Parameters, see details .","code":""},{"path":"/reference/make_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a new graph — make_","text":"make_() generic function creating graphs. every graph constructor igraph make_ prefix, corresponding function without prefix: e.g. make_ring() also ring(), etc. true random graph samplers, .e. constructor sample_ prefix, corresponding function without prefix. shorter forms can used together make_(). advantage form user can specify constructor modifiers work constructors. E.g. with_vertex_() modifier adds vertex attributes newly created graphs. See examples various constructor modifiers .","code":""},{"path":[]},{"path":"/reference/make_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a new graph — make_","text":"","code":"r <- make_(ring(10)) l <- make_(lattice(c(3, 3, 3)))  r2 <- make_(ring(10), with_vertex_(color = \"red\", name = LETTERS[1:10])) l2 <- make_(lattice(c(3, 3, 3)), with_edge_(weight = 2))  ran <- sample_(degseq(c(3, 3, 3, 3, 3, 3), method = \"simple\"), simplified()) degree(ran) #> [1] 3 2 3 3 3 2 is_simple(ran) #> [1] TRUE"},{"path":"/reference/make_bipartite_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bipartite graph — is_bipartite","title":"Create a bipartite graph — is_bipartite","text":"bipartite graph two kinds vertices connections allowed different kinds.","code":""},{"path":"/reference/make_bipartite_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bipartite graph — is_bipartite","text":"","code":"is_bipartite(graph)  make_bipartite_graph(types, edges, directed = FALSE)  bipartite_graph(...)"},{"path":"/reference/make_bipartite_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bipartite graph — is_bipartite","text":"graph input graph. types vector giving vertex types. coerced boolean. length vector gives number vertices graph. vector named vector, names attached graph name vertex attribute. edges vector giving edges graph, way regular graph() function. checked edges indeed connect vertices different kind, according supplied types vector. vector may string vector types named vector. directed Whether create directed graph, boolean constant. Note default undirected graphs created, common bipartite graphs. ... Passed make_bipartite_graph().","code":""},{"path":"/reference/make_bipartite_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bipartite graph — is_bipartite","text":"make_bipartite_graph() returns bipartite igraph graph. words, igraph graph vertex attribute named type. is_bipartite() returns logical scalar.","code":""},{"path":"/reference/make_bipartite_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a bipartite graph — is_bipartite","text":"Bipartite graphs type vertex attribute igraph, boolean FALSE vertices first kind TRUE vertices second kind. make_bipartite_graph() basically three things. First checks edges vector vertex types. creates graph using edges vector finally adds types vector vertex attribute called type. edges may contain strings vertex names; case, types must named vector specifies type vertex name occurs edges. is_bipartite() checks whether graph bipartite . just checks whether graph vertex attribute called type.","code":""},{"path":[]},{"path":"/reference/make_bipartite_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a bipartite graph — is_bipartite","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/make_bipartite_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bipartite graph — is_bipartite","text":"","code":"g <- make_bipartite_graph(rep(0:1, length.out = 10), c(1:10)) print(g, v = TRUE) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 3 5 7 9 #>  #> [[4]] #> [1] 0 2 4 6 8 #>  #> [[5]] #> [1] 0 1 2 3 4 #>  #> [[6]] #> [1] 0 1 2 3 4 #>  #> [[7]] #>  [1] 0 0 1 1 2 2 3 3 4 4 5 #>  #> [[8]] #>  [1] 0 1 1 2 2 3 3 4 4 5 5 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$type #>  [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbd92e8b0> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/make_chordal_ring.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an extended chordal ring graph — make_chordal_ring","title":"Create an extended chordal ring graph — make_chordal_ring","text":"make_chordal_ring() creates extended chordal ring. extended chordal ring regular graph, node degree. can obtained simple ring adding extra edges specified matrix. Let p denote number columns ‘W’ matrix. extra edges vertex added according column mod p ‘W’. number extra edges number rows ‘W’: row j edge ->+w[ij] added +w[ij] less number total nodes. See also Kotsis, G: Interconnection Topologies Parallel Processing Systems, PARS Mitteilungen 11, 1-6, 1993.","code":""},{"path":"/reference/make_chordal_ring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an extended chordal ring graph — make_chordal_ring","text":"","code":"make_chordal_ring(n, w, directed = FALSE)  chordal_ring(...)"},{"path":"/reference/make_chordal_ring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an extended chordal ring graph — make_chordal_ring","text":"n number vertices. w matrix specifies extended chordal ring. See details . directed Logical scalar, whether create directed graph. ... Passed make_chordal_ring().","code":""},{"path":"/reference/make_chordal_ring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an extended chordal ring graph — make_chordal_ring","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/make_chordal_ring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an extended chordal ring graph — make_chordal_ring","text":"","code":"chord <- make_chordal_ring(   15,   matrix(c(3, 12, 4, 7, 8, 11), nr = 2) )"},{"path":"/reference/make_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a communities object. — make_clusters","title":"Creates a communities object. — make_clusters","text":"useful integrate results community finding algorithms included igraph.","code":""},{"path":"/reference/make_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a communities object. — make_clusters","text":"","code":"make_clusters(   graph,   membership = NULL,   algorithm = NULL,   merges = NULL,   modularity = TRUE )"},{"path":"/reference/make_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a communities object. — make_clusters","text":"graph graph community structure. membership membership vector community structure, numeric vector denoting id community vertex. might NULL hierarchical community structures. algorithm Character string, algorithm generated community structure, can arbitrary. merges merge matrix, hierarchical community structures (NULL otherwise. modularity Modularity value community structure. TRUE membership vector available, modularity values calculated automatically.","code":""},{"path":"/reference/make_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a communities object. — make_clusters","text":"communities object.","code":""},{"path":[]},{"path":"/reference/make_de_bruijn_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"De Bruijn graphs — make_de_bruijn_graph","title":"De Bruijn graphs — make_de_bruijn_graph","text":"De Bruijn graphs labeled graphs representing overlap strings.","code":""},{"path":"/reference/make_de_bruijn_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"De Bruijn graphs — make_de_bruijn_graph","text":"","code":"make_de_bruijn_graph(m, n)  de_bruijn_graph(...)"},{"path":"/reference/make_de_bruijn_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"De Bruijn graphs — make_de_bruijn_graph","text":"m Integer scalar, size alphabet. See details . n Integer scalar, length labels. See details . ... Passed make_de_bruijn_graph().","code":""},{"path":"/reference/make_de_bruijn_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"De Bruijn graphs — make_de_bruijn_graph","text":"graph object.","code":""},{"path":"/reference/make_de_bruijn_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"De Bruijn graphs — make_de_bruijn_graph","text":"de Bruijn graph represents relationships strings. alphabet m letters used strings length n considered.  vertex corresponds every possible string directed edge vertex v vertex w string v can transformed string w removing first letter appending letter . Please note graph m power n vertices even edges, probably want supply big numbers m n. De Bruijn graphs interesting properties, please see another source, eg. Wikipedia details.","code":""},{"path":[]},{"path":"/reference/make_de_bruijn_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"De Bruijn graphs — make_de_bruijn_graph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/make_de_bruijn_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"De Bruijn graphs — make_de_bruijn_graph","text":"","code":"# de Bruijn graphs can be created recursively by line graphs as well g <- make_de_bruijn_graph(2, 1) make_de_bruijn_graph(2, 2) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 0 1 1 2 2 3 3 #>  #> [[4]] #> [1] 0 1 2 3 0 1 2 3 #>  #> [[5]] #> [1] 0 1 2 3 4 5 6 7 #>  #> [[6]] #> [1] 0 4 1 5 2 6 3 7 #>  #> [[7]] #> [1] 0 2 4 6 8 #>  #> [[8]] #> [1] 0 2 4 6 8 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"De-Bruijn graph 2-2\" #>  #> [[9]][[2]]$m #> [1] 2 #>  #> [[9]][[2]]$n #> [1] 2 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbf854d8> #>  #> attr(,\"class\") #> [1] \"igraph\" make_line_graph(g) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 2 0 2 1 3 1 3 #>  #> [[4]] #> [1] 0 0 1 1 2 2 3 3 #>  #> [[5]] #> [1] 0 2 4 6 1 3 5 7 #>  #> [[6]] #> [1] 0 1 2 3 4 5 6 7 #>  #> [[7]] #> [1] 0 2 4 6 8 #>  #> [[8]] #> [1] 0 2 4 6 8 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Line graph\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbf1ee08> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/make_empty_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"A graph with no edges — make_empty_graph","title":"A graph with no edges — make_empty_graph","text":"graph edges","code":""},{"path":"/reference/make_empty_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A graph with no edges — make_empty_graph","text":"","code":"make_empty_graph(n = 0, directed = TRUE)  empty_graph(...)"},{"path":"/reference/make_empty_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A graph with no edges — make_empty_graph","text":"n Number vertices. directed Whether create directed graph. ... Passed make_graph_empty.","code":""},{"path":"/reference/make_empty_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A graph with no edges — make_empty_graph","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/make_empty_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A graph with no edges — make_empty_graph","text":"","code":"make_empty_graph(n = 10) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> numeric(0) #>  #> [[4]] #> numeric(0) #>  #> [[5]] #> numeric(0) #>  #> [[6]] #> numeric(0) #>  #> [[7]] #>  [1] 0 0 0 0 0 0 0 0 0 0 0 #>  #> [[8]] #>  [1] 0 0 0 0 0 0 0 0 0 0 0 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb5b670d8> #>  #> attr(,\"class\") #> [1] \"igraph\" make_empty_graph(n = 5, directed = FALSE) #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> numeric(0) #>  #> [[4]] #> numeric(0) #>  #> [[5]] #> numeric(0) #>  #> [[6]] #> numeric(0) #>  #> [[7]] #> [1] 0 0 0 0 0 0 #>  #> [[8]] #> [1] 0 0 0 0 0 0 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb6319180> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/make_from_prufer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an undirected tree graph from its Prufer sequence — make_from_prufer","title":"Create an undirected tree graph from its Prufer sequence — make_from_prufer","text":"make_from_prufer() creates undirected tree graph Prufer sequence.","code":""},{"path":"/reference/make_from_prufer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an undirected tree graph from its Prufer sequence — make_from_prufer","text":"","code":"make_from_prufer(prufer)  from_prufer(...)"},{"path":"/reference/make_from_prufer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an undirected tree graph from its Prufer sequence — make_from_prufer","text":"prufer Prufer sequence convert graph ... Passed make_from_prufer()","code":""},{"path":"/reference/make_from_prufer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an undirected tree graph from its Prufer sequence — make_from_prufer","text":"graph object.","code":""},{"path":"/reference/make_from_prufer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an undirected tree graph from its Prufer sequence — make_from_prufer","text":"Prufer sequence tree graph n labeled vertices sequence n-2 numbers, constructed follows. graph two vertices, find vertex degree one, remove tree add label vertex connected sequence. Repeat two vertices remaining graph.","code":""},{"path":[]},{"path":"/reference/make_from_prufer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an undirected tree graph from its Prufer sequence — make_from_prufer","text":"","code":"g <- make_tree(13, 3) to_prufer(g) #>  [1] 2 2 2 1 3 3 3 1 4 4 4"},{"path":"/reference/make_full_bipartite_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a full bipartite graph — make_full_bipartite_graph","title":"Create a full bipartite graph — make_full_bipartite_graph","text":"Bipartite graphs also called two-mode . function creates bipartite graph every possible edge present.","code":""},{"path":"/reference/make_full_bipartite_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a full bipartite graph — make_full_bipartite_graph","text":"","code":"make_full_bipartite_graph(   n1,   n2,   directed = FALSE,   mode = c(\"all\", \"out\", \"in\") )  full_bipartite_graph(...)"},{"path":"/reference/make_full_bipartite_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a full bipartite graph — make_full_bipartite_graph","text":"n1 number vertices first kind. n2 number vertices second kind. directed Logical scalar, whether graphs directed. mode Scalar giving kind edges create directed graphs. ‘’ vertices first kind connected others; ‘’ specifies opposite direction; ‘’ creates mutual edges. argument ignored undirected graphs.x ... Passed make_full_bipartite_graph().","code":""},{"path":"/reference/make_full_bipartite_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a full bipartite graph — make_full_bipartite_graph","text":"igraph graph, ‘type’ vertex attribute set.","code":""},{"path":"/reference/make_full_bipartite_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a full bipartite graph — make_full_bipartite_graph","text":"Bipartite graphs ‘type’ vertex attribute igraph, boolean FALSE vertices first kind TRUE vertices second kind.","code":""},{"path":[]},{"path":"/reference/make_full_bipartite_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a full bipartite graph — make_full_bipartite_graph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/make_full_bipartite_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a full bipartite graph — make_full_bipartite_graph","text":"","code":"g <- make_full_bipartite_graph(2, 3) g2 <- make_full_bipartite_graph(2, 3, directed = TRUE) g3 <- make_full_bipartite_graph(2, 3, directed = TRUE, mode = \"in\") g4 <- make_full_bipartite_graph(2, 3, directed = TRUE, mode = \"all\")"},{"path":"/reference/make_full_citation_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete (full) citation graph — make_full_citation_graph","title":"Create a complete (full) citation graph — make_full_citation_graph","text":"make_full_citation_graph() creates full citation graph. directed graph, every ->j edge present \\(j<\\). directed=FALSE graph just full graph.","code":""},{"path":"/reference/make_full_citation_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete (full) citation graph — make_full_citation_graph","text":"","code":"make_full_citation_graph(n, directed = TRUE)  full_citation_graph(...)"},{"path":"/reference/make_full_citation_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete (full) citation graph — make_full_citation_graph","text":"n number vertices. directed Whether create directed graph. ... Passed make_full_citation_graph().","code":""},{"path":"/reference/make_full_citation_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete (full) citation graph — make_full_citation_graph","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/make_full_citation_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete (full) citation graph — make_full_citation_graph","text":"","code":"print_all(make_full_citation_graph(10)) #> IGRAPH c554989 D--- 10 45 -- Full citation graph #> + attr: name (g/c) #> + graph attributes: #> | + name: #> |   [1] \"Full citation graph\" #> + edges: #>  1 ->                      2 -> 1                    3 -> 1 2               #>  4 -> 1 2 3                5 -> 1 2 3 4              6 -> 1 2 3 4 5         #>  7 -> 1 2 3 4 5 6          8 -> 1 2 3 4 5 6 7        9 -> 1 2 3 4 5 6 7 8   #> 10 -> 1 2 3 4 5 6 7 8 9"},{"path":"/reference/make_full_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a full graph — make_full_graph","title":"Create a full graph — make_full_graph","text":"Create full graph","code":""},{"path":"/reference/make_full_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a full graph — make_full_graph","text":"","code":"make_full_graph(n, directed = FALSE, loops = FALSE)  full_graph(...)"},{"path":"/reference/make_full_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a full graph — make_full_graph","text":"n Number vertices. directed Whether create directed graph. loops Whether add self-loops graph. ... Passed make_full_graph().","code":""},{"path":"/reference/make_full_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a full graph — make_full_graph","text":"igraph graph","code":""},{"path":[]},{"path":"/reference/make_full_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a full graph — make_full_graph","text":"","code":"make_full_graph(5) #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 2 3 4 3 4 4 #>  #> [[4]] #>  [1] 0 0 0 0 1 1 1 2 2 3 #>  #> [[5]] #>  [1] 0 1 4 2 5 7 3 6 8 9 #>  #> [[6]] #>  [1] 0 1 2 3 4 5 6 7 8 9 #>  #> [[7]] #> [1]  0  0  1  3  6 10 #>  #> [[8]] #> [1]  0  4  7  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Full graph\" #>  #> [[9]][[2]]$loops #> [1] FALSE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf10b688> #>  #> attr(,\"class\") #> [1] \"igraph\" print_all(make_full_graph(4, directed = TRUE)) #> IGRAPH b94c416 D--- 4 12 -- Full graph #> + attr: name (g/c), loops (g/l) #> + graph attributes: #> | + name: #> |   [1] \"Full graph\" #> | + loops: #> |   [1] FALSE #> + edges: #> 1 -> 2 3 4   2 -> 1 3 4   3 -> 1 2 4   4 -> 1 2 3"},{"path":"/reference/make_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an igraph graph from a list of edges, or a notable graph — make_graph","title":"Create an igraph graph from a list of edges, or a notable graph — make_graph","text":"Create igraph graph list edges, notable graph","code":""},{"path":"/reference/make_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an igraph graph from a list of edges, or a notable graph — make_graph","text":"","code":"make_graph(   edges,   ...,   n = max(edges),   isolates = NULL,   directed = TRUE,   dir = directed,   simplify = TRUE )  make_directed_graph(edges, n = max(edges))  make_undirected_graph(edges, n = max(edges))  directed_graph(...)  undirected_graph(...)"},{"path":"/reference/make_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an igraph graph from a list of edges, or a notable graph — make_graph","text":"edges vector defining edges, first edge points first element second, second edge third fourth, etc. numeric vector, interpreted internal vertex ids. character vectors, interpreted vertex names. Alternatively, can character scalar, name notable graph. See Notable graphs . name case insensitive. Starting igraph 0.8.0, can also include literals , via igraph's formula notation (see graph_from_literal()). case, first term formula start ‘~’ character, just like regular formulae R. See examples . ... make_graph(): extra arguments case graph given via literal, see graph_from_literal(). directed_graph() undirected_graph(): Passed make_directed_graph() make_undirected_graph(). n number vertices graph. argument ignored (warning) edges symbolic vertex names. also ignored bigger vertex id edges. means function safe supply zero vertex largest id isolate. isolates Character vector, names isolate vertices, symbolic edge lists. ignored numeric edge lists. directed Whether create directed graph. dir directed, compatibility. give . simplify graph literals, whether simplify graph.","code":""},{"path":"/reference/make_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an igraph graph from a list of edges, or a notable graph — make_graph","text":"igraph graph.","code":""},{"path":"/reference/make_graph.html","id":"notable-graphs","dir":"Reference","previous_headings":"","what":"Notable graphs","title":"Create an igraph graph from a list of edges, or a notable graph — make_graph","text":"make_graph() can create notable graphs. name graph (case insensitive), character scalar must supplied edges argument, arguments ignored. (warning given specified.) make_graph() knows following graphs: Bull bull graph, 5 vertices, 5 edges, resembles head bull drawn properly. Chvatal smallest triangle-free graph 4-chromatic 4-regular. According Grunbaum conjecture exists m-regular, m-chromatic graph n vertices every m>1 n>2. Chvatal graph example m=4 n=12. 24 edges. Coxeter non-Hamiltonian cubic symmetric graph 28 vertices 42 edges. Cubical Platonic graph cube. convex regular polyhedron 8 vertices 12 edges. Diamond graph 4 vertices 5 edges, resembles schematic diamond drawn properly. Dodecahedral, Dodecahedron Another Platonic solid 20 vertices 30 edges. Folkman semisymmetric graph minimum number vertices, 20 40 edges. semisymmetric graph regular, edge transitive vertex transitive. Franklin graph whose embedding Klein bottle can colored six colors, counterexample necessity Heawood conjecture Klein bottle. 12 vertices 18 edges. Frucht Frucht Graph smallest cubical graph whose automorphism group consists identity element. 12 vertices 18 edges. Grotzsch Groetzsch graph triangle-free graph 11 vertices, 20 edges, chromatic number 4. named German mathematician Herbert Groetzsch, existence demonstrates assumption planarity necessary Groetzsch's theorem every triangle-free planar graph 3-colorable. Heawood Heawood graph undirected graph 14 vertices 21 edges. graph cubic, cycles graph six edges. Every smaller cubic graph shorter cycles, graph 6-cage, smallest cubic graph girth 6. Herschel Herschel graph smallest nonhamiltonian polyhedral graph. unique graph 11 nodes, 18 edges. House house graph 5-vertex, 6-edge graph, schematic draw house drawn properly, basicly triangle top square. HouseX house graph X square. 5 vertices 8 edges. Icosahedral, Icosahedron Platonic solid 12 vertices 30 edges. Krackhardt kite social network 10 vertices 18 edges.  Krackhardt, D. Assessing Political Landscape: Structure, Cognition, Power Organizations.  Admin. Sci. Quart. 35, 342-369, 1990. Levi graph 4-arc transitive cubic graph, 30 vertices 45 edges. McGee McGee graph unique 3-regular 7-cage graph, 24 vertices 36 edges. Meredith Meredith graph quartic graph 70 nodes 140 edges counterexample conjecture every 4-regular 4-connected graph Hamiltonian. Noperfectmatching connected graph 16 vertices 27 edges containing perfect matching. matching graph set pairwise non-adjacent edges; , two edges share common vertex. perfect matching matching covers vertices graph. Nonline graph whose connected components 9 graphs whose presence vertex-induced subgraph graph makes nonline graph. 50 vertices 72 edges. Octahedral, Octahedron Platonic solid 6 vertices 12 edges. Petersen 3-regular graph 10 vertices 15 edges. smallest hypohamiltonian graph, ie. non-hamiltonian removing single vertex makes Hamiltonian. Robertson unique (4,5)-cage graph, ie. 4-regular graph girth 5. 19 vertices 38 edges. Smallestcyclicgroup smallest nontrivial graph whose automorphism group cyclic. 9 vertices 15 edges. Tetrahedral, Tetrahedron Platonic solid 4 vertices 6 edges. Thomassen smallest hypotraceable graph, 34 vertices 52 edges. hypotraceable graph contain Hamiltonian path removing single vertex remainder always contains Hamiltonian path. graph containing Hamiltonian path called traceable. Tutte Tait's Hamiltonian graph conjecture states every 3-connected 3-regular planar graph Hamiltonian.  graph counterexample. 46 vertices 69 edges. Uniquely3colorable Returns 12-vertex, triangle-free graph chromatic number 3 uniquely 3-colorable. Walther identity graph 25 vertices 31 edges. identity graph single graph automorphism, trivial one. Zachary Social network friendships 34 members karate club US university 1970s. See W. W. Zachary, information flow model conflict fission small groups, Journal Anthropological Research 33, 452-473 (1977).","code":""},{"path":[]},{"path":"/reference/make_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an igraph graph from a list of edges, or a notable graph — make_graph","text":"","code":"make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE) #> [[1]] #> [1] 6 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 5 #>  #> [[4]] #> [1] 0 1 2 4 #>  #> [[5]] #> [1] 0 1 2 3 #>  #> [[6]] #> [1] 0 1 2 3 #>  #> [[7]] #> [1] 0 0 1 2 3 3 4 #>  #> [[8]] #> [1] 0 1 2 3 3 4 4 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbec6bb0> #>  #> attr(,\"class\") #> [1] \"igraph\" make_graph(c(\"A\", \"B\", \"B\", \"C\", \"C\", \"D\"), directed = FALSE) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 #>  #> [[4]] #> [1] 0 1 2 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 0 1 2 3 #>  #> [[8]] #> [1] 0 1 2 3 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"A\" \"B\" \"C\" \"D\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbe6ea20> #>  #> attr(,\"class\") #> [1] \"igraph\"  solids <- list(   make_graph(\"Tetrahedron\"),   make_graph(\"Cubical\"),   make_graph(\"Octahedron\"),   make_graph(\"Dodecahedron\"),   make_graph(\"Icosahedron\") )  graph <- make_graph(   ~ A - B - C - D - A, E - A:B:C:D,   F - G - H - I - F, J - F:G:H:I,   K - L - M - N - K, O - K:L:M:N,   P - Q - R - S - P, T - P:Q:R:S,   B - F, E - J, C - I, L - T, O - T, M - S,   C - P, C - L, I - L, I - P )"},{"path":"/reference/make_kautz_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Kautz graphs — make_kautz_graph","title":"Kautz graphs — make_kautz_graph","text":"Kautz graphs labeled graphs representing overlap strings.","code":""},{"path":"/reference/make_kautz_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kautz graphs — make_kautz_graph","text":"","code":"make_kautz_graph(m, n)  kautz_graph(...)"},{"path":"/reference/make_kautz_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kautz graphs — make_kautz_graph","text":"m Integer scalar, size alphabet. See details . n Integer scalar, length labels. See details . ... Passed make_kautz_graph().","code":""},{"path":"/reference/make_kautz_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kautz graphs — make_kautz_graph","text":"graph object.","code":""},{"path":"/reference/make_kautz_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kautz graphs — make_kautz_graph","text":"Kautz graph labeled graph, vertices labeled strings length n+1 alphabet m+1 letters, restriction every two consecutive letters string must different. directed edge vertex v another vertex w possible transform string v string w removing first letter appending letter . Kautz graphs interesting properties, see eg. Wikipedia details.","code":""},{"path":[]},{"path":"/reference/make_kautz_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kautz graphs — make_kautz_graph","text":"Gabor Csardi csardi.gabor@gmail.com, first version R written Vincent Matossian.","code":""},{"path":"/reference/make_kautz_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kautz graphs — make_kautz_graph","text":"","code":"make_line_graph(make_kautz_graph(2, 1)) #> [[1]] #> [1] 12 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1]  4  8  4  8  5  9  5  9  0 10  0 10  1 11  1 11  2  6  2  6  3  7  3  7 #>  #> [[4]] #>  [1]  0  0  1  1  2  2  3  3  4  4  5  5  6  6  7  7  8  8  9  9 10 10 11 11 #>  #> [[5]] #>  [1]  8 10 12 14 16 18 20 22  0  2  4  6 17 19 21 23  1  3  5  7  9 11 13 15 #>  #> [[6]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #>  #> [[7]] #>  [1]  0  2  4  6  8 10 12 14 16 18 20 22 24 #>  #> [[8]] #>  [1]  0  2  4  6  8 10 12 14 16 18 20 22 24 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Line graph\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf592f30> #>  #> attr(,\"class\") #> [1] \"igraph\" make_kautz_graph(2, 2) #> [[1]] #> [1] 12 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1]  0  0  1  1  2  2  3  3  4  4  5  5  6  6  7  7  8  8  9  9 10 10 11 11 #>  #> [[4]] #>  [1]  4  5  6  7  8  9 10 11  0  1  2  3  8  9 10 11  0  1  2  3  4  5  6  7 #>  #> [[5]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #>  #> [[6]] #>  [1]  8 16  9 17 10 18 11 19  0 20  1 21  2 22  3 23  4 12  5 13  6 14  7 15 #>  #> [[7]] #>  [1]  0  2  4  6  8 10 12 14 16 18 20 22 24 #>  #> [[8]] #>  [1]  0  2  4  6  8 10 12 14 16 18 20 22 24 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Kautz graph 2-2\" #>  #> [[9]][[2]]$m #> [1] 2 #>  #> [[9]][[2]]$n #> [1] 2 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf647b10> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/make_lattice.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a lattice graph — make_lattice","title":"Create a lattice graph — make_lattice","text":"make_lattice() flexible function, can create lattices arbitrary dimensions, periodic aperiodic ones. two forms. first form supply dimvector, length dim. second form omit dimvector supply length dim.","code":""},{"path":"/reference/make_lattice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a lattice graph — make_lattice","text":"","code":"make_lattice(   dimvector = NULL,   length = NULL,   dim = NULL,   nei = 1,   directed = FALSE,   mutual = FALSE,   circular = FALSE )  lattice(...)"},{"path":"/reference/make_lattice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a lattice graph — make_lattice","text":"dimvector vector giving size lattice dimension. length Integer constant, regular lattices, size lattice dimension. dim Integer constant, dimension lattice. nei distance within (inclusive) neighbors lattice connected. parameter used right now. directed Whether create directed lattice. mutual Logical, TRUE directed lattices mutually connected. circular Logical, TRUE lattice ring circular. ... Passed make_lattice().","code":""},{"path":"/reference/make_lattice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a lattice graph — make_lattice","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/make_lattice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a lattice graph — make_lattice","text":"","code":"make_lattice(c(5, 5, 5)) #> [[1]] #> [1] 125 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>   [1]   1   5  25   2   6  26   3   7  27   4   8  28   9  29   6  10  30   7 #>  [19]  11  31   8  12  32   9  13  33  14  34  11  15  35  12  16  36  13  17 #>  [37]  37  14  18  38  19  39  16  20  40  17  21  41  18  22  42  19  23  43 #>  [55]  24  44  21  45  22  46  23  47  24  48  49  26  30  50  27  31  51  28 #>  [73]  32  52  29  33  53  34  54  31  35  55  32  36  56  33  37  57  34  38 #>  [91]  58  39  59  36  40  60  37  41  61  38  42  62  39  43  63  44  64  41 #> [109]  45  65  42  46  66  43  47  67  44  48  68  49  69  46  70  47  71  48 #> [127]  72  49  73  74  51  55  75  52  56  76  53  57  77  54  58  78  59  79 #> [145]  56  60  80  57  61  81  58  62  82  59  63  83  64  84  61  65  85  62 #> [163]  66  86  63  67  87  64  68  88  69  89  66  70  90  67  71  91  68  72 #> [181]  92  69  73  93  74  94  71  95  72  96  73  97  74  98  99  76  80 100 #> [199]  77  81 101  78  82 102  79  83 103  84 104  81  85 105  82  86 106  83 #> [217]  87 107  84  88 108  89 109  86  90 110  87  91 111  88  92 112  89  93 #> [235] 113  94 114  91  95 115  92  96 116  93  97 117  94  98 118  99 119  96 #> [253] 120  97 121  98 122  99 123 124 101 105 102 106 103 107 104 108 109 106 #> [271] 110 107 111 108 112 109 113 114 111 115 112 116 113 117 114 118 119 116 #> [289] 120 117 121 118 122 119 123 124 121 122 123 124 #>  #> [[4]] #>   [1]   0   0   0   1   1   1   2   2   2   3   3   3   4   4   5   5   5   6 #>  [19]   6   6   7   7   7   8   8   8   9   9  10  10  10  11  11  11  12  12 #>  [37]  12  13  13  13  14  14  15  15  15  16  16  16  17  17  17  18  18  18 #>  [55]  19  19  20  20  21  21  22  22  23  23  24  25  25  25  26  26  26  27 #>  [73]  27  27  28  28  28  29  29  30  30  30  31  31  31  32  32  32  33  33 #>  [91]  33  34  34  35  35  35  36  36  36  37  37  37  38  38  38  39  39  40 #> [109]  40  40  41  41  41  42  42  42  43  43  43  44  44  45  45  46  46  47 #> [127]  47  48  48  49  50  50  50  51  51  51  52  52  52  53  53  53  54  54 #> [145]  55  55  55  56  56  56  57  57  57  58  58  58  59  59  60  60  60  61 #> [163]  61  61  62  62  62  63  63  63  64  64  65  65  65  66  66  66  67  67 #> [181]  67  68  68  68  69  69  70  70  71  71  72  72  73  73  74  75  75  75 #> [199]  76  76  76  77  77  77  78  78  78  79  79  80  80  80  81  81  81  82 #> [217]  82  82  83  83  83  84  84  85  85  85  86  86  86  87  87  87  88  88 #> [235]  88  89  89  90  90  90  91  91  91  92  92  92  93  93  93  94  94  95 #> [253]  95  96  96  97  97  98  98  99 100 100 101 101 102 102 103 103 104 105 #> [271] 105 106 106 107 107 108 108 109 110 110 111 111 112 112 113 113 114 115 #> [289] 115 116 116 117 117 118 118 119 120 121 122 123 #>  #> [[5]] #>   [1]   0   3   6   9   1   4  14   7  17  10  20  12  23  15  18  28  21  31 #>  [19]  24  34  26  37  29  32  42  35  45  38  48  40  51  43  46  56  49  58 #>  [37]  52  60  54  62   2   5  65   8  68  11  71  13  74  16  66  19  69  79 #>  [55]  22  72  82  25  75  85  27  77  88  30  80  33  83  93  36  86  96  39 #>  [73]  89  99  41  91 102  44  94  47  97 107  50 100 110  53 103 113  55 105 #>  [91] 116  57 108  59 111 121  61 114 123  63 117 125  64 119 127  67  70 130 #> [109]  73 133  76 136  78 139  81 131  84 134 144  87 137 147  90 140 150  92 #> [127] 142 153  95 145  98 148 158 101 151 161 104 154 164 106 156 167 109 159 #> [145] 112 162 172 115 165 175 118 168 178 120 170 181 122 173 124 176 186 126 #> [163] 179 188 128 182 190 129 184 192 132 135 195 138 198 141 201 143 204 146 #> [181] 196 149 199 209 152 202 212 155 205 215 157 207 218 160 210 163 213 223 #> [199] 166 216 226 169 219 229 171 221 232 174 224 177 227 237 180 230 240 183 #> [217] 233 243 185 235 246 187 238 189 241 251 191 244 253 193 247 255 194 249 #> [235] 257 197 200 260 203 262 206 264 208 266 211 261 214 263 269 217 265 271 #> [253] 220 267 273 222 268 275 225 270 228 272 278 231 274 280 234 276 282 236 #> [271] 277 284 239 279 242 281 287 245 283 289 248 285 291 250 286 293 252 288 #> [289] 254 290 296 256 292 297 258 294 298 259 295 299 #>  #> [[6]] #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 #> [109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #> [127] 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 #> [145] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 #> [163] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #> [181] 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 #> [199] 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 #> [217] 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 #> [235] 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 #> [253] 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 #> [271] 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 #> [289] 288 289 290 291 292 293 294 295 296 297 298 299 #>  #> [[7]] #>   [1]   0   0   1   2   3   4   5   7   9  11  13  14  16  18  20  22  23  25 #>  [19]  27  29  31  32  34  36  38  40  41  43  45  47  49  51  54  57  60  63 #>  [37]  65  68  71  74  77  79  82  85  88  91  93  96  99 102 105 106 108 110 #>  [55] 112 114 116 119 122 125 128 130 133 136 139 142 144 147 150 153 156 158 #>  [73] 161 164 167 170 171 173 175 177 179 181 184 187 190 193 195 198 201 204 #>  [91] 207 209 212 215 218 221 223 226 229 232 235 236 238 240 242 244 246 249 #> [109] 252 255 258 260 263 266 269 272 274 277 280 283 286 288 291 294 297 300 #>  #> [[8]] #>   [1]   0   3   6   9  12  14  17  20  23  26  28  31  34  37  40  42  45  48 #>  [19]  51  54  56  58  60  62  64  65  68  71  74  77  79  82  85  88  91  93 #>  [37]  96  99 102 105 107 110 113 116 119 121 123 125 127 129 130 133 136 139 #>  [55] 142 144 147 150 153 156 158 161 164 167 170 172 175 178 181 184 186 188 #>  [73] 190 192 194 195 198 201 204 207 209 212 215 218 221 223 226 229 232 235 #>  [91] 237 240 243 246 249 251 253 255 257 259 260 262 264 266 268 269 271 273 #> [109] 275 277 278 280 282 284 286 287 289 291 293 295 296 297 298 299 300 300 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Lattice graph\" #>  #> [[9]][[2]]$dimvector #> [1] 5 5 5 #>  #> [[9]][[2]]$nei #> [1] 1 #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] FALSE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbc89bb58> #>  #> attr(,\"class\") #> [1] \"igraph\" make_lattice(length = 5, dim = 3) #> [[1]] #> [1] 125 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>   [1]   1   5  25   2   6  26   3   7  27   4   8  28   9  29   6  10  30   7 #>  [19]  11  31   8  12  32   9  13  33  14  34  11  15  35  12  16  36  13  17 #>  [37]  37  14  18  38  19  39  16  20  40  17  21  41  18  22  42  19  23  43 #>  [55]  24  44  21  45  22  46  23  47  24  48  49  26  30  50  27  31  51  28 #>  [73]  32  52  29  33  53  34  54  31  35  55  32  36  56  33  37  57  34  38 #>  [91]  58  39  59  36  40  60  37  41  61  38  42  62  39  43  63  44  64  41 #> [109]  45  65  42  46  66  43  47  67  44  48  68  49  69  46  70  47  71  48 #> [127]  72  49  73  74  51  55  75  52  56  76  53  57  77  54  58  78  59  79 #> [145]  56  60  80  57  61  81  58  62  82  59  63  83  64  84  61  65  85  62 #> [163]  66  86  63  67  87  64  68  88  69  89  66  70  90  67  71  91  68  72 #> [181]  92  69  73  93  74  94  71  95  72  96  73  97  74  98  99  76  80 100 #> [199]  77  81 101  78  82 102  79  83 103  84 104  81  85 105  82  86 106  83 #> [217]  87 107  84  88 108  89 109  86  90 110  87  91 111  88  92 112  89  93 #> [235] 113  94 114  91  95 115  92  96 116  93  97 117  94  98 118  99 119  96 #> [253] 120  97 121  98 122  99 123 124 101 105 102 106 103 107 104 108 109 106 #> [271] 110 107 111 108 112 109 113 114 111 115 112 116 113 117 114 118 119 116 #> [289] 120 117 121 118 122 119 123 124 121 122 123 124 #>  #> [[4]] #>   [1]   0   0   0   1   1   1   2   2   2   3   3   3   4   4   5   5   5   6 #>  [19]   6   6   7   7   7   8   8   8   9   9  10  10  10  11  11  11  12  12 #>  [37]  12  13  13  13  14  14  15  15  15  16  16  16  17  17  17  18  18  18 #>  [55]  19  19  20  20  21  21  22  22  23  23  24  25  25  25  26  26  26  27 #>  [73]  27  27  28  28  28  29  29  30  30  30  31  31  31  32  32  32  33  33 #>  [91]  33  34  34  35  35  35  36  36  36  37  37  37  38  38  38  39  39  40 #> [109]  40  40  41  41  41  42  42  42  43  43  43  44  44  45  45  46  46  47 #> [127]  47  48  48  49  50  50  50  51  51  51  52  52  52  53  53  53  54  54 #> [145]  55  55  55  56  56  56  57  57  57  58  58  58  59  59  60  60  60  61 #> [163]  61  61  62  62  62  63  63  63  64  64  65  65  65  66  66  66  67  67 #> [181]  67  68  68  68  69  69  70  70  71  71  72  72  73  73  74  75  75  75 #> [199]  76  76  76  77  77  77  78  78  78  79  79  80  80  80  81  81  81  82 #> [217]  82  82  83  83  83  84  84  85  85  85  86  86  86  87  87  87  88  88 #> [235]  88  89  89  90  90  90  91  91  91  92  92  92  93  93  93  94  94  95 #> [253]  95  96  96  97  97  98  98  99 100 100 101 101 102 102 103 103 104 105 #> [271] 105 106 106 107 107 108 108 109 110 110 111 111 112 112 113 113 114 115 #> [289] 115 116 116 117 117 118 118 119 120 121 122 123 #>  #> [[5]] #>   [1]   0   3   6   9   1   4  14   7  17  10  20  12  23  15  18  28  21  31 #>  [19]  24  34  26  37  29  32  42  35  45  38  48  40  51  43  46  56  49  58 #>  [37]  52  60  54  62   2   5  65   8  68  11  71  13  74  16  66  19  69  79 #>  [55]  22  72  82  25  75  85  27  77  88  30  80  33  83  93  36  86  96  39 #>  [73]  89  99  41  91 102  44  94  47  97 107  50 100 110  53 103 113  55 105 #>  [91] 116  57 108  59 111 121  61 114 123  63 117 125  64 119 127  67  70 130 #> [109]  73 133  76 136  78 139  81 131  84 134 144  87 137 147  90 140 150  92 #> [127] 142 153  95 145  98 148 158 101 151 161 104 154 164 106 156 167 109 159 #> [145] 112 162 172 115 165 175 118 168 178 120 170 181 122 173 124 176 186 126 #> [163] 179 188 128 182 190 129 184 192 132 135 195 138 198 141 201 143 204 146 #> [181] 196 149 199 209 152 202 212 155 205 215 157 207 218 160 210 163 213 223 #> [199] 166 216 226 169 219 229 171 221 232 174 224 177 227 237 180 230 240 183 #> [217] 233 243 185 235 246 187 238 189 241 251 191 244 253 193 247 255 194 249 #> [235] 257 197 200 260 203 262 206 264 208 266 211 261 214 263 269 217 265 271 #> [253] 220 267 273 222 268 275 225 270 228 272 278 231 274 280 234 276 282 236 #> [271] 277 284 239 279 242 281 287 245 283 289 248 285 291 250 286 293 252 288 #> [289] 254 290 296 256 292 297 258 294 298 259 295 299 #>  #> [[6]] #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 #> [109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #> [127] 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 #> [145] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 #> [163] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #> [181] 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 #> [199] 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 #> [217] 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 #> [235] 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 #> [253] 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 #> [271] 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 #> [289] 288 289 290 291 292 293 294 295 296 297 298 299 #>  #> [[7]] #>   [1]   0   0   1   2   3   4   5   7   9  11  13  14  16  18  20  22  23  25 #>  [19]  27  29  31  32  34  36  38  40  41  43  45  47  49  51  54  57  60  63 #>  [37]  65  68  71  74  77  79  82  85  88  91  93  96  99 102 105 106 108 110 #>  [55] 112 114 116 119 122 125 128 130 133 136 139 142 144 147 150 153 156 158 #>  [73] 161 164 167 170 171 173 175 177 179 181 184 187 190 193 195 198 201 204 #>  [91] 207 209 212 215 218 221 223 226 229 232 235 236 238 240 242 244 246 249 #> [109] 252 255 258 260 263 266 269 272 274 277 280 283 286 288 291 294 297 300 #>  #> [[8]] #>   [1]   0   3   6   9  12  14  17  20  23  26  28  31  34  37  40  42  45  48 #>  [19]  51  54  56  58  60  62  64  65  68  71  74  77  79  82  85  88  91  93 #>  [37]  96  99 102 105 107 110 113 116 119 121 123 125 127 129 130 133 136 139 #>  [55] 142 144 147 150 153 156 158 161 164 167 170 172 175 178 181 184 186 188 #>  [73] 190 192 194 195 198 201 204 207 209 212 215 218 221 223 226 229 232 235 #>  [91] 237 240 243 246 249 251 253 255 257 259 260 262 264 266 268 269 271 273 #> [109] 275 277 278 280 282 284 286 287 289 291 293 295 296 297 298 299 300 300 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Lattice graph\" #>  #> [[9]][[2]]$dimvector #> [1] 5 5 5 #>  #> [[9]][[2]]$nei #> [1] 1 #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] FALSE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbc343e30> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/make_line_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Line graph of a graph — make_line_graph","title":"Line graph of a graph — make_line_graph","text":"function calculates line graph another graph.","code":""},{"path":"/reference/make_line_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line graph of a graph — make_line_graph","text":"","code":"make_line_graph(graph)  line_graph(...)"},{"path":"/reference/make_line_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Line graph of a graph — make_line_graph","text":"graph input graph, can directed undirected. ... Passed make_line_graph().","code":""},{"path":"/reference/make_line_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Line graph of a graph — make_line_graph","text":"new graph object.","code":""},{"path":"/reference/make_line_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Line graph of a graph — make_line_graph","text":"line graph L(G) G undirected graph defined follows. L(G) one vertex edge G two vertices L(G) connected edge corresponding edges share end point. line graph L(G) G directed graph slightly different, L(G) one vertex edge G two vertices L(G) connected directed edge target first vertex's corresponding edge source second vertex's corresponding edge.","code":""},{"path":"/reference/make_line_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Line graph of a graph — make_line_graph","text":"Gabor Csardi csardi.gabor@gmail.com, first version C code written Vincent Matossian.","code":""},{"path":"/reference/make_line_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Line graph of a graph — make_line_graph","text":"","code":"# generate the first De-Bruijn graphs g <- make_full_graph(2, directed = TRUE, loops = TRUE) make_line_graph(g) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 2 0 2 1 3 1 3 #>  #> [[4]] #> [1] 0 0 1 1 2 2 3 3 #>  #> [[5]] #> [1] 0 2 4 6 1 3 5 7 #>  #> [[6]] #> [1] 0 1 2 3 4 5 6 7 #>  #> [[7]] #> [1] 0 2 4 6 8 #>  #> [[8]] #> [1] 0 2 4 6 8 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Line graph\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb535d250> #>  #> attr(,\"class\") #> [1] \"igraph\" make_line_graph(make_line_graph(g)) #> [[1]] #> [1] 8 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 0 1 4 5 0 1 4 5 2 3 6 7 2 3 6 7 #>  #> [[4]] #>  [1] 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 #>  #> [[5]] #>  [1]  0  4  1  5  8 12  9 13  2  6  3  7 10 14 11 15 #>  #> [[6]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 #>  #> [[7]] #> [1]  0  2  4  6  8 10 12 14 16 #>  #> [[8]] #> [1]  0  2  4  6  8 10 12 14 16 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Line graph\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb6040620> #>  #> attr(,\"class\") #> [1] \"igraph\" make_line_graph(make_line_graph(make_line_graph(g))) #> [[1]] #> [1] 16 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1]  0  1  2  3  8  9 10 11  0  1  2  3  8  9 10 11  4  5  6  7 12 13 14 15  4 #> [26]  5  6  7 12 13 14 15 #>  #> [[4]] #>  [1]  0  0  1  1  2  2  3  3  4  4  5  5  6  6  7  7  8  8  9  9 10 10 11 11 12 #> [26] 12 13 13 14 14 15 15 #>  #> [[5]] #>  [1]  0  8  1  9  2 10  3 11 16 24 17 25 18 26 19 27  4 12  5 13  6 14  7 15 20 #> [26] 28 21 29 22 30 23 31 #>  #> [[6]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #> [26] 25 26 27 28 29 30 31 #>  #> [[7]] #>  [1]  0  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 #>  #> [[8]] #>  [1]  0  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Line graph\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb5b64ab8> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/make_ring.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ring graph — make_ring","title":"Create a ring graph — make_ring","text":"ring one-dimensional lattice function special case make_lattice().","code":""},{"path":"/reference/make_ring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ring graph — make_ring","text":"","code":"make_ring(n, directed = FALSE, mutual = FALSE, circular = TRUE)  ring(...)"},{"path":"/reference/make_ring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ring graph — make_ring","text":"n Number vertices. directed Whether graph directed. mutual Whether directed edges mutual. ignored undirected graphs. circular Whether create circular ring. non-circular ring essentially “line”: tree every non-leaf vertex one child. ... Passed make_ring().","code":""},{"path":"/reference/make_ring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ring graph — make_ring","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/make_ring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ring graph — make_ring","text":"","code":"print_all(make_ring(10)) #> IGRAPH c489c3a U--- 10 10 -- Ring graph #> + attr: name (g/c), mutual (g/l), circular (g/l) #> + graph attributes: #> | + name: #> |   [1] \"Ring graph\" #> | + mutual: #> |   [1] FALSE #> | + circular: #> |   [1] TRUE #> + edges from c489c3a: #>  [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10 print_all(make_ring(10, directed = TRUE, mutual = TRUE)) #> IGRAPH 6b23941 D--- 10 20 -- Ring graph #> + attr: name (g/c), mutual (g/l), circular (g/l) #> + graph attributes: #> | + name: #> |   [1] \"Ring graph\" #> | + mutual: #> |   [1] TRUE #> | + circular: #> |   [1] TRUE #> + edges from 6b23941: #>  [1]  1-> 2  1->10  2-> 3  2-> 1  3-> 4  3-> 2  4-> 5  4-> 3  5-> 6  5-> 4 #> [11]  6-> 7  6-> 5  7-> 8  7-> 6  8-> 9  8-> 7  9->10  9-> 8 10-> 1 10-> 9"},{"path":"/reference/make_star.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a star graph, a tree with n vertices and n - 1 leaves — make_star","title":"Create a star graph, a tree with n vertices and n - 1 leaves — make_star","text":"star() creates star graph, every single vertex connected center vertex nobody else.","code":""},{"path":"/reference/make_star.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a star graph, a tree with n vertices and n - 1 leaves — make_star","text":"","code":"make_star(n, mode = c(\"in\", \"out\", \"mutual\", \"undirected\"), center = 1)  star(...)"},{"path":"/reference/make_star.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a star graph, a tree with n vertices and n - 1 leaves — make_star","text":"n Number vertices. mode defines direction edges, : edges point center, : edges point center, mutual: directed star created mutual edges, undirected: edges undirected. center ID center vertex. ... Passed make_star().","code":""},{"path":"/reference/make_star.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a star graph, a tree with n vertices and n - 1 leaves — make_star","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/make_star.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a star graph, a tree with n vertices and n - 1 leaves — make_star","text":"","code":"make_star(10, mode = \"out\") #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 0 0 0 0 0 0 0 0 #>  #> [[4]] #> [1] 1 2 3 4 5 6 7 8 9 #>  #> [[5]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[6]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1] 0 9 9 9 9 9 9 9 9 9 9 #>  #> [[8]] #>  [1] 0 0 1 2 3 4 5 6 7 8 9 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Out-star\" #>  #> [[9]][[2]]$mode #> [1] \"out\" #>  #> [[9]][[2]]$center #> [1] 1 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbbbc560> #>  #> attr(,\"class\") #> [1] \"igraph\" make_star(5, mode = \"undirected\") #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 4 #>  #> [[4]] #> [1] 0 0 0 0 #>  #> [[5]] #> [1] 0 1 2 3 #>  #> [[6]] #> [1] 0 1 2 3 #>  #> [[7]] #> [1] 0 0 1 2 3 4 #>  #> [[8]] #> [1] 0 4 4 4 4 4 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Star\" #>  #> [[9]][[2]]$mode #> [1] \"undirected\" #>  #> [[9]][[2]]$center #> [1] 1 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbb03ba0> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/make_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tree graphs — make_tree","title":"Create tree graphs — make_tree","text":"Create k-ary tree graph, almost vertices leaves number children.","code":""},{"path":"/reference/make_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tree graphs — make_tree","text":"","code":"make_tree(n, children = 2, mode = c(\"out\", \"in\", \"undirected\"))  tree(...)"},{"path":"/reference/make_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tree graphs — make_tree","text":"n Number vertices. children Integer scalar, number children vertex (except leafs) mode Defines direction edges. indicates edges point parent children, indicates point children parents, undirected creates undirected graph. ... Passed make_tree() sample_tree().","code":""},{"path":"/reference/make_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tree graphs — make_tree","text":"igraph graph","code":""},{"path":[]},{"path":"/reference/make_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create tree graphs — make_tree","text":"","code":"make_tree(10, 2) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 0 1 1 2 2 3 3 4 #>  #> [[4]] #> [1] 1 2 3 4 5 6 7 8 9 #>  #> [[5]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[6]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1] 0 2 4 6 8 9 9 9 9 9 9 #>  #> [[8]] #>  [1] 0 0 1 2 3 4 5 6 7 8 9 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Tree\" #>  #> [[9]][[2]]$children #> [1] 2 #>  #> [[9]][[2]]$mode #> [1] \"out\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb4323d00> #>  #> attr(,\"class\") #> [1] \"igraph\" make_tree(10, 3, mode = \"undirected\") #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 1 2 3 4 5 6 7 8 9 #>  #> [[4]] #> [1] 0 0 0 1 1 1 2 2 2 #>  #> [[5]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[6]] #> [1] 0 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1] 0 0 1 2 3 4 5 6 7 8 9 #>  #> [[8]] #>  [1] 0 3 6 9 9 9 9 9 9 9 9 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Tree\" #>  #> [[9]][[2]]$children #> [1] 3 #>  #> [[9]][[2]]$mode #> [1] \"undirected\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb6bfac88> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/match_vertices.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Graphs given a seeding of vertex correspondences — match_vertices","title":"Match Graphs given a seeding of vertex correspondences — match_vertices","text":"Given two adjacency matrices B size, match two graphs help m seed vertex pairs correspond first m rows (columns) adjacency matrices.","code":""},{"path":"/reference/match_vertices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Graphs given a seeding of vertex correspondences — match_vertices","text":"","code":"match_vertices(A, B, m, start, iteration)"},{"path":"/reference/match_vertices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Graphs given a seeding of vertex correspondences — match_vertices","text":"numeric matrix, adjacency matrix first graph B numeric matrix, adjacency matrix second graph m number seeds. first m vertices graphs matched. start numeric matrix, permutation matrix estimate initialized start iteration number iterations Frank-Wolfe algorithm","code":""},{"path":"/reference/match_vertices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Graphs given a seeding of vertex correspondences — match_vertices","text":"numeric matrix permutation matrix determines bijection graphs B","code":""},{"path":"/reference/match_vertices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match Graphs given a seeding of vertex correspondences — match_vertices","text":"approximate graph matching problem find bijection vertices two graphs , number edge disagreements corresponding vertex pairs minimized. seeded graph matching, part bijection consist known correspondences (seeds) known problem task complete bijection estimating permutation matrix permutes rows columns adjacency matrix second graph. assumed two supplied adjacency matrices B, size \\(n\\times n\\), first \\(m\\) rows(columns) B correspond vertices graphs. , \\(n \\times n\\) permutation matrix defines bijection \\(I_{m} \\bigoplus P\\) \\((n-m)\\times (n-m)\\) permutation matrix \\(P\\) \\(m\\) times \\(m\\) identity matrix \\(I_{m}\\). function match_vertices() estimates permutation matrix \\(P\\) via optimization algorithm based Frank-Wolfe algorithm. See references details.","code":""},{"path":"/reference/match_vertices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Match Graphs given a seeding of vertex correspondences — match_vertices","text":"Vogelstein, J. T., Conroy, J. M., Podrazik, L. J., Kratzer, S. G., Harley, E. T., Fishkind, D. E.,Vogelstein, R. J., Priebe, C. E. (2011). Fast Approximate Quadratic Programming Large (Brain) Graph Matching. Online: https://arxiv.org/abs/1112.5507 Fishkind, D. E., Adali, S., Priebe, C. E. (2012). Seeded Graph Matching Online: https://arxiv.org/abs/1209.0367","code":""},{"path":[]},{"path":"/reference/match_vertices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Match Graphs given a seeding of vertex correspondences — match_vertices","text":"Vince Lyzinski https://www.ams.jhu.edu/~lyzinski/","code":""},{"path":"/reference/match_vertices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match Graphs given a seeding of vertex correspondences — match_vertices","text":"","code":"# require(Matrix) g1 <- sample_gnp(10, 0.1) randperm <- c(1:3, 3 + sample(7)) g2 <- sample_correlated_gnp(g1, corr = 1, p = g1$p, permutation = randperm) A <- as.matrix(get.adjacency(g1)) B <- as.matrix(get.adjacency(g2)) P <- match_vertices(A, B, m = 3, start = diag(rep(1, nrow(A) - 3)), 20) P #> $corr #>      [,1] [,2] #> [1,]    4   10 #> [2,]    5    5 #> [3,]    6    6 #> [4,]    7    9 #> [5,]    8    7 #> [6,]    9    8 #> [7,]   10    4 #>  #> $P #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1    0    0    0    0    0    0    0    0     0 #>  [2,]    0    1    0    0    0    0    0    0    0     0 #>  [3,]    0    0    1    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     1 #>  [5,]    0    0    0    0    1    0    0    0    0     0 #>  [6,]    0    0    0    0    0    1    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    1     0 #>  [8,]    0    0    0    0    0    0    1    0    0     0 #>  [9,]    0    0    0    0    0    0    0    1    0     0 #> [10,]    0    0    0    1    0    0    0    0    0     0 #>  #> $D #> 7 x 7 sparse Matrix of class \"dgCMatrix\" #>                    #> [1,] . . . . . . 1 #> [2,] . 1 . . . . . #> [3,] . . 1 . . . . #> [4,] . . . . . 1 . #> [5,] . . . 1 . . . #> [6,] . . . . 1 . . #> [7,] 1 . . . . . . #>"},{"path":"/reference/matching.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph matching — is_matching","title":"Graph matching — is_matching","text":"matching graph means selection set edges pairwise non-adjacent, .e. common incident vertices. matching maximal proper subset matching.","code":""},{"path":"/reference/matching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph matching — is_matching","text":"","code":"is_matching(graph, matching, types = NULL)  is_max_matching(graph, matching, types = NULL)  max_bipartite_match(   graph,   types = NULL,   weights = NULL,   eps = .Machine$double.eps )"},{"path":"/reference/matching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph matching — is_matching","text":"graph input graph. might directed, edge directions ignored. matching potential matching. integer vector gives pair matching vertex. vertices without pair, supply NA . types Vertex types, graph bipartite. default taken ‘type’ vertex attribute, present. weights Potential edge weights. graph edge attribute called ‘weight’, argument NULL, edge attribute used automatically. weighted matching, weights edges must match much possible. eps small real number used equality tests weighted bipartite matching algorithm. Two real numbers considered equal algorithm difference smaller eps. required avoid accumulation numerical errors. default set smallest \\(x\\), \\(1+x \\ne 1\\) holds. running algorithm weights, argument ignored.","code":""},{"path":"/reference/matching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph matching — is_matching","text":"is_matching() is_max_matching() return logical scalar. max_bipartite_match() returns list components: matching_size size matching, .e. number edges connecting matched vertices. matching_weight weights matching, graph weighted. unweighted graphs size matching. matching matching . Numeric vertex id, vertex names graph named. Non-matched vertices denoted NA.","code":""},{"path":"/reference/matching.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph matching — is_matching","text":"is_matching() checks matching vector verifies whether length matches number vertices given graph, values zero (inclusive) number vertices (inclusive), whether exists corresponding edge graph every matched vertex pair. bipartite graphs, also verifies whether matched vertices different parts graph. is_max_matching() checks whether matching maximal.  matching maximal exists unmatched vertex graph one neighbors also unmatched. max_bipartite_match() calculates maximum matching bipartite graph. matching bipartite graph partial assignment vertices first kind vertices second kind vertex first kind matched one vertex second kind vice versa, matched vertices must connected edge graph. size (cardinality) matching number edges. matching maximum matching exists matching larger cardinality.  weighted graphs, maximum matching matching whose edges largest possible total weight among possible matchings. Maximum matchings bipartite graphs found push-relabel algorithm greedy initialization global relabeling every \\(n/2\\) steps \\(n\\) number vertices graph.","code":""},{"path":[]},{"path":"/reference/matching.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph matching — is_matching","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/matching.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph matching — is_matching","text":"","code":"g <- graph_from_literal(a - b - c - d - e - f) m1 <- c(\"b\", \"a\", \"d\", \"c\", \"f\", \"e\") # maximal matching m2 <- c(\"b\", \"a\", \"d\", \"c\", NA, NA) # non-maximal matching m3 <- c(\"b\", \"c\", \"d\", \"c\", NA, NA) # not a matching is_matching(g, m1) #> [1] TRUE is_matching(g, m2) #> [1] TRUE is_matching(g, m3) #> [1] FALSE is_max_matching(g, m1) #> [1] TRUE is_max_matching(g, m2) #> [1] FALSE is_max_matching(g, m3) #> [1] FALSE  V(g)$type <- c(FALSE, TRUE) print_all(g, v = TRUE) #> IGRAPH e0452a3 UN-B 6 5 --  #> + attr: name (v/c), type (v/l) #> + vertex attributes: #> |     name  type #> | [1]    a FALSE #> | [2]    b  TRUE #> | [3]    c FALSE #> | [4]    d  TRUE #> | [5]    e FALSE #> | [6]    f  TRUE #> + edges from e0452a3 (vertex names): #> [1] a--b b--c c--d d--e e--f max_bipartite_match(g) #> $matching_size #> [1] 3 #>  #> $matching_weight #> [1] 3 #>  #> $matching #>   a   b   c   d   e   f  #> \"b\" \"a\" \"d\" \"c\" \"f\" \"e\"  #>   g2 <- graph_from_literal(a - b - c - d - e - f - g) V(g2)$type <- rep(c(FALSE, TRUE), length.out = vcount(g2)) print_all(g2, v = TRUE) #> IGRAPH ee3a69a UN-B 7 6 --  #> + attr: name (v/c), type (v/l) #> + vertex attributes: #> |     name  type #> | [1]    a FALSE #> | [2]    b  TRUE #> | [3]    c FALSE #> | [4]    d  TRUE #> | [5]    e FALSE #> | [6]    f  TRUE #> | [7]    g FALSE #> + edges from ee3a69a (vertex names): #> [1] a--b b--c c--d d--e e--f f--g max_bipartite_match(g2) #> $matching_size #> [1] 3 #>  #> $matching_weight #> [1] 3 #>  #> $matching #>   a   b   c   d   e   f   g  #> \"b\" \"a\" \"d\" \"c\" \"f\" \"e\"  NA  #>  #' @keywords graphs"},{"path":"/reference/max_cardinality.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum cardinality search — max_cardinality","title":"Maximum cardinality search — max_cardinality","text":"Maximum cardinality search simple ordering vertices useful determining chordality graph.","code":""},{"path":"/reference/max_cardinality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum cardinality search — max_cardinality","text":"","code":"max_cardinality(graph)"},{"path":"/reference/max_cardinality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum cardinality search — max_cardinality","text":"graph input graph. may directed, edge directions ignored, algorithm defined undirected graphs.","code":""},{"path":"/reference/max_cardinality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum cardinality search — max_cardinality","text":"list two components: alpha Numeric vector. 1-based rank vertex graph vertex rank 1 visited first, vertex rank 2 visited second . alpham1 Numeric vector. inverse alpha. words, elements vector vertices reverse maximum cardinality search order.","code":""},{"path":"/reference/max_cardinality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum cardinality search — max_cardinality","text":"Maximum cardinality search visits vertices order every time vertex already visited neighbors visited. Ties broken randomly. algorithm provides simple basis deciding whether graph chordal, see References , also is_chordal().","code":""},{"path":"/reference/max_cardinality.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maximum cardinality search — max_cardinality","text":"Robert E Tarjan Mihalis Yannakakis. (1984). Simple linear-time algorithms test chordality graphs, test acyclicity hypergraphs, selectively reduce acyclic hypergraphs.  SIAM Journal Computation 13, 566--579.","code":""},{"path":[]},{"path":"/reference/max_cardinality.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum cardinality search — max_cardinality","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/max_cardinality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum cardinality search — max_cardinality","text":"","code":"## The examples from the Tarjan-Yannakakis paper g1 <- graph_from_literal(   A - B:C:I, B - A:C:D, C - A:B:E:H, D - B:E:F,   E - C:D:F:H, F - D:E:G, G - F:H, H - C:E:G:I,   I - A:H ) max_cardinality(g1) #> $alpha #> [1] 9 4 6 8 3 5 7 2 1 #>  #> $alpham1 #> + 9/9 vertices, named, from e88196f: #> [1] G F D B E C H I A #>  is_chordal(g1, fillin = TRUE) #> $chordal #> [1] FALSE #>  #> $fillin #>  [1] 2 6 8 7 5 7 2 7 6 1 7 1 #>  #> $newgraph #> NULL #>   g2 <- graph_from_literal(   A - B:E, B - A:E:F:D, C - E:D:G, D - B:F:E:C:G,   E - A:B:C:D:F, F - B:D:E, G - C:D:H:I, H - G:I:J,   I - G:H:J, J - H:I ) max_cardinality(g2) #> $alpha #>  [1] 10  8  9  6  7  5  4  2  3  1 #>  #> $alpham1 #> + 10/10 vertices, named, from 6722768: #>  [1] J H I G C F D B E A #>  is_chordal(g2, fillin = TRUE) #> $chordal #> [1] TRUE #>  #> $fillin #> numeric(0) #>  #> $newgraph #> NULL #>"},{"path":"/reference/max_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum flow in a graph — max_flow","title":"Maximum flow in a graph — max_flow","text":"graph edge given flow capacity maximal flow two vertices calculated.","code":""},{"path":"/reference/max_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum flow in a graph — max_flow","text":"","code":"max_flow(graph, source, target, capacity = NULL)"},{"path":"/reference/max_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum flow in a graph — max_flow","text":"graph input graph. source id source vertex. target id target vertex (sometimes also called sink). capacity Vector giving capacity edges. NULL (default) capacity edge attribute used. Note weight edge attribute used function.","code":""},{"path":"/reference/max_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum flow in a graph — max_flow","text":"named list components: value numeric scalar, value maximum flow. flow numeric vector, flow , one entry edge. undirected graphs entry bit trickier, since flow direction predetermined edge direction. graphs elements vector can negative, means flow goes bigger vertex id smaller one. Positive values mean flow goes smaller vertex id bigger one. cut numeric vector edge ids, minimum cut corresponding maximum flow. partition1 numeric vector vertex ids, vertices first partition minimum cut corresponding maximum flow. partition2 numeric vector vertex ids, vertices second partition minimum cut corresponding maximum flow. stats list statistics push-relabel algorithm. Five integer values currently: nopush number push operations, norelabel number relabelings, nogap number times gap heuristics used, nogapnodes total number gap nodes omitted gap heuristics nobfs number times global breadth-first-search update performed assign better height (=distance) values vertices.","code":""},{"path":"/reference/max_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum flow in a graph — max_flow","text":"max_flow() calculates maximum flow two vertices weighted (ie. valued) graph. flow source target assignment non-negative real numbers edges graph, satisfying two properties: (1) edge flow (ie. assigned number) capacity edge (capacity parameter edge attribute), (2) every vertex, except source target incoming flow outgoing flow. value flow incoming flow target vertex. maximum flow flow maximum value.","code":""},{"path":"/reference/max_flow.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maximum flow in a graph — max_flow","text":". V. Goldberg R. E. Tarjan: New Approach Maximum Flow Problem Journal ACM 35:921-940, 1988.","code":""},{"path":[]},{"path":"/reference/max_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum flow in a graph — max_flow","text":"","code":"E <- rbind(c(1, 3, 3), c(3, 4, 1), c(4, 2, 2), c(1, 5, 1), c(5, 6, 2), c(6, 2, 10)) colnames(E) <- c(\"from\", \"to\", \"capacity\") g1 <- graph_from_data_frame(as.data.frame(E)) max_flow(g1, source = V(g1)[\"1\"], target = V(g1)[\"2\"]) #> $value #> [1] 2 #>  #> $flow #> [1] 1 1 1 1 1 1 #>  #> $cut #> [1] 2 4 #>  #> $partition1 #> + 2/6 vertices, named, from ceaf181: #> [1] 1 3 #>  #> $partition2 #> + 4/6 vertices, named, from ceaf181: #> [1] 4 5 6 2 #>  #> $stats #> $stats$nopush #> [1] 4 #>  #> $stats$norelabel #> [1] 1 #>  #> $stats$nogap #> [1] 0 #>  #> $stats$nogapnodes #> [1] 0 #>  #> $stats$nobfs #> [1] 1 #>  #>"},{"path":"/reference/merge_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Merging graph layouts — merge_coords","title":"Merging graph layouts — merge_coords","text":"Place several graphs layout","code":""},{"path":"/reference/merge_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merging graph layouts — merge_coords","text":"","code":"merge_coords(graphs, layouts, method = \"dla\")  layout_components(graph, layout = layout_with_kk, ...)"},{"path":"/reference/merge_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merging graph layouts — merge_coords","text":"graphs list graph objects. layouts list two-column matrices. method Character constant giving method use. Right now dla implemented. graph input graph. layout function object, layout function use. ... Additional arguments pass layout layout function.","code":""},{"path":"/reference/merge_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merging graph layouts — merge_coords","text":"matrix two columns many lines total number vertices graphs.","code":""},{"path":"/reference/merge_coords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merging graph layouts — merge_coords","text":"merge_coords() takes list graphs list coordinates places graphs common layout. method use chosen via method parameter, although right now dla method implemented. dla method covers graph circles.  sorts graphs based number vertices first places largest graph center layout. graphs placed decreasing order via DLA (diffision limited aggregation) algorithm: graph placed randomly circle far away center random walk conducted graph walks larger graphs already placed walks far center layout. layout_components() function disassembles graph first maximal connected components calls supplied layout function component separately. Finally merges layouts via calling merge_coords().","code":""},{"path":[]},{"path":"/reference/merge_coords.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merging graph layouts — merge_coords","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/merge_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merging graph layouts — merge_coords","text":"","code":"# create 20 scale-free graphs and place them in a common layout graphs <- lapply(sample(5:20, 20, replace = TRUE),   barabasi.game,   directed = FALSE ) layouts <- lapply(graphs, layout_with_kk) lay <- merge_coords(graphs, layouts) g <- disjoint_union(graphs) plot(g, layout = lay, vertex.size = 3, labels = NA, edge.color = \"black\") #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/min_cut.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum cut in a graph — min_cut","title":"Minimum cut in a graph — min_cut","text":"min_cut() calculates minimum st-cut two vertices graph (source target arguments given) minimum cut graph (source target NULL).","code":""},{"path":"/reference/min_cut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum cut in a graph — min_cut","text":"","code":"min_cut(   graph,   source = NULL,   target = NULL,   capacity = NULL,   value.only = TRUE )"},{"path":"/reference/min_cut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum cut in a graph — min_cut","text":"graph input graph. source id source vertex. target id target vertex (sometimes also called sink). capacity Vector giving capacity edges. NULL (default) capacity edge attribute used. value.Logical scalar, TRUE minimum cut value returned, FALSE edges cut two () partitions also returned.","code":""},{"path":"/reference/min_cut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum cut in a graph — min_cut","text":"min_cut() nuieric constant, value minimum cut, except value.= FALSE. case named list components: value Numeric scalar, cut value. cut Numeric vector, edges cut. partition1 vertices first partition cut edges removed. Note vertices might actually different components (cut edges removed), graph may fall apart two components. partition2 vertices second partition cut edges removed. Note vertices might actually different components (cut edges removed), graph may fall apart two components.","code":""},{"path":"/reference/min_cut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimum cut in a graph — min_cut","text":"minimum st-cut source target minimum total weight edges needed remove eliminate paths source target. minimum cut graph minimum total weight edges needed remove separate graph (least) two components. (make graph strongly connected directed case.) maximum flow two vertices graph minimum st-cut, max_flow() min_cut() essentially calculate quantity, difference min_cut() can invoked without giving source target arguments minimum possible minimum cuts calculated. undirected graphs Stoer-Wagner algorithm (see reference ) used calculate minimum cut.","code":""},{"path":"/reference/min_cut.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Minimum cut in a graph — min_cut","text":"M. Stoer F. Wagner: simple min-cut algorithm, Journal ACM, 44 585-591, 1997.","code":""},{"path":[]},{"path":"/reference/min_cut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum cut in a graph — min_cut","text":"","code":"g <- make_ring(100) min_cut(g, capacity = rep(1, vcount(g))) #> [1] 2 min_cut(g, value.only = FALSE, capacity = rep(1, vcount(g))) #> $value #> [1] 2 #>  #> $cut #> + 2/100 edges from 45426a8: #> [1] 1--2 2--3 #>  #> $partition1 #> + 1/100 vertex, from 45426a8: #> [1] 2 #>  #> $partition2 #> + 99/100 vertices, from 45426a8: #>  [1]   1   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20 #> [20]  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39 #> [39]  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58 #> [58]  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77 #> [77]  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96 #> [96]  97  98  99 100 #>   g2 <- graph(c(1, 2, 2, 3, 3, 4, 1, 6, 6, 5, 5, 4, 4, 1)) E(g2)$capacity <- c(3, 1, 2, 10, 1, 3, 2) min_cut(g2, value.only = FALSE) #> $value #> [1] 1 #>  #> $cut #> + 1/7 edge from a975f10: #> [1] 2->3 #>  #> $partition1 #> + 1/6 vertex, from a975f10: #> [1] 2 #>  #> $partition2 #> + 5/6 vertices, from a975f10: #> [1] 1 3 4 5 6 #>"},{"path":"/reference/min_separators.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum size vertex separators — min_separators","title":"Minimum size vertex separators — min_separators","text":"Find vertex sets minimal size whose removal separates graph components","code":""},{"path":"/reference/min_separators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum size vertex separators — min_separators","text":"","code":"min_separators(graph)"},{"path":"/reference/min_separators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum size vertex separators — min_separators","text":"graph input graph. may directed, edge directions ignored.","code":""},{"path":"/reference/min_separators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum size vertex separators — min_separators","text":"list numeric vectors. numeric vector vertex separator.","code":""},{"path":"/reference/min_separators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimum size vertex separators — min_separators","text":"function implements Kanevsky algorithm finding minimal-size vertex separators undirected graph. See reference details. special case fully connected input graph \\(n\\) vertices, subsets size \\(n-1\\) listed result.","code":""},{"path":"/reference/min_separators.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Minimum size vertex separators — min_separators","text":"Arkady Kanevsky: Finding minimum-size separating vertex sets graph. Networks 23 533--541, 1993. JS Provan DR Shier: Paradigm listing (s,t)-cuts graphs, Algorithmica 15, 351--372, 1996. J. Moody D. R. White. Structural cohesion embeddedness: hierarchical concept social groups. American Sociological Review, 68 103--127, Feb 2003.","code":""},{"path":[]},{"path":"/reference/min_separators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum size vertex separators — min_separators","text":"","code":"# The graph from the Moody-White paper mw <- graph.formula(   1 - 2:3:4:5:6, 2 - 3:4:5:7, 3 - 4:6:7, 4 - 5:6:7,   5 - 6:7:21, 6 - 7, 7 - 8:11:14:19, 8 - 9:11:14, 9 - 10,   10 - 12:13, 11 - 12:14, 12 - 16, 13 - 16, 14 - 15, 15 - 16,   17 - 18:19:20, 18 - 20:21, 19 - 20:22:23, 20 - 21,   21 - 22:23, 22 - 23 )  # Cohesive subgraphs mw1 <- induced.subgraph(mw, as.character(c(1:7, 17:23))) mw2 <- induced.subgraph(mw, as.character(7:16)) mw3 <- induced.subgraph(mw, as.character(17:23)) mw4 <- induced.subgraph(mw, as.character(c(7, 8, 11, 14))) mw5 <- induced.subgraph(mw, as.character(1:7))  min_separators(mw) #> [[1]] #> + 1/23 vertex, named, from f7acba4: #> [1] 7 #>  min_separators(mw1) #> [[1]] #> + 2/14 vertices, named, from ef20122: #> [1] 5 7 #>  #> [[2]] #> + 2/14 vertices, named, from ef20122: #> [1] 5  19 #>  #> [[3]] #> + 2/14 vertices, named, from ef20122: #> [1] 7  21 #>  #> [[4]] #> + 2/14 vertices, named, from ef20122: #> [1] 21 19 #>  min_separators(mw2) #> [[1]] #> + 2/10 vertices, named, from 1640f69: #> [1] 10 16 #>  #> [[2]] #> + 2/10 vertices, named, from 1640f69: #> [1] 14 16 #>  #> [[3]] #> + 2/10 vertices, named, from 1640f69: #> [1] 8  10 #>  min_separators(mw3) #> [[1]] #> + 2/7 vertices, named, from 24ac2fb: #> [1] 21 19 #>  min_separators(mw4) #> [[1]] #> + 3/4 vertices, named, from 394fb51: #> [1] 8  11 14 #>  #> [[2]] #> + 3/4 vertices, named, from 394fb51: #> [1] 7  11 14 #>  #> [[3]] #> + 3/4 vertices, named, from 394fb51: #> [1] 7  8  14 #>  #> [[4]] #> + 3/4 vertices, named, from 394fb51: #> [1] 7  8  11 #>  min_separators(mw5) #> [[1]] #> + 5/7 vertices, named, from 4958aa0: #> [1] 2 3 4 5 6 #>  #> [[2]] #> + 5/7 vertices, named, from 4958aa0: #> [1] 1 3 4 5 7 #>  #> [[3]] #> + 5/7 vertices, named, from 4958aa0: #> [1] 1 2 4 6 7 #>   # Another example, the science camp network camp <- graph.formula(   Harry:Steve:Don:Bert - Harry:Steve:Don:Bert,   Pam:Brazey:Carol:Pat - Pam:Brazey:Carol:Pat,   Holly - Carol:Pat:Pam:Jennie:Bill,   Bill - Pauline:Michael:Lee:Holly,   Pauline - Bill:Jennie:Ann,   Jennie - Holly:Michael:Lee:Ann:Pauline,   Michael - Bill:Jennie:Ann:Lee:John,   Ann - Michael:Jennie:Pauline,   Lee - Michael:Bill:Jennie,   Gery - Pat:Steve:Russ:John,   Russ - Steve:Bert:Gery:John,   John - Gery:Russ:Michael ) min_separators(camp) #> [[1]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Gery Russ #>  #> [[2]] #> + 2/18 vertices, named, from 662e4f5: #> [1] John Gery #>  #> [[3]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Michael Gery    #>  #> [[4]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Holly Gery  #>  #> [[5]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Pat  John #>  #> [[6]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Pat     Michael #>  #> [[7]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Pat   Holly #>  #> [[8]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Holly John  #>  #> [[9]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Holly   Michael #>  #> [[10]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Steve Russ  #>  #> [[11]] #> + 2/18 vertices, named, from 662e4f5: #> [1] Steve Bert  #>"},{"path":"/reference/min_st_separators.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum size vertex separators — min_st_separators","title":"Minimum size vertex separators — min_st_separators","text":"List vertex sets minimal (s,t) separators s t, undirected graph.","code":""},{"path":"/reference/min_st_separators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum size vertex separators — min_st_separators","text":"","code":"min_st_separators(graph)"},{"path":"/reference/min_st_separators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum size vertex separators — min_st_separators","text":"graph input graph. may directed, edge directions ignored.","code":""},{"path":"/reference/min_st_separators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum size vertex separators — min_st_separators","text":"list numeric vectors. vector contains vertex set (defined vertex ids), vector (s,t) separator input graph, \\(s\\) \\(t\\).","code":""},{"path":"/reference/min_st_separators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimum size vertex separators — min_st_separators","text":"\\((s,t)\\) vertex separator set vertices, removal graph, path \\(s\\) \\(t\\) graph. \\((s,t)\\) vertex separator minimal none subsets \\((s,t)\\) vertex separator.","code":""},{"path":"/reference/min_st_separators.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Minimum size vertex separators — min_st_separators","text":"Anne Berry, Jean-Paul Bordat Olivier Cogis: Generating Minimal Separators Graph, : Peter Widmayer, Gabriele Neyer Stephan Eidenbenz (editors): Graph-theoretic concepts computer science, 1665, 167--172, 1999. Springer.","code":""},{"path":"/reference/min_st_separators.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Minimum size vertex separators — min_st_separators","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/min_st_separators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum size vertex separators — min_st_separators","text":"","code":"ring <- make_ring(4) min_st_separators(ring) #> [[1]] #> + 2/4 vertices, from 93115c0: #> [1] 2 4 #>  #> [[2]] #> + 2/4 vertices, from 93115c0: #> [1] 1 3 #>   chvatal <- make_graph(\"chvatal\") min_st_separators(chvatal) #> [[1]] #> + 4/12 vertices, from 76300ae: #> [1]  7 10 11 12 #>  #> [[2]] #> + 4/12 vertices, from 76300ae: #> [1]  3  6  8 11 #>  #> [[3]] #> + 4/12 vertices, from 76300ae: #> [1]  2  7  9 12 #>  #> [[4]] #> + 4/12 vertices, from 76300ae: #> [1]  8 10 11 12 #>  #> [[5]] #> + 4/12 vertices, from 76300ae: #> [1]  6  9 11 12 #>  #> [[6]] #> + 4/12 vertices, from 76300ae: #> [1]  2  5  7 10 #>  #> [[7]] #> + 4/12 vertices, from 76300ae: #> [1] 1 3 6 8 #>  #> [[8]] #> + 4/12 vertices, from 76300ae: #> [1] 2 4 7 9 #>  #> [[9]] #> + 4/12 vertices, from 76300ae: #> [1]  3  5  8 10 #>  #> [[10]] #> + 4/12 vertices, from 76300ae: #> [1] 1 4 6 9 #>  #> [[11]] #> + 4/12 vertices, from 76300ae: #> [1] 1 2 4 5 #>  #> [[12]] #> + 4/12 vertices, from 76300ae: #> [1] 1 3 4 5 #>  #> [[13]] #> + 6/12 vertices, from 76300ae: #> [1]  3  6  8 10 11 12 #>  #> [[14]] #> + 6/12 vertices, from 76300ae: #> [1]  4  6  7  9 11 12 #>  #> [[15]] #> + 6/12 vertices, from 76300ae: #> [1]  2  4  5  7 10 12 #>  #> [[16]] #> + 6/12 vertices, from 76300ae: #> [1]  3  4  5  7 10 11 #>  #> [[17]] #> + 6/12 vertices, from 76300ae: #> [1]  6  7  8  9 11 12 #>  #> [[18]] #> + 6/12 vertices, from 76300ae: #> [1]  3  5  7  8 10 11 #>  #> [[19]] #> + 6/12 vertices, from 76300ae: #> [1]  3  4  6  7  9 11 #>  #> [[20]] #> + 6/12 vertices, from 76300ae: #> [1] 1 3 4 5 6 8 #>  #> [[21]] #> + 6/12 vertices, from 76300ae: #> [1]  1  2  6  8  9 12 #>  #> [[22]] #> + 6/12 vertices, from 76300ae: #> [1]  2  5  7  8 10 12 #>  #> [[23]] #> + 6/12 vertices, from 76300ae: #> [1] 1 2 4 5 7 9 #>  #> [[24]] #> + 6/12 vertices, from 76300ae: #> [1]  2  7  9 10 11 12 #>  #> [[25]] #> + 6/12 vertices, from 76300ae: #> [1]  1  6  8  9 11 12 #>  #> [[26]] #> + 6/12 vertices, from 76300ae: #> [1]  1  2  5  8 10 12 #>  #> [[27]] #> + 6/12 vertices, from 76300ae: #> [1]  1  3  5  8 10 11 #>  #> [[28]] #> + 6/12 vertices, from 76300ae: #> [1]  1  2  4  6  9 12 #>  #> [[29]] #> + 6/12 vertices, from 76300ae: #> [1]  1  3  4  6  9 11 #>  #> [[30]] #> + 6/12 vertices, from 76300ae: #> [1]  1  2  3  5  8 10 #>  #> [[31]] #> + 6/12 vertices, from 76300ae: #> [1] 1 2 3 4 6 9 #>  #> [[32]] #> + 6/12 vertices, from 76300ae: #> [1]  2  3  4  5  7 10 #>"},{"path":"/reference/modularity.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Modularity of a community structure of a graph — modularity.igraph","title":"Modularity of a community structure of a graph — modularity.igraph","text":"function calculates modular given division graph subgraphs.","code":""},{"path":"/reference/modularity.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modularity of a community structure of a graph — modularity.igraph","text":"","code":"# S3 method for igraph modularity(x, membership, weights = NULL, resolution = 1, directed = TRUE, ...)  modularity_matrix(   graph,   membership,   weights = NULL,   resolution = 1,   directed = TRUE )"},{"path":"/reference/modularity.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modularity of a community structure of a graph — modularity.igraph","text":"x, graph input graph. membership Numeric vector, one value vertex, membership vector community structure. weights NULL numeric vector giving edge weights. resolution resolution parameter. Must greater equal 0. Set 1 use classical definition modularity. directed Whether use directed undirected version modularity. Ignored undirected graphs. ... Additional arguments, none currently.","code":""},{"path":"/reference/modularity.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modularity of a community structure of a graph — modularity.igraph","text":"modularity() numeric scalar, modularity score given configuration. modularity_matrix() numeric square matrix, order number vertices graph.","code":""},{"path":"/reference/modularity.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modularity of a community structure of a graph — modularity.igraph","text":"modularity() calculates modularity graph respect given membership vector. modularity graph respect division (vertex types) measures good division , separated different vertex types . defined $$Q=\\frac{1}{2m} \\sum_{,j} (A_{ij}-\\gamma\\frac{k_i k_j}{2m})\\delta(c_i,c_j),$$ \\(m\\) number edges, \\(A_{ij}\\) element \\(\\) adjacency matrix row \\(\\) column \\(j\\), \\(k_i\\) degree \\(\\), \\(k_j\\) degree \\(j\\), \\(c_i\\) type (component) \\(\\), \\(c_j\\) \\(j\\), sum goes \\(\\) \\(j\\) pairs vertices, \\(\\delta(x,y)\\) 1 \\(x=y\\) 0 otherwise. directed graphs, defined $$Q = \\frac{1}{m} \\sum_{,j} (A_{ij}-\\gamma \\frac{k_i^{} k_j^{}}{m})\\delta(c_i,c_j).$$ resolution parameter \\(\\gamma\\) allows weighting random null model, might useful finding partitions high modularity. Maximizing modularity higher values resolution parameter typically results , smaller clusters finding partitions high modularity. Lower values typically results fewer, larger clusters. original definition modularity retrieved setting \\(\\gamma\\) 1. edge weights given, considered element \\(\\) adjacency matrix, \\(k_i\\) sum weights adjacent edges vertex \\(\\). modularity_matrix() calculates modularity matrix. dense matrix, defined difference adjacency matrix configuration model null model matrix. words element \\(M_{ij}\\) given \\(A_{ij}-d_i d_j/(2m)\\), \\(A_{ij}\\) (possibly weighted) adjacency matrix, \\(d_i\\) degree vertex \\(\\), \\(m\\) number edges (total weights graph, weighed).","code":""},{"path":"/reference/modularity.igraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Modularity of a community structure of a graph — modularity.igraph","text":"Clauset, .; Newman, M. E. J. & Moore, C. Finding community structure large networks, Physical Review E 2004, 70, 066111","code":""},{"path":[]},{"path":"/reference/modularity.igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Modularity of a community structure of a graph — modularity.igraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/modularity.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modularity of a community structure of a graph — modularity.igraph","text":"","code":"g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5) g <- add_edges(g, c(1, 6, 1, 11, 6, 11)) wtc <- cluster_walktrap(g) modularity(wtc) #> [1] 0.5757576 modularity(g, membership(wtc)) #> [1] 0.5757576"},{"path":"/reference/motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph motifs — motifs","title":"Graph motifs — motifs","text":"Graph motifs small connected subgraphs well-defined structure.  functions search graph various motifs.","code":""},{"path":"/reference/motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph motifs — motifs","text":"","code":"motifs(graph, size = 3, cut.prob = rep(0, size))"},{"path":"/reference/motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph motifs — motifs","text":"graph Graph object, input graph. size size motif, currently sizes 3 4 supported directed graphs sizes 3-6 undirected graphs. cut.prob Numeric vector giving probabilities search graph cut certain level. length size motif (size argument). default cuts made.","code":""},{"path":"/reference/motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph motifs — motifs","text":"motifs() returns numeric vector, number occurrences motif graph. motifs ordered isomorphism classes. Note unconnected subgraphs, considered motifs, result NA.","code":""},{"path":"/reference/motifs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph motifs — motifs","text":"motifs() searches graph motifs given size returns numeric vector containing number different motifs. order motifs defined isomorphism class, see isomorphism_class().","code":""},{"path":[]},{"path":"/reference/motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph motifs — motifs","text":"","code":"g <- barabasi.game(100) motifs(g, 3) #>  [1]  NA  NA 341  NA  85   0   0   0   0   0   0   0   0   0   0   0 count_motifs(g, 3) #> [1] 426 sample_motifs(g, 3) #> [1] 60"},{"path":"/reference/mst.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum spanning tree — mst","title":"Minimum spanning tree — mst","text":"subgraph connected graph minimum spanning tree tree, sum edge weights minimal among tree subgraphs graph. minimum spanning forest graph graph consisting minimum spanning trees components.","code":""},{"path":"/reference/mst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum spanning tree — mst","text":"","code":"mst(graph, weights = NULL, algorithm = NULL, ...)"},{"path":"/reference/mst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum spanning tree — mst","text":"graph graph object analyze. weights Numeric algorithm giving weights edges graph. order determined edge ids. ignored unweighted algorithm chosen. Edge weights interpreted distances. algorithm algorithm use calculation. unweighted can used unweighted graphs, prim runs Prim's algorithm weighted graphs.  NULL igraph tries select algorithm automatically: graph edge attribute called weight weights argument NULL Prim's algorithm chosen, otherwise unweighted algorithm performed. ... Additional arguments, unused.","code":""},{"path":"/reference/mst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum spanning tree — mst","text":"graph object minimum spanning forest. (check tree check number edges vcount(graph)-1.) edge vertex attributes original graph preserved result.","code":""},{"path":"/reference/mst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimum spanning tree — mst","text":"graph unconnected minimum spanning forest returned.","code":""},{"path":"/reference/mst.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Minimum spanning tree — mst","text":"Prim, R.C. 1957. Shortest connection networks generalizations Bell System Technical Journal, 37 1389--1401.","code":""},{"path":[]},{"path":"/reference/mst.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Minimum spanning tree — mst","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/mst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum spanning tree — mst","text":"","code":"g <- sample_gnp(100, 3 / 100) g_mst <- mst(g)"},{"path":"/reference/neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighboring (adjacent) vertices in a graph — neighbors","title":"Neighboring (adjacent) vertices in a graph — neighbors","text":"vertex neighbor another one (words, two vertices adjacent), incident edge.","code":""},{"path":"/reference/neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighboring (adjacent) vertices in a graph — neighbors","text":"","code":"neighbors(graph, v, mode = c(\"out\", \"in\", \"all\", \"total\"))"},{"path":"/reference/neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighboring (adjacent) vertices in a graph — neighbors","text":"graph input graph. v vertex adjacent vertices queried. mode Whether query outgoing (‘’), incoming (‘’) edges, types (‘’). ignored undirected graphs.","code":""},{"path":"/reference/neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighboring (adjacent) vertices in a graph — neighbors","text":"vertex sequence containing neighbors input vertex.","code":""},{"path":[]},{"path":"/reference/neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighboring (adjacent) vertices in a graph — neighbors","text":"","code":"g <- make_graph(\"Zachary\") n1 <- neighbors(g, 1) n34 <- neighbors(g, 34) intersection(n1, n34) #> + 4/34 vertices, from ceb6479: #> [1]  9 14 20 32"},{"path":"/reference/nexus.html","id":null,"dir":"Reference","previous_headings":"","what":"Query and download from the Nexus network repository — print.nexusDatasetInfo","title":"Query and download from the Nexus network repository — print.nexusDatasetInfo","text":"Nexus network repository online collection network data sets. functions can used query download data , directly igraph graph.","code":""},{"path":"/reference/nexus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query and download from the Nexus network repository — print.nexusDatasetInfo","text":"","code":"# S3 method for nexusDatasetInfo print(x, ...)  # S3 method for nexusDatasetInfoList summary(object, ...)  # S3 method for nexusDatasetInfoList print(x, ...)  nexus_list(   tags = NULL,   offset = 0,   limit = 10,   operator = c(\"or\", \"and\"),   order = c(\"date\", \"name\", \"popularity\"),   nexus.url = igraph_opt(\"nexus.url\") )  nexus_info(id, nexus.url = igraph_opt(\"nexus.url\"))  nexus_get(   id,   offset = 0,   order = c(\"date\", \"name\", \"popularity\"),   nexus.url = igraph_opt(\"nexus.url\") )  nexus_search(   q,   offset = 0,   limit = 10,   order = c(\"date\", \"name\", \"popularity\"),   nexus.url = igraph_opt(\"nexus.url\") )  # S3 method for nexusDatasetInfoList [(x, i)"},{"path":"/reference/nexus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query and download from the Nexus network repository — print.nexusDatasetInfo","text":"x, object nexusDatasetInfo object print. ... Currently ignored. tags character vector, tags searched. given (NULL), datasets listed. offset offset select part results. Results listed offset+1. limit maximum number results return. operator character scalar. ‘’ (default), datasets least one given tags, returned. ‘’, datasets given tags, returned. order ordering results, possible values : ‘date’, ‘name’, ‘popularity’. nexus.url URL Nexus server. change default, unless set Nexus server. id numeric character id data set query download. Instead data set ids, possible supply nexusDatasetInfo nexusDatasetInfoList object directly query done corresponding data set(s). q Nexus search string. See examples . Index.","code":""},{"path":"/reference/nexus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query and download from the Nexus network repository — print.nexusDatasetInfo","text":"nexus_list() nexus_search() return list nexusDatasetInfo objects. list also attributes: size number data sets returned query. totalsize total number data sets found query. offset offset parameter query. limit limit parameter query. nexus_info() returns single nexusDatasetInfo object. nexus_get() returns igraph graph object, list graph objects, data set consists multiple networks.","code":""},{"path":"/reference/nexus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query and download from the Nexus network repository — print.nexusDatasetInfo","text":"Nexus online repository networks, API allow programmatic queries , programmatic data download well. nexus_list() nexus_info() functions query online database. return nexusDatasetInfo objects. nexus_info() returns information nexus_list(). nexus_search() searches Nexus, returns list data sets, nexusDatasetInfo objects. See search examples. nexus_get() downloads data set Nexus, based numeric id, based Nexus search string. search strings, first search hit downloaded, see also offset argument. (data sets found, function returns error.) nexusDatasetInfo objects returned nexus_list() following fields: id numeric id dataset. sid character id dataset. name Character scalar, name dataset. vertices/edges Character, number vertices edges graph(s). Vertices edges separated  slash, data set consists multiple networks, separated spaces. tags Character vector, tags dataset. Directed graph tags ‘directed’. Undirected graphs tagged ‘undirected’. common tags : ‘weighted’, ‘bipartite’, ‘social network’, etc. networks ids names networks data set. numeric character id separated slash, multiple networks separated spaces. nexusDatasetInfo objects returned nexus_info() following additional fields: date Character scalar, e.g. ‘2011-01-09’, date dataset added database. formats Character vector, data formats data set available. various formats separated semicolons. licence Character scalar, licence dataset. licence url Character scalar, URL licence dataset. Please make sure consult using dataset. summary Character scalar, short description dataset, usually single sentence. description Character scalar, full description dataset. citation Character scalar, paper(s) describing dataset. Please cite papers using dataset research, licence datasets requires . attributes list lists, list entry graph, vertex edge attribute following entries: type Type attribute, either ‘graph’, ‘vertex’ ‘edge’. datatype Data type attribute, currently can ‘numeric’ ‘string’. name Character scalar, name attribute. description Character scalar, description attribute. results Nexus queries printed screen consise format, similar format igraph graphs. data set list (typically result nexus_list() nexus_search()) looks like : line represents data set, following information given : character id data set (e.g. kaptail powergrid), number vertices number edges graph data sets.  data sets multiple graphs, intervals given . numeric id data set remaining space filled name data set. Summary information individual Nexus data set printed similar header used printing igraph graphs, differences well. four characters NEXUS word give important properties graph(s): first ‘U’ undirected ‘D’ directed graphs, ‘B’ data set contains directed undirected graphs. second ‘N’ named graphs. third character ‘W’ weighted graphs, fourth ‘B’ data set contains bipartite graphs. number vertices number edges printed, data sets multiple graphs, smallest largest values given. comes numeric id, string id data set. end first line contains name data set. second row lists data set tags, third row networks included data set. Detailed data set information printed similarly, contains fields.","code":"NEXUS 1-5/18 -- data set list [1] kaptail.4         39/109-223   #18 Kapferer tailor shop [2] condmatcollab2003 31163/120029 #17 Condensed matter collaborations+ [3] condmatcollab     16726/47594  #16 Condensed matter collaborations+ [4] powergrid         4941/6594    #15 Western US power grid [5] celegansneural    297/2359     #14 C. Elegans neural network NEXUS B--- 39 109-223 #18 kaptail -- Kapferer tailor shop + tags: directed; social network; undirected + nets: 1/KAPFTI2; 2/KAPFTS2; 3/KAPFTI1; 4/KAPFTS1"},{"path":"/reference/nexus.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query and download from the Nexus network repository — print.nexusDatasetInfo","text":"","code":"nexus_list(tag=\"weighted\") nexus_list(limit=3, order=\"name\") nexus_list(limit=3, order=\"name\")[[1]] nexus_info(2) g <- nexus_get(2) summary(g)  ## Data sets related to 'US': nexus_search(\"US\")  ## Search for data sets that have 'network' in their name: nexus_search(\"name:network\")  ## Any word can match nexus_search(\"blog or US or karate\")"},{"path":"/reference/norm_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize coordinates for plotting graphs — norm_coords","title":"Normalize coordinates for plotting graphs — norm_coords","text":"Rescale coordinates linearly within given bounds.","code":""},{"path":"/reference/norm_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize coordinates for plotting graphs — norm_coords","text":"","code":"norm_coords(   layout,   xmin = -1,   xmax = 1,   ymin = -1,   ymax = 1,   zmin = -1,   zmax = 1 )"},{"path":"/reference/norm_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize coordinates for plotting graphs — norm_coords","text":"layout matrix two three columns, layout normalize. xmin, xmax limits first coordinate, one NULL normalization performed along direction. ymin, ymax limits second coordinate, one NULL normalization performed along direction. zmin, zmax limits third coordinate, one NULL normalization performed along direction.","code":""},{"path":"/reference/norm_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize coordinates for plotting graphs — norm_coords","text":"numeric matrix dimension layout.","code":""},{"path":"/reference/norm_coords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize coordinates for plotting graphs — norm_coords","text":"norm_coords() normalizes layout, linearly transforms coordinate separately fit given limits.","code":""},{"path":[]},{"path":"/reference/norm_coords.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Normalize coordinates for plotting graphs — norm_coords","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize layout — normalize","title":"Normalize layout — normalize","text":"Scale coordinates layout.","code":""},{"path":"/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize layout — normalize","text":"","code":"normalize(   xmin = -1,   xmax = 1,   ymin = xmin,   ymax = xmax,   zmin = xmin,   zmax = xmax )"},{"path":"/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize layout — normalize","text":"xmin, xmax Minimum maximum x coordinates. ymin, ymax Minimum maximum y coordinates. zmin, zmax Minimum maximum z coordinates.","code":""},{"path":[]},{"path":"/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize layout — normalize","text":"","code":"layout_(make_ring(10), with_fr(), normalize()) #>             [,1]       [,2] #>  [1,] -0.1061383 -1.0000000 #>  [2,] -0.6880228 -0.7897466 #>  [3,] -1.0000000 -0.2583755 #>  [4,] -0.9205939  0.3614709 #>  [5,] -0.5007408  0.8310679 #>  [6,]  0.1028519  1.0000000 #>  [7,]  0.6856156  0.7878550 #>  [8,]  1.0000000  0.2572933 #>  [9,]  0.9190080 -0.3626082 #> [10,]  0.4965828 -0.8301619"},{"path":"/reference/page_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"The Page Rank algorithm — page_rank","title":"The Page Rank algorithm — page_rank","text":"Calculates Google PageRank specified vertices.","code":""},{"path":"/reference/page_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Page Rank algorithm — page_rank","text":"","code":"page_rank(   graph,   algo = c(\"prpack\", \"arpack\"),   vids = V(graph),   directed = TRUE,   damping = 0.85,   personalized = NULL,   weights = NULL,   options = NULL )"},{"path":"/reference/page_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Page Rank algorithm — page_rank","text":"graph graph object. algo Character scalar, implementation use carry calculation. default \"prpack\", uses PRPACK library (https://github.com/dgleich/prpack) calculate PageRank scores solving set linear equations. new implementation igraph version 0.7, suggested one, stable fastest small graphs.  \"arpack\" uses ARPACK library, default implementation igraph version 0.5 version 0.7. computes PageRank scores solving eingevalue problem. vids vertices interest. directed Logical, true directed paths considered directed graphs. ignored undirected graphs. damping damping factor (‘d’ original paper). personalized Optional vector giving probability distribution calculate personalized PageRank. personalized PageRank, probability jumping node abandoning random walk uniform, given vector. vector contains entry vertex rescaled sum one. weights numerical vector NULL. argument can used give edge weights calculating weighted PageRank vertices. NULL graph weight edge attribute used. weights numerical vector used, even graph weights edge attribute. NA, edge weights used (even graph weight edge attribute. function interprets edge weights connection strengths. random surfer model, edge larger weight likely selected surfer. options named list, override ARPACK options. See arpack() details. argument ignored PRPACK implementation used.","code":""},{"path":"/reference/page_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Page Rank algorithm — page_rank","text":"named list entries: vector numeric vector PageRank scores. value using ARPACK method, eigenvalue corresponding eigenvector PageRank scores returned . expected exactly one, can used check ARPACK successfully converged expected eingevector. using PRPACK method, always set 1.0. options information underlying ARPACK calculation. See arpack() details. entry NULL ARPACK implementation used.","code":""},{"path":"/reference/page_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Page Rank algorithm — page_rank","text":"explanation PageRank algorithm, see following webpage: http://infolab.stanford.edu/~backrub/google.html, following reference: Sergey Brin Larry Page: Anatomy Large-Scale Hypertextual Web Search Engine. Proceedings 7th World-Wide Web Conference, Brisbane, Australia, April 1998. page_rank() function can use either PRPACK library ARPACK (see arpack()) perform calculation. Please note PageRank given vertex depends PageRank vertices, even want calculate PageRank vertices, must calculated. Requesting PageRank vertices result performance increase .","code":""},{"path":"/reference/page_rank.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Page Rank algorithm — page_rank","text":"Sergey Brin Larry Page: Anatomy Large-Scale Hypertextual Web Search Engine. Proceedings 7th World-Wide Web Conference, Brisbane, Australia, April 1998.","code":""},{"path":[]},{"path":"/reference/page_rank.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Page Rank algorithm — page_rank","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/page_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Page Rank algorithm — page_rank","text":"","code":"g <- sample_gnp(20, 5 / 20, directed = TRUE) page_rank(g)$vector #>  [1] 0.05548077 0.03573689 0.05111834 0.05288550 0.06712866 0.05225539 #>  [7] 0.03158731 0.06257723 0.05448604 0.04337130 0.02908757 0.03844385 #> [13] 0.06920539 0.07099036 0.05929502 0.05633133 0.02394704 0.03500429 #> [19] 0.02421709 0.08685061  g2 <- make_star(10) page_rank(g2)$vector #>  [1] 0.49008499 0.05665722 0.05665722 0.05665722 0.05665722 0.05665722 #>  [7] 0.05665722 0.05665722 0.05665722 0.05665722  # Personalized PageRank g3 <- make_ring(10) page_rank(g3)$vector #>  [1] 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 reset <- seq(vcount(g3)) page_rank(g3, personalized = reset)$vector #>  [1] 0.08305627 0.07206568 0.07367581 0.08203783 0.09368592 0.10631408 #>  [7] 0.11796217 0.12632419 0.12793432 0.11694373"},{"path":"/reference/path.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to add or delete edges along a path — path","title":"Helper function to add or delete edges along a path — path","text":"function can used add delete edges form path.","code":""},{"path":"/reference/path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to add or delete edges along a path — path","text":"","code":"path(...)"},{"path":"/reference/path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to add or delete edges along a path — path","text":"... See details .","code":""},{"path":"/reference/path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to add or delete edges along a path — path","text":"special object can used together igraph graphs plus minus operators.","code":""},{"path":"/reference/path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to add or delete edges along a path — path","text":"adding edges via +, unnamed arguments concatenated, element final vector interpreted vertex graph. vector length \\(n+1\\), \\(n\\) edges added, vertex 1 vertex 2, vertex 2 vertex 3, etc. Named arguments used edge attributes new edges. deleting edges, attributes concatenated passed delete_edges().","code":""},{"path":[]},{"path":"/reference/path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to add or delete edges along a path — path","text":"","code":"# Create a (directed) wheel g <- make_star(11, center = 1) + path(2:11, 2) plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g <- make_empty_graph(directed = FALSE, n = 10) %>%   set_vertex_attr(\"name\", value = letters[1:10])  g2 <- g + path(\"a\", \"b\", \"c\", \"d\") plot(g2) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  g3 <- g2 + path(\"e\", \"f\", \"g\", weight = 1:2, color = \"red\") E(g3)[[]] #> + 5/5 edges from 5ad1488 (vertex names): #>   tail head tid hid weight color #> 1    a    b   1   2     NA  <NA> #> 2    b    c   2   3     NA  <NA> #> 3    c    d   3   4     NA  <NA> #> 4    e    f   5   6      1   red #> 5    f    g   6   7      2   red  g4 <- g3 + path(c(\"f\", \"c\", \"j\", \"d\"), width = 1:3, color = \"green\") E(g4)[[]] #> + 8/8 edges from 27cdbce (vertex names): #>   tail head tid hid weight color width #> 1    a    b   1   2     NA  <NA>    NA #> 2    b    c   2   3     NA  <NA>    NA #> 3    c    d   3   4     NA  <NA>    NA #> 4    e    f   5   6      1   red    NA #> 5    f    g   6   7      2   red    NA #> 6    c    f   3   6     NA green     1 #> 7    c    j   3  10     NA green     2 #> 8    d    j   4  10     NA green     3"},{"path":"/reference/permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Permute the vertices of a graph — permute","title":"Permute the vertices of a graph — permute","text":"Create new graph, permuting vertex ids.","code":""},{"path":"/reference/permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permute the vertices of a graph — permute","text":"","code":"permute(graph, permutation)"},{"path":"/reference/permute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permute the vertices of a graph — permute","text":"graph input graph, can directed undirected. permutation numeric vector giving permutation apply. first element new id vertex 1, etc. Every number one vcount(graph) must appear exactly .","code":""},{"path":"/reference/permute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permute the vertices of a graph — permute","text":"new graph object.","code":""},{"path":"/reference/permute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Permute the vertices of a graph — permute","text":"function creates new graph input graph permuting vertices according specified mapping. Call function output canonical_permutation() create canonical form graph. permute() keeps graph, vertex edge attributes graph.","code":""},{"path":[]},{"path":"/reference/permute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Permute the vertices of a graph — permute","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/permute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permute the vertices of a graph — permute","text":"","code":"# Random permutation of a random graph g <- sample_gnm(20, 50) g2 <- permute(g, sample(vcount(g))) graph.isomorphic(g, g2) #> [1] TRUE  # Permutation keeps all attributes g$name <- \"Random graph, Gnm, 20, 50\" V(g)$name <- letters[1:vcount(g)] E(g)$weight <- sample(1:5, ecount(g), replace = TRUE) g2 <- permute(g, sample(vcount(g))) graph.isomorphic(g, g2) #> [1] TRUE g2$name #> [1] \"Random graph, Gnm, 20, 50\" V(g2)$name #>  [1] \"i\" \"c\" \"l\" \"k\" \"d\" \"h\" \"q\" \"t\" \"f\" \"r\" \"a\" \"g\" \"b\" \"p\" \"m\" \"j\" \"s\" \"o\" \"e\" #> [20] \"n\" E(g2)$weight #>  [1] 5 1 4 3 1 1 2 4 2 5 3 2 4 4 2 1 5 1 5 5 1 5 3 5 2 1 2 2 3 1 5 5 3 3 4 2 5 1 #> [39] 2 4 5 1 2 3 5 1 2 1 1 5 all(sort(E(g2)$weight) == sort(E(g)$weight)) #> [1] TRUE"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Magrittr's pipes — %>%","title":"Magrittr's pipes — %>%","text":"igraph re-exports %>% operator magrittr, find useful. Please see documentation magrittr package.","code":""},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magrittr's pipes — %>%","text":"lhs Left hand side pipe. rhs Right hand side pipe.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Magrittr's pipes — %>%","text":"Result applying right hand side result left hand side.","code":""},{"path":"/reference/pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magrittr's pipes — %>%","text":"","code":"make_ring(10) %>%   add_edges(c(1, 6)) %>%   plot() #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/plot.common.html","id":null,"dir":"Reference","previous_headings":"","what":"Drawing graphs — Drawing graphs","title":"Drawing graphs — Drawing graphs","text":"common bits three plotting functions   plot.igraph, tkplot rglplot discussed   manual page","code":""},{"path":"/reference/plot.common.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drawing graphs — Drawing graphs","text":"currently three different functions igraph package   can draw graph various ways: plot.igraph simple non-interactive 2D plotting R devices.   Actually implementation plot   generic function,    can write plot(graph) instead   plot.igraph(graph). used standard R devices   supports every output format R output device.   list quite impressing: PostScript, PDF files, XFig files, SVG   files, JPG, PNG course can plot screen well using   default devices, good-looking anti-aliased Cairo device.   See plot.igraph information. tkplot interactive 2D plotting using tcltk   package. can handle graphs moderate size, thousand   vertices probably already many. parameters plotted   graph can changed interactively issuing tkplot   command: position, color size vertices color   width edges. See tkplot details. rglplot experimental function draw graphs 3D   using OpenGL. See rglplot information. Please also check examples .","code":""},{"path":"/reference/plot.common.html","id":"how-to-specify-graphical-parameters","dir":"Reference","previous_headings":"","what":"How to specify graphical parameters","title":"Drawing graphs — Drawing graphs","text":"three ways give values parameters described ,   section 'Parameters'. give three ways order   precedence. first method supply named arguments plotting commands:   plot.igraph, tkplot   rglplot. Parameters vertices start prefix   ‘vertex.’, parameters edges prefix   ‘edge.’, global parameters prefix. Eg.   color vertices can given via argument vertex.color,   whereas edge.color sets color edges. layout   gives layout graphs. second way assign vertex, edge graph attributes   graph. attributes prefix, ie. color vertices   taken color vertex attribute color   edges color edge attribute. layout graph   given layout graph attribute. (Always assuming   corresponding command argument present.) Setting vertex   edge attributes handy want assign given ‘look’   graph, attributes saved graph save   save GraphML format   write_graph, graph look   loading . parameter given command line, corresponding   vertex/edge/graph attribute also missing general igraph   parameters handled igraph_options also   checked. Vertex parameters prefix ‘vertex.’, edge   parameters prefixed ‘edge.’, general parameters   like layout prefixed ‘plot’.   parameters useful want   graphs look, vertex size, vertex   color, etc. need set every plotting,   also need assign vertex/edge attributes every graph. value parameter specified three ways   described , default valued used, given source   code. Different parameters can different type, eg. vertex colors can   given character vector color names, integer vector   color numbers current palette. Different types   valid different parameters, discussed detail   next section. however always true parameter can always   function object called graph   single argument get “proper” value parameter.   (function returns another function object   called ...)","code":""},{"path":"/reference/plot.common.html","id":"the-list-of-parameters","dir":"Reference","previous_headings":"","what":"The list of parameters","title":"Drawing graphs — Drawing graphs","text":"Vertex parameters first, note ‘vertex.’ prefix   needs added used argument setting via   igraph_options. value parameter may scalar   valid every vertex vector separate value   vertex. (Shorter vectors recycled.) size size vertex, numeric scalar vector,       latter case vertex sizes may differ. vertex sizes       scaled order size vertices       given value three plotting commands. need       integer number. default value 15. big enough place short labels       vertices. size2 “” size vertex, vertex       shapes. various rectangle shapes gives height       vertices, whereas size gives width. ignored       shapes size can specified single       number. default 15. color fill color vertex. numeric       current palette used, see       palette. character vector       may either contain integer values, named colors RGB       specified colors three four bytes. strings starting       ‘#’ assumed RGB color       specifications. possible mix named color RGB       colors. Note tkplot ignores fourth byte       (alpha channel) RGB color specification. plot.igraph integer values, default igraph       palette used (see ‘palette’ parameter . Note       different R palette. want () vertices color, supply       NA color name. default value “SkyBlue2”. frame.color color frame vertices,       formats allowed fill color. want vertices frame, supply NA       color name. default “black”. frame.width width frame vertices. default value 1.  shape shape vertex, currently       “circle”, “square”,       “csquare”, “rectangle”,       “crectangle”, “vrectangle”,       “pie” (see vertex.shape.pie),       ‘sphere’, “none” supported,       plot.igraph       command. “none” draw vertices ,       although vertex label plotted (given). See       shapes details vertex       shapes vertex.shape.pie using pie charts       vertices. “sphere” vertex shape plots vertices 3D       ray-traced spheres, given color size. produces       raster image supported graphics       devices. devices raster transparency supported       spheres transparent background. See       dev.capabilities ‘rasterImage’       capability check device supported. default vertices drawn circles. label vertex labels. converted       character. Specify NA omit vertex labels. default vertex labels vertex ids. label.family font family used vertex labels.       different plotting commands can used different fonts,       interpret parameter different ways. basic notation ,       however, understood plot.igraph       tkplot. rglplot support fonts       right now, ignores parameter completely. plot.igraph parameter simply passed       text argument family. tkplot       conversion performed. parameter name       exixting Tk font, font used label.font       label.cex parameters ignored complerely.       one base families (serif, sans, mono) Times,       Helvetica Courier fonts used, guaranteed exist       systems. ‘symbol’ base family used       symbol font available, otherwise first font       ‘symbol’ name. parameter name       base families also named Tk font pass       tkfont.create hope user knows       . label.font label.cex       parameters also passed tkfont.create       case. default value ‘serif’. label.font font within font family use       vertex labels. interpreted way       font graphical parameter: 1 plain text, 2 bold face,       3 italic, 4 bold italic 5 specifies symbol       font. plot.igraph parameter simply passed       text. tkplot, label.family parameter       name Tk font parameter used set       whether newly created font italic /      boldface. Otherwise ignored. rglplot ignored. default value 1. label.cex font size vertex labels. interpreted       multiplication factor device-dependent base font       size. plot.igraph simply passed       text argument cex. tkplot multiplied 12 used       size argument tkfont.create.       base font thus 12 tkplot. rglplot ignored. default value 1. label.dist distance label center vertex. 0       label centered vertex. 1       label displayed beside vertex. default value 0. label.degree defines position vertex labels, relative       center vertices. interpreted angle radian,       zero means ‘right’, ‘pi’ means       left, -pi/2 pi/2. default value -pi/4. label.color color labels, see color       vertex parameter discussed earlier possible values. default value black. Edge parameters require add ‘edge.’ prefix   used arguments set igraph_options. edge   parameters: color color edges, see color vertex       parameter possible values. default parameter darkgrey. width width edges. default value 1. arrow.size size arrows. Currently       constant, every edge. vector       submitted first element used, ie.       taken edge attribute attribute first       edge used arrows. likely change future. default value 1. arrow.width width arrows. Currently       constant, every edge. vector       submitted first element used, ie.       taken edge attribute attribute first       edge used arrows. likely change future. argument currently used plot.igraph. default value 1, gives width       option appeared igraph. lty line type edges. Almost format       accepted standard graphics par,       0 “blank” mean edges, 1 “solid”       solid lines, possible values : 2 (“dashed”),       3 (“dotted”), 4 (“dotdash”), 5 (“longdash”),       6 (“twodash”). tkplot also accepts standard Tk line type strings,       however support “blank” lines, instead type       ‘0’ type ‘1’, ie. solid lines drawn. argument ignored rglplot. default value type 1, solid line. label edge labels. converted       character. Specify NA omit edge labels. Edge labels omitted default. label.family Font family edge labels. See vertex       parameter name details. label.font font edge labels. See       corresponding vertex parameter discussed earlier details. label.cex font size edge labels, see       corresponding vertex parameter details. label.color color edge labels, see       color vertex parameters specify colors. label.x horizontal coordinates edge labels might       given , explicitly. NA elements       replaced automatically calculated coordinates. NULL,       edge horizontal coordinates calculated       automatically. parameter supported       plot.igraph. label.y label.x, vertical       coordinates. curved Specifies whether draw curved edges, .       can logical numeric vector scalar. First vector replicated length       number edges graph. interpreted edge       separately. numeric value specifies curvature edge;       zero curvature means straight edges, negative values means       edge bends clockwise, positive values opposite. TRUE       means curvature 0.5, FALSE means curvature zero. default vector specifying curvatire calculated via       call curve_multiple function. function makes       sure multiple edges curved visible.       parameter ignored loop edges. default value FALSE. parameter currently ignored rglplot. arrow.mode parameter can used specify       edges arrows drawn. parameter given       user (either three ways) specifies edges       forward, backward arrows, , arrows .       usual, parameter can vector scalar value.       can integer character type. integer 0       means arrows, 1 means backward arrows, 2 forward arrows       3 . character vector “<”       “<-” specify backward, “>” “->” forward       arrows “<>” “<->” stands arrows.       values mean arrows, perhaps use “-”       “--” specify arrows. Hint: parameter can used ‘cheap’ solution       drawing “mixed” graphs: graphs edges       directed . want , please create       directed graph, version 0.4 vertex pairs       edge lists can swapped undirected graphs. default, arrows drawn undirected graphs,        directed graphs, arrow drawn edge, according       direction. surprising, expected       behavior. loop.angle Gives angle radian plotting loop       edges. See label.dist vertex parameter see       interpreted. default value 0. loop.angle2 Gives second angle radian plotting       loop edges. used 3D, loop.angle enough       2D. default value 0. parameters: layout Either function numeric       matrix. specifies vertices placed plot. numeric matrix, matrix one line       vertex, specifying coordinates. matrix       least two columns, x y coordinates,       can also third column, z       coordinate 3D plots ignored 2D plots. two column matrix given 3D plotting function       rglplot third column assumed 1       vertex. layout function, function called       graph single parameter determine       actual coordinates. function return matrix two       three columns. 2D plots third column ignored. default value layout_nicely, smart function       chooses layouter based graph. margin amount empty space , , left       right plot, numeric vector length four. Usually       values 0 0.5 meaningful, negative values       also possible, make plot zoom part       graph. shorter four recycled. rglplot support parameter, can       zoom graph flexible way. default value 0. palette color palette use vertex color.       default categorical_pal,       color-blind friendly categorical palette. See manual page       details palettes. parameters supported       plot, tkplot rglplot. rescale Logical constant, whether rescale coordinates       [-1,1]x[-1,1](x[-1,1]) interval. parameter       implemented tkplot. Defaults TRUE, layout rescaled. asp numeric constant, gives asp parameter       plot, aspect ratio. Supply 0       want give aspect ratio. ignored tkplot       rglplot. Defaults 1. frame Boolean, whether plot frame around graph.       ignored tkplot rglplot. Defaults FALSE. main Overall title main plot. default empty       annotate.plot igraph option FALSE,       graph's name attribute otherwise. See argument       base plot function. supported plot. sub Subtitle main plot, default empty.       supported plot. xlab Title x axis, default empty       annotate.plot igraph option FALSE, number       vertices edges, TRUE. supported       plot. ylab Title y axis, default empty.       supported plot.","code":""},{"path":"/reference/plot.common.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drawing graphs — Drawing graphs","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":[]},{"path":"/reference/plot.common.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drawing graphs — Drawing graphs","text":"","code":"if (FALSE) {  # plotting a simple ring graph, all default parameters, except the layout g <- make_ring(10) g$layout <- layout_in_circle plot(g) tkplot(g) rglplot(g)  # plotting a random graph, set the parameters in the command arguments g <- barabasi.game(100) plot(g, layout=layout_with_fr, vertex.size=4,      vertex.label.dist=0.5, vertex.color=\"red\", edge.arrow.size=0.5)  # plot a random graph, different color for each component g <- sample_gnp(100, 1/100) comps <- components(g)$membership colbar <- rainbow(max(comps)+1) V(g)$color <- colbar[comps+1] plot(g, layout=layout_with_fr, vertex.size=5, vertex.label=NA)  # plot communities in a graph g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5) g <- add_edges(g, c(1,6, 1,11, 6,11)) com <- cluster_spinglass(g, spins=5) V(g)$color <- com$membership+1 g <- set_graph_attr(g, \"layout\", layout_with_kk(g)) plot(g, vertex.label.dist=1.5)  # draw a bunch of trees, fix layout igraph_options(plot.layout=layout_as_tree) plot(make_tree(20, 2)) plot(make_tree(50, 3), vertex.size=3, vertex.label=NA) tkplot(make_tree(50, 2, mode=\"undirected\"), vertex.size=10, vertex.color=\"green\") }"},{"path":"/reference/plot.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting of graphs — plot.igraph","title":"Plotting of graphs — plot.igraph","text":"plot.igraph() able plot graphs R device. non-interactive companion tkplot() function.","code":""},{"path":"/reference/plot.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting of graphs — plot.igraph","text":"","code":"# S3 method for igraph plot(   x,   axes = FALSE,   add = FALSE,   xlim = c(-1, 1),   ylim = c(-1, 1),   mark.groups = list(),   mark.shape = 1/2,   mark.col = rainbow(length(mark.groups), alpha = 0.3),   mark.border = rainbow(length(mark.groups), alpha = 1),   mark.expand = 15,   loop.size = 1,   ... )"},{"path":"/reference/plot.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting of graphs — plot.igraph","text":"x graph plot. axes Logical, whether plot axes, defaults FALSE. add Logical scalar, whether add plot current device, delete device's current contents first. xlim limits horizontal axis, unlikely want modify . ylim limits vertical axis, unlikely want modify . mark.groups list vertex id vectors. interpreted set vertex groups. vertex group highlighted, plotting colored smoothed polygon around “” . See arguments control look polygons. mark.shape numeric scalar vector. Controls smoothness vertex group marking polygons. basically ‘shape’ parameter graphics::xspline() function, possible values -1 1. vector, different value used different vertex groups. mark.col scalar vector giving colors marking polygons, format accepted graphics::xspline(); e.g. numeric color ids, symbolic color names, colors RGB. mark.border scalar vector giving colors borders vertex group marking polygons. NA, border drawn. mark.expand numeric scalar vector, size border around marked vertex groups. units vertex sizes. vector given, different values used different vertex groups. loop.size numeric scalar allows user scale loop edges network. default loop size 1. Larger values produce larger loops. ... Additional plotting parameters. See igraph.plotting complete list.","code":""},{"path":"/reference/plot.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting of graphs — plot.igraph","text":"Returns NULL, invisibly.","code":""},{"path":"/reference/plot.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting of graphs — plot.igraph","text":"One convenient way plot graphs plot tkplot() first, handtune placement vertices, query coordinates tk_coords() function use plot() plot graph R device.","code":""},{"path":[]},{"path":"/reference/plot.igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting of graphs — plot.igraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/plot.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting of graphs — plot.igraph","text":"","code":"g <- make_ring(10) plot(g, layout = layout_with_kk, vertex.color = \"green\") #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/plot.sir.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting the results on multiple SIR model runs — plot.sir","title":"Plotting the results on multiple SIR model runs — plot.sir","text":"function can conveniently plot results multiple SIR model simulations.","code":""},{"path":"/reference/plot.sir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting the results on multiple SIR model runs — plot.sir","text":"","code":"# S3 method for sir plot(   x,   comp = c(\"NI\", \"NS\", \"NR\"),   median = TRUE,   quantiles = c(0.1, 0.9),   color = NULL,   median_color = NULL,   quantile_color = NULL,   lwd.median = 2,   lwd.quantile = 2,   lty.quantile = 3,   xlim = NULL,   ylim = NULL,   xlab = \"Time\",   ylab = NULL,   ... )"},{"path":"/reference/plot.sir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting the results on multiple SIR model runs — plot.sir","text":"x output SIR simulation, coming sir() function. comp Character scalar, component plot. Either ‘NI’ (infected, default), ‘NS’ (susceptible) ‘NR’ (recovered). median Logical scalar, whether plot (binned) median. quantiles vector (binned) quantiles plot. color Color individual simulation curves. median_color Color median curve. quantile_color Color(s) quantile curves. (recycled needed non-needed entries ignored long.) lwd.median Line width median. lwd.quantile Line width quantile curves. lty.quantile Line type quantile curves. xlim x limits, two-element numeric vector. NULL, calculated data. ylim y limits, two-element numeric vector. NULL, calculated data. xlab x label. ylab y label. NULL automatically added based comp argument. ... Additional arguments passed plot(), run curves added, create figure.","code":""},{"path":"/reference/plot.sir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting the results on multiple SIR model runs — plot.sir","text":"Nothing.","code":""},{"path":"/reference/plot.sir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting the results on multiple SIR model runs — plot.sir","text":"number susceptible/infected/recovered individuals plotted time, multiple simulations.","code":""},{"path":"/reference/plot.sir.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plotting the results on multiple SIR model runs — plot.sir","text":"Bailey, Norman T. J. (1975). mathematical theory infectious diseases applications (2nd ed.). London: Griffin.","code":""},{"path":[]},{"path":"/reference/plot.sir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting the results on multiple SIR model runs — plot.sir","text":"Eric Kolaczyk (http://math.bu.edu/people/kolaczyk/) Gabor Csardi csardi.gabor@gmail.com.","code":""},{"path":"/reference/plot.sir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting the results on multiple SIR model runs — plot.sir","text":"","code":"g <- sample_gnm(100, 100) sm <- sir(g, beta = 5, gamma = 1) plot(sm)"},{"path":"/reference/plot_dendrogram.communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Community structure dendrogram plots — plot_dendrogram","title":"Community structure dendrogram plots — plot_dendrogram","text":"Plot hierarchical community structure dendrogram.","code":""},{"path":"/reference/plot_dendrogram.communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Community structure dendrogram plots — plot_dendrogram","text":"","code":"plot_dendrogram(x, mode = igraph_opt(\"dend.plot.type\"), ...)  # S3 method for communities plot_dendrogram(   x,   mode = igraph_opt(\"dend.plot.type\"),   ...,   use.modularity = FALSE,   palette = categorical_pal(8) )"},{"path":"/reference/plot_dendrogram.communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Community structure dendrogram plots — plot_dendrogram","text":"x object containing community structure graph. See communities() details. mode dendrogram plotting function use. See details . ... Additional arguments supply dendrogram plotting function. use.modularity Logical scalar, whether use modularity values define height branches. palette color palette use colored plots.","code":""},{"path":"/reference/plot_dendrogram.communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Community structure dendrogram plots — plot_dendrogram","text":"Returns whatever return value plotting function, plot.phylo, plot.dendrogram plot.hclust.","code":""},{"path":"/reference/plot_dendrogram.communities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Community structure dendrogram plots — plot_dendrogram","text":"plot_dendrogram() supports three different plotting functions, selected via mode argument. default plotting function taken dend.plot.type igraph option, possible values: auto Choose automatically plotting functions. plot.phylo sophisticated, choosen, whenever ape package available. Otherwise plot.hclust used. phylo Use plot.phylo ape package. hclust Use plot.hclust stats package. dendrogram Use plot.dendrogram stats package. different plotting functions take different sets arguments. using plot.phylo (mode=\"phylo\"), following syntax: extra arguments documented : colbar Color bar edges. edge.color Edge colors. NULL, colbar argument used. use.edge.length Passed plot.phylo. dots Attitional arguments pass plot.phylo. syntax plot.hclust (mode=\"hclust\"): extra arguments documented : rect numeric scalar, number groups mark dendrogram. dendrogram cut exactly rect groups marked via rect.hclust command. Set zero want mark groups. colbar colors rectangles mark vertex groups via rect argument. hang put leaf nodes, corresponds hang argument plot.hclust. ann  Whether annotate plot, ann argument plot.hclust. main main title plot, main argument plot.hclust. sub sub-title plot, sub argument plot.hclust. xlab label horizontal axis, passed plot.hclust. ylab label vertical axis, passed plot.hclust. dots Attitional arguments pass plot.hclust. syntax plot.dendrogram (mode=\"dendrogram\"): extra arguments simply passed .dendrogram().","code":"plot_dendrogram(x, mode=\"phylo\", colbar = palette(),             edge.color = NULL, use.edge.length = FALSE, \\dots) plot_dendrogram(x, mode=\"hclust\", rect = 0, colbar = palette(),             hang = 0.01, ann = FALSE, main = \"\", sub = \"\", xlab = \"\",             ylab = \"\", \\dots) plot_dendrogram(x, \\dots)"},{"path":[]},{"path":"/reference/plot_dendrogram.communities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Community structure dendrogram plots — plot_dendrogram","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/plot_dendrogram.communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Community structure dendrogram plots — plot_dendrogram","text":"","code":"karate <- make_graph(\"Zachary\") fc <- cluster_fast_greedy(karate) plot_dendrogram(fc)"},{"path":"/reference/plot_dendrogram.igraphHRG.html","id":null,"dir":"Reference","previous_headings":"","what":"HRG dendrogram plot — plot_dendrogram.igraphHRG","title":"HRG dendrogram plot — plot_dendrogram.igraphHRG","text":"Plot hierarchical random graph dendrogram.","code":""},{"path":"/reference/plot_dendrogram.igraphHRG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HRG dendrogram plot — plot_dendrogram.igraphHRG","text":"","code":"# S3 method for igraphHRG plot_dendrogram(x, mode = igraph_opt(\"dend.plot.type\"), ...)"},{"path":"/reference/plot_dendrogram.igraphHRG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HRG dendrogram plot — plot_dendrogram.igraphHRG","text":"x igraphHRG, hierarchical random graph, returned fit_hrg() function. mode dendrogram plotting function use. See details . ... Additional arguments supply dendrogram plotting function.","code":""},{"path":"/reference/plot_dendrogram.igraphHRG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HRG dendrogram plot — plot_dendrogram.igraphHRG","text":"Returns whatever return value plotting function, plot.phylo, plot.dendrogram plot.hclust.","code":""},{"path":"/reference/plot_dendrogram.igraphHRG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HRG dendrogram plot — plot_dendrogram.igraphHRG","text":"plot_dendrogram() supports three different plotting functions, selected via mode argument. default plotting function taken dend.plot.type igraph option, possible values: auto Choose automatically plotting functions. plot.phylo sophisticated, choosen, whenever ape package available. Otherwise plot.hclust used. phylo Use plot.phylo ape package. hclust Use plot.hclust stats package. dendrogram Use plot.dendrogram stats package. different plotting functions take different sets arguments. using plot.phylo (mode=\"phylo\"), following syntax: extra arguments documented : colbar Color bar edges. edge.color Edge colors. NULL, colbar argument used. use.edge.length Passed plot.phylo. dots Attitional arguments pass plot.phylo. syntax plot.hclust (mode=\"hclust\"): extra arguments documented : rect numeric scalar, number groups mark dendrogram. dendrogram cut exactly rect groups marked via rect.hclust command. Set zero want mark groups. colbar colors rectangles mark vertex groups via rect argument. hang put leaf nodes, corresponds hang argument plot.hclust. ann Whether annotate plot, ann argument plot.hclust. main main title plot, main argument plot.hclust. sub sub-title plot, sub argument plot.hclust. xlab label horizontal axis, passed plot.hclust. ylab label vertical axis, passed plot.hclust. dots Attitional arguments pass plot.hclust. syntax plot.dendrogram (mode=\"dendrogram\"): extra arguments simply passed .dendrogram().","code":"plot_dendrogram(x, mode=\"phylo\", colbar = rainbow(11, start=0.7,             end=0.1), edge.color = NULL, use.edge.length = FALSE, \\dots) plot_dendrogram(x, mode=\"hclust\", rect = 0, colbar = rainbow(rect),             hang = 0.01, ann = FALSE, main = \"\", sub = \"\", xlab = \"\",             ylab = \"\", \\dots) plot_dendrogram(x, \\dots)"},{"path":"/reference/plot_dendrogram.igraphHRG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"HRG dendrogram plot — plot_dendrogram.igraphHRG","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/plot_dendrogram.igraphHRG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HRG dendrogram plot — plot_dendrogram.igraphHRG","text":"","code":"g <- make_full_graph(5) + make_full_graph(5) hrg <- fit_hrg(g) plot_dendrogram(hrg)"},{"path":"/reference/plus-.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add vertices, edges or another graph to a graph — +.igraph","title":"Add vertices, edges or another graph to a graph — +.igraph","text":"Add vertices, edges another graph graph","code":""},{"path":"/reference/plus-.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add vertices, edges or another graph to a graph — +.igraph","text":"","code":"# S3 method for igraph +(e1, e2)"},{"path":"/reference/plus-.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add vertices, edges or another graph to a graph — +.igraph","text":"e1 First argument, probably igraph graph, see details . e2 Second argument, see details .","code":""},{"path":"/reference/plus-.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add vertices, edges or another graph to a graph — +.igraph","text":"plus operator can used add vertices edges graph. actual operation performed depends type right hand side argument. another igraph graph object named graphs, union two graphs calculated, see union(). another igraph graph object, either two named, disjoint union two graphs calculated, see disjoint_union(). numeric scalar, specified number vertices added graph. character scalar vector, interpreted names vertices add graph. object created vertex() vertices() function, new vertices added graph. form appropriate one wants add vertex attributes well. operands vertices() function specifies number vertices add attributes well. unnamed arguments vertices() concatenated used ‘name’ vertex attribute (.e. vertex names), named arguments added additional vertex attributes. Examples: vertex() just alias vertices(), provided readability. user use single vertex added graph. object created edge() edges() function, new edges added graph. new edges possibly attributes can specified arguments edges() function. unnamed arguments edges() concatenated used vertex ids end points new edges. named arguments added edge attributes. Examples: See examples . edge() just alias edges() provided readability. user use single edge added graph. object created path() function, new edges form path added. edges possibly attributes specified arguments path() function. non-named arguments concatenated interpreted vertex ids along path. remaining arguments added edge attributes. Examples: important note , although plus operator commutative, .e. possible write associative, e.g. results syntax error, unless parentheses used: clarity, suggest always put graph object left hand side operator:","code":"g <- g +         vertex(shape=\"circle\", color= \"red\")   g <- g + vertex(\"foo\", color=\"blue\")   g <- g + vertex(\"bar\", \"foobar\")   g <- g + vertices(\"bar2\", \"foobar2\", color=1:2, shape=\"rectangle\") g <- make_empty_graph() +          vertices(letters[1:10]) +          vertices(\"foo\", \"bar\", \"bar2\", \"foobar2\")   g <- g + edge(\"a\", \"b\")   g <- g + edges(\"foo\", \"bar\", \"bar2\", \"foobar2\")   g <- g + edges(c(\"bar\", \"foo\", \"foobar2\", \"bar2\"), color=\"red\", weight=1:2) g <- make_empty_graph() + vertices(letters[1:10])   g <- g + path(\"a\", \"b\", \"c\", \"d\")   g <- g + path(\"e\", \"f\", \"g\", weight=1:2, color=\"red\")   g <- g + path(c(\"f\", \"c\", \"j\", \"d\"), width=1:3, color=\"green\") graph <- \"foo\" + make_empty_graph() graph <- \"foo\" + \"bar\" + make_empty_graph() graph <- \"foo\" + ( \"bar\" + make_empty_graph() ) graph <- make_empty_graph() + \"foo\" + \"bar\""},{"path":[]},{"path":"/reference/plus-.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add vertices, edges or another graph to a graph — +.igraph","text":"","code":"# 10 vertices named a,b,c,... and no edges g <- make_empty_graph() + vertices(letters[1:10])  # Add edges to make it a ring g <- g + path(letters[1:10], letters[1], color = \"grey\")  # Add some extra random edges g <- g + edges(sample(V(g), 10, replace = TRUE), color = \"red\") g$layout <- layout_in_circle plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/power_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"power_centrality() takes graph (dat) returns Boncich power centralities positions (selected nodes).  decay rate power contributions specified exponent (1 default).","code":""},{"path":"/reference/power_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"","code":"power_centrality(   graph,   nodes = V(graph),   loops = FALSE,   exponent = 1,   rescale = FALSE,   tol = 1e-07,   sparse = TRUE )"},{"path":"/reference/power_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"graph input graph. nodes vertex sequence indicating vertices included calculation.  default, vertices included. loops boolean indicating whether diagonal treated valid data.  Set true data can contain loops.  loops FALSE default. exponent exponent (decay rate) Bonacich power centrality score; can negative rescale true, centrality scores rescaled sum 1. tol tolerance near-singularities matrix inversion (see solve()) sparse Logical scalar, whether use sparse matrices calculation. ‘Matrix’ package required sparse matrix support","code":""},{"path":"/reference/power_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"vector, containing centrality scores.","code":""},{"path":"/reference/power_centrality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"Bonacich's power centrality measure defined \\(C_{BP}\\left(\\alpha,\\beta\\right)=\\alpha\\left(\\mathbf{}-\\beta\\mathbf{}\\right)^{-1}\\mathbf{}\\mathbf{1}\\), \\(\\beta\\) attenuation parameter (set exponent) \\(\\mathbf{}\\) graph adjacency matrix.  (coefficient \\(\\alpha\\) acts scaling parameter, set (following Bonacich (1987)) sum squared scores equal number vertices.  allows 1 used reference value ``middle'' centrality range.)  \\(\\beta \\rightarrow \\)\\( 1/\\lambda_{\\mathbf{}1}\\) (reciprocal largest eigenvalue \\(\\mathbf{}\\)), within constant multiple familiar eigenvector centrality score; values \\(\\beta\\), behavior measure quite different.  particular, \\(\\beta\\) gives positive negative weight even odd walks, respectively, can seen series expansion \\(C_{BP}\\left(\\alpha,\\beta\\right)=\\alpha \\sum_{k=0}^\\infty \\beta^k \\)\\( \\mathbf{}^{k+1} \\mathbf{1}\\) converges long \\(|\\beta| \\)\\( < 1/\\lambda_{\\mathbf{}1}\\). magnitude \\(\\beta\\) controls influence distant actors ego's centrality score, larger magnitudes indicating slower rates decay.  (High rates, hence, imply greater sensitivity edge effects.) Interpretively, Bonacich power measure corresponds notion power vertex recursively defined sum power alters.  nature recursion involved controlled power exponent: positive values imply vertices become powerful alters become powerful (occurs cooperative relations), negative values imply vertices become powerful alters become weaker (occurs competitive antagonistic relations).  magnitude exponent indicates tendency effect decay across long walks; higher magnitudes imply slower decay. One interesting feature measure relative instability changes exponent magnitude (particularly negative case).  theory motivates use measure, careful choose decay parameter non-ad hoc basis.","code":""},{"path":"/reference/power_centrality.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"function ported (ie. copied) SNA package.","code":""},{"path":"/reference/power_centrality.html","id":"warning-","dir":"Reference","previous_headings":"","what":"Warning","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"Singular adjacency matrices cause end headaches algorithm; thus, routine may fail certain cases.  fixed get better algorithm.  power_centrality() symmetrize data extracting eigenvectors; send routine asymmetric matrices unless really mean .","code":""},{"path":"/reference/power_centrality.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"Bonacich, P.  (1972).  ``Factoring Weighting Approaches Status Scores Clique Identification.'' Journal Mathematical Sociology, 2, 113-120. Bonacich, P.  (1987).  ``Power Centrality: Family Measures.'' American Journal Sociology, 92, 1170-1182.","code":""},{"path":[]},{"path":"/reference/power_centrality.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"Carter T. Butts (http://www.faculty.uci.edu/profile.cfm?faculty_id=5057), ported igraph Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/power_centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Bonacich Power Centrality Scores of Network Positions — power_centrality","text":"","code":"# Generate some test data from Bonacich, 1987: g.c <- graph(c(1, 2, 1, 3, 2, 4, 3, 5), dir = FALSE) g.d <- graph(c(1, 2, 1, 3, 1, 4, 2, 5, 3, 6, 4, 7), dir = FALSE) g.e <- graph(c(1, 2, 1, 3, 1, 4, 2, 5, 2, 6, 3, 7, 3, 8, 4, 9, 4, 10), dir = FALSE) g.f <- graph(   c(1, 2, 1, 3, 1, 4, 2, 5, 2, 6, 2, 7, 3, 8, 3, 9, 3, 10, 4, 11, 4, 12, 4, 13),   dir = FALSE ) # Compute power centrality scores for (e in seq(-0.5, .5, by = 0.1)) {   print(round(power_centrality(g.c, exp = e)[c(1, 2, 4)], 2)) } #> [1] 0.00 1.58 0.00 #> [1] 0.73 1.45 0.36 #> [1] 0.97 1.34 0.49 #> [1] 1.09 1.27 0.54 #> [1] 1.15 1.23 0.58 #> [1] 1.2 1.2 0.6 #> [1] 1.22 1.17 0.61 #> [1] 1.25 1.16 0.62 #> [1] 1.26 1.14 0.63 #> [1] 1.27 1.13 0.64 #> [1] 1.28 1.12 0.64  for (e in seq(-0.4, .4, by = 0.1)) {   print(round(power_centrality(g.d, exp = e)[c(1, 2, 5)], 2)) } #> [1] 1.62 1.08 0.54 #> [1] 1.62 1.08 0.54 #> [1] 1.62 1.08 0.54 #> [1] 1.62 1.08 0.54 #> [1] 1.62 1.08 0.54 #> [1] 1.62 1.08 0.54 #> [1] 1.62 1.08 0.54 #> [1] 1.62 1.08 0.54 #> [1] 1.62 1.08 0.54  for (e in seq(-0.4, .4, by = 0.1)) {   print(round(power_centrality(g.e, exp = e)[c(1, 2, 5)], 2)) } #> [1] -1.00  1.67 -0.33 #> [1] 0.36 1.81 0.12 #> [1] 1.00 1.67 0.33 #> [1] 1.30 1.55 0.43 #> [1] 1.46 1.46 0.49 #> [1] 1.57 1.40 0.52 #> [1] 1.63 1.36 0.54 #> [1] 1.68 1.33 0.56 #> [1] 1.72 1.30 0.57  for (e in seq(-0.4, .4, by = 0.1)) {   print(round(power_centrality(g.f, exp = e)[c(1, 2, 5)], 2)) } #> [1] -1.72  1.53 -0.57 #> [1] -0.55  2.03 -0.18 #> [1] 0.44 2.05 0.15 #> [1] 1.01 1.91 0.34 #> [1] 1.33 1.78 0.44 #> [1] 1.52 1.67 0.51 #> [1] 1.65 1.59 0.55 #> [1] 1.74 1.53 0.58 #> [1] 1.80 1.48 0.60"},{"path":"/reference/predict_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict edges based on a hierarchical random graph model — predict_edges","title":"Predict edges based on a hierarchical random graph model — predict_edges","text":"predict_edges() uses hierarchical random graph model predict missing edges network. done sampling hierarchical models around optimum model, proportionally likelihood. MCMC sampling stated hrg(), given start argument set TRUE. Otherwise HRG fitted graph first.","code":""},{"path":"/reference/predict_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict edges based on a hierarchical random graph model — predict_edges","text":"","code":"predict_edges(   graph,   hrg = NULL,   start = FALSE,   num.samples = 10000,   num.bins = 25 )"},{"path":"/reference/predict_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict edges based on a hierarchical random graph model — predict_edges","text":"graph graph fit model . Edge directions ignored directed graphs. hrg hierarchical random graph model, form igraphHRG object. predict_edges() allow NULL well, HRG fitted graph first, random starting point. start Logical, whether start fitting/sampling supplied igraphHRG object, random starting point. num.samples Number samples use consensus generation missing edge prediction. num.bins Number bins edge probabilities. Give higher number accurate prediction.","code":""},{"path":"/reference/predict_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict edges based on a hierarchical random graph model — predict_edges","text":"list entries: edges predicted edges, two-column matrix vertex ids. prob Probabilities edges, according fitted model. hrg (supplied fitted) hierarchical random graph model.","code":""},{"path":"/reference/predict_edges.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict edges based on a hierarchical random graph model — predict_edges","text":". Clauset, C. Moore, M.E.J. Newman. Hierarchical structure prediction missing links networks. Nature 453, 98--101 (2008); . Clauset, C. Moore, M.E.J. Newman. Structural Inference Hierarchies Networks. E. M. Airoldi et al. (Eds.): ICML 2006 Ws, Lecture Notes Computer Science 4503, 1--13. Springer-Verlag, Berlin Heidelberg (2007).","code":""},{"path":[]},{"path":"/reference/predict_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict edges based on a hierarchical random graph model — predict_edges","text":"","code":"## We are not running these examples any more, because they ## take a long time (~15 seconds) to run and this is against the CRAN ## repository policy. Copy and paste them by hand to your R prompt if ## you want to run them.  ## A graph with two dense groups g <- sample_gnp(10, p = 1 / 2) + sample_gnp(10, p = 1 / 2) hrg <- fit_hrg(g) hrg #> Hierarchical random graph, at level 3: #> g1        p=   0   #> '- g12    p=0.33   #>    '- g8  p=   0  10 1  9  #>    '- g10 p=   1  7  5  2  6  8  3  4  #> '- g16    p=0.33  14 #>    '- g9  p=0.62  20 12 19 13 11 17 16 15 18  ## The consensus tree for it consensus_tree(g, hrg = hrg, start = TRUE) #> $parents #>  [1] 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 22 22 -1 #>  #> $weights #> [1]  8745  9265 10000 #>  #> $hrg #> $hrg$left #>  [1] -12  14   1  10  -2   2  -6 -11 -13 -17   0  -8 -19 -18  -3  -9 -15  -4 -14 #>  #> $hrg$right #>  [1] -16  15   4  -5  16   7   5   8  17   3   9 -10  19  18   6  13  -7  12  11 #>  #> $hrg$prob #>  [1] 0.0000000 0.0000000 1.0000000 0.3333333 1.0000000 1.0000000 1.0000000 #>  [8] 0.0000000 0.6250000 1.0000000 0.0000000 0.3333333 0.2857143 0.2000000 #> [15] 1.0000000 0.3333333 0.1111111 1.0000000 0.0000000 #>  #> $hrg$edges #>  [1] 0 0 1 1 2 1 2 0 5 6 0 7 2 1 2 3 1 4 0 #>  #> $hrg$vertices #>  [1] 20  2  2  4  3  2  3  3  9  7  2 10  8  6  3 10  6  5  7 #>  #>   ## Prediction of missing edges g2 <- make_full_graph(4) + (make_full_graph(4) - path(1, 2)) predict_edges(g2) #> $edges #>       [,1] [,2] #>  [1,]    5    6 #>  [2,]    3    5 #>  [3,]    4    5 #>  [4,]    1    5 #>  [5,]    2    5 #>  [6,]    1    6 #>  [7,]    4    6 #>  [8,]    2    6 #>  [9,]    3    6 #> [10,]    1    8 #> [11,]    1    7 #> [12,]    4    8 #> [13,]    3    8 #> [14,]    4    7 #> [15,]    2    8 #> [16,]    2    7 #> [17,]    3    7 #>  #> $prob #>  [1] 0.281428232 0.004787845 0.004786124 0.004756539 0.004395417 0.003968538 #>  [7] 0.003961298 0.003762168 0.003717207 0.003109233 0.002960752 0.002922188 #> [13] 0.002893477 0.002876624 0.002860092 0.002714630 0.002700124 #>  #> $hrg #> Hierarchical random graph, at level 3: #> g1        p=0.13   #> '- g6     p=   0  5 #>    '- g4  p=   1  1 3 4 2 #> '- g3     p=   1  6 #>    '- g2  p=   1  7 8 #>"},{"path":"/reference/print.igraph.es.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an edge sequence to the screen — print.igraph.es","title":"Print an edge sequence to the screen — print.igraph.es","text":"long edge sequences, printing truncated fit screen. Use print() explicitly codefull argument see full sequence.","code":""},{"path":"/reference/print.igraph.es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an edge sequence to the screen — print.igraph.es","text":"","code":"# S3 method for igraph.es print(x, full = igraph_opt(\"print.full\"), id = igraph_opt(\"print.id\"), ...)"},{"path":"/reference/print.igraph.es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an edge sequence to the screen — print.igraph.es","text":"x edge sequence. full Whether show full sequence, truncate output screen size. id Whether print graph ID. ... Currently ignored.","code":""},{"path":"/reference/print.igraph.es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an edge sequence to the screen — print.igraph.es","text":"edge sequence, invisibly.","code":""},{"path":"/reference/print.igraph.es.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an edge sequence to the screen — print.igraph.es","text":"Edge sequences created double bracket operator printed differently, together attributes edges sequence, table.","code":""},{"path":[]},{"path":"/reference/print.igraph.es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an edge sequence to the screen — print.igraph.es","text":"","code":"# Unnamed graphs g <- make_ring(10) E(g) #> + 10/10 edges from fad31d0: #>  [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10  # Named graphs g2 <- make_ring(10) %>%   set_vertex_attr(\"name\", value = LETTERS[1:10]) E(g2) #> + 10/10 edges from b7475fe (vertex names): #>  [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J  # All edges in a long sequence g3 <- make_ring(200) E(g3) #> + 200/200 edges from 349c900: #>  [1]  1-- 2  2-- 3  3-- 4  4-- 5  5-- 6  6-- 7  7-- 8  8-- 9  9--10 10--11 #> [11] 11--12 12--13 13--14 14--15 15--16 16--17 17--18 18--19 19--20 20--21 #> [21] 21--22 22--23 23--24 24--25 25--26 26--27 27--28 28--29 29--30 30--31 #> [31] 31--32 32--33 33--34 34--35 35--36 36--37 37--38 38--39 39--40 40--41 #> [41] 41--42 42--43 43--44 44--45 45--46 46--47 47--48 48--49 49--50 50--51 #> [51] 51--52 52--53 53--54 54--55 55--56 56--57 57--58 58--59 59--60 60--61 #> [61] 61--62 62--63 63--64 64--65 65--66 66--67 67--68 68--69 69--70 70--71 #> [71] 71--72 72--73 73--74 74--75 75--76 76--77 77--78 78--79 79--80 80--81 #> [81] 81--82 82--83 83--84 84--85 85--86 86--87 87--88 88--89 89--90 90--91 #> [91] 91--92 92--93 93--94 94--95 95--96 96--97 97--98 98--99 #> + ... omitted several edges E(g3) %>% print(full = TRUE) #> + 200/200 edges from 349c900: #>   [1]   1--  2   2--  3   3--  4   4--  5   5--  6   6--  7   7--  8   8--  9 #>   [9]   9-- 10  10-- 11  11-- 12  12-- 13  13-- 14  14-- 15  15-- 16  16-- 17 #>  [17]  17-- 18  18-- 19  19-- 20  20-- 21  21-- 22  22-- 23  23-- 24  24-- 25 #>  [25]  25-- 26  26-- 27  27-- 28  28-- 29  29-- 30  30-- 31  31-- 32  32-- 33 #>  [33]  33-- 34  34-- 35  35-- 36  36-- 37  37-- 38  38-- 39  39-- 40  40-- 41 #>  [41]  41-- 42  42-- 43  43-- 44  44-- 45  45-- 46  46-- 47  47-- 48  48-- 49 #>  [49]  49-- 50  50-- 51  51-- 52  52-- 53  53-- 54  54-- 55  55-- 56  56-- 57 #>  [57]  57-- 58  58-- 59  59-- 60  60-- 61  61-- 62  62-- 63  63-- 64  64-- 65 #>  [65]  65-- 66  66-- 67  67-- 68  68-- 69  69-- 70  70-- 71  71-- 72  72-- 73 #>  [73]  73-- 74  74-- 75  75-- 76  76-- 77  77-- 78  78-- 79  79-- 80  80-- 81 #>  [81]  81-- 82  82-- 83  83-- 84  84-- 85  85-- 86  86-- 87  87-- 88  88-- 89 #>  [89]  89-- 90  90-- 91  91-- 92  92-- 93  93-- 94  94-- 95  95-- 96  96-- 97 #>  [97]  97-- 98  98-- 99  99--100 100--101 101--102 102--103 103--104 104--105 #> [105] 105--106 106--107 107--108 108--109 109--110 110--111 111--112 112--113 #> [113] 113--114 114--115 115--116 116--117 117--118 118--119 119--120 120--121 #> [121] 121--122 122--123 123--124 124--125 125--126 126--127 127--128 128--129 #> [129] 129--130 130--131 131--132 132--133 133--134 134--135 135--136 136--137 #> [137] 137--138 138--139 139--140 140--141 141--142 142--143 143--144 144--145 #> [145] 145--146 146--147 147--148 148--149 149--150 150--151 151--152 152--153 #> [153] 153--154 154--155 155--156 156--157 157--158 158--159 159--160 160--161 #> [161] 161--162 162--163 163--164 164--165 165--166 166--167 167--168 168--169 #> [169] 169--170 170--171 171--172 172--173 173--174 174--175 175--176 176--177 #> [177] 177--178 178--179 179--180 180--181 181--182 182--183 183--184 184--185 #> [185] 185--186 186--187 187--188 188--189 189--190 190--191 191--192 192--193 #> [193] 193--194 194--195 195--196 196--197 197--198 198--199 199--200   1--200  # Metadata g4 <- make_ring(10) %>%   set_vertex_attr(\"name\", value = LETTERS[1:10]) %>%   set_edge_attr(\"weight\", value = 1:10) %>%   set_edge_attr(\"color\", value = \"green\") E(g4) #> + 10/10 edges from 1620de0 (vertex names): #>  [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J E(g4)[[]] #> + 10/10 edges from 1620de0 (vertex names): #>    tail head tid hid weight color #> 1     A    B   1   2      1 green #> 2     B    C   2   3      2 green #> 3     C    D   3   4      3 green #> 4     D    E   4   5      4 green #> 5     E    F   5   6      5 green #> 6     F    G   6   7      6 green #> 7     G    H   7   8      7 green #> 8     H    I   8   9      8 green #> 9     I    J   9  10      9 green #> 10    A    J   1  10     10 green E(g4)[[1:5]] #> + 5/10 edges from 1620de0 (vertex names): #>   tail head tid hid weight color #> 1    A    B   1   2      1 green #> 2    B    C   2   3      2 green #> 3    C    D   3   4      3 green #> 4    D    E   4   5      4 green #> 5    E    F   5   6      5 green"},{"path":"/reference/print.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Print graphs to the terminal — print.igraph","title":"Print graphs to the terminal — print.igraph","text":"functions attempt print graph terminal human readable form.","code":""},{"path":"/reference/print.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print graphs to the terminal — print.igraph","text":"","code":"# S3 method for igraph print(   x,   full = igraph_opt(\"print.full\"),   graph.attributes = igraph_opt(\"print.graph.attributes\"),   vertex.attributes = igraph_opt(\"print.vertex.attributes\"),   edge.attributes = igraph_opt(\"print.edge.attributes\"),   names = TRUE,   max.lines = igraph_opt(\"auto.print.lines\"),   id = igraph_opt(\"print.id\"),   ... )  # S3 method for igraph summary(object, ...)"},{"path":"/reference/print.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print graphs to the terminal — print.igraph","text":"x graph print. full Logical scalar, whether print graph structure well. graph.attributes Logical constant, whether print graph attributes. vertex.attributes Logical constant, whether print vertex attributes. edge.attributes Logical constant, whether print edge attributes. names Logical constant, whether print symbolic vertex names (ie. name vertex attribute) vertex ids. max.lines maximum number lines use. rest output truncated. id Whether print graph ID. ... Additional agruments. object graph summary printed.","code":""},{"path":"/reference/print.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print graphs to the terminal — print.igraph","text":"functions return graph invisibly.","code":""},{"path":"/reference/print.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print graphs to the terminal — print.igraph","text":"summary.igraph prints number vertices, edges whether graph directed. print_all() prints information, also lists edges, optionally graph, vertex /edge attributes. print.igraph() behaves either summary.igraph print_all() depending full argument. See also ‘print.full’ igraph option igraph_opt(). graph summary printed summary.igraph (print.igraph() print_all()) consists one lines. first line contains basic properties graph, rest contains attributes. example, small star graph weighted directed edges named vertices: first line always starts IGRAPH, showing object igraph graph. seven character code printed, first seven characters unique id graph. See graph_id() . four letter long code string printed. first letter distinguishes directed (‘D’) undirected (‘U’) graphs. second letter ‘N’ named graphs, .e. graphs name vertex attribute set. third letter ‘W’ weighted graphs, .e. graphs weight edge attribute set. fourth letter ‘B’ bipartite graphs, .e. graphs type vertex attribute set. , two dashes, name graph printed, one, .e. name graph attribute set. second line, attributes graph listed, separated comma. attribute names, kind attribute -- graph (‘g’), vertex (‘v’) edge (‘e’) -- denoted, type attribute well, character (‘c’), numeric (‘n’), logical (‘l’), (‘x’). igraph 0.4 print_all() print.igraph() use max.print option, see base::options() details. igraph 1.1.1, str.igraph function defunct, use print_all().","code":"IGRAPH badcafe DNW- 10 9 -- In-star     + attr: name (g/c), mode (g/c), center (g/n), name (v/c),       weight (e/n)"},{"path":"/reference/print.igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print graphs to the terminal — print.igraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/print.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print graphs to the terminal — print.igraph","text":"","code":"g <- make_ring(10) g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbd82f78> #>  #> attr(,\"class\") #> [1] \"igraph\" summary(g) #> IGRAPH 3cf90b1 U--- 10 10 -- Ring graph #> + attr: name (g/c), mutual (g/l), circular (g/l)"},{"path":"/reference/print.igraph.vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a vertex sequence on the screen — print.igraph.vs","title":"Show a vertex sequence on the screen — print.igraph.vs","text":"long vertex sequences, printing truncated fit screen. Use print() explicitly full argument see full sequence.","code":""},{"path":"/reference/print.igraph.vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a vertex sequence on the screen — print.igraph.vs","text":"","code":"# S3 method for igraph.vs print(x, full = igraph_opt(\"print.full\"), id = igraph_opt(\"print.id\"), ...)"},{"path":"/reference/print.igraph.vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a vertex sequence on the screen — print.igraph.vs","text":"x vertex sequence. full Whether show full sequence, truncate output screen size. id Whether print graph ID. ... arguments currently ignored.","code":""},{"path":"/reference/print.igraph.vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a vertex sequence on the screen — print.igraph.vs","text":"vertex sequence, invisibly.","code":""},{"path":"/reference/print.igraph.vs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show a vertex sequence on the screen — print.igraph.vs","text":"Vertex sequence created double bracket operator printed differently, together attributes vertices sequence, table.","code":""},{"path":[]},{"path":"/reference/print.igraph.vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a vertex sequence on the screen — print.igraph.vs","text":"","code":"# Unnamed graphs g <- make_ring(10) V(g) #> + 10/10 vertices, from 558ba1c: #>  [1]  1  2  3  4  5  6  7  8  9 10  # Named graphs g2 <- make_ring(10) %>%   set_vertex_attr(\"name\", value = LETTERS[1:10]) V(g2) #> + 10/10 vertices, named, from ac62fb8: #>  [1] A B C D E F G H I J  # All vertices in the sequence g3 <- make_ring(1000) V(g3) #> + 1000/1000 vertices, from 5d6be4d: #>    [1]    1    2    3    4    5    6    7    8    9   10   11   12   13   14 #>   [15]   15   16   17   18   19   20   21   22   23   24   25   26   27   28 #>   [29]   29   30   31   32   33   34   35   36   37   38   39   40   41   42 #>   [43]   43   44   45   46   47   48   49   50   51   52   53   54   55   56 #>   [57]   57   58   59   60   61   62   63   64   65   66   67   68   69   70 #>   [71]   71   72   73   74   75   76   77   78   79   80   81   82   83   84 #>   [85]   85   86   87   88   89   90   91   92   93   94   95   96   97   98 #>   [99]   99  100  101  102  103  104  105  106  107  108  109  110  111  112 #>  [113]  113  114  115  116  117  118  119  120  121  122  123  124  125  126 #>  [127]  127  128  129  130  131  132  133  134  135  136  137  138  139  140 #> + ... omitted several vertices print(V(g3), full = TRUE) #> + 1000/1000 vertices, from 5d6be4d: #>    [1]    1    2    3    4    5    6    7    8    9   10   11   12   13   14 #>   [15]   15   16   17   18   19   20   21   22   23   24   25   26   27   28 #>   [29]   29   30   31   32   33   34   35   36   37   38   39   40   41   42 #>   [43]   43   44   45   46   47   48   49   50   51   52   53   54   55   56 #>   [57]   57   58   59   60   61   62   63   64   65   66   67   68   69   70 #>   [71]   71   72   73   74   75   76   77   78   79   80   81   82   83   84 #>   [85]   85   86   87   88   89   90   91   92   93   94   95   96   97   98 #>   [99]   99  100  101  102  103  104  105  106  107  108  109  110  111  112 #>  [113]  113  114  115  116  117  118  119  120  121  122  123  124  125  126 #>  [127]  127  128  129  130  131  132  133  134  135  136  137  138  139  140 #>  [141]  141  142  143  144  145  146  147  148  149  150  151  152  153  154 #>  [155]  155  156  157  158  159  160  161  162  163  164  165  166  167  168 #>  [169]  169  170  171  172  173  174  175  176  177  178  179  180  181  182 #>  [183]  183  184  185  186  187  188  189  190  191  192  193  194  195  196 #>  [197]  197  198  199  200  201  202  203  204  205  206  207  208  209  210 #>  [211]  211  212  213  214  215  216  217  218  219  220  221  222  223  224 #>  [225]  225  226  227  228  229  230  231  232  233  234  235  236  237  238 #>  [239]  239  240  241  242  243  244  245  246  247  248  249  250  251  252 #>  [253]  253  254  255  256  257  258  259  260  261  262  263  264  265  266 #>  [267]  267  268  269  270  271  272  273  274  275  276  277  278  279  280 #>  [281]  281  282  283  284  285  286  287  288  289  290  291  292  293  294 #>  [295]  295  296  297  298  299  300  301  302  303  304  305  306  307  308 #>  [309]  309  310  311  312  313  314  315  316  317  318  319  320  321  322 #>  [323]  323  324  325  326  327  328  329  330  331  332  333  334  335  336 #>  [337]  337  338  339  340  341  342  343  344  345  346  347  348  349  350 #>  [351]  351  352  353  354  355  356  357  358  359  360  361  362  363  364 #>  [365]  365  366  367  368  369  370  371  372  373  374  375  376  377  378 #>  [379]  379  380  381  382  383  384  385  386  387  388  389  390  391  392 #>  [393]  393  394  395  396  397  398  399  400  401  402  403  404  405  406 #>  [407]  407  408  409  410  411  412  413  414  415  416  417  418  419  420 #>  [421]  421  422  423  424  425  426  427  428  429  430  431  432  433  434 #>  [435]  435  436  437  438  439  440  441  442  443  444  445  446  447  448 #>  [449]  449  450  451  452  453  454  455  456  457  458  459  460  461  462 #>  [463]  463  464  465  466  467  468  469  470  471  472  473  474  475  476 #>  [477]  477  478  479  480  481  482  483  484  485  486  487  488  489  490 #>  [491]  491  492  493  494  495  496  497  498  499  500  501  502  503  504 #>  [505]  505  506  507  508  509  510  511  512  513  514  515  516  517  518 #>  [519]  519  520  521  522  523  524  525  526  527  528  529  530  531  532 #>  [533]  533  534  535  536  537  538  539  540  541  542  543  544  545  546 #>  [547]  547  548  549  550  551  552  553  554  555  556  557  558  559  560 #>  [561]  561  562  563  564  565  566  567  568  569  570  571  572  573  574 #>  [575]  575  576  577  578  579  580  581  582  583  584  585  586  587  588 #>  [589]  589  590  591  592  593  594  595  596  597  598  599  600  601  602 #>  [603]  603  604  605  606  607  608  609  610  611  612  613  614  615  616 #>  [617]  617  618  619  620  621  622  623  624  625  626  627  628  629  630 #>  [631]  631  632  633  634  635  636  637  638  639  640  641  642  643  644 #>  [645]  645  646  647  648  649  650  651  652  653  654  655  656  657  658 #>  [659]  659  660  661  662  663  664  665  666  667  668  669  670  671  672 #>  [673]  673  674  675  676  677  678  679  680  681  682  683  684  685  686 #>  [687]  687  688  689  690  691  692  693  694  695  696  697  698  699  700 #>  [701]  701  702  703  704  705  706  707  708  709  710  711  712  713  714 #>  [715]  715  716  717  718  719  720  721  722  723  724  725  726  727  728 #>  [729]  729  730  731  732  733  734  735  736  737  738  739  740  741  742 #>  [743]  743  744  745  746  747  748  749  750  751  752  753  754  755  756 #>  [757]  757  758  759  760  761  762  763  764  765  766  767  768  769  770 #>  [771]  771  772  773  774  775  776  777  778  779  780  781  782  783  784 #>  [785]  785  786  787  788  789  790  791  792  793  794  795  796  797  798 #>  [799]  799  800  801  802  803  804  805  806  807  808  809  810  811  812 #>  [813]  813  814  815  816  817  818  819  820  821  822  823  824  825  826 #>  [827]  827  828  829  830  831  832  833  834  835  836  837  838  839  840 #>  [841]  841  842  843  844  845  846  847  848  849  850  851  852  853  854 #>  [855]  855  856  857  858  859  860  861  862  863  864  865  866  867  868 #>  [869]  869  870  871  872  873  874  875  876  877  878  879  880  881  882 #>  [883]  883  884  885  886  887  888  889  890  891  892  893  894  895  896 #>  [897]  897  898  899  900  901  902  903  904  905  906  907  908  909  910 #>  [911]  911  912  913  914  915  916  917  918  919  920  921  922  923  924 #>  [925]  925  926  927  928  929  930  931  932  933  934  935  936  937  938 #>  [939]  939  940  941  942  943  944  945  946  947  948  949  950  951  952 #>  [953]  953  954  955  956  957  958  959  960  961  962  963  964  965  966 #>  [967]  967  968  969  970  971  972  973  974  975  976  977  978  979  980 #>  [981]  981  982  983  984  985  986  987  988  989  990  991  992  993  994 #>  [995]  995  996  997  998  999 1000  # Metadata g4 <- make_ring(10) %>%   set_vertex_attr(\"name\", value = LETTERS[1:10]) %>%   set_vertex_attr(\"color\", value = \"red\") V(g4)[[]] #> + 10/10 vertices, named, from 0948180: #>    name color #> 1     A   red #> 2     B   red #> 3     C   red #> 4     D   red #> 5     E   red #> 6     F   red #> 7     G   red #> 8     H   red #> 9     I   red #> 10    J   red V(g4)[[2:5, 7:8]] #> + 6/10 vertices, named, from 0948180: #>   name color #> 2    B   red #> 3    C   red #> 4    D   red #> 5    E   red #> 7    G   red #> 8    H   red"},{"path":"/reference/print.igraphHRG.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a hierarchical random graph model to the screen — print.igraphHRG","title":"Print a hierarchical random graph model to the screen — print.igraphHRG","text":"igraphHRG objects can printed screen two forms: tree list, depending type argument print function. default auto type used, selects tree small graphs simple (=list) bigger ones. tree format looks like : graph 20 vertices, top three levels fitted hierarchical random graph printed. root node HRG always vertex group #1 (‘g1’ printout). Vertex pairs left subtree g1 connect vertices right subtree probability zero, according fitted model. g1 two subgroups, g15 g8. g15 subgroup single vertex (vertex 1), another larger subgroup contains vertices 6, 3, etc. lower levels, etc. plain printing simpler faster produce, less visual: lists two subgroups internal node, many columns screen width allows.","code":"Hierarchical random graph, at level 3: g1        p=   0 '- g15    p=0.33  1    '- g13 p=0.88  6  3  9  4  2  10 7  5  8 '- g8     p= 0.5    '- g16 p= 0.2  20 14 17 19 11 15 16 13    '- g5  p=   0  12 18 Hierarchical random graph: g1  p=0.0 -> g12 g10   g2  p=1.0 -> 7 10      g3  p=1.0 -> g18 14 g4  p=1.0 -> g17 15    g5  p=0.4 -> g15 17    g6  p=0.0 -> 1 4 g7  p=1.0 -> 11 16     g8  p=0.1 -> g9 3      g9  p=0.3 -> g11 g16 g10 p=0.2 -> g4 g5     g11 p=1.0 -> g6 5      g12 p=0.8 -> g8 8 g13 p=0.0 -> g14 9     g14 p=1.0 -> 2 6       g15 p=0.2 -> g19 18 g16 p=1.0 -> g13 g2    g17 p=0.5 -> g7 13     g18 p=1.0 -> 12 19 g19 p=0.7 -> g3 20"},{"path":"/reference/print.igraphHRG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a hierarchical random graph model to the screen — print.igraphHRG","text":"","code":"# S3 method for igraphHRG print(x, type = c(\"auto\", \"tree\", \"plain\"), level = 3, ...)"},{"path":"/reference/print.igraphHRG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a hierarchical random graph model to the screen — print.igraphHRG","text":"x igraphHRG object print. type print dendrogram, see details . level number top levels print dendrogram. ... Additional arguments, used currently.","code":""},{"path":"/reference/print.igraphHRG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a hierarchical random graph model to the screen — print.igraphHRG","text":"hierarchical random graph model , invisibly.","code":""},{"path":[]},{"path":"/reference/print.igraphHRGConsensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a hierarchical random graph consensus tree to the screen — print.igraphHRGConsensus","title":"Print a hierarchical random graph consensus tree to the screen — print.igraphHRGConsensus","text":"Consensus dendrograms (igraphHRGConsensus objects) printed simply listing children internal node dendrogram: root dendrogram g3 (incoming edges), two subgroups, g1 g2.","code":"HRG consensus tree: g1 -> 11 12 13 14 15 16 17 18 19 20 g2 -> 1  2  3  4  5  6  7  8  9  10 g3 -> g1 g2"},{"path":"/reference/print.igraphHRGConsensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a hierarchical random graph consensus tree to the screen — print.igraphHRGConsensus","text":"","code":"# S3 method for igraphHRGConsensus print(x, ...)"},{"path":"/reference/print.igraphHRGConsensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a hierarchical random graph consensus tree to the screen — print.igraphHRGConsensus","text":"x igraphHRGConsensus object print. ... Ignored.","code":""},{"path":"/reference/print.igraphHRGConsensus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a hierarchical random graph consensus tree to the screen — print.igraphHRGConsensus","text":"input object, invisibly, allow method chaining.","code":""},{"path":[]},{"path":"/reference/printer_callback.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a printer callback function — printer_callback","title":"Create a printer callback function — printer_callback","text":"printer callback function function can performs actual printing. number subcommands, called printer package, form See examples .","code":"printer_callback(\"subcommand\", argument1, argument2, ...)"},{"path":"/reference/printer_callback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a printer callback function — printer_callback","text":"","code":"printer_callback(fun)"},{"path":"/reference/printer_callback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a printer callback function — printer_callback","text":"fun function use printer callback function.","code":""},{"path":"/reference/printer_callback.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a printer callback function — printer_callback","text":"subcommands: length length data print, number items, natural units. E.g. list objects, number objects. min_width TODO width Width one item, items printed. TODO print Argument: . actual printing, print items. done TODO","code":""},{"path":[]},{"path":"/reference/printr.html","id":null,"dir":"Reference","previous_headings":"","what":"Better printing of R packages — printr","title":"Better printing of R packages — printr","text":"package provides better printing R packages.","code":""},{"path":"/reference/r_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"The default R palette — r_pal","title":"The default R palette — r_pal","text":"default R palette, able reproduce colors older igraph versions. colors appropriate categories, attractive.","code":""},{"path":"/reference/r_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The default R palette — r_pal","text":"","code":"r_pal(n)"},{"path":"/reference/r_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The default R palette — r_pal","text":"n number colors use, maximum eight.","code":""},{"path":"/reference/r_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The default R palette — r_pal","text":"character vector color names.","code":""},{"path":[]},{"path":"/reference/radius.html","id":null,"dir":"Reference","previous_headings":"","what":"Radius of a graph — radius","title":"Radius of a graph — radius","text":"eccentricity vertex shortest path distance farthest node graph. smallest eccentricity graph called radius","code":""},{"path":"/reference/radius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radius of a graph — radius","text":"","code":"radius(graph, mode = c(\"all\", \"out\", \"in\", \"total\"))"},{"path":"/reference/radius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radius of a graph — radius","text":"graph input graph, can directed undirected. mode Character constant, gives whether shortest paths given vertices calculated directed graphs. shortest paths vertex, considered. , default, corresponding undirected graph used, edge directions ignored. argument ignored undirected graphs.","code":""},{"path":"/reference/radius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radius of a graph — radius","text":"numeric scalar, radius graph.","code":""},{"path":"/reference/radius.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Radius of a graph — radius","text":"eccentricity vertex calculated measuring shortest distance () vertex, () vertices graph, taking maximum. implementation ignores vertex pairs different components.  Isolate vertices eccentricity zero.","code":""},{"path":"/reference/radius.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Radius of a graph — radius","text":"Harary, F. Graph Theory. Reading, MA: Addison-Wesley, p. 35, 1994.","code":""},{"path":[]},{"path":"/reference/radius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radius of a graph — radius","text":"","code":"g <- make_star(10, mode = \"undirected\") eccentricity(g) #>  [1] 1 2 2 2 2 2 2 2 2 2 radius(g) #> [1] 1"},{"path":"/reference/random_walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Random walk on a graph — random_walk","title":"Random walk on a graph — random_walk","text":"random_walk() performs random walk graph returns vertices random walk passed . random_edge_walk() returns edges random walk passed .","code":""},{"path":"/reference/random_walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random walk on a graph — random_walk","text":"","code":"random_walk(   graph,   start,   steps,   mode = c(\"out\", \"in\", \"all\", \"total\"),   stuck = c(\"return\", \"error\") )  random_edge_walk(   graph,   start,   steps,   weights = NULL,   mode = c(\"out\", \"in\", \"all\", \"total\"),   stuck = c(\"return\", \"error\") )"},{"path":"/reference/random_walk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random walk on a graph — random_walk","text":"graph input graph, might undirected directed. start start vertex. steps number steps make. mode follow directed edges. \"\" steps along edge direction, \"\" opposite . \"\" ignores edge directions. argument ignored undirected graphs. stuck random walk gets stuck. \"return\" returns partial walk, \"error\" raises error. weights edge weights. Larger edge weights increase probability edge selected random walker. words, larger edge weights correspond stronger connections. ‘weight’ edge attribute used present. Supply ‘NA’ want ignore ‘weight’ edge attribute.","code":""},{"path":"/reference/random_walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random walk on a graph — random_walk","text":"random_walk(), vertex sequence containing vertices along walk. random_edge_walk(), edge sequence containing edges along walk.","code":""},{"path":"/reference/random_walk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random walk on a graph — random_walk","text":"random walk. given start vertex, take given number steps, choosing edge actual vertex uniformly randomly. Edge directions observed directed graphs (see mode argument well). Multiple loop edges also observed.","code":""},{"path":"/reference/random_walk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random walk on a graph — random_walk","text":"","code":"## Stationary distribution of a Markov chain g <- make_ring(10, directed = TRUE) %u%   make_star(11, center = 11) + edge(11, 1)  ec <- eigen_centrality(g, directed = TRUE)$vector pg <- page_rank(g, damping = 0.999)$vector w <- random_walk(g, start = 1, steps = 10000)  ## These are similar, but not exactly the same cor(table(w), ec) #> [1] 0.9625324  ## But these are (almost) the same cor(table(w), pg) #> [1] 0.9999692"},{"path":"/reference/read_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading foreign file formats — read_graph","title":"Reading foreign file formats — read_graph","text":"read_graph() function able read graphs various representations file, http connection. Various formats supported.","code":""},{"path":"/reference/read_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading foreign file formats — read_graph","text":"","code":"read_graph(   file,   format = c(\"edgelist\", \"pajek\", \"ncol\", \"lgl\", \"graphml\", \"dimacs\", \"graphdb\", \"gml\",     \"dl\"),   ... )"},{"path":"/reference/read_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading foreign file formats — read_graph","text":"file connection read . can local file, http ftp connection. can also character string file name URI. format Character constant giving file format. Right now edgelist, pajek, ncol, lgl, graphml, dimacs, graphdb, gml dl supported, default edgelist. igraph 0.4 argument case insensitive. ... Additional arguments, see .","code":""},{"path":"/reference/read_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reading foreign file formats — read_graph","text":"graph object.","code":""},{"path":"/reference/read_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reading foreign file formats — read_graph","text":"read_graph() function may additional arguments depending file format (format argument). See details separately file format, .","code":""},{"path":"/reference/read_graph.html","id":"edge-list-format","dir":"Reference","previous_headings":"","what":"Edge list format","title":"Reading foreign file formats — read_graph","text":"format simple text file numeric vertex ids defining edges. need newline characters edges, simple space also . Additional arguments: n number vertices graph. smaller equal largest integer file, ignored; safe set zero (default). directed Logical scalar, whether create directed graph. default value TRUE.","code":""},{"path":[]},{"path":"/reference/read_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reading foreign file formats — read_graph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/realize_degseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a graph from a given degree sequence, deterministically — realize_degseq","title":"Creating a graph from a given degree sequence, deterministically — realize_degseq","text":"often useful create graph given vertex degrees. function creates graph deterministic manner.","code":""},{"path":"/reference/realize_degseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a graph from a given degree sequence, deterministically — realize_degseq","text":"","code":"realize_degseq(   out.deg,   in.deg = NULL,   allowed.edge.types = c(\"simple\", \"loops\", \"multi\", \"all\"),   method = c(\"smallest\", \"largest\", \"index\") )"},{"path":"/reference/realize_degseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a graph from a given degree sequence, deterministically — realize_degseq","text":".deg Numeric vector, sequence degrees (undirected graphs) -degrees (directed graphs). undirected graphs sum even. directed graphs sum sum .deg. .deg directed graph, -degree sequence. default NULL undirected graph created. allowed.edge.types Character, specifies types allowed edges. “simple” allows simple graphs (loops, multiple edges). “multiple” allows multiple edges disallows loop. “loops” allows loop edges disallows multiple edges (currently unimplemented). “” allows types edges. default “simple”. method Character, method generating graph; see .","code":""},{"path":"/reference/realize_degseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a graph from a given degree sequence, deterministically — realize_degseq","text":"new graph object.","code":""},{"path":"/reference/realize_degseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creating a graph from a given degree sequence, deterministically — realize_degseq","text":"Simple undirected graphs constructed using Havel-Hakimi algorithm (undirected case), analogous Kleitman-Wang algorithm (directed case). algorithms work choosing arbitrary vertex connecting stubs vertices. step repeated degrees connected . ‘method’ argument controls order vertices selected course algorithm. “smallest” method selects vertex smallest remaining degree. result usually graph high negative degree assortativity. undirected case, method guaranteed generate connected graph, regardless whether multi-edges allowed, provided connected realization exists. See Horvát Modes (2021) details. directed case tends generate weakly connected graphs, guaranteed. default method. “largest” method selects vertex largest remaining degree. result usually graph high positive degree assortativity, often disconnected. “index” method selects vertices order index.","code":""},{"path":"/reference/realize_degseq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creating a graph from a given degree sequence, deterministically — realize_degseq","text":"V. Havel, Poznámka o existenci konečných grafů (remark existence finite graphs), Časopis pro pěstování matematiky 80, 477-480 (1955). https://eudml.org/doc/19050 S. L. Hakimi, Realizability Set Integers Degrees Vertices Linear Graph, Journal SIAM 10, 3 (1962). https://www.jstor.org/stable/2098770 D. J. Kleitman D. L. Wang, Algorithms Constructing Graphs Digraphs Given Valences Factors, Discrete Mathematics 6, 1 (1973). https://doi.org/10.1016/0012-365X%2873%2990037-X Sz. Horvát C. D. Modes, Connectedness matters: construction exact random sampling connected networks (2021). https://doi.org/10.1088/2632-072X/abced5","code":""},{"path":[]},{"path":"/reference/realize_degseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a graph from a given degree sequence, deterministically — realize_degseq","text":"","code":"g <- realize_degseq(rep(2, 100)) degree(g) #>   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 is_simple(g) #> [1] TRUE  ## Exponential degree distribution, with high positive assortativity. ## Loop and multiple edges are explicitly allowed. ## Note that we correct the degree sequence if its sum is odd. degs <- sample(1:100, 100, replace = TRUE, prob = exp(-0.5 * (1:100))) if (sum(degs) %% 2 != 0) {   degs[1] <- degs[1] + 1 } g4 <- realize_degseq(degs, method = \"largest\", allowed.edge.types = \"all\") all(degree(g4) == degs) #> [1] TRUE  ## Power-law degree distribution, no loops allowed but multiple edges ## are okay. ## Note that we correct the degree sequence if its sum is odd. degs <- sample(1:100, 100, replace = TRUE, prob = (1:100)^-2) if (sum(degs) %% 2 != 0) {   degs[1] <- degs[1] + 1 } g5 <- realize_degseq(degs, allowed.edge.types = \"multi\") all(degree(g5) == degs) #> [1] TRUE"},{"path":"/reference/reciprocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Reciprocity of graphs — reciprocity","title":"Reciprocity of graphs — reciprocity","text":"Calculates reciprocity directed graph.","code":""},{"path":"/reference/reciprocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reciprocity of graphs — reciprocity","text":"","code":"reciprocity(graph, ignore.loops = TRUE, mode = c(\"default\", \"ratio\"))"},{"path":"/reference/reciprocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reciprocity of graphs — reciprocity","text":"graph graph object. ignore.loops Logical constant, whether ignore loop edges. mode See .","code":""},{"path":"/reference/reciprocity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reciprocity of graphs — reciprocity","text":"numeric scalar zero one.","code":""},{"path":"/reference/reciprocity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reciprocity of graphs — reciprocity","text":"measure reciprocity defines proportion mutual connections, directed graph. commonly defined probability opposite counterpart directed edge also included graph. adjacency matrix notation: \\(\\sum_{ij} (\\cdot ')_{ij}\\), \\(\\cdot '\\) element-wise product matrix \\(\\) transpose. measure calculated mode argument default. Prior igraph version 0.6, another measure implemented, defined probability mutual connection vertex pair, know (possibly non-mutual) connection . words, (unordered) vertex pairs classified three groups: (1) -connected, (2) non-reciprocally connected, (3) reciprocally connected. result size group (3), divided sum group sizes (2)+(3). measure calculated mode ratio.","code":""},{"path":[]},{"path":"/reference/reciprocity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reciprocity of graphs — reciprocity","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/reciprocity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reciprocity of graphs — reciprocity","text":"","code":"g <- sample_gnp(20, 5 / 20, directed = TRUE) reciprocity(g) #> [1] 0.2040816"},{"path":"/reference/rep.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicate a graph multiple times — rep.igraph","title":"Replicate a graph multiple times — rep.igraph","text":"new graph contain input graph given number times, unconnected components.","code":""},{"path":"/reference/rep.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replicate a graph multiple times — rep.igraph","text":"","code":"# S3 method for igraph rep(x, n, mark = TRUE, ...)  # S3 method for igraph *(x, n)"},{"path":"/reference/rep.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replicate a graph multiple times — rep.igraph","text":"x input graph. n Number times replicate . mark Whether mark vertices attribute, integer number denoting replication vertex coming . ... Additional arguments satisfy S3 requirements, currently ignored.","code":""},{"path":"/reference/rep.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replicate a graph multiple times — rep.igraph","text":"","code":"rings <- make_ring(5) * 5"},{"path":"/reference/rev.igraph.es.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse the order in an edge sequence — rev.igraph.es","title":"Reverse the order in an edge sequence — rev.igraph.es","text":"Reverse order edge sequence","code":""},{"path":"/reference/rev.igraph.es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse the order in an edge sequence — rev.igraph.es","text":"","code":"# S3 method for igraph.es rev(x)"},{"path":"/reference/rev.igraph.es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse the order in an edge sequence — rev.igraph.es","text":"x edge sequence reverse.","code":""},{"path":"/reference/rev.igraph.es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse the order in an edge sequence — rev.igraph.es","text":"reversed edge sequence.","code":""},{"path":[]},{"path":"/reference/rev.igraph.es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse the order in an edge sequence — rev.igraph.es","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) E(g) #> + 10/10 edges from 6a7b6aa (vertex names): #>  [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J E(g) %>% rev() #> + 10/10 edges from 6a7b6aa (vertex names): #>  [1] A--J I--J H--I G--H F--G E--F D--E C--D B--C A--B"},{"path":"/reference/rev.igraph.vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse the order in a vertex sequence — rev.igraph.vs","title":"Reverse the order in a vertex sequence — rev.igraph.vs","text":"Reverse order vertex sequence","code":""},{"path":"/reference/rev.igraph.vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse the order in a vertex sequence — rev.igraph.vs","text":"","code":"# S3 method for igraph.vs rev(x)"},{"path":"/reference/rev.igraph.vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse the order in a vertex sequence — rev.igraph.vs","text":"x vertex sequence reverse.","code":""},{"path":"/reference/rev.igraph.vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse the order in a vertex sequence — rev.igraph.vs","text":"reversed vertex sequence.","code":""},{"path":[]},{"path":"/reference/rev.igraph.vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse the order in a vertex sequence — rev.igraph.vs","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) V(g) %>% rev() #> + 10/10 vertices, named, from b0cc5cd: #>  [1] J I H G F E D C B A"},{"path":"/reference/reverse_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse edges in a graph — reverse_edges","title":"Reverse edges in a graph — reverse_edges","text":"new graph contain vertices, edges attributes original graph, except direction edges selected edge IDs eids argument reversed. reversing edges, operation also known graph transpose.","code":""},{"path":"/reference/reverse_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse edges in a graph — reverse_edges","text":"","code":"reverse_edges(graph, eids = E(graph))  # S3 method for igraph t(x)"},{"path":"/reference/reverse_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse edges in a graph — reverse_edges","text":"graph input graph. eids edge IDs edges reverse. x input graph.","code":""},{"path":"/reference/reverse_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse edges in a graph — reverse_edges","text":"result graph direction edges given IDs reversed","code":""},{"path":"/reference/reverse_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse edges in a graph — reverse_edges","text":"","code":"g <- make_graph(~ 1 -+ 2, 2 -+ 3, 3 -+ 4) reverse_edges(g, 2) #> [[1]] #> [1] 4 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #> [1] 0 2 2 #>  #> [[4]] #> [1] 1 1 3 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 0 1 2 #>  #> [[7]] #> [1] 0 1 1 3 3 #>  #> [[8]] #> [1] 0 0 2 2 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 2 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> [[9]][[3]]$name #> [1] \"1\" \"2\" \"3\" \"4\" #>  #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cb49c4f68> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/rewire.html","id":null,"dir":"Reference","previous_headings":"","what":"Rewiring edges of a graph — rewire","title":"Rewiring edges of a graph — rewire","text":"See links implemented rewiring methods.","code":""},{"path":"/reference/rewire.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rewiring edges of a graph — rewire","text":"","code":"rewire(graph, with)"},{"path":"/reference/rewire.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rewiring edges of a graph — rewire","text":"graph graph rewire function call one rewiring methods, see details .","code":""},{"path":"/reference/rewire.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rewiring edges of a graph — rewire","text":"rewired graph.","code":""},{"path":[]},{"path":"/reference/rewire.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rewiring edges of a graph — rewire","text":"","code":"g <- make_ring(10) g %>%   rewire(each_edge(p = .1, loops = FALSE)) %>%   plot(layout = layout_in_circle) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10))) #> IGRAPH ea9bf56 U--- 10 10 -- Ring graph #> + attr: name (g/c), mutual (g/l), circular (g/l) #> + graph attributes: #> | + name: #> |   [1] \"Ring graph\" #> | + mutual: #> |   [1] FALSE #> | + circular: #> |   [1] TRUE #> + edges from ea9bf56: #>  [1] 2--10 5-- 6 2-- 4 6-- 9 7--10 1-- 4 3-- 8 1-- 9 5-- 8 3-- 7"},{"path":"/reference/rglplot.html","id":null,"dir":"Reference","previous_headings":"","what":"3D plotting of graphs with OpenGL — rglplot","title":"3D plotting of graphs with OpenGL — rglplot","text":"Using rgl package, rglplot() plots graph 3D. plot can zoomed, rotated, shifted, etc. coordinates vertices fixed.","code":""},{"path":"/reference/rglplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D plotting of graphs with OpenGL — rglplot","text":"","code":"rglplot(x, ...)"},{"path":"/reference/rglplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D plotting of graphs with OpenGL — rglplot","text":"x graph plot. ... Additional arguments, see igraph.plotting details","code":""},{"path":"/reference/rglplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"3D plotting of graphs with OpenGL — rglplot","text":"NULL, invisibly.","code":""},{"path":"/reference/rglplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"3D plotting of graphs with OpenGL — rglplot","text":"Note rglplot() considered highly experimental. useful either. See igraph.plotting possible arguments.","code":""},{"path":[]},{"path":"/reference/rglplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"3D plotting of graphs with OpenGL — rglplot","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/rglplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D plotting of graphs with OpenGL — rglplot","text":"","code":"g <- make_lattice(c(5, 5, 5)) coords <- layout_with_fr(g, dim = 3) if (interactive()) {   rglplot(g, layout = coords) }"},{"path":"/reference/running_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Running mean of a time series — running_mean","title":"Running mean of a time series — running_mean","text":"running_mean() calculates running mean vector given bin width.","code":""},{"path":"/reference/running_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running mean of a time series — running_mean","text":"","code":"running_mean(v, binwidth)"},{"path":"/reference/running_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running mean of a time series — running_mean","text":"v numeric vector. binwidth Numeric constant, size bin, meaningful, ie. smaller length v.","code":""},{"path":"/reference/running_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running mean of a time series — running_mean","text":"numeric vector length length(v)-binwidth+1","code":""},{"path":"/reference/running_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Running mean of a time series — running_mean","text":"running mean v w vector length length(v)-binwidth+1. first element w id average first binwidth elements v, second element w average elements 2:(binwidth+1), etc.","code":""},{"path":[]},{"path":"/reference/running_mean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Running mean of a time series — running_mean","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/running_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running mean of a time series — running_mean","text":"","code":"running_mean(1:100, 10) #>  [1]  5.5  6.5  7.5  8.5  9.5 10.5 11.5 12.5 13.5 14.5 15.5 16.5 17.5 18.5 19.5 #> [16] 20.5 21.5 22.5 23.5 24.5 25.5 26.5 27.5 28.5 29.5 30.5 31.5 32.5 33.5 34.5 #> [31] 35.5 36.5 37.5 38.5 39.5 40.5 41.5 42.5 43.5 44.5 45.5 46.5 47.5 48.5 49.5 #> [46] 50.5 51.5 52.5 53.5 54.5 55.5 56.5 57.5 58.5 59.5 60.5 61.5 62.5 63.5 64.5 #> [61] 65.5 66.5 67.5 68.5 69.5 70.5 71.5 72.5 73.5 74.5 75.5 76.5 77.5 78.5 79.5 #> [76] 80.5 81.5 82.5 83.5 84.5 85.5 86.5 87.5 88.5 89.5 90.5 91.5 92.5 93.5 94.5 #> [91] 95.5"},{"path":"/reference/sample_.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from a random graph model — sample_","title":"Sample from a random graph model — sample_","text":"Generic function sampling network models.","code":""},{"path":"/reference/sample_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from a random graph model — sample_","text":"","code":"sample_(...)"},{"path":"/reference/sample_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from a random graph model — sample_","text":"... Parameters, see details .","code":""},{"path":"/reference/sample_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from a random graph model — sample_","text":"TODO","code":""},{"path":"/reference/sample_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from a random graph model — sample_","text":"","code":"pref_matrix <- cbind(c(0.8, 0.1), c(0.1, 0.7)) blocky <- sample_(sbm(   n = 20, pref.matrix = pref_matrix,   block.sizes = c(10, 10) ))  blocky2 <- pref_matrix %>%   sample_sbm(n = 20, block.sizes = c(10, 10))  ## Arguments are passed on from sample_ to sample_sbm blocky3 <- pref_matrix %>%   sample_(sbm(), n = 20, block.sizes = c(10, 10))"},{"path":"/reference/sample_bipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Bipartite random graphs — sample_bipartite","title":"Bipartite random graphs — sample_bipartite","text":"Generate bipartite graphs using Erdos-Renyi model","code":""},{"path":"/reference/sample_bipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bipartite random graphs — sample_bipartite","text":"","code":"sample_bipartite(   n1,   n2,   type = c(\"gnp\", \"gnm\"),   p,   m,   directed = FALSE,   mode = c(\"out\", \"in\", \"all\") )  bipartite(...)"},{"path":"/reference/sample_bipartite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bipartite random graphs — sample_bipartite","text":"n1 Integer scalar, number bottom vertices. n2 Integer scalar, number top vertices. type Character scalar, type graph, ‘gnp’ creates \\(G(n,p)\\) graph, ‘gnm’ creates \\(G(n,m)\\) graph. See details . p Real scalar, connection probability \\(G(n,p)\\) graphs. given \\(G(n,m)\\) graphs. m Integer scalar, number edges \\(G(n,m)\\) graphs. given \\(G(n,p)\\) graphs. directed Logical scalar, whether create directed graph. See also mode argument. mode Character scalar, specifies direct edges directed graphs. ‘’, directed edges point bottom vertices top vertices. ‘’, edges point top vertices bottom vertices. ‘’ ‘’ generate mutual edges. argument ‘’, edge direction considered independently mutual edges might generated. argument ignored undirected graphs. ... Passed sample_bipartite().","code":""},{"path":"/reference/sample_bipartite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bipartite random graphs — sample_bipartite","text":"bipartite igraph graph.","code":""},{"path":"/reference/sample_bipartite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bipartite random graphs — sample_bipartite","text":"Similarly unipartite (one-mode) networks, can define \\(G(n,p)\\), \\(G(n,m)\\) graph classes bipartite graphs, via generating process. \\(G(n,p)\\) every possible edge top bottom vertices realized probability \\(p\\), independently rest edges. \\(G(n,m)\\), uniformly choose \\(m\\) edges realize.","code":""},{"path":[]},{"path":"/reference/sample_bipartite.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bipartite random graphs — sample_bipartite","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_bipartite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bipartite random graphs — sample_bipartite","text":"","code":"## empty graph sample_bipartite(10, 5, p = 0) #> [[1]] #> [1] 15 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> numeric(0) #>  #> [[4]] #> numeric(0) #>  #> [[5]] #> numeric(0) #>  #> [[6]] #> numeric(0) #>  #> [[7]] #>  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  #> [[8]] #>  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Bipartite Gnp random graph\" #>  #> [[9]][[2]]$p #> [1] 0 #>  #>  #> [[9]][[3]] #> [[9]][[3]]$type #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbfb0b00> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## full graph sample_bipartite(10, 5, p = 1) #> [[1]] #> [1] 15 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 10 11 12 13 14 10 11 12 13 14 10 11 12 13 14 10 11 12 13 14 10 11 12 13 14 #> [26] 10 11 12 13 14 10 11 12 13 14 10 11 12 13 14 10 11 12 13 14 10 11 12 13 14 #>  #> [[4]] #>  [1] 0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 6 6 6 6 6 7 7 7 #> [39] 7 7 8 8 8 8 8 9 9 9 9 9 #>  #> [[5]] #>  [1]  0  5 10 15 20 25 30 35 40 45  1  6 11 16 21 26 31 36 41 46  2  7 12 17 22 #> [26] 27 32 37 42 47  3  8 13 18 23 28 33 38 43 48  4  9 14 19 24 29 34 39 44 49 #>  #> [[6]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #> [26] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #>  #> [[7]] #>  [1]  0  0  0  0  0  0  0  0  0  0  0 10 20 30 40 50 #>  #> [[8]] #>  [1]  0  5 10 15 20 25 30 35 40 45 50 50 50 50 50 50 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Bipartite Gnp random graph\" #>  #> [[9]][[2]]$p #> [1] 1 #>  #>  #> [[9]][[3]] #> [[9]][[3]]$type #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbed1428> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## random bipartite graph sample_bipartite(10, 5, p = .1) #> [[1]] #> [1] 15 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] 12 13 14 #>  #> [[4]] #> [1] 7 0 4 #>  #> [[5]] #> [1] 0 1 2 #>  #> [[6]] #> [1] 1 2 0 #>  #> [[7]] #>  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 #>  #> [[8]] #>  [1] 0 1 1 1 1 2 2 2 3 3 3 3 3 3 3 3 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Bipartite Gnp random graph\" #>  #> [[9]][[2]]$p #> [1] 0.1 #>  #>  #> [[9]][[3]] #> [[9]][[3]]$type #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbe65388> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## directed bipartite graph, G(n,m) sample_bipartite(10, 5, type = \"Gnm\", m = 20, directed = TRUE, mode = \"all\") #> [[1]] #> [1] 15 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1]  0  7  8  1  5  7  9  0  3  4  5 14 12 14 11 13 10 12 13 14 #>  #> [[4]] #>  [1] 10 10 10 11 11 11 11 12 12 14 14  0  1  1  6  6  7  7  9  9 #>  #> [[5]] #>  [1]  0  7  3  8  9  4 10  1  5  2  6 16 14 12 17 15 18 11 13 19 #>  #> [[6]] #>  [1] 11 12 13 14 15 16 17 18 19  0  1  2  3  4  5  6  7  8  9 10 #>  #> [[7]] #>  [1]  0  2  3  3  4  5  7  7  9 10 11 12 13 15 17 20 #>  #> [[8]] #>  [1]  0  1  3  3  3  3  3  5  7  7  9 12 16 18 18 20 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Bipartite Gnm random graph\" #>  #> [[9]][[2]]$m #> [1] 20 #>  #>  #> [[9]][[3]] #> [[9]][[3]]$type #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbbddfba0> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/sample_correlated_gnp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a new random graph from a given graph by randomly\nadding/removing edges — sample_correlated_gnp","title":"Generate a new random graph from a given graph by randomly\nadding/removing edges — sample_correlated_gnp","text":"Sample new graph perturbing adjacency matrix given graph shuffling vertices.","code":""},{"path":"/reference/sample_correlated_gnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a new random graph from a given graph by randomly\nadding/removing edges — sample_correlated_gnp","text":"","code":"sample_correlated_gnp(   old.graph,   corr,   p = edge_density(old.graph),   permutation = NULL )"},{"path":"/reference/sample_correlated_gnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a new random graph from a given graph by randomly\nadding/removing edges — sample_correlated_gnp","text":"old.graph original graph. corr scalar unit interval, target Pearson correlation adjacency matrices original generated graph (adjacency matrix used vector). p numeric scalar, probability edge two vertices, must open (0,1) interval. default empirical edge density graph. resampling Erdos-Renyi graph know original edge probability Erdos-Renyi model, supply explicitly. permutation numeric vector, permutation vector applied vertices first graph, get second graph.  NULL, vertices permuted.","code":""},{"path":"/reference/sample_correlated_gnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a new random graph from a given graph by randomly\nadding/removing edges — sample_correlated_gnp","text":"unweighted graph size old.graph correlation coefficient entries two adjacency matrices corr.  Note pair corresponding matrix entries pair correlated Bernoulli random variables.","code":""},{"path":"/reference/sample_correlated_gnp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a new random graph from a given graph by randomly\nadding/removing edges — sample_correlated_gnp","text":"Please see reference given .","code":""},{"path":"/reference/sample_correlated_gnp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate a new random graph from a given graph by randomly\nadding/removing edges — sample_correlated_gnp","text":"Lyzinski, V., Fishkind, D. E., Priebe, C. E. (2013).  Seeded graph matching correlated Erdos-Renyi graphs. https://arxiv.org/abs/1304.7844","code":""},{"path":[]},{"path":"/reference/sample_correlated_gnp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a new random graph from a given graph by randomly\nadding/removing edges — sample_correlated_gnp","text":"","code":"g <- sample_gnp(1000, .1) g2 <- sample_correlated_gnp(g, corr = 0.5) cor(as.vector(g[]), as.vector(g2[])) #> [1] 0.4984654 g #> [[1]] #> [1] 1000 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>     [1]   3   5   8   9  12  13  14  14  14  15  17  17  18  19  19  20  20  21 #>    [19]  22  22  22  23  23  23  23  24  24  24  24  24  25  25  25  25  26  26 #>    [37]  26  26  27  27  27  27  28  28  28  28  28  29  29  29  30  30  31  31 #>    [55]  31  32  32  32  32  33  33  33  34  34  34  34  34  34  34  35  35  35 #>    [73]  35  36  36  36  37  38  38  38  38  38  38  38  39  39  39  39  40  40 #>    [91]  40  40  40  40  41  41  41  41  42  42  42  42  42  42  42  43  43  43 #>   [109]  43  44  44  44  44  45  45  46  46  46  47  47  47  47  47  47  47  47 #>   [127]  47  48  48  48  48  48  48  49  49  49  49  49  49  50  50  50  51  52 #>   [145]  52  52  52  52  52  52  52  53  53  53  53  53  53  53  53  53  53  53 #>   [163]  54  54  54  54  54  55  55  56  56  56  56  56  57  57  57  57  57  57 #>   [181]  57  57  57  57  58  58  58  58  58  59  59  59  59  59  59  60  60  60 #>   [199]  60  60  61  61  61  61  61  62  62  63  63  63  63  63  63  63  63  63 #>   [217]  63  64  64  64  64  65  65  65  65  65  65  65  66  66  66  66  66  66 #>   [235]  66  66  66  66  67  67  67  67  67  67  67  67  67  67  68  68  68  68 #>   [253]  68  68  68  68  69  69  69  69  69  69  70  70  70  70  70  71  71  71 #>   [271]  71  71  71  72  72  72  72  72  72  72  73  73  73  73  73  73  73  73 #>   [289]  73  73  73  73  74  74  74  74  74  74  75  75  75  75  75  75  76  76 #>   [307]  76  76  76  76  76  76  76  76  76  76  76  76  77  77  77  77  78  78 #>   [325]  78  78  78  79  79  79  79  79  79  80  80  80  80  80  81  81  81  81 #>   [343]  81  81  82  82  82  82  82  82  82  82  82  82  82  82  82  82  83  83 #>   [361]  83  83  83  83  83  83  83  84  84  84  84  84  84  84  84  84  84  84 #>   [379]  84  84  84  84  85  85  85  85  85  86  86  86  86  86  86  86  87  87 #>   [397]  87  87  87  87  87  88  88  88  88  88  89  89  89  89  89  89  90  90 #>   [415]  90  90  90  90  90  90  90  91  91  91  91  91  91  91  92  92  92  92 #>   [433]  92  92  92  93  93  93  93  93  93  93  93  94  94  94  94  94  94  94 #>   [451]  94  95  95  95  95  95  96  96  96  96  96  97  97  97  97  97  97  97 #>   [469]  97  97  97  97  97  97  98  98  98  98  98  98  98  98  98  98  98  98 #>   [487]  98  98  98  98  99  99  99  99  99  99  99 100 100 100 100 100 100 100 #>   [505] 100 100 100 100 100 100 100 100 101 101 101 101 101 101 101 102 102 102 #>   [523] 102 102 102 102 102 102 102 102 103 103 103 103 103 103 103 103 104 104 #>   [541] 104 104 104 104 104 104 104 104 104 104 104 105 105 105 105 105 105 105 #>   [559] 105 105 105 105 106 106 106 106 106 106 106 106 106 106 107 107 107 107 #>   [577] 107 107 107 107 107 108 108 108 108 108 108 108 108 108 108 108 108 108 #>   [595] 109 109 109 109 109 109 109 109 109 109 109 109 109 109 110 110 110 110 #>   [613] 110 110 110 111 111 111 111 111 111 111 111 112 112 112 112 112 112 112 #>   [631] 112 112 112 112 112 113 113 113 113 113 113 113 113 113 113 114 114 114 #>   [649] 114 114 114 114 114 114 114 114 114 115 115 115 115 115 115 115 115 115 #>   [667] 115 115 115 115 115 115 115 116 116 116 116 116 116 116 116 116 116 116 #>   [685] 116 116 116 116 116 116 116 116 117 117 117 117 117 117 117 117 117 117 #>   [703] 117 117 118 118 118 118 118 118 118 118 118 118 118 118 118 118 118 118 #>   [721] 119 119 119 119 119 119 119 119 119 119 120 120 120 120 120 120 120 120 #>   [739] 120 121 121 121 121 121 121 121 121 121 121 122 122 122 122 122 122 122 #>   [757] 122 123 123 123 123 123 123 123 123 123 123 123 124 124 124 124 124 124 #>   [775] 124 124 124 124 124 124 124 124 125 125 125 125 125 125 125 125 125 125 #>   [793] 125 125 125 125 125 126 126 126 126 126 126 126 126 126 126 127 127 127 #>   [811] 127 127 127 127 127 127 127 127 127 127 128 128 128 128 128 128 128 128 #>   [829] 128 129 129 129 129 129 129 129 129 129 129 129 129 129 129 130 130 130 #>   [847] 130 130 130 130 130 130 130 130 130 130 130 130 130 130 131 131 131 131 #>   [865] 131 131 131 131 131 131 132 132 132 132 132 132 132 132 132 132 132 132 #>   [883] 132 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 134 #>   [901] 134 134 134 134 134 134 134 134 134 134 134 134 134 134 134 134 134 135 #>   [919] 135 135 135 135 135 135 135 135 135 135 135 135 135 135 136 136 136 136 #>   [937] 136 136 136 136 136 137 137 137 137 137 137 137 137 137 137 137 137 137 #>   [955] 137 137 137 138 138 138 138 138 138 138 138 138 138 138 138 138 138 138 #>   [973] 139 139 139 139 139 139 139 139 139 139 139 139 139 139 139 140 140 140 #>   [991] 140 140 140 140 140 140 140 140 140 140 140 140 141 141 141 141 141 141 #>  [1009] 142 142 142 142 142 142 142 142 142 142 142 142 142 142 142 142 142 142 #>  [1027] 142 143 143 143 143 143 143 143 143 143 143 143 143 143 143 143 144 144 #>  [1045] 144 144 144 144 144 144 144 144 144 144 144 145 145 145 145 145 145 145 #>  [1063] 145 145 145 145 145 145 145 145 145 145 145 145 146 146 146 146 146 146 #>  [1081] 146 146 146 146 146 146 146 146 146 146 147 147 147 147 147 147 147 147 #>  [1099] 147 147 147 147 147 147 147 147 147 148 148 148 148 148 148 148 148 148 #>  [1117] 148 148 148 148 148 148 148 148 148 148 149 149 149 149 149 149 149 149 #>  [1135] 149 149 149 149 149 149 150 150 150 150 150 150 150 150 150 150 150 150 #>  [1153] 150 151 151 151 151 151 151 151 151 151 151 151 151 151 151 151 151 151 #>  [1171] 152 152 152 152 152 152 152 152 152 152 152 153 153 153 153 153 153 153 #>  [1189] 153 153 153 153 153 153 153 153 153 154 154 154 154 154 154 154 154 154 #>  [1207] 154 154 154 154 154 154 155 155 155 155 155 155 155 155 155 155 155 155 #>  [1225] 155 156 156 156 156 156 156 156 156 156 156 156 156 156 156 156 156 156 #>  [1243] 156 156 156 156 157 157 157 157 157 157 157 157 157 157 158 158 158 158 #>  [1261] 158 158 158 158 158 158 158 158 158 158 158 158 159 159 159 159 159 159 #>  [1279] 159 159 159 159 159 159 159 159 159 160 160 160 160 160 160 160 160 160 #>  [1297] 160 160 160 160 161 161 161 161 161 161 161 161 161 162 162 162 162 162 #>  [1315] 162 162 162 162 162 162 162 162 162 162 162 162 162 163 163 163 163 163 #>  [1333] 163 163 163 163 163 163 163 163 163 163 164 164 164 164 164 164 164 165 #>  [1351] 165 165 165 165 165 165 165 165 165 165 165 165 165 166 166 166 166 166 #>  [1369] 166 166 166 166 166 166 166 166 166 166 166 167 167 167 167 167 167 167 #>  [1387] 167 167 167 167 167 167 167 167 167 167 167 168 168 168 168 168 168 168 #>  [1405] 168 168 168 168 168 168 168 168 168 168 168 169 169 169 169 169 169 169 #>  [1423] 169 169 169 169 169 169 170 170 170 170 170 170 170 170 170 170 170 170 #>  [1441] 170 170 170 170 170 170 170 170 170 171 171 171 171 171 171 171 171 171 #>  [1459] 171 171 171 171 171 171 172 172 172 172 172 172 172 172 172 172 172 172 #>  [1477] 172 173 173 173 173 173 173 173 173 173 173 173 173 173 173 173 173 173 #>  [1495] 173 173 173 173 174 174 174 174 174 174 174 174 174 174 174 174 174 174 #>  [1513] 174 174 174 174 174 175 175 175 175 175 175 175 175 175 175 175 175 175 #>  [1531] 175 175 175 175 175 175 175 176 176 176 176 176 176 176 176 176 176 176 #>  [1549] 176 176 176 176 176 176 176 176 177 177 177 177 177 177 177 177 177 177 #>  [1567] 177 177 177 177 177 177 177 177 177 177 177 177 178 178 178 178 178 178 #>  [1585] 178 178 178 178 178 178 178 178 178 178 178 178 178 178 178 179 179 179 #>  [1603] 179 179 179 179 179 179 179 179 179 179 179 180 180 180 180 180 180 180 #>  [1621] 180 180 180 180 180 180 180 180 180 180 180 181 181 181 181 181 181 181 #>  [1639] 181 181 181 181 181 181 182 182 182 182 182 182 182 182 182 182 182 182 #>  [1657] 182 182 183 183 183 183 183 183 183 183 183 183 183 183 183 184 184 184 #>  [1675] 184 184 184 184 184 184 184 184 184 185 185 185 185 185 185 185 185 185 #>  [1693] 185 185 185 185 185 185 185 185 185 185 185 186 186 186 186 186 186 186 #>  [1711] 186 186 186 186 186 186 186 186 186 186 186 186 186 186 187 187 187 187 #>  [1729] 187 187 187 187 187 187 187 187 187 187 187 187 188 188 188 188 188 188 #>  [1747] 188 188 188 188 188 188 188 188 188 188 188 188 189 189 189 189 189 189 #>  [1765] 189 189 189 189 189 189 189 189 189 189 189 189 189 190 190 190 190 190 #>  [1783] 190 190 190 190 190 190 190 190 190 190 190 190 191 191 191 191 191 191 #>  [1801] 191 191 191 191 191 191 191 191 191 191 191 191 191 191 192 192 192 192 #>  [1819] 192 192 192 192 192 192 192 192 192 192 192 192 192 192 192 192 192 192 #>  [1837] 192 193 193 193 193 193 193 193 193 193 193 193 193 193 193 193 194 194 #>  [1855] 194 194 194 194 194 194 194 194 194 194 194 194 194 194 195 195 195 195 #>  [1873] 195 195 195 195 195 195 195 195 195 195 195 195 195 195 195 195 195 195 #>  [1891] 195 195 195 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 #>  [1909] 196 196 196 196 196 196 196 196 196 196 196 196 197 197 197 197 197 197 #>  [1927] 197 197 197 197 197 197 197 197 197 197 197 197 198 198 198 198 198 198 #>  [1945] 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 #>  [1963] 198 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 #>  [1981] 199 199 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 #>  [1999] 200 200 200 200 201 201 201 201 201 201 201 201 201 201 201 201 201 201 #>  [2017] 201 201 201 201 201 201 201 202 202 202 202 202 202 202 202 202 202 202 #>  [2035] 202 202 202 202 202 202 202 203 203 203 203 203 203 203 203 203 203 203 #>  [2053] 203 203 203 203 203 203 203 203 203 203 203 203 203 203 204 204 204 204 #>  [2071] 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 205 205 205 #>  [2089] 205 205 205 205 205 205 205 205 205 205 205 205 205 205 206 206 206 206 #>  [2107] 206 206 206 206 206 206 206 206 206 206 206 206 206 206 206 206 206 207 #>  [2125] 207 207 207 207 207 207 207 207 207 207 207 207 207 207 207 207 207 207 #>  [2143] 207 208 208 208 208 208 208 208 208 208 208 208 208 208 208 208 208 208 #>  [2161] 208 208 208 208 209 209 209 209 209 209 209 209 209 209 209 209 209 209 #>  [2179] 209 209 209 209 209 209 209 209 210 210 210 210 210 210 210 210 210 210 #>  [2197] 210 210 210 210 210 210 210 210 210 210 210 210 210 210 210 210 211 211 #>  [2215] 211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 #>  [2233] 211 211 211 211 212 212 212 212 212 212 212 212 212 212 212 212 212 212 #>  [2251] 212 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 213 #>  [2269] 213 213 213 213 213 213 213 213 214 214 214 214 214 214 214 214 214 214 #>  [2287] 214 214 214 214 214 214 214 214 214 214 214 214 214 214 215 215 215 215 #>  [2305] 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 216 #>  [2323] 216 216 216 216 216 216 216 216 216 216 216 216 216 216 216 216 217 217 #>  [2341] 217 217 217 217 217 217 217 217 217 217 217 217 217 217 218 218 218 218 #>  [2359] 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 #>  [2377] 218 218 218 219 219 219 219 219 219 219 219 219 219 219 219 219 219 219 #>  [2395] 219 219 219 219 219 219 219 219 219 219 220 220 220 220 220 220 220 220 #>  [2413] 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 221 221 221 #>  [2431] 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 #>  [2449] 221 221 222 222 222 222 222 222 222 222 222 222 222 222 222 222 222 222 #>  [2467] 222 222 222 222 222 222 222 222 223 223 223 223 223 223 223 223 223 223 #>  [2485] 223 223 223 223 223 223 223 223 223 223 223 223 223 223 223 223 223 223 #>  [2503] 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 #>  [2521] 224 224 224 224 225 225 225 225 225 225 225 225 225 225 225 225 225 225 #>  [2539] 225 225 225 225 225 225 225 226 226 226 226 226 226 226 226 226 226 226 #>  [2557] 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 #>  [2575] 227 227 227 227 227 227 227 227 227 227 227 227 227 227 227 227 227 228 #>  [2593] 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 #>  [2611] 228 228 229 229 229 229 229 229 229 229 229 229 229 229 229 229 229 229 #>  [2629] 229 229 229 229 229 229 229 229 229 230 230 230 230 230 230 230 230 230 #>  [2647] 230 230 230 230 230 230 230 230 230 230 230 230 230 230 230 231 231 231 #>  [2665] 231 231 231 231 231 231 231 231 231 231 231 231 231 231 231 231 231 231 #>  [2683] 232 232 232 232 232 232 232 232 232 232 232 232 232 232 232 232 232 232 #>  [2701] 232 232 232 232 232 232 232 232 232 232 232 232 232 233 233 233 233 233 #>  [2719] 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 234 #>  [2737] 234 234 234 234 234 234 234 234 234 234 234 234 234 234 234 234 234 234 #>  [2755] 234 234 234 234 234 234 234 234 234 234 234 235 235 235 235 235 235 235 #>  [2773] 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 #>  [2791] 235 235 235 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 #>  [2809] 236 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 #>  [2827] 237 237 237 237 237 237 237 237 237 237 238 238 238 238 238 238 238 238 #>  [2845] 238 238 238 238 238 238 238 238 238 238 238 238 238 238 238 239 239 239 #>  [2863] 239 239 239 239 239 239 239 239 239 239 239 239 239 240 240 240 240 240 #>  [2881] 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 #>  [2899] 240 240 240 240 240 241 241 241 241 241 241 241 241 241 241 241 241 241 #>  [2917] 241 241 241 241 241 241 241 241 241 241 241 241 242 242 242 242 242 242 #>  [2935] 242 242 242 242 242 242 242 242 242 242 242 242 242 243 243 243 243 243 #>  [2953] 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 #>  [2971] 244 244 244 244 244 244 244 244 244 244 244 244 244 244 244 244 244 245 #>  [2989] 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 #>  [3007] 245 245 245 245 245 245 245 245 245 246 246 246 246 246 246 246 246 246 #>  [3025] 246 246 246 246 246 246 246 246 246 246 246 246 246 246 246 246 246 246 #>  [3043] 246 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 #>  [3061] 247 247 248 248 248 248 248 248 248 248 248 248 248 248 248 248 248 248 #>  [3079] 248 248 248 248 248 248 249 249 249 249 249 249 249 249 249 249 249 249 #>  [3097] 249 249 249 249 249 249 249 249 249 249 249 250 250 250 250 250 250 250 #>  [3115] 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 251 251 #>  [3133] 251 251 251 251 251 251 251 251 251 251 251 251 251 251 251 251 251 252 #>  [3151] 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 #>  [3169] 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 #>  [3187] 253 253 253 253 253 253 253 253 253 253 253 253 253 253 253 253 253 253 #>  [3205] 253 253 253 253 253 253 253 253 253 253 253 253 253 253 254 254 254 254 #>  [3223] 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 #>  [3241] 254 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 #>  [3259] 255 255 255 255 255 255 255 255 256 256 256 256 256 256 256 256 256 256 #>  [3277] 256 256 256 256 256 256 256 256 256 256 256 256 257 257 257 257 257 257 #>  [3295] 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 #>  [3313] 257 257 257 257 257 257 257 258 258 258 258 258 258 258 258 258 258 258 #>  [3331] 258 258 258 258 258 258 258 258 258 258 259 259 259 259 259 259 259 259 #>  [3349] 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 259 #>  [3367] 259 260 260 260 260 260 260 260 260 260 260 260 260 260 260 260 260 260 #>  [3385] 260 260 260 260 260 261 261 261 261 261 261 261 261 261 261 261 261 261 #>  [3403] 261 261 261 261 261 261 261 262 262 262 262 262 262 262 262 262 262 262 #>  [3421] 262 262 262 262 262 262 262 262 262 263 263 263 263 263 263 263 263 263 #>  [3439] 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 264 #>  [3457] 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 #>  [3475] 264 264 264 264 264 264 264 264 265 265 265 265 265 265 265 265 265 265 #>  [3493] 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 #>  [3511] 265 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 #>  [3529] 266 266 266 266 266 266 266 266 267 267 267 267 267 267 267 267 267 267 #>  [3547] 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 #>  [3565] 267 267 268 268 268 268 268 268 268 268 268 268 268 268 268 268 268 268 #>  [3583] 268 268 268 268 268 268 268 268 268 268 268 268 268 269 269 269 269 269 #>  [3601] 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 #>  [3619] 269 269 269 269 269 270 270 270 270 270 270 270 270 270 270 270 270 270 #>  [3637] 270 270 270 270 270 270 270 270 270 270 270 270 270 270 270 270 271 271 #>  [3655] 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 #>  [3673] 271 271 271 271 272 272 272 272 272 272 272 272 272 272 272 272 272 272 #>  [3691] 272 272 272 272 272 272 272 272 272 273 273 273 273 273 273 273 273 273 #>  [3709] 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 #>  [3727] 274 274 274 274 274 274 274 274 274 274 274 274 274 274 274 274 274 274 #>  [3745] 274 274 274 274 274 274 274 274 274 275 275 275 275 275 275 275 275 275 #>  [3763] 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 #>  [3781] 275 275 275 275 275 275 275 275 275 276 276 276 276 276 276 276 276 276 #>  [3799] 276 276 276 276 276 276 276 276 276 276 277 277 277 277 277 277 277 277 #>  [3817] 277 277 277 277 277 277 277 277 277 277 277 277 277 277 277 277 277 277 #>  [3835] 277 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 #>  [3853] 278 278 278 278 278 278 279 279 279 279 279 279 279 279 279 279 279 279 #>  [3871] 279 279 279 279 279 279 279 279 279 279 279 279 279 279 279 279 280 280 #>  [3889] 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 #>  [3907] 280 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 #>  [3925] 281 281 281 281 281 281 281 281 281 282 282 282 282 282 282 282 282 282 #>  [3943] 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 #>  [3961] 282 282 282 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 #>  [3979] 283 283 283 283 283 283 283 283 283 283 284 284 284 284 284 284 284 284 #>  [3997] 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 #>  [4015] 284 284 284 284 284 284 284 284 285 285 285 285 285 285 285 285 285 285 #>  [4033] 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 #>  [4051] 285 285 285 286 286 286 286 286 286 286 286 286 286 286 286 286 286 286 #>  [4069] 286 286 286 286 286 286 286 286 286 286 286 286 286 286 286 286 286 287 #>  [4087] 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 #>  [4105] 287 287 287 287 287 287 287 288 288 288 288 288 288 288 288 288 288 288 #>  [4123] 288 288 288 288 288 288 288 288 288 288 288 288 288 288 288 288 288 288 #>  [4141] 288 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 #>  [4159] 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 290 290 290 #>  [4177] 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 #>  [4195] 290 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 #>  [4213] 291 291 291 291 291 291 291 291 291 291 292 292 292 292 292 292 292 292 #>  [4231] 292 292 292 292 292 292 292 292 292 292 292 292 292 292 292 292 292 292 #>  [4249] 292 292 292 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 #>  [4267] 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 294 294 294 #>  [4285] 294 294 294 294 294 294 294 294 294 294 294 294 294 294 294 294 294 295 #>  [4303] 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 #>  [4321] 295 295 295 295 295 295 295 295 295 295 295 295 295 295 296 296 296 296 #>  [4339] 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 #>  [4357] 296 296 296 296 296 296 296 296 296 296 297 297 297 297 297 297 297 297 #>  [4375] 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 #>  [4393] 297 297 298 298 298 298 298 298 298 298 298 298 298 298 298 298 298 298 #>  [4411] 298 298 298 298 298 298 298 298 298 298 298 298 298 298 299 299 299 299 #>  [4429] 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 #>  [4447] 299 299 299 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 #>  [4465] 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 #>  [4483] 300 300 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 #>  [4501] 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 #>  [4519] 301 301 301 301 301 302 302 302 302 302 302 302 302 302 302 302 302 302 #>  [4537] 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 302 #>  [4555] 302 302 302 302 303 303 303 303 303 303 303 303 303 303 303 303 303 303 #>  [4573] 303 303 303 303 303 303 303 303 303 303 303 303 303 303 303 303 304 304 #>  [4591] 304 304 304 304 304 304 304 304 304 304 304 304 304 304 304 304 304 304 #>  [4609] 304 304 304 304 304 304 304 304 304 304 304 304 305 305 305 305 305 305 #>  [4627] 305 305 305 305 305 305 305 305 305 305 305 305 305 305 305 305 305 305 #>  [4645] 305 305 305 305 305 305 305 305 305 305 305 306 306 306 306 306 306 306 #>  [4663] 306 306 306 306 306 306 306 306 306 306 306 306 306 306 306 306 306 306 #>  [4681] 306 306 306 306 306 307 307 307 307 307 307 307 307 307 307 307 307 307 #>  [4699] 307 307 307 307 307 307 308 308 308 308 308 308 308 308 308 308 308 308 #>  [4717] 308 308 308 308 308 308 308 308 308 308 308 308 308 308 308 308 308 308 #>  [4735] 308 308 309 309 309 309 309 309 309 309 309 309 309 309 309 309 309 309 #>  [4753] 309 309 309 309 309 309 309 309 309 309 309 309 309 310 310 310 310 310 #>  [4771] 310 310 310 310 310 310 310 310 310 310 310 310 310 310 310 310 310 310 #>  [4789] 310 310 310 310 310 310 310 310 310 310 310 310 310 311 311 311 311 311 #>  [4807] 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 #>  [4825] 311 311 312 312 312 312 312 312 312 312 312 312 312 312 312 312 312 312 #>  [4843] 312 312 312 312 312 312 312 312 312 312 312 312 312 312 313 313 313 313 #>  [4861] 313 313 313 313 313 313 313 313 313 313 313 313 313 313 313 313 313 313 #>  [4879] 313 314 314 314 314 314 314 314 314 314 314 314 314 314 314 314 314 314 #>  [4897] 314 314 314 314 314 314 314 314 314 314 314 315 315 315 315 315 315 315 #>  [4915] 315 315 315 315 315 315 315 315 315 315 315 315 315 315 315 315 315 315 #>  [4933] 315 315 315 315 315 315 315 315 315 315 315 316 316 316 316 316 316 316 #>  [4951] 316 316 316 316 316 316 316 316 316 316 316 316 316 316 316 317 317 317 #>  [4969] 317 317 317 317 317 317 317 317 317 317 317 317 317 317 317 317 317 317 #>  [4987] 317 317 317 317 318 318 318 318 318 318 318 318 318 318 318 318 318 318 #>  [5005] 318 318 318 318 318 318 318 318 318 318 318 318 318 318 319 319 319 319 #>  [5023] 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 #>  [5041] 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 320 #>  [5059] 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 #>  [5077] 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 321 321 #>  [5095] 321 321 321 321 321 321 321 321 321 321 321 321 321 321 321 321 321 321 #>  [5113] 321 321 321 321 321 321 322 322 322 322 322 322 322 322 322 322 322 322 #>  [5131] 322 322 322 322 322 322 322 322 322 322 322 323 323 323 323 323 323 323 #>  [5149] 323 323 323 323 323 323 323 323 323 323 323 323 323 323 323 323 323 323 #>  [5167] 323 323 323 323 323 323 323 323 323 324 324 324 324 324 324 324 324 324 #>  [5185] 324 324 324 324 324 324 324 324 324 324 324 324 324 324 324 324 324 324 #>  [5203] 325 325 325 325 325 325 325 325 325 325 325 325 325 325 325 325 325 325 #>  [5221] 325 325 325 325 325 325 325 325 325 325 326 326 326 326 326 326 326 326 #>  [5239] 326 326 326 326 326 326 326 326 326 326 326 326 326 326 326 326 326 326 #>  [5257] 326 326 326 326 326 326 326 326 326 327 327 327 327 327 327 327 327 327 #>  [5275] 327 327 327 327 327 327 327 327 327 327 327 327 327 327 327 327 327 327 #>  [5293] 327 327 327 327 327 327 327 327 327 327 328 328 328 328 328 328 328 328 #>  [5311] 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 #>  [5329] 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 329 329 329 #>  [5347] 329 329 329 329 329 329 329 329 329 329 329 329 329 329 329 329 329 329 #>  [5365] 329 329 329 329 329 329 329 329 329 329 329 329 329 330 330 330 330 330 #>  [5383] 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 #>  [5401] 330 330 330 330 330 330 330 330 330 330 330 330 331 331 331 331 331 331 #>  [5419] 331 331 331 331 331 331 331 331 331 331 331 331 331 331 331 331 331 331 #>  [5437] 331 331 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 #>  [5455] 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 #>  [5473] 333 333 333 333 333 333 333 333 333 333 333 333 333 333 333 333 333 333 #>  [5491] 333 333 333 333 333 333 333 333 333 334 334 334 334 334 334 334 334 334 #>  [5509] 334 334 334 334 334 334 334 334 334 334 334 334 334 334 334 334 334 334 #>  [5527] 334 334 334 334 335 335 335 335 335 335 335 335 335 335 335 335 335 335 #>  [5545] 335 335 335 335 335 335 335 335 335 335 335 335 335 335 336 336 336 336 #>  [5563] 336 336 336 336 336 336 336 336 336 336 336 336 336 336 336 336 336 336 #>  [5581] 336 336 336 336 336 336 336 336 336 336 337 337 337 337 337 337 337 337 #>  [5599] 337 337 337 337 337 337 337 337 337 337 337 337 337 337 337 337 338 338 #>  [5617] 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 #>  [5635] 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 #>  [5653] 338 338 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 #>  [5671] 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 #>  [5689] 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 #>  [5707] 340 340 340 340 340 340 340 340 340 340 341 341 341 341 341 341 341 341 #>  [5725] 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 #>  [5743] 341 341 341 341 341 341 341 341 341 341 342 342 342 342 342 342 342 342 #>  [5761] 342 342 342 342 342 342 342 342 342 342 342 342 342 342 342 342 342 342 #>  [5779] 342 342 342 342 342 342 342 342 343 343 343 343 343 343 343 343 343 343 #>  [5797] 343 343 343 343 343 343 343 343 343 343 343 343 343 343 343 343 343 343 #>  [5815] 343 343 343 343 343 343 343 344 344 344 344 344 344 344 344 344 344 344 #>  [5833] 344 344 344 344 344 344 344 344 344 344 344 344 344 344 344 344 344 344 #>  [5851] 344 344 344 344 344 344 344 344 344 345 345 345 345 345 345 345 345 345 #>  [5869] 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 #>  [5887] 345 345 345 345 346 346 346 346 346 346 346 346 346 346 346 346 346 346 #>  [5905] 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 #>  [5923] 346 346 346 347 347 347 347 347 347 347 347 347 347 347 347 347 347 347 #>  [5941] 347 347 347 347 347 347 347 347 347 347 347 348 348 348 348 348 348 348 #>  [5959] 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 #>  [5977] 348 348 348 348 348 348 348 348 348 348 348 348 348 348 349 349 349 349 #>  [5995] 349 349 349 349 349 349 349 349 349 349 349 349 349 349 349 349 349 349 #>  [6013] 349 349 349 349 349 349 349 349 349 349 349 349 350 350 350 350 350 350 #>  [6031] 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 #>  [6049] 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 351 351 #>  [6067] 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 #>  [6085] 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 352 352 #>  [6103] 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 #>  [6121] 352 352 352 352 352 352 352 352 352 352 352 352 352 352 353 353 353 353 #>  [6139] 353 353 353 353 353 353 353 353 353 353 353 353 353 353 353 353 353 353 #>  [6157] 353 353 353 353 353 353 353 353 353 353 354 354 354 354 354 354 354 354 #>  [6175] 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 #>  [6193] 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 355 #>  [6211] 355 355 355 355 355 355 355 355 355 355 355 355 355 355 355 355 355 355 #>  [6229] 355 355 355 355 355 355 355 355 355 355 355 356 356 356 356 356 356 356 #>  [6247] 356 356 356 356 356 356 356 356 356 356 356 356 356 356 356 356 356 356 #>  [6265] 356 356 356 356 356 356 356 356 357 357 357 357 357 357 357 357 357 357 #>  [6283] 357 357 357 357 357 357 357 357 357 357 357 357 357 357 357 357 357 357 #>  [6301] 357 357 357 357 357 357 357 357 357 357 358 358 358 358 358 358 358 358 #>  [6319] 358 358 358 358 358 358 358 358 358 358 358 358 358 358 358 358 358 358 #>  [6337] 358 358 358 358 358 358 359 359 359 359 359 359 359 359 359 359 359 359 #>  [6355] 359 359 359 359 359 359 359 359 359 359 359 359 359 359 359 359 359 359 #>  [6373] 359 359 359 359 359 359 359 360 360 360 360 360 360 360 360 360 360 360 #>  [6391] 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 #>  [6409] 360 360 360 360 360 360 360 360 360 361 361 361 361 361 361 361 361 361 #>  [6427] 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 #>  [6445] 361 361 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 #>  [6463] 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 363 363 #>  [6481] 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 #>  [6499] 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 364 #>  [6517] 364 364 364 364 364 364 364 364 364 364 364 364 364 364 364 364 364 364 #>  [6535] 364 364 364 364 364 364 364 364 364 364 364 364 364 364 364 364 364 364 #>  [6553] 364 364 364 364 365 365 365 365 365 365 365 365 365 365 365 365 365 365 #>  [6571] 365 365 365 365 365 365 365 365 365 365 365 365 365 365 365 365 365 365 #>  [6589] 365 365 365 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 #>  [6607] 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 #>  [6625] 366 366 366 366 366 366 366 367 367 367 367 367 367 367 367 367 367 367 #>  [6643] 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 #>  [6661] 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 368 368 368 #>  [6679] 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 #>  [6697] 368 368 368 368 368 368 368 368 368 368 368 368 369 369 369 369 369 369 #>  [6715] 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 #>  [6733] 369 369 369 369 369 369 369 369 369 369 369 369 370 370 370 370 370 370 #>  [6751] 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 #>  [6769] 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 371 371 371 #>  [6787] 371 371 371 371 371 371 371 371 371 371 371 371 371 371 371 371 371 371 #>  [6805] 371 371 371 371 371 371 371 371 371 371 371 371 372 372 372 372 372 372 #>  [6823] 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 #>  [6841] 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 373 373 #>  [6859] 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 #>  [6877] 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 #>  [6895] 373 373 373 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 #>  [6913] 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 #>  [6931] 374 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 #>  [6949] 375 375 375 375 375 375 375 375 375 376 376 376 376 376 376 376 376 376 #>  [6967] 376 376 376 376 376 376 376 376 376 376 376 376 376 376 376 376 376 376 #>  [6985] 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 #>  [7003] 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 #>  [7021] 377 377 377 377 377 377 377 377 377 377 377 377 378 378 378 378 378 378 #>  [7039] 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 #>  [7057] 378 378 378 378 378 378 379 379 379 379 379 379 379 379 379 379 379 379 #>  [7075] 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 #>  [7093] 379 379 379 379 379 379 379 379 379 379 379 380 380 380 380 380 380 380 #>  [7111] 380 380 380 380 380 380 380 380 380 380 380 380 380 380 380 380 380 380 #>  [7129] 380 380 380 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 #>  [7147] 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 #>  [7165] 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 #>  [7183] 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 383 383 383 #>  [7201] 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 #>  [7219] 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 #>  [7237] 383 383 383 383 383 383 383 384 384 384 384 384 384 384 384 384 384 384 #>  [7255] 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 #>  [7273] 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 385 385 385 #>  [7291] 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 #>  [7309] 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 #>  [7327] 385 385 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 #>  [7345] 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 #>  [7363] 386 386 386 386 386 387 387 387 387 387 387 387 387 387 387 387 387 387 #>  [7381] 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 #>  [7399] 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 #>  [7417] 387 387 387 387 387 388 388 388 388 388 388 388 388 388 388 388 388 388 #>  [7435] 388 388 388 388 388 388 388 388 388 388 388 388 388 388 388 388 388 388 #>  [7453] 388 388 388 388 388 388 388 388 388 388 388 388 388 389 389 389 389 389 #>  [7471] 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 #>  [7489] 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 #>  [7507] 389 389 389 389 389 389 390 390 390 390 390 390 390 390 390 390 390 390 #>  [7525] 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 #>  [7543] 390 390 390 390 390 390 390 390 390 391 391 391 391 391 391 391 391 391 #>  [7561] 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 #>  [7579] 391 391 391 391 391 391 391 391 391 391 392 392 392 392 392 392 392 392 #>  [7597] 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 #>  [7615] 392 392 392 392 392 392 392 392 392 392 392 393 393 393 393 393 393 393 #>  [7633] 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 #>  [7651] 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 394 394 #>  [7669] 394 394 394 394 394 394 394 394 394 394 394 394 394 394 394 394 394 394 #>  [7687] 394 394 394 394 394 394 394 394 394 394 394 394 395 395 395 395 395 395 #>  [7705] 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 #>  [7723] 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 396 #>  [7741] 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 #>  [7759] 396 396 396 396 396 396 396 396 396 396 396 396 396 396 397 397 397 397 #>  [7777] 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 #>  [7795] 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 #>  [7813] 397 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 #>  [7831] 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 #>  [7849] 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 #>  [7867] 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 #>  [7885] 399 399 399 399 399 400 400 400 400 400 400 400 400 400 400 400 400 400 #>  [7903] 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 #>  [7921] 400 400 400 400 400 400 400 400 401 401 401 401 401 401 401 401 401 401 #>  [7939] 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 #>  [7957] 401 401 401 401 401 401 401 401 401 401 401 401 401 402 402 402 402 402 #>  [7975] 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 #>  [7993] 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 403 403 #>  [8011] 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 #>  [8029] 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 404 404 #>  [8047] 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 #>  [8065] 404 404 404 404 404 404 404 404 404 404 404 404 404 405 405 405 405 405 #>  [8083] 405 405 405 405 405 405 405 405 405 405 405 405 405 405 405 405 405 405 #>  [8101] 405 405 405 405 405 405 405 405 405 406 406 406 406 406 406 406 406 406 #>  [8119] 406 406 406 406 406 406 406 406 406 406 406 406 406 406 406 406 406 406 #>  [8137] 406 406 406 406 406 406 406 406 406 406 406 406 406 407 407 407 407 407 #>  [8155] 407 407 407 407 407 407 407 407 407 407 407 407 407 407 407 407 407 407 #>  [8173] 407 407 407 407 407 407 407 408 408 408 408 408 408 408 408 408 408 408 #>  [8191] 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 #>  [8209] 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 #>  [8227] 408 408 408 408 408 408 408 408 409 409 409 409 409 409 409 409 409 409 #>  [8245] 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 #>  [8263] 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 #>  [8281] 409 409 409 409 410 410 410 410 410 410 410 410 410 410 410 410 410 410 #>  [8299] 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 #>  [8317] 410 410 410 410 410 410 410 410 411 411 411 411 411 411 411 411 411 411 #>  [8335] 411 411 411 411 411 411 411 411 411 411 411 411 411 411 411 411 411 411 #>  [8353] 411 411 411 411 411 411 411 411 412 412 412 412 412 412 412 412 412 412 #>  [8371] 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 #>  [8389] 412 412 412 412 412 412 412 412 412 412 412 412 413 413 413 413 413 413 #>  [8407] 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 #>  [8425] 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 #>  [8443] 413 413 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 #>  [8461] 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 #>  [8479] 414 414 414 414 414 414 414 414 414 415 415 415 415 415 415 415 415 415 #>  [8497] 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 #>  [8515] 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 #>  [8533] 415 415 415 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 #>  [8551] 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 #>  [8569] 416 416 416 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 #>  [8587] 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 #>  [8605] 417 417 417 417 417 417 417 417 417 417 417 417 418 418 418 418 418 418 #>  [8623] 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 #>  [8641] 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 #>  [8659] 418 419 419 419 419 419 419 419 419 419 419 419 419 419 419 419 419 419 #>  [8677] 419 419 419 419 419 419 419 419 419 419 419 419 420 420 420 420 420 420 #>  [8695] 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 #>  [8713] 420 420 420 420 420 420 420 420 420 421 421 421 421 421 421 421 421 421 #>  [8731] 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 #>  [8749] 421 421 421 421 421 421 421 421 421 421 421 421 422 422 422 422 422 422 #>  [8767] 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 #>  [8785] 422 422 422 422 422 422 422 422 423 423 423 423 423 423 423 423 423 423 #>  [8803] 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 #>  [8821] 423 423 423 423 423 423 423 423 424 424 424 424 424 424 424 424 424 424 #>  [8839] 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 #>  [8857] 424 424 424 424 424 424 424 424 424 424 424 424 424 424 425 425 425 425 #>  [8875] 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 #>  [8893] 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 426 #>  [8911] 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 #>  [8929] 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 #>  [8947] 426 426 426 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 #>  [8965] 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 #>  [8983] 427 427 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 #>  [9001] 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 #>  [9019] 428 428 428 428 428 428 428 428 428 429 429 429 429 429 429 429 429 429 #>  [9037] 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 #>  [9055] 429 429 429 429 429 429 429 429 429 430 430 430 430 430 430 430 430 430 #>  [9073] 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 #>  [9091] 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 431 431 431 #>  [9109] 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 #>  [9127] 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 #>  [9145] 431 431 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 #>  [9163] 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 #>  [9181] 432 432 432 432 432 432 432 432 432 433 433 433 433 433 433 433 433 433 #>  [9199] 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 #>  [9217] 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 #>  [9235] 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 #>  [9253] 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 #>  [9271] 434 434 434 434 434 434 435 435 435 435 435 435 435 435 435 435 435 435 #>  [9289] 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 #>  [9307] 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 #>  [9325] 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 #>  [9343] 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 #>  [9361] 436 436 436 436 436 436 436 436 436 436 436 436 436 437 437 437 437 437 #>  [9379] 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 #>  [9397] 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 #>  [9415] 437 437 437 437 437 437 437 437 437 438 438 438 438 438 438 438 438 438 #>  [9433] 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 #>  [9451] 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 #>  [9469] 438 438 438 438 438 438 438 438 438 439 439 439 439 439 439 439 439 439 #>  [9487] 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 #>  [9505] 439 439 439 439 439 439 439 439 439 440 440 440 440 440 440 440 440 440 #>  [9523] 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 #>  [9541] 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 #>  [9559] 440 440 440 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 #>  [9577] 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 #>  [9595] 441 441 441 441 441 441 441 441 441 441 441 441 441 442 442 442 442 442 #>  [9613] 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 #>  [9631] 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 443 #>  [9649] 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 #>  [9667] 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 #>  [9685] 443 443 443 443 443 443 443 443 443 443 443 444 444 444 444 444 444 444 #>  [9703] 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 #>  [9721] 444 444 444 444 444 444 444 444 444 444 444 444 444 444 445 445 445 445 #>  [9739] 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 #>  [9757] 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 #>  [9775] 445 445 445 445 445 445 445 445 445 445 446 446 446 446 446 446 446 446 #>  [9793] 446 446 446 446 446 446 446 446 446 446 446 446 446 446 446 446 446 446 #>  [9811] 446 446 446 446 446 446 446 446 446 446 446 446 447 447 447 447 447 447 #>  [9829] 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 #>  [9847] 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 #>  [9865] 447 447 447 447 447 448 448 448 448 448 448 448 448 448 448 448 448 448 #>  [9883] 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 #>  [9901] 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 #>  [9919] 448 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 #>  [9937] 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 #>  [9955] 449 449 449 449 449 449 449 449 449 449 450 450 450 450 450 450 450 450 #>  [9973] 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 #>  [9991] 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 #> [10009] 450 450 450 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 #> [10027] 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 #> [10045] 451 451 451 451 451 451 451 451 451 451 451 451 451 451 452 452 452 452 #> [10063] 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 #> [10081] 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 #> [10099] 452 452 452 452 452 452 452 452 452 452 452 452 452 452 453 453 453 453 #> [10117] 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 #> [10135] 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 #> [10153] 453 453 453 453 453 453 453 453 453 454 454 454 454 454 454 454 454 454 #> [10171] 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 #> [10189] 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 #> [10207] 454 454 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 #> [10225] 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 #> [10243] 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 #> [10261] 455 455 455 455 456 456 456 456 456 456 456 456 456 456 456 456 456 456 #> [10279] 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 #> [10297] 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 457 457 #> [10315] 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 #> [10333] 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 #> [10351] 457 457 457 457 457 457 457 458 458 458 458 458 458 458 458 458 458 458 #> [10369] 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 #> [10387] 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 #> [10405] 458 458 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 #> [10423] 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 #> [10441] 459 459 459 459 459 460 460 460 460 460 460 460 460 460 460 460 460 460 #> [10459] 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 #> [10477] 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 #> [10495] 460 460 460 460 460 460 460 460 461 461 461 461 461 461 461 461 461 461 #> [10513] 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 #> [10531] 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 462 462 462 #> [10549] 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 #> [10567] 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 #> [10585] 462 462 462 462 462 462 462 462 462 462 463 463 463 463 463 463 463 463 #> [10603] 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 #> [10621] 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 #> [10639] 463 463 463 463 464 464 464 464 464 464 464 464 464 464 464 464 464 464 #> [10657] 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 #> [10675] 464 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 #> [10693] 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 #> [10711] 465 465 465 465 465 465 465 465 465 465 466 466 466 466 466 466 466 466 #> [10729] 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 #> [10747] 466 466 466 466 466 466 466 466 466 466 467 467 467 467 467 467 467 467 #> [10765] 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 #> [10783] 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 468 #> [10801] 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 #> [10819] 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 #> [10837] 468 468 468 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 #> [10855] 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 #> [10873] 469 469 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 #> [10891] 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 #> [10909] 470 470 470 470 470 470 470 470 470 470 470 470 471 471 471 471 471 471 #> [10927] 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 #> [10945] 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 #> [10963] 471 471 471 471 472 472 472 472 472 472 472 472 472 472 472 472 472 472 #> [10981] 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 #> [10999] 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 #> [11017] 472 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 #> [11035] 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 #> [11053] 473 473 473 473 473 473 473 473 474 474 474 474 474 474 474 474 474 474 #> [11071] 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 #> [11089] 474 474 474 474 474 474 474 474 474 474 474 474 474 475 475 475 475 475 #> [11107] 475 475 475 475 475 475 475 475 475 475 475 475 475 475 475 475 475 475 #> [11125] 475 475 475 475 475 475 475 475 475 475 475 476 476 476 476 476 476 476 #> [11143] 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 #> [11161] 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 #> [11179] 476 476 476 476 476 477 477 477 477 477 477 477 477 477 477 477 477 477 #> [11197] 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 #> [11215] 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 #> [11233] 477 477 477 477 477 478 478 478 478 478 478 478 478 478 478 478 478 478 #> [11251] 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 #> [11269] 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 #> [11287] 478 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 #> [11305] 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 #> [11323] 479 479 479 479 479 479 479 479 479 479 479 479 479 480 480 480 480 480 #> [11341] 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 #> [11359] 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 #> [11377] 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 481 #> [11395] 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 #> [11413] 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 #> [11431] 481 481 481 481 482 482 482 482 482 482 482 482 482 482 482 482 482 482 #> [11449] 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 #> [11467] 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 483 #> [11485] 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 #> [11503] 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 #> [11521] 483 483 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 #> [11539] 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 #> [11557] 484 484 484 484 484 484 484 484 485 485 485 485 485 485 485 485 485 485 #> [11575] 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 #> [11593] 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 #> [11611] 485 485 485 485 485 485 485 486 486 486 486 486 486 486 486 486 486 486 #> [11629] 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 #> [11647] 486 486 486 486 486 486 486 486 486 486 486 486 487 487 487 487 487 487 #> [11665] 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 #> [11683] 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 #> [11701] 487 487 487 487 488 488 488 488 488 488 488 488 488 488 488 488 488 488 #> [11719] 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 #> [11737] 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 #> [11755] 488 488 488 488 488 488 488 488 488 489 489 489 489 489 489 489 489 489 #> [11773] 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 #> [11791] 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 #> [11809] 489 489 489 489 489 489 489 489 490 490 490 490 490 490 490 490 490 490 #> [11827] 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 #> [11845] 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 #> [11863] 490 490 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 #> [11881] 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 #> [11899] 491 491 491 491 491 491 491 492 492 492 492 492 492 492 492 492 492 492 #> [11917] 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 #> [11935] 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 #> [11953] 492 492 492 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 #> [11971] 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 #> [11989] 493 493 493 493 493 493 493 493 493 493 493 493 494 494 494 494 494 494 #> [12007] 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 #> [12025] 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 #> [12043] 494 494 494 494 494 494 494 494 495 495 495 495 495 495 495 495 495 495 #> [12061] 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 #> [12079] 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 #> [12097] 495 495 495 495 495 495 495 495 495 495 495 495 495 496 496 496 496 496 #> [12115] 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 #> [12133] 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 #> [12151] 496 496 496 496 496 496 497 497 497 497 497 497 497 497 497 497 497 497 #> [12169] 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 #> [12187] 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 #> [12205] 497 497 497 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 #> [12223] 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 #> [12241] 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 #> [12259] 498 498 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 #> [12277] 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 #> [12295] 499 499 499 499 499 499 499 499 499 499 499 499 499 500 500 500 500 500 #> [12313] 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 #> [12331] 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 #> [12349] 500 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 #> [12367] 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 #> [12385] 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 #> [12403] 501 501 501 501 501 501 502 502 502 502 502 502 502 502 502 502 502 502 #> [12421] 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 #> [12439] 502 502 502 502 502 503 503 503 503 503 503 503 503 503 503 503 503 503 #> [12457] 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 #> [12475] 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 #> [12493] 503 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 #> [12511] 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 #> [12529] 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 505 505 505 #> [12547] 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 #> [12565] 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 #> [12583] 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 506 506 #> [12601] 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 #> [12619] 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 #> [12637] 506 506 506 506 506 506 507 507 507 507 507 507 507 507 507 507 507 507 #> [12655] 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 #> [12673] 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 #> [12691] 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 #> [12709] 507 507 507 507 507 507 507 507 507 507 507 507 507 508 508 508 508 508 #> [12727] 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 #> [12745] 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 #> [12763] 508 508 508 508 508 508 508 508 508 508 508 509 509 509 509 509 509 509 #> [12781] 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 #> [12799] 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 #> [12817] 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 510 510 #> [12835] 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 #> [12853] 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 #> [12871] 510 510 510 510 510 510 510 510 510 510 510 510 510 511 511 511 511 511 #> [12889] 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 #> [12907] 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 #> [12925] 511 511 511 511 511 511 511 511 511 511 512 512 512 512 512 512 512 512 #> [12943] 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 #> [12961] 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 513 #> [12979] 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 #> [12997] 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 #> [13015] 513 513 513 513 513 513 513 513 513 513 513 513 513 514 514 514 514 514 #> [13033] 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 #> [13051] 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 #> [13069] 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 #> [13087] 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 #> [13105] 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 #> [13123] 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 #> [13141] 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 #> [13159] 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 #> [13177] 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 517 #> [13195] 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 #> [13213] 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 #> [13231] 517 517 517 517 517 517 517 517 517 517 517 517 518 518 518 518 518 518 #> [13249] 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 #> [13267] 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 #> [13285] 518 518 518 518 519 519 519 519 519 519 519 519 519 519 519 519 519 519 #> [13303] 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 #> [13321] 519 519 519 519 519 519 519 519 519 519 519 519 520 520 520 520 520 520 #> [13339] 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 #> [13357] 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 #> [13375] 520 520 520 520 520 520 520 521 521 521 521 521 521 521 521 521 521 521 #> [13393] 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 #> [13411] 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 #> [13429] 521 521 521 521 521 522 522 522 522 522 522 522 522 522 522 522 522 522 #> [13447] 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 #> [13465] 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 #> [13483] 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 #> [13501] 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 #> [13519] 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 #> [13537] 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 #> [13555] 523 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 #> [13573] 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 #> [13591] 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 #> [13609] 524 524 524 524 525 525 525 525 525 525 525 525 525 525 525 525 525 525 #> [13627] 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 #> [13645] 525 525 525 525 525 525 525 525 525 525 525 525 525 526 526 526 526 526 #> [13663] 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 #> [13681] 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 #> [13699] 526 526 526 526 526 526 526 526 526 526 526 526 527 527 527 527 527 527 #> [13717] 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 #> [13735] 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 #> [13753] 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 #> [13771] 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 #> [13789] 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 #> [13807] 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 529 529 529 #> [13825] 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 #> [13843] 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 #> [13861] 529 529 529 529 529 529 529 529 529 529 529 530 530 530 530 530 530 530 #> [13879] 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 #> [13897] 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 #> [13915] 530 530 530 530 531 531 531 531 531 531 531 531 531 531 531 531 531 531 #> [13933] 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 #> [13951] 531 531 531 531 531 531 531 531 531 531 531 532 532 532 532 532 532 532 #> [13969] 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 #> [13987] 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 #> [14005] 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 533 533 533 #> [14023] 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 #> [14041] 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 #> [14059] 533 533 533 533 533 533 533 533 533 533 533 533 534 534 534 534 534 534 #> [14077] 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 #> [14095] 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 #> [14113] 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 535 535 535 #> [14131] 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 #> [14149] 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 #> [14167] 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 #> [14185] 535 535 535 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 #> [14203] 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 #> [14221] 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 #> [14239] 536 536 536 536 536 536 536 536 537 537 537 537 537 537 537 537 537 537 #> [14257] 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 #> [14275] 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 538 538 #> [14293] 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 #> [14311] 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 #> [14329] 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 #> [14347] 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 #> [14365] 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 #> [14383] 539 539 539 539 539 539 539 539 539 539 539 539 539 539 540 540 540 540 #> [14401] 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 #> [14419] 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 #> [14437] 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 541 541 541 #> [14455] 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 #> [14473] 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 #> [14491] 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 #> [14509] 541 541 541 541 541 542 542 542 542 542 542 542 542 542 542 542 542 542 #> [14527] 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 #> [14545] 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 #> [14563] 542 542 542 542 542 542 543 543 543 543 543 543 543 543 543 543 543 543 #> [14581] 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 #> [14599] 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 #> [14617] 543 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 #> [14635] 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 #> [14653] 544 544 544 544 544 544 544 544 544 544 544 544 545 545 545 545 545 545 #> [14671] 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 #> [14689] 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 #> [14707] 545 545 545 545 545 545 545 545 546 546 546 546 546 546 546 546 546 546 #> [14725] 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 #> [14743] 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 #> [14761] 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 #> [14779] 546 546 546 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 #> [14797] 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 #> [14815] 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 #> [14833] 547 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 #> [14851] 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 #> [14869] 548 548 548 548 548 548 548 549 549 549 549 549 549 549 549 549 549 549 #> [14887] 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 #> [14905] 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 #> [14923] 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 550 550 #> [14941] 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 #> [14959] 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 #> [14977] 550 550 550 550 550 550 550 550 550 550 550 550 550 551 551 551 551 551 #> [14995] 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 #> [15013] 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 #> [15031] 551 551 551 551 551 551 551 551 551 551 551 551 551 552 552 552 552 552 #> [15049] 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 #> [15067] 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 #> [15085] 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 #> [15103] 552 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 #> [15121] 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 #> [15139] 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 #> [15157] 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 #> [15175] 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 #> [15193] 554 554 554 554 554 554 554 554 554 554 554 554 554 555 555 555 555 555 #> [15211] 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 #> [15229] 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 #> [15247] 555 555 555 555 555 555 555 555 556 556 556 556 556 556 556 556 556 556 #> [15265] 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 #> [15283] 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 #> [15301] 556 556 556 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 #> [15319] 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 #> [15337] 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 #> [15355] 557 557 557 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 #> [15373] 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 #> [15391] 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 #> [15409] 558 558 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 #> [15427] 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 #> [15445] 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 #> [15463] 559 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 #> [15481] 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 #> [15499] 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 #> [15517] 560 560 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 #> [15535] 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 #> [15553] 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 #> [15571] 561 561 561 561 561 561 562 562 562 562 562 562 562 562 562 562 562 562 #> [15589] 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 #> [15607] 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 #> [15625] 562 562 562 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 #> [15643] 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 #> [15661] 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 #> [15679] 563 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 #> [15697] 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 #> [15715] 564 564 564 564 564 564 564 564 564 564 565 565 565 565 565 565 565 565 #> [15733] 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 #> [15751] 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 #> [15769] 565 565 565 565 565 565 565 565 565 565 565 565 565 566 566 566 566 566 #> [15787] 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 #> [15805] 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 #> [15823] 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 #> [15841] 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 #> [15859] 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 #> [15877] 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 #> [15895] 567 567 567 567 567 567 567 567 567 567 567 567 567 568 568 568 568 568 #> [15913] 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 #> [15931] 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 #> [15949] 568 568 568 568 568 569 569 569 569 569 569 569 569 569 569 569 569 569 #> [15967] 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 #> [15985] 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 #> [16003] 569 569 569 569 570 570 570 570 570 570 570 570 570 570 570 570 570 570 #> [16021] 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 #> [16039] 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 #> [16057] 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 #> [16075] 570 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 #> [16093] 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 #> [16111] 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 #> [16129] 571 571 571 571 572 572 572 572 572 572 572 572 572 572 572 572 572 572 #> [16147] 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 #> [16165] 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 #> [16183] 572 572 572 572 572 572 572 572 573 573 573 573 573 573 573 573 573 573 #> [16201] 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 #> [16219] 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 #> [16237] 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 #> [16255] 573 573 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 #> [16273] 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 #> [16291] 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 #> [16309] 574 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 #> [16327] 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 #> [16345] 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 #> [16363] 575 575 575 575 575 575 575 575 575 575 575 576 576 576 576 576 576 576 #> [16381] 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 #> [16399] 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 #> [16417] 576 576 576 576 576 576 576 576 576 576 576 577 577 577 577 577 577 577 #> [16435] 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 #> [16453] 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 #> [16471] 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 #> [16489] 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 578 578 578 #> [16507] 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 #> [16525] 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 #> [16543] 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 579 579 579 #> [16561] 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 #> [16579] 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 #> [16597] 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 580 580 #> [16615] 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 #> [16633] 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 #> [16651] 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 #> [16669] 580 580 580 580 580 581 581 581 581 581 581 581 581 581 581 581 581 581 #> [16687] 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 #> [16705] 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 #> [16723] 581 581 581 581 581 581 581 581 581 581 581 581 581 582 582 582 582 582 #> [16741] 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 #> [16759] 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 #> [16777] 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 #> [16795] 582 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 #> [16813] 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 #> [16831] 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 #> [16849] 583 583 583 583 583 583 583 584 584 584 584 584 584 584 584 584 584 584 #> [16867] 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 #> [16885] 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 #> [16903] 584 584 584 584 584 584 584 584 584 584 584 584 584 584 585 585 585 585 #> [16921] 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 #> [16939] 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 #> [16957] 585 585 585 585 585 585 585 585 585 585 585 585 585 585 586 586 586 586 #> [16975] 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 #> [16993] 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 #> [17011] 586 586 586 586 586 586 586 587 587 587 587 587 587 587 587 587 587 587 #> [17029] 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 #> [17047] 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 #> [17065] 587 587 587 587 587 587 587 588 588 588 588 588 588 588 588 588 588 588 #> [17083] 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 #> [17101] 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 #> [17119] 588 588 588 588 588 588 588 589 589 589 589 589 589 589 589 589 589 589 #> [17137] 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 #> [17155] 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 #> [17173] 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 #> [17191] 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 #> [17209] 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 #> [17227] 590 590 590 590 590 590 590 590 590 590 590 590 590 590 591 591 591 591 #> [17245] 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 #> [17263] 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 #> [17281] 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 #> [17299] 591 591 591 591 591 591 592 592 592 592 592 592 592 592 592 592 592 592 #> [17317] 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 #> [17335] 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 #> [17353] 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 #> [17371] 592 592 592 592 592 592 592 592 592 593 593 593 593 593 593 593 593 593 #> [17389] 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 #> [17407] 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 #> [17425] 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 #> [17443] 593 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 #> [17461] 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 #> [17479] 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 #> [17497] 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 #> [17515] 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 #> [17533] 595 595 595 595 595 595 595 595 595 595 595 595 595 595 596 596 596 596 #> [17551] 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 #> [17569] 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 #> [17587] 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 597 #> [17605] 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 #> [17623] 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 #> [17641] 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 598 598 598 #> [17659] 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 #> [17677] 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 #> [17695] 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 #> [17713] 598 598 598 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 #> [17731] 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 #> [17749] 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 #> [17767] 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 600 #> [17785] 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 #> [17803] 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 #> [17821] 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 #> [17839] 600 600 600 600 600 600 600 600 600 600 601 601 601 601 601 601 601 601 #> [17857] 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 #> [17875] 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 #> [17893] 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 #> [17911] 601 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 #> [17929] 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 #> [17947] 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 #> [17965] 602 602 602 602 603 603 603 603 603 603 603 603 603 603 603 603 603 603 #> [17983] 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 #> [18001] 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 #> [18019] 603 603 603 603 603 603 603 603 603 603 604 604 604 604 604 604 604 604 #> [18037] 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 #> [18055] 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 #> [18073] 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 #> [18091] 604 604 604 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 #> [18109] 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 #> [18127] 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 #> [18145] 605 605 605 605 605 605 605 605 605 605 606 606 606 606 606 606 606 606 #> [18163] 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 #> [18181] 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 #> [18199] 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 607 607 #> [18217] 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 #> [18235] 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 #> [18253] 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 #> [18271] 607 607 607 607 607 607 607 607 607 607 607 607 607 607 608 608 608 608 #> [18289] 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 #> [18307] 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 #> [18325] 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 #> [18343] 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 #> [18361] 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 #> [18379] 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 #> [18397] 609 609 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 #> [18415] 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 #> [18433] 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 #> [18451] 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 611 611 611 #> [18469] 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 #> [18487] 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 #> [18505] 611 611 611 611 611 611 611 611 611 611 611 611 611 612 612 612 612 612 #> [18523] 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 #> [18541] 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 #> [18559] 612 612 612 612 612 612 612 612 612 612 612 612 612 612 613 613 613 613 #> [18577] 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 #> [18595] 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 #> [18613] 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 #> [18631] 613 613 613 613 613 613 613 613 613 613 614 614 614 614 614 614 614 614 #> [18649] 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 #> [18667] 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 #> [18685] 614 614 614 614 614 614 614 614 614 614 614 614 615 615 615 615 615 615 #> [18703] 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 #> [18721] 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 #> [18739] 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 #> [18757] 615 615 615 615 616 616 616 616 616 616 616 616 616 616 616 616 616 616 #> [18775] 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 #> [18793] 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 #> [18811] 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 617 617 #> [18829] 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 #> [18847] 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 #> [18865] 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 #> [18883] 617 617 617 617 617 617 618 618 618 618 618 618 618 618 618 618 618 618 #> [18901] 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 #> [18919] 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 #> [18937] 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 #> [18955] 618 618 618 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 #> [18973] 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 #> [18991] 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 #> [19009] 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 #> [19027] 619 619 619 619 620 620 620 620 620 620 620 620 620 620 620 620 620 620 #> [19045] 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 #> [19063] 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 621 #> [19081] 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 #> [19099] 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 #> [19117] 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 #> [19135] 621 621 621 621 622 622 622 622 622 622 622 622 622 622 622 622 622 622 #> [19153] 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 #> [19171] 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 #> [19189] 622 622 622 622 622 622 622 622 622 623 623 623 623 623 623 623 623 623 #> [19207] 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 #> [19225] 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 #> [19243] 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 #> [19261] 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 624 624 #> [19279] 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 #> [19297] 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 #> [19315] 624 624 624 624 624 624 624 624 624 624 624 624 624 625 625 625 625 625 #> [19333] 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 #> [19351] 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 #> [19369] 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 #> [19387] 625 625 625 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 #> [19405] 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 #> [19423] 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 #> [19441] 626 626 626 626 626 626 626 626 626 626 626 626 626 626 627 627 627 627 #> [19459] 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 #> [19477] 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 #> [19495] 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 #> [19513] 627 627 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 #> [19531] 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 #> [19549] 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 #> [19567] 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 629 629 #> [19585] 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 #> [19603] 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 #> [19621] 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 #> [19639] 629 629 629 629 629 629 629 629 629 629 629 629 629 630 630 630 630 630 #> [19657] 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 #> [19675] 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 #> [19693] 630 630 630 630 630 630 631 631 631 631 631 631 631 631 631 631 631 631 #> [19711] 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 #> [19729] 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 #> [19747] 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 #> [19765] 631 631 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 #> [19783] 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 #> [19801] 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 #> [19819] 632 632 632 632 633 633 633 633 633 633 633 633 633 633 633 633 633 633 #> [19837] 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 #> [19855] 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 #> [19873] 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 #> [19891] 633 633 633 633 633 634 634 634 634 634 634 634 634 634 634 634 634 634 #> [19909] 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 #> [19927] 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 #> [19945] 634 634 634 634 634 634 634 634 634 634 635 635 635 635 635 635 635 635 #> [19963] 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 #> [19981] 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 #> [19999] 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 #> [20017] 635 635 635 635 635 636 636 636 636 636 636 636 636 636 636 636 636 636 #> [20035] 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 #> [20053] 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 #> [20071] 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 #> [20089] 636 636 636 636 636 636 637 637 637 637 637 637 637 637 637 637 637 637 #> [20107] 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 #> [20125] 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 #> [20143] 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 #> [20161] 637 637 637 637 637 637 638 638 638 638 638 638 638 638 638 638 638 638 #> [20179] 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 #> [20197] 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 #> [20215] 638 638 638 638 639 639 639 639 639 639 639 639 639 639 639 639 639 639 #> [20233] 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 #> [20251] 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 #> [20269] 639 639 639 639 639 639 639 639 639 639 639 639 639 640 640 640 640 640 #> [20287] 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 #> [20305] 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 #> [20323] 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 #> [20341] 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 641 641 641 #> [20359] 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 #> [20377] 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 #> [20395] 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 #> [20413] 641 641 641 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 #> [20431] 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 #> [20449] 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 #> [20467] 642 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 #> [20485] 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 #> [20503] 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 #> [20521] 643 643 643 643 643 643 643 644 644 644 644 644 644 644 644 644 644 644 #> [20539] 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 #> [20557] 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 #> [20575] 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 #> [20593] 644 644 644 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 #> [20611] 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 #> [20629] 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 #> [20647] 645 645 645 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 #> [20665] 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 #> [20683] 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 #> [20701] 646 646 646 646 647 647 647 647 647 647 647 647 647 647 647 647 647 647 #> [20719] 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 #> [20737] 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 #> [20755] 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 #> [20773] 647 647 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 #> [20791] 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 #> [20809] 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 #> [20827] 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 649 649 #> [20845] 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 #> [20863] 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 #> [20881] 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 #> [20899] 649 649 649 649 649 649 649 649 649 649 649 649 650 650 650 650 650 650 #> [20917] 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 #> [20935] 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 #> [20953] 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 #> [20971] 650 650 650 650 650 650 650 650 650 650 650 650 651 651 651 651 651 651 #> [20989] 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 #> [21007] 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 #> [21025] 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 #> [21043] 651 651 651 651 652 652 652 652 652 652 652 652 652 652 652 652 652 652 #> [21061] 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 #> [21079] 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 #> [21097] 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 653 653 #> [21115] 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 #> [21133] 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 #> [21151] 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 #> [21169] 653 653 653 653 654 654 654 654 654 654 654 654 654 654 654 654 654 654 #> [21187] 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 #> [21205] 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 #> [21223] 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 655 655 655 #> [21241] 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 #> [21259] 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 #> [21277] 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 #> [21295] 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 #> [21313] 655 655 655 655 655 655 655 656 656 656 656 656 656 656 656 656 656 656 #> [21331] 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 #> [21349] 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 #> [21367] 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 #> [21385] 656 656 656 656 656 656 657 657 657 657 657 657 657 657 657 657 657 657 #> [21403] 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 #> [21421] 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 #> [21439] 657 657 657 657 657 658 658 658 658 658 658 658 658 658 658 658 658 658 #> [21457] 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 #> [21475] 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 #> [21493] 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 #> [21511] 658 658 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 #> [21529] 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 #> [21547] 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 #> [21565] 659 659 659 659 659 659 659 659 659 659 659 659 659 660 660 660 660 660 #> [21583] 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 #> [21601] 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 #> [21619] 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 #> [21637] 660 660 660 660 660 660 661 661 661 661 661 661 661 661 661 661 661 661 #> [21655] 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 #> [21673] 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 #> [21691] 661 661 661 661 661 661 661 661 661 661 662 662 662 662 662 662 662 662 #> [21709] 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 #> [21727] 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 #> [21745] 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 #> [21763] 662 662 662 662 662 662 662 663 663 663 663 663 663 663 663 663 663 663 #> [21781] 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 #> [21799] 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 #> [21817] 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 #> [21835] 663 663 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 #> [21853] 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 #> [21871] 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 #> [21889] 664 664 664 664 664 664 664 665 665 665 665 665 665 665 665 665 665 665 #> [21907] 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 #> [21925] 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 #> [21943] 665 665 665 665 665 665 665 665 665 665 665 665 665 665 666 666 666 666 #> [21961] 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 #> [21979] 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 #> [21997] 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 #> [22015] 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 667 #> [22033] 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 #> [22051] 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 #> [22069] 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 #> [22087] 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 668 668 668 #> [22105] 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 #> [22123] 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 #> [22141] 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 #> [22159] 668 668 668 668 668 668 668 668 668 668 668 668 668 668 669 669 669 669 #> [22177] 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 #> [22195] 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 #> [22213] 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 #> [22231] 669 669 669 669 669 669 669 669 670 670 670 670 670 670 670 670 670 670 #> [22249] 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 #> [22267] 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 #> [22285] 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 671 671 #> [22303] 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 #> [22321] 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 #> [22339] 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 #> [22357] 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 672 672 672 #> [22375] 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 #> [22393] 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 #> [22411] 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 #> [22429] 672 672 672 672 672 672 672 672 672 672 672 672 673 673 673 673 673 673 #> [22447] 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 #> [22465] 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 #> [22483] 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 #> [22501] 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 #> [22519] 673 673 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 #> [22537] 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 #> [22555] 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 #> [22573] 674 674 674 674 674 674 674 674 674 674 674 674 675 675 675 675 675 675 #> [22591] 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 #> [22609] 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 #> [22627] 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 #> [22645] 675 675 675 675 675 675 675 675 675 675 675 675 675 675 676 676 676 676 #> [22663] 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 #> [22681] 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 #> [22699] 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 #> [22717] 676 676 676 676 677 677 677 677 677 677 677 677 677 677 677 677 677 677 #> [22735] 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 #> [22753] 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 #> [22771] 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 #> [22789] 677 677 677 677 678 678 678 678 678 678 678 678 678 678 678 678 678 678 #> [22807] 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 #> [22825] 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 #> [22843] 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 679 679 #> [22861] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 #> [22879] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 #> [22897] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 #> [22915] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 #> [22933] 679 679 679 679 679 679 679 679 679 679 680 680 680 680 680 680 680 680 #> [22951] 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 #> [22969] 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 #> [22987] 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 #> [23005] 680 680 680 680 680 680 680 680 680 680 680 680 681 681 681 681 681 681 #> [23023] 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 #> [23041] 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 #> [23059] 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 #> [23077] 681 681 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 #> [23095] 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 #> [23113] 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 #> [23131] 682 682 682 682 682 682 682 682 683 683 683 683 683 683 683 683 683 683 #> [23149] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 #> [23167] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 #> [23185] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 #> [23203] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 #> [23221] 683 683 683 683 683 683 684 684 684 684 684 684 684 684 684 684 684 684 #> [23239] 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 #> [23257] 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 #> [23275] 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 685 685 685 #> [23293] 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 #> [23311] 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 #> [23329] 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 #> [23347] 685 685 685 685 685 685 685 685 685 686 686 686 686 686 686 686 686 686 #> [23365] 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 #> [23383] 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 #> [23401] 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 #> [23419] 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 #> [23437] 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 #> [23455] 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 #> [23473] 687 687 687 687 687 687 687 687 687 688 688 688 688 688 688 688 688 688 #> [23491] 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 #> [23509] 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 #> [23527] 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 #> [23545] 688 688 688 688 688 688 689 689 689 689 689 689 689 689 689 689 689 689 #> [23563] 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 #> [23581] 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 #> [23599] 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 #> [23617] 689 689 689 689 690 690 690 690 690 690 690 690 690 690 690 690 690 690 #> [23635] 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 #> [23653] 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 #> [23671] 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 #> [23689] 690 690 690 690 691 691 691 691 691 691 691 691 691 691 691 691 691 691 #> [23707] 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 #> [23725] 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 #> [23743] 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 #> [23761] 691 691 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23779] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23797] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23815] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23833] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 693 693 693 693 #> [23851] 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 #> [23869] 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 #> [23887] 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 #> [23905] 693 693 693 693 693 693 693 693 693 693 694 694 694 694 694 694 694 694 #> [23923] 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 #> [23941] 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 #> [23959] 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 #> [23977] 694 694 694 694 694 694 694 694 695 695 695 695 695 695 695 695 695 695 #> [23995] 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 #> [24013] 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 #> [24031] 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 #> [24049] 695 695 695 695 695 695 695 695 695 695 695 695 695 696 696 696 696 696 #> [24067] 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 #> [24085] 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 #> [24103] 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 #> [24121] 696 696 696 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 #> [24139] 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 #> [24157] 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 #> [24175] 697 697 697 697 697 697 697 697 697 697 697 697 697 697 698 698 698 698 #> [24193] 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 #> [24211] 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 #> [24229] 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 #> [24247] 698 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 #> [24265] 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 #> [24283] 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 #> [24301] 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 #> [24319] 699 699 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 #> [24337] 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 #> [24355] 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 #> [24373] 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 #> [24391] 700 700 700 700 700 700 700 700 701 701 701 701 701 701 701 701 701 701 #> [24409] 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 #> [24427] 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 #> [24445] 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 #> [24463] 701 701 701 701 701 701 701 701 701 701 701 701 701 701 702 702 702 702 #> [24481] 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 #> [24499] 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 #> [24517] 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 #> [24535] 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 703 703 703 #> [24553] 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 #> [24571] 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 #> [24589] 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 #> [24607] 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 #> [24625] 703 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 #> [24643] 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 #> [24661] 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 #> [24679] 704 704 704 704 704 704 704 704 704 704 704 704 704 705 705 705 705 705 #> [24697] 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 #> [24715] 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 #> [24733] 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 #> [24751] 705 705 705 705 705 705 705 705 705 705 705 705 705 705 706 706 706 706 #> [24769] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 #> [24787] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 #> [24805] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 #> [24823] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 #> [24841] 706 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 #> [24859] 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 #> [24877] 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 #> [24895] 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 #> [24913] 707 707 707 707 707 707 707 707 708 708 708 708 708 708 708 708 708 708 #> [24931] 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 #> [24949] 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 #> [24967] 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 #> [24985] 708 708 708 708 708 708 708 708 708 708 708 708 708 709 709 709 709 709 #> [25003] 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 #> [25021] 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 #> [25039] 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 #> [25057] 709 709 709 709 709 709 709 709 709 709 709 709 710 710 710 710 710 710 #> [25075] 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 #> [25093] 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 #> [25111] 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 #> [25129] 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 #> [25147] 710 710 710 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 #> [25165] 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 #> [25183] 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 #> [25201] 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 #> [25219] 711 711 711 711 711 711 711 711 711 711 711 712 712 712 712 712 712 712 #> [25237] 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 #> [25255] 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 #> [25273] 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 #> [25291] 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 #> [25309] 712 712 712 712 712 713 713 713 713 713 713 713 713 713 713 713 713 713 #> [25327] 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 #> [25345] 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 #> [25363] 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 #> [25381] 713 713 713 713 713 713 713 713 714 714 714 714 714 714 714 714 714 714 #> [25399] 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 #> [25417] 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 #> [25435] 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 #> [25453] 714 714 714 714 714 714 714 715 715 715 715 715 715 715 715 715 715 715 #> [25471] 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 #> [25489] 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 #> [25507] 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 #> [25525] 715 715 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 #> [25543] 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 #> [25561] 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 #> [25579] 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 717 717 #> [25597] 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 #> [25615] 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 #> [25633] 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 718 #> [25651] 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 #> [25669] 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 #> [25687] 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 #> [25705] 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 719 719 719 #> [25723] 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 #> [25741] 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 #> [25759] 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 #> [25777] 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 #> [25795] 719 719 719 719 719 719 719 720 720 720 720 720 720 720 720 720 720 720 #> [25813] 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 #> [25831] 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 #> [25849] 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 #> [25867] 720 720 720 720 720 720 721 721 721 721 721 721 721 721 721 721 721 721 #> [25885] 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 #> [25903] 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 #> [25921] 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 #> [25939] 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 #> [25957] 721 721 721 721 721 722 722 722 722 722 722 722 722 722 722 722 722 722 #> [25975] 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 #> [25993] 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 #> [26011] 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 #> [26029] 722 722 722 722 722 722 722 722 722 723 723 723 723 723 723 723 723 723 #> [26047] 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 #> [26065] 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 #> [26083] 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 #> [26101] 723 723 723 723 723 723 723 723 723 723 723 723 723 723 724 724 724 724 #> [26119] 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 #> [26137] 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 #> [26155] 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 #> [26173] 724 724 724 724 724 724 724 725 725 725 725 725 725 725 725 725 725 725 #> [26191] 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 #> [26209] 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 #> [26227] 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 #> [26245] 725 725 725 725 725 725 725 725 725 725 725 725 726 726 726 726 726 726 #> [26263] 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 #> [26281] 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 #> [26299] 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 #> [26317] 726 726 726 726 726 726 726 726 726 726 726 726 726 726 727 727 727 727 #> [26335] 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 #> [26353] 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 #> [26371] 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 #> [26389] 727 727 727 727 727 727 727 727 727 727 728 728 728 728 728 728 728 728 #> [26407] 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 #> [26425] 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 #> [26443] 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 #> [26461] 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 #> [26479] 728 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 #> [26497] 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 #> [26515] 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 #> [26533] 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 730 730 730 #> [26551] 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #> [26569] 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #> [26587] 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #> [26605] 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #> [26623] 730 730 730 730 730 730 730 731 731 731 731 731 731 731 731 731 731 731 #> [26641] 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 #> [26659] 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 #> [26677] 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 #> [26695] 731 731 731 731 731 731 731 731 731 731 731 731 731 731 732 732 732 732 #> [26713] 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 #> [26731] 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 #> [26749] 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 #> [26767] 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 #> [26785] 732 732 732 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 #> [26803] 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 #> [26821] 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 #> [26839] 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 #> [26857] 733 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 #> [26875] 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 #> [26893] 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 #> [26911] 734 734 734 734 734 734 735 735 735 735 735 735 735 735 735 735 735 735 #> [26929] 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 #> [26947] 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 #> [26965] 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 #> [26983] 735 735 735 735 735 735 735 735 735 735 735 735 735 736 736 736 736 736 #> [27001] 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 #> [27019] 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 #> [27037] 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 #> [27055] 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 #> [27073] 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 #> [27091] 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 #> [27109] 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 #> [27127] 737 737 737 737 737 737 737 737 737 738 738 738 738 738 738 738 738 738 #> [27145] 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 #> [27163] 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 #> [27181] 738 738 738 738 738 738 738 738 738 738 738 738 738 739 739 739 739 739 #> [27199] 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 #> [27217] 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 #> [27235] 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 #> [27253] 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 740 740 #> [27271] 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 #> [27289] 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 #> [27307] 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 #> [27325] 740 740 740 740 740 740 740 740 740 740 740 740 740 740 741 741 741 741 #> [27343] 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 #> [27361] 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 #> [27379] 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 #> [27397] 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 #> [27415] 741 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 #> [27433] 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 #> [27451] 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 #> [27469] 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 #> [27487] 742 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #> [27505] 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #> [27523] 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #> [27541] 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #> [27559] 743 743 743 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 #> [27577] 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 #> [27595] 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 #> [27613] 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 #> [27631] 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 #> [27649] 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 #> [27667] 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 #> [27685] 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 746 #> [27703] 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 #> [27721] 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 #> [27739] 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 #> [27757] 746 746 746 746 746 746 746 746 746 746 746 746 746 747 747 747 747 747 #> [27775] 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 #> [27793] 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 #> [27811] 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 #> [27829] 747 747 747 747 747 747 747 747 747 747 748 748 748 748 748 748 748 748 #> [27847] 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 #> [27865] 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 #> [27883] 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 #> [27901] 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 749 749 #> [27919] 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #> [27937] 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #> [27955] 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #> [27973] 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #> [27991] 749 749 749 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #> [28009] 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #> [28027] 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #> [28045] 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #> [28063] 750 750 750 750 750 750 750 750 750 751 751 751 751 751 751 751 751 751 #> [28081] 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 #> [28099] 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 #> [28117] 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 #> [28135] 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 #> [28153] 751 751 751 751 751 751 751 752 752 752 752 752 752 752 752 752 752 752 #> [28171] 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 #> [28189] 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 #> [28207] 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 #> [28225] 752 752 752 752 752 752 752 752 752 753 753 753 753 753 753 753 753 753 #> [28243] 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 #> [28261] 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 #> [28279] 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 #> [28297] 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 #> [28315] 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 #> [28333] 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 #> [28351] 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 #> [28369] 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 #> [28387] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 #> [28405] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 #> [28423] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 #> [28441] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 #> [28459] 755 755 755 755 755 755 755 755 756 756 756 756 756 756 756 756 756 756 #> [28477] 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 #> [28495] 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 #> [28513] 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 #> [28531] 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 #> [28549] 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #> [28567] 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #> [28585] 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #> [28603] 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #> [28621] 757 757 757 757 757 757 758 758 758 758 758 758 758 758 758 758 758 758 #> [28639] 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 #> [28657] 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 #> [28675] 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 #> [28693] 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 #> [28711] 758 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #> [28729] 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #> [28747] 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #> [28765] 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #> [28783] 759 759 759 759 759 759 759 759 759 759 760 760 760 760 760 760 760 760 #> [28801] 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 #> [28819] 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 #> [28837] 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 #> [28855] 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 #> [28873] 760 760 760 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #> [28891] 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #> [28909] 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #> [28927] 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #> [28945] 761 761 761 761 761 761 761 762 762 762 762 762 762 762 762 762 762 762 #> [28963] 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 #> [28981] 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 #> [28999] 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 #> [29017] 762 762 762 762 762 762 762 762 762 762 762 762 762 763 763 763 763 763 #> [29035] 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 #> [29053] 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 #> [29071] 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 #> [29089] 763 763 763 763 763 763 763 763 763 763 763 764 764 764 764 764 764 764 #> [29107] 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 #> [29125] 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 #> [29143] 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 #> [29161] 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 765 765 #> [29179] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 #> [29197] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 #> [29215] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 #> [29233] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 #> [29251] 765 765 765 765 765 765 765 765 765 765 765 765 765 766 766 766 766 766 #> [29269] 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 #> [29287] 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 #> [29305] 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 #> [29323] 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 #> [29341] 766 766 766 766 766 766 766 766 766 766 766 766 766 767 767 767 767 767 #> [29359] 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 #> [29377] 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 #> [29395] 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 #> [29413] 767 767 767 767 767 767 767 767 767 767 767 768 768 768 768 768 768 768 #> [29431] 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 #> [29449] 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 #> [29467] 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 #> [29485] 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 769 #> [29503] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [29521] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [29539] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [29557] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [29575] 769 769 769 769 769 769 769 769 770 770 770 770 770 770 770 770 770 770 #> [29593] 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 #> [29611] 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 #> [29629] 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 #> [29647] 770 770 770 770 770 770 771 771 771 771 771 771 771 771 771 771 771 771 #> [29665] 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 #> [29683] 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 #> [29701] 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 772 772 #> [29719] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 #> [29737] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 #> [29755] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 #> [29773] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 #> [29791] 772 772 772 772 772 772 772 772 772 772 772 772 773 773 773 773 773 773 #> [29809] 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 #> [29827] 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 #> [29845] 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 #> [29863] 773 773 773 773 773 773 773 773 773 773 773 773 774 774 774 774 774 774 #> [29881] 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 #> [29899] 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 #> [29917] 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 #> [29935] 774 774 774 774 774 774 774 774 774 774 774 774 775 775 775 775 775 775 #> [29953] 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 #> [29971] 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 #> [29989] 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 #> [30007] 775 775 775 775 775 775 775 775 775 775 775 775 776 776 776 776 776 776 #> [30025] 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 #> [30043] 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 #> [30061] 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 #> [30079] 776 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 #> [30097] 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 #> [30115] 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 #> [30133] 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 #> [30151] 777 777 777 777 777 777 777 777 777 777 778 778 778 778 778 778 778 778 #> [30169] 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 #> [30187] 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 #> [30205] 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 #> [30223] 778 778 778 778 778 778 779 779 779 779 779 779 779 779 779 779 779 779 #> [30241] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 #> [30259] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 #> [30277] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 #> [30295] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 780 780 780 780 #> [30313] 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [30331] 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [30349] 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [30367] 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [30385] 780 780 780 780 780 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30403] 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30421] 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30439] 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30457] 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30475] 781 781 781 781 781 781 781 781 781 781 781 782 782 782 782 782 782 782 #> [30493] 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 #> [30511] 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 #> [30529] 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 #> [30547] 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 #> [30565] 782 782 782 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 #> [30583] 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 #> [30601] 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 #> [30619] 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 #> [30637] 783 783 783 783 783 783 783 784 784 784 784 784 784 784 784 784 784 784 #> [30655] 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 #> [30673] 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 #> [30691] 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 #> [30709] 784 784 784 784 784 784 784 784 784 785 785 785 785 785 785 785 785 785 #> [30727] 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 #> [30745] 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 #> [30763] 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 #> [30781] 785 785 785 785 785 785 785 785 785 786 786 786 786 786 786 786 786 786 #> [30799] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30817] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30835] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30853] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30871] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 787 787 787 #> [30889] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 #> [30907] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 #> [30925] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 #> [30943] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 #> [30961] 787 787 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [30979] 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [30997] 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [31015] 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [31033] 788 788 788 788 788 788 788 788 788 788 788 788 789 789 789 789 789 789 #> [31051] 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 #> [31069] 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 #> [31087] 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 #> [31105] 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 #> [31123] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [31141] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [31159] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [31177] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [31195] 790 790 790 790 790 790 790 790 790 790 790 791 791 791 791 791 791 791 #> [31213] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [31231] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [31249] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [31267] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [31285] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [31303] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [31321] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [31339] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [31357] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 793 793 #> [31375] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [31393] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [31411] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [31429] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [31447] 793 793 793 793 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [31465] 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [31483] 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [31501] 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [31519] 794 794 794 794 794 794 794 794 795 795 795 795 795 795 795 795 795 795 #> [31537] 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 #> [31555] 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 #> [31573] 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 #> [31591] 795 795 795 795 795 795 795 795 795 795 795 795 795 795 796 796 796 796 #> [31609] 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 #> [31627] 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 #> [31645] 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 #> [31663] 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 #> [31681] 796 796 796 796 796 796 796 796 797 797 797 797 797 797 797 797 797 797 #> [31699] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31717] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31735] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31753] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31771] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31789] 797 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [31807] 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [31825] 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [31843] 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [31861] 798 798 798 798 798 798 798 798 799 799 799 799 799 799 799 799 799 799 #> [31879] 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 #> [31897] 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 #> [31915] 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 #> [31933] 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 #> [31951] 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 #> [31969] 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 #> [31987] 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 #> [32005] 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 801 801 #> [32023] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 #> [32041] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 #> [32059] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 #> [32077] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 #> [32095] 801 801 801 801 801 801 801 801 801 801 801 802 802 802 802 802 802 802 #> [32113] 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [32131] 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [32149] 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [32167] 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [32185] 802 802 802 802 803 803 803 803 803 803 803 803 803 803 803 803 803 803 #> [32203] 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 #> [32221] 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 #> [32239] 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 #> [32257] 803 803 803 803 803 803 803 803 804 804 804 804 804 804 804 804 804 804 #> [32275] 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 #> [32293] 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 #> [32311] 804 804 804 804 804 804 804 804 804 805 805 805 805 805 805 805 805 805 #> [32329] 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 #> [32347] 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 #> [32365] 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 #> [32383] 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 806 806 806 #> [32401] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [32419] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [32437] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [32455] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [32473] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 807 807 807 807 #> [32491] 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 #> [32509] 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 #> [32527] 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 #> [32545] 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 #> [32563] 807 807 807 807 807 807 807 807 807 807 807 807 808 808 808 808 808 808 #> [32581] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 #> [32599] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 #> [32617] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 #> [32635] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 #> [32653] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 809 809 809 #> [32671] 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 #> [32689] 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 #> [32707] 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 #> [32725] 809 809 809 809 809 809 809 809 809 809 809 809 809 810 810 810 810 810 #> [32743] 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 #> [32761] 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 #> [32779] 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 #> [32797] 810 810 810 810 810 810 810 810 810 810 810 810 810 811 811 811 811 811 #> [32815] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [32833] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [32851] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [32869] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [32887] 811 811 811 811 811 811 812 812 812 812 812 812 812 812 812 812 812 812 #> [32905] 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [32923] 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [32941] 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [32959] 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [32977] 812 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 #> [32995] 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 #> [33013] 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 #> [33031] 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 #> [33049] 813 813 813 813 813 813 813 813 813 813 813 814 814 814 814 814 814 814 #> [33067] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [33085] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [33103] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [33121] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [33139] 814 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [33157] 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [33175] 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [33193] 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [33211] 815 815 815 815 815 815 815 815 815 815 815 815 816 816 816 816 816 816 #> [33229] 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [33247] 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [33265] 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [33283] 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [33301] 816 816 816 816 817 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [33319] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [33337] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [33355] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [33373] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 818 818 818 818 #> [33391] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [33409] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [33427] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [33445] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [33463] 818 818 818 818 818 818 818 818 818 818 819 819 819 819 819 819 819 819 #> [33481] 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [33499] 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [33517] 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [33535] 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [33553] 819 819 819 819 819 819 819 819 819 820 820 820 820 820 820 820 820 820 #> [33571] 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 #> [33589] 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 #> [33607] 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 #> [33625] 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 821 821 #> [33643] 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 #> [33661] 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 #> [33679] 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 #> [33697] 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 822 822 822 #> [33715] 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 #> [33733] 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 #> [33751] 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 #> [33769] 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 #> [33787] 822 822 822 822 822 822 822 823 823 823 823 823 823 823 823 823 823 823 #> [33805] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 #> [33823] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 #> [33841] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 #> [33859] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 824 #> [33877] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 #> [33895] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 #> [33913] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 #> [33931] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 #> [33949] 824 824 824 824 824 824 824 824 824 824 824 825 825 825 825 825 825 825 #> [33967] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [33985] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [34003] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [34021] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [34039] 825 825 825 825 825 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [34057] 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [34075] 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [34093] 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [34111] 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [34129] 826 826 826 826 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [34147] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [34165] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [34183] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [34201] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 828 828 828 828 #> [34219] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 #> [34237] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 #> [34255] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 #> [34273] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 #> [34291] 828 828 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 #> [34309] 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 #> [34327] 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 #> [34345] 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 #> [34363] 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 830 830 830 #> [34381] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [34399] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [34417] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [34435] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [34453] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 831 #> [34471] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 #> [34489] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 #> [34507] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 #> [34525] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 #> [34543] 831 831 831 831 831 832 832 832 832 832 832 832 832 832 832 832 832 832 #> [34561] 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 #> [34579] 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 #> [34597] 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 #> [34615] 832 832 832 832 832 832 832 832 832 832 833 833 833 833 833 833 833 833 #> [34633] 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 #> [34651] 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 #> [34669] 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 #> [34687] 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 #> [34705] 833 833 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 #> [34723] 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 #> [34741] 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 #> [34759] 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 #> [34777] 834 834 834 834 834 834 835 835 835 835 835 835 835 835 835 835 835 835 #> [34795] 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 #> [34813] 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 #> [34831] 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 #> [34849] 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 836 #> [34867] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34885] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34903] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34921] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34939] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34957] 836 836 836 836 836 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [34975] 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [34993] 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [35011] 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [35029] 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 838 838 #> [35047] 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 #> [35065] 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 #> [35083] 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 #> [35101] 838 838 838 838 838 839 839 839 839 839 839 839 839 839 839 839 839 839 #> [35119] 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 #> [35137] 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 #> [35155] 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 #> [35173] 839 839 839 839 839 839 839 839 839 839 839 839 839 839 840 840 840 840 #> [35191] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [35209] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [35227] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [35245] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [35263] 840 840 840 840 840 840 841 841 841 841 841 841 841 841 841 841 841 841 #> [35281] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 #> [35299] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 #> [35317] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 #> [35335] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 842 #> [35353] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [35371] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [35389] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [35407] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [35425] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [35443] 842 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 #> [35461] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 #> [35479] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 #> [35497] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 #> [35515] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 844 844 844 844 #> [35533] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [35551] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [35569] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [35587] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [35605] 844 844 844 844 844 844 844 844 845 845 845 845 845 845 845 845 845 845 #> [35623] 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 #> [35641] 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 #> [35659] 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 #> [35677] 845 845 845 845 845 845 845 845 845 846 846 846 846 846 846 846 846 846 #> [35695] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [35713] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [35731] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [35749] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [35767] 846 846 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 #> [35785] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 #> [35803] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 #> [35821] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 #> [35839] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 848 848 848 848 #> [35857] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [35875] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [35893] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [35911] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [35929] 848 848 848 848 848 848 848 848 848 848 848 848 849 849 849 849 849 849 #> [35947] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [35965] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [35983] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [36001] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [36019] 849 849 849 849 849 849 849 850 850 850 850 850 850 850 850 850 850 850 #> [36037] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [36055] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [36073] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [36091] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [36109] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 851 851 851 851 #> [36127] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [36145] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [36163] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [36181] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [36199] 851 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [36217] 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [36235] 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [36253] 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [36271] 852 852 852 852 852 852 852 852 852 852 852 853 853 853 853 853 853 853 #> [36289] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 #> [36307] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 #> [36325] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 #> [36343] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 #> [36361] 853 853 853 853 853 853 853 853 853 853 853 854 854 854 854 854 854 854 #> [36379] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [36397] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [36415] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [36433] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [36451] 854 854 854 854 854 854 854 854 854 854 854 854 854 855 855 855 855 855 #> [36469] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36487] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36505] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36523] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36541] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36559] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36577] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36595] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36613] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36631] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 857 857 857 #> [36649] 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [36667] 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [36685] 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [36703] 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [36721] 857 857 857 857 857 857 857 857 857 857 857 858 858 858 858 858 858 858 #> [36739] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [36757] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [36775] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [36793] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [36811] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36829] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36847] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36865] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36883] 859 859 859 859 859 859 859 859 859 859 859 859 860 860 860 860 860 860 #> [36901] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 #> [36919] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 #> [36937] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 #> [36955] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 #> [36973] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 861 861 861 861 #> [36991] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [37009] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [37027] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [37045] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [37063] 861 861 861 861 861 861 861 861 861 861 861 861 861 862 862 862 862 862 #> [37081] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [37099] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [37117] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [37135] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [37153] 862 862 862 862 862 862 863 863 863 863 863 863 863 863 863 863 863 863 #> [37171] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [37189] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [37207] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [37225] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [37243] 863 863 863 863 863 863 863 863 863 864 864 864 864 864 864 864 864 864 #> [37261] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [37279] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [37297] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [37315] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [37333] 864 864 864 864 864 864 864 864 865 865 865 865 865 865 865 865 865 865 #> [37351] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 #> [37369] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 #> [37387] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 #> [37405] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 #> [37423] 865 865 865 865 865 865 865 865 865 866 866 866 866 866 866 866 866 866 #> [37441] 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 #> [37459] 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 #> [37477] 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 #> [37495] 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 867 867 #> [37513] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 #> [37531] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 #> [37549] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 #> [37567] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 #> [37585] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 868 868 868 868 #> [37603] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37621] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37639] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37657] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37675] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 869 #> [37693] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 #> [37711] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 #> [37729] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 #> [37747] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 #> [37765] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 870 #> [37783] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [37801] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [37819] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [37837] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [37855] 870 870 870 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37873] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37891] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37909] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37927] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37945] 871 871 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [37963] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [37981] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [37999] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [38017] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 873 #> [38035] 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 #> [38053] 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 #> [38071] 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 #> [38089] 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 #> [38107] 873 873 873 873 873 873 873 873 873 873 873 873 873 874 874 874 874 874 #> [38125] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [38143] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [38161] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [38179] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [38197] 874 874 874 874 874 874 874 874 874 875 875 875 875 875 875 875 875 875 #> [38215] 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 #> [38233] 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 #> [38251] 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 #> [38269] 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 #> [38287] 875 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [38305] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [38323] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [38341] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [38359] 876 876 876 876 876 876 876 876 876 877 877 877 877 877 877 877 877 877 #> [38377] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [38395] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [38413] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [38431] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [38449] 877 877 877 877 877 877 877 877 877 877 877 877 877 878 878 878 878 878 #> [38467] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38485] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38503] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38521] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38539] 878 878 878 878 878 878 878 878 879 879 879 879 879 879 879 879 879 879 #> [38557] 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [38575] 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [38593] 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [38611] 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [38629] 879 879 879 879 879 879 879 879 879 880 880 880 880 880 880 880 880 880 #> [38647] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 #> [38665] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 #> [38683] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 #> [38701] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 #> [38719] 880 880 880 880 880 880 880 881 881 881 881 881 881 881 881 881 881 881 #> [38737] 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [38755] 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [38773] 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [38791] 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [38809] 881 881 881 881 881 881 882 882 882 882 882 882 882 882 882 882 882 882 #> [38827] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 #> [38845] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 #> [38863] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 #> [38881] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 #> [38899] 882 882 882 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38917] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38935] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38953] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38971] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38989] 883 883 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [39007] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [39025] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [39043] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [39061] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 885 885 #> [39079] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [39097] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [39115] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [39133] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [39151] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 886 #> [39169] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [39187] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [39205] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [39223] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [39241] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 887 #> [39259] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [39277] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [39295] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [39313] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [39331] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [39349] 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [39367] 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [39385] 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [39403] 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [39421] 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 889 889 889 #> [39439] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39457] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39475] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39493] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39511] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39529] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39547] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39565] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39583] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39601] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39619] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39637] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 891 #> [39655] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [39673] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [39691] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [39709] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [39727] 891 891 891 891 891 891 892 892 892 892 892 892 892 892 892 892 892 892 #> [39745] 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 #> [39763] 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 #> [39781] 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 #> [39799] 892 892 892 892 892 892 892 892 892 892 893 893 893 893 893 893 893 893 #> [39817] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39835] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39853] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39871] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39889] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39907] 893 893 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39925] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39943] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39961] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39979] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39997] 894 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [40015] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [40033] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [40051] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [40069] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [40087] 895 895 895 895 895 895 895 896 896 896 896 896 896 896 896 896 896 896 #> [40105] 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 #> [40123] 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 #> [40141] 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 #> [40159] 896 896 896 896 896 896 896 896 896 896 896 896 897 897 897 897 897 897 #> [40177] 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 #> [40195] 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 #> [40213] 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 #> [40231] 897 897 897 897 897 897 897 897 897 897 898 898 898 898 898 898 898 898 #> [40249] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [40267] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [40285] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [40303] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [40321] 898 898 898 898 898 898 898 898 898 898 899 899 899 899 899 899 899 899 #> [40339] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 #> [40357] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 #> [40375] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 #> [40393] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 #> [40411] 899 899 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40429] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40447] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40465] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40483] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 901 901 901 #> [40501] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40519] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40537] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40555] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40573] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 902 902 #> [40591] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40609] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40627] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40645] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40663] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40681] 902 902 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40699] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40717] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40735] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40753] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40771] 903 903 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40789] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40807] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40825] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40843] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40861] 904 904 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40879] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40897] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40915] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40933] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40951] 905 905 905 905 905 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [40969] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [40987] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [41005] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [41023] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [41041] 906 906 906 906 906 906 906 907 907 907 907 907 907 907 907 907 907 907 #> [41059] 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [41077] 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [41095] 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [41113] 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [41131] 907 907 907 907 907 907 907 907 907 907 908 908 908 908 908 908 908 908 #> [41149] 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 #> [41167] 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 #> [41185] 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 #> [41203] 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 #> [41221] 908 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [41239] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [41257] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [41275] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [41293] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 910 910 910 #> [41311] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [41329] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [41347] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [41365] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [41383] 910 910 910 910 910 910 911 911 911 911 911 911 911 911 911 911 911 911 #> [41401] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [41419] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [41437] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [41455] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [41473] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [41491] 911 911 911 911 911 911 911 911 911 912 912 912 912 912 912 912 912 912 #> [41509] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41527] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41545] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41563] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41581] 912 912 912 912 912 912 912 912 912 912 913 913 913 913 913 913 913 913 #> [41599] 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 #> [41617] 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 #> [41635] 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 #> [41653] 913 913 913 913 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41671] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41689] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41707] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41725] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41743] 914 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [41761] 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [41779] 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [41797] 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [41815] 915 915 915 915 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41833] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41851] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41869] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41887] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41905] 916 916 916 916 916 916 916 916 916 916 916 917 917 917 917 917 917 917 #> [41923] 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [41941] 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [41959] 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [41977] 917 917 917 917 917 917 917 917 917 917 917 918 918 918 918 918 918 918 #> [41995] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [42013] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [42031] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [42049] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [42067] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [42085] 918 918 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [42103] 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [42121] 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [42139] 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [42157] 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [42175] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [42193] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [42211] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [42229] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [42247] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [42265] 920 920 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [42283] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [42301] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [42319] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [42337] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [42355] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 922 922 922 #> [42373] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [42391] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [42409] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [42427] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [42445] 922 922 922 922 922 922 922 922 922 922 922 923 923 923 923 923 923 923 #> [42463] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42481] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42499] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42517] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42535] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42553] 923 923 923 923 923 923 923 924 924 924 924 924 924 924 924 924 924 924 #> [42571] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [42589] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [42607] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [42625] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [42643] 924 924 924 924 924 924 924 925 925 925 925 925 925 925 925 925 925 925 #> [42661] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42679] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42697] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42715] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42733] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 926 926 #> [42751] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 #> [42769] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 #> [42787] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 #> [42805] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 #> [42823] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42841] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42859] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42877] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42895] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42913] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42931] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42949] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42967] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42985] 928 928 928 928 928 928 929 929 929 929 929 929 929 929 929 929 929 929 #> [43003] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [43021] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [43039] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [43057] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 930 #> [43075] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [43093] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [43111] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [43129] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [43147] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [43165] 930 930 930 930 930 930 930 930 930 930 930 930 931 931 931 931 931 931 #> [43183] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [43201] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [43219] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [43237] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [43255] 931 931 931 931 931 931 931 931 932 932 932 932 932 932 932 932 932 932 #> [43273] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [43291] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [43309] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [43327] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [43345] 932 932 932 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [43363] 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [43381] 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [43399] 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [43417] 933 933 933 933 933 933 933 933 933 933 933 933 933 933 934 934 934 934 #> [43435] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43453] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43471] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43489] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43507] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43525] 934 934 934 934 934 934 934 934 934 934 934 935 935 935 935 935 935 935 #> [43543] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43561] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43579] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43597] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43615] 935 935 935 935 935 935 935 935 935 935 935 935 936 936 936 936 936 936 #> [43633] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43651] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43669] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43687] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43705] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43723] 936 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [43741] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [43759] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [43777] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [43795] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 938 #> [43813] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [43831] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [43849] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [43867] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [43885] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 939 #> [43903] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 #> [43921] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 #> [43939] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 #> [43957] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 940 940 #> [43975] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [43993] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [44011] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [44029] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [44047] 940 940 940 940 940 940 940 940 940 941 941 941 941 941 941 941 941 941 #> [44065] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [44083] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [44101] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [44119] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [44137] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 942 942 942 942 #> [44155] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [44173] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [44191] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [44209] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [44227] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 943 943 943 #> [44245] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [44263] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [44281] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [44299] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [44317] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [44335] 943 943 943 943 943 943 943 943 943 943 943 943 943 944 944 944 944 944 #> [44353] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [44371] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [44389] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [44407] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [44425] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 945 945 945 #> [44443] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44461] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44479] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44497] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44515] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44533] 945 945 945 945 945 945 945 945 945 945 945 945 945 946 946 946 946 946 #> [44551] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 #> [44569] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 #> [44587] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 #> [44605] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 #> [44623] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 947 #> [44641] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44659] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44677] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44695] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44713] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44731] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 948 948 948 #> [44749] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44767] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44785] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44803] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44821] 948 948 948 948 948 948 948 948 948 948 948 948 949 949 949 949 949 949 #> [44839] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44857] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44875] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44893] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44911] 949 949 949 949 949 949 949 949 949 949 950 950 950 950 950 950 950 950 #> [44929] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [44947] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [44965] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [44983] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [45001] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 951 951 951 #> [45019] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [45037] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [45055] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [45073] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [45091] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [45109] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [45127] 951 951 951 951 951 951 952 952 952 952 952 952 952 952 952 952 952 952 #> [45145] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [45163] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [45181] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [45199] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [45217] 952 952 952 952 952 952 952 952 952 952 952 952 953 953 953 953 953 953 #> [45235] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [45253] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [45271] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [45289] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [45307] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [45325] 953 953 953 953 953 953 954 954 954 954 954 954 954 954 954 954 954 954 #> [45343] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [45361] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [45379] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [45397] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [45415] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [45433] 954 954 954 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45451] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45469] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45487] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45505] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45523] 955 955 955 955 955 955 955 955 955 956 956 956 956 956 956 956 956 956 #> [45541] 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 #> [45559] 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 #> [45577] 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 #> [45595] 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 957 957 957 #> [45613] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45631] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45649] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45667] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45685] 957 957 957 957 957 957 957 957 957 957 958 958 958 958 958 958 958 958 #> [45703] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [45721] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [45739] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [45757] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [45775] 958 958 958 958 958 958 958 958 958 958 959 959 959 959 959 959 959 959 #> [45793] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [45811] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [45829] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [45847] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [45865] 959 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [45883] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [45901] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [45919] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [45937] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 961 961 961 961 #> [45955] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [45973] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [45991] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [46009] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [46027] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [46045] 961 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [46063] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [46081] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [46099] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [46117] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 963 #> [46135] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [46153] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [46171] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [46189] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [46207] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [46225] 963 963 963 963 963 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [46243] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [46261] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [46279] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [46297] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [46315] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [46333] 964 964 964 964 964 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [46351] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [46369] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [46387] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [46405] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [46423] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 966 #> [46441] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46459] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46477] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46495] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46513] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46531] 966 966 966 966 966 966 966 966 966 966 966 966 966 967 967 967 967 967 #> [46549] 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 #> [46567] 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 #> [46585] 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 #> [46603] 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 #> [46621] 967 967 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46639] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46657] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46675] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46693] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46711] 968 968 968 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46729] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46747] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46765] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46783] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46801] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 970 970 970 #> [46819] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46837] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46855] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46873] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46891] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46909] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 971 971 971 971 #> [46927] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [46945] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [46963] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [46981] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [46999] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [47017] 971 971 971 971 971 971 971 971 972 972 972 972 972 972 972 972 972 972 #> [47035] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [47053] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [47071] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [47089] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [47107] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [47125] 972 972 972 972 972 972 972 972 972 973 973 973 973 973 973 973 973 973 #> [47143] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [47161] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [47179] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [47197] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [47215] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [47233] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [47251] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [47269] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [47287] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [47305] 974 974 974 974 974 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [47323] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [47341] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [47359] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [47377] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [47395] 975 975 975 975 975 975 975 975 975 976 976 976 976 976 976 976 976 976 #> [47413] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47431] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47449] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47467] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47485] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47503] 976 976 976 976 976 976 976 977 977 977 977 977 977 977 977 977 977 977 #> [47521] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47539] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47557] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47575] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47593] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47611] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 978 978 978 #> [47629] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47647] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47665] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47683] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47701] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47719] 978 978 978 978 978 978 978 978 978 978 978 979 979 979 979 979 979 979 #> [47737] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47755] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47773] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47791] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47809] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47827] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 980 980 #> [47845] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47863] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47881] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47899] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47917] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47935] 980 980 980 980 980 980 980 980 980 981 981 981 981 981 981 981 981 981 #> [47953] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [47971] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [47989] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [48007] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [48025] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [48043] 981 981 981 981 981 981 981 981 981 981 982 982 982 982 982 982 982 982 #> [48061] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [48079] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [48097] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [48115] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [48133] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [48151] 982 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [48169] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [48187] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [48205] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [48223] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [48241] 983 983 983 983 983 983 984 984 984 984 984 984 984 984 984 984 984 984 #> [48259] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [48277] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [48295] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [48313] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [48331] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [48349] 984 984 984 984 984 984 984 984 984 984 984 985 985 985 985 985 985 985 #> [48367] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [48385] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [48403] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [48421] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [48439] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [48457] 985 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [48475] 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [48493] 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [48511] 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [48529] 986 986 986 986 986 986 986 986 986 986 986 986 986 987 987 987 987 987 #> [48547] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48565] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48583] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48601] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48619] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48637] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 988 988 988 988 #> [48655] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48673] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48691] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48709] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48727] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48745] 988 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48763] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48781] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48799] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48817] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48835] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 990 990 990 990 #> [48853] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48871] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48889] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48907] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48925] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 991 991 #> [48943] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48961] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48979] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48997] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [49015] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [49033] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 992 992 992 #> [49051] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [49069] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [49087] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [49105] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [49123] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 993 993 993 #> [49141] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [49159] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [49177] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [49195] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [49213] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [49231] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [49249] 993 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [49267] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [49285] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [49303] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [49321] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [49339] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [49357] 994 994 994 994 994 994 994 994 994 994 994 995 995 995 995 995 995 995 #> [49375] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [49393] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [49411] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [49429] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [49447] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [49465] 995 995 995 995 995 995 995 996 996 996 996 996 996 996 996 996 996 996 #> [49483] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49501] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49519] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49537] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49555] 996 996 996 996 996 996 996 996 996 996 996 996 996 997 997 997 997 997 #> [49573] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49591] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49609] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49627] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49645] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49663] 997 997 997 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49681] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49699] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49717] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49735] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49753] 998 998 998 998 998 998 998 998 998 998 998 998 999 999 999 999 999 999 #> [49771] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49789] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49807] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49825] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49843] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49861] 999 999 999 #>  #> [[4]] #>     [1]   1   4   7   8  10   5   0   3   8  10   6   8   7   5  11  14  18  11 #>    [19]   6  15  17   3  13  18  19   0   3   8  14  18   1   8   9  18   3   6 #>    [37]  11  15   7  14  22  25   1   4   5  12  14   5   7  20  10  20   6   8 #>    [55]  28   7  11  15  23  14  29  30   0   5  15  16  19  21  27   3  20  21 #>    [73]  25   2  11  18   7   4  10  13  18  22  24  25  10  33  34  36  13  15 #>    [91]  20  23  25  32   1   3  26  38   0   1  12  29  32  37  40   5  17  30 #>   [109]  31   1  11  13  32   3  20  19  31  45   2   5   8  12  14  24  32  37 #>   [127]  45   2  21  27  36  38  41   0   3  12  19  23  43  12  44  45  34   4 #>   [145]  13  19  27  35  37  46  50   6   9  12  20  21  29  30  32  37  46  48 #>   [163]   6  17  38  41  50   1   4   3  11  15  31  41   1   9  14  17  19  25 #>   [181]  35  36  54  56   1   6  12  24  57   5  21  36  39  48  51  17  36  42 #>   [199]  50  51   1  11  33  43  51  42  52  12  14  17  21  28  29  34  43  45 #>   [217]  47   0   3  13  16   3  42  43  46  51  58  62   4   6  20  21  26  28 #>   [235]  29  41  57  60   8  17  21  26  27  30  41  59  61  63   8  18  21  37 #>   [253]  47  49  57  62  10  19  27  47  48  68   0  35  48  57  58  11  14  32 #>   [271]  50  57  60  18  33  53  60  62  65  71   1  10  14  15  20  50  53  56 #>   [289]  59  61  69  71   8  15  21  23  52  54   9  19  38  46  64  74   1   3 #>   [307]   7   8  13  14  28  31  38  50  53  58  70  72  53  56  64  66  18  24 #>   [325]  51  69  71   3   4  34  47  53  55   8  39  45  54  72  29  31  67  68 #>   [343]  77  79   3   8  10  15  25  28  33  35  43  45  54  62  77  81   6  11 #>   [361]  12  27  29  34  57  64  76   5   7  14  16  28  30  36  45  47  62  63 #>   [379]  68  69  70  79  45  53  68  72  77   1   4  11  55  56  64  67   7  16 #>   [397]  32  39  45  48  52   8  11  31  79  87  20  22  27  35  38  48   2  10 #>   [415]  23  30  37  47  50  83  87   7  12  16  19  33  54  84   2   7  18  20 #>   [433]  23  30  38  17  18  31  63  74  88  91  92   1  40  47  59  66  68  69 #>   [451]  81   2   6   7  29  66   8  30  58  73  89   1   3  10  12  21  24  46 #>   [469]  49  55  57  59  73  81   2   6   7   9  21  29  30  35  36  41  44  55 #>   [487]  56  59  63  69   7  19  48  52  63  65  93   6  21  24  29  38  42  55 #>   [505]  62  64  66  73  80  84  86  89   0   8  19  56  62  90  97   7  31  36 #>   [523]  39  40  41  69  80  82  86  99   8  19  20  24  45  70  84  99   7   9 #>   [541]  10  19  32  36  39  42  61  62  71  79  89   8   9  12  33  52  53  62 #>   [559]  67  73  76 103   3  27  31  37  46  58  66  86  90  95   1  39  56  65 #>   [577]  68  72  73  77 104   3   8  16  22  52  67  71  80 101 102 104 106 107 #>   [595]   6   8  12  21  44  47  60  61  62  77  90  96 104 106   0   6  37  44 #>   [613]  66  75  92   1   2  37  71  75  79  91 101   4   5   7   8  11  48  53 #>   [631]  66  72  73  88 108   8  40  42  64  72  76  87  99 102 106   2   9  20 #>   [649]  25  27  61  73  85  90  98 105 107   3  28  29  45  63  67  69  70  73 #>   [667]  75  83  91  92 110 113 114   5   6   9  19  20  31  32  48  59  72  81 #>   [685]  86  91  93 100 101 105 109 112   3  14  26  28  41  46  49  53  66  72 #>   [703] 107 108   2   4  11  12  21  26  47  53  58  63  81  92 100 101 103 104 #>   [721]  27  30  50  73  81  82  91  95 102 105   7  17  43  67  68  74  82 109 #>   [739] 117   2  31  40  42  67  80  82  83 100 110  28  41  44  47  91  95 102 #>   [757] 105   3   4   6  29  31  36  43  60  62  82  92   0   4  15  19  29  52 #>   [775]  66  82  98 102 103 117 118 123   1  34  45  50  51  52  65  75  88  92 #>   [793] 102 108 114 115 118   9  12  38  39  62  63 100 104 116 121   0   1  12 #>   [811]  21  48  49  52  62  63  66  71  76 108  17  29  31  37  40  46  47 102 #>   [829] 115   0  16  21  23  27  63  78  79  80  89 102 107 111 114  13  32  37 #>   [847]  46  47  48  54  64  66  77  91  94 101 108 117 119 123  34  38  40  43 #>   [865]  45  62  65 103 106 111  14  25  38  46  56  67  68  82  89  92 101 108 #>   [883] 109   5   6   8  15  38  48  51  53  54  69  70  81  83  91 118 126   1 #>   [901]   4   6  12  28  35  39  41  42  47  55  84  89 103 105 119 123 133   4 #>   [919]  12  20  54  64  65  70  74  88 106 107 118 126 127 129  21  29  36  42 #>   [937]  61  62  68  79  86  19  22  31  35  44  48  55  63  65  73  90  91 104 #>   [955] 113 120 125   3  11  17  22  30  52  56  58  61  67  68  76  83 130 133 #>   [973]   0   4  20  24  32  55  61  63  67  69 109 114 131 135 136  27  32  33 #>   [991]  50  51  55  56  63  68  71  95  99 100 102 127   7  38  68  71  99 139 #>  [1009]  13  14  15  26  32  35  36  42  44  46  54  60  78  84 128 134 136 139 #>  [1027] 140   0   4  16  23  40  42  44  46  65  71  73  76  92  94 114  16  20 #>  [1045]  42  59  72  75  81  91  96 112 116 139 141   2   6  16  20  22  33  48 #>  [1063]  51  60  64  74  82  88  90 102 110 119 133 138   8  15  22  27  72  80 #>  [1081]  99 103 113 118 119 123 124 128 133 141   7  13  44  48  61  68  70  72 #>  [1099]  91 118 119 122 132 135 137 139 143   9  13  21  28  29  31  36  37  38 #>  [1117]  58  78  82  83  91 107 110 114 135 145   6   7  10  19  22  42  50  80 #>  [1135]  91  95 103 124 126 127   3  17  25  26  42  57  65  73  76  79 104 117 #>  [1153] 131  11  15  16  18  35  51  52  57  67  68  73  95 102 106 110 117 143 #>  [1171]   7  24  55  56  59  73  90 111 135 137 141   8  22  46  51  55  63  65 #>  [1189]  68  87 101 108 122 129 130 147 152   5   8  10  33  52  57  66  76  83 #>  [1207] 105 108 123 134 147 153   7  33  59  65  67  72  87  95 115 124 125 133 #>  [1225] 147   0   5   9  12  15  17  27  30  33  35  39  43  52  91 108 109 119 #>  [1243] 120 121 132 134   8  19  29  59  73  75 112 148 149 156  11  16  21  23 #>  [1261]  64  67  68  84  86  97 102 126 131 146 149 151  13  16  25  36  43  59 #>  [1279]  61  72  77  79 122 131 134 139 146   2  25  44  76  78 103 105 127 129 #>  [1297] 141 144 150 151  11  25  26  51  72  98 101 141 150   1   2  11  21  35 #>  [1315]  43  47  67  84  89  96 104 108 118 123 125 142 148   3   7   8  30  34 #>  [1333]  38  60  66  73 106 120 124 132 141 161   3  53  87  89  92 125 143   1 #>  [1351]  13  38  53  58  63  88  89 101 115 131 139 145 151   8  10  38  65  67 #>  [1369]  71  77  85  98 107 116 120 125 138 145 164   6  26  45  46  59  71  74 #>  [1387]  85 101 120 135 140 141 142 144 149 163 164   3   6  10  20  23  28  30 #>  [1405]  34  67  73  80  82 120 122 136 142 162 164  22  30  49  52  56  92  97 #>  [1423] 130 137 141 146 154 160   7  10  13  35  41  45  46  52  56  63  64  65 #>  [1441]  70  72  87 126 134 139 148 150 166   0   7  11  26  40  58  75  89 105 #>  [1459] 110 122 123 135 159 169  23  30  58  85  96 103 104 122 132 138 142 147 #>  [1477] 166   6  14  22  32  35  45  54  63  69  89 104 108 110 120 131 138 139 #>  [1495] 150 169 170 171  19  25  30  32  36  40  51  53  65  82 107 109 113 116 #>  [1513] 156 160 164 169 171  17  33  41  54  58  60  65  75  87  93 105 107 114 #>  [1531] 120 127 129 133 149 160 173  13  20  58  66  88  89  90 103 107 110 122 #>  [1549] 124 125 130 132 140 150 152 174   2   5   7  14  33  36  37  58  63  82 #>  [1567]  87  90 105 106 108 117 118 123 137 140 160 171   2  16  19  24  37  55 #>  [1585]  64  65  87 106 108 116 122 132 134 146 157 159 170 171 176   3   9  48 #>  [1603]  90  93  95 100 103 130 137 160 165 173 178   4   7   9  27  32  35  57 #>  [1621]  58  67  78  92  95  97 120 134 137 142 176  33  48  49  53  63  86  94 #>  [1639] 101 105 124 125 150 173   0  71  81  86 111 112 115 121 122 146 148 165 #>  [1657] 169 179   4   5  25  27  72 129 137 144 148 149 156 160 166   8  14  20 #>  [1675]  26  49  67  83 118 119 170 172 183  11  12  23  30  33  44  61  64  78 #>  [1693]  80  87  96 120 126 135 141 156 163 182 183   2  16  23  27  53  58  87 #>  [1711]  97  99 102 107 110 111 113 115 123 136 152 155 165 185  39  51  59  62 #>  [1729]  63  84  87 100 113 115 121 130 137 146 155 183   1  10  39  45  51  57 #>  [1747]  69  71  72  83 126 151 156 158 160 162 174 179   1   3   5  29  51  68 #>  [1765]  78  87  96 108 109 112 116 125 164 171 176 180 183  15  29  41  44  57 #>  [1783]  86  89  98 102 105 112 116 124 131 135 157 187   4   7  27  44  48  62 #>  [1801]  64  77  82 103 105 108 120 134 141 153 160 166 168 175  10  12  14  18 #>  [1819]  47  50  51  54  61  72  76 101 107 113 120 125 135 137 140 142 153 164 #>  [1837] 166  22  48  51  58  62  77  84 125 128 137 143 160 181 188 192   0   3 #>  [1855]  13  36  52  60  73  78 120 132 140 151 177 185 188 190  10  11  28  31 #>  [1873]  34  36  38  47  61  70  77  78  86  89  90  95  96 101 102 109 114 131 #>  [1891] 139 140 152   0  20  24  26  34  38  40  47  60  70  78  84  87  88 106 #>  [1909] 119 140 146 154 158 160 166 176 181 184 187 190  15  38  55  59  67  76 #>  [1927]  93  94 107 117 118 136 145 172 183 184 189 194  30  35  37  40  45  47 #>  [1945]  48  64  65  72  80  93  94  99 104 110 115 127 137 139 148 153 155 159 #>  [1963] 163   6  17  28  34  55  73  76  80 101 102 137 147 148 157 158 163 172 #>  [1981] 179 197  19  20  45  50  57  66  75  91  92 122 124 132 139 152 162 166 #>  [1999] 178 191 192 195   5  18  39  45  48  51  82  83  86  95 114 123 136 139 #>  [2017] 171 175 176 177 178 188 199   5  17  19  23  31  54  57  73  89 101 108 #>  [2035] 122 139 141 150 156 172 193   0   1  11  14  30  33  34  41  54  68  90 #>  [2053]  91  99 112 122 129 133 136 137 157 169 174 176 181 182  15  27  29  40 #>  [2071]  66  81  93  95 104 113 130 131 149 155 160 187 193 194 201  13  73  97 #>  [2089] 100 104 111 117 122 124 126 157 175 176 181 183 197 203  19  26  27  44 #>  [2107]  47  61  72  97  98 110 112 125 143 147 149 163 171 175 183 186 189  12 #>  [2125]  19  22  25  39  53  68  77  78  82 111 123 141 151 153 160 167 168 180 #>  [2143] 181  13  41  56  67  85  87  91  92 101 111 128 132 134 136 148 150 159 #>  [2161] 160 161 167 201   0  18  40  58  71  79  85 101 104 117 118 120 129 139 #>  [2179] 144 145 156 165 171 183 192 200   8  15  16  28  34  36  41  46  68  72 #>  [2197]  79  93  95 100 112 125 126 127 132 136 146 158 168 184 198 201   5  12 #>  [2215]  25  27  50  54  55  63  84  91 100 102 123 124 136 157 162 173 174 185 #>  [2233] 186 191 198 208  29  41  47  80 100 124 140 162 164 178 186 192 197 199 #>  [2251] 210  14  16  25  28  37  47  53  55  61  67  74  89  97 106 111 123 125 #>  [2269] 129 138 145 157 162 186 193 203   7  27  28  39  47  50  52  71  77  93 #>  [2287]  97 124 127 131 143 159 169 171 173 178 183 194 200 201   0  11  12  24 #>  [2305]  34  48  53  54  59  77  94 106 108 141 147 149 154 158 169 176 192   5 #>  [2323]  12  22  33  41  45  54  57  91 108 112 136 144 149 172 177 211   5  20 #>  [2341]  21  30  46  53 135 141 152 153 154 169 179 184 191 208   9  10  32  33 #>  [2359]  66  76  86  92  99 101 128 135 138 139 142 146 148 149 153 162 171 181 #>  [2377] 194 200 209  17  33  50  55  59  62  72  79  84 105 108 116 118 123 133 #>  [2395] 137 150 153 158 159 196 207 210 212 215   1  17  28  53  56  57  84  89 #>  [2413]  97 113 118 124 130 140 145 157 163 183 188 197 203 217 218  21  23  42 #>  [2431]  45  61  62  68  88  91 100 104 122 129 132 136 138 139 170 185 191 200 #>  [2449] 208 209  11  12  23  31  54  67  73  78  88 114 119 142 149 156 169 172 #>  [2467] 174 185 194 195 202 207 216 217   9  45  46  52  54  59  62  73  76  84 #>  [2485] 100 107 111 118 124 130 134 143 147 163 169 180 186 196 198 201 213 219 #>  [2503]   5  11  18  20  26  52  56  58  90  94 113 121 139 152 157 158 162 181 #>  [2521] 182 185 193 195   6   8  29  41  44  79  90 108 112 120 141 152 157 170 #>  [2539] 177 191 192 198 203 204 216   1   8  12  31  34  40  52  72  82  85  92 #>  [2557] 105 122 138 139 141 148 149 150 155 166 174 175 190 192 193 201 207 212 #>  [2575]   0   5   9  22  37  38  49  69  83 106 120 153 157 193 206 221 225  24 #>  [2593]  38  40  48  85 103 113 116 118 122 134 157 170 179 182 189 199 206 215 #>  [2611] 224 227   3  19  23  45  55  56  58  62  65  89  94  96 109 114 124 127 #>  [2629] 131 146 153 157 160 182 190 214 220   8  19  30  44  64  67  68  72  80 #>  [2647]  91  95 103 106 130 133 134 143 149 152 159 191 201 202 204   0   1  61 #>  [2665]  66  67  72  80  83  89  95  99 130 138 153 165 169 170 178 194 198 208 #>  [2683]   3  23  27  44  54  62  63  68  69  71  87  97 127 130 134 135 140 145 #>  [2701] 155 157 161 163 168 172 180 185 197 205 217 218 221  13  24  40  73  76 #>  [2719]  83 107 109 116 135 138 141 153 179 186 192 196 200 207 219 226 230   0 #>  [2737]  17  42  47  50  54  61  64  65  72  79  88  89 102 108 127 128 129 131 #>  [2755] 141 144 148 154 183 188 200 202 205 230 233  10  28  38  47  53  58  67 #>  [2773]  70  75  81  92 100 107 112 124 125 140 144 146 152 158 167 186 192 205 #>  [2791] 225 228 232   6  31  33  35  55  77 108 120 126 149 164 166 171 183 188 #>  [2809] 216   5   7  15  26  53  61  64  84  97 128 130 136 141 146 153 155 176 #>  [2827] 187 188 194 199 205 219 223 227 229 231   1   9  31  37  49  89 113 119 #>  [2845] 129 133 138 140 147 156 159 173 182 191 192 199 204 207 216  26  34  43 #>  [2863]  46  50  55  62  66 122 135 159 161 166 180 187 189   0   2  20  29  36 #>  [2881]  40  43  59  69  72  74  77  78 112 120 127 137 164 171 172 174 178 181 #>  [2899] 185 190 211 234 239   9  18  23  32  37  40  52  61  67  79  84 101 148 #>  [2917] 150 153 174 190 200 218 219 223 225 230 233 234  11  23  30  35  50  72 #>  [2935] 106 116 131 140 145 146 156 180 203 225 228 233 237   5  13  24  38  54 #>  [2953]  57  58  68  96 109 112 115 116 122 135 144 148 152 163 181 212 216 219 #>  [2971]   3   9  24  27  33  59  79 111 123 157 160 179 182 186 199 215 243   2 #>  [2989]  21  29  32  56  62  65  74  81  90  94 106 129 161 167 169 172 176 188 #>  [3007] 195 202 208 214 221 226 236 241 244  21  22  23  29  33  43  44  45  60 #>  [3025]  71  74  79  82  89  93 108 125 129 130 137 157 166 207 217 221 224 230 #>  [3043] 244   2   3   6  15  17  18  32  58  96 142 152 153 161 166 171 194 205 #>  [3061] 214 228  21  35  49  50  65  68  99 105 121 130 131 133 152 155 157 171 #>  [3079] 201 204 229 230 233 238  18  28  45  61  74  90  94  95 103 104 106 121 #>  [3097] 139 140 148 150 160 198 204 206 225 228 233  11  14  17  39  49  51  93 #>  [3115] 109 120 121 131 137 139 142 145 155 174 185 187 197 206 229 243   1  11 #>  [3133]  25  61  75  95 103 162 165 176 187 193 199 201 213 214 218 235 238  13 #>  [3151]  33  34  35  40  52  68  77  78  94  99 108 111 112 119 128 130 138 139 #>  [3169] 148 157 173 177 183 185 186 187 190 194 199 200 204 216 221 222 236 239 #>  [3187]   4  11  13  18  25  28  31  54  61  63  74  95 101 105 117 125 129 133 #>  [3205] 143 164 172 174 183 194 195 210 211 216 225 226 228 237   9  11  20  49 #>  [3223]  52  72  84  86  92 100 103 106 107 127 139 143 159 178 202 205 231 233 #>  [3241] 239   1  35  55  71  78  97 100 103 115 119 124 128 131 153 165 170 171 #>  [3259] 195 207 208 213 225 226 231 245  24  29  38  70  91  95 114 177 179 186 #>  [3277] 190 192 202 205 206 208 211 217 232 235 237 243  20  36  40  51  55  59 #>  [3295]  61  63  77  80  87  99 108 109 113 116 125 134 139 158 159 160 170 189 #>  [3313] 195 206 219 221 242 244 252  41  61  69  82  88  98 105 134 137 141 168 #>  [3331] 177 186 198 203 204 209 211 212 221 243  12  16  20  22  23  27  38  43 #>  [3349]  52  63  65  73  76  79  96 116 142 152 161 180 181 196 206 217 231 245 #>  [3367] 255  11  17  20  35  60  67  87  93 102 110 132 171 176 185 194 207 225 #>  [3385] 230 234 236 243 248   1  16  35  44  59  67  93  98 109 131 141 156 169 #>  [3403] 170 193 206 233 239 241 248   1  47  74  79  81  84  97 125 131 141 147 #>  [3421] 160 167 177 198 213 233 242 254 259   9  11  17  23  35  41  45  48  51 #>  [3439]  55  65  73  92  95  98 101 111 117 120 133 151 179 186 212 251 257   0 #>  [3457]  25  28  31  41  43  55  62  71  85  86 114 132 145 165 174 199 201 205 #>  [3475] 206 212 218 221 230 238 252 261   5  14  26  38  48  56  65  69  72  89 #>  [3493]  96 107 116 121 144 155 169 176 186 188 194 207 214 229 242 243 244 252 #>  [3511] 255   7  19  21  43  85 111 122 137 138 141 145 152 155 174 181 189 191 #>  [3529] 193 199 204 214 216 241 259 265   2   8  10  15  17  19  20  30  37  38 #>  [3547]  84  94  98  99 110 113 123 130 134 164 171 172 192 212 232 233 240 259 #>  [3565] 260 261   1   2  27  32  39  45  49  51  54  56  66  74  77  83  97 105 #>  [3583] 108 131 138 143 146 172 178 196 207 221 226 238 240   4  10  11  48  49 #>  [3601]  80  81  82  95  96 123 147 153 154 158 160 164 175 187 196 212 237 245 #>  [3619] 246 256 265 267 268   0  25  32  42  43  48  54  57  63  66  72  84  87 #>  [3637]  92 101 111 120 146 167 179 196 201 203 210 219 250 253 255 267   8  47 #>  [3655]  50  66  68  71  74  94 102 129 133 138 159 169 193 202 204 212 213 220 #>  [3673] 234 249 262 270   2  25  26  30  49  52  57  60  67  87 102 133 134 157 #>  [3691] 180 200 201 202 205 214 221 257 264   2  13  16  28  35  44  56  77  81 #>  [3709]  89  95 107 121 129 130 139 150 154 157 159 173 177 191 218 225 239 267 #>  [3727]   5   7  23  26  28  49  51  59  60  63  71  87 104 125 127 130 138 163 #>  [3745] 167 192 193 194 215 217 256 261 262  18  34  46  53  54  59  73  79  90 #>  [3763]  93  96  99 116 122 144 150 151 179 180 183 186 192 196 208 209 212 226 #>  [3781] 227 231 233 236 251 262 265 269 272   2   8  10  15  21  54  67  76  83 #>  [3799]  95 109 123 132 139 148 179 234 241 273   0   2  11  20  23  35  42  48 #>  [3817]  56  73  86 113 121 125 148 149 150 162 165 174 176 181 188 190 227 251 #>  [3835] 269  18  36  43  62  64  80  90 104 105 112 144 150 157 166 198 202 218 #>  [3853] 230 232 246 247 256 277  37  41  42  48  55  56  58 100 104 107 111 123 #>  [3871] 146 148 152 161 167 185 194 197 211 214 219 251 257 269 276 277  32  38 #>  [3889]  45  65  92 100 113 120 132 147 153 154 155 194 197 204 223 237 247 271 #>  [3907] 277   0  28  32  36  54  87  90  91  93  98 106 120 125 132 142 153 169 #>  [3925] 171 183 192 197 230 252 257 258 273   4   8  13  29  38  47  62  71  72 #>  [3943]  85  88 106 110 114 121 123 125 129 139 145 148 165 168 188 200 205 206 #>  [3961] 250 264 270  30  31  34  59  75  77  98 104 105 109 110 127 137 147 154 #>  [3979] 183 184 197 207 208 209 212 218 266 277   4  11  48  55  64  69  77  81 #>  [3997]  87  94 107 118 125 129 136 141 158 174 181 185 188 195 198 213 222 225 #>  [4015] 227 235 240 249 259 262 275 278   2   6   8  58  59  65  66  88  89  92 #>  [4033]  96 101 133 140 147 153 160 166 168 174 190 194 205 213 237 238 239 242 #>  [4051] 256 266 277  14  18  42  62  64  70  83  97 106 124 127 145 163 177 180 #>  [4069] 193 200 201 202 205 206 207 228 229 230 239 240 244 251 254 272 274  10 #>  [4087]  12  14  16  17  57  74  82  84  89  96  97 100 121 128 138 149 161 162 #>  [4105] 180 193 197 202 214 241 254   9  20  31  34  39  64  74  93  97  98 124 #>  [4123] 127 133 137 140 147 160 168 173 179 180 194 200 214 233 234 236 241 252 #>  [4141] 272   9  22  30  35  37  39  41  45  53  56  59  80  87 110 112 113 117 #>  [4159] 119 121 140 147 159 163 165 170 196 230 246 261 274 277 285  16  33  43 #>  [4177]  49  54  64  72 110 118 149 161 173 194 197 205 216 220 232 233 266 273 #>  [4195] 288  18  33  35  47  50  85  99 102 115 120 150 157 160 164 171 176 190 #>  [4213] 192 197 210 213 223 251 274 275 277 283   2  17  28  33  39  51  77 103 #>  [4231] 111 112 128 130 133 139 150 152 153 163 166 180 182 198 202 222 226 253 #>  [4249] 269 272 283   0   2  14  15  37  39  41  79  84  91  92 100 107 115 119 #>  [4267] 130 138 152 153 186 190 195 201 216 225 244 259 272 282 290   1   4  39 #>  [4285]  46  73  81  86  99 122 127 152 171 174 181 190 213 239 241 260 283  12 #>  [4303]  32  39  42  52  65  68  78  82  83  93 102 120 122 150 154 157 163 165 #>  [4321] 167 186 191 193 204 208 213 216 232 233 246 265 287 290   5   6  40  41 #>  [4339]  45  46  67  71  72  79 118 123 135 153 156 179 183 194 195 200 214 215 #>  [4357] 219 227 231 234 247 249 255 256 274 290  14  55  62  80  89 116 139 150 #>  [4375] 156 161 171 174 186 199 215 221 226 241 242 248 251 253 256 260 266 275 #>  [4393] 279 293  15  37  39  41  66  78  91 109 112 118 121 129 131 140 153 154 #>  [4411] 155 195 196 202 203 208 225 235 236 238 253 254 261 263  24  43  52  57 #>  [4429]  64  83  97 120 121 125 129 150 151 199 203 209 210 211 222 226 237 249 #>  [4447] 256 264 273   0   5  12  36  44  59  64  65  71  82  92  99 100 107 111 #>  [4465] 114 115 157 160 161 166 171 201 212 220 226 234 242 244 249 278 281 282 #>  [4483] 289 291   1   5   8  15  19  22  40  57  58  63  73  76 106 109 116 124 #>  [4501] 139 148 154 173 179 188 190 194 196 201 204 218 224 228 252 258 264 273 #>  [4519] 274 277 284 286 295   0   3  14  15  16  22  29  38  43  69  71  80  84 #>  [4537]  93 113 115 144 151 157 162 163 164 180 192 213 229 233 248 250 264 271 #>  [4555] 275 280 291 297   7  48  55  69  74  75  77  86  88  92  99 101 103 108 #>  [4573] 111 118 135 136 162 163 165 173 177 182 185 199 229 245 259 274   1   5 #>  [4591]  21  27  28  43  58  61  65  78  87 103 120 121 124 137 162 165 166 186 #>  [4609] 195 197 226 230 231 236 246 247 248 259 283 286   7   8  41  44  46  49 #>  [4627]  51  67  93 116 124 132 135 137 170 172 174 196 198 204 210 225 226 234 #>  [4645] 236 240 246 249 251 259 263 264 268 277 287   3  17  20  31  55  70  76 #>  [4663]  82 110 113 115 116 117 120 131 139 159 162 171 174 183 212 226 247 250 #>  [4681] 268 287 288 294 297   2   9  25  33  38  82  87  96  98 154 155 164 203 #>  [4699] 205 215 224 228 245 292  14  18  26  29  30  36  46  50  55  77  81  84 #>  [4717] 101 108 124 125 126 127 142 148 149 163 212 234 247 262 264 277 278 291 #>  [4735] 292 294   0  28  41  43  52  62  66  74  90  91  93 120 134 135 140 141 #>  [4753] 142 146 163 172 173 210 231 252 259 260 267 289 294  10  23  27  28  37 #>  [4771]  44  77  82  84  85  86  89  96 107 123 125 141 143 148 153 158 167 172 #>  [4789] 186 199 201 204 208 224 230 231 240 276 291 292 297   1   4  32  36  43 #>  [4807]  51  55  69  70  72  77  92 101 119 175 193 196 210 221 225 247 251 268 #>  [4825] 283 302   8  11  19  63  67  72  81 101 106 128 136 163 193 214 216 217 #>  [4843] 222 230 234 254 255 258 278 283 286 289 294 301 305 306  31  33  51  69 #>  [4861]  83  93  94 116 124 149 151 155 167 169 185 186 188 219 225 230 269 307 #>  [4879] 312  19  30  48  56  58  62  64  66  73 101 117 121 157 170 183 189 196 #>  [4897] 200 227 256 261 269 281 282 287 294 299 307   0  11  20  51  52  59  81 #>  [4915]  84  98 107 128 134 138 160 162 169 170 180 220 224 236 241 243 246 247 #>  [4933] 256 267 271 275 279 293 297 303 310 311 312  34  49  51  69  73  79  85 #>  [4951]  95 141 158 174 182 184 186 197 213 220 234 238 255 267 309   0  25  30 #>  [4969]  39  44  45  50  64  90 103 104 134 145 155 158 182 213 221 224 232 242 #>  [4987] 265 283 293 297  19  31  54  82  84  87 108 117 134 138 144 152 167 171 #>  [5005] 179 204 216 241 242 254 255 270 273 288 289 294 312 313   4  15  40  58 #>  [5023]  59  60  75  91  97 101 122 129 133 140 141 149 164 174 190 193 196 206 #>  [5041] 207 212 214 224 227 239 252 256 260 265 267 275 287 294 301 307 312   3 #>  [5059]  23  24  26  50  52  55  59  61  79  90  92  98 100 105 112 139 146 162 #>  [5077] 179 183 190 199 201 239 247 260 262 263 264 276 278 289 295 303  10  15 #>  [5095]  22  35  58  64  70  79  90  96 133 163 164 172 175 191 216 218 219 233 #>  [5113] 236 261 262 265 273 275   7   8  10  21  23  24  45  51  66  69  85 116 #>  [5131] 138 150 152 161 179 180 205 211 247 281 303   4  37  46  48  53 118 121 #>  [5149] 122 124 133 141 153 155 164 187 202 214 222 223 225 227 234 241 246 250 #>  [5167] 256 257 258 263 264 275 284 302 320  17  30  40  48  52  73 105 111 120 #>  [5185] 138 143 181 194 199 207 208 213 215 218 226 235 237 255 264 282 304 316 #>  [5203]  22  26  38  48  56  82  93 108 131 145 156 158 165 169 172 195 230 234 #>  [5221] 236 243 252 257 274 279 280 281 314 316   4  25  37  41  64  71  75  86 #>  [5239]  88  91 102 116 117 136 140 145 149 152 164 174 177 202 203 204 211 214 #>  [5257] 224 238 241 252 253 254 284 285 292   4  14  16  17  36  44  62  64  79 #>  [5275]  85  88 111 113 116 119 122 139 169 173 175 179 182 183 208 214 216 222 #>  [5293] 227 232 238 244 262 277 299 302 318 325   3   6  17  19  25  33  34  53 #>  [5311]  72  74  81  85  87  93 115 116 122 147 154 165 174 180 183 184 191 193 #>  [5329] 196 198 203 208 210 239 247 255 258 265 279 294 296 307 310   6  17  31 #>  [5347]  32  35  38  45  47  50  51  62  63  75  83  86 120 145 159 180 182 205 #>  [5365] 206 216 227 249 256 259 270 271 272 274 285 301 303   7  12  20  26  30 #>  [5383]  40  43  47  57  60  79  85  86  90  99 120 132 142 144 155 156 180 184 #>  [5401] 192 210 213 238 244 252 260 267 269 305 315 318   1  17  19  26  48  51 #>  [5419]  55  66  71  80  88  91 129 131 153 158 162 164 179 212 217 243 250 288 #>  [5437] 290 296   1   5   8  40  52  59  73  91 112 123 150 154 155 156 163 167 #>  [5455] 173 187 206 214 238 250 254 258 259 268 271 278 286 287 295 299 313 320 #>  [5473]   9  36  57  84  98 103 144 148 162 167 179 186 196 200 204 212 214 221 #>  [5491] 227 228 254 257 266 283 289 298 321   0  31  33  46  51  61  68  85  87 #>  [5509] 124 130 152 181 182 183 216 222 228 230 234 245 258 269 272 284 292 293 #>  [5527] 297 300 312 318   3   8  34  39  54  70  73  93 107 127 135 146 173 175 #>  [5545] 177 186 187 194 200 201 203 210 221 292 302 314 323 330  19  31  39  50 #>  [5563]  51  75  76  81  82  93 103 115 116 131 194 204 216 218 221 236 246 250 #>  [5581] 256 260 265 284 299 306 307 318 325 327  15  22  29  41  73 104 121 133 #>  [5599] 141 156 171 174 179 185 189 193 222 230 244 257 270 281 298 301  10  21 #>  [5617]  22  23  27  30  43  51  61  63  64  82  89  94  98  99 102 109 133 138 #>  [5635] 146 149 152 155 166 183 206 222 226 231 236 250 290 301 304 315 323 329 #>  [5653] 330 331   7  27  40  42  53  71  79  81  90  93 115 116 138 148 165 170 #>  [5671] 175 179 194 201 232 233 250 277 282 284 287 292 298 303 312 314 328 334 #>  [5689]  18  38  41  43  70  89 105 106 116 137 141 150 151 165 184 190 194 212 #>  [5707] 214 217 221 223 231 253 295 304 334 336  17  23  37  39  50  59  61  66 #>  [5725]  71  77  86  90  91  96 109 113 116 119 123 127 144 154 168 183 193 197 #>  [5743] 203 223 232 233 271 274 283 289 301 340   2  20  23  25  32  55  67  70 #>  [5761]  97 107 115 128 142 153 157 183 188 192 193 194 202 204 213 227 230 231 #>  [5779] 249 264 273 274 294 305 306 335  14  25  26  29  46  53  62  81  83  87 #>  [5797]  88  90  94 111 114 115 119 143 157 169 186 190 229 236 243 252 261 270 #>  [5815] 271 276 300 302 314 326 332  15  27  35  41  42  45  51  73  88  89  96 #>  [5833]  98 106 117 119 131 134 138 145 159 167 185 187 192 202 209 230 237 250 #>  [5851] 267 269 275 285 291 299 310 325 341  12  17  31  42  53  65  72  73  81 #>  [5869]  86 114 120 130 135 138 139 157 159 162 171 185 224 233 255 271 292 296 #>  [5887] 311 321 322 329  31  42  55  57  67  69  87 103 118 122 128 131 143 146 #>  [5905] 150 152 156 182 201 207 208 212 216 252 260 261 264 279 297 301 307 308 #>  [5923] 314 321 329   2  28  46  48  79  83  91  93 103 114 124 176 189 215 220 #>  [5941] 221 228 234 259 260 273 279 309 315 325 346   3  21  31  40  57  60  66 #>  [5959]  72  74  76  82  94 107 129 133 136 142 153 161 167 168 195 197 200 206 #>  [5977] 227 237 246 254 257 259 278 279 287 290 303 322 325 329   8  15  35  39 #>  [5995]  41  46  62  68  88 106 112 115 122 129 135 146 147 151 154 175 181 187 #>  [6013] 193 200 226 256 271 278 297 308 315 319 322 325  22  24  41  61  63  64 #>  [6031]  67  78  82  83  84  99 101 116 119 120 128 159 161 171 182 184 191 206 #>  [6049] 210 219 228 229 243 244 251 257 270 285 289 300 303 315 316 342   2   4 #>  [6067]   5   7  26  44  45  48  64  82  88  89  92  96 102 108 115 127 131 138 #>  [6085] 144 158 183 188 196 222 240 253 272 276 283 288 302 316 321 325  10  29 #>  [6103]  40  46  52  76  99 100 103 114 126 134 138 142 144 161 172 178 181 199 #>  [6121] 214 218 238 243 253 254 273 278 284 291 301 305 338 341   1   5  25  31 #>  [6139]  34  44  45  64  76 107 113 126 132 135 142 158 170 189 195 199 200 207 #>  [6157] 218 226 233 237 246 247 258 267 330 343   0  12  31  33  51  53  70  96 #>  [6175]  99 100 110 116 129 135 137 162 163 167 182 198 201 202 210 215 218 219 #>  [6193] 224 226 249 279 289 291 300 306 307 314 327 331 332 336 338 341 347  28 #>  [6211]  57  62  80  95 105 120 156 173 176 181 184 190 191 199 225 228 240 261 #>  [6229] 266 287 290 291 293 311 321 330 332 334 341   2  24  29  38  39  87 118 #>  [6247] 125 142 148 155 183 185 192 195 216 218 221 230 243 257 271 276 280 289 #>  [6265] 290 291 300 318 328 329 348 353  10  23  26  36  39  57  59  64  80  85 #>  [6283]  86  92 116 118 124 134 149 157 180 188 202 219 232 243 249 256 267 270 #>  [6301] 272 279 283 287 295 298 311 316 334 341  10  17  20  63  86  87  89  91 #>  [6319]  92 111 117 129 149 157 175 180 195 198 200 203 215 216 228 241 259 263 #>  [6337] 268 271 286 334 352 357  10  11  19  24  29  34  36  40  55  64  67  88 #>  [6355] 108 117 119 122 124 131 132 139 144 175 190 206 208 214 218 229 232 289 #>  [6373] 300 309 327 329 331 342 343   6  17  19  27  33  38  53  84  87  90  97 #>  [6391]  98 106 107 115 123 130 143 145 150 161 194 196 208 212 242 269 280 281 #>  [6409] 296 302 315 318 335 337 344 355 358  47  55 100 117 118 121 127 134 138 #>  [6427] 140 148 151 159 162 163 164 201 212 243 265 287 290 305 317 324 336 345 #>  [6445] 347 350  28  33  48  52  76  92 122 123 126 128 157 164 178 181 196 200 #>  [6463] 201 206 213 219 233 247 267 275 279 289 300 304 334 343 351 356  13  23 #>  [6481]  30  53  54  59  69  71  84  85  98 120 127 132 135 140 142 169 221 222 #>  [6499] 224 239 264 266 276 288 293 297 300 301 315 318 320 329 330 331 344   2 #>  [6517]   6   7   8  23  41  45  54  62  66  76  82  84  86  93 114 115 116 117 #>  [6535] 150 163 183 184 185 205 219 221 238 240 241 251 256 284 290 306 311 314 #>  [6553] 316 320 336 342   2   4  22  23  29  49  50  60  61  77 100 102 114 115 #>  [6571] 153 154 158 164 189 216 224 232 242 254 259 271 272 286 319 323 331 342 #>  [6589] 350 360 363   2   3   4   6  11  26  31  44  60  63  88  89  95 108 115 #>  [6607] 139 143 144 145 147 167 199 209 212 228 239 251 257 260 263 290 292 319 #>  [6625] 323 336 340 342 346 350 358   7  10  30  33  40  41  45  59  71  78  87 #>  [6643]  98  99 103 107 117 125 140 142 150 154 157 168 178 179 190 194 196 197 #>  [6661] 218 222 228 242 248 260 277 286 292 324 325 326 332 365 366  23  24  30 #>  [6679]  38  39  46  53  64 105 109 111 116 129 133 136 146 187 188 206 268 270 #>  [6697] 279 285 291 296 300 307 310 326 327 342 356 363   0  22  24  38  58  64 #>  [6715]  74  82  91  98 108 116 123 139 143 144 158 161 181 201 205 211 215 221 #>  [6733] 229 230 231 239 244 252 260 262 265 278 315 336   4   6  26  29  38  40 #>  [6751]  43  66  72  79  99 123 125 137 145 154 155 156 170 173 199 204 215 228 #>  [6769] 235 239 244 258 265 269 283 292 314 315 320 325 330 333 353  20  27  34 #>  [6787]  64  71 101 107 115 118 134 137 146 151 167 174 203 223 235 246 250 261 #>  [6805] 278 281 283 285 301 312 315 328 334 348 352 356  10  17  18  20  37  50 #>  [6823]  57  62  70  74  90  95  98 122 123 126 135 147 163 177 191 194 227 229 #>  [6841] 234 241 242 247 253 261 268 284 288 296 304 305 324 325 360 362   1   6 #>  [6859]  49  63  66  68  72  89  95  99 111 132 134 158 187 193 203 205 225 238 #>  [6877] 248 250 252 254 260 264 266 267 268 279 281 306 314 322 323 326 337 349 #>  [6895] 350 362 367  13  29  48  57  61  66  83 106 136 145 146 148 151 152 155 #>  [6913] 169 172 187 195 203 223 225 227 239 241 263 267 276 282 284 287 289 299 #>  [6931] 316   8  35  55  78  79  90  93 101 124 126 130 153 157 159 170 200 211 #>  [6949] 216 225 227 301 318 323 327 333 349  13  23  33  44  47  80  91 101 144 #>  [6967] 166 213 215 217 219 232 235 240 247 278 299 301 321 335 339 349 355 363 #>  [6985]  18  66  72  77  83  88  89  92  97 110 114 120 121 124 125 132 137 143 #>  [7003] 144 161 185 186 195 198 227 238 241 247 262 274 275 276 299 301 311 318 #>  [7021] 320 323 329 337 339 345 356 361 368 369 370 374   9  21  30  36  37  42 #>  [7039]  60  79 105 107 117 121 130 132 161 204 207 212 218 232 259 279 280 301 #>  [7057] 309 319 332 333 356 366   1   3   6   8  23  26  32  37  47  49  50  53 #>  [7075]  67  75 115 119 155 161 173 179 198 226 231 238 240 259 265 268 283 284 #>  [7093] 297 302 305 314 327 334 345 352 366 371 375   3   6  24  32  44  46  65 #>  [7111]  81  87 100 128 144 159 160 161 190 222 234 237 256 289 290 322 330 332 #>  [7129] 348 357 379  11  19  33  44  47  58  71  80  91  94  98  99 117 138 141 #>  [7147] 214 218 242 251 256 268 271 299 300 306 309 318 320 326 330 331 334 363 #>  [7165]  12  13  22  37  54  70  72  73  84  91 105 107 120 123 130 132 133 136 #>  [7183] 139 169 257 266 278 279 285 292 297 308 322 329 337 338 350   9  10  15 #>  [7201]  19  21  27  33  36  37  45  54  68  69  77  85  96 107 114 120 129 156 #>  [7219] 179 198 199 213 218 221 228 243 246 247 248 249 265 292 296 318 321 325 #>  [7237] 330 341 344 355 366 375 382   2   6  10  23  31  37  50  81  82  90 106 #>  [7255] 113 128 130 136 148 156 165 182 196 207 212 220 226 241 248 253 261 265 #>  [7273] 268 278 295 298 301 313 315 318 330 335 360 371 379 381 382   1   4  12 #>  [7291]  13  14  22  24  29  44  51  98 105 111 125 127 146 220 224 226 235 238 #>  [7309] 245 249 253 256 262 270 276 279 292 301 316 319 333 338 348 356 368 378 #>  [7327] 381 382   4   9  11  23  50  58  84  91 116 132 155 178 180 185 189 200 #>  [7345] 204 206 210 211 213 218 222 228 233 252 268 284 295 297 301 302 308 351 #>  [7363] 357 363 365 366 377   4   5  10  15  20  37  43  48  56  62  63  66  69 #>  [7381]  72  77  82  88 114 117 118 121 125 134 139 150 154 164 166 167 201 208 #>  [7399] 227 235 237 243 245 247 252 267 272 301 302 317 320 322 326 339 343 363 #>  [7417] 364 371 374 380 386   0   3   5   6  11  17  20  26  28  30  42  76  88 #>  [7435]  89 102 104 105 111 122 132 138 163 174 185 192 198 209 210 212 223 237 #>  [7453] 260 268 277 297 302 317 329 335 354 358 363 364 381   4  16  51  60  80 #>  [7471]  86  95 105 113 114 119 126 130 135 136 137 144 162 164 165 168 169 171 #>  [7489] 175 179 187 193 210 214 220 224 255 259 263 270 274 278 279 282 290 293 #>  [7507] 298 310 321 335 364 374  34  40  47  70  75  78  82  84  98 103 105 120 #>  [7525] 128 167 171 175 191 204 211 226 233 241 253 259 287 293 295 298 305 311 #>  [7543] 327 329 337 341 348 359 362 364 377   1   5  20  52  59  70  78  95 101 #>  [7561] 107 114 118 130 138 146 167 173 194 202 219 222 240 244 255 257 258 264 #>  [7579] 266 270 273 290 314 355 358 371 386 389   6  21  35  48  66  84 103 131 #>  [7597] 136 140 164 167 169 174 178 208 213 218 234 236 239 246 249 254 258 259 #>  [7615] 264 290 293 294 301 307 309 322 340 352 358   5   9  32  34  35  37  63 #>  [7633]  70  72  86  96 105 110 122 135 149 155 163 164 199 204 234 244 246 247 #>  [7651] 269 275 279 286 294 298 312 315 329 331 343 347 357 364 374 385   4   5 #>  [7669]  13  19  24  25  49  65  72  78  83  97  98 118 131 132 146 159 171 184 #>  [7687] 230 269 273 305 319 333 336 346 348 362 363 385   5   6  10  12  22  27 #>  [7705]  39  40  46  61  67  70  86  90 109 117 125 152 153 154 165 184 187 191 #>  [7723] 192 202 232 243 251 259 262 277 316 344 345 347 352 376 386 389 392   3 #>  [7741]   9  18  19  28  37  41  77 114 119 133 142 152 156 170 186 189 192 199 #>  [7759] 213 233 238 262 296 300 305 314 319 331 346 373 379 381  23  58  64  65 #>  [7777]  68  75  89  97 114 121 122 135 139 141 142 147 150 164 168 176 212 219 #>  [7795] 223 229 234 247 261 263 293 301 309 310 333 336 337 340 346 350 356 374 #>  [7813] 387  22  27  38  47  59  86  93  95 109 120 130 140 147 151 157 171 175 #>  [7831] 179 180 186 189 192 221 237 242 261 298 320 327 336 340 344 347 364 385 #>  [7849]   7  11  17  21  27  29  36  37  52  54  85  92  98 107 109 112 122 161 #>  [7867] 169 174 179 197 204 213 226 237 240 243 261 264 270 278 294 312 314 320 #>  [7885] 345 355 373 387 390  16  19  30  40  45  46  48  76  91  94 104 107 114 #>  [7903] 125 146 155 173 184 187 191 198 211 224 226 232 235 237 254 275 290 296 #>  [7921] 299 318 359 363 371 381 390 394  32  57  61  62  63  64  65  67  77  83 #>  [7939]  87 106 122 126 138 139 152 192 204 208 212 235 265 273 283 288 289 292 #>  [7957] 302 306 318 324 334 352 356 362 375 376 383 391 394   0   1   6  50  58 #>  [7975]  68  82  83  86 104 113 122 140 146 150 173 200 204 208 228 242 244 248 #>  [7993] 251 254 274 278 303 328 329 344 348 353 365 369 373 385 386 391   4  10 #>  [8011]  15  24  34  50  77  94 101 104 113 138 143 168 169 176 184 190 225 245 #>  [8029] 258 261 287 310 311 331 333 337 338 340 347 353 364 371 377 395  21  26 #>  [8047]  32  38  42  45  52  80  81  87 109 140 148 189 190 214 222 229 232 241 #>  [8065] 259 272 283 289 312 323 324 327 329 330 331 357 376   3   4  28  30  32 #>  [8083]  42  89  93  95 106 128 153 154 159 190 194 202 204 208 245 249 262 293 #>  [8101] 301 305 326 328 333 345 350 363 398  27  31  48  53  66  71  73  84  89 #>  [8119]  96 108 115 123 134 137 147 153 185 196 198 204 214 226 228 241 263 311 #>  [8137] 316 320 326 335 339 343 359 373 374 379 380 381 393  36  38  56  63  64 #>  [8155]  75  91 100 117 120 122 129 130 137 161 178 179 187 195 234 252 258 260 #>  [8173] 278 283 318 336 347 376 383   6  11  16  17  21  27  36  42  49  50  63 #>  [8191]  65  69  73  74  84  92  94  98 103 104 114 117 128 132 141 160 166 178 #>  [8209] 179 182 183 189 198 232 241 244 250 252 254 255 256 272 273 293 295 323 #>  [8227] 348 360 362 363 364 367 394 398   6  11  20  29  31  38  58  73  95  97 #>  [8245] 102 109 120 122 127 129 131 132 135 136 147 158 166 169 186 199 202 205 #>  [8263] 211 214 230 232 246 254 258 271 274 278 279 282 287 311 323 335 366 371 #>  [8281] 377 385 390 392   8   9  21  24  48  72  91  98 114 127 129 136 140 173 #>  [8299] 175 195 205 208 209 213 233 236 250 253 256 260 262 289 291 293 317 327 #>  [8317] 329 335 339 343 347 356 386 406  15  44  47  49  79 100 121 126 129 146 #>  [8335] 152 158 163 177 182 185 193 198 205 216 234 236 237 245 258 281 294 297 #>  [8353] 325 327 351 390 391 392 402 408   2  25  29  36  40  58  65 101 106 112 #>  [8371] 116 117 121 134 140 142 155 166 179 181 212 228 247 257 259 261 290 299 #>  [8389] 302 303 305 338 363 372 378 380 392 395 403 404   3  16  23  45  50  67 #>  [8407]  76  77 101 122 130 134 143 147 152 162 163 172 174 181 189 198 233 245 #>  [8425] 247 252 256 258 282 294 301 311 319 325 331 338 366 372 380 384 386 387 #>  [8443] 397 399   0  13  18  20  24  26  40  60  69  75  78  87  92  94  97  99 #>  [8461] 127 131 142 168 181 183 199 209 214 215 218 220 225 244 276 290 318 321 #>  [8479] 327 332 338 339 340 341 344 381 393   7   8  20  31  45  52  54  55  76 #>  [8497]  83  90  98  99 117 119 125 128 130 148 149 160 162 178 183 197 198 225 #>  [8515] 247 263 271 277 281 283 287 291 320 325 335 337 349 351 354 365 374 383 #>  [8533] 384 385 400   2   4  21  37  51  78  82  93  96 111 116 121 125 128 146 #>  [8551] 152 166 182 210 219 224 275 279 286 293 299 301 323 350 357 384 391 395 #>  [8569] 397 399 403  12  15  30  36  45  47  67  81  94  95 107 108 110 113 117 #>  [8587] 144 152 155 157 161 166 168 189 198 200 237 241 246 247 261 266 273 277 #>  [8605] 296 298 301 321 343 351 369 383 389 393 402 408  18  27  28  46  52  57 #>  [8623]  66  69  72  74  89  91  94  96 107 124 127 154 159 162 176 183 200 207 #>  [8641] 208 212 214 236 282 287 297 303 307 343 359 365 368 371 377 395 397 408 #>  [8659] 409  27  40  43  52  71  96 104 156 160 177 179 185 187 193 213 229 249 #>  [8677] 262 278 281 286 288 298 308 392 396 398 407 413  35  36  38  41  54  58 #>  [8695]  69  90 101 116 131 158 183 186 188 203 243 247 261 263 285 291 295 312 #>  [8713] 320 323 338 340 347 354 367 385 402   7  31  35  39  41  48  49  51  58 #>  [8731]  61  79  85 107 111 117 147 156 158 176 180 208 221 223 246 251 260 261 #>  [8749] 272 274 276 310 313 338 355 382 394 398 401 407   5  32  41  43  74  79 #>  [8767]  88  98 102 108 114 131 162 170 193 208 213 229 230 244 251 267 293 307 #>  [8785] 308 345 351 353 379 401 412 418   1  32  33  35  44  54  77  89 112 118 #>  [8803] 128 130 133 145 161 186 191 194 195 199 212 214 244 245 285 295 296 298 #>  [8821] 303 310 317 360 373 383 411 422  13  15  17  33  44  53  54  55  58  84 #>  [8839]  86  87  90 117 125 141 154 157 165 177 181 193 217 226 230 233 238 240 #>  [8857] 247 249 296 317 324 341 349 353 354 360 362 383 404 412   5   9  12  22 #>  [8875]  23  41  78  93 103 111 112 117 137 153 191 227 228 229 233 241 250 254 #>  [8893] 255 266 274 276 291 297 307 319 321 363 374 376 382 389 390 397 399  10 #>  [8911]  40  76  78  79 117 127 132 133 146 147 162 163 169 179 191 192 197 201 #>  [8929] 211 222 238 244 248 249 262 272 285 286 289 299 324 327 330 349 350 351 #>  [8947] 387 392 397   5  15  20  33  43  46  52  57  73  77  86  98 135 136 138 #>  [8965] 144 168 175 178 180 189 196 210 226 244 280 286 315 321 326 331 335 338 #>  [8983] 350 381   7  10  15  18  23  24  44  50  51  68  85 114 120 145 149 150 #>  [9001] 152 157 158 168 178 190 194 202 204 222 230 252 269 277 285 288 289 298 #>  [9019] 304 334 339 341 343 396 412 417 424  20  23  27  43  54  69  77  94 111 #>  [9037] 114 123 131 149 154 155 167 180 197 200 219 226 242 252 257 270 305 306 #>  [9055] 320 323 330 341 353 356 405 410 425   1   4   9  40  75  95 102 125 139 #>  [9073] 162 166 171 191 198 199 213 218 220 222 223 224 226 249 261 263 264 298 #>  [9091] 309 315 322 348 356 359 365 386 396 398 403 409 419 425 428   4  11  14 #>  [9109]  15  17  74  80  84  94 102 109 123 125 132 137 175 185 186 195 196 215 #>  [9127] 222 245 250 253 291 294 306 310 346 353 358 380 385 400 402 403 405 409 #>  [9145] 417 422  11  17  37  52  53  61  81  82  88  92  93 130 136 141 169 172 #>  [9163] 176 179 180 187 190 226 237 242 243 257 277 282 316 317 318 324 326 340 #>  [9181] 341 349 375 380 382 385 391 395 400  15  31  42  48  53  55  59  69  71 #>  [9199]  75  77  81  88  89  99 101 110 118 124 141 163 168 172 179 183 192 201 #>  [9217] 205 218 221 230 236 237 276 298 309 326 330 353 389 403 413 414 423 429 #>  [9235]   4   7  47  50  52  57  67  70  72  81  93 104 139 146 148 151 153 170 #>  [9253] 183 187 199 213 225 239 244 245 246 247 254 270 271 279 280 333 335 354 #>  [9271] 372 378 392 393 399 416   0  13  60  96 103 105 127 141 142 144 146 148 #>  [9289] 162 173 187 189 198 200 216 222 233 234 244 245 248 252 265 266 267 271 #>  [9307] 280 293 298 302 303 316 320 323 336 337 370 378 385 392 411 414 417 422 #>  [9325]  19  34  41  52  58  60  61  62  69  70  85  88  91  98 102 107 116 121 #>  [9343] 124 127 133 159 166 167 169 207 210 215 219 221 225 255 264 277 281 282 #>  [9361] 303 304 307 326 329 361 377 383 391 414 423 427 435   2   6   7  29  30 #>  [9379]  31  39  44  61  67  71  75 102 103 116 122 129 138 146 162 164 168 176 #>  [9397] 194 197 213 215 218 238 256 266 272 276 278 290 299 309 314 329 335 346 #>  [9415] 355 363 379 392 401 409 412 417 432   4   6  11  15  17  21  26  28  52 #>  [9433]  53  54  55  85  98 100 115 123 144 154 166 170 172 176 180 190 208 209 #>  [9451] 214 218 219 257 278 280 284 289 290 293 297 303 308 310 321 337 341 353 #>  [9469] 354 360 368 374 385 423 425 428 433  11  23  25  46  79  87  88 122 134 #>  [9487] 155 168 170 185 190 193 216 217 272 281 290 328 333 339 341 355 381 385 #>  [9505] 389 393 399 401 405 410 411 417 427  14  26  36  43  46  52  54  59  62 #>  [9523]  68  71  72  74  96  98 101 104 119 130 135 137 146 157 170 178 187 207 #>  [9541] 210 212 220 222 231 257 264 265 300 311 317 357 358 376 383 397 400 406 #>  [9559] 408 421 437   1   6  23  54  58  59  67  70  74 102 106 109 110 117 137 #>  [9577] 138 144 153 160 168 176 208 211 233 234 235 236 259 268 272 274 296 301 #>  [9595] 316 319 334 336 337 340 343 373 386 388 400 413 434   4  14  15  28  93 #>  [9613] 102 103 110 141 151 186 198 200 206 223 243 245 246 266 270 278 299 303 #>  [9631] 311 313 333 338 340 361 377 379 386 394 398 400 411 414 422 423 433   4 #>  [9649]   7  10  29  40  47  50  56  63  67  71  87 100 106 107 115 118 120 123 #>  [9667] 125 166 170 183 190 191 192 201 207 247 267 275 301 315 330 350 351 357 #>  [9685] 363 391 392 396 400 407 415 426 436 437 442  11  14  24  28  32  43  48 #>  [9703]  60  63  71  77 130 145 179 186 216 232 240 271 297 305 309 318 319 320 #>  [9721] 323 324 327 336 354 383 403 413 422 423 426 429 434 437  14  29  46  49 #>  [9739]  66  85  90  94 109 113 130 154 155 157 162 165 166 167 186 210 216 219 #>  [9757] 222 226 228 240 241 253 258 283 307 314 316 323 330 345 355 361 368 382 #>  [9775] 385 392 393 395 405 415 422 426 438 441   1   2   7  34  45  64  67  73 #>  [9793]  74  94 132 133 139 190 221 234 245 247 252 260 268 276 283 287 300 315 #>  [9811] 363 366 367 371 373 383 386 396 411 434 438 441   2   4  20  21  35  44 #>  [9829]  56  67  68  85  86  91 101 110 111 117 132 140 146 149 152 208 216 226 #>  [9847] 233 235 242 247 264 280 297 298 302 332 374 385 389 395 401 402 404 405 #>  [9865] 409 419 436 437 444  11  14  16  39  53  54  64  67  71  74  81 109 128 #>  [9883] 134 140 145 167 187 188 198 203 213 219 225 228 238 239 241 250 255 256 #>  [9901] 262 282 289 293 294 306 308 312 324 327 356 373 381 409 414 418 423 441 #>  [9919] 443  24  34  43  44  46  55  65  73 127 144 145 149 157 169 173 175 186 #>  [9937] 191 199 205 208 226 240 253 255 275 276 284 286 291 292 300 307 311 315 #>  [9955] 319 330 341 344 351 358 397 404 408 436   2  11  29  35  48  50  51  62 #>  [9973]  63  64  67  78  85  86 104 109 142 144 145 168 176 180 190 205 217 219 #>  [9991] 224 233 270 272 276 291 295 303 319 322 325 328 331 332 359 365 388 394 #> [10009] 400 418 435   4  27  31  35  43  66  68  86  88  94 101 102 120 138 150 #> [10027] 189 196 199 201 210 215 219 252 253 259 286 288 290 315 317 321 323 324 #> [10045] 327 328 339 360 367 381 383 387 399 402 408 410 425 442  25  62  63  64 #> [10063]  71  72  82  87  92  95 108 127 137 141 142 155 157 160 161 172 185 186 #> [10081] 188 200 206 212 216 217 221 226 244 257 262 270 279 283 284 286 317 318 #> [10099] 324 330 343 347 360 365 374 386 387 395 416 420 426 433  11  19  38  64 #> [10117]  99 105 110 118 123 132 133 140 141 148 152 181 185 225 235 238 242 263 #> [10135] 279 280 286 289 291 299 308 317 325 337 338 340 345 347 350 351 354 361 #> [10153] 372 388 392 394 409 415 416 441 450  14  16  21  36  49  57  58  69  79 #> [10171]  85  87  92 100 116 117 126 128 131 149 151 154 158 180 191 193 200 203 #> [10189] 212 233 241 246 255 261 267 303 304 307 313 319 336 342 344 346 400 411 #> [10207] 412 447  13  16  32  43  45  76  90  91 104 110 117 119 126 141 146 153 #> [10225] 155 166 167 184 189 190 194 197 205 208 233 240 246 247 252 257 261 263 #> [10243] 273 282 285 287 288 299 307 314 315 341 347 352 354 366 390 400 413 423 #> [10261] 444 449 453 454   3   7   8  11  29  39  42  43  44  56  60  61  93  95 #> [10279] 100 105 113 115 147 159 172 180 212 217 218 223 226 228 239 248 258 259 #> [10297] 286 288 300 301 303 317 330 343 359 385 407 428 436 438 441 443  10  12 #> [10315]  21  26  44  48  59  63  66  70  72  83  85 117 120 123 124 133 143 146 #> [10333] 148 154 163 164 185 189 193 212 218 247 249 255 268 274 279 280 282 297 #> [10351] 299 328 336 351 396 399 455   6  12  19  25  36  42  57  65  71  88  89 #> [10369]  99 101 106 123 136 168 174 191 193 194 197 219 220 226 227 229 235 246 #> [10387] 253 278 288 294 305 315 331 345 349 350 352 366 393 406 418 422 438 440 #> [10405] 446 457   4   9  26  42  58  64  65  82  94  99 123 124 139 150 177 183 #> [10423] 196 211 223 235 240 246 253 255 259 266 275 281 296 299 336 350 400 403 #> [10441] 410 416 418 426 432   7  10  23  24  27  32  45  61  66  68  74  91 110 #> [10459] 114 121 122 129 137 139 146 164 172 182 184 188 201 203 214 215 243 245 #> [10477] 248 250 268 271 278 279 285 286 291 308 313 325 339 354 360 363 371 383 #> [10495] 386 398 400 408 420 428 431 438   1  13  15  21  39  74  89  95 106 109 #> [10513] 140 141 146 157 167 182 184 205 222 227 231 236 242 258 279 280 295 300 #> [10531] 310 312 313 320 344 345 362 375 378 379 391 400 428 437 454   1  13  15 #> [10549]  28  54  56  58  60  76  94 105 108 123 128 142 152 170 175 179 182 186 #> [10567] 189 205 210 216 227 235 246 253 275 291 299 319 336 360 364 369 372 373 #> [10585] 380 388 392 394 399 407 422 444 460 461   9  14  19  22  30  48  50  53 #> [10603]  61  62  63  66  76  88 104 112 118 144 145 148 157 169 193 214 217 222 #> [10621] 245 262 274 280 281 284 313 355 357 376 383 396 398 402 403 415 419 421 #> [10639] 428 438 451 454  17  18  23  49  76  89 106 113 130 143 156 170 174 177 #> [10657] 179 191 202 206 222 306 310 341 349 354 356 357 367 381 384 395 423 443 #> [10675] 448  46  76 105 109 114 132 137 143 151 157 158 163 166 168 171 175 178 #> [10693] 189 198 201 208 216 225 226 243 248 272 285 291 295 301 329 331 342 355 #> [10711] 385 397 407 408 420 422 437 441 453 458   7  45  74  99 122 124 129 134 #> [10729] 145 147 150 156 157 176 178 185 186 227 268 271 276 279 290 320 332 355 #> [10747] 380 389 390 399 400 411 425 436 447 459  24  48  56  68  71  96  97 123 #> [10765] 136 158 159 165 180 182 187 191 193 202 204 213 216 219 223 225 227 230 #> [10783] 233 241 250 269 280 294 297 308 334 351 359 364 366 385 394 421 430   9 #> [10801]  16  18  21  23  24  35  52  55  60  65  70  79 124 141 146 156 187 188 #> [10819] 189 208 227 234 240 264 269 277 320 322 337 338 343 367 369 372 374 389 #> [10837] 440 445 457  31  32  33  41  69  70  78 109 120 121 140 147 152 157 180 #> [10855] 185 197 209 245 256 277 288 311 329 340 377 388 394 397 417 438 454 456 #> [10873] 467 468   4   6  11  34  37  43  48  69  76  85  89  99 100 118 157 158 #> [10891] 161 164 169 177 204 207 209 219 231 242 253 278 286 291 300 305 319 322 #> [10909] 326 336 343 346 348 349 361 369 374 388 392 422   5   6  15  17  18  22 #> [10927]  31  45  54  63  65  66  70 109 113 118 129 131 135 136 145 148 154 158 #> [10945] 173 194 195 202 227 240 247 278 287 292 355 359 370 376 391 405 407 411 #> [10963] 416 426 432 443   1   5   6  28  36  37  42  45  54  55  59  62  74  79 #> [10981]  81 112 132 137 141 155 162 166 171 189 200 207 214 238 241 244 248 262 #> [10999] 266 278 290 348 354 356 358 360 376 394 399 414 419 426 433 444 454 463 #> [11017] 470   0  33  36  47  48  59  70  74  75 106 115 116 119 120 150 153 212 #> [11035] 215 216 221 222 241 268 282 320 331 332 341 348 349 369 386 388 392 409 #> [11053] 427 428 442 446 448 453 457 464  17  29  41  61  83 109 112 122 124 130 #> [11071] 139 152 153 160 162 164 174 175 205 213 224 229 261 266 283 300 301 306 #> [11089] 326 338 377 382 383 388 406 411 413 428 448 457 467  10  25  43  53  65 #> [11107]  83  98 106 107 111 162 179 189 198 214 223 247 249 252 283 289 300 306 #> [11125] 324 355 356 364 376 412 413 416 417 450 454  12  15  21  22  28  41  43 #> [11143]  46  66  69  74  94  97 108 109 120 122 137 172 184 189 191 220 225 232 #> [11161] 234 235 260 277 283 298 324 325 330 353 359 360 378 391 406 411 417 420 #> [11179] 441 447 456 466 467   8  18  41  43  52  57  60  82  95 109 111 120 122 #> [11197] 125 140 142 157 164 188 198 201 209 214 227 229 242 246 253 255 272 273 #> [11215] 277 280 294 296 297 303 316 324 334 337 349 388 389 392 400 413 420 422 #> [11233] 437 462 463 468 471   8   9  23  26  29  56  63  66  71  75  79 100 111 #> [11251] 138 150 166 170 187 192 196 201 204 219 232 236 240 247 252 253 280 291 #> [11269] 292 298 304 307 346 353 379 409 414 415 418 419 424 433 443 453 458 467 #> [11287] 473  20  27  29  48  94  95 104 105 116 129 135 139 142 160 185 206 213 #> [11305] 223 227 237 241 253 257 263 266 272 279 312 321 324 332 334 346 349 371 #> [11323] 375 379 391 396 415 424 429 434 435 436 444 450 469   1  13  17  20  21 #> [11341]  26  27  28  31  37  41  44  53  55  75  85  94  96  98 106 111 128 142 #> [11359] 148 149 159 205 206 223 243 259 270 273 290 293 297 307 319 339 343 353 #> [11377] 360 364 375 403 406 423 424 428 430 446 448 453 459 462 465 472 475  23 #> [11395]  47  61  72 104 108 111 122 124 137 147 155 171 173 174 177 179 194 222 #> [11413] 240 260 273 278 306 307 309 321 337 347 352 361 381 387 394 414 428 437 #> [11431] 444 456 467 480   4  10  13  58  72  85  89  90 123 124 129 130 131 174 #> [11449] 180 190 197 200 229 238 244 251 255 264 272 285 297 305 307 320 328 334 #> [11467] 360 374 382 389 395 417 421 426 428 443 445 447 455 470 476 479 481  12 #> [11485]  42  72  76  89  91  92 108 112 113 139 144 152 164 170 175 206 228 255 #> [11503] 263 264 282 289 311 313 317 327 329 332 339 364 372 386 409 416 424 438 #> [11521] 445 471   2   3  14  16  23  25  43  47  54  61  62 102 112 115 128 135 #> [11539] 165 176 188 189 214 265 283 289 292 300 318 323 346 367 368 375 402 403 #> [11557] 416 418 426 448 470 473 479 483   1  15  18  22  42  84  93 109 112 116 #> [11575] 129 144 149 158 167 171 177 193 196 207 209 224 234 249 252 260 271 275 #> [11593] 285 287 290 294 306 316 323 338 340 348 354 362 368 384 385 389 392 398 #> [11611] 409 415 420 432 443 457 483   7  10  15  24  60  77  87  89 112 120 133 #> [11629] 135 178 181 183 193 200 207 214 223 244 259 272 280 289 293 312 328 338 #> [11647] 345 359 363 364 383 394 400 412 424 438 467 471   0  38  42  44  59  66 #> [11665]  70  72  78  88  97 118 126 128 133 156 157 168 188 193 207 209 216 227 #> [11683] 230 263 270 293 296 302 341 345 366 368 376 380 388 392 401 404 423 429 #> [11701] 439 444 478 486  11  16  20  26  28  30  39  43  51  52  74  75  79  84 #> [11719]  90  96 103 128 137 169 172 182 186 188 191 202 219 234 238 246 251 254 #> [11737] 256 261 265 288 289 290 291 300 301 308 320 330 331 340 350 360 371 398 #> [11755] 403 430 452 453 463 464 473 477 486   3  10  19  22  28  42  63  88 115 #> [11773] 125 126 131 142 144 145 152 155 165 171 174 175 184 193 198 199 204 211 #> [11791] 212 218 237 248 262 264 266 294 309 311 329 346 365 374 382 386 394 405 #> [11809] 411 415 446 449 453 476 479 483  20  21  22  23  25  26  30  57  64  73 #> [11827]  88  93 106 154 158 162 165 192 205 210 213 217 228 229 252 262 263 282 #> [11845] 299 300 323 324 325 333 334 341 345 347 395 405 407 421 428 433 434 461 #> [11863] 480 483   2  11  19  20  54  90  96 101 102 103 123 129 134 148 151 156 #> [11881] 160 171 176 190 207 211 212 224 258 263 271 284 288 318 334 341 372 382 #> [11899] 391 410 412 440 449 468 474   3  16  26  30  37  43  70  84  98 101 111 #> [11917] 139 157 169 175 176 198 200 201 227 232 236 249 251 255 256 259 264 284 #> [11935] 296 301 303 309 315 363 366 379 382 389 399 407 413 414 415 427 437 458 #> [11953] 467 468 472   3   6   8  23  35  65  78  79  96  99 101 104 108 118 126 #> [11971] 141 142 172 173 180 195 203 214 224 239 245 256 260 262 264 270 273 282 #> [11989] 292 312 338 374 386 388 392 398 409 444 447 452  35  39  45  46  61  62 #> [12007]  73  82  87  91  98 123 134 137 142 148 159 175 185 187 194 197 220 236 #> [12025] 274 282 285 334 335 340 341 349 354 364 368 374 375 381 385 392 399 405 #> [12043] 407 418 436 446 472 478 479 488   2   3  11  13  16  27  39  52  82  87 #> [12061]  92 104 122 125 131 137 147 150 156 164 171 172 180 195 196 200 210 214 #> [12079] 216 224 226 234 240 241 254 255 260 279 291 302 332 336 339 360 361 374 #> [12097] 385 392 395 398 405 413 452 454 456 474 481 492 494   7  20  21  27  36 #> [12115]  44  69  75  79  81  94 105 110 127 129 140 145 150 152 153 184 200 217 #> [12133] 226 238 259 267 269 276 278 282 291 310 328 337 343 344 349 378 388 405 #> [12151] 425 431 432 433 437 459   1  13  17  18  29  48  53  63  70  73  86  88 #> [12169] 102 113 122 126 128 141 148 150 151 155 158 159 162 174 181 182 192 207 #> [12187] 240 246 253 309 313 316 338 340 354 356 359 375 376 402 404 411 413 424 #> [12205] 466 471 492   6  24  25  42  50  53  59  60  61  89  97 109 120 161 167 #> [12223] 169 175 184 185 191 211 212 246 266 271 272 279 297 299 312 331 338 352 #> [12241] 376 390 396 400 410 418 432 435 444 454 457 459 466 474 476 478 483 485 #> [12259] 489 496   1   3  10  15  21  26  37  60  62  63  85  89  95  99 126 130 #> [12277] 133 158 159 180 199 203 206 212 223 231 240 243 258 270 277 294 336 340 #> [12295] 353 358 362 364 387 411 413 422 428 482 483 487 496   6  17  36  39  57 #> [12313]  61  88  91 114 116 129 131 136 142 152 158 190 195 224 236 239 287 289 #> [12331] 292 318 320 322 324 337 340 344 345 346 352 356 382 396 425 436 463 484 #> [12349] 493   5   6  12  14  17  18  30  32  48  60  61  68  71  77  79  81  86 #> [12367] 109 131 143 146 151 154 155 159 168 180 181 183 184 187 189 200 216 225 #> [12385] 236 239 248 256 290 304 307 313 320 322 329 336 345 351 356 390 393 409 #> [12403] 426 433 441 475 495 497  10  17  23  37  79 107 115 124 127 135 148 180 #> [12421] 185 225 256 265 272 280 322 327 332 337 350 353 363 386 403 409 417 422 #> [12439] 437 438 479 480 488   1   3  11  17  23  35  36  56  90  91 104 113 124 #> [12457] 127 135 137 142 149 155 188 223 233 257 265 272 274 291 302 332 334 335 #> [12475] 340 350 355 360 361 372 395 402 409 414 416 434 436 466 470 471 474 483 #> [12493] 497  12  16  20  25  28  30  43  71  78  82  83 103 120 130 136 139 141 #> [12511] 164 169 175 177 208 215 225 239 256 262 269 271 272 286 299 306 322 341 #> [12529] 344 349 369 394 399 400 417 418 431 433 439 440 456 460 461   5  20  34 #> [12547]  48  52  72  80  81  82  83  86  89  94  99 112 123 138 144 145 152 153 #> [12565] 163 179 190 193 202 204 205 221 236 238 256 265 266 268 284 299 305 321 #> [12583] 325 341 344 346 353 363 381 385 390 424 435 458 462 466 472 480   1   3 #> [12601]  43  79  83  93  94 113 116 135 143 152 178 193 198 203 204 210 227 233 #> [12619] 237 257 263 264 269 291 302 305 323 329 333 339 342 412 418 423 426 446 #> [12637] 456 486 489 490 497 503   0  16  17  18  42  45  72  73  79  82  89  94 #> [12655]  98 104 115 121 130 136 142 158 184 187 191 194 195 202 204 217 219 223 #> [12673] 240 249 251 252 254 255 261 264 276 281 286 288 296 303 309 313 315 322 #> [12691] 348 357 364 365 368 369 379 389 406 412 421 424 431 437 439 444 445 446 #> [12709] 449 452 458 460 463 466 469 470 473 475 491 503 504   2  11  25  26  29 #> [12727]  38  41  43  46  47  61  77  78  80  86  88  89 114 121 125 149 151 155 #> [12745] 167 208 226 234 244 252 284 294 305 313 326 338 351 362 367 370 372 381 #> [12763] 384 394 395 396 401 408 414 418 429 481 486   4  15  21  52  58  65  97 #> [12781] 119 154 159 181 185 190 191 193 201 209 216 220 222 234 239 254 262 264 #> [12799] 269 277 281 289 296 306 308 312 313 317 320 333 334 354 356 359 362 372 #> [12817] 374 381 386 397 426 442 447 450 452 458 473 476 478 487 498 499   1  10 #> [12835]  28  37  55  59  73  77  84 105 106 128 148 156 167 188 200 222 225 229 #> [12853] 232 248 250 258 267 274 275 279 281 309 314 315 330 354 358 360 363 365 #> [12871] 390 392 430 433 437 441 456 458 483 485 489 490 500  32  51  69  77  90 #> [12889] 103 104 105 108 113 114 122 128 160 164 169 179 190 203 208 215 217 228 #> [12907] 237 251 253 254 255 257 263 264 277 280 305 311 313 315 319 331 333 358 #> [12925] 423 426 434 447 457 461 468 489 493 497  27  32  41  54  62  69  87  89 #> [12943]  96 112 117 145 149 162 179 188 196 215 267 282 288 290 309 310 340 341 #> [12961] 343 355 364 372 382 393 394 398 403 415 424 435 439 455 477 486 487  36 #> [12979]  37  51  52  58  60  84  99 102 103 127 140 150 198 208 212 216 238 250 #> [12997] 264 266 267 275 282 291 302 306 318 322 325 336 347 353 357 362 367 377 #> [13015] 407 409 417 423 427 441 448 455 461 468 480 502 506  12  20  33  36  46 #> [13033]  57  65  81  84 100 101 128 129 138 141 149 158 163 169 182 187 196 213 #> [13051] 217 223 224 227 231 233 239 243 246 273 297 312 329 357 361 363 372 374 #> [13069] 387 394 399 409 415 423 427 440 442 454 461 466 473 486 492 504 505 512 #> [13087]  20  21  22  30  35  40  42  46  59  70  71  74 110 111 121 122 135 149 #> [13105] 153 154 160 175 177 179 208 211 212 223 243 260 269 271 285 294 298 301 #> [13123] 309 339 346 347 357 361 374 389 396 438 444 447 449 456 463 470 472 503 #> [13141]  14  39  46  52  62  68  89 103 108 145 153 157 162 191 193 195 198 200 #> [13159] 219 223 226 230 249 263 273 284 286 291 293 302 319 320 322 344 349 354 #> [13177] 358 363 390 393 397 411 417 423 428 440 446 473 487 494 504 507 513   2 #> [13195]  18  20  29  49  50  51  58  68  90 115 117 141 163 170 175 178 191 194 #> [13213] 195 207 243 251 277 291 295 307 309 312 316 347 348 356 372 382 386 403 #> [13231] 418 436 437 441 457 460 468 478 481 485 495 509  12  19  20  39  47  70 #> [13249]  77  83 129 135 152 154 156 157 158 175 194 195 198 206 208 220 241 246 #> [13267] 248 267 272 273 290 317 337 357 400 422 436 440 454 465 468 471 482 484 #> [13285] 486 487 498 507   4  11  51  61  70  79  81 107 116 134 138 176 186 197 #> [13303] 211 240 243 260 264 270 281 295 306 308 330 368 380 381 382 390 393 415 #> [13321] 419 422 424 439 443 463 479 490 491 496 498 512   0  10  12  13  15  26 #> [13339]  38  40  62  75  76  92  94 145 155 162 166 172 175 201 210 217 220 248 #> [13357] 265 291 298 304 314 318 324 328 329 352 370 375 382 385 397 398 404 416 #> [13375] 426 429 438 450 454 491 506   1  11  16  56  72  74  75  84  97 100 114 #> [13393] 119 152 153 158 177 189 200 201 206 260 262 267 277 283 284 300 304 318 #> [13411] 327 335 337 341 344 348 351 354 359 364 387 404 424 428 430 440 447 450 #> [13429] 455 465 487 496 519   7   8  10  11  18  21  26  31  32  36  52  57  62 #> [13447]  63  66  96 109 110 123 154 160 165 186 189 207 209 210 215 234 237 250 #> [13465] 263 264 265 268 271 283 291 296 311 312 325 331 343 375 382 390 391 396 #> [13483] 401 412 428 444 445 452 460 461 466 477 481 488 494 496 506 512 516 521 #> [13501]   5   6  31  40  41  43  66  78  93  94 107 110 117 125 127 128 132 149 #> [13519] 156 172 234 247 248 258 263 268 270 283 291 293 314 325 349 350 354 373 #> [13537] 383 389 406 411 441 445 446 451 454 461 481 484 489 490 496 501 510 518 #> [13555] 519   5  16  26  41  48  53  97 102 106 113 129 165 168 176 178 211 217 #> [13573] 219 220 240 260 261 269 270 276 293 294 310 318 324 326 328 333 341 344 #> [13591] 355 357 367 386 387 412 414 420 433 434 435 437 441 448 454 475 480 488 #> [13609] 494 515 520 523  22  56  63  77  89  97 118 124 126 148 150 159 162 163 #> [13627] 168 180 184 191 197 202 216 218 235 236 256 269 272 277 279 280 284 303 #> [13645] 341 342 357 371 378 380 404 428 448 460 472 488 519   2   3   4   8  16 #> [13663]  46  73  92 100 108 109 119 140 141 153 163 172 179 185 186 194 208 216 #> [13681] 218 220 227 228 234 259 277 280 283 304 323 343 348 361 382 387 403 407 #> [13699] 412 426 437 438 444 447 469 476 478 498 513 518   2  11  15  21  49  52 #> [13717]  53  56  58  65  81  83 105 114 130 134 139 159 162 164 168 175 177 185 #> [13735] 187 189 209 215 222 238 252 276 290 293 302 310 312 319 327 341 354 358 #> [13753] 368 380 385 390 403 409 410 412 430 433 450 463 467 471 477 486 498 511 #> [13771]  38  41  55  56  61  70  71 135 138 153 177 181 187 192 202 226 232 234 #> [13789] 238 281 284 295 296 305 311 331 334 336 346 350 351 356 370 392 394 395 #> [13807] 397 414 429 432 437 442 453 454 456 459 466 470 480 513 515  17  18  30 #> [13825]  32  45  57  61  78  81  92 113 118 121 126 131 133 144 156 166 183 204 #> [13843] 216 218 221 222 258 268 269 278 288 300 312 326 328 332 342 344 346 356 #> [13861] 371 391 397 403 404 434 471 477 488 516 527   4   6  32  66  75 100 116 #> [13879] 128 130 155 162 195 197 201 209 212 228 241 253 264 283 284 290 292 294 #> [13897] 297 300 305 312 318 321 350 360 365 378 393 400 410 412 427 433 448 453 #> [13915] 470 504 513 528  47  52  55  66  86  98  99 110 111 128 138 143 146 151 #> [13933] 152 153 157 171 176 178 181 219 227 230 236 238 254 268 272 287 289 310 #> [13951] 368 373 385 393 395 418 434 487 511 513 521  63  65  66  68  71 105 112 #> [13969] 121 122 127 150 165 174 175 176 187 189 194 197 208 209 228 241 249 252 #> [13987] 253 254 255 264 265 267 277 290 293 301 305 313 322 336 340 344 362 371 #> [14005] 374 377 391 394 395 405 414 428 456 459 462 463 469 483 521  40  48  67 #> [14023]  68  75  77  79  85  91 106 112 114 128 135 145 167 185 206 215 222 233 #> [14041] 269 272 276 277 280 283 295 311 313 314 318 363 368 371 404 410 429 450 #> [14059] 451 453 463 472 483 485 498 503 506 517 518 531   4  10  22  24  32  57 #> [14077]  66  79  87  92  93 103 105 110 139 149 165 169 173 190 198 214 224 248 #> [14095] 261 265 282 289 291 324 329 330 334 339 345 348 382 392 394 395 411 430 #> [14113] 431 432 439 441 443 445 459 478 492 494 496 509 511 514 520   2   3   8 #> [14131]  23  24  26  39  46  47  59  60  67  68  87 115 120 125 128 138 154 191 #> [14149] 214 244 252 258 272 295 296 305 306 311 334 358 369 370 376 382 391 393 #> [14167] 408 429 432 436 443 445 452 456 459 462 470 473 474 491 498 500 504 506 #> [14185] 508 517 525  23  31  34  45  56  61  64  72  75  76  77  79  91  92  93 #> [14203] 111 112 116 125 127 151 153 172 181 190 195 196 202 234 237 239 242 258 #> [14221] 268 276 310 325 333 341 348 354 383 392 393 399 439 448 469 474 477 479 #> [14239] 482 495 496 505 508 517 533 534  11  14  28  35  37  38  40  48  72  74 #> [14257]  90 102 110 112 119 135 168 187 188 190 209 228 248 254 274 278 299 302 #> [14275] 362 397 405 407 422 435 436 440 462 466 476 485 487 494 513 527  14  18 #> [14293]  24  38  39  40  43  64  70  73  79  83  89 106 108 111 119 123 130 136 #> [14311] 139 145 149 162 164 199 212 213 216 260 263 264 266 273 294 299 315 327 #> [14329] 338 359 370 396 405 408 430 436 457 472 474 505 508 515 523 531 532 537 #> [14347]  11  23  33  36  45  53  68  71  76  98 103 119 129 130 140 154 157 158 #> [14365] 160 161 179 212 232 239 252 253 254 274 290 296 306 312 315 321 327 351 #> [14383] 362 367 385 392 395 429 434 445 461 465 469 500 537 538  14  26  38  67 #> [14401]  72  76  84  85  96  98 101 102 115 143 154 182 183 192 212 227 231 240 #> [14419] 244 253 259 264 265 266 276 281 291 297 306 307 321 328 331 354 372 377 #> [14437] 388 394 411 413 423 425 445 470 476 489 503 512 518 536 538   3   8   9 #> [14455]  18  27  40  41  42  47  49  56  66 108 122 129 154 155 161 162 167 178 #> [14473] 179 184 185 186 190 192 201 221 222 223 228 236 255 266 280 282 299 305 #> [14491] 307 322 324 360 369 379 383 388 398 426 435 444 445 446 447 459 477 478 #> [14509] 485 497 498 500 533  18  21  33  41  53  54  62  73  74  77  99 103 110 #> [14527] 113 122 127 180 191 193 194 199 204 224 240 253 258 305 316 317 320 327 #> [14545] 333 341 350 355 386 392 395 396 398 401 402 412 422 425 430 443 472 481 #> [14563] 484 495 514 521 524 537  39  42  65  68  81  94 113 120 129 150 151 156 #> [14581] 158 167 188 236 248 260 268 274 285 295 302 306 310 328 333 341 358 363 #> [14599] 365 366 371 387 403 426 442 444 450 457 468 494 498 499 501 526 527 528 #> [14617] 533   8   9  21  24  33  51  84  89  97 108 115 132 149 201 228 230 260 #> [14635] 272 274 277 280 341 352 360 361 372 396 398 400 402 408 418 421 426 429 #> [14653] 445 491 495 496 503 511 514 520 524 532 541 542   1   7  14  62  97 106 #> [14671] 112 113 122 146 150 164 173 181 188 201 207 208 214 220 221 226 249 251 #> [14689] 279 283 285 287 294 304 306 321 324 341 354 358 364 371 377 386 391 415 #> [14707] 417 434 455 476 480 513 528 544  10  17  19  27  28  43  55  58  66  68 #> [14725]  81  83  91  94  99 112 121 128 152 164 168 172 185 207 213 214 226 237 #> [14743] 239 247 248 250 260 264 266 268 274 279 281 293 295 304 313 317 322 324 #> [14761] 334 356 365 387 388 400 414 436 441 443 465 477 485 486 497 513 514 519 #> [14779] 522 527 529  10  20  29  34  39  45  46  50  76  90  98 117 121 125 130 #> [14797] 131 138 143 149 162 180 182 186 193 199 215 233 257 268 280 288 296 308 #> [14815] 327 368 370 371 375 379 386 392 403 405 431 433 466 468 475 506 520 537 #> [14833] 538   1  15  20  36  70  90  97  99 108 118 126 158 163 173 182 205 213 #> [14851] 233 242 243 263 300 314 370 373 393 399 408 422 429 439 447 455 462 470 #> [14869] 471 475 492 500 501 527 540   1   3  23  27  30  39  44  50  56  68  87 #> [14887] 114 115 123 145 146 148 157 169 185 199 215 230 247 260 264 267 272 291 #> [14905] 300 312 314 317 319 321 325 328 330 334 343 348 353 374 378 381 404 408 #> [14923] 419 420 431 447 453 457 467 468 472 486 500 511 519 531 537 548   0   8 #> [14941]  54  55  57  60  87  94  98 104 115 121 124 125 139 156 165 173 178 189 #> [14959] 195 197 207 276 283 304 321 324 328 341 363 374 378 380 406 407 411 419 #> [14977] 420 421 429 438 441 442 444 448 450 463 468 482 530   5   6  18  19  20 #> [14995]  29  33  34  40  52  57  86  90  93 102 121 123 129 147 155 156 187 202 #> [15013] 203 209 220 247 249 280 286 313 322 323 343 348 352 362 364 365 383 384 #> [15031] 391 422 449 465 477 486 489 490 494 500 502 503 512  18  19  38  69  71 #> [15049]  96  98 103 112 114 123 136 141 188 195 197 205 207 208 211 218 224 246 #> [15067] 251 256 258 263 277 280 284 287 299 307 308 322 337 338 352 368 370 383 #> [15085] 399 415 420 423 431 438 448 449 488 490 494 496 509 510 511 516 545 550 #> [15103] 551   2  10  17  35  46  48  57  67  90  98 105 106 110 116 121 125 126 #> [15121] 142 150 152 155 164 178 222 225 229 246 255 266 270 283 284 334 360 381 #> [15139] 388 391 392 421 441 449 455 461 481 491 509 516 517 525 527 531 540 550 #> [15157]   3   4  17  25  34  47  49  54  71  74  83  86  89  91 102 105 117 136 #> [15175] 144 153 159 160 165 170 181 188 204 208 219 245 277 285 321 356 376 401 #> [15193] 402 408 450 456 463 466 493 502 514 533 549 550 552   5  13  35  62  64 #> [15211]  82  85  90 102 103 104 110 113 119 132 136 138 139 141 151 159 167 202 #> [15229] 209 217 243 250 272 285 292 305 306 335 338 340 349 372 387 388 391 396 #> [15247] 411 422 457 463 475 484 540 550   8  30  38  40  63  77  82  96 105 107 #> [15265] 115 116 125 151 157 163 173 184 191 200 215 222 235 269 270 276 289 298 #> [15283] 315 318 359 363 368 403 404 407 415 417 428 483 488 495 497 498 499 500 #> [15301] 523 538 539  14  30  53  88  91  95 129 159 168 172 173 178 202 214 215 #> [15319] 221 229 241 246 261 269 275 277 295 303 308 313 323 332 333 335 340 343 #> [15337] 351 356 364 393 398 403 411 413 421 424 432 433 437 461 467 481 485 494 #> [15355] 502 521 551  19  44  47  50  66 113 117 118 121 131 143 150 154 158 173 #> [15373] 182 185 205 206 219 220 221 230 241 245 248 252 271 273 302 310 324 328 #> [15391] 344 369 390 392 397 405 411 412 416 427 444 458 469 477 482 483 484 491 #> [15409] 515 526  20  28  38  44  53  58  59  78  83  89 123 130 139 146 161 180 #> [15427] 187 196 199 210 224 240 250 258 260 264 272 282 285 286 289 290 304 305 #> [15445] 328 346 354 364 395 400 401 435 436 440 445 450 503 508 522 529 533 546 #> [15463] 554  14  19  27  53  54  56  64  90  97 112 118 131 135 138 150 163 164 #> [15481] 168 174 214 232 237 255 259 265 270 274 281 283 286 302 312 314 319 325 #> [15499] 332 338 345 353 360 361 366 380 383 407 416 417 422 429 450 454 469 491 #> [15517] 495 507   0   8   9  12  14  17  19  29  30  41  42  62  64  78  94 110 #> [15535] 114 130 139 148 158 174 179 196 205 215 222 234 235 240 257 271 278 312 #> [15553] 346 362 381 394 401 408 411 439 441 464 487 492 499 500 505 506 511 516 #> [15571] 524 529 535 540 549 560   7  12  29  36  44  54  90  92 119 123 127 133 #> [15589] 148 156 157 166 180 192 193 199 200 210 230 232 235 242 244 247 268 270 #> [15607] 281 283 287 299 345 372 398 404 434 447 449 451 472 475 501 504 517 533 #> [15625] 538 545 555   0   2  17  39  48  54  58  62  77  78  85  86  91 184 189 #> [15643] 193 197 199 201 208 209 212 216 218 228 230 233 240 245 259 261 285 299 #> [15661] 330 335 351 365 376 377 389 430 442 447 449 453 466 479 489 492 508 515 #> [15679] 523   8  23  24  34  38  43  66  69  71 101 115 133 148 165 180 189 193 #> [15697] 201 208 210 213 217 225 226 261 272 293 295 313 315 319 321 347 359 373 #> [15715] 376 423 426 441 469 477 489 517 537 551   2   8  17  18  32  33  40  42 #> [15733]  54  57  58  61  63  85  87 100 104 116 126 127 173 182 189 196 210 221 #> [15751] 222 224 227 249 250 259 265 266 273 284 288 294 318 334 355 393 405 411 #> [15769] 417 427 433 447 467 476 497 519 536 541 545 550 557   0   7  25  28  40 #> [15787]  41  46  63  73  88  93  95 120 123 135 140 162 164 170 173 182 192 194 #> [15805] 197 210 216 246 247 249 260 274 282 289 296 301 307 308 329 358 364 385 #> [15823] 390 413 428 433 445 448 458 465 469 479 482 484 491 517 524 525 541 565 #> [15841]   5  16  17  18  21  39  57  79 109 112 117 130 141 148 151 165 166 172 #> [15859] 209 210 211 215 216 220 230 236 242 258 260 267 270 272 284 287 298 303 #> [15877] 312 315 327 332 337 343 345 354 356 368 376 384 387 391 405 409 416 425 #> [15895] 427 464 471 476 477 484 489 493 494 498 501 524 548   3  12  24  33  49 #> [15913]  69  75 102 116 133 141 177 182 187 194 201 222 224 230 234 236 264 301 #> [15931] 318 336 340 341 344 361 365 368 380 393 409 421 422 425 466 481 509 515 #> [15949] 521 526 535 539 550  32  60  69  76  89  96 101 104 109 123 129 135 167 #> [15967] 168 176 187 194 205 209 213 225 235 253 257 324 328 331 333 344 346 356 #> [15985] 366 376 395 398 399 431 440 456 457 463 472 489 491 492 501 514 516 540 #> [16003] 543 544 549 563   0   1   4  15  52  53  55  63  66  79  84  94 100 106 #> [16021] 107 122 130 141 146 151 153 154 181 183 188 192 195 197 211 217 224 238 #> [16039] 242 248 258 261 267 279 292 296 307 326 332 354 355 356 360 362 370 373 #> [16057] 395 431 439 443 445 447 472 474 476 497 501 506 522 530 552 553 555 567 #> [16075] 568   4   7   9  20  22  26  27  30  68  80  83  91 109 113 117 132 134 #> [16093] 137 141 142 151 180 196 207 215 222 226 244 246 257 260 283 294 298 301 #> [16111] 312 340 342 360 376 386 402 420 424 432 439 442 452 454 458 465 494 503 #> [16129] 506 520 540 545   6  11  13  20  24  28  45  48  57  97 107 112 124 127 #> [16147] 133 139 149 159 164 186 209 214 232 245 247 259 260 261 262 269 274 290 #> [16165] 302 320 323 330 335 338 347 350 359 371 372 392 403 418 424 447 473 493 #> [16183] 495 499 500 505 519 544 557 560   6  19  27  28  35  39  48  49  62  71 #> [16201]  75  86  89  99 100 109 122 125 133 139 152 154 173 176 177 191 199 255 #> [16219] 256 263 268 269 272 277 300 305 307 315 318 320 347 359 372 390 403 404 #> [16237] 413 416 417 441 443 454 461 466 487 495 496 506 507 514 519 539 541 542 #> [16255] 550 567   4  11  12  15  31  62  65  77  86  90  95 122 125 153 167 178 #> [16273] 182 193 202 226 229 240 249 256 261 268 273 275 283 301 304 320 322 332 #> [16291] 333 341 349 362 368 370 375 387 396 407 424 450 458 473 495 500 518 537 #> [16309] 573   7   8  39  47  51  74  76  80  88  91  93  99 121 122 139 142 148 #> [16327] 152 153 180 198 221 227 231 235 242 247 252 253 267 270 275 285 288 296 #> [16345] 301 310 311 353 355 365 371 395 396 397 398 420 433 436 441 454 468 482 #> [16363] 486 500 501 508 512 513 535 539 557 560 561   1   3  22  42  44  52  58 #> [16381]  66  75  78  85 102 105 108 110 120 125 126 133 139 157 166 167 203 226 #> [16399] 235 244 267 302 306 325 328 349 360 367 379 392 400 413 419 420 423 459 #> [16417] 463 476 480 496 516 524 531 535 538 547 559   0  11  16  19  38  40  43 #> [16435]  48  56  59  67  68  70  75  82  85  88 119 128 131 159 162 166 169 170 #> [16453] 172 176 180 184 186 187 190 191 195 209 216 221 230 235 241 249 272 279 #> [16471] 280 293 318 325 326 349 364 365 383 391 409 416 420 426 430 431 432 444 #> [16489] 448 471 474 475 476 481 488 490 492 493 494 514 555 564 573   9  11  15 #> [16507]  28  30  41  68 104 108 115 118 122 141 147 152 166 177 180 191 197 203 #> [16525] 204 207 212 216 218 228 241 289 323 333 362 363 376 387 388 397 400 405 #> [16543] 411 422 424 447 461 463 466 484 509 510 522 528 530 532 551   4  34  38 #> [16561]  39  48  59  63  73 107 126 128 132 138 143 158 173 192 200 211 228 232 #> [16579] 234 237 242 249 262 264 275 278 285 301 310 315 316 347 351 361 369 383 #> [16597] 392 416 424 428 441 477 480 507 512 522 523 544 548 555 556 578  12  17 #> [16615]  22  28  41  54  60  62  83 111 122 125 141 152 154 167 182 189 196 217 #> [16633] 218 223 224 226 237 240 254 279 285 306 333 349 350 360 361 372 384 386 #> [16651] 391 395 396 418 419 427 445 464 465 466 476 487 489 494 498 517 527 529 #> [16669] 554 559 561 574 578  30  32  37  48  50  52  57  68  71 100 104 125 128 #> [16687] 131 136 141 153 160 168 172 177 186 221 224 226 228 231 255 268 270 277 #> [16705] 278 281 285 287 291 295 300 354 364 368 370 372 385 388 389 393 395 418 #> [16723] 427 428 447 455 461 503 505 517 523 536 558 565 572   3   7   9  17  21 #> [16741]  38  43  56  73  74  75  85  92  93 116 172 178 192 205 207 224 235 274 #> [16759] 277 290 294 296 299 303 310 315 329 330 333 355 357 370 382 393 397 403 #> [16777] 408 411 438 441 445 463 464 470 475 477 501 509 514 528 540 549 555 562 #> [16795] 574   0   6   8  14  15  16  34  49  56  82  94 103 107 178 190 209 214 #> [16813] 225 231 239 241 243 249 257 269 282 287 294 295 296 303 306 332 341 349 #> [16831] 360 370 378 389 402 415 434 441 455 463 482 483 495 500 501 506 511 522 #> [16849] 527 531 541 546 547 555 569   5  21  44  47  51  53  57  66  76  86 108 #> [16867] 170 171 184 202 233 237 265 271 272 286 289 303 310 312 316 327 349 357 #> [16885] 362 370 375 387 390 394 407 410 416 425 431 441 446 458 471 477 492 507 #> [16903] 508 511 517 518 520 528 550 561 562 564 565 571 579 583   7  28  30  39 #> [16921]  48  49  54  69  71  78  86 101 108 119 127 132 147 151 173 180 192 205 #> [16939] 214 234 236 239 241 245 248 258 260 275 291 298 299 324 325 335 342 390 #> [16957] 391 392 430 439 491 492 493 508 509 516 519 532 540 549   5  21  35  39 #> [16975]  44  45  49  57  75  86  89 104 109 116 142 164 185 189 205 225 233 238 #> [16993] 260 266 270 299 300 316 330 334 335 374 390 392 400 411 413 419 429 435 #> [17011] 460 480 484 486 535 544 552   3  19  21  23  43  52  54  62  67 100 135 #> [17029] 157 163 165 167 189 200 225 246 259 263 270 273 292 299 300 321 333 340 #> [17047] 345 346 381 382 392 396 397 398 399 405 409 412 414 428 440 451 474 478 #> [17065] 492 494 496 537 544 566 584  20  42  47  50  59  62  64  85  87  88 118 #> [17083] 133 152 218 229 244 249 271 298 300 310 312 313 315 320 321 322 327 339 #> [17101] 341 354 369 383 389 397 402 403 407 411 421 426 433 438 441 450 457 480 #> [17119] 482 490 498 520 543 560 585  11  13  18  24  33  48  53  59  64  68  70 #> [17137]  90  98 100 138 154 155 159 167 173 202 215 223 224 237 241 248 260 273 #> [17155] 277 278 285 288 292 312 318 320 321 322 340 341 344 345 353 370 380 402 #> [17173] 408 454 463 464 470 473 486 498 504 525 529 530 541 550 556 558 573 587 #> [17191]  13  14  27  33  35  40  54  71  74  94 102 122 139 140 161 162 166 170 #> [17209] 172 176 189 191 195 211 212 215 234 241 267 283 286 289 292 353 370 397 #> [17227] 399 400 405 408 412 438 451 458 475 490 514 523 537 567  12  29  30  38 #> [17245]  52  61  62  77  78  80 106 121 126 145 169 197 212 228 229 235 262 263 #> [17263] 267 298 304 310 312 315 319 329 332 344 364 365 366 367 371 378 381 383 #> [17281] 384 385 389 399 403 419 423 436 453 455 462 479 492 497 512 521 529 551 #> [17299] 554 559 560 568 580 589  15  16  27  50  51  54  72  83  84 118 129 160 #> [17317] 163 166 168 171 193 194 195 209 214 216 236 243 254 257 287 291 301 314 #> [17335] 317 322 327 330 334 356 373 387 391 392 399 401 403 404 418 443 447 451 #> [17353] 452 457 466 467 493 494 498 501 511 521 523 526 531 532 533 536 540 545 #> [17371] 547 556 568 569 570 571 575 582 583   5  15  49  50  55  56  59  62  63 #> [17389]  79  85  95 131 136 144 146 162 170 186 191 194 197 201 205 211 217 228 #> [17407] 257 259 270 271 273 289 311 326 328 329 355 356 358 370 388 390 393 408 #> [17425] 427 429 435 445 453 472 479 482 489 498 505 526 528 549 561 567 568 581 #> [17443] 588  17  31  35  61  69  96 110 125 129 137 141 143 153 160 166 172 207 #> [17461] 217 219 253 259 271 279 287 314 345 347 369 385 388 399 400 428 438 439 #> [17479] 441 446 453 463 466 472 474 484 496 502 508 526 533 546 553 561 569 570 #> [17497]  25  61  77  87  90  95  96 107 112 114 121 141 153 172 174 195 204 214 #> [17515] 220 225 238 263 272 290 298 300 311 312 340 341 352 361 366 372 394 398 #> [17533] 416 429 433 448 463 479 488 520 524 529 537 557 569 572   4  20  28  55 #> [17551]  60  74  77  81  84 111 113 117 118 140 141 151 158 164 172 191 197 211 #> [17569] 221 236 262 270 288 294 305 308 309 315 335 341 358 368 374 381 397 415 #> [17587] 442 450 464 468 469 471 478 498 505 515 526 528 542 549 550 579 591   1 #> [17605]   5  25  38  47  51  74  79  81  95  98 138 140 144 150 184 191 195 224 #> [17623] 242 282 289 291 293 298 306 331 335 339 345 354 372 375 381 399 410 418 #> [17641] 453 461 478 499 521 537 546 549 560 564 567 576 581 583 590   4  12  20 #> [17659]  23  36  37  52  64  69  84 106 107 111 114 132 136 142 149 167 171 172 #> [17677] 180 182 191 195 197 219 230 231 233 236 238 242 244 271 280 285 290 303 #> [17695] 306 322 338 340 346 369 392 403 405 411 441 445 464 516 524 540 545 549 #> [17713] 571 587 596  22  23  31  45  61  69  80  82  87  90  92  93 103 111 119 #> [17731] 144 146 148 153 160 164 173 174 182 185 187 190 205 206 221 235 249 262 #> [17749] 268 269 278 295 330 335 339 345 364 367 379 381 382 385 393 396 421 422 #> [17767] 423 446 452 470 472 478 487 504 515 519 520 525 549 575 580 587 589   4 #> [17785]  17  24  31  32  39  54  62  85  89  98 108 113 127 129 132 150 166 198 #> [17803] 207 210 216 230 235 236 238 250 251 269 297 305 313 322 324 327 331 335 #> [17821] 342 346 381 390 393 404 410 415 422 426 432 434 441 447 459 464 469 475 #> [17839] 492 519 520 534 544 566 567 586 587 594   4  30  31  50  66  84  99 113 #> [17857] 123 128 136 138 140 148 150 156 157 161 171 180 192 198 227 233 245 262 #> [17875] 263 269 274 280 281 285 296 303 335 336 340 356 363 365 390 395 396 399 #> [17893] 405 406 429 430 441 442 453 469 477 482 493 511 514 536 548 557 560 567 #> [17911] 584  13  16  37  42  46  49  59  63  64  66  79  85 102 118 137 149 177 #> [17929] 178 187 234 240 241 242 256 258 259 278 285 288 291 319 324 325 362 370 #> [17947] 373 394 403 406 410 424 428 429 436 453 462 487 498 530 548 553 563 565 #> [17965] 568 588 594 600  21  35  37  39  56  58  62  64  91  97 107 118 123 137 #> [17983] 147 159 161 163 182 220 222 230 240 250 268 278 283 297 301 306 307 308 #> [18001] 345 353 368 378 379 394 405 418 423 428 438 444 460 464 466 483 511 513 #> [18019] 514 524 529 544 558 565 568 583 588 597   5  17  23  39  47  58  65  67 #> [18037]  74  79  85  88  89  90 112 119 128 140 171 197 204 218 228 243 244 264 #> [18055] 269 303 308 318 320 331 332 338 343 345 348 361 362 368 374 429 441 445 #> [18073] 447 450 453 460 473 487 488 493 501 503 514 519 531 541 553 561 571 576 #> [18091] 577 582 595   6  23  29  31  35  44  47  61  63  94  96 112 124 125 126 #> [18109] 141 155 166 176 184 191 193 199 209 232 249 277 325 344 345 348 349 350 #> [18127] 352 359 360 370 378 394 395 399 401 404 416 417 434 435 439 448 492 506 #> [18145] 509 510 514 543 554 560 570 585 592 596  18  19  21  34  43  58  59  60 #> [18163]  61  78  79  96 111 114 119 122 128 131 143 146 162 197 236 251 257 283 #> [18181] 292 293 301 303 307 318 323 324 331 349 377 378 384 392 401 405 406 418 #> [18199] 446 458 479 485 490 514 521 536 538 548 559 566 573 585 587 589  12  33 #> [18217]  37  39  44  47  50  60  70  80  93  97  99 108 109 118 119 120 126 135 #> [18235] 136 139 154 161 170 174 197 204 206 210 212 214 232 233 240 243 245 252 #> [18253] 265 267 271 290 292 296 309 310 335 399 404 406 409 417 427 432 436 453 #> [18271] 471 481 482 502 521 524 525 539 549 571 578 585 592 594  26  29  31  33 #> [18289]  42  50  59  71  78  79  86  90 104 108 116 119 125 135 143 147 150 173 #> [18307] 180 194 199 210 213 231 246 253 257 280 288 291 320 321 345 359 377 384 #> [18325] 391 393 397 400 402 412 428 433 453 460 462 477 503 535 538 539 583 600 #> [18343]  32  36  61  68  69  70  83  86  92 102 121 122 126 131 160 162 175 196 #> [18361] 217 222 230 239 243 252 256 259 276 289 294 296 299 303 310 329 349 353 #> [18379] 354 369 370 393 395 396 405 420 476 486 490 525 537 540 554 560 561 569 #> [18397] 603 605  17  18  19  44  56  62  66  69  73  75  79 105 122 127 134 144 #> [18415] 150 157 181 186 191 195 197 215 217 222 238 248 271 281 282 302 329 334 #> [18433] 345 349 355 376 381 392 393 400 406 421 440 449 452 453 460 467 473 476 #> [18451] 482 487 504 508 515 520 524 534 538 544 550 563 566 567 569   1   5  23 #> [18469]  30  45  70  80  96  98 119 140 146 148 149 150 164 168 203 206 211 235 #> [18487] 238 251 254 259 301 305 315 339 349 373 384 396 409 423 432 441 448 449 #> [18505] 452 456 485 492 493 510 516 534 535 560 582 599 605  25  32  42  46  55 #> [18523]  77  91 113 125 134 142 146 168 203 207 212 232 259 266 271 273 286 296 #> [18541] 300 327 352 360 366 378 379 405 418 443 447 449 453 468 476 483 490 491 #> [18559] 496 501 509 518 521 523 527 531 538 548 556 567 573 605   2  14  16  23 #> [18577]  46  49  66  71  76  87 103 107 108 109 112 139 146 148 151 157 162 169 #> [18595] 175 194 195 197 203 210 217 223 228 231 232 237 248 253 256 263 287 295 #> [18613] 303 341 351 401 411 418 420 429 438 439 455 463 484 486 488 497 510 528 #> [18631] 533 535 547 553 575 576 589 597 602 603   1   4  20  28  34  47  55  65 #> [18649] 100 106 114 161 167 179 197 201 202 231 234 235 240 241 243 263 281 284 #> [18667] 289 314 316 320 323 359 389 417 424 458 459 463 469 470 495 502 511 522 #> [18685] 541 542 548 550 551 555 564 569 572 589 603 604   0   9  12  13  17  32 #> [18703]  37  39  43  47  52  61  72  85  87  89 121 122 125 132 142 154 162 169 #> [18721] 187 220 241 250 255 256 263 265 282 283 288 312 322 332 338 352 378 381 #> [18739] 390 394 408 415 433 444 453 481 492 496 519 522 539 552 553 578 582 590 #> [18757] 597 601 603 604  20  22  24  33  38  50  62  65  67  86  88  96  99 100 #> [18775] 104 112 123 126 144 146 154 160 166 168 178 207 222 227 239 245 246 251 #> [18793] 253 285 288 314 315 323 331 340 349 350 368 370 412 413 414 418 427 428 #> [18811] 440 441 444 469 474 480 487 490 492 504 543 554 571 596 602 610  11  16 #> [18829]  31  43  45  56  64  71  77  82  84  94  95 108 113 116 140 152 190 194 #> [18847] 200 206 214 231 251 257 258 271 286 293 294 309 314 318 342 358 361 373 #> [18865] 401 418 422 429 437 442 447 450 480 487 498 506 515 547 562 571 573 584 #> [18883] 585 593 596 610 611 616   0   5   6  10  17  41  56  67  70  79 115 124 #> [18901] 146 152 154 157 159 166 180 188 198 204 206 208 210 216 234 252 265 272 #> [18919] 278 279 284 289 292 294 295 297 298 304 332 351 366 370 376 390 400 407 #> [18937] 418 444 463 467 468 472 478 480 481 500 512 516 519 526 539 549 570 575 #> [18955] 578 584 610   7  13  17  25  33  53  58  59  62  63  65  72  80  98  99 #> [18973] 119 129 135 162 173 182 218 220 222 229 242 245 261 264 266 273 295 304 #> [18991] 306 316 318 321 336 349 355 377 383 387 392 396 398 409 410 422 424 427 #> [19009] 434 453 462 466 474 508 515 519 521 544 546 552 561 564 566 569 576 581 #> [19027] 587 591 604 612   6  23  24  44  52  63  76  89 120 150 157 171 175 177 #> [19045] 186 198 208 213 215 256 259 263 279 286 300 319 339 342 348 349 351 366 #> [19063] 374 397 419 426 436 439 451 454 466 478 484 491 496 516 548 570 574  20 #> [19081]  21  29  47  57  75  78  79  89 101 131 147 158 161 164 166 168 174 178 #> [19099] 193 205 211 217 223 235 245 257 258 269 271 303 306 313 321 337 349 351 #> [19117] 382 387 393 394 396 409 416 421 426 455 488 491 492 494 498 521 528 531 #> [19135] 550 594 615 617   1   5  29  49  56  65  66  74  88  92  94  97 118 119 #> [19153] 122 134 136 143 145 146 152 153 162 190 192 196 227 237 246 249 253 260 #> [19171] 263 287 314 324 378 386 447 449 456 478 483 490 503 504 513 523 534 535 #> [19189] 543 546 552 575 594 596 598 605 617   3   8  23  26  36  37  53  60  62 #> [19207]  72  80  98 115 122 123 144 166 181 190 200 240 242 245 255 260 261 270 #> [19225] 272 273 277 290 294 300 316 317 325 326 327 329 344 350 351 360 370 374 #> [19243] 380 387 388 397 428 429 440 448 449 454 466 469 473 475 479 494 501 507 #> [19261] 508 509 513 515 516 527 535 539 542 555 567 583 597 598 608 619  20  26 #> [19279]  36  46  56  57  67  74  80 106 117 122 140 146 154 168 169 175 176 179 #> [19297] 198 201 233 241 249 258 262 263 273 276 281 286 294 326 339 349 352 387 #> [19315] 420 456 495 501 512 521 561 567 581 582 587 600 610   0  19  29  52  55 #> [19333]  59  86  90  91  99 107 111 114 117 124 144 152 161 167 170 173 181 185 #> [19351] 205 210 220 227 238 241 270 285 298 327 330 341 370 381 392 396 412 442 #> [19369] 443 449 451 473 483 492 495 500 501 507 511 517 521 523 535 538 560 562 #> [19387] 563 590 616  34  37  40  47  48  53  60  66  68  70  79  89  93  99 108 #> [19405] 109 122 150 179 209 226 256 257 270 281 297 300 301 307 310 311 325 353 #> [19423] 360 371 372 390 412 424 456 457 460 462 474 481 495 500 503 510 516 528 #> [19441] 532 536 546 555 579 580 587 591 597 598 599 600 618 625   7   8  14  17 #> [19459]  20  62  65  70  97 102 103 107 120 124 125 130 139 148 150 161 175 187 #> [19477] 191 193 232 236 244 271 272 280 290 294 300 305 307 308 337 354 365 384 #> [19495] 390 395 451 452 454 459 462 463 468 531 532 547 559 563 567 599 610 618 #> [19513] 619 625   4   7   9  13  16  17  24  29  33  63  91  97 118 121 144 153 #> [19531] 175 177 196 204 205 217 244 253 289 293 295 299 323 337 339 359 367 372 #> [19549] 374 394 401 406 410 417 424 444 449 454 466 470 477 483 490 494 495 501 #> [19567] 519 522 524 537 555 559 571 572 579 590 595 596 598 618 622 625   6  12 #> [19585]  13  14  21  27  52  65  72  88  98 109 125 138 154 157 165 176 184 190 #> [19603] 218 223 230 237 244 248 255 256 264 269 276 287 312 317 319 324 325 331 #> [19621] 336 341 344 358 363 364 369 376 393 406 414 432 433 442 448 473 475 501 #> [19639] 503 512 514 518 538 573 580 596 600 602 615 617 621   0  12  17  19  32 #> [19657]  35  38  39  44  83 103 117 118 123 168 190 202 235 242 249 256 300 311 #> [19675] 314 321 352 354 376 380 403 404 452 464 480 505 517 521 526 531 545 581 #> [19693] 589 599 602 612 619 625   0  10  59  62  63  69  70  95  97 103 104 110 #> [19711] 124 125 132 137 144 165 167 168 171 175 185 191 201 202 215 225 228 241 #> [19729] 247 254 261 274 276 289 316 319 343 345 352 361 362 368 386 391 406 408 #> [19747] 419 424 431 466 469 481 490 495 501 508 515 522 537 563 593 597 603 611 #> [19765] 620 622  27  67  75  83  87  95 147 156 162 185 186 191 195 206 228 231 #> [19783] 232 238 247 250 256 265 283 306 307 308 322 327 373 385 397 409 416 429 #> [19801] 441 456 466 475 484 485 487 498 504 505 514 522 526 529 564 577 592 606 #> [19819] 618 621 627 631  10  23  27  35  36  37  45  50  69  82  84  86  89  96 #> [19837] 102 107 123 135 138 139 152 157 161 166 169 171 191 227 229 235 239 246 #> [19855] 254 255 264 271 272 281 298 300 319 330 332 336 337 342 353 356 357 369 #> [19873] 380 384 407 412 420 436 438 448 463 475 486 504 506 509 513 522 556 577 #> [19891] 581 585 603 620 629   8   9  23  47  50 101 111 116 145 163 164 168 180 #> [19909] 182 185 203 207 220 225 227 228 238 245 256 268 296 329 335 349 368 375 #> [19927] 382 397 399 403 406 409 413 414 462 491 492 501 504 511 529 535 545 549 #> [19945] 560 567 569 585 599 602 605 614 616 631   7  10  19  26  27  30  33  34 #> [19963]  39  52  66  69  70  78  98 104 106 108 115 134 139 152 161 216 224 226 #> [19981] 230 232 238 254 262 263 281 285 339 351 362 369 371 372 385 388 393 401 #> [19999] 411 425 428 429 437 442 452 470 486 503 510 512 520 524 542 553 564 593 #> [20017] 596 599 606 608 616  13  18  19  23  42  59  60  65  67  69  73  88 110 #> [20035] 120 130 132 133 139 154 157 164 173 207 221 225 233 234 239 249 264 268 #> [20053] 283 302 303 305 313 322 329 332 335 340 356 370 372 381 382 390 401 406 #> [20071] 413 438 448 453 465 472 485 486 491 509 516 520 534 536 540 547 553 555 #> [20089] 571 581 583 599 625 633   0  15  40  59  64  65  93  94  95 114 120 128 #> [20107] 130 133 145 149 152 159 174 185 200 212 219 243 253 262 263 265 275 282 #> [20125] 284 288 303 304 305 339 363 371 376 384 395 404 406 413 420 429 438 440 #> [20143] 441 443 447 451 458 459 460 461 468 496 497 509 520 535 536 538 539 555 #> [20161] 556 576 587 613 628 635  14  20  48  50  59  62  66  67  78  81  86 123 #> [20179] 125 127 144 150 170 191 193 199 200 205 220 234 242 244 265 292 299 300 #> [20197] 343 346 371 378 416 429 462 466 469 480 485 487 510 517 520 526 552 580 #> [20215] 586 596 610 627  51  63  76  88  89  98 102 107 117 124 142 145 158 197 #> [20233] 247 269 274 276 307 309 313 317 318 326 337 355 359 360 373 403 406 412 #> [20251] 413 417 426 430 433 436 455 462 467 472 474 475 491 502 506 507 508 521 #> [20269] 528 538 546 551 562 564 590 597 599 606 613 618 631   0   1   2   5   6 #> [20287]  10  12  13  27  29  37  42  50  54  89  98 113 115 119 125 131 139 147 #> [20305] 176 180 189 194 196 204 228 233 243 247 251 260 267 273 278 286 292 303 #> [20323] 306 309 317 338 340 354 358 378 403 411 412 430 443 444 447 455 490 491 #> [20341] 503 512 513 524 528 531 549 551 560 561 562 570 574 611 639  29  34  36 #> [20359]  74  81  82 102 106 114 125 136 140 176 188 194 196 199 207 211 212 226 #> [20377] 231 245 253 275 276 278 286 298 304 310 335 336 348 362 372 376 378 386 #> [20395] 387 394 396 417 437 442 444 454 515 532 535 537 540 551 555 556 575 604 #> [20413] 623 630 633   9  11  15  16  26  39  54  56  60  68  80 111 131 148 162 #> [20431] 183 191 194 201 202 212 216 223 224 266 268 271 284 317 322 323 359 371 #> [20449] 378 382 389 391 401 408 426 428 444 451 489 517 526 543 566 571 587 607 #> [20467] 620   6  14  19  30  33  38  61  71  90  98 108 118 120 124 126 128 129 #> [20485] 135 149 156 170 171 177 178 187 200 222 232 240 252 253 264 279 306 317 #> [20503] 346 357 364 377 383 385 402 403 441 461 479 500 507 520 543 560 571 580 #> [20521] 583 592 607 616 622 624 638   0   8  10  50  62  82  91 101 106 108 112 #> [20539] 122 124 128 130 133 134 139 175 180 189 205 206 228 234 235 251 258 259 #> [20557] 266 276 309 314 324 330 334 341 343 360 369 376 378 383 394 414 432 437 #> [20575] 445 446 459 463 468 478 483 506 507 519 535 548 568 590 593 606 608 614 #> [20593] 619 621 639   9  15  19  42  46  51  99 112 117 123 124 127 140 146 154 #> [20611] 170 173 179 189 190 195 198 240 251 276 298 312 315 353 354 371 377 386 #> [20629] 390 392 402 409 414 419 436 461 472 491 492 521 546 558 560 576 596 600 #> [20647] 608 621 639   8  19  24  44  49  71  84 105 144 145 146 152 175 184 194 #> [20665] 197 227 238 249 252 269 287 300 312 316 324 335 337 345 393 404 416 417 #> [20683] 430 436 443 450 456 473 475 484 490 491 504 542 560 562 574 582 592 609 #> [20701] 629 636 637 642   9  26  44  56  62  64  73  79  84  85  88  96  99 104 #> [20719] 118 119 130 135 140 142 147 166 168 173 178 180 186 196 198 207 217 233 #> [20737] 243 266 268 269 283 289 312 314 330 349 361 368 375 376 397 401 418 427 #> [20755] 429 433 437 440 453 466 477 486 495 505 509 535 560 564 571 572 594 622 #> [20773] 627 642   1   2   9  23  34  43  54  57  62  69  87  92  95 108 118 123 #> [20791] 137 141 142 170 175 182 190 198 209 211 213 219 228 253 258 272 283 284 #> [20809] 294 299 308 312 317 331 335 339 363 377 378 386 399 414 420 430 437 447 #> [20827] 456 493 508 511 517 524 535 536 537 543 555 573 576 586 600 645  18  30 #> [20845]  34  41  55  59  68  78  89  93 111 116 123 142 166 196 205 210 262 266 #> [20863] 291 293 304 306 317 320 322 325 326 333 335 352 354 364 368 378 393 400 #> [20881] 405 417 425 433 445 446 447 456 461 472 476 499 511 515 516 521 522 531 #> [20899] 532 536 545 555 575 587 591 609 622 626 638 646  16  25  35  37  56  63 #> [20917]  64  70  86  94 120 125 128 129 134 139 149 150 158 170 172 192 193 197 #> [20935] 211 216 219 220 226 228 261 262 272 273 284 292 296 316 324 325 327 334 #> [20953] 350 361 363 370 373 379 401 405 406 409 410 436 443 447 478 485 488 492 #> [20971] 495 540 549 562 594 601 604 608 610 635 639 643   2  26  49  51  57  67 #> [20989]  86  92  96 111 123 134 145 148 151 167 170 174 175 178 180 188 216 221 #> [21007] 233 234 235 250 258 262 263 287 317 320 326 327 341 349 374 396 408 417 #> [21025] 423 439 440 459 471 490 506 507 518 526 536 539 542 571 593 594 599 612 #> [21043] 618 620 626 641  37  42  44  49  54  65  92  95  96  98  99 115 117 123 #> [21061] 128 131 145 154 171 175 178 188 190 194 202 205 206 208 244 245 268 306 #> [21079] 318 321 325 346 348 372 373 377 388 389 400 408 429 433 435 472 476 486 #> [21097] 507 508 511 515 517 521 529 532 539 558 560 572 586 619 625 650   0   5 #> [21115]  43  56  70  73  87  91  93  97 102 133 137 160 164 186 187 196 199 205 #> [21133] 206 222 224 253 258 278 283 298 312 345 354 361 366 380 382 416 419 427 #> [21151] 429 437 439 441 442 465 466 474 480 487 501 509 510 521 527 529 541 567 #> [21169] 591 618 639 647  23  49  59  71  80  93  96  99 129 135 154 162 169 181 #> [21187] 184 193 200 211 214 227 233 235 242 244 246 254 259 260 265 279 285 290 #> [21205] 299 303 315 325 326 349 352 389 390 392 432 436 452 479 493 494 501 510 #> [21223] 511 518 534 563 572 575 588 593 600 618 621 623 629 639 653   5   8  19 #> [21241]  29  35  40  47  48  51  74  75  82  85  87  88  97 103 107 118 122 124 #> [21259] 132 140 149 163 172 194 203 206 211 213 223 226 241 242 255 275 279 292 #> [21277] 317 318 325 345 347 364 372 376 378 382 389 390 413 428 439 441 451 457 #> [21295] 465 476 481 485 512 516 525 558 561 563 567 568 569 577 583 591 594 597 #> [21313] 609 613 624 626 628 652 654  12  14  16  34  47  58  65  68  79  80  81 #> [21331]  85  91  96  98 102 114 119 129 133 144 147 152 157 158 161 178 179 199 #> [21349] 227 230 244 250 260 280 283 288 294 301 307 311 312 314 338 374 382 384 #> [21367] 400 405 426 432 435 441 449 454 483 497 506 510 533 547 549 553 577 580 #> [21385] 581 589 597 608 631 632   8  14  16  25  29  30  41  57  59  68  89 104 #> [21403] 118 131 134 142 147 151 155 181 190 221 226 256 271 297 306 312 313 321 #> [21421] 332 353 370 397 424 427 429 430 440 459 480 503 509 519 529 531 544 559 #> [21439] 600 611 626 627 639   2  19  26  31  44  52  53  66  74  77  80  86  89 #> [21457]  90 108 109 142 148 150 168 207 208 212 228 236 237 240 249 251 283 291 #> [21475] 316 327 328 333 352 357 359 388 389 392 396 403 406 417 420 443 447 452 #> [21493] 461 466 473 483 501 507 524 530 536 539 546 549 555 578 579 598 609 627 #> [21511] 645 647   0  10  23  34  45  82 103 104 121 124 125 138 166 168 191 207 #> [21529] 219 229 230 233 234 238 251 252 267 269 292 293 308 339 348 352 364 368 #> [21547] 373 386 405 418 419 420 427 438 442 446 447 449 467 471 486 514 531 544 #> [21565] 553 591 593 596 600 611 615 622 636 638 640 643 653   5  15  17  41  45 #> [21583]  52  56  59  65  72  79  94 115 124 126 135 147 149 157 171 178 188 193 #> [21601] 194 203 208 211 215 216 239 243 248 250 254 262 270 288 301 320 332 353 #> [21619] 372 376 378 379 400 402 403 423 424 435 456 472 510 521 552 564 570 597 #> [21637] 600 603 631 635 638 657   0  40  45  60  62  63  92 106 114 119 125 126 #> [21655] 146 153 156 167 172 195 227 236 268 272 286 289 292 316 333 347 349 375 #> [21673] 378 414 423 444 453 459 481 486 498 502 517 531 534 536 543 564 575 586 #> [21691] 589 593 622 629 631 645 648 652 657 658   9  28  49  55  66  68  71  92 #> [21709] 137 143 151 157 168 170 171 177 182 184 191 209 216 226 228 230 235 236 #> [21727] 237 241 252 285 331 343 354 376 384 396 398 425 440 443 450 456 459 463 #> [21745] 464 466 481 483 484 486 490 492 495 508 514 517 522 529 549 558 563 581 #> [21763] 591 602 603 611 627 644 655   5   6  23  32  34  35  50  81  98 102 105 #> [21781] 115 116 132 134 137 146 178 186 218 226 231 239 240 265 271 283 290 309 #> [21799] 314 324 327 330 337 342 346 361 364 387 392 398 415 439 446 451 452 461 #> [21817] 469 477 478 501 505 513 517 540 546 548 567 597 605 611 614 619 636 638 #> [21835] 655 659  10  17  18  52  60  72  84  91 104 119 121 127 140 144 162 189 #> [21853] 223 225 226 239 258 259 269 276 291 295 304 323 334 344 368 394 411 426 #> [21871] 434 438 442 458 477 482 489 492 498 500 502 505 509 512 547 563 581 595 #> [21889] 602 604 617 620 625 651 660  10  21  28  48  79  96  97 110 126 130 165 #> [21907] 179 182 187 194 204 221 233 247 252 253 260 264 268 279 284 285 290 300 #> [21925] 308 310 311 322 325 343 347 348 349 372 395 399 420 426 438 442 468 469 #> [21943] 471 475 478 494 520 534 536 540 596 598 613 615 616 651   1  10  13  15 #> [21961]  19  22  24  33  58  59  64  85  89 102 113 123 127 129 130 144 146 152 #> [21979] 156 182 204 205 215 217 220 223 247 250 253 260 261 264 294 301 303 314 #> [21997] 322 333 343 348 358 380 383 389 391 422 424 425 443 451 455 460 467 474 #> [22015] 479 480 501 504 506 513 524 532 533 549 580 609 619 629 634 647 648  17 #> [22033]  39  44  58  74  85  86  94  95 110 113 147 157 161 173 176 180 202 205 #> [22051] 213 230 232 236 250 257 260 270 274 279 281 283 292 327 329 333 342 347 #> [22069] 352 359 381 387 394 413 422 424 430 431 438 443 453 473 478 479 495 504 #> [22087] 506 542 550 553 556 558 608 612 618 620 641 642 652 660 663   3  13  37 #> [22105]  44  46  53  60  62  64  65  78  94 102 115 129 136 157 202 207 212 231 #> [22123] 235 240 242 243 248 253 265 266 272 284 285 286 295 297 304 324 329 339 #> [22141] 344 356 357 380 389 405 432 435 437 440 443 444 449 463 465 486 490 496 #> [22159] 518 526 534 558 563 570 575 626 633 635 636 640 647 658   0   1   7  11 #> [22177]  13  20  24  35  48  73  83  84  87  90 102 120 121 142 152 153 170 172 #> [22195] 182 191 201 219 223 232 238 245 251 271 284 296 309 330 335 338 344 362 #> [22213] 365 372 388 391 442 443 472 493 501 513 515 520 525 534 538 546 551 569 #> [22231] 570 586 621 635 648 658 660 667   4   5  11  21  33  51  56  60  74  79 #> [22249]  81  82  85  86 106 116 118 120 124 127 139 140 151 156 174 193 195 201 #> [22267] 219 224 237 277 293 300 303 314 325 334 336 340 341 368 371 374 379 386 #> [22285] 396 411 422 478 479 488 511 517 527 541 581 619 622 634 647 665  15  19 #> [22303]  26  32  39  60  62  63  65  83  91  95  96  97 101 110 115 116 137 166 #> [22321] 167 170 194 197 233 234 236 238 243 245 269 275 298 301 303 312 314 337 #> [22339] 339 344 349 366 373 385 406 409 424 440 442 463 500 504 512 514 524 527 #> [22357] 538 545 559 571 579 581 585 598 603 621 623 632 637 656 660   3  11  24 #> [22375]  32  33  43  46  89  94 110 121 137 144 146 164 171 176 187 216 224 227 #> [22393] 228 243 245 276 287 303 326 327 329 337 340 343 353 358 363 382 387 390 #> [22411] 402 404 425 428 456 458 480 481 484 489 493 498 505 508 511 514 517 518 #> [22429] 527 554 562 568 571 585 592 593 615 623 655 668   3  10  32  33  34  45 #> [22447]  54  63  66  68  73  75  84  90  96 101 103 104 107 131 142 150 155 160 #> [22465] 163 181 186 204 206 230 243 249 257 270 273 277 287 292 324 336 344 361 #> [22483] 364 367 369 387 394 398 399 400 406 417 430 451 454 455 466 474 487 491 #> [22501] 505 507 511 546 551 553 557 572 574 576 603 609 615 617 619 643 651 657 #> [22519] 665 669  29  50  56  57  75  92  96 105 116 125 167 180 189 193 211 215 #> [22537] 232 251 261 267 268 273 274 278 293 294 301 308 311 312 318 331 355 363 #> [22555] 364 370 384 391 395 408 412 427 450 469 478 479 488 497 499 501 508 534 #> [22573] 551 566 578 594 599 616 620 635 661 662 672 673   0   5  29  31  36  48 #> [22591]  50  65  72  75  84 102 120 129 130 156 166 180 192 211 216 217 218 236 #> [22609] 237 262 275 295 307 311 341 343 355 357 362 387 397 399 402 410 411 415 #> [22627] 420 436 439 443 468 470 471 476 491 505 516 520 526 539 544 547 549 560 #> [22645] 564 571 572 574 575 577 590 596 603 640 644 645 659 669   9  16  25  37 #> [22663]  52 100 104 106 127 134 138 143 163 174 182 185 188 192 208 210 220 221 #> [22681] 225 237 264 282 304 305 310 311 318 335 351 374 378 387 402 417 427 436 #> [22699] 440 449 458 462 485 517 519 531 550 553 561 574 578 586 617 620 627 640 #> [22717] 650 659 661 663  32  54  57  68  84  90  96 124 127 132 133 145 154 164 #> [22735] 167 173 174 188 195 198 206 209 220 245 267 286 289 292 316 327 359 371 #> [22753] 377 392 397 406 408 409 426 433 434 439 448 457 464 471 472 473 483 487 #> [22771] 503 506 508 517 522 536 537 540 549 553 561 577 587 591 593 602 637 646 #> [22789] 647 661 668 674   3  11  17  37  43  47  59  63  67  76  87  88 111 116 #> [22807] 125 132 148 151 158 164 180 185 191 197 213 224 227 231 249 255 274 275 #> [22825] 292 314 333 337 343 353 356 361 366 386 391 401 420 433 436 452 454 459 #> [22843] 464 512 535 537 539 552 619 622 627 628 630 637 638 645 652 657   9  17 #> [22861]  27  32  36  40  49  52  55  69  76  80 107 108 119 122 124 136 143 166 #> [22879] 168 171 197 204 207 224 225 229 237 249 259 260 271 282 292 293 307 308 #> [22897] 313 314 325 332 364 366 371 394 396 400 421 423 430 432 458 459 465 475 #> [22915] 478 484 505 507 514 536 543 551 552 555 561 571 582 588 602 603 605 607 #> [22933] 616 629 632 635 644 651 652 653 667 672   1   3   8  30  63  66  74  79 #> [22951]  84  87  88  92 110 126 128 142 160 161 172 173 175 194 199 204 224 237 #> [22969] 238 272 284 298 347 349 352 361 365 371 378 381 388 402 405 412 437 439 #> [22987] 442 448 452 474 493 494 514 542 546 583 595 598 599 600 601 603 609 613 #> [23005] 617 621 622 625 630 645 650 651 654 672 673 679  17  29  36  42  56  66 #> [23023]  67  71  75  96 106 112 114 117 141 144 151 153 154 158 175 178 182 188 #> [23041] 200 201 205 214 235 242 298 350 378 391 397 420 427 428 457 459 486 513 #> [23059] 524 527 528 530 544 548 549 557 567 570 584 590 602 605 613 626 645 646 #> [23077] 652 668  14  19  36  42  51  55  74  81 103 109 115 120 130 143 154 157 #> [23095] 176 178 181 203 208 218 222 223 226 260 273 282 289 303 335 348 350 361 #> [23113] 370 376 386 406 421 439 447 453 463 471 473 483 490 495 506 512 540 549 #> [23131] 565 573 595 602 616 620 629 662   9  10  28  40  62  66  76  81  89  91 #> [23149] 121 122 123 139 143 159 175 179 180 200 204 210 216 218 219 220 224 228 #> [23167] 254 274 281 287 296 301 302 309 320 328 329 333 337 347 354 360 365 370 #> [23185] 373 385 387 393 395 426 433 436 449 450 464 469 470 472 476 478 493 502 #> [23203] 503 528 536 558 567 570 571 587 592 593 612 634 636 639 642 647 650 652 #> [23221] 660 662 671 676 677 681   3  11  12  30  50  56  62  74  81  82  99 156 #> [23239] 157 168 182 184 190 211 249 261 263 271 302 307 316 330 335 340 353 360 #> [23257] 366 370 406 423 426 428 442 461 474 488 497 499 500 502 519 550 558 574 #> [23275] 575 589 592 593 599 617 622 625 636 644 650 662 669 675 676   8  29  42 #> [23293]  67  76  85 122 130 136 139 146 156 188 204 225 234 242 251 262 279 292 #> [23311] 293 301 305 319 330 342 343 355 357 360 372 385 391 392 409 422 423 436 #> [23329] 438 450 454 467 468 475 479 490 500 501 522 523 533 536 550 559 577 580 #> [23347] 588 590 591 598 608 613 621 623 645  17  26  33  42  59 125 149 150 157 #> [23365] 159 161 180 198 199 202 203 223 248 249 257 263 276 286 303 369 391 396 #> [23383] 404 410 424 433 442 448 452 453 456 462 467 469 489 503 505 509 523 525 #> [23401] 526 535 538 547 548 550 555 616 619 625 629 631 634 642 649 664 670 677 #> [23419]  11  21  36  54  60  61  78 109 111 121 125 128 137 145 148 151 153 166 #> [23437] 185 192 194 210 212 217 225 235 281 298 299 305 310 340 346 349 360 361 #> [23455] 364 383 395 398 407 412 473 485 490 520 528 549 557 562 565 586 589 612 #> [23473] 613 629 631 632 638 646 650 662 671   0   2   3  26  33  38  39  48  78 #> [23491]  99 103 110 112 120 122 159 161 166 169 180 193 195 201 208 223 232 243 #> [23509] 247 263 280 295 299 302 306 330 346 350 368 371 398 401 414 417 423 442 #> [23527] 451 457 458 517 520 535 536 562 565 576 585 586 596 607 613 614 617 624 #> [23545] 628 660 661 662 676 685   6   8  12  16  19  24  46  53  54  63  75  77 #> [23563]  97 116 120 122 184 190 196 211 215 229 241 248 252 274 276 279 284 295 #> [23581] 312 327 338 346 355 357 360 365 383 390 392 411 448 449 452 489 490 507 #> [23599] 513 514 518 527 541 544 550 555 580 590 596 598 603 623 634 648 655 666 #> [23617] 676 677 679 686  23  36  50  64  69  89 112 132 133 141 158 167 168 187 #> [23635] 200 208 209 224 233 243 245 247 248 256 265 266 271 304 305 307 310 329 #> [23653] 345 369 372 380 389 409 414 415 420 432 440 442 460 478 479 493 498 504 #> [23671] 510 530 543 544 555 556 558 567 569 574 585 586 593 630 633 637 638 641 #> [23689] 651 660 664 672  32  42  47  78 100 119 120 136 143 146 157 180 186 188 #> [23707] 196 200 211 243 248 262 273 280 285 288 291 302 305 317 329 330 338 355 #> [23725] 356 358 368 373 374 397 399 404 408 409 421 426 428 432 433 435 441 450 #> [23743] 455 459 462 473 482 487 513 516 518 521 537 565 575 595 617 630 634 650 #> [23761] 654 681   5  30  36  37  41  42  45  58  65  70  77  80  85  88  89  94 #> [23779] 102 104 112 122 160 175 179 181 183 204 217 227 234 235 239 242 263 298 #> [23797] 303 306 308 311 321 323 339 345 351 354 357 359 369 379 386 388 396 397 #> [23815] 406 410 415 423 424 428 431 458 476 479 509 512 516 517 526 544 551 563 #> [23833] 575 576 581 599 604 614 618 644 657 659 681 686 689 690  26  53  56  77 #> [23851]  98 105 112 153 158 164 166 175 204 208 242 253 256 270 274 275 295 314 #> [23869] 325 334 335 345 347 348 355 356 359 360 368 381 387 391 393 400 405 409 #> [23887] 411 414 420 429 431 432 436 441 457 475 476 494 501 534 539 546 560 586 #> [23905] 593 595 602 609 620 635 642 662 672 683   3  17  20  48  53  62  72  76 #> [23923] 106 123 144 162 165 169 182 204 205 230 233 240 261 283 286 288 302 310 #> [23941] 315 323 326 329 330 358 362 366 371 380 394 396 400 409 431 443 452 478 #> [23959] 483 485 489 496 505 507 509 518 530 531 533 538 541 550 551 577 581 591 #> [23977] 601 610 620 630 646 652 659 677   5  23  30  50  53  62  83  86  89  92 #> [23995]  96 112 119 125 126 138 140 164 181 182 211 214 215 216 228 229 232 233 #> [24013] 234 241 243 244 267 279 296 297 309 310 311 317 318 336 351 354 356 364 #> [24031] 370 379 380 392 398 399 408 446 452 454 478 490 492 507 512 526 541 549 #> [24049] 562 568 577 586 588 600 616 621 636 647 669 692 693   6   8   9  15  29 #> [24067]  30  45  48  60  77  83 115 124 125 142 189 200 205 207 249 266 274 293 #> [24085] 296 309 311 313 330 333 334 336 362 384 386 411 420 440 447 463 475 485 #> [24103] 490 498 505 506 520 557 559 561 568 570 575 582 583 591 595 600 636 646 #> [24121] 651 655 685   3  16  32  46  48  53  55  60  80  85 126 130 134 146 159 #> [24139] 172 173 217 218 247 259 268 270 273 280 287 303 317 319 325 333 337 342 #> [24157] 363 383 387 391 403 436 449 462 466 475 477 483 494 498 512 515 520 525 #> [24175] 534 535 539 553 582 588 600 610 627 645 651 662 667 684   1   3   4  15 #> [24193]  38  42  47  54  75  79  85  88 107 116 117 130 145 187 196 212 244 269 #> [24211] 275 277 278 295 301 307 309 310 325 350 351 355 358 385 388 395 401 405 #> [24229] 415 421 424 447 448 473 483 538 551 556 579 606 646 649 657 660 677 688 #> [24247] 694   0   2  10  22  23  27  30  31  36  43  65  73  87  95 109 128 132 #> [24265] 139 156 171 180 230 238 245 247 258 267 280 286 301 315 319 326 343 357 #> [24283] 371 393 395 400 422 442 448 457 475 483 497 500 501 508 511 513 535 543 #> [24301] 551 566 570 597 602 603 620 625 631 634 637 648 649 653 661 670 673 683 #> [24319] 687 695   5  11  20  26  28  49  50  52  65  70  76  82  86 105 126 140 #> [24337] 141 143 146 159 165 175 177 187 202 211 219 221 229 232 236 240 243 247 #> [24355] 251 256 260 306 307 320 328 332 338 348 383 392 397 430 436 440 450 463 #> [24373] 465 469 476 489 490 496 509 510 530 531 545 553 561 567 587 589 600 604 #> [24391] 605 611 613 615 637 649 653 665   6   9  11  15  17  19  35  44  48  57 #> [24409]  60  65  72 109 110 115 125 141 145 161 172 175 177 180 181 186 196 197 #> [24427] 200 204 217 244 262 263 272 280 285 298 332 380 391 403 453 455 470 479 #> [24445] 502 515 525 531 533 534 542 549 560 563 566 575 580 588 600 613 620 622 #> [24463] 626 629 630 632 635 640 646 655 660 680 683 685 693 698  28  31  58  68 #> [24481]  70  79 102 103 107 108 111 123 126 134 139 140 151 155 160 166 171 173 #> [24499] 207 217 232 244 254 257 293 305 308 340 343 350 353 382 388 392 413 417 #> [24517] 430 436 439 452 453 462 465 472 485 496 504 520 523 526 536 542 546 549 #> [24535] 560 562 567 590 593 610 616 619 639 647 651 667 683 688 695   0   9  11 #> [24553]  25  26  35  37  38  40  56  59  69 113 122 126 128 130 141 149 171 201 #> [24571] 202 209 212 214 215 218 224 248 262 269 284 289 319 323 338 348 357 363 #> [24589] 371 375 382 406 415 425 426 430 438 444 466 476 487 491 501 502 503 506 #> [24607] 527 542 556 559 561 564 581 584 591 619 620 628 632 644 657 673 683 688 #> [24625] 700   3   6  15  19  36  42  65  79  88  93 115 130 144 145 154 196 201 #> [24643] 206 207 212 220 231 234 236 238 239 241 249 261 264 269 273 313 321 340 #> [24661] 349 355 365 376 387 389 396 411 422 428 439 449 462 475 496 497 521 546 #> [24679] 557 558 563 565 575 598 601 634 655 660 661 688 700   1   9  11  15  20 #> [24697]  25  28  37  43  49  60  69  70 113 121 143 150 152 158 178 204 207 208 #> [24715] 215 220 236 237 242 246 266 273 277 282 294 320 326 336 346 353 368 375 #> [24733] 378 381 391 400 414 415 422 475 477 498 513 518 520 537 541 548 549 553 #> [24751] 556 573 578 584 586 595 607 615 649 650 660 673 677 681  19  25  31  40 #> [24769]  41  42  45  49  58  69  80 102 122 156 157 162 187 194 209 219 234 236 #> [24787] 240 244 251 301 302 346 360 365 371 373 384 387 391 403 404 409 411 412 #> [24805] 422 439 441 443 451 453 480 482 484 485 489 490 497 500 503 508 525 528 #> [24823] 531 540 548 561 564 568 581 588 590 599 603 610 614 636 650 656 664 689 #> [24841] 698   0   7  10  11  16  28  30  59  69  78  88  89 102 106 114 127 149 #> [24859] 165 172 174 193 214 219 249 255 265 266 269 275 284 298 301 305 307 329 #> [24877] 332 338 360 366 378 380 382 385 402 410 413 419 432 436 442 446 454 457 #> [24895] 464 465 469 470 497 499 502 520 537 542 544 557 558 591 594 601 610 618 #> [24913] 620 636 646 651 664 679 699 700   0   4  10  17  18  26  32  38  53  58 #> [24931]  70  98 118 123 127 150 160 170 176 192 198 214 218 221 231 238 244 247 #> [24949] 264 273 283 307 313 324 325 328 344 347 348 381 385 392 395 397 409 417 #> [24967] 429 431 450 468 517 519 524 550 553 565 570 574 582 585 586 588 591 605 #> [24985] 606 614 615 617 632 644 652 655 666 667 687 701 706  11  29  43  47  49 #> [25003]  63  67  74  92  95 107 123 129 148 186 201 202 204 221 229 238 264 270 #> [25021] 275 285 288 298 299 321 330 345 353 375 381 383 389 393 398 401 411 413 #> [25039] 442 450 480 517 524 527 528 537 550 554 556 561 563 565 567 582 587 597 #> [25057] 601 604 613 615 616 622 627 635 667 681 686 698  23  25  28  42  43  52 #> [25075]  62  84  90 112 117 121 123 126 148 150 157 180 188 210 221 233 240 255 #> [25093] 259 267 281 283 293 303 309 315 329 332 347 367 368 379 384 388 402 409 #> [25111] 413 414 415 432 435 451 468 473 475 478 487 488 494 506 508 525 543 551 #> [25129] 552 561 573 575 582 590 601 621 624 633 649 658 661 664 670 676 681 688 #> [25147] 693 701 705   4  27  31  35  36  37  63  70  71  73  86 100 109 121 125 #> [25165] 129 131 146 153 154 174 188 193 203 204 208 215 224 234 237 238 245 246 #> [25183] 252 253 273 274 278 286 316 336 337 339 340 341 377 390 408 435 440 468 #> [25201] 475 484 489 492 493 504 505 507 508 520 524 529 534 538 562 567 570 576 #> [25219] 602 604 605 608 611 618 620 621 631 651 676   1   9  11  23  32  45  55 #> [25237]  81  97 119 121 127 137 152 167 168 174 179 192 203 218 226 228 240 251 #> [25255] 261 273 307 308 316 319 336 346 347 364 366 376 381 389 400 401 406 428 #> [25273] 432 450 458 466 469 473 479 482 503 517 518 527 542 554 562 565 566 571 #> [25291] 589 592 596 597 598 605 610 617 625 630 634 641 654 656 661 663 666 678 #> [25309] 681 688 693 707 708   1   3  22  23  57  74  77  86 103 121 132 135 137 #> [25327] 156 161 162 175 197 200 212 237 284 289 294 305 306 312 320 336 341 347 #> [25345] 352 359 365 368 376 426 429 438 442 446 455 474 484 485 502 507 514 538 #> [25363] 540 546 573 598 609 624 634 636 638 650 651 656 657 662 670 675 679 681 #> [25381] 683 686 698 699 702 708 709 712  12  24  47  60  63  64  67  71  74  82 #> [25399]  99 101 109 133 154 173 175 177 189 207 210 228 235 247 249 256 267 277 #> [25417] 297 298 302 304 319 327 333 341 343 344 364 368 386 391 399 415 436 453 #> [25435] 471 477 480 504 508 516 552 557 561 572 575 591 599 601 603 614 622 639 #> [25453] 651 661 662 679 684 695 706   1   9  11  19  20  22  29  33  56  59  80 #> [25471] 100 109 123 142 145 183 184 189 190 191 198 227 228 229 230 234 240 242 #> [25489] 243 266 268 273 292 306 317 349 372 374 388 409 417 428 444 455 462 506 #> [25507] 507 531 540 554 586 592 607 610 612 613 615 635 638 646 656 662 678 699 #> [25525] 704 711  44  45  54  56  60  65  69  80  89  93 107 132 139 152 154 157 #> [25543] 160 175 176 186 196 210 211 215 216 217 229 234 250 263 264 276 291 297 #> [25561] 301 308 310 336 337 346 377 383 386 400 426 447 471 479 500 505 507 512 #> [25579] 523 555 580 598 612 616 642 646 657 660 663 667 692 694 701 707  20  52 #> [25597]  56  61  72  75  79  85 110 111 116 124 125 129 164 167 186 191 192 197 #> [25615] 252 300 301 317 323 331 357 367 428 429 437 475 476 496 513 522 529 542 #> [25633] 546 563 571 576 581 591 600 616 636 637 643 645 671 675 679 684 702   8 #> [25651]  19  27  29  31  48  53  63  73  83 102 113 120 133 149 152 164 169 183 #> [25669] 189 196 210 213 214 242 253 263 264 266 267 271 307 337 345 355 379 393 #> [25687] 395 437 442 450 462 465 466 472 477 479 507 523 534 546 548 570 581 582 #> [25705] 598 603 606 621 639 640 657 659 670 675 685 692 693 702 703   1   5   9 #> [25723]  10  14  21  26  47  69  79  96 101 113 118 120 130 141 146 150 151 160 #> [25741] 175 184 199 201 215 227 230 232 233 236 242 271 274 307 327 335 348 353 #> [25759] 357 360 372 387 396 397 408 413 446 453 465 469 472 482 487 501 506 517 #> [25777] 523 533 539 543 554 557 561 563 566 593 596 609 610 614 629 636 640 648 #> [25795] 663 668 675 676 687 701 703  12  25  29  35  62  64  94  99 113 123 133 #> [25813] 150 154 171 193 200 206 213 215 218 234 236 245 250 251 255 259 283 291 #> [25831] 300 311 312 319 333 338 350 360 375 382 389 398 408 419 420 421 422 425 #> [25849] 430 433 456 478 485 496 511 520 545 549 559 564 565 568 586 613 626 630 #> [25867] 637 645 668 675 687 710   0  11  15  22  24  25  26  28  47  69  73  78 #> [25885]  82  86  88  99 106 107 118 134 135 143 158 172 191 192 194 195 199 209 #> [25903] 249 261 271 286 308 319 320 323 324 334 343 362 368 371 400 407 418 428 #> [25921] 441 451 461 465 469 484 485 489 512 530 531 538 543 573 574 584 585 588 #> [25939] 606 607 610 614 618 622 626 629 635 637 640 644 659 661 669 675 688 690 #> [25957] 698 699 702 703 718   5   8  25  28  31  57  59  69  80  92  98 125 127 #> [25975] 141 147 175 179 192 195 224 225 236 241 249 255 256 257 264 266 269 271 #> [25993] 287 294 299 310 312 315 318 328 336 361 367 371 383 385 403 411 414 421 #> [26011] 425 453 456 459 479 484 501 504 510 515 519 551 555 582 602 621 633 637 #> [26029] 651 653 656 657 683 696 698 700 716   2  14  28  31  35  39  43  47  50 #> [26047]  56  60  77  85  88  92  98 115 117 132 155 159 160 161 162 166 188 195 #> [26065] 196 202 206 232 237 238 246 254 259 263 280 307 309 312 320 348 350 379 #> [26083] 387 392 399 403 419 423 427 437 442 444 450 461 468 480 492 501 507 538 #> [26101] 551 553 560 579 589 594 615 634 642 656 674 683 692 716  25  38  71  72 #> [26119]  88 146 170 172 178 190 194 210 215 241 259 263 272 274 283 290 292 298 #> [26137] 302 317 324 330 352 359 367 385 396 401 405 406 416 423 431 440 457 469 #> [26155] 471 472 473 492 494 525 533 536 537 561 562 586 596 597 601 604 622 633 #> [26173] 668 669 680 685 700 704 714   4   7  10  16  21  27  42  47  58  71  78 #> [26191]  81  99 106 108 109 116 122 149 168 172 179 181 192 197 210 227 234 252 #> [26209] 263 272 282 283 285 295 301 318 325 343 354 357 386 392 394 402 413 416 #> [26227] 417 421 434 440 453 469 471 479 489 490 503 515 517 519 532 552 574 607 #> [26245] 609 611 613 629 653 665 684 688 702 706 710 711   1  13  16  24  25  36 #> [26263]  57  64  69  72  78  95  98 104 106 111 113 142 159 167 170 198 213 223 #> [26281] 226 255 264 274 278 293 305 309 321 327 330 354 358 384 389 393 403 410 #> [26299] 420 439 455 487 511 520 526 527 539 541 544 546 559 562 577 581 583 588 #> [26317] 600 602 607 612 647 648 657 662 666 674 691 700 702 708   6  16  30  54 #> [26335]  80  83  91  95 154 159 184 185 190 202 214 226 229 237 262 266 273 282 #> [26353] 284 311 319 322 334 341 351 366 378 379 393 398 425 440 447 454 461 468 #> [26371] 476 495 496 519 520 538 556 567 581 583 584 585 591 595 597 611 638 640 #> [26389] 642 651 657 662 665 675 679 704 722 723   4  14  30  38  41  48  56  57 #> [26407]  59  77  79  80  87  93 109 110 131 148 166 169 190 196 202 215 219 221 #> [26425] 224 234 239 261 280 283 288 303 317 319 331 346 366 379 384 387 397 398 #> [26443] 410 411 436 449 451 477 481 499 501 523 545 547 567 574 578 582 597 612 #> [26461] 617 628 629 631 640 642 647 653 658 662 663 671 672 674 682 697 707 716 #> [26479] 726  20  25  27  36  41  60  78 107 119 120 130 134 152 176 177 205 206 #> [26497] 207 214 233 237 238 241 243 252 255 260 265 269 279 280 290 291 302 305 #> [26515] 324 329 349 358 384 398 410 422 445 459 460 461 481 486 494 500 508 529 #> [26533] 534 552 563 580 585 590 596 621 627 635 656 671 681 684 720   9  15  17 #> [26551]  31  32  65  77  84 115 116 120 121 132 137 141 171 178 183 190 191 193 #> [26569] 216 219 220 229 230 246 249 263 271 273 276 277 281 282 286 289 299 304 #> [26587] 306 311 312 315 316 319 320 338 341 346 367 371 390 393 410 414 429 433 #> [26605] 439 440 448 457 459 476 481 485 502 547 566 581 587 595 622 641 652 660 #> [26623] 665 678 703 714 720 723 729  17  18  36  37  43  44  45  53  62  76  82 #> [26641]  92  98 108 112 129 130 146 158 165 171 185 191 198 205 222 224 230 263 #> [26659] 264 273 282 286 292 296 301 304 308 322 333 338 339 344 347 351 353 357 #> [26677] 363 366 380 395 400 402 427 428 433 440 457 458 487 493 501 510 525 528 #> [26695] 544 563 565 606 615 620 641 647 658 676 678 689 701 713   0  41  50  54 #> [26713]  66  69  72  75  85  88  90 102 105 110 111 113 129 134 139 169 191 196 #> [26731] 203 210 216 217 224 241 252 254 274 283 295 314 320 322 328 333 339 342 #> [26749] 345 354 365 409 414 415 418 442 461 470 482 491 494 501 502 527 528 542 #> [26767] 556 583 601 605 611 613 636 648 651 668 672 673 678 686 695 702 710 719 #> [26785] 720 723 731  10  15  19  27  30  34  45  47  61  67  72  73  88 118 123 #> [26803] 131 144 152 160 162 167 168 173 184 186 198 200 201 215 216 223 232 234 #> [26821] 235 273 290 320 353 354 377 380 418 439 446 451 458 470 473 480 501 508 #> [26839] 509 512 535 537 539 549 558 572 606 639 640 648 658 659 665 677 679 691 #> [26857] 730  20  23  29  38  44  47  54  57  64  77 110 121 168 181 184 192 197 #> [26875] 200 213 215 216 225 236 237 259 260 267 307 317 319 325 334 339 341 348 #> [26893] 369 381 382 403 409 414 416 426 427 442 443 450 481 497 502 517 523 557 #> [26911] 558 571 604 681 701 724  10  26  29  33  39  60  74  76  85  86 114 116 #> [26929] 125 131 133 135 145 151 164 176 183 185 193 194 202 212 231 234 243 254 #> [26947] 258 273 282 288 291 295 316 324 329 363 367 369 384 402 407 408 428 443 #> [26965] 447 453 475 487 488 540 546 576 578 599 618 619 627 629 636 638 641 642 #> [26983] 650 651 652 657 660 664 677 682 699 704 714 731 733   4  26  34  36  43 #> [27001]  46  47  55  73  74  83  90  94  98 120 129 133 134 147 186 209 225 260 #> [27019] 266 311 317 319 321 329 333 391 411 413 417 421 424 440 458 463 472 477 #> [27037] 494 496 498 501 509 510 523 525 532 535 541 544 549 550 556 566 581 587 #> [27055] 607 619 635 640 654 666 668 674 678 693 705 708 709 714 715 722 724 735 #> [27073]   1   4   7  38  57  81  84  91 105 116 125 129 130 143 152 181 202 204 #> [27091] 247 266 280 294 298 338 342 363 373 388 391 399 407 409 410 417 428 443 #> [27109] 453 482 525 527 537 539 546 559 569 573 575 590 600 621 637 650 655 674 #> [27127] 677 683 689 699 719 720 728 730 735   8  14  24  31  39  42  46  50  67 #> [27145]  70  73 115 131 208 228 231 249 257 259 270 271 281 285 287 328 345 358 #> [27163] 373 449 458 466 467 490 497 498 499 509 527 546 567 577 592 614 622 629 #> [27181] 634 635 653 667 669 678 680 689 694 697 698 702 724  17  23  34  66  71 #> [27199]  83  89 114 119 122 126 144 173 193 208 211 217 225 235 246 255 260 263 #> [27217] 273 274 287 288 315 318 335 337 342 349 369 373 382 389 391 393 396 410 #> [27235] 417 438 451 457 461 465 466 476 502 511 521 523 536 540 548 559 577 592 #> [27253] 594 595 650 653 685 687 691 702 704 717 719 720 732 734 736 737   3  14 #> [27271]  16  24  33  39  47  59  66  68  69  75  92 104 118 127 129 161 188 195 #> [27289] 199 201 207 215 243 253 256 264 275 291 292 294 299 301 317 322 324 330 #> [27307] 339 349 350 371 375 386 398 406 421 439 450 465 480 491 524 540 548 557 #> [27325] 580 581 584 588 603 610 624 627 631 641 667 670 728 738  10  15  21  26 #> [27343]  31  51  62  68  88 118 119 131 152 167 177 191 194 200 205 211 213 214 #> [27361] 217 220 222 226 228 236 250 252 253 255 271 280 288 303 323 326 343 344 #> [27379] 360 361 366 375 380 386 390 397 398 406 426 429 486 496 498 506 522 535 #> [27397] 537 548 554 559 573 583 601 612 636 640 642 651 658 674 676 710 717 718 #> [27415] 730   7  13  14  24  36  44  46  52  55  59  73  83  93  95 105 106 119 #> [27433] 135 136 169 174 182 206 237 272 273 279 297 299 305 308 311 341 348 360 #> [27451] 371 375 406 412 429 442 481 487 511 515 534 535 536 554 557 572 585 587 #> [27469] 603 610 617 619 621 638 639 643 653 654 665 667 670 680 696 704 713 722 #> [27487] 725   6  10  18  27  45  55  68  94  97  98 111 125 129 152 168 171 185 #> [27505] 204 205 210 215 217 229 234 239 245 246 248 256 277 289 316 318 343 347 #> [27523] 366 374 375 379 381 386 394 406 452 493 496 507 517 518 522 525 529 531 #> [27541] 532 539 542 547 549 550 586 594 605 629 635 651 652 666 674 690 713 714 #> [27559] 716 718 729   1  10  12  42  46  57  78  87  94  98 103 116 132 138 141 #> [27577] 146 147 148 159 167 176 192 201 205 208 228 275 276 327 359 371 372 380 #> [27595] 381 384 409 414 424 426 437 450 456 458 463 468 507 515 518 523 528 533 #> [27613] 539 554 576 577 581 584 602 617 620 641 648 666 667 676 689 690 697 703 #> [27631]   7  40  74  86  88 101 103 123 129 136 139 140 148 152 164 167 175 176 #> [27649] 213 232 243 260 289 295 305 306 317 319 333 350 353 355 372 377 379 405 #> [27667] 406 410 426 468 485 495 507 508 509 511 513 526 528 529 535 541 543 545 #> [27685] 559 598 603 605 607 618 625 632 653 654 673 682 690 699 709 731 734  35 #> [27703]  54  79  83  84  93 109 111 145 159 160 187 199 207 214 220 229 236 249 #> [27721] 252 256 268 296 299 309 330 333 337 341 346 355 371 374 375 396 433 462 #> [27739] 473 489 499 515 517 541 568 572 574 594 609 610 619 630 631 635 643 646 #> [27757] 647 649 654 662 669 676 682 685 687 691 701 704 710   8  17  22  28  51 #> [27775]  52  87  88 105 109 140 146 150 156 175 179 192 218 226 236 239 240 267 #> [27793] 269 275 285 304 315 327 336 338 360 372 378 381 389 391 394 416 433 438 #> [27811] 443 455 461 482 490 492 505 517 532 544 545 552 556 558 559 566 583 599 #> [27829] 602 608 629 636 641 660 715 716 722 725   3  14  22  34  36  49  53  62 #> [27847]  72  75 102 116 120 127 149 163 169 171 195 197 199 201 206 207 212 213 #> [27865] 215 226 237 249 251 266 294 309 315 326 331 351 356 365 394 406 407 420 #> [27883] 447 472 473 474 484 509 512 520 538 546 558 564 570 571 585 599 615 617 #> [27901] 660 667 671 686 689 696 705 712 715 719 722 725 726 733 743 747  15  27 #> [27919]  28  35  49  53  72  78  81  84  86  94 109 120 126 127 128 137 149 153 #> [27937] 158 167 185 186 219 221 232 242 257 262 263 272 276 280 284 299 310 317 #> [27955] 348 358 359 362 364 368 375 399 402 413 415 432 435 442 445 459 468 475 #> [27973] 483 488 490 497 518 522 550 593 617 628 650 654 665 673 684 693 696 706 #> [27991] 712 747 748   1  13  29  50  62  67  72  75  78  81 109 118 120 123 146 #> [28009] 156 173 186 205 217 222 226 231 238 241 247 273 279 288 289 293 316 333 #> [28027] 356 361 364 365 377 386 411 427 442 446 450 461 462 467 469 480 485 487 #> [28045] 516 525 528 535 538 542 544 567 575 586 589 601 603 620 628 629 635 651 #> [28063] 658 665 677 683 706 708 723 747 748   7  21  22  35  36  37  43  48  73 #> [28081]  78  80 104 105 126 130 140 149 160 176 178 179 182 188 193 206 210 222 #> [28099] 226 235 254 267 270 272 284 297 303 310 312 327 329 345 349 350 352 368 #> [28117] 372 380 402 409 413 426 429 440 448 450 469 476 493 503 522 528 537 540 #> [28135] 541 543 544 546 554 559 563 590 595 596 645 661 667 668 676 679 698 699 #> [28153] 701 702 704 718 722 731 737   6   8  14  16  17  22  26  40  41  78  87 #> [28171] 104 134 139 140 142 144 146 147 153 157 177 181 200 204 222 230 237 247 #> [28189] 249 271 281 289 300 310 332 334 340 344 361 371 376 380 382 383 387 406 #> [28207] 409 423 434 444 481 495 498 529 542 556 560 580 590 603 605 684 691 692 #> [28225] 701 703 715 723 732 733 747 749 750   9  25  39  53  55  90  93 109 136 #> [28243] 152 161 162 163 182 193 197 208 222 241 246 269 296 300 306 307 311 318 #> [28261] 320 337 353 355 361 362 366 371 385 387 388 389 394 404 413 415 438 445 #> [28279] 455 469 473 489 500 512 522 542 557 561 565 568 575 595 599 600 602 629 #> [28297] 632 643 652 657 662 664 665 668 673 681 692 694 696 715 720 734 736 744 #> [28315]   2   8  25  38  49  50  52  63  67  85  89  91 104 114 144 167 184 190 #> [28333] 197 202 203 209 214 221 225 241 245 257 275 285 302 351 354 371 410 426 #> [28351] 437 442 460 485 492 501 504 509 510 515 527 531 538 572 601 613 614 624 #> [28369] 631 632 636 637 640 641 655 657 660 662 687 699 708 727 730 743 747 750 #> [28387]  16  27  42  64  66  67  79  81  98 116 117 118 122 124 137 138 155 159 #> [28405] 177 211 238 247 256 271 279 288 291 315 316 318 321 322 331 333 337 357 #> [28423] 363 379 386 390 405 421 422 435 439 445 447 448 451 454 456 461 477 499 #> [28441] 501 511 512 552 555 557 561 565 572 580 582 588 589 591 595 599 607 608 #> [28459] 631 659 676 679 701 703 732 735  11  30  31  33  97 100 102 104 107 114 #> [28477] 129 169 176 178 185 191 194 196 207 221 223 231 247 251 253 262 263 272 #> [28495] 300 301 307 310 316 328 329 349 356 369 375 383 390 398 403 413 420 438 #> [28513] 440 444 454 475 501 504 507 515 517 545 546 550 552 558 561 570 577 579 #> [28531] 593 595 603 610 623 635 639 641 650 655 670 674 678 686 695 729 738 754 #> [28549]  12  15  16  17  33  38  48  55  69  79 101 104 105 106 108 115 119 120 #> [28567] 140 145 165 169 174 182 189 191 200 205 213 218 223 237 247 249 253 266 #> [28585] 272 283 296 334 335 338 347 360 363 368 373 380 390 409 418 429 436 447 #> [28603] 458 478 483 486 503 504 523 543 578 583 587 588 602 614 624 651 654 666 #> [28621] 674 689 716 729 738 753   0   2   4   8  32  47  49  70  75  79  86  97 #> [28639] 101 133 147 168 172 196 205 213 230 240 244 250 274 298 307 309 319 342 #> [28657] 345 348 352 384 392 405 409 421 423 436 447 449 466 468 475 476 481 487 #> [28675] 499 508 513 524 546 547 579 591 592 607 620 621 622 627 633 635 639 646 #> [28693] 647 650 659 661 667 670 673 678 689 691 693 702 708 711 717 718 734 749 #> [28711] 752   2  14  22  25  26  35  36  44  47  75 113 141 151 157 158 159 168 #> [28729] 176 188 189 194 195 225 232 235 236 240 242 262 263 274 280 296 313 317 #> [28747] 324 325 329 346 347 363 371 379 381 386 389 391 397 401 413 434 444 452 #> [28765] 455 469 478 486 499 535 537 541 545 547 550 557 560 585 610 618 632 640 #> [28783] 652 681 690 695 704 707 714 715 746 754   1  12  13  14  16  45  52  57 #> [28801]  63  67  73  83  97  98 103 104 105 111 115 123 129 134 138 152 167 188 #> [28819] 196 199 209 226 227 234 247 286 287 320 321 323 324 347 355 368 384 401 #> [28837] 407 416 422 425 435 444 445 449 459 495 499 502 510 512 522 525 537 543 #> [28855] 548 553 590 591 592 610 629 633 634 635 639 643 654 656 677 702 713 714 #> [28873] 733 736 757   8  10  19  21  27  32  64  66  67  71  72  74  92 118 123 #> [28891] 142 147 149 168 186 204 217 230 242 248 255 259 267 275 296 303 304 316 #> [28909] 329 355 376 390 392 431 455 456 460 473 486 487 490 494 495 499 506 516 #> [28927] 536 537 541 544 557 563 564 568 616 625 627 629 632 633 642 648 662 665 #> [28945] 706 719 728 729 731 735 738  14  18  20  23  24  35  64  72  81  85  97 #> [28963] 107 108 112 136 145 170 174 195 197 198 223 241 246 252 255 261 274 291 #> [28981] 293 294 307 309 313 320 321 348 359 361 368 374 395 414 422 423 426 437 #> [28999] 442 453 455 457 484 486 502 556 559 560 583 586 592 616 626 631 659 660 #> [29017] 665 666 667 683 686 701 722 724 728 729 749 751 760  13  18  20  44  52 #> [29035]  53  60  63  97  98 102 109 119 127 166 184 196 218 227 229 245 250 258 #> [29053] 277 300 309 336 340 347 353 355 390 406 409 410 411 483 485 493 495 499 #> [29071] 509 515 540 547 553 554 558 568 571 588 613 627 629 632 634 646 649 677 #> [29089] 688 689 700 703 720 729 738 741 744 754 760  17  34  38  60  79  98 107 #> [29107] 110 113 118 121 142 150 151 158 161 166 178 179 183 201 207 215 219 233 #> [29125] 256 265 297 310 320 324 345 372 374 378 386 394 402 419 442 445 453 455 #> [29143] 457 458 461 470 491 521 534 542 553 557 567 581 584 586 589 592 610 613 #> [29161] 658 660 663 667 676 679 690 692 700 707 714 718 741 747 753 762  32  41 #> [29179]  51  55  61  70  75  87  88  92  94 105 106 114 121 131 137 143 147 165 #> [29197] 167 171 190 193 231 239 247 259 272 276 280 307 336 343 350 366 380 382 #> [29215] 400 411 414 426 427 434 438 441 445 454 466 494 497 508 515 516 523 527 #> [29233] 528 537 538 540 544 545 551 563 564 576 580 592 600 606 610 614 620 632 #> [29251] 641 653 660 667 690 691 703 712 720 733 746 752 764   9  10  15  21  39 #> [29269]  49  57  59  77  83  89 105 118 123 131 137 146 155 156 164 180 181 183 #> [29287] 199 218 220 222 237 245 258 273 279 286 292 293 303 310 313 320 322 329 #> [29305] 333 349 364 368 373 375 383 389 402 412 417 420 441 459 460 461 470 482 #> [29323] 496 520 525 527 529 532 534 535 556 578 614 618 625 632 633 642 644 645 #> [29341] 667 679 691 695 703 709 719 722 723 729 736 745 753   0   3   9  12  27 #> [29359]  32  37  41  77 107 131 144 153 160 168 171 187 197 203 236 240 249 252 #> [29377] 259 269 283 302 303 309 313 314 318 323 345 351 357 376 379 382 384 397 #> [29395] 423 427 443 448 475 477 494 500 513 517 540 544 550 571 572 573 579 623 #> [29413] 630 641 661 674 678 684 691 694 709 725 750   0   6  15  25  35  58  59 #> [29431]  67  84  97 144 153 158 159 163 169 175 197 210 219 220 223 227 230 243 #> [29449] 246 247 255 257 270 273 283 290 294 297 298 309 310 312 357 364 371 410 #> [29467] 432 441 446 447 476 488 490 491 495 503 507 530 560 573 578 589 595 602 #> [29485] 605 610 613 618 621 629 650 676 687 712 717 728 738 744 747 766 767  11 #> [29503]  23  27  35  40  44  58  60  62  77  82 100 106 127 132 148 158 171 176 #> [29521] 184 189 191 196 204 213 234 236 242 264 268 269 275 278 280 290 295 299 #> [29539] 301 327 334 336 338 340 341 343 358 364 384 388 391 397 402 408 410 423 #> [29557] 428 438 441 446 450 451 477 479 490 495 537 542 570 586 590 594 608 618 #> [29575] 650 657 662 673 678 714 722 759   6  10  13  38  40  52  59  75  89  93 #> [29593] 102 123 132 140 162 163 173 183 215 220 242 243 263 264 274 277 302 303 #> [29611] 307 314 317 321 323 324 326 351 359 370 371 383 384 398 399 408 413 414 #> [29629] 427 434 479 486 491 495 537 548 568 579 592 593 595 621 644 659 666 686 #> [29647] 730 743 747 752 764 768   2  12  17  20  21  33  41  59  83 145 153 181 #> [29665] 196 204 205 208 212 230 235 243 285 306 324 338 361 364 377 383 409 414 #> [29683] 424 427 428 441 444 448 455 458 461 471 491 494 499 506 526 527 528 529 #> [29701] 578 579 600 607 613 644 646 660 670 681 685 688 732 754 755 766   0   9 #> [29719]  20  23  30  48  62  64  70  71  76  83  95 114 125 126 145 147 168 169 #> [29737] 174 189 192 200 204 206 221 222 231 234 254 281 283 341 356 364 368 370 #> [29755] 374 376 386 391 393 394 403 409 421 428 456 459 460 472 477 480 482 488 #> [29773] 491 494 496 498 520 535 536 539 543 561 584 596 599 606 614 618 626 650 #> [29791] 656 661 662 671 696 698 708 725 747 758 759 767   3   4  13  20  24  46 #> [29809]  64  78  80  90  91 114 131 141 176 183 189 198 209 238 240 257 266 297 #> [29827] 306 311 314 321 334 340 348 349 365 369 388 392 401 405 418 425 433 435 #> [29845] 439 440 445 446 462 484 494 514 524 539 548 566 579 599 607 613 637 645 #> [29863] 646 656 661 672 686 697 705 716 736 739 764 772  27  29  36  42  44  49 #> [29881]  59  80  94  98 100 105 107 185 202 205 227 253 254 258 271 278 283 299 #> [29899] 323 325 326 337 338 344 347 357 360 372 411 416 440 461 464 466 481 490 #> [29917] 495 498 500 548 553 556 572 583 585 587 592 594 605 622 623 625 630 631 #> [29935] 640 666 671 683 689 697 716 725 731 747 755 773   5   8  23  31  32  41 #> [29953]  43  87  88 104 121 123 136 147 148 156 161 175 184 200 202 209 228 251 #> [29971] 252 269 274 277 283 308 312 315 325 335 347 390 399 400 401 404 409 417 #> [29989] 432 433 441 451 476 484 508 509 512 513 515 534 568 578 596 609 638 651 #> [30007] 656 691 692 694 701 727 732 733 742 751 758 762   1   8   9  17  23  66 #> [30025]  68  75  76  85  93 140 147 150 154 159 165 169 172 178 187 191 203 204 #> [30043] 209 232 247 259 277 301 305 377 386 394 402 406 424 427 432 434 453 470 #> [30061] 471 478 488 496 525 536 540 564 571 575 582 593 611 628 691 692 747 757 #> [30079] 769   8  15  27  35  49  51  79  97 101 122 152 161 162 166 172 175 181 #> [30097] 216 230 233 238 241 264 266 269 273 289 290 291 293 300 305 308 312 321 #> [30115] 323 324 331 355 362 371 389 394 395 434 456 460 465 479 482 500 511 513 #> [30133] 518 533 543 544 545 559 560 570 580 585 591 620 622 632 639 640 657 664 #> [30151] 666 667 668 674 679 689 705 709 736 743   8  14  19  25  35  64  67  68 #> [30169]  70  71  84  90  91 106 117 125 128 147 154 163 164 179 195 209 211 238 #> [30187] 243 250 252 273 297 308 309 310 316 358 399 406 427 429 441 448 450 463 #> [30205] 466 479 499 504 521 532 535 541 543 551 557 562 577 583 608 615 636 666 #> [30223] 678 679 730 742 767 775  11  15  33  34  36  48  65  84  86  99 142 154 #> [30241] 159 166 169 195 225 238 239 242 252 255 257 258 261 276 278 283 293 316 #> [30259] 317 336 346 355 364 376 378 379 396 402 404 407 414 419 426 438 459 463 #> [30277] 477 483 488 497 501 512 518 523 526 542 559 579 584 596 610 621 652 657 #> [30295] 663 678 695 704 706 720 742 743 750 765 766 771 772 778  19  21  23  26 #> [30313]  31  34  47  48  55  68  94 103 108 110 123 139 153 176 203 207 209 215 #> [30331] 232 233 241 245 247 269 270 291 294 302 316 317 319 328 339 350 369 374 #> [30349] 402 409 413 451 459 464 475 479 489 500 504 506 535 542 545 553 555 575 #> [30367] 579 582 587 607 608 620 643 659 665 668 669 674 703 714 717 719 739 741 #> [30385] 769 770 773 774 779   7  34  39  47  59  69  72  81  86  94  98 108 110 #> [30403] 114 127 143 146 148 149 157 173 175 186 200 208 220 221 227 241 244 263 #> [30421] 279 285 288 295 301 308 311 322 324 338 357 362 375 381 392 407 408 449 #> [30439] 452 475 481 487 496 502 504 510 515 539 540 541 549 553 557 569 571 573 #> [30457] 574 579 580 583 594 595 596 602 603 624 625 627 642 653 669 677 680 684 #> [30475] 692 696 718 729 737 740 743 753 759 773 776   5   7  13  17  24  46  48 #> [30493]  56  60  64  75  80  91 102 108 124 127 134 148 151 158 160 180 186 190 #> [30511] 244 246 255 262 272 280 293 305 309 314 315 317 322 324 350 355 390 402 #> [30529] 419 430 439 443 447 455 459 464 466 467 468 507 516 534 547 575 576 579 #> [30547] 587 595 611 625 629 630 632 639 640 670 672 676 694 706 713 716 719 724 #> [30565] 732 751 773   2  22  32  34  46  61  86  88  96  97 104 105 106 110 122 #> [30583] 138 148 149 166 169 173 190 199 208 212 214 229 233 244 252 268 274 282 #> [30601] 287 314 335 338 341 356 367 414 418 420 426 430 446 452 462 476 496 518 #> [30619] 529 537 540 544 546 547 574 578 584 594 595 604 605 615 657 677 680 689 #> [30637] 695 708 713 722 746 760 765   3  19  26  40  42  43  48  49  54  74  90 #> [30655]  94  97 109 113 132 137 151 169 170 171 182 209 240 243 250 251 272 285 #> [30673] 291 303 304 311 312 337 350 366 372 389 398 409 419 433 445 449 451 478 #> [30691] 497 524 549 557 566 573 575 577 604 628 635 643 645 649 651 661 672 685 #> [30709] 692 708 711 714 745 746 755 758 778   1  23  36  39  65  94  96  98 126 #> [30727] 129 142 158 173 174 178 193 198 206 212 249 269 286 295 307 308 342 343 #> [30745] 347 356 362 371 418 419 426 427 429 430 431 438 441 457 487 490 495 504 #> [30763] 532 534 536 558 559 565 587 606 617 624 636 651 655 660 670 674 689 696 #> [30781] 697 705 707 712 721 726 759 760 781  19  25  27  30  49  65  84  89  98 #> [30799] 100 104 108 109 116 136 137 154 156 160 164 167 174 196 219 226 238 243 #> [30817] 244 246 251 295 298 322 329 330 334 344 346 387 388 393 397 410 413 426 #> [30835] 433 434 435 437 450 460 463 465 477 479 484 501 503 505 508 511 514 520 #> [30853] 522 544 550 551 561 562 586 592 602 611 620 624 625 629 640 644 653 656 #> [30871] 682 696 700 702 705 715 724 730 736 737 748 755 764 765 784  32  49  53 #> [30889]  55  61  71  76  79 113 118 125 127 133 139 144 179 182 185 198 213 215 #> [30907] 221 225 228 229 258 264 267 284 287 299 302 306 374 375 378 387 390 397 #> [30925] 405 427 428 430 433 441 448 449 451 471 473 474 519 524 537 538 547 548 #> [30943] 583 593 605 628 647 661 663 675 688 689 693 717 725 737 740 747 756 763 #> [30961] 769 786   0   7  13  16  20  28  30  32  44  66  67  70  93 108 109 110 #> [30979] 123 128 131 142 143 203 204 205 206 207 214 242 263 303 304 305 322 324 #> [30997] 333 342 349 356 374 382 390 392 401 416 419 423 435 451 464 465 502 504 #> [31015] 509 517 520 521 526 577 592 603 607 616 628 631 632 639 641 654 657 680 #> [31033] 686 687 694 696 701 723 740 753 755 756 773 781   0   1  12  26  39  44 #> [31051]  59  62  79  83 105 112 117 121 134 138 152 153 156 163 169 176 188 190 #> [31069] 202 219 225 236 277 289 298 306 313 325 362 367 373 376 377 389 400 407 #> [31087] 437 456 479 483 494 496 500 521 535 543 544 549 552 555 570 573 587 596 #> [31105] 611 619 620 621 628 645 646 670 676 693 697 703 715 732 757 759 774 783 #> [31123]   6  10  12  25  47  53  65  71  99 105 111 128 131 138 151 159 167 171 #> [31141] 174 175 187 194 204 217 219 223 253 257 261 282 286 291 296 306 309 337 #> [31159] 339 356 358 362 365 370 377 379 416 428 435 438 441 442 456 487 492 513 #> [31177] 524 529 530 535 543 544 556 563 565 571 576 610 612 616 630 638 657 670 #> [31195] 671 693 704 715 719 732 750 774 778 787 788   8  15  27  54  64  71  73 #> [31213]  80  93 117 118 124 125 133 142 230 233 235 238 246 267 268 269 270 271 #> [31231] 317 321 325 336 342 361 370 373 382 384 387 389 408 454 463 477 485 489 #> [31249] 491 492 497 499 506 525 535 537 552 559 562 567 583 603 609 627 645 649 #> [31267] 657 659 660 661 666 674 677 687 694 711 716 717 736 746 753 761 773 782 #> [31285]  30  39  50  51  55  68  76  77  81 100 119 130 145 173 176 178 184 186 #> [31303] 206 208 209 242 257 261 275 301 311 316 320 323 324 332 334 340 341 350 #> [31321] 366 368 378 380 387 409 415 431 432 433 435 487 492 493 498 505 510 514 #> [31339] 515 523 528 531 543 552 567 580 596 604 624 633 647 649 651 653 656 673 #> [31357] 675 678 687 712 713 717 723 728 738 749 756 760 761 762 770 790  10  11 #> [31375]  13  25  26  28  30  39  47  74  75  80  82  88  96 101 104 108 122 145 #> [31393] 148 158 165 167 180 209 230 235 236 243 245 267 279 280 316 332 338 343 #> [31411] 347 351 352 368 381 402 409 430 431 439 446 453 473 498 509 510 520 527 #> [31429] 536 544 556 564 567 575 576 615 621 637 647 668 679 689 705 706 724 736 #> [31447] 746 757 764 767   5  12  19  26  41  76  83  88  91 102 106 108 124 136 #> [31465] 180 189 195 202 210 212 220 228 235 262 293 299 312 317 318 324 332 333 #> [31483] 337 339 340 346 351 363 364 390 394 411 417 422 430 436 458 462 466 473 #> [31501] 487 494 506 509 513 532 533 539 540 541 553 578 581 582 587 593 595 638 #> [31519] 642 651 665 723 729 756 776 785   5   9  10  19  27  51  69  88  89  98 #> [31537] 114 125 137 139 179 203 216 223 225 231 232 243 247 253 257 259 273 275 #> [31555] 285 289 300 312 321 323 325 336 338 339 349 351 358 390 394 418 430 447 #> [31573] 453 459 475 479 497 499 503 514 521 542 550 557 575 577 610 626 628 642 #> [31591] 646 654 656 665 682 703 706 717 718 728 747 772 787 791  10  13  22  25 #> [31609]  27  49  53  67 105 110 119 128 129 131 146 149 183 184 192 206 215 222 #> [31627] 229 240 243 256 262 272 292 300 315 325 331 335 346 349 356 362 364 370 #> [31645] 379 400 404 409 414 420 424 428 433 454 462 472 482 491 495 515 546 557 #> [31663] 570 572 583 588 597 600 608 612 632 644 647 648 652 676 695 697 719 723 #> [31681] 726 739 753 762 763 768 774 779   0   3  15  20  35  43  44  45  58  69 #> [31699]  72  98  99 101 105 106 125 138 142 161 162 181 182 186 191 195 197 201 #> [31717] 208 220 230 232 233 252 258 266 270 277 280 291 292 295 315 317 325 332 #> [31735] 333 370 372 392 405 418 421 439 440 444 446 451 455 461 473 477 478 499 #> [31753] 508 513 515 517 535 545 559 568 573 577 583 588 589 590 597 605 615 619 #> [31771] 628 630 637 648 650 653 663 677 683 684 703 711 724 733 752 772 786 787 #> [31789] 793  19  32  34  42  58  67  71  77  81 106 110 121 132 137 139 140 141 #> [31807] 142 158 164 167 173 175 185 217 219 232 259 261 269 271 308 321 324 328 #> [31825] 329 334 341 343 350 355 359 362 372 399 407 416 424 433 445 449 453 455 #> [31843] 456 478 487 488 501 518 521 522 547 577 583 610 612 614 627 636 637 650 #> [31861] 660 670 696 719 720 730 734 790   1  17  22  38  47  75  88 104 110 116 #> [31879] 117 120 124 143 145 146 154 190 195 203 222 224 255 263 270 278 296 306 #> [31897] 307 310 326 339 341 368 394 402 406 416 432 433 441 442 447 449 465 470 #> [31915] 472 479 485 489 504 510 512 522 525 531 534 543 555 557 579 582 613 616 #> [31933] 618 630 633 639 644 654 667 679 705 708 710 715 747 748 765 776 778 792 #> [31951]  17  28  33  53  57  61  80  86  95 101 103 105 107 126 134 147 152 153 #> [31969] 160 167 171 174 190 197 202 204 214 216 224 229 243 291 300 307 338 414 #> [31987] 418 421 451 459 470 473 497 498 513 531 532 540 568 586 587 596 598 604 #> [32005] 611 639 645 656 666 678 682 693 712 718 720 746 757 772 782 790  14  25 #> [32023]  36  40  46  57  63  64  80  83 107 127 130 142 144 161 166 169 187 188 #> [32041] 199 236 237 239 245 247 249 279 281 286 297 307 309 310 329 341 345 348 #> [32059] 353 354 362 371 380 382 398 410 411 420 422 431 432 433 444 445 446 457 #> [32077] 458 471 495 497 514 519 534 585 589 600 612 623 628 666 667 678 684 697 #> [32095] 699 709 716 729 732 739 745 748 757 781 797   5  18  20  32  33  40  48 #> [32113]  50  65  82  94 102 108 117 134 141 143 149 177 179 187 191 192 217 222 #> [32131] 224 227 233 238 239 247 248 272 296 297 301 309 312 326 332 334 335 337 #> [32149] 352 365 374 389 407 423 446 454 482 508 520 532 565 566 575 577 578 591 #> [32167] 613 617 623 626 628 645 675 677 678 689 695 705 707 713 720 721 723 751 #> [32185] 762 763 768 774  23  32  45  58  69  79  85  86  89  99 121 125 166 171 #> [32203] 180 188 191 192 216 235 237 244 253 256 261 274 280 304 334 360 368 369 #> [32221] 394 400 402 408 418 432 435 441 449 460 481 504 512 514 520 548 573 588 #> [32239] 598 601 609 623 632 647 661 667 671 674 680 686 687 695 704 712 713 714 #> [32257] 720 724 728 735 762 778 795 802   5  13  15 125 159 193 200 202 225 239 #> [32275] 252 281 292 293 298 303 310 312 329 331 348 378 392 400 447 467 468 473 #> [32293] 491 498 500 516 528 530 532 535 538 554 573 614 630 650 653 663 678 702 #> [32311] 708 717 737 750 762 778 780 797 803  12  17  32  35  37  63  74  93 107 #> [32329] 134 145 164 176 208 213 238 252 256 266 267 303 324 349 353 354 357 359 #> [32347] 360 384 400 410 430 433 437 439 468 469 492 495 499 504 505 511 512 517 #> [32365] 542 544 560 561 567 576 579 607 613 625 630 631 632 634 638 641 645 658 #> [32383] 683 698 703 721 723 735 741 747 754 760 767 770 774 798 799   3   5   9 #> [32401]  17  31  33  62  64  66 113 117 125 131 140 141 146 149 161 169 170 179 #> [32419] 181 185 195 202 213 219 228 254 262 265 268 271 299 303 307 312 316 333 #> [32437] 334 336 353 369 370 372 376 389 390 402 410 415 421 424 450 462 465 467 #> [32455] 481 488 511 513 514 521 534 542 549 558 564 569 581 599 618 626 646 647 #> [32473] 652 657 658 684 698 707 712 742 746 747 766 770 778 780   0   9  19  29 #> [32491]  39  54  60  70  89  96  99 101 104 108 111 133 137 175 190 206 220 228 #> [32509] 237 251 258 279 284 317 318 323 344 355 359 362 364 374 382 385 401 422 #> [32527] 426 427 429 442 453 455 457 461 499 500 501 504 507 514 543 552 569 573 #> [32545] 579 598 608 617 625 630 631 633 636 639 640 666 670 679 681 684 689 696 #> [32563] 702 706 713 730 737 747 772 774 779 784 790 797  22  40  41  52  83  92 #> [32581]  93 121 128 133 136 141 142 144 156 160 177 182 194 199 204 220 248 249 #> [32599] 269 270 271 289 293 294 302 306 307 311 332 333 339 341 342 345 346 362 #> [32617] 367 377 386 387 410 425 430 448 451 454 455 470 474 478 496 503 510 519 #> [32635] 526 532 535 536 540 554 563 564 586 588 589 596 602 637 638 639 642 651 #> [32653] 663 664 667 675 689 694 702 713 738 761 770 775 782 789 796   0   2   5 #> [32671]   7  44  58  72  75  89 104 127 128 136 138 143 166 179 180 182 203 233 #> [32689] 234 236 239 279 283 293 294 299 301 307 310 353 381 401 408 417 422 427 #> [32707] 437 457 464 490 504 540 543 549 566 572 573 580 585 587 595 643 657 662 #> [32725] 668 681 693 699 710 712 714 726 751 753 755 776 787   7  16  70  77  83 #> [32743] 114 123 131 135 147 153 154 161 172 182 199 205 212 232 259 267 279 280 #> [32761] 289 291 296 313 327 329 330 332 347 363 371 375 380 384 401 403 414 419 #> [32779] 420 421 432 450 453 473 475 490 492 521 537 551 597 603 611 625 627 640 #> [32797] 662 664 667 689 693 704 705 719 754 771 783 793 808   0  18  21  29  55 #> [32815]  60  69  72  84  93 109 113 121 123 124 125 140 151 152 157 176 210 214 #> [32833] 219 238 243 244 248 265 273 294 297 300 305 308 309 310 317 328 332 371 #> [32851] 374 381 383 386 394 413 414 418 419 429 447 455 515 534 535 537 542 550 #> [32869] 555 575 587 595 599 600 606 608 610 614 619 622 634 650 667 675 683 685 #> [32887] 689 726 731 751 762 809   1   2  26  37  52  59  73  81 101 118 124 125 #> [32905] 134 142 143 144 156 158 163 179 222 223 238 249 257 259 264 265 269 278 #> [32923] 297 324 327 340 341 344 352 356 367 375 379 389 404 405 411 412 414 418 #> [32941] 422 430 445 455 462 485 497 503 531 536 537 561 562 572 573 584 619 624 #> [32959] 634 644 650 663 672 673 693 720 729 744 756 758 769 772 777 779 786 790 #> [32977] 792   0   8  14  16  32  48  51  53  57  65 103 104 109 115 120 132 133 #> [32995] 149 153 162 167 176 183 193 226 232 258 260 261 281 283 340 344 348 353 #> [33013] 364 378 386 388 402 419 429 431 448 453 459 476 477 530 531 539 541 550 #> [33031] 557 562 570 573 582 585 598 631 641 643 644 655 668 682 691 702 703 714 #> [33049] 718 736 739 780 781 783 789 792 799 806 810   1   2  23  27  29  33  38 #> [33067]  39  82  88  99 122 129 131 156 159 165 172 177 203 222 238 249 250 259 #> [33085] 269 300 334 367 368 375 379 380 395 397 422 436 446 456 463 469 488 492 #> [33103] 493 501 503 509 525 549 553 568 569 581 584 598 605 610 614 617 628 648 #> [33121] 660 662 665 667 683 693 698 715 727 738 740 746 752 757 761 772 781 794 #> [33139] 802   1   3   4  19  30  37  39  55  65  68  84  96 104 112 120 121 129 #> [33157] 135 146 156 161 183 203 205 207 211 222 238 239 252 257 259 276 277 285 #> [33175] 291 307 309 327 343 353 359 376 387 390 408 409 427 443 473 479 487 497 #> [33193] 499 505 524 537 547 554 572 576 594 630 638 652 658 668 671 675 721 724 #> [33211] 730 736 739 747 754 756 778 780 784 788 789 812   6  18  29  57  61  65 #> [33229]  84  86  88  92  99 110 113 120 128 135 142 170 202 229 238 254 313 340 #> [33247] 354 357 361 362 373 401 408 409 419 430 434 435 440 444 445 446 448 456 #> [33265] 469 477 487 490 495 501 502 507 512 513 514 519 540 545 555 559 584 588 #> [33283] 590 594 597 599 609 648 652 679 684 699 718 725 746 748 749 760 785 786 #> [33301] 789 792 803 812   2   3   8   9  19  23  43  46  55  79  95 101 106 111 #> [33319] 123 124 142 146 150 164 167 188 198 199 210 216 221 241 245 249 251 261 #> [33337] 285 289 291 302 303 307 308 317 335 350 360 372 389 420 425 452 453 460 #> [33355] 474 478 482 487 498 501 508 531 546 554 556 561 574 580 594 623 644 656 #> [33373] 662 666 677 683 694 695 698 705 707 711 715 763 793 800  11  13  21  23 #> [33391]  59  63  65  81  90  91  97 100 122 141 143 173 202 214 216 218 220 224 #> [33409] 225 234 257 267 280 290 293 305 311 312 315 336 339 364 379 385 397 415 #> [33427] 423 431 432 436 440 452 469 472 478 480 490 498 503 505 510 517 533 542 #> [33445] 544 545 555 569 579 591 593 596 598 606 620 632 637 682 708 731 736 744 #> [33463] 746 771 772 773 781 800 802 805 808 814  20  37  41  51  60  69  71  72 #> [33481]  80  88  89  95 101 103 121 141 155 171 190 199 206 209 238 241 257 275 #> [33499] 280 289 292 321 325 328 354 362 368 372 373 379 401 422 424 425 432 440 #> [33517] 454 461 485 491 501 519 527 535 556 561 564 575 577 582 588 589 601 606 #> [33535] 620 627 628 630 645 655 662 663 664 680 687 695 700 704 713 719 726 728 #> [33553] 734 735 761 778 780 781 783 813 818   8  11  14  15  25  58  72  76  91 #> [33571] 100 101 113 125 135 152 153 161 181 191 195 200 202 239 266 324 330 340 #> [33589] 353 358 364 371 383 397 406 410 420 425 429 437 442 449 455 463 476 481 #> [33607] 487 489 504 505 528 536 543 544 548 561 569 576 585 588 592 610 611 631 #> [33625] 634 647 664 671 681 692 701 711 720 724 732 755 772 776 797 803  22  26 #> [33643]  28  41  51  57  69  87  90  91 112 142 150 162 166 173 178 188 191 204 #> [33661] 209 235 252 254 282 283 289 332 349 373 385 408 409 414 421 435 458 463 #> [33679] 464 468 480 490 501 503 512 535 544 572 577 586 599 615 625 634 635 664 #> [33697] 670 675 688 700 708 711 712 743 768 775 797 801 803 806 809   9  10  20 #> [33715]  22  39  50  63  64  75  81  83  91 112 128 136 141 144 154 166 170 172 #> [33733] 176 180 184 192 209 213 223 228 236 251 256 277 278 293 309 310 313 323 #> [33751] 331 337 341 347 353 356 358 363 373 377 383 384 397 401 408 426 435 467 #> [33769] 469 497 507 515 533 535 544 576 579 604 620 636 672 687 691 693 711 722 #> [33787] 728 737 746 749 764 771 788  10  20  26  43  54  55  64  66  81  86  92 #> [33805] 119 123 139 142 147 149 152 170 174 179 185 198 199 216 255 262 298 324 #> [33823] 334 343 344 353 356 357 366 379 397 409 415 416 418 430 431 438 445 446 #> [33841] 457 462 468 479 502 519 531 549 559 565 600 601 603 623 631 633 643 649 #> [33859] 652 669 671 676 681 686 688 705 713 732 742 752 758 765 786 807 812  26 #> [33877]  35  45  60  61  62  70  86  89  98 104 111 117 122 137 142 143 156 172 #> [33895] 216 248 249 250 300 303 309 322 326 348 352 375 385 388 401 422 423 425 #> [33913] 440 444 454 455 456 461 466 485 506 508 509 513 514 516 527 529 537 543 #> [33931] 545 562 563 564 568 587 612 635 644 648 672 681 689 695 707 726 732 749 #> [33949] 752 767 772 777 778 782 796 799 803 812 822   2  10  11  18  75  78  81 #> [33967]  95  99 115 117 122 123 137 154 161 172 200 204 221 227 236 258 266 267 #> [33985] 312 328 359 364 365 371 376 379 389 396 398 415 417 419 499 504 505 528 #> [34003] 541 553 557 562 566 594 598 602 609 612 614 617 618 633 646 649 657 666 #> [34021] 672 674 682 689 694 716 719 723 726 739 743 744 750 763 770 779 784 785 #> [34039] 787 791 804 812 818   5  19  20  23  26  33  41  52  60  62  78  89  90 #> [34057] 100 122 124 126 129 136 149 152 156 159 162 187 221 247 253 271 278 288 #> [34075] 292 294 307 311 312 323 328 330 339 344 348 356 357 359 373 374 380 392 #> [34093] 393 415 430 434 435 436 438 441 442 446 450 459 469 490 498 503 518 523 #> [34111] 541 548 564 585 599 653 654 660 667 671 675 687 697 706 715 716 736 764 #> [34129] 792 799 819 823   0   3   8  16  20  28  48  65  70  72  82 124 125 129 #> [34147] 144 147 152 154 157 179 201 203 217 233 234 247 253 255 263 271 276 291 #> [34165] 304 328 354 361 369 381 382 387 409 416 427 454 467 476 493 498 513 523 #> [34183] 544 557 568 569 576 592 596 599 602 617 618 623 645 648 655 659 669 672 #> [34201] 684 685 686 690 703 708 719 722 730 767 772 781 797 806  11  14  19  25 #> [34219]  32  37  40  61  71  72  81  86  92 104 111 117 121 126 134 146 148 152 #> [34237] 155 161 165 171 186 194 195 200 202 205 216 231 241 247 250 276 277 279 #> [34255] 311 315 320 331 332 347 379 385 388 392 394 399 430 435 466 490 501 521 #> [34273] 560 583 601 602 614 631 647 652 670 696 716 719 733 739 750 751 765 773 #> [34291] 798 810   2   7  10  16  17  26  33  40  42  43  50  51  54  72  75 102 #> [34309] 110 133 134 164 185 210 219 221 234 242 246 259 261 266 294 297 325 338 #> [34327] 339 354 359 369 370 372 377 378 384 402 409 419 424 446 450 486 509 522 #> [34345] 534 535 551 553 559 560 568 575 584 608 609 611 646 670 675 679 682 685 #> [34363] 688 694 697 703 704 734 738 740 743 758 767 782 786 792 811   6   9  18 #> [34381]  41  42  47  51  66  72  74  75  83  92 102 103 104 106 108 145 160 180 #> [34399] 183 196 208 212 222 227 229 234 245 247 248 252 256 261 264 268 276 304 #> [34417] 319 320 326 342 343 349 359 371 382 391 398 404 406 415 418 431 437 442 #> [34435] 458 476 477 480 481 509 521 526 535 537 550 559 563 579 580 588 589 592 #> [34453] 616 624 636 637 660 665 681 692 710 729 731 761 769 774 778 779 815  20 #> [34471]  28  38  41  44  56  69  73  78  83  94 103 114 120 130 145 152 167 168 #> [34489] 205 225 250 266 280 283 290 352 357 359 379 381 386 409 411 416 439 443 #> [34507] 458 459 494 496 503 506 521 523 558 575 584 600 601 603 608 630 634 644 #> [34525] 659 667 680 691 708 709 714 721 725 729 734 740 746 752 753 754 778 779 #> [34543] 782 783 801 816 828  28  29  32  42  54  69  79 105 110 117 130 136 145 #> [34561] 147 160 162 197 198 207 212 247 251 262 265 276 278 280 289 292 298 310 #> [34579] 323 328 342 345 347 351 354 357 359 370 372 393 395 402 427 430 439 460 #> [34597] 501 520 524 526 531 542 546 554 598 622 629 640 643 653 689 693 704 709 #> [34615] 719 730 731 743 767 791 792 817 822 826  15  27  39  61  80  92 103 142 #> [34633] 149 152 159 163 177 192 197 205 208 229 240 245 252 257 273 276 281 282 #> [34651] 298 308 316 322 323 329 331 332 349 355 362 376 383 387 394 422 429 451 #> [34669] 458 466 468 472 491 492 498 499 505 528 534 560 579 580 596 607 621 625 #> [34687] 630 642 644 649 656 677 678 681 692 695 704 708 723 726 727 728 745 755 #> [34705] 756 787   3  23  24  26  29  39  46  47  48  63  71  74  91 109 116 155 #> [34723] 172 186 194 206 230 242 245 248 269 282 292 305 310 323 340 341 347 363 #> [34741] 374 384 429 442 443 466 478 492 515 521 523 537 539 552 566 578 581 602 #> [34759] 604 613 617 619 634 635 667 671 685 717 721 723 734 751 765 788 796 797 #> [34777] 806 807 810 818 829 830  21  27  39  81  94  98 102 108 109 139 143 146 #> [34795] 148 159 175 181 185 189 190 216 218 228 232 259 260 269 274 277 279 282 #> [34813] 292 306 329 333 338 348 366 373 376 382 421 432 436 446 456 461 481 490 #> [34831] 501 502 504 509 515 538 540 556 579 612 620 626 628 641 644 660 665 670 #> [34849] 677 691 705 722 727 733 735 764 768 770 779 790 791 798 807 808 819  20 #> [34867]  25  65  69  70  75  85  96 101 103 104 108 115 135 147 166 175 191 201 #> [34885] 202 206 207 214 218 219 233 235 237 243 244 253 255 257 290 295 297 321 #> [34903] 329 335 342 347 357 374 393 395 396 399 400 410 412 427 432 452 458 465 #> [34921] 467 470 473 479 483 493 494 501 536 560 566 580 583 587 600 606 612 614 #> [34939] 619 620 622 624 637 640 645 654 662 677 711 736 763 764 789 790 792 793 #> [34957] 800 802 811 823 831  10  22  23  25  34  42  44  49  51  58  60  72  81 #> [34975]  87  96  98 111 137 152 158 159 160 176 181 186 193 208 241 244 268 275 #> [34993] 283 287 297 301 311 314 321 324 325 333 341 372 373 397 415 418 450 454 #> [35011] 464 466 470 471 502 514 526 548 563 570 584 589 602 608 611 622 624 630 #> [35029] 631 637 662 669 670 672 682 686 700 703 706 711 715 750 776 784   8  10 #> [35047]  32  36  42  46  60  72  87  92 116 147 201 229 246 287 295 308 310 320 #> [35065] 325 344 371 379 381 388 404 420 421 429 436 443 455 464 478 520 524 532 #> [35083] 547 572 590 594 596 599 610 615 633 673 679 692 693 712 713 714 746 759 #> [35101] 762 764 791 803 809  23  24  43  45  60  61  65  69  74  93 103 147 155 #> [35119] 159 162 180 186 188 197 203 236 239 244 263 275 282 288 324 352 361 374 #> [35137] 382 396 406 415 419 425 450 454 464 471 497 512 524 552 565 566 568 569 #> [35155] 576 601 606 614 634 645 658 661 664 675 690 698 706 710 718 722 738 742 #> [35173] 745 758 760 763 781 783 786 789 792 794 815 821 822 837  30  35  38  48 #> [35191]  57  70  77  93 108 113 116 147 154 161 162 169 174 193 195 203 236 272 #> [35209] 277 299 302 307 323 325 363 364 366 368 376 380 382 395 402 450 464 467 #> [35227] 475 479 486 489 507 508 510 513 520 522 540 541 547 550 571 573 585 591 #> [35245] 596 606 609 636 638 641 662 675 676 689 691 702 744 750 759 762 767 790 #> [35263] 798 800 808 815 834 836   1   4   5  23  75  96 118 120 145 151 160 161 #> [35281] 170 171 174 182 184 208 220 224 237 239 244 246 277 279 281 282 287 329 #> [35299] 334 346 350 362 375 393 400 404 405 412 427 434 437 454 457 462 502 505 #> [35317] 516 517 523 529 544 546 551 569 571 602 607 608 620 624 628 661 662 665 #> [35335] 675 682 687 700 702 718 719 724 725 727 734 740 751 800 811 827 829  14 #> [35353]  16  18  30  31  35  36  51  55  56  68  71  79 102 122 126 131 134 149 #> [35371] 160 164 166 171 173 180 225 233 247 254 270 282 295 302 312 315 317 330 #> [35389] 336 357 361 362 364 370 372 387 428 429 438 439 459 467 485 492 505 506 #> [35407] 509 511 513 514 518 528 530 537 541 568 583 609 622 624 628 641 657 658 #> [35425] 666 667 670 682 690 711 713 714 725 739 745 751 753 758 763 791 818 831 #> [35443] 835  14  19  20  23  44  45  54  61  69  82  92 100 102 114 117 136 143 #> [35461] 150 168 170 180 184 189 196 203 215 219 223 226 237 255 264 267 301 302 #> [35479] 337 349 357 362 379 394 409 421 435 442 450 488 509 516 519 550 561 562 #> [35497] 574 575 578 583 596 609 617 619 645 659 663 684 686 693 694 698 702 705 #> [35515] 716 736 738 739 749 756 768 774 779 788 795 833 837 838  11  12  21  34 #> [35533]  36  44  52  54  65  83  99 110 152 169 174 187 199 206 238 239 250 254 #> [35551] 256 264 266 270 276 287 289 290 294 307 314 331 334 373 389 392 396 412 #> [35569] 424 426 447 448 455 476 506 517 520 530 547 560 566 576 583 616 623 624 #> [35587] 634 642 644 650 656 661 663 664 670 679 684 695 706 708 728 732 748 752 #> [35605] 754 756 757 760 765 788 810 823   6  23  24  30  37  49  63  75  76  80 #> [35623]  83 103 109 122 123 133 147 192 219 222 226 266 276 284 285 303 327 331 #> [35641] 336 348 350 373 378 414 457 508 517 519 522 529 549 550 556 565 583 585 #> [35659] 595 602 605 613 643 646 648 659 662 675 715 722 727 730 737 741 743 758 #> [35677] 770 774 786 795 802 803 809 823 838   7   9  10  14  16  17  19  28  42 #> [35695]  61  79  84 100 101 106 128 129 135 136 142 143 144 147 148 157 160 174 #> [35713] 182 183 197 220 251 290 310 322 347 349 360 363 378 380 389 408 433 435 #> [35731] 447 457 458 462 466 472 476 486 516 522 526 529 544 554 560 573 577 585 #> [35749] 586 598 611 630 639 649 679 687 692 694 704 709 723 765 766 795 803 815 #> [35767] 825 830   9  11  14  37  39  40  61  74 106 114 119 129 141 165 167 172 #> [35785] 179 196 199 217 218 222 225 227 236 245 260 263 317 320 322 327 329 340 #> [35803] 343 345 359 380 406 412 413 420 425 427 430 454 462 494 522 524 531 534 #> [35821] 552 560 573 578 585 590 612 618 638 647 660 661 691 695 707 732 747 749 #> [35839] 759 760 770 772 783 804 806 811 812 821 825 827 830 846   7   9  17  19 #> [35857]  20  25  29  33  46  49  53  55  87  89  91 103 109 113 125 128 133 150 #> [35875] 151 163 169 175 177 215 238 244 314 315 326 341 342 357 362 368 377 390 #> [35893] 410 415 427 435 460 476 481 482 487 493 494 495 496 506 508 514 534 541 #> [35911] 545 554 569 580 587 589 593 612 618 641 643 656 657 677 685 702 707 729 #> [35929] 731 738 740 742 762 769 775 776 804 808 811 845  23  31  42  46  51  59 #> [35947]  68  82  94 100 108 112 122 127 150 152 162 180 183 185 219 226 233 263 #> [35965] 278 284 287 309 312 332 339 340 346 365 371 377 384 396 397 432 433 441 #> [35983] 445 455 461 467 469 503 509 510 526 539 553 560 561 566 578 584 589 591 #> [36001] 593 598 611 614 615 623 635 641 649 674 675 701 713 719 738 747 757 773 #> [36019] 779 812 825 838 839 842 844   7  12  16  17  18  24  32  43  45  51  53 #> [36037]  54  90  95  97  99 100 102 103 111 113 122 123 126 141 143 166 172 189 #> [36055] 191 192 202 234 245 247 252 267 268 270 278 279 292 295 300 303 309 321 #> [36073] 328 353 363 375 378 395 397 419 430 444 450 455 478 494 514 519 548 553 #> [36091] 558 569 573 574 575 576 592 604 612 614 617 619 620 628 660 666 672 677 #> [36109] 710 724 738 745 751 753 770 778 786 788 792 802 825 838   4   8  47  77 #> [36127]  78  86 129 142 148 151 157 171 177 186 209 213 255 277 278 286 288 311 #> [36145] 324 329 333 350 356 371 375 391 392 406 412 441 446 453 470 496 497 503 #> [36163] 505 540 545 552 569 580 582 589 599 607 613 627 633 635 648 651 657 675 #> [36181] 680 685 687 696 708 712 740 741 742 773 782 791 804 812 822 834 841 844 #> [36199] 849   9  26  29  42  73  83  87  90  92 100 117 118 133 155 156 178 204 #> [36217] 205 226 227 257 258 268 269 273 278 279 282 290 297 298 313 323 325 330 #> [36235] 347 350 361 378 381 393 422 423 431 432 436 438 442 457 473 487 516 533 #> [36253] 544 550 562 564 567 598 601 613 638 655 659 670 674 678 695 711 715 727 #> [36271] 730 731 740 747 750 753 825 826 843 845 850   6   7  13  14  17  21  36 #> [36289]  37  38  39  52  65  69  72  88  94 116 121 131 158 160 162 182 192 193 #> [36307] 213 234 260 265 281 299 335 346 356 358 364 375 379 380 381 392 422 434 #> [36325] 439 457 462 466 480 481 485 499 504 508 510 512 524 530 532 547 552 572 #> [36343] 573 585 602 611 623 644 657 666 667 671 678 684 699 715 720 723 744 763 #> [36361] 764 765 771 783 794 813 817 825 826 837 845   2  16  34  36  48  50  60 #> [36379]  90  96  99 104 110 137 151 159 160 161 201 207 214 220 221 228 237 256 #> [36397] 270 271 277 278 281 298 301 306 318 320 324 339 349 362 375 378 392 397 #> [36415] 407 410 416 429 437 441 452 496 498 508 516 519 523 534 548 557 562 571 #> [36433] 583 588 594 597 608 629 633 637 638 649 664 681 692 698 700 702 722 723 #> [36451] 743 747 751 767 774 787 804 815 820 824 845 846 849   5  12  15  22  30 #> [36469]  36  38  69 117 130 132 141 158 162 166 177 182 191 195 215 227 232 238 #> [36487] 254 255 286 294 295 299 308 312 340 359 360 362 370 382 386 388 430 436 #> [36505] 451 455 458 463 478 483 485 494 500 502 504 505 519 531 532 542 558 565 #> [36523] 566 578 579 602 610 614 617 628 631 661 665 674 675 676 693 705 706 707 #> [36541] 722 735 747 749 759 764 768 780 782 786 790 807 813 814 826 831 832 841 #> [36559]   2  22  25  32  38  42  44  47  65  73  74  78  93 101 104 107 109 122 #> [36577] 133 142 158 178 193 214 218 220 221 222 223 247 265 281 285 291 308 318 #> [36595] 326 327 332 341 362 382 391 403 409 418 428 431 453 454 473 490 492 516 #> [36613] 517 521 552 571 584 592 594 595 617 644 653 661 684 688 689 700 702 713 #> [36631] 725 735 743 745 746 765 766 767 771 780 785 792 796 816 819   1   3   8 #> [36649]  11  24  25  35  42  66  75  78  82  86  94  98 117 118 152 159 160 161 #> [36667] 164 178 223 224 228 230 232 233 235 248 254 256 257 260 278 281 285 287 #> [36685] 301 311 316 323 343 344 361 381 397 432 434 462 470 516 526 533 534 545 #> [36703] 564 567 581 586 600 604 610 618 624 642 657 670 671 678 688 691 701 703 #> [36721] 740 748 755 762 766 784 795 804 807 829 853  23  25  34  55  58  64  69 #> [36739]  74  88  98 108 110 114 116 122 134 139 167 168 170 218 228 232 247 249 #> [36757] 250 273 290 303 305 325 328 329 339 362 365 375 381 384 395 400 412 426 #> [36775] 459 461 475 479 491 533 565 579 583 589 614 623 640 653 664 678 687 694 #> [36793] 696 712 721 722 734 750 755 766 767 771 777 779 798 816 820 839 848 857 #> [36811]  15  23  30  41  50  51  71  76  84  85  88 106 117 118 135 141 167 171 #> [36829] 176 196 216 229 237 238 246 250 271 289 300 307 308 316 328 333 344 347 #> [36847] 350 367 370 371 376 384 398 405 422 436 442 443 444 453 474 477 494 502 #> [36865] 504 510 513 516 518 525 543 585 606 626 642 655 660 662 673 677 678 700 #> [36883] 720 740 749 751 774 790 794 800 806 833 841 851   8  10  20  21  37  39 #> [36901]  45  49  59  69  73  88  95  96 100 107 124 128 141 146 147 184 190 194 #> [36919] 196 200 229 235 257 260 262 265 275 279 282 313 315 318 324 337 348 350 #> [36937] 365 366 385 388 401 405 411 426 432 440 450 451 457 478 486 513 518 535 #> [36955] 542 551 558 559 562 575 579 580 609 623 627 629 651 660 672 683 705 714 #> [36973] 731 747 749 753 774 776 791 795 799 817 823 839 842 856   4   5  25  55 #> [36991]  66  93 111 112 117 120 122 133 136 147 163 164 167 170 171 190 210 215 #> [37009] 218 238 256 264 267 271 276 284 305 306 311 326 334 335 344 346 353 362 #> [37027] 364 378 380 385 391 403 413 422 437 442 444 450 460 461 464 477 496 497 #> [37045] 500 501 511 518 552 576 580 591 601 602 623 633 634 647 664 665 668 681 #> [37063] 686 704 711 720 729 741 750 755 778 785 802 830 840  10  13  51  62  64 #> [37081]  72  75  80  93  94  97 103 121 123 141 173 175 181 182 184 214 215 216 #> [37099] 219 225 285 312 315 338 344 345 346 348 362 371 400 404 432 442 450 455 #> [37117] 466 475 498 507 527 539 544 545 547 549 555 559 564 566 572 577 579 585 #> [37135] 609 612 616 621 635 641 646 657 677 687 691 698 726 727 734 739 745 762 #> [37153] 777 797 817 849 853 855   1   2   7  11  15  19  68  76  77  91 110 124 #> [37171] 136 137 142 147 151 163 175 176 181 183 185 215 233 240 242 250 255 256 #> [37189] 272 282 286 291 307 313 314 330 333 339 341 344 364 368 395 396 407 437 #> [37207] 441 444 446 475 478 482 494 497 510 527 534 544 553 563 568 570 575 588 #> [37225] 597 608 629 630 633 639 665 667 688 690 711 734 753 758 763 766 773 774 #> [37243] 795 800 801 818 821 829 836 843 861   8   9  17  22  32  42  52  60  61 #> [37261]  64  81 100 102 109 139 165 167 169 172 175 178 191 193 205 227 228 240 #> [37279] 242 271 275 305 324 340 343 349 352 365 366 371 393 399 414 429 438 456 #> [37297] 461 472 483 488 493 512 551 552 572 576 577 579 583 595 602 620 623 633 #> [37315] 635 639 655 662 670 724 732 739 740 743 748 750 759 762 763 770 794 795 #> [37333] 810 813 831 838 842 844 855 863   9  19  20  45  59  73  77  85  87 102 #> [37351] 103 111 114 116 130 131 146 159 161 166 167 174 189 190 194 195 198 212 #> [37369] 220 230 239 257 269 274 275 286 315 320 342 364 375 412 415 421 424 426 #> [37387] 432 433 438 443 467 530 533 540 543 581 587 592 594 595 596 597 620 626 #> [37405] 636 641 642 664 678 683 689 693 698 704 719 721 745 746 761 764 771 777 #> [37423] 784 799 801 818 823 830 836 841 843   4   7  11  19  25  35  37  42  52 #> [37441]  79  95 100 122 138 143 145 153 168 170 193 195 197 200 209 211 222 236 #> [37459] 243 247 257 258 279 297 298 306 309 326 327 356 365 372 384 388 389 393 #> [37477] 394 408 436 465 480 498 499 536 543 555 564 585 589 600 632 648 659 663 #> [37495] 669 674 678 683 715 719 729 738 739 746 765 805 808 817 840 844   9  27 #> [37513]  50  55  71  82  86  92 123 132 133 146 159 164 180 197 200 213 222 225 #> [37531] 264 267 272 290 297 304 331 349 366 370 372 375 377 383 388 398 413 439 #> [37549] 441 450 465 479 486 490 500 520 522 534 535 566 574 575 580 583 591 609 #> [37567] 613 619 624 627 638 639 642 649 674 678 683 696 701 705 708 711 719 729 #> [37585] 731 771 781 783 798 805 818 825 830 834 839 853 855 865   0   1  15  18 #> [37603]  19  53  67  86  92 101 109 110 117 137 148 149 154 156 173 188 197 207 #> [37621] 216 221 246 248 250 271 272 277 281 289 308 315 321 334 336 343 346 349 #> [37639] 355 359 365 366 369 375 385 388 395 405 407 409 421 451 454 456 470 487 #> [37657] 497 501 511 514 518 520 539 545 549 564 565 574 577 583 584 588 628 639 #> [37675] 650 674 686 691 697 724 729 732 752 769 782 788 792 794 801 808 821   4 #> [37693]  12  30  33  61  74  90 120 125 134 136 142 162 191 207 214 226 234 247 #> [37711] 251 266 271 293 296 298 309 320 322 341 351 354 361 363 368 377 394 398 #> [37729] 399 402 403 416 417 421 422 427 430 440 455 467 476 478 479 488 490 497 #> [37747] 506 510 532 543 551 567 569 592 593 606 621 642 657 681 689 690 706 709 #> [37765] 722 729 738 745 747 750 775 776 781 785 787 795 800 811 818 835 866  12 #> [37783]  20  22  35  39  50  86  89  92 108 123 129 135 145 158 181 197 199 201 #> [37801] 202 216 241 248 253 271 328 338 348 357 359 408 411 418 421 450 458 464 #> [37819] 477 498 504 507 508 515 522 524 533 542 549 568 573 585 590 609 610 615 #> [37837] 623 637 641 653 668 692 693 696 697 706 726 741 742 768 773 775 810 818 #> [37855] 832 846 849   3  13  32  38  42  49  52  59  71  91 110 114 115 117 126 #> [37873] 128 169 170 173 191 203 204 206 211 227 234 259 260 279 286 293 303 306 #> [37891] 312 319 321 322 348 377 383 394 457 462 465 479 498 500 505 506 509 514 #> [37909] 519 522 531 538 548 561 598 600 626 639 646 647 673 675 678 679 683 710 #> [37927] 713 741 742 763 768 771 780 788 790 817 822 831 839 843 845 849 854 858 #> [37945] 859 865  24  27  41  52  75  86 115 118 123 140 172 178 180 186 195 202 #> [37963] 225 232 234 240 248 269 276 277 279 285 286 295 297 302 311 328 338 339 #> [37981] 345 346 365 383 385 421 452 453 475 485 493 499 512 530 531 555 563 569 #> [37999] 578 593 601 602 604 642 643 645 652 661 665 679 685 702 707 713 717 720 #> [38017] 725 742 753 763 769 782 791 793 812 814 821 834 837 838 839 841 867   3 #> [38035]   5  13  18  20  24  48  54  80  88  95 121 130 136 139 145 147 150 151 #> [38053] 160 165 167 186 231 238 251 262 265 274 280 291 294 333 351 353 375 376 #> [38071] 381 382 384 393 422 429 430 472 476 499 500 512 538 554 557 559 566 582 #> [38089] 585 590 626 640 644 649 656 664 679 685 687 690 696 722 733 735 739 763 #> [38107] 764 801 804 808 811 813 817 823 834 839 844 847 854   3   6  12  31  49 #> [38125]  52  64  71  94 112 114 115 118 162 187 195 199 203 206 209 228 235 242 #> [38143] 269 272 281 289 298 309 311 324 328 329 344 371 373 380 381 390 402 403 #> [38161] 418 422 423 428 433 436 439 473 474 483 491 496 517 545 550 555 563 567 #> [38179] 571 593 596 599 608 620 639 643 652 681 712 715 721 728 745 755 772 777 #> [38197] 780 791 819 821 834 837 839 842 853   4  15  24  39  41  46  76  80  86 #> [38215]  94 108 123 130 134 140 154 159 168 190 194 218 237 256 286 304 308 309 #> [38233] 328 344 366 368 370 374 387 404 460 467 473 484 496 518 522 549 558 563 #> [38251] 568 575 578 580 589 598 600 619 643 660 661 662 663 670 672 705 720 722 #> [38269] 727 731 736 757 760 777 782 785 788 803 817 820 826 835 842 847 856 860 #> [38287] 869   2  16  29  32  36  41  59  60  61  86  94  95 109 111 125 133 150 #> [38305] 157 165 168 189 195 223 246 253 254 260 262 273 291 294 295 313 315 326 #> [38323] 339 342 364 400 404 418 426 443 467 468 478 484 486 496 497 516 539 557 #> [38341] 568 570 588 594 596 600 625 629 672 694 730 740 741 746 762 769 773 777 #> [38359] 793 802 806 817 829 843 844 848 862   7  11  25  36  42  44  50  66  67 #> [38377]  68  85  90  93 110 120 126 129 132 139 140 153 155 157 158 166 169 178 #> [38395] 203 206 216 220 248 250 257 284 289 294 297 298 301 316 322 324 331 333 #> [38413] 334 335 345 349 363 370 374 376 400 422 433 443 445 479 497 526 543 552 #> [38431] 571 579 583 587 605 609 629 632 654 671 681 686 702 717 728 736 758 759 #> [38449] 767 778 779 797 802 813 853 857 861 864 866 872 874  25  31  34  49  66 #> [38467]  70  80  92 120 121 134 155 166 167 169 192 203 205 207 246 264 272 284 #> [38485] 286 287 290 298 316 321 326 329 331 335 363 377 378 385 386 392 396 406 #> [38503] 420 424 456 486 489 490 496 510 559 569 574 620 625 628 651 654 660 664 #> [38521] 669 676 679 691 699 702 703 723 735 748 758 761 777 780 790 794 803 814 #> [38539] 823 829 845 848 850 862 869 874   8  20  21  24  38  42  60  81 107 110 #> [38557] 113 130 131 139 159 165 171 175 189 192 193 201 216 232 236 238 243 245 #> [38575] 247 253 267 278 291 321 322 333 357 360 361 362 377 395 399 415 421 423 #> [38593] 478 489 504 507 519 524 528 540 547 552 559 566 593 604 605 606 610 614 #> [38611] 625 642 648 650 657 658 660 662 667 671 674 677 681 688 709 731 741 743 #> [38629] 746 758 796 831 840 847 849 857 876   1  30  31  55  73 106 121 128 145 #> [38647] 150 153 156 157 159 168 170 181 192 202 205 208 213 214 228 236 248 250 #> [38665] 260 264 274 284 295 315 318 323 337 358 361 364 376 379 401 407 412 414 #> [38683] 448 450 459 461 469 470 488 505 529 530 541 548 558 563 576 605 621 624 #> [38701] 642 650 691 700 714 732 738 744 747 749 751 787 788 805 811 816 825 829 #> [38719] 832 836 845 847 862 864 879   0  10  11  12  35  39  42  43  61  64  89 #> [38737]  91 100 108 161 165 177 195 223 233 235 236 241 252 259 260 263 265 272 #> [38755] 286 288 301 339 340 361 377 384 386 397 416 420 424 434 437 438 448 458 #> [38773] 464 468 502 508 538 544 573 600 612 613 622 633 647 661 667 677 681 685 #> [38791] 686 698 700 729 731 736 737 749 752 755 757 761 781 785 799 811 820 826 #> [38809] 832 845 864 868 874 875  17  18  23  41  46  61  77  86  87  90  91  99 #> [38827] 108 129 138 164 167 174 176 179 183 184 185 196 215 248 272 287 298 309 #> [38845] 311 321 331 347 363 370 400 403 412 433 435 439 450 478 482 486 493 509 #> [38863] 520 528 531 533 536 540 542 548 556 590 593 601 613 618 627 640 651 652 #> [38881] 656 662 674 688 721 730 741 746 747 755 766 769 774 776 780 786 787 817 #> [38899] 818 850 867   0  23  58  79  81  82  85  95 111 121 122 127 134 142 143 #> [38917] 159 167 177 181 183 198 204 239 248 249 255 256 284 286 299 304 313 317 #> [38935] 334 344 345 349 353 354 358 368 371 414 420 436 474 496 507 511 517 521 #> [38953] 529 539 542 545 549 552 596 602 603 607 612 614 624 625 635 644 645 646 #> [38971] 662 668 675 677 684 685 689 693 710 713 735 736 739 757 776 783 793 823 #> [38989] 849 867   2  23  39  46  54  64 104 143 157 168 181 200 201 205 215 226 #> [39007] 237 259 261 294 301 313 320 330 347 350 359 372 378 388 389 390 404 407 #> [39025] 416 417 422 424 429 437 438 450 473 480 493 507 519 520 523 528 534 561 #> [39043] 590 602 638 641 644 658 659 670 674 677 690 693 703 704 716 717 719 735 #> [39061] 738 740 743 744 747 756 778 793 800 802 830 855 861 873 879 883   0  23 #> [39079]  37  41  43  58  59  67 119 125 143 146 153 155 160 165 169 170 180 205 #> [39097] 209 217 221 240 243 246 250 278 279 280 284 288 291 294 295 297 302 313 #> [39115] 316 317 322 329 336 373 374 381 420 430 431 457 488 495 501 521 530 546 #> [39133] 559 573 584 586 588 589 592 620 623 625 649 651 657 660 681 684 686 698 #> [39151] 700 722 724 739 746 755 761 774 779 787 789 810 831 837 849 869 877   3 #> [39169]  12  19  21  34  54  65  72  94 113 115 127 128 129 136 141 156 167 170 #> [39187] 183 189 193 219 221 222 232 237 256 259 261 283 288 291 302 331 337 356 #> [39205] 360 365 370 371 373 374 383 389 403 411 414 439 453 459 472 476 485 487 #> [39223] 492 496 515 530 532 537 548 551 568 575 580 588 601 603 605 631 645 646 #> [39241] 658 665 667 681 684 691 704 706 756 770 779 787 798 811 819 829 884  23 #> [39259]  44  48  52  90  95 104 105 109 115 118 134 140 160 168 185 214 223 232 #> [39277] 239 240 242 246 271 273 276 281 293 305 311 319 330 333 341 349 360 367 #> [39295] 383 390 391 403 406 413 428 449 475 491 506 512 517 521 534 535 540 561 #> [39313] 565 569 575 588 596 623 627 641 643 651 687 689 711 712 719 744 747 750 #> [39331] 762 766 768 778 785 791 803 804 806 813 819 826 828 839 852 858 862 874 #> [39349]   3  16  23  24  37  50  55  68  85  88  96  97 114 133 134 137 147 150 #> [39367] 171 179 197 212 228 233 244 246 248 250 258 289 310 327 336 344 347 352 #> [39385] 355 360 364 370 373 377 383 387 391 395 402 403 425 430 435 439 440 458 #> [39403] 495 531 535 553 563 569 586 609 628 631 633 647 652 671 687 709 710 735 #> [39421] 736 741 747 751 765 795 805 810 812 821 827 828 843 847 850  15  17  22 #> [39439]  26  49  54  65  69  73  79  93  94 100 106 133 139 154 156 159 170 173 #> [39457] 183 188 207 209 211 213 214 215 216 220 229 252 259 260 262 272 281 283 #> [39475] 288 304 309 312 315 327 359 360 379 386 396 399 407 436 445 449 458 468 #> [39493] 475 511 512 524 530 548 555 565 569 577 592 594 600 602 603 614 628 659 #> [39511] 663 664 667 668 679 684 685 686 695 706 712 716 741 748 753 758 759 760 #> [39529] 762 765 766 773 784 785 786 788 792 793 795 805 824 845 851 856 861 864 #> [39547]  10  11  18  19  20  35  39  41  62  71  73  75  81  85  88  92  95 102 #> [39565] 106 107 120 144 145 158 169 194 198 205 210 212 219 225 235 236 239 245 #> [39583] 248 258 282 286 294 298 305 321 322 330 345 370 385 389 398 408 420 429 #> [39601] 434 439 448 460 462 471 474 489 496 514 516 518 531 532 548 554 572 577 #> [39619] 580 585 586 601 614 616 646 649 653 657 659 664 680 690 694 698 703 715 #> [39637] 720 723 727 733 748 752 755 778 780 783 788 810 813 845 854 861 882  12 #> [39655]  23  33  77  81  90 113 120 152 156 167 173 180 182 190 204 220 238 253 #> [39673] 254 262 278 284 287 305 306 317 330 341 344 363 371 375 389 405 410 414 #> [39691] 423 426 436 438 444 455 465 471 472 489 499 502 532 553 591 602 615 624 #> [39709] 628 632 641 658 680 688 689 691 692 700 707 722 731 735 744 753 761 763 #> [39727] 790 792 822 829 830 862  41  42  45  47  48  53  60  69  70 108 132 167 #> [39745] 183 189 222 245 253 272 275 295 302 307 308 309 312 315 320 323 330 349 #> [39763] 359 363 382 397 429 444 449 452 455 458 495 499 509 526 537 543 550 559 #> [39781] 580 591 613 629 655 659 676 679 711 724 731 743 744 759 766 777 785 786 #> [39799] 790 795 800 803 823 829 853 857 862 873   3   7  35  60  62  65  70  73 #> [39817]  75  76  91  95 103 110 123 127 129 131 133 135 155 166 168 183 210 219 #> [39835] 229 246 255 272 282 290 308 310 315 320 336 349 359 369 382 383 396 397 #> [39853] 399 429 439 442 443 444 464 468 477 478 483 491 493 500 503 505 515 517 #> [39871] 524 525 526 537 544 545 569 581 588 590 595 598 601 604 617 642 646 650 #> [39889] 657 661 663 674 676 679 718 768 784 811 816 823 859 871 872 874 878 883 #> [39907] 884 888  14  19  27  29  31  38  42  48  56  59  62  64  80 118 121 124 #> [39925] 131 133 140 153 155 158 186 218 225 232 235 261 288 311 313 323 324 343 #> [39943] 353 357 371 374 406 413 430 438 500 507 509 514 516 517 518 527 531 535 #> [39961] 539 565 567 570 586 595 606 608 618 625 631 634 637 640 666 682 685 699 #> [39979] 709 710 718 730 752 760 770 772 774 801 804 812 814 815 816 823 826 828 #> [39997] 861   8  21  22  26  35  51  55  84  88 114 119 120 138 146 152 174 181 #> [40015] 182 189 191 206 213 215 216 223 225 229 234 246 255 257 258 260 261 264 #> [40033] 286 293 298 306 326 337 347 353 407 419 423 442 443 449 461 466 469 477 #> [40051] 482 485 500 504 509 510 547 589 592 597 606 608 615 628 632 635 641 671 #> [40069] 674 681 688 689 701 705 725 734 738 749 750 790 795 818 820 830 831 838 #> [40087] 843 847 855 858 876 889 892   1   6  12  26  37  40  45  54  84 121 123 #> [40105] 135 149 154 173 182 186 198 214 215 222 230 238 255 261 265 275 284 291 #> [40123] 294 309 329 352 387 394 399 400 404 410 412 427 435 447 462 465 471 490 #> [40141] 518 567 581 595 596 639 654 656 682 690 703 706 716 718 736 741 751 756 #> [40159] 761 775 781 796 814 827 828 838 841 844 854 885   4  41  43  45  61  68 #> [40177]  95  96 121 142 180 188 193 196 214 222 232 238 247 248 249 262 272 295 #> [40195] 309 327 329 331 344 382 384 397 402 405 411 416 420 442 449 452 468 483 #> [40213] 500 505 550 554 565 566 571 574 662 675 679 686 688 701 707 752 777 786 #> [40231] 791 798 799 807 830 832 835 865 868 887   2   6   7   8   9  13  33  34 #> [40249]  38  48  59  67  87 166 174 180 182 191 196 238 251 274 280 284 297 298 #> [40267] 336 348 350 353 357 369 375 377 387 388 389 391 392 408 416 425 431 437 #> [40285] 477 481 489 494 496 498 509 516 526 532 537 545 550 563 564 568 615 624 #> [40303] 634 665 668 675 677 687 692 700 712 727 728 730 745 748 770 772 782 790 #> [40321] 794 803 811 835 837 842 843 874 875 889   9  22  38  45  53  64  70 138 #> [40339] 159 160 173 197 201 210 219 221 234 241 251 261 276 310 313 323 324 329 #> [40357] 348 355 371 372 379 386 393 400 426 437 442 449 453 457 460 471 483 505 #> [40375] 510 570 571 574 580 586 595 597 606 612 634 670 688 689 694 697 700 703 #> [40393] 707 714 723 726 744 774 785 789 801 813 821 835 837 838 845 865 866 871 #> [40411] 874 897   6   7  19  38  40  50  54  86  91  98 101 104 108 111 116 158 #> [40429] 179 187 190 195 206 214 224 233 253 257 266 268 274 280 306 321 323 345 #> [40447] 354 364 376 382 384 386 391 398 400 415 421 437 438 443 487 501 504 514 #> [40465] 523 546 568 570 574 577 587 596 612 617 622 627 661 664 682 699 700 702 #> [40483] 704 718 725 731 740 746 764 766 790 795 810 826 834 856 879   6   7  41 #> [40501]  45  57  60  68  71  83  84 113 121 129 138 143 149 153 169 174 181 185 #> [40519] 191 227 231 239 265 276 281 284 295 301 308 312 317 337 338 339 369 372 #> [40537] 382 395 405 418 430 435 437 451 453 460 486 489 498 499 502 503 514 522 #> [40555] 538 540 547 554 583 600 603 645 671 674 684 686 687 695 697 704 710 716 #> [40573] 726 729 745 763 764 774 775 784 803 812 840 851 856 868 889 900  10  14 #> [40591]  23  30  48  49  51  65  70  74  77  96 125 141 147 152 166 168 169 184 #> [40609] 194 196 203 211 213 221 226 245 257 262 283 297 309 314 322 323 324 333 #> [40627] 348 356 359 361 367 375 376 379 383 384 398 409 411 432 440 473 475 480 #> [40645] 491 494 505 518 523 530 537 572 580 581 599 600 619 624 658 677 682 697 #> [40663] 701 708 717 720 724 757 763 782 788 805 807 814 819 824 825 844 867 874 #> [40681] 885 898  13  14  24  28  35  53  58  69  75  76  77  82  98 114 128 144 #> [40699] 153 169 177 187 205 221 232 239 241 256 258 275 287 294 296 299 309 325 #> [40717] 332 341 346 347 355 360 364 366 376 385 401 411 421 425 433 444 457 468 #> [40735] 479 483 486 510 511 534 538 540 543 560 578 593 599 619 638 654 657 673 #> [40753] 685 695 703 711 720 747 751 764 773 775 797 805 823 834 842 852 856 864 #> [40771] 871 893  11  39  40  63  86 102 149 153 157 179 183 185 186 209 213 222 #> [40789] 226 241 249 255 265 268 275 284 285 291 298 330 334 350 375 395 396 406 #> [40807] 408 417 420 437 443 446 447 465 468 472 476 497 501 505 515 516 519 544 #> [40825] 545 561 563 580 583 597 602 623 626 630 638 655 669 681 682 695 697 703 #> [40843] 716 724 725 739 741 758 762 766 768 777 779 786 794 819 838 858 861 882 #> [40861] 896 902   2  16  25  31  33  43  50  55  70  87  92 105 136 139 141 148 #> [40879] 163 186 190 196 198 205 211 225 236 249 254 255 260 273 289 317 321 358 #> [40897] 375 376 378 379 392 402 413 434 447 455 462 465 474 481 496 498 499 528 #> [40915] 529 544 557 576 577 578 587 591 593 598 616 619 626 633 649 663 673 682 #> [40933] 705 724 729 737 739 741 746 771 783 801 802 813 828 834 843 851 859 872 #> [40951] 880 889 892 900 902  11  14  31  38  46  47  59  67  85  93  99 114 115 #> [40969] 127 130 137 144 150 157 169 181 210 216 217 229 253 257 260 269 277 278 #> [40987] 282 284 291 295 306 310 314 316 335 349 377 400 411 414 426 428 434 436 #> [41005] 454 462 479 480 527 540 549 552 569 573 592 598 606 629 630 635 656 665 #> [41023] 690 718 727 750 757 764 766 780 784 790 793 811 834 837 856 858 862 869 #> [41041] 871 882 888 892 895 899 903  10  21  27  28  37  49  55  56  62  64  69 #> [41059]  81  86  94 166 183 192 194 213 223 237 240 251 267 268 269 272 273 292 #> [41077] 313 316 317 320 336 339 344 377 386 394 398 400 413 417 421 429 437 455 #> [41095] 464 472 477 480 483 488 517 533 534 547 553 555 557 559 571 577 579 607 #> [41113] 616 621 622 626 633 635 638 680 681 684 692 694 696 707 712 734 765 769 #> [41131] 797 815 832 848 860 863 864 890 898 903  12  48  53  67  75  82  84 124 #> [41149] 141 147 154 171 183 193 201 206 217 223 232 264 265 269 276 314 315 316 #> [41167] 326 329 364 388 398 401 406 408 419 425 427 436 442 447 455 464 482 491 #> [41185] 493 514 527 532 533 538 540 543 545 553 555 571 581 586 593 631 641 678 #> [41203] 690 694 711 724 760 766 788 806 815 818 825 832 842 848 855 870 883 886 #> [41221] 888  16  21  27  29  33  34  37  52  62 113 119 136 137 156 175 187 202 #> [41239] 203 204 205 212 214 218 222 240 259 261 268 269 281 285 289 297 341 349 #> [41257] 369 378 383 394 408 424 432 433 442 445 482 483 490 492 493 505 507 508 #> [41275] 552 554 557 570 581 585 594 599 605 613 614 628 630 631 632 636 643 646 #> [41293] 651 677 713 725 732 733 759 791 802 815 827 863 879 880 885   8  12  34 #> [41311]  45  47  62  69  71 103 111 112 131 176 181 231 233 239 253 258 276 279 #> [41329] 295 299 342 354 365 402 404 428 463 466 469 485 489 491 505 506 513 514 #> [41347] 521 522 527 552 566 581 597 618 629 636 637 642 645 655 662 664 666 670 #> [41365] 673 685 716 723 727 741 742 749 751 764 773 797 804 809 821 838 851 863 #> [41383] 865 870 871 872 873 887   1   9  18  31  36  40  56  63  69  81  91 100 #> [41401] 109 131 140 168 179 198 199 214 225 234 236 240 263 264 274 283 290 293 #> [41419] 305 324 329 337 343 346 349 359 369 381 383 394 395 399 403 407 409 410 #> [41437] 412 420 428 433 444 451 456 458 459 467 483 494 496 498 515 517 518 520 #> [41455] 546 549 554 568 574 578 585 600 608 619 626 632 635 650 651 659 667 671 #> [41473] 685 709 717 735 743 746 752 762 775 785 798 808 811 817 832 833 836 837 #> [41491] 851 852 860 868 883 890 907 908 910   9  14  25  37  40  50  61  67  74 #> [41509]  76  85 117 151 152 163 185 197 198 204 229 257 261 268 274 279 309 327 #> [41527] 340 345 348 350 352 353 357 414 427 435 436 441 445 450 463 472 473 477 #> [41545] 490 513 514 522 542 562 571 579 592 604 608 619 625 629 637 640 644 648 #> [41563] 652 661 664 675 680 684 685 691 724 726 734 770 777 787 790 794 807 822 #> [41581] 824 835 839 841 842 846 849 901 902 905   3   6  11  16  18  32  69  82 #> [41599] 116 130 135 154 170 191 199 201 209 249 250 284 292 295 318 335 339 341 #> [41617] 362 380 407 438 465 484 496 516 517 526 540 556 612 614 648 650 662 668 #> [41635] 677 679 697 705 706 709 765 767 773 784 786 788 816 832 835 850 874 880 #> [41653] 892 895 905 906   0   6  10  14  25  42  47  52  53  82  93 127 138 146 #> [41671] 151 152 154 170 196 200 204 217 224 227 233 257 259 282 285 286 314 346 #> [41689] 348 356 372 380 404 418 420 433 434 435 455 461 463 477 478 501 532 533 #> [41707] 534 544 557 563 579 600 639 644 646 650 653 658 663 693 710 725 736 737 #> [41725] 739 741 767 784 789 799 801 808 816 822 839 844 846 851 861 883 890 895 #> [41743] 897   0   6  35  39  47  50  51  79  98 123 133 151 153 161 173 185 188 #> [41761] 195 199 212 214 230 237 252 273 282 298 304 343 370 371 379 387 391 398 #> [41779] 425 426 454 462 465 500 515 530 540 544 589 617 630 634 644 647 653 654 #> [41797] 692 698 707 739 746 749 752 775 778 791 816 820 841 852 854 868 881 883 #> [41815] 888 889 896 914   4  13  20  33  34  52  61  74  94  97 115 122 127 134 #> [41833] 159 162 165 190 203 217 218 227 234 239 243 269 273 292 300 310 314 320 #> [41851] 352 381 382 389 407 422 427 442 455 461 465 470 478 481 507 511 515 522 #> [41869] 546 547 556 561 579 582 614 629 630 641 644 645 652 655 664 670 671 677 #> [41887] 678 713 726 733 747 752 760 765 779 780 791 792 801 803 818 825 842 847 #> [41905] 863 866 868 875 877 881 884 886 901 906 913   3  11  60  69  81  97 101 #> [41923] 117 123 130 131 135 150 165 170 207 215 232 264 274 285 313 331 332 360 #> [41941] 378 388 392 400 429 433 442 444 448 452 453 463 468 476 488 496 501 531 #> [41959] 534 553 561 567 575 577 606 635 659 667 711 728 734 747 751 760 785 786 #> [41977] 788 797 804 815 825 845 849 862 891 893 914   0   6  12  23  29  50  59 #> [41995]  75  83  87  96 102 110 129 130 143 147 150 152 163 167 168 177 206 212 #> [42013] 227 233 244 256 279 281 299 304 305 308 323 326 329 334 341 353 363 367 #> [42031] 408 420 424 431 452 458 494 499 501 502 507 537 538 552 558 575 581 586 #> [42049] 604 605 609 627 630 639 651 653 654 667 673 676 685 688 704 706 712 717 #> [42067] 719 727 736 753 760 765 767 769 775 779 791 793 807 824 843 860 877 895 #> [42085] 906 916  15  18  40  53  96 103 112 119 125 128 146 152 156 159 166 175 #> [42103] 184 197 202 207 215 216 220 235 237 249 269 274 318 319 347 349 353 360 #> [42121] 365 388 395 396 398 399 418 441 444 452 458 465 468 490 505 506 538 553 #> [42139] 554 556 562 570 605 635 638 641 646 665 679 683 702 714 726 750 754 766 #> [42157] 786 791 793 799 802 803 822 844 847 853 855 880 883 894 896 901 907 910 #> [42175]   6   8  24  25  28  34  76  84  96 107 131 147 159 165 178 187 196 211 #> [42193] 215 221 223 230 231 235 251 259 261 264 280 286 295 310 323 336 338 340 #> [42211] 351 352 353 373 397 417 430 436 450 452 459 478 485 489 502 511 516 519 #> [42229] 541 542 552 553 560 566 569 587 596 611 618 625 627 642 664 675 687 699 #> [42247] 714 730 731 747 749 768 775 798 804 808 821 826 829 830 832 844 875 892 #> [42265] 912 913   5  13  15  26  31  33  53  59  60  67  69  82  96 108 117 119 #> [42283] 120 136 140 169 170 174 176 181 186 199 200 214 222 235 243 246 247 278 #> [42301] 282 286 314 317 329 337 340 351 352 364 368 370 386 398 401 402 420 421 #> [42319] 424 436 448 456 503 507 510 513 526 549 577 591 615 642 646 648 650 653 #> [42337] 657 659 682 685 686 704 707 709 724 728 729 730 732 733 769 773 774 795 #> [42355] 799 814 820 825 828 838 843 849 868 884 888 893 897 900 903  30  31  32 #> [42373]  41  46  51  96 113 120 156 188 205 223 234 239 251 260 261 290 305 313 #> [42391] 315 317 322 334 340 349 350 357 365 369 372 382 387 396 399 405 410 418 #> [42409] 430 436 448 449 450 451 485 489 492 507 536 566 577 578 593 594 604 618 #> [42427] 626 629 688 694 696 698 700 704 705 715 716 734 737 755 761 764 769 770 #> [42445] 773 784 799 805 847 860 865 901 910 915 920   1   5   6  10  36  45  48 #> [42463]  56  61  85  88  97 110 114 130 135 151 159 179 184 186 192 203 225 233 #> [42481] 236 238 241 247 250 261 262 263 272 273 277 290 309 319 340 343 344 346 #> [42499] 354 358 359 361 369 395 396 400 404 416 436 440 441 442 455 457 469 471 #> [42517] 478 479 491 497 498 505 517 522 538 559 584 591 599 606 643 654 655 684 #> [42535] 699 706 753 755 766 783 784 785 799 803 805 806 807 814 816 824 847 856 #> [42553] 859 877 878 883 887 896 898   1   4  20  21  41  46  63  68  72  76  87 #> [42571] 101 107 118 133 135 153 155 168 174 175 191 206 208 251 264 270 274 292 #> [42589] 294 299 313 314 350 355 371 373 374 409 415 421 443 462 478 484 492 495 #> [42607] 504 513 521 524 535 544 550 560 578 591 593 598 624 634 647 654 655 656 #> [42625] 661 693 710 715 716 719 721 748 749 752 754 766 787 798 812 827 828 830 #> [42643] 836 837 839 841 861 876 909  26  53  63  68  73  74  77  84  89  90  97 #> [42661] 114 115 120 124 130 144 155 159 178 188 202 203 206 207 213 214 218 267 #> [42679] 282 315 320 346 365 371 382 383 385 405 414 425 426 434 464 480 482 483 #> [42697] 485 496 497 506 516 522 526 550 569 576 580 584 587 591 625 643 646 648 #> [42715] 649 650 653 657 658 670 672 673 684 700 704 707 711 721 724 729 736 739 #> [42733] 741 753 754 755 775 788 790 806 814 832 833 854 857 861 885 888  10  11 #> [42751]  17  33  47  61  83  93 117 118 161 177 194 196 198 205 221 242 251 255 #> [42769] 258 278 292 304 323 341 345 346 348 351 352 378 380 383 400 413 420 431 #> [42787] 434 446 455 462 471 479 486 489 497 522 532 570 571 580 606 613 641 642 #> [42805] 653 675 686 706 731 739 764 778 821 827 848 852 853 856 883 886 891 903 #> [42823]   2   7  11  18  33  50  80 119 128 146 149 150 160 163 177 179 186 190 #> [42841] 198 199 205 211 223 230 231 244 267 274 282 291 300 322 323 325 340 351 #> [42859] 358 378 384 402 461 482 505 509 523 536 537 555 560 564 567 581 586 593 #> [42877] 606 631 636 652 672 677 679 681 686 687 702 704 727 728 747 758 776 791 #> [42895] 792 794 801 805 817 843 853 865 866 871 881 885 888 892 899 903 909 915 #> [42913]   0   1   2  19  20  37  45  46  66  78  80 123 141 147 157 178 184 188 #> [42931] 235 238 244 258 275 329 340 344 355 363 373 374 379 380 382 411 415 418 #> [42949] 439 480 499 513 549 552 570 573 579 599 600 602 617 620 629 641 651 654 #> [42967] 669 687 688 700 704 718 726 735 741 748 759 774 796 797 815 821 825 826 #> [42985] 833 834 835 838 858 917   0  10  39  77  81  83  86  94 108 110 126 129 #> [43003] 143 144 146 149 167 178 184 200 233 238 253 255 256 270 273 308 314 321 #> [43021] 331 334 335 373 384 388 396 431 434 441 457 460 466 472 485 492 494 514 #> [43039] 527 545 571 589 617 621 629 632 633 641 644 647 649 656 659 684 685 690 #> [43057] 709 714 731 749 752 781 819 833 846 854 867 877 879 885 891 912 928   7 #> [43075]  33  43  50  59 105 108 118 134 137 140 152 170 171 174 179 184 185 187 #> [43093] 194 196 198 202 210 228 237 238 274 279 299 324 329 330 331 342 345 349 #> [43111] 357 362 363 369 372 384 385 397 406 414 423 424 426 435 453 477 480 486 #> [43129] 489 495 497 507 513 535 541 546 552 576 581 586 588 609 621 627 632 639 #> [43147] 661 665 677 687 693 702 713 738 748 753 757 758 765 782 785 792 798 814 #> [43165] 817 820 821 831 846 863 880 885 892 894 898 917  12  15  17  20  33  46 #> [43183]  78 104 105 132 139 140 141 166 169 170 198 209 212 220 222 225 238 252 #> [43201] 270 296 303 307 314 326 327 335 337 344 354 365 391 394 403 415 420 431 #> [43219] 437 447 455 460 467 501 503 511 521 536 537 564 572 600 631 632 633 642 #> [43237] 662 666 681 686 710 714 715 718 720 738 749 752 762 777 783 797 805 817 #> [43255] 818 824 830 847 870 887 889 911  15  20  31  43  47  50  59  64  84  96 #> [43273] 106 112 127 142 183 185 191 199 202 244 246 249 252 260 268 310 315 324 #> [43291] 339 356 366 371 374 397 406 412 428 433 456 476 478 512 528 532 542 546 #> [43309] 549 554 557 562 574 600 609 612 625 633 637 650 655 658 671 680 684 689 #> [43327] 704 705 714 731 766 767 796 809 811 815 819 844 867 875 877 882 895 896 #> [43345] 904 917 924   3  12  53  56  65  66 107 110 140 154 161 165 173 184 185 #> [43363] 188 197 205 233 241 249 251 267 274 280 334 343 346 348 352 367 369 392 #> [43381] 417 430 436 446 451 457 460 466 468 486 496 516 524 527 529 530 538 544 #> [43399] 553 575 584 590 615 616 625 645 658 678 684 688 694 710 724 765 770 774 #> [43417] 788 797 803 807 819 856 877 879 881 882 887 892 921 922   3  16  30  57 #> [43435]  71  73  74  77  81  91  92  93 104 116 127 129 131 139 142 176 178 180 #> [43453] 184 214 218 222 232 247 251 270 282 307 313 324 331 346 354 367 370 384 #> [43471] 403 413 416 420 430 434 443 462 467 479 487 490 498 502 505 506 507 519 #> [43489] 520 521 530 536 545 565 566 576 600 610 619 620 633 649 654 658 666 673 #> [43507] 674 703 721 735 756 758 777 803 804 810 817 821 822 823 829 830 837 838 #> [43525] 840 854 860 863 864 872 873 888 911 917 925   4  19  36  60  73  80  89 #> [43543] 108 119 128 141 149 151 166 177 188 195 199 204 215 227 232 237 246 260 #> [43561] 261 268 272 307 309 311 320 337 357 367 383 390 397 398 401 410 414 423 #> [43579] 433 444 454 455 519 526 536 550 553 561 562 577 579 584 604 608 609 615 #> [43597] 632 639 641 646 668 673 675 680 691 697 712 713 738 741 765 772 778 794 #> [43615] 801 813 815 817 839 846 850 854 876 907 928 931   8  19  29  40  51  53 #> [43633]  55  58  60  68  79 100 104 116 133 135 138 140 144 149 167 216 218 227 #> [43651] 232 242 257 269 277 284 304 323 350 355 357 363 390 397 404 418 420 432 #> [43669] 447 468 477 505 526 528 551 557 569 570 578 579 582 589 600 601 603 613 #> [43687] 619 623 627 628 629 633 649 656 662 665 668 677 713 719 725 728 730 743 #> [43705] 756 764 778 779 786 799 810 814 838 860 861 864 876 877 884 886 899 909 #> [43723] 910   2  10  22  37  38  39  41  66  69  78 115 119 120 130 156 193 217 #> [43741] 218 226 228 249 261 267 272 276 277 278 303 305 320 326 330 332 333 338 #> [43759] 351 369 370 376 386 391 413 418 428 448 466 483 500 528 551 564 565 569 #> [43777] 591 605 624 627 664 677 687 690 701 724 727 732 733 746 775 779 785 788 #> [43795] 798 803 818 822 829 831 849 858 859 864 866 880 887 920 929 930 935   4 #> [43813]  12  14  31  44  63  74  79  80 113 121 129 133 134 135 144 151 152 168 #> [43831] 175 208 218 220 221 227 233 235 243 245 254 259 261 269 275 296 318 334 #> [43849] 338 345 348 364 365 369 378 386 406 432 439 462 474 476 481 511 521 527 #> [43867] 535 550 564 568 579 581 595 597 599 607 611 617 619 636 645 673 706 710 #> [43885] 715 730 748 767 768 774 791 796 801 819 846 858 870 891 916 919 937  24 #> [43903]  45  48  54  55  63  75  99 132 159 167 172 177 188 195 215 219 220 221 #> [43921] 237 241 252 279 287 291 305 328 331 344 357 358 359 372 374 381 384 387 #> [43939] 390 399 420 439 440 465 468 501 513 519 534 556 570 608 619 647 657 684 #> [43957] 708 711 718 726 732 738 778 801 822 844 877 899 907 909 910 930   6  21 #> [43975]  40  49  57  58  61  63  69  86 120 127 129 149 151 159 171 175 182 185 #> [43993] 187 200 206 211 243 246 258 259 262 266 272 309 310 338 348 374 383 389 #> [44011] 423 427 433 473 474 483 496 500 503 505 508 570 575 587 611 619 621 625 #> [44029] 641 646 647 648 659 664 679 691 696 719 779 792 795 808 819 822 836 841 #> [44047] 843 844 856 859 866 872 876 891 924  13  25  45  66  76  79  99 111 117 #> [44065] 132 139 145 148 163 188 198 203 204 209 239 241 255 256 269 271 276 287 #> [44083] 309 323 329 332 336 342 358 361 363 370 373 381 383 395 400 409 414 447 #> [44101] 452 453 458 464 492 504 511 516 520 529 537 541 548 555 579 583 592 605 #> [44119] 617 618 619 632 637 662 666 674 679 682 684 697 712 721 737 749 758 762 #> [44137] 792 804 808 812 838 841 855 872 879 880 884 895 921 939   6  13  29  35 #> [44155]  41  48  55  58  85  88  97 102 134 138 154 161 162 177 183 208 210 213 #> [44173] 220 224 225 228 230 232 259 261 269 270 278 301 303 316 317 320 335 344 #> [44191] 354 376 384 388 412 415 420 421 430 434 444 453 470 482 533 538 545 550 #> [44209] 552 577 583 590 591 596 608 633 711 719 741 755 756 762 765 773 776 789 #> [44227] 804 809 819 824 843 867 874 883 898 902 915 918 928 931 937   1   8  13 #> [44245]  24  32  36  44  55  66  85 100 103 109 111 116 118 127 130 155 159 161 #> [44263] 170 171 197 214 227 229 231 235 247 259 270 272 280 284 285 295 297 299 #> [44281] 311 312 320 324 335 343 346 348 371 378 415 417 419 422 437 438 439 440 #> [44299] 445 449 451 453 458 468 470 472 490 493 503 506 524 539 546 570 575 589 #> [44317] 604 617 620 642 645 666 674 696 729 734 740 745 779 794 798 805 809 824 #> [44335] 826 842 849 851 854 858 862 877 901 902 904 907 929   0  13  15  36  37 #> [44353]  41  57  65  76  78 100 106 133 134 145 162 165 179 182 189 198 204 212 #> [44371] 219 224 225 226 229 231 232 249 254 283 286 287 292 296 297 298 308 324 #> [44389] 325 345 346 348 352 360 362 366 394 413 421 423 429 444 481 504 506 513 #> [44407] 531 534 537 544 560 569 601 628 640 642 649 653 688 689 705 707 711 715 #> [44425] 731 732 782 805 816 828 829 835 852 873 878 895 920 937 942   1   4  11 #> [44443]  32  36  37  57  66  67  99 127 128 132 142 144 183 196 206 208 222 235 #> [44461] 237 246 248 252 258 267 268 270 283 285 286 319 345 354 371 390 407 408 #> [44479] 411 416 421 450 453 457 478 482 499 500 506 513 541 545 554 564 577 582 #> [44497] 584 592 627 632 670 674 675 681 683 689 697 706 708 711 712 717 726 728 #> [44515] 738 748 755 764 765 766 767 791 795 803 806 816 818 820 831 833 837 838 #> [44533] 843 847 865 875 876 887 894 899 913 917 920 931 938   9  12  26  27  29 #> [44551]  37  61  86  98 109 133 136 137 147 176 178 188 190 204 212 233 237 248 #> [44569] 249 250 251 254 255 262 264 269 274 292 324 325 336 340 359 376 401 412 #> [44587] 415 418 422 424 452 459 474 527 533 535 540 547 569 579 606 607 613 622 #> [44605] 623 640 655 671 690 698 714 722 724 727 729 738 742 747 748 765 774 775 #> [44623] 790 797 801 816 821 823 828 840 861 864 870 875 885 886 897 913 929  10 #> [44641]  19  23  27  31  39  51  66  76  87 101 111 118 132 141 144 149 152 180 #> [44659] 184 185 189 198 200 212 214 221 228 244 247 262 267 288 297 300 301 311 #> [44677] 318 319 349 356 377 380 401 424 434 442 449 456 472 478 479 482 486 494 #> [44695] 500 513 520 521 526 534 545 548 551 578 582 598 614 619 623 628 631 645 #> [44713] 652 658 667 669 691 700 701 707 713 727 754 757 767 784 785 798 805 817 #> [44731] 838 849 852 853 856 874 877 883 885 889 892 913 919 923 930   1   3   9 #> [44749]  25  44  49  54  68  89  94 108 121 123 160 180 182 185 193 195 199 201 #> [44767] 207 217 238 242 247 257 258 269 294 297 312 370 374 380 394 408 419 427 #> [44785] 433 450 458 478 487 488 492 493 496 508 509 522 544 552 563 578 581 589 #> [44803] 608 627 634 644 648 653 662 666 695 719 732 751 768 772 789 801 805 821 #> [44821] 840 842 866 875 883 893 894 895 917 926 927 945   1  14  15  44  55  60 #> [44839]  67  70  82  92  99 102 112 113 117 127 134 137 142 143 151 168 180 196 #> [44857] 205 226 234 249 258 275 288 293 296 302 314 315 330 335 336 339 342 346 #> [44875] 352 355 365 378 383 389 404 420 435 449 469 478 483 494 528 532 547 585 #> [44893] 593 595 607 609 637 652 655 683 689 707 714 716 743 750 779 781 801 802 #> [44911] 841 842 864 875 885 887 900 902 927 934  25  33  42  52  67  73  79  88 #> [44929]  89 108 119 132 136 138 146 153 167 175 178 184 193 203 207 217 225 235 #> [44947] 254 258 268 306 311 323 329 333 350 351 358 365 384 386 393 395 421 461 #> [44965] 463 481 485 495 504 508 533 543 544 570 574 583 592 599 600 608 611 612 #> [44983] 620 636 637 651 669 675 683 690 692 693 700 735 749 758 762 763 783 784 #> [45001] 788 793 796 809 831 840 844 853 858 892 900 910 923 924 944   4  12  32 #> [45019]  36  37  38  69  77  81 107 115 116 124 132 133 139 143 161 165 166 169 #> [45037] 176 177 197 224 242 244 251 264 277 315 339 343 347 358 381 384 385 409 #> [45055] 412 419 435 445 451 453 467 469 482 487 520 543 557 563 564 572 576 597 #> [45073] 598 599 605 607 615 620 632 640 643 644 649 662 665 675 677 679 680 681 #> [45091] 695 711 712 713 716 718 728 733 736 738 745 755 761 763 766 779 783 789 #> [45109] 790 792 794 796 823 825 835 842 848 858 861 863 866 873 878 879 888 891 #> [45127] 894 906 926 932 935 938  24  27  39  50  63  71  79  92  96 102 106 118 #> [45145] 140 174 177 183 210 217 218 221 227 246 263 275 287 292 295 306 308 316 #> [45163] 320 323 340 343 348 358 393 404 408 433 442 443 454 481 490 492 497 504 #> [45181] 511 517 526 527 539 545 547 571 573 590 591 617 634 649 672 694 696 702 #> [45199] 705 716 718 721 723 731 736 742 769 775 778 786 787 805 823 830 831 846 #> [45217] 855 856 858 861 868 900 901 905 919 941 947 949  15  18  29  47  51  53 #> [45235]  55  56  63  70  79  91  97  99 109 110 128 139 144 162 167 173 188 207 #> [45253] 224 232 266 272 273 288 298 303 315 336 345 350 354 356 364 365 369 385 #> [45271] 390 404 414 416 424 433 453 454 476 480 482 499 504 530 537 547 554 555 #> [45289] 558 562 563 574 586 598 608 645 653 665 669 678 681 690 700 721 734 738 #> [45307] 752 777 778 784 788 792 800 816 825 844 856 862 863 865 867 877 886 891 #> [45325] 900 904 918 919 949 951   4   8  17  20  25  33  34  35  50  52  63  76 #> [45343]  80  91  92  94 101 125 126 135 143 145 155 164 171 172 173 175 188 194 #> [45361] 230 234 242 262 281 284 285 290 293 307 314 334 347 351 353 356 363 377 #> [45379] 389 394 416 420 432 435 443 446 457 463 466 467 482 483 489 498 502 517 #> [45397] 519 532 551 566 576 578 580 581 590 593 599 610 627 630 638 642 665 685 #> [45415] 714 735 740 752 774 782 801 815 839 848 850 864 885 893 895 906 921 927 #> [45433] 932 939 943   3   9  15  25  28  32  55  65 101 115 117 131 138 149 152 #> [45451] 155 168 178 179 185 195 205 224 237 240 245 265 272 281 295 318 324 330 #> [45469] 336 343 360 364 370 380 408 411 422 428 438 454 455 463 467 501 503 505 #> [45487] 520 531 539 563 570 572 579 580 588 591 594 607 610 632 641 645 656 659 #> [45505] 683 687 688 692 694 705 724 740 759 777 787 788 814 818 824 828 835 869 #> [45523] 876 888 890 898 912 917 936 940 945  13  40  47  48  53  76  93 115 144 #> [45541] 146 178 183 202 240 249 252 256 283 295 300 302 305 307 313 319 327 334 #> [45559] 336 368 382 383 413 425 426 432 436 444 446 463 469 474 477 478 483 506 #> [45577] 523 527 543 579 580 590 591 599 601 604 610 633 649 666 670 694 696 717 #> [45595] 750 794 817 824 833 834 845 854 863 874 878 892 894 919 952   2  29  36 #> [45613]  41  56  61  82  86 104 124 132 137 173 175 182 184 215 221 228 235 260 #> [45631] 267 269 280 293 294 303 305 315 331 334 338 345 346 389 401 404 410 437 #> [45649] 458 467 472 478 484 486 487 494 514 518 522 525 541 547 565 577 614 623 #> [45667] 626 631 643 647 649 656 657 678 704 708 754 757 773 784 802 807 825 826 #> [45685] 837 852 863 874 877 910 924 928 936 948   0  15  21  39  49  60  74  90 #> [45703]  97 148 162 165 170 196 200 206 207 208 220 221 244 261 301 319 325 328 #> [45721] 358 375 392 405 415 420 456 463 466 469 485 509 513 515 522 524 525 527 #> [45739] 541 549 551 558 581 588 589 590 603 604 606 611 613 616 642 648 650 667 #> [45757] 669 673 682 703 710 719 790 797 799 839 841 869 870 885 887 894 898 909 #> [45775] 911 929 935 936 942 946 950 953 955 957   6  16  33  38  80  96 108 134 #> [45793] 148 157 175 209 220 222 227 229 243 259 263 268 274 278 314 329 351 375 #> [45811] 396 433 435 437 443 459 463 469 493 517 527 528 535 541 569 577 586 590 #> [45829] 610 615 623 676 683 684 701 722 727 734 737 752 762 764 780 787 792 797 #> [45847] 806 827 832 833 839 849 860 868 874 878 885 889 893 900 917 929 934 939 #> [45865] 954   8  25  50  58  91 100 119 148 170 181 191 207 222 228 230 236 241 #> [45883] 243 258 259 266 268 273 275 280 310 317 319 337 340 365 378 390 391 423 #> [45901] 427 439 450 460 504 515 524 528 537 561 563 566 575 650 660 664 666 669 #> [45919] 677 687 690 696 697 702 707 716 718 721 723 733 736 753 777 784 785 791 #> [45937] 796 806 810 834 843 848 859 874 882 905 909 910 928 954  15  22  37  38 #> [45955]  41  50  53  68  71  73  74  76  91 123 128 129 138 141 160 191 193 202 #> [45973] 225 251 254 256 267 280 282 284 295 296 299 328 330 362 367 370 393 409 #> [45991] 417 421 428 429 436 440 476 490 500 503 506 532 553 564 579 580 581 593 #> [46009] 603 606 608 609 631 644 646 664 677 682 731 735 766 792 805 807 808 813 #> [46027] 820 827 840 856 858 875 881 894 895 896 898 905 906 908 916 947 953 954 #> [46045] 960  26  35  40  43  90  99 106 122 126 160 165 176 180 181 201 203 226 #> [46063] 230 237 270 273 277 281 284 289 293 295 300 304 307 308 309 323 329 338 #> [46081] 339 343 345 355 386 387 403 433 437 461 504 508 524 531 557 616 630 634 #> [46099] 653 660 663 672 684 694 696 703 723 724 725 729 742 755 757 765 794 811 #> [46117] 815 824 825 831 840 850 854 860 870 875 877 894 930 933 944 947 958   7 #> [46135]  12  15  21  44  45  48  61  74  75  77  84  86 102 132 137 140 154 157 #> [46153] 163 164 168 178 184 189 190 197 204 212 227 236 245 249 251 254 280 287 #> [46171] 293 297 300 308 315 319 325 357 368 382 384 406 407 437 438 446 448 449 #> [46189] 453 477 489 496 512 516 521 529 537 540 595 601 634 652 669 672 684 685 #> [46207] 705 729 731 750 755 758 760 791 800 825 867 872 899 915 925 931 932 933 #> [46225] 936 947 951 955 961   3   4   7  20  28  34  37  58  75  76  77  90  91 #> [46243]  96  98 101 118 119 121 132 133 135 143 147 148 190 211 214 231 249 250 #> [46261] 253 260 263 269 272 274 278 290 324 332 336 338 347 353 356 365 373 375 #> [46279] 412 416 417 433 437 455 456 467 469 491 498 543 559 560 561 566 582 583 #> [46297] 584 603 607 610 619 641 649 683 684 685 686 689 694 699 702 716 745 750 #> [46315] 759 765 771 785 790 808 809 816 822 824 825 837 848 855 908 915 924 931 #> [46333] 944 948 949 950 961   1   3  17  18  33  44  52  82  83  90 117 127 130 #> [46351] 141 153 156 161 163 165 166 181 182 199 209 223 243 291 295 300 319 346 #> [46369] 348 351 354 357 380 388 408 415 416 427 431 438 448 450 458 472 477 481 #> [46387] 499 501 521 523 530 536 559 582 585 594 599 607 625 634 635 649 651 655 #> [46405] 658 661 665 685 689 690 697 709 721 727 729 733 740 741 746 760 761 773 #> [46423] 779 780 783 792 810 814 816 859 860 866 877 881 912 913 942 944 953   5 #> [46441]   7  17  42  49  66  79  85  94  99 101 105 113 122 124 139 143 144 150 #> [46459] 182 187 198 201 203 206 221 230 243 246 258 261 284 307 316 322 333 339 #> [46477] 341 345 351 362 374 389 398 402 421 433 434 439 447 465 475 509 511 515 #> [46495] 518 521 532 537 540 576 582 602 605 623 624 630 654 658 659 660 682 698 #> [46513] 699 706 725 740 746 748 751 757 759 782 784 792 801 802 806 821 846 849 #> [46531] 850 853 856 858 871 883 888 899 905 926 936 945 954  15  28  35  46  66 #> [46549]  67  76  80  90 129 137 170 186 192 198 204 208 210 217 223 242 252 261 #> [46567] 266 272 273 310 334 337 372 390 391 397 408 417 422 426 434 471 489 503 #> [46585] 513 564 576 634 635 657 663 701 703 711 716 722 743 746 773 776 778 781 #> [46603] 785 788 799 809 817 819 824 825 826 833 849 852 854 855 858 881 897 913 #> [46621] 917 949   3   7  23  76  79  93  94 120 131 149 163 166 169 175 197 198 #> [46639] 199 204 210 223 226 257 261 265 267 279 284 290 292 300 318 329 333 340 #> [46657] 344 392 408 416 417 420 423 426 439 446 448 450 454 455 458 478 485 511 #> [46675] 516 576 599 632 639 645 677 683 691 705 731 745 750 755 765 766 784 788 #> [46693] 790 796 799 802 810 817 822 836 838 844 852 855 860 865 870 882 894 910 #> [46711] 928 931 936   6  24  34  36  46  50  69  80  92 100 118 126 143 144 149 #> [46729] 166 168 172 174 197 202 212 219 233 239 241 243 247 265 268 274 284 293 #> [46747] 299 302 303 314 323 324 327 338 341 343 348 356 370 374 376 378 406 501 #> [46765] 518 526 544 559 565 569 581 589 591 596 600 601 619 633 643 666 679 687 #> [46783] 690 691 696 698 701 702 724 729 735 769 777 812 823 824 826 829 835 838 #> [46801] 841 842 865 870 878 883 890 913 918 922 927 929 938 942 956   2   8  20 #> [46819]  26  44  46  59  63  66  74  90  94  97  98 113 123 124 149 164 175 181 #> [46837] 193 202 206 215 221 236 243 251 260 266 268 293 298 299 311 314 318 364 #> [46855] 388 390 411 416 422 438 440 443 446 452 456 468 479 496 498 520 522 529 #> [46873] 537 547 550 554 555 559 570 574 580 590 601 622 632 640 643 653 654 671 #> [46891] 672 700 701 712 737 743 768 769 773 782 798 803 806 808 818 835 843 862 #> [46909] 863 892 893 896 908 914 916 937 939 953 957 961 963 966   1   2  31  47 #> [46927]  53  68  71  73  83  94  95 106 114 117 141 143 152 158 162 168 169 190 #> [46945] 218 247 251 267 271 292 301 305 339 349 350 351 354 364 373 375 417 425 #> [46963] 442 443 446 447 470 484 488 505 508 512 549 550 560 562 578 580 583 598 #> [46981] 602 614 621 623 625 637 639 644 654 679 686 717 723 728 733 734 736 748 #> [46999] 786 800 803 811 815 818 819 829 837 838 859 869 879 885 891 900 914 918 #> [47017] 923 925 935 937 953 966 968 969   0   3  18  25  28  29  39  57  60  76 #> [47035]  82  85  86  95 107 118 119 122 130 143 148 173 178 193 195 232 239 263 #> [47053] 270 272 280 282 318 326 339 354 363 364 384 414 419 422 424 426 432 434 #> [47071] 437 443 445 451 452 453 457 470 474 486 499 515 530 538 539 552 562 571 #> [47089] 574 586 590 621 624 626 644 658 664 665 666 675 698 700 725 740 742 744 #> [47107] 747 748 754 764 770 781 808 809 816 818 831 835 840 842 844 845 859 883 #> [47125] 884 897 901 905 922 924 943 962 967   9  30  35  63  71  99 101 103 107 #> [47143] 140 143 185 191 209 225 240 247 261 264 274 284 290 293 296 304 307 317 #> [47161] 320 328 330 362 372 388 395 405 414 425 439 461 493 514 516 520 525 527 #> [47179] 528 537 556 561 598 599 603 604 607 630 660 661 666 699 700 707 750 760 #> [47197] 762 774 778 780 789 805 808 823 826 835 845 852 891 906 913 943 959 962 #> [47215]   5   6  13  18  23  42  47  51  55  60  61  71  75  96  98 108 109 116 #> [47233] 127 150 207 230 233 237 258 265 300 318 336 365 384 393 407 410 418 420 #> [47251] 442 445 447 463 484 503 512 521 538 539 542 558 560 562 569 570 572 577 #> [47269] 579 587 591 592 593 599 601 617 645 649 660 672 694 702 711 735 768 769 #> [47287] 771 776 785 786 790 791 814 825 837 849 861 885 891 903 909 910 911 925 #> [47305] 946 950 960 965 966   1   7  13  19  36  46  63  80  90 125 141 153 154 #> [47323] 172 187 191 208 210 211 213 230 234 247 250 263 288 298 340 344 350 351 #> [47341] 352 357 367 373 377 396 399 407 408 428 434 438 439 460 464 485 501 503 #> [47359] 508 520 532 536 552 554 572 577 580 582 589 604 607 615 628 641 651 652 #> [47377] 675 690 695 708 710 715 729 733 734 741 752 764 792 793 806 829 842 852 #> [47395] 863 866 869 873 879 888 893 895 916   6  32  37  42  60  67  97  98  99 #> [47413] 114 129 130 146 149 151 158 167 169 177 185 187 189 197 210 215 242 258 #> [47431] 265 267 271 273 284 293 299 311 329 332 347 353 385 396 397 415 418 457 #> [47449] 459 472 473 476 478 482 491 503 504 508 509 518 521 535 543 548 552 563 #> [47467] 569 581 583 608 653 654 681 682 687 696 698 699 700 708 720 725 727 748 #> [47485] 760 768 774 779 781 793 810 818 823 825 829 838 846 848 861 868 874 880 #> [47503] 893 895 899 913 933 934 968   3   4  18  25  65  66  70  76  88  95  96 #> [47521]  99 107 123 125 129 130 134 140 141 146 173 175 177 182 186 216 237 239 #> [47539] 262 267 273 276 301 338 340 356 366 367 385 392 396 414 434 452 470 476 #> [47557] 482 509 514 524 529 530 538 544 545 549 551 554 556 562 569 572 578 585 #> [47575] 588 594 595 599 600 618 619 634 638 639 642 650 653 662 678 680 686 690 #> [47593] 708 716 733 736 744 761 762 770 773 775 780 791 813 826 828 836 841 854 #> [47611] 858 862 867 873 889 891 892 897 907 922 934 952 957 958 964   3   4  10 #> [47629]  41  44  45  58  62  69  73  80  94  95 117 119 123 128 129 155 156 167 #> [47647] 168 172 206 208 231 241 243 248 262 267 268 274 288 309 319 331 337 338 #> [47665] 353 354 364 368 377 381 387 402 434 450 484 485 493 499 500 504 514 515 #> [47683] 535 544 567 583 590 593 605 617 637 655 660 677 681 682 692 693 697 708 #> [47701] 715 724 726 739 743 758 773 807 816 817 823 842 848 863 866 876 887 892 #> [47719] 901 913 915 919 922 926 943 952 962 964 970   0   2  17  19  21  39  41 #> [47737]  53  58  75 125 137 138 142 145 149 152 155 162 170 178 180 207 211 219 #> [47755] 227 228 231 244 246 269 272 281 282 285 323 330 333 342 345 347 349 392 #> [47773] 407 411 414 415 418 420 435 446 452 461 471 475 476 496 497 499 502 509 #> [47791] 512 534 544 547 553 570 584 606 614 615 622 626 647 653 656 667 702 713 #> [47809] 717 718 724 728 730 732 743 756 774 786 796 802 815 822 826 829 831 834 #> [47827] 838 841 845 870 873 884 891 913 921 942 944 950 953 962 964 969   2   3 #> [47845]   7  12  21  25  32  49  53  64  74  81  93  98 115 116 119 124 127 142 #> [47863] 145 156 164 171 178 183 186 197 201 214 215 234 236 248 261 262 272 274 #> [47881] 281 297 310 321 328 330 342 368 369 381 383 387 399 410 412 428 441 457 #> [47899] 466 478 483 502 530 536 547 575 579 585 591 593 602 603 608 615 622 658 #> [47917] 689 713 714 715 719 734 738 756 757 797 801 811 815 821 839 841 849 875 #> [47935] 902 906 927 933 949 951 952 972 979   6  16  25  37  39  54  56  72 112 #> [47953] 133 155 160 168 170 171 179 184 202 206 218 219 225 228 229 235 239 248 #> [47971] 262 265 267 286 306 330 331 336 343 347 351 359 363 378 384 406 408 451 #> [47989] 461 465 467 472 477 489 501 509 545 550 567 573 575 590 601 613 615 618 #> [48007] 621 626 634 647 649 673 689 691 693 697 709 710 716 719 724 726 730 733 #> [48025] 740 745 750 769 797 830 834 843 846 852 860 861 867 870 871 874 877 881 #> [48043] 887 904 905 922 946 953 965 966 971 974   0   4  10  23  24  38  45  67 #> [48061]  74  75  95  96 103 111 134 147 149 164 180 197 202 231 245 259 298 306 #> [48079] 311 321 366 372 374 378 379 401 412 431 446 449 451 454 468 470 483 491 #> [48097] 508 518 550 555 557 565 570 574 577 578 593 597 601 603 615 630 640 641 #> [48115] 652 655 662 664 671 675 729 741 748 749 759 767 774 787 796 800 826 829 #> [48133] 830 860 869 875 883 894 895 898 912 913 928 931 936 939 943 949 954 966 #> [48151] 970   4  11  20  21  24  36  38  39  41  42  47  52  62  81  89  99 109 #> [48169] 112 148 155 170 202 212 220 222 232 267 275 285 289 295 302 306 333 336 #> [48187] 350 354 369 370 381 390 399 409 422 425 427 433 442 452 459 479 489 493 #> [48205] 542 549 559 563 575 576 585 622 658 680 681 687 695 697 719 723 726 734 #> [48223] 736 744 754 761 765 778 782 802 810 831 833 836 840 844 863 864 901 907 #> [48241] 910 934 936 939 979 981  15  22  33  37  48  57  59  91 107 116 130 138 #> [48259] 150 155 164 174 189 195 198 220 235 239 241 243 252 257 260 273 274 275 #> [48277] 281 284 298 300 303 308 316 318 323 341 359 372 378 379 382 386 395 396 #> [48295] 405 416 425 427 430 433 446 451 482 486 493 497 521 538 539 541 544 547 #> [48313] 552 555 556 577 587 590 602 620 622 644 647 662 663 669 678 698 717 718 #> [48331] 720 721 723 728 736 749 767 778 787 831 838 858 874 877 883 884 885 894 #> [48349] 906 913 914 916 922 923 933 954 957 978 982   3  20  35  39  48  53  54 #> [48367]  62  67  88 105 112 114 117 152 179 188 191 192 205 206 218 238 239 241 #> [48385] 242 244 249 264 271 278 279 301 318 320 323 327 329 341 371 379 403 409 #> [48403] 411 415 422 428 429 430 445 469 472 475 476 501 504 505 508 528 535 543 #> [48421] 554 559 563 572 576 580 584 585 600 603 622 659 680 700 704 707 710 716 #> [48439] 717 729 749 750 756 768 786 857 885 904 907 911 922 927 930 937 940 954 #> [48457] 981  12  24  31  33  36  39  53  60  62 102 109 132 140 165 167 182 186 #> [48475] 195 216 277 307 313 318 323 325 326 353 373 374 427 446 455 459 461 483 #> [48493] 507 526 545 551 553 566 569 574 575 580 582 583 633 634 658 664 666 693 #> [48511] 698 730 738 740 742 751 752 763 773 780 787 819 820 835 842 843 849 851 #> [48529] 867 870 875 880 894 899 900 907 911 926 947 948 965   7  14  16  24  28 #> [48547]  31  41  47  59  61  63  65  72  79  95  96 107 113 120 123 125 126 140 #> [48565] 160 161 177 178 184 187 202 207 214 218 234 240 251 262 266 273 278 284 #> [48583] 291 300 325 326 341 350 356 377 417 424 427 433 442 446 453 459 463 484 #> [48601] 485 492 496 535 544 551 553 555 564 574 583 587 595 604 606 607 608 609 #> [48619] 614 620 639 653 658 659 688 691 728 735 740 751 770 794 822 823 825 834 #> [48637] 842 845 862 863 880 891 906 924 935 942 946 969 983 985  26  35  46  48 #> [48655]  50  56  57  67  74  79  83  91 108 114 130 135 151 176 199 216 217 227 #> [48673] 228 235 239 261 281 282 301 302 320 322 324 328 345 366 372 381 383 390 #> [48691] 393 395 413 424 431 440 453 498 511 528 529 534 549 552 554 558 578 579 #> [48709] 590 592 620 630 635 639 654 667 673 690 702 717 732 734 750 768 775 777 #> [48727] 780 783 785 812 834 839 845 847 853 873 879 884 902 919 920 926 928 943 #> [48745] 980   5  10  16  27  29  47  62  74  77  91 101 125 130 151 159 179 193 #> [48763] 194 201 227 231 240 252 253 254 257 266 268 271 293 295 302 306 327 332 #> [48781] 353 374 386 390 393 396 408 417 419 423 453 455 460 462 469 483 488 501 #> [48799] 508 574 583 586 594 600 618 624 629 630 632 641 643 645 677 678 692 709 #> [48817] 710 715 745 752 753 759 770 772 775 779 783 791 792 804 812 836 845 852 #> [48835] 853 855 877 885 896 900 903 934 964 965 968 969 973 988   2  10  11  28 #> [48853]  36  43  46  49  72  74 105 115 130 142 151 182 202 205 240 255 272 292 #> [48871] 301 319 324 341 346 351 352 356 380 382 387 406 434 466 497 502 509 514 #> [48889] 515 533 537 540 547 552 555 577 582 591 593 594 603 616 643 645 646 652 #> [48907] 653 667 678 679 697 700 709 747 752 755 762 763 764 770 776 795 802 809 #> [48925] 819 821 867 886 888 895 898 909 914 920 922 928 938 953 970 988   2  26 #> [48943]  52  71  85  96 116 131 132 137 138 154 158 166 175 187 208 223 233 237 #> [48961] 246 253 279 281 293 297 301 311 318 325 327 339 347 357 378 383 402 412 #> [48979] 447 463 465 470 488 492 494 495 507 512 515 529 539 541 548 550 557 571 #> [48997] 578 582 611 619 624 628 632 634 638 644 649 658 667 669 677 685 697 704 #> [49015] 705 706 723 727 728 730 736 737 744 747 768 773 780 789 799 810 813 818 #> [49033] 819 830 852 854 895 919 922 925 934 936 950 958 962 966 969  11  16  49 #> [49051]  53  70  78  79  93 113 130 133 139 148 161 164 178 184 240 242 249 256 #> [49069] 260 282 288 292 293 297 298 300 306 311 315 316 339 341 353 359 380 382 #> [49087] 411 419 444 448 465 472 487 491 504 514 526 531 533 554 573 583 594 613 #> [49105] 626 653 666 675 676 682 684 704 707 714 734 735 738 739 740 745 767 770 #> [49123] 776 802 815 822 831 846 856 860 877 886 935 937 943 949 983  21  23  25 #> [49141]  36  44  47  54  59  73  74  75  77  80  84  87 101 112 118 122 124 126 #> [49159] 130 167 178 198 201 215 219 226 227 231 234 242 248 249 254 256 266 289 #> [49177] 298 303 309 310 313 324 330 334 338 341 360 364 374 396 404 406 409 422 #> [49195] 429 435 483 489 495 496 519 537 545 547 548 549 555 579 597 612 620 624 #> [49213] 630 643 646 652 664 667 673 689 695 703 704 728 742 743 771 778 794 801 #> [49231] 821 836 840 843 868 885 889 895 897 902 921 932 946 951 962 971 978 988 #> [49249] 992   0   8  13  18  28  44  73  79  83  89  90  95 117 127 136 142 151 #> [49267] 152 153 156 164 166 186 187 206 211 236 246 262 267 273 301 308 313 316 #> [49285] 333 341 347 362 376 377 379 382 385 386 395 408 412 429 431 432 439 456 #> [49303] 457 493 495 503 511 518 519 522 534 541 556 562 567 577 611 620 624 625 #> [49321] 626 627 637 649 655 658 681 686 699 705 710 718 719 725 730 733 734 769 #> [49339] 772 788 801 810 830 833 835 839 843 851 859 875 893 904 908 910 914 915 #> [49357] 917 919 921 952 960 961 966 968 985 988 992   2  13  18  21  23  24  27 #> [49375]  28  39  49  61  64  68  70  82  84 103 104 106 110 111 130 135 136 140 #> [49393] 141 145 178 183 224 227 229 255 279 289 295 299 306 314 320 329 336 348 #> [49411] 371 379 381 404 427 435 438 446 450 466 474 479 484 489 492 495 496 501 #> [49429] 505 516 524 554 563 567 587 590 598 600 608 609 613 637 638 652 657 661 #> [49447] 692 694 724 733 737 743 753 823 824 836 851 854 858 859 891 906 916 923 #> [49465] 936 938 945 955 959 963 969  10  25  54  55  89 117 118 120 130 138 165 #> [49483] 172 177 182 211 213 224 246 250 252 273 274 280 300 302 307 317 328 355 #> [49501] 364 374 377 387 392 393 400 408 419 423 425 437 463 464 465 482 492 500 #> [49519] 516 552 562 566 571 575 599 600 611 625 634 638 654 655 662 666 671 675 #> [49537] 681 682 685 696 701 706 711 722 727 733 760 805 812 814 829 837 844 855 #> [49555] 868 875 876 879 896 901 918 928 965 968 971 975 990  17  52  55  78  88 #> [49573]  91 120 134 137 193 195 198 205 212 214 216 220 221 225 230 245 295 296 #> [49591] 305 321 329 331 344 349 352 353 361 365 367 368 374 377 378 392 398 404 #> [49609] 429 466 473 477 479 488 489 497 514 518 528 532 564 566 575 577 582 588 #> [49627] 596 609 610 611 648 649 663 681 682 684 685 704 706 709 716 729 736 795 #> [49645] 799 801 811 820 832 842 843 854 856 876 879 881 882 892 906 933 940 946 #> [49663] 968 981 989  14  19  22  39  49  50  51  67 108 109 147 159 167 178 184 #> [49681] 206 227 229 252 256 257 258 259 262 269 271 284 286 302 310 319 343 355 #> [49699] 376 399 401 410 426 442 455 456 470 492 498 512 514 517 519 523 526 531 #> [49717] 537 553 592 602 612 622 624 641 642 646 655 659 666 670 689 692 699 700 #> [49735] 709 714 716 718 721 722 732 743 762 764 765 788 796 811 816 818 824 837 #> [49753] 838 848 856 860 884 896 901 929 962 964 965 994   2  15  18  39  70  80 #> [49771]  93  94 101 104 136 140 161 173 189 190 195 210 216 225 229 244 255 267 #> [49789] 273 282 283 301 319 337 356 364 368 372 378 398 400 410 419 433 457 466 #> [49807] 475 481 501 504 543 545 546 558 574 579 584 609 614 621 623 629 638 660 #> [49825] 675 676 688 689 700 710 717 720 726 735 748 754 761 768 769 783 795 810 #> [49843] 836 857 860 885 892 897 905 912 913 914 928 955 966 970 974 979 980 981 #> [49861] 983 987 996 #>  #> [[5]] #>     [1]     0     1     2     3     4     5     6     7     8     9    10    11 #>    [13]    12    13    14    15    16    17    18    19    20    21    22    23 #>    [25]    24    25    26    27    28    29    30    31    32    33    34    35 #>    [37]    36    37    38    39    40    41    42    43    44    45    46    47 #>    [49]    48    49    50    51    52    53    54    55    56    57    58    59 #>    [61]    60    61    62    63    64    65    66    67    68    69    70    71 #>    [73]    72    73    74    75    76    77    78    79    80    81    82    83 #>    [85]    84    85    86    87    88    89    90    91    92    93    94    95 #>    [97]    96    97    98    99   100   101   102   103   104   105   106   107 #>   [109]   108   109   110   111   112   113   114   115   116   117   118   119 #>   [121]   120   121   122   123   124   125   126   127   128   129   130   131 #>   [133]   132   133   134   135   136   137   138   139   140   141   142   143 #>   [145]   144   145   146   147   148   149   150   151   152   153   154   155 #>   [157]   156   157   158   159   160   161   162   163   164   165   166   167 #>   [169]   168   169   170   171   172   173   174   175   176   177   178   179 #>   [181]   180   181   182   183   184   185   186   187   188   189   190   191 #>   [193]   192   193   194   195   196   197   198   199   200   201   202   203 #>   [205]   204   205   206   207   208   209   210   211   212   213   214   215 #>   [217]   216   217   218   219   220   221   222   223   224   225   226   227 #>   [229]   228   229   230   231   232   233   234   235   236   237   238   239 #>   [241]   240   241   242   243   244   245   246   247   248   249   250   251 #>   [253]   252   253   254   255   256   257   258   259   260   261   262   263 #>   [265]   264   265   266   267   268   269   270   271   272   273   274   275 #>   [277]   276   277   278   279   280   281   282   283   284   285   286   287 #>   [289]   288   289   290   291   292   293   294   295   296   297   298   299 #>   [301]   300   301   302   303   304   305   306   307   308   309   310   311 #>   [313]   312   313   314   315   316   317   318   319   320   321   322   323 #>   [325]   324   325   326   327   328   329   330   331   332   333   334   335 #>   [337]   336   337   338   339   340   341   342   343   344   345   346   347 #>   [349]   348   349   350   351   352   353   354   355   356   357   358   359 #>   [361]   360   361   362   363   364   365   366   367   368   369   370   371 #>   [373]   372   373   374   375   376   377   378   379   380   381   382   383 #>   [385]   384   385   386   387   388   389   390   391   392   393   394   395 #>   [397]   396   397   398   399   400   401   402   403   404   405   406   407 #>   [409]   408   409   410   411   412   413   414   415   416   417   418   419 #>   [421]   420   421   422   423   424   425   426   427   428   429   430   431 #>   [433]   432   433   434   435   436   437   438   439   440   441   442   443 #>   [445]   444   445   446   447   448   449   450   451   452   453   454   455 #>   [457]   456   457   458   459   460   461   462   463   464   465   466   467 #>   [469]   468   469   470   471   472   473   474   475   476   477   478   479 #>   [481]   480   481   482   483   484   485   486   487   488   489   490   491 #>   [493]   492   493   494   495   496   497   498   499   500   501   502   503 #>   [505]   504   505   506   507   508   509   510   511   512   513   514   515 #>   [517]   516   517   518   519   520   521   522   523   524   525   526   527 #>   [529]   528   529   530   531   532   533   534   535   536   537   538   539 #>   [541]   540   541   542   543   544   545   546   547   548   549   550   551 #>   [553]   552   553   554   555   556   557   558   559   560   561   562   563 #>   [565]   564   565   566   567   568   569   570   571   572   573   574   575 #>   [577]   576   577   578   579   580   581   582   583   584   585   586   587 #>   [589]   588   589   590   591   592   593   594   595   596   597   598   599 #>   [601]   600   601   602   603   604   605   606   607   608   609   610   611 #>   [613]   612   613   614   615   616   617   618   619   620   621   622   623 #>   [625]   624   625   626   627   628   629   630   631   632   633   634   635 #>   [637]   636   637   638   639   640   641   642   643   644   645   646   647 #>   [649]   648   649   650   651   652   653   654   655   656   657   658   659 #>   [661]   660   661   662   663   664   665   666   667   668   669   670   671 #>   [673]   672   673   674   675   676   677   678   679   680   681   682   683 #>   [685]   684   685   686   687   688   689   690   691   692   693   694   695 #>   [697]   696   697   698   699   700   701   702   703   704   705   706   707 #>   [709]   708   709   710   711   712   713   714   715   716   717   718   719 #>   [721]   720   721   722   723   724   725   726   727   728   729   730   731 #>   [733]   732   733   734   735   736   737   738   739   740   741   742   743 #>   [745]   744   745   746   747   748   749   750   751   752   753   754   755 #>   [757]   756   757   758   759   760   761   762   763   764   765   766   767 #>   [769]   768   769   770   771   772   773   774   775   776   777   778   779 #>   [781]   780   781   782   783   784   785   786   787   788   789   790   791 #>   [793]   792   793   794   795   796   797   798   799   800   801   802   803 #>   [805]   804   805   806   807   808   809   810   811   812   813   814   815 #>   [817]   816   817   818   819   820   821   822   823   824   825   826   827 #>   [829]   828   829   830   831   832   833   834   835   836   837   838   839 #>   [841]   840   841   842   843   844   845   846   847   848   849   850   851 #>   [853]   852   853   854   855   856   857   858   859   860   861   862   863 #>   [865]   864   865   866   867   868   869   870   871   872   873   874   875 #>   [877]   876   877   878   879   880   881   882   883   884   885   886   887 #>   [889]   888   889   890   891   892   893   894   895   896   897   898   899 #>   [901]   900   901   902   903   904   905   906   907   908   909   910   911 #>   [913]   912   913   914   915   916   917   918   919   920   921   922   923 #>   [925]   924   925   926   927   928   929   930   931   932   933   934   935 #>   [937]   936   937   938   939   940   941   942   943   944   945   946   947 #>   [949]   948   949   950   951   952   953   954   955   956   957   958   959 #>   [961]   960   961   962   963   964   965   966   967   968   969   970   971 #>   [973]   972   973   974   975   976   977   978   979   980   981   982   983 #>   [985]   984   985   986   987   988   989   990   991   992   993   994   995 #>   [997]   996   997   998   999  1000  1001  1002  1003  1004  1005  1006  1007 #>  [1009]  1008  1009  1010  1011  1012  1013  1014  1015  1016  1017  1018  1019 #>  [1021]  1020  1021  1022  1023  1024  1025  1026  1027  1028  1029  1030  1031 #>  [1033]  1032  1033  1034  1035  1036  1037  1038  1039  1040  1041  1042  1043 #>  [1045]  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053  1054  1055 #>  [1057]  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066  1067 #>  [1069]  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 #>  [1081]  1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091 #>  [1093]  1092  1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103 #>  [1105]  1104  1105  1106  1107  1108  1109  1110  1111  1112  1113  1114  1115 #>  [1117]  1116  1117  1118  1119  1120  1121  1122  1123  1124  1125  1126  1127 #>  [1129]  1128  1129  1130  1131  1132  1133  1134  1135  1136  1137  1138  1139 #>  [1141]  1140  1141  1142  1143  1144  1145  1146  1147  1148  1149  1150  1151 #>  [1153]  1152  1153  1154  1155  1156  1157  1158  1159  1160  1161  1162  1163 #>  [1165]  1164  1165  1166  1167  1168  1169  1170  1171  1172  1173  1174  1175 #>  [1177]  1176  1177  1178  1179  1180  1181  1182  1183  1184  1185  1186  1187 #>  [1189]  1188  1189  1190  1191  1192  1193  1194  1195  1196  1197  1198  1199 #>  [1201]  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209  1210  1211 #>  [1213]  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222  1223 #>  [1225]  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 #>  [1237]  1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247 #>  [1249]  1248  1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259 #>  [1261]  1260  1261  1262  1263  1264  1265  1266  1267  1268  1269  1270  1271 #>  [1273]  1272  1273  1274  1275  1276  1277  1278  1279  1280  1281  1282  1283 #>  [1285]  1284  1285  1286  1287  1288  1289  1290  1291  1292  1293  1294  1295 #>  [1297]  1296  1297  1298  1299  1300  1301  1302  1303  1304  1305  1306  1307 #>  [1309]  1308  1309  1310  1311  1312  1313  1314  1315  1316  1317  1318  1319 #>  [1321]  1320  1321  1322  1323  1324  1325  1326  1327  1328  1329  1330  1331 #>  [1333]  1332  1333  1334  1335  1336  1337  1338  1339  1340  1341  1342  1343 #>  [1345]  1344  1345  1346  1347  1348  1349  1350  1351  1352  1353  1354  1355 #>  [1357]  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365  1366  1367 #>  [1369]  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378  1379 #>  [1381]  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 #>  [1393]  1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403 #>  [1405]  1404  1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415 #>  [1417]  1416  1417  1418  1419  1420  1421  1422  1423  1424  1425  1426  1427 #>  [1429]  1428  1429  1430  1431  1432  1433  1434  1435  1436  1437  1438  1439 #>  [1441]  1440  1441  1442  1443  1444  1445  1446  1447  1448  1449  1450  1451 #>  [1453]  1452  1453  1454  1455  1456  1457  1458  1459  1460  1461  1462  1463 #>  [1465]  1464  1465  1466  1467  1468  1469  1470  1471  1472  1473  1474  1475 #>  [1477]  1476  1477  1478  1479  1480  1481  1482  1483  1484  1485  1486  1487 #>  [1489]  1488  1489  1490  1491  1492  1493  1494  1495  1496  1497  1498  1499 #>  [1501]  1500  1501  1502  1503  1504  1505  1506  1507  1508  1509  1510  1511 #>  [1513]  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521  1522  1523 #>  [1525]  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534  1535 #>  [1537]  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 #>  [1549]  1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559 #>  [1561]  1560  1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571 #>  [1573]  1572  1573  1574  1575  1576  1577  1578  1579  1580  1581  1582  1583 #>  [1585]  1584  1585  1586  1587  1588  1589  1590  1591  1592  1593  1594  1595 #>  [1597]  1596  1597  1598  1599  1600  1601  1602  1603  1604  1605  1606  1607 #>  [1609]  1608  1609  1610  1611  1612  1613  1614  1615  1616  1617  1618  1619 #>  [1621]  1620  1621  1622  1623  1624  1625  1626  1627  1628  1629  1630  1631 #>  [1633]  1632  1633  1634  1635  1636  1637  1638  1639  1640  1641  1642  1643 #>  [1645]  1644  1645  1646  1647  1648  1649  1650  1651  1652  1653  1654  1655 #>  [1657]  1656  1657  1658  1659  1660  1661  1662  1663  1664  1665  1666  1667 #>  [1669]  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677  1678  1679 #>  [1681]  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690  1691 #>  [1693]  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 #>  [1705]  1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715 #>  [1717]  1716  1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727 #>  [1729]  1728  1729  1730  1731  1732  1733  1734  1735  1736  1737  1738  1739 #>  [1741]  1740  1741  1742  1743  1744  1745  1746  1747  1748  1749  1750  1751 #>  [1753]  1752  1753  1754  1755  1756  1757  1758  1759  1760  1761  1762  1763 #>  [1765]  1764  1765  1766  1767  1768  1769  1770  1771  1772  1773  1774  1775 #>  [1777]  1776  1777  1778  1779  1780  1781  1782  1783  1784  1785  1786  1787 #>  [1789]  1788  1789  1790  1791  1792  1793  1794  1795  1796  1797  1798  1799 #>  [1801]  1800  1801  1802  1803  1804  1805  1806  1807  1808  1809  1810  1811 #>  [1813]  1812  1813  1814  1815  1816  1817  1818  1819  1820  1821  1822  1823 #>  [1825]  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833  1834  1835 #>  [1837]  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846  1847 #>  [1849]  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 #>  [1861]  1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871 #>  [1873]  1872  1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883 #>  [1885]  1884  1885  1886  1887  1888  1889  1890  1891  1892  1893  1894  1895 #>  [1897]  1896  1897  1898  1899  1900  1901  1902  1903  1904  1905  1906  1907 #>  [1909]  1908  1909  1910  1911  1912  1913  1914  1915  1916  1917  1918  1919 #>  [1921]  1920  1921  1922  1923  1924  1925  1926  1927  1928  1929  1930  1931 #>  [1933]  1932  1933  1934  1935  1936  1937  1938  1939  1940  1941  1942  1943 #>  [1945]  1944  1945  1946  1947  1948  1949  1950  1951  1952  1953  1954  1955 #>  [1957]  1956  1957  1958  1959  1960  1961  1962  1963  1964  1965  1966  1967 #>  [1969]  1968  1969  1970  1971  1972  1973  1974  1975  1976  1977  1978  1979 #>  [1981]  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989  1990  1991 #>  [1993]  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002  2003 #>  [2005]  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 #>  [2017]  2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027 #>  [2029]  2028  2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039 #>  [2041]  2040  2041  2042  2043  2044  2045  2046  2047  2048  2049  2050  2051 #>  [2053]  2052  2053  2054  2055  2056  2057  2058  2059  2060  2061  2062  2063 #>  [2065]  2064  2065  2066  2067  2068  2069  2070  2071  2072  2073  2074  2075 #>  [2077]  2076  2077  2078  2079  2080  2081  2082  2083  2084  2085  2086  2087 #>  [2089]  2088  2089  2090  2091  2092  2093  2094  2095  2096  2097  2098  2099 #>  [2101]  2100  2101  2102  2103  2104  2105  2106  2107  2108  2109  2110  2111 #>  [2113]  2112  2113  2114  2115  2116  2117  2118  2119  2120  2121  2122  2123 #>  [2125]  2124  2125  2126  2127  2128  2129  2130  2131  2132  2133  2134  2135 #>  [2137]  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145  2146  2147 #>  [2149]  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158  2159 #>  [2161]  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 #>  [2173]  2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183 #>  [2185]  2184  2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195 #>  [2197]  2196  2197  2198  2199  2200  2201  2202  2203  2204  2205  2206  2207 #>  [2209]  2208  2209  2210  2211  2212  2213  2214  2215  2216  2217  2218  2219 #>  [2221]  2220  2221  2222  2223  2224  2225  2226  2227  2228  2229  2230  2231 #>  [2233]  2232  2233  2234  2235  2236  2237  2238  2239  2240  2241  2242  2243 #>  [2245]  2244  2245  2246  2247  2248  2249  2250  2251  2252  2253  2254  2255 #>  [2257]  2256  2257  2258  2259  2260  2261  2262  2263  2264  2265  2266  2267 #>  [2269]  2268  2269  2270  2271  2272  2273  2274  2275  2276  2277  2278  2279 #>  [2281]  2280  2281  2282  2283  2284  2285  2286  2287  2288  2289  2290  2291 #>  [2293]  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301  2302  2303 #>  [2305]  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314  2315 #>  [2317]  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 #>  [2329]  2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339 #>  [2341]  2340  2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351 #>  [2353]  2352  2353  2354  2355  2356  2357  2358  2359  2360  2361  2362  2363 #>  [2365]  2364  2365  2366  2367  2368  2369  2370  2371  2372  2373  2374  2375 #>  [2377]  2376  2377  2378  2379  2380  2381  2382  2383  2384  2385  2386  2387 #>  [2389]  2388  2389  2390  2391  2392  2393  2394  2395  2396  2397  2398  2399 #>  [2401]  2400  2401  2402  2403  2404  2405  2406  2407  2408  2409  2410  2411 #>  [2413]  2412  2413  2414  2415  2416  2417  2418  2419  2420  2421  2422  2423 #>  [2425]  2424  2425  2426  2427  2428  2429  2430  2431  2432  2433  2434  2435 #>  [2437]  2436  2437  2438  2439  2440  2441  2442  2443  2444  2445  2446  2447 #>  [2449]  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457  2458  2459 #>  [2461]  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470  2471 #>  [2473]  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 #>  [2485]  2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495 #>  [2497]  2496  2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507 #>  [2509]  2508  2509  2510  2511  2512  2513  2514  2515  2516  2517  2518  2519 #>  [2521]  2520  2521  2522  2523  2524  2525  2526  2527  2528  2529  2530  2531 #>  [2533]  2532  2533  2534  2535  2536  2537  2538  2539  2540  2541  2542  2543 #>  [2545]  2544  2545  2546  2547  2548  2549  2550  2551  2552  2553  2554  2555 #>  [2557]  2556  2557  2558  2559  2560  2561  2562  2563  2564  2565  2566  2567 #>  [2569]  2568  2569  2570  2571  2572  2573  2574  2575  2576  2577  2578  2579 #>  [2581]  2580  2581  2582  2583  2584  2585  2586  2587  2588  2589  2590  2591 #>  [2593]  2592  2593  2594  2595  2596  2597  2598  2599  2600  2601  2602  2603 #>  [2605]  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613  2614  2615 #>  [2617]  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626  2627 #>  [2629]  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 #>  [2641]  2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651 #>  [2653]  2652  2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663 #>  [2665]  2664  2665  2666  2667  2668  2669  2670  2671  2672  2673  2674  2675 #>  [2677]  2676  2677  2678  2679  2680  2681  2682  2683  2684  2685  2686  2687 #>  [2689]  2688  2689  2690  2691  2692  2693  2694  2695  2696  2697  2698  2699 #>  [2701]  2700  2701  2702  2703  2704  2705  2706  2707  2708  2709  2710  2711 #>  [2713]  2712  2713  2714  2715  2716  2717  2718  2719  2720  2721  2722  2723 #>  [2725]  2724  2725  2726  2727  2728  2729  2730  2731  2732  2733  2734  2735 #>  [2737]  2736  2737  2738  2739  2740  2741  2742  2743  2744  2745  2746  2747 #>  [2749]  2748  2749  2750  2751  2752  2753  2754  2755  2756  2757  2758  2759 #>  [2761]  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769  2770  2771 #>  [2773]  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782  2783 #>  [2785]  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 #>  [2797]  2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807 #>  [2809]  2808  2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819 #>  [2821]  2820  2821  2822  2823  2824  2825  2826  2827  2828  2829  2830  2831 #>  [2833]  2832  2833  2834  2835  2836  2837  2838  2839  2840  2841  2842  2843 #>  [2845]  2844  2845  2846  2847  2848  2849  2850  2851  2852  2853  2854  2855 #>  [2857]  2856  2857  2858  2859  2860  2861  2862  2863  2864  2865  2866  2867 #>  [2869]  2868  2869  2870  2871  2872  2873  2874  2875  2876  2877  2878  2879 #>  [2881]  2880  2881  2882  2883  2884  2885  2886  2887  2888  2889  2890  2891 #>  [2893]  2892  2893  2894  2895  2896  2897  2898  2899  2900  2901  2902  2903 #>  [2905]  2904  2905  2906  2907  2908  2909  2910  2911  2912  2913  2914  2915 #>  [2917]  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925  2926  2927 #>  [2929]  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938  2939 #>  [2941]  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 #>  [2953]  2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963 #>  [2965]  2964  2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975 #>  [2977]  2976  2977  2978  2979  2980  2981  2982  2983  2984  2985  2986  2987 #>  [2989]  2988  2989  2990  2991  2992  2993  2994  2995  2996  2997  2998  2999 #>  [3001]  3000  3001  3002  3003  3004  3005  3006  3007  3008  3009  3010  3011 #>  [3013]  3012  3013  3014  3015  3016  3017  3018  3019  3020  3021  3022  3023 #>  [3025]  3024  3025  3026  3027  3028  3029  3030  3031  3032  3033  3034  3035 #>  [3037]  3036  3037  3038  3039  3040  3041  3042  3043  3044  3045  3046  3047 #>  [3049]  3048  3049  3050  3051  3052  3053  3054  3055  3056  3057  3058  3059 #>  [3061]  3060  3061  3062  3063  3064  3065  3066  3067  3068  3069  3070  3071 #>  [3073]  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081  3082  3083 #>  [3085]  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094  3095 #>  [3097]  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 #>  [3109]  3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119 #>  [3121]  3120  3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131 #>  [3133]  3132  3133  3134  3135  3136  3137  3138  3139  3140  3141  3142  3143 #>  [3145]  3144  3145  3146  3147  3148  3149  3150  3151  3152  3153  3154  3155 #>  [3157]  3156  3157  3158  3159  3160  3161  3162  3163  3164  3165  3166  3167 #>  [3169]  3168  3169  3170  3171  3172  3173  3174  3175  3176  3177  3178  3179 #>  [3181]  3180  3181  3182  3183  3184  3185  3186  3187  3188  3189  3190  3191 #>  [3193]  3192  3193  3194  3195  3196  3197  3198  3199  3200  3201  3202  3203 #>  [3205]  3204  3205  3206  3207  3208  3209  3210  3211  3212  3213  3214  3215 #>  [3217]  3216  3217  3218  3219  3220  3221  3222  3223  3224  3225  3226  3227 #>  [3229]  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237  3238  3239 #>  [3241]  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250  3251 #>  [3253]  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 #>  [3265]  3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275 #>  [3277]  3276  3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287 #>  [3289]  3288  3289  3290  3291  3292  3293  3294  3295  3296  3297  3298  3299 #>  [3301]  3300  3301  3302  3303  3304  3305  3306  3307  3308  3309  3310  3311 #>  [3313]  3312  3313  3314  3315  3316  3317  3318  3319  3320  3321  3322  3323 #>  [3325]  3324  3325  3326  3327  3328  3329  3330  3331  3332  3333  3334  3335 #>  [3337]  3336  3337  3338  3339  3340  3341  3342  3343  3344  3345  3346  3347 #>  [3349]  3348  3349  3350  3351  3352  3353  3354  3355  3356  3357  3358  3359 #>  [3361]  3360  3361  3362  3363  3364  3365  3366  3367  3368  3369  3370  3371 #>  [3373]  3372  3373  3374  3375  3376  3377  3378  3379  3380  3381  3382  3383 #>  [3385]  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393  3394  3395 #>  [3397]  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406  3407 #>  [3409]  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 #>  [3421]  3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431 #>  [3433]  3432  3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443 #>  [3445]  3444  3445  3446  3447  3448  3449  3450  3451  3452  3453  3454  3455 #>  [3457]  3456  3457  3458  3459  3460  3461  3462  3463  3464  3465  3466  3467 #>  [3469]  3468  3469  3470  3471  3472  3473  3474  3475  3476  3477  3478  3479 #>  [3481]  3480  3481  3482  3483  3484  3485  3486  3487  3488  3489  3490  3491 #>  [3493]  3492  3493  3494  3495  3496  3497  3498  3499  3500  3501  3502  3503 #>  [3505]  3504  3505  3506  3507  3508  3509  3510  3511  3512  3513  3514  3515 #>  [3517]  3516  3517  3518  3519  3520  3521  3522  3523  3524  3525  3526  3527 #>  [3529]  3528  3529  3530  3531  3532  3533  3534  3535  3536  3537  3538  3539 #>  [3541]  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549  3550  3551 #>  [3553]  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562  3563 #>  [3565]  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 #>  [3577]  3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587 #>  [3589]  3588  3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599 #>  [3601]  3600  3601  3602  3603  3604  3605  3606  3607  3608  3609  3610  3611 #>  [3613]  3612  3613  3614  3615  3616  3617  3618  3619  3620  3621  3622  3623 #>  [3625]  3624  3625  3626  3627  3628  3629  3630  3631  3632  3633  3634  3635 #>  [3637]  3636  3637  3638  3639  3640  3641  3642  3643  3644  3645  3646  3647 #>  [3649]  3648  3649  3650  3651  3652  3653  3654  3655  3656  3657  3658  3659 #>  [3661]  3660  3661  3662  3663  3664  3665  3666  3667  3668  3669  3670  3671 #>  [3673]  3672  3673  3674  3675  3676  3677  3678  3679  3680  3681  3682  3683 #>  [3685]  3684  3685  3686  3687  3688  3689  3690  3691  3692  3693  3694  3695 #>  [3697]  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705  3706  3707 #>  [3709]  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718  3719 #>  [3721]  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 #>  [3733]  3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743 #>  [3745]  3744  3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755 #>  [3757]  3756  3757  3758  3759  3760  3761  3762  3763  3764  3765  3766  3767 #>  [3769]  3768  3769  3770  3771  3772  3773  3774  3775  3776  3777  3778  3779 #>  [3781]  3780  3781  3782  3783  3784  3785  3786  3787  3788  3789  3790  3791 #>  [3793]  3792  3793  3794  3795  3796  3797  3798  3799  3800  3801  3802  3803 #>  [3805]  3804  3805  3806  3807  3808  3809  3810  3811  3812  3813  3814  3815 #>  [3817]  3816  3817  3818  3819  3820  3821  3822  3823  3824  3825  3826  3827 #>  [3829]  3828  3829  3830  3831  3832  3833  3834  3835  3836  3837  3838  3839 #>  [3841]  3840  3841  3842  3843  3844  3845  3846  3847  3848  3849  3850  3851 #>  [3853]  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861  3862  3863 #>  [3865]  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874  3875 #>  [3877]  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 #>  [3889]  3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899 #>  [3901]  3900  3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911 #>  [3913]  3912  3913  3914  3915  3916  3917  3918  3919  3920  3921  3922  3923 #>  [3925]  3924  3925  3926  3927  3928  3929  3930  3931  3932  3933  3934  3935 #>  [3937]  3936  3937  3938  3939  3940  3941  3942  3943  3944  3945  3946  3947 #>  [3949]  3948  3949  3950  3951  3952  3953  3954  3955  3956  3957  3958  3959 #>  [3961]  3960  3961  3962  3963  3964  3965  3966  3967  3968  3969  3970  3971 #>  [3973]  3972  3973  3974  3975  3976  3977  3978  3979  3980  3981  3982  3983 #>  [3985]  3984  3985  3986  3987  3988  3989  3990  3991  3992  3993  3994  3995 #>  [3997]  3996  3997  3998  3999  4000  4001  4002  4003  4004  4005  4006  4007 #>  [4009]  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017  4018  4019 #>  [4021]  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030  4031 #>  [4033]  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 #>  [4045]  4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055 #>  [4057]  4056  4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067 #>  [4069]  4068  4069  4070  4071  4072  4073  4074  4075  4076  4077  4078  4079 #>  [4081]  4080  4081  4082  4083  4084  4085  4086  4087  4088  4089  4090  4091 #>  [4093]  4092  4093  4094  4095  4096  4097  4098  4099  4100  4101  4102  4103 #>  [4105]  4104  4105  4106  4107  4108  4109  4110  4111  4112  4113  4114  4115 #>  [4117]  4116  4117  4118  4119  4120  4121  4122  4123  4124  4125  4126  4127 #>  [4129]  4128  4129  4130  4131  4132  4133  4134  4135  4136  4137  4138  4139 #>  [4141]  4140  4141  4142  4143  4144  4145  4146  4147  4148  4149  4150  4151 #>  [4153]  4152  4153  4154  4155  4156  4157  4158  4159  4160  4161  4162  4163 #>  [4165]  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173  4174  4175 #>  [4177]  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186  4187 #>  [4189]  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 #>  [4201]  4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211 #>  [4213]  4212  4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223 #>  [4225]  4224  4225  4226  4227  4228  4229  4230  4231  4232  4233  4234  4235 #>  [4237]  4236  4237  4238  4239  4240  4241  4242  4243  4244  4245  4246  4247 #>  [4249]  4248  4249  4250  4251  4252  4253  4254  4255  4256  4257  4258  4259 #>  [4261]  4260  4261  4262  4263  4264  4265  4266  4267  4268  4269  4270  4271 #>  [4273]  4272  4273  4274  4275  4276  4277  4278  4279  4280  4281  4282  4283 #>  [4285]  4284  4285  4286  4287  4288  4289  4290  4291  4292  4293  4294  4295 #>  [4297]  4296  4297  4298  4299  4300  4301  4302  4303  4304  4305  4306  4307 #>  [4309]  4308  4309  4310  4311  4312  4313  4314  4315  4316  4317  4318  4319 #>  [4321]  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329  4330  4331 #>  [4333]  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342  4343 #>  [4345]  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 #>  [4357]  4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367 #>  [4369]  4368  4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379 #>  [4381]  4380  4381  4382  4383  4384  4385  4386  4387  4388  4389  4390  4391 #>  [4393]  4392  4393  4394  4395  4396  4397  4398  4399  4400  4401  4402  4403 #>  [4405]  4404  4405  4406  4407  4408  4409  4410  4411  4412  4413  4414  4415 #>  [4417]  4416  4417  4418  4419  4420  4421  4422  4423  4424  4425  4426  4427 #>  [4429]  4428  4429  4430  4431  4432  4433  4434  4435  4436  4437  4438  4439 #>  [4441]  4440  4441  4442  4443  4444  4445  4446  4447  4448  4449  4450  4451 #>  [4453]  4452  4453  4454  4455  4456  4457  4458  4459  4460  4461  4462  4463 #>  [4465]  4464  4465  4466  4467  4468  4469  4470  4471  4472  4473  4474  4475 #>  [4477]  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485  4486  4487 #>  [4489]  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498  4499 #>  [4501]  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 #>  [4513]  4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523 #>  [4525]  4524  4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535 #>  [4537]  4536  4537  4538  4539  4540  4541  4542  4543  4544  4545  4546  4547 #>  [4549]  4548  4549  4550  4551  4552  4553  4554  4555  4556  4557  4558  4559 #>  [4561]  4560  4561  4562  4563  4564  4565  4566  4567  4568  4569  4570  4571 #>  [4573]  4572  4573  4574  4575  4576  4577  4578  4579  4580  4581  4582  4583 #>  [4585]  4584  4585  4586  4587  4588  4589  4590  4591  4592  4593  4594  4595 #>  [4597]  4596  4597  4598  4599  4600  4601  4602  4603  4604  4605  4606  4607 #>  [4609]  4608  4609  4610  4611  4612  4613  4614  4615  4616  4617  4618  4619 #>  [4621]  4620  4621  4622  4623  4624  4625  4626  4627  4628  4629  4630  4631 #>  [4633]  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641  4642  4643 #>  [4645]  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654  4655 #>  [4657]  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 #>  [4669]  4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679 #>  [4681]  4680  4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691 #>  [4693]  4692  4693  4694  4695  4696  4697  4698  4699  4700  4701  4702  4703 #>  [4705]  4704  4705  4706  4707  4708  4709  4710  4711  4712  4713  4714  4715 #>  [4717]  4716  4717  4718  4719  4720  4721  4722  4723  4724  4725  4726  4727 #>  [4729]  4728  4729  4730  4731  4732  4733  4734  4735  4736  4737  4738  4739 #>  [4741]  4740  4741  4742  4743  4744  4745  4746  4747  4748  4749  4750  4751 #>  [4753]  4752  4753  4754  4755  4756  4757  4758  4759  4760  4761  4762  4763 #>  [4765]  4764  4765  4766  4767  4768  4769  4770  4771  4772  4773  4774  4775 #>  [4777]  4776  4777  4778  4779  4780  4781  4782  4783  4784  4785  4786  4787 #>  [4789]  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797  4798  4799 #>  [4801]  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810  4811 #>  [4813]  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 #>  [4825]  4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835 #>  [4837]  4836  4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847 #>  [4849]  4848  4849  4850  4851  4852  4853  4854  4855  4856  4857  4858  4859 #>  [4861]  4860  4861  4862  4863  4864  4865  4866  4867  4868  4869  4870  4871 #>  [4873]  4872  4873  4874  4875  4876  4877  4878  4879  4880  4881  4882  4883 #>  [4885]  4884  4885  4886  4887  4888  4889  4890  4891  4892  4893  4894  4895 #>  [4897]  4896  4897  4898  4899  4900  4901  4902  4903  4904  4905  4906  4907 #>  [4909]  4908  4909  4910  4911  4912  4913  4914  4915  4916  4917  4918  4919 #>  [4921]  4920  4921  4922  4923  4924  4925  4926  4927  4928  4929  4930  4931 #>  [4933]  4932  4933  4934  4935  4936  4937  4938  4939  4940  4941  4942  4943 #>  [4945]  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953  4954  4955 #>  [4957]  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966  4967 #>  [4969]  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 #>  [4981]  4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991 #>  [4993]  4992  4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003 #>  [5005]  5004  5005  5006  5007  5008  5009  5010  5011  5012  5013  5014  5015 #>  [5017]  5016  5017  5018  5019  5020  5021  5022  5023  5024  5025  5026  5027 #>  [5029]  5028  5029  5030  5031  5032  5033  5034  5035  5036  5037  5038  5039 #>  [5041]  5040  5041  5042  5043  5044  5045  5046  5047  5048  5049  5050  5051 #>  [5053]  5052  5053  5054  5055  5056  5057  5058  5059  5060  5061  5062  5063 #>  [5065]  5064  5065  5066  5067  5068  5069  5070  5071  5072  5073  5074  5075 #>  [5077]  5076  5077  5078  5079  5080  5081  5082  5083  5084  5085  5086  5087 #>  [5089]  5088  5089  5090  5091  5092  5093  5094  5095  5096  5097  5098  5099 #>  [5101]  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109  5110  5111 #>  [5113]  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122  5123 #>  [5125]  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 #>  [5137]  5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147 #>  [5149]  5148  5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159 #>  [5161]  5160  5161  5162  5163  5164  5165  5166  5167  5168  5169  5170  5171 #>  [5173]  5172  5173  5174  5175  5176  5177  5178  5179  5180  5181  5182  5183 #>  [5185]  5184  5185  5186  5187  5188  5189  5190  5191  5192  5193  5194  5195 #>  [5197]  5196  5197  5198  5199  5200  5201  5202  5203  5204  5205  5206  5207 #>  [5209]  5208  5209  5210  5211  5212  5213  5214  5215  5216  5217  5218  5219 #>  [5221]  5220  5221  5222  5223  5224  5225  5226  5227  5228  5229  5230  5231 #>  [5233]  5232  5233  5234  5235  5236  5237  5238  5239  5240  5241  5242  5243 #>  [5245]  5244  5245  5246  5247  5248  5249  5250  5251  5252  5253  5254  5255 #>  [5257]  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265  5266  5267 #>  [5269]  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278  5279 #>  [5281]  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 #>  [5293]  5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303 #>  [5305]  5304  5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315 #>  [5317]  5316  5317  5318  5319  5320  5321  5322  5323  5324  5325  5326  5327 #>  [5329]  5328  5329  5330  5331  5332  5333  5334  5335  5336  5337  5338  5339 #>  [5341]  5340  5341  5342  5343  5344  5345  5346  5347  5348  5349  5350  5351 #>  [5353]  5352  5353  5354  5355  5356  5357  5358  5359  5360  5361  5362  5363 #>  [5365]  5364  5365  5366  5367  5368  5369  5370  5371  5372  5373  5374  5375 #>  [5377]  5376  5377  5378  5379  5380  5381  5382  5383  5384  5385  5386  5387 #>  [5389]  5388  5389  5390  5391  5392  5393  5394  5395  5396  5397  5398  5399 #>  [5401]  5400  5401  5402  5403  5404  5405  5406  5407  5408  5409  5410  5411 #>  [5413]  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421  5422  5423 #>  [5425]  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434  5435 #>  [5437]  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 #>  [5449]  5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459 #>  [5461]  5460  5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471 #>  [5473]  5472  5473  5474  5475  5476  5477  5478  5479  5480  5481  5482  5483 #>  [5485]  5484  5485  5486  5487  5488  5489  5490  5491  5492  5493  5494  5495 #>  [5497]  5496  5497  5498  5499  5500  5501  5502  5503  5504  5505  5506  5507 #>  [5509]  5508  5509  5510  5511  5512  5513  5514  5515  5516  5517  5518  5519 #>  [5521]  5520  5521  5522  5523  5524  5525  5526  5527  5528  5529  5530  5531 #>  [5533]  5532  5533  5534  5535  5536  5537  5538  5539  5540  5541  5542  5543 #>  [5545]  5544  5545  5546  5547  5548  5549  5550  5551  5552  5553  5554  5555 #>  [5557]  5556  5557  5558  5559  5560  5561  5562  5563  5564  5565  5566  5567 #>  [5569]  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577  5578  5579 #>  [5581]  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590  5591 #>  [5593]  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 #>  [5605]  5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615 #>  [5617]  5616  5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627 #>  [5629]  5628  5629  5630  5631  5632  5633  5634  5635  5636  5637  5638  5639 #>  [5641]  5640  5641  5642  5643  5644  5645  5646  5647  5648  5649  5650  5651 #>  [5653]  5652  5653  5654  5655  5656  5657  5658  5659  5660  5661  5662  5663 #>  [5665]  5664  5665  5666  5667  5668  5669  5670  5671  5672  5673  5674  5675 #>  [5677]  5676  5677  5678  5679  5680  5681  5682  5683  5684  5685  5686  5687 #>  [5689]  5688  5689  5690  5691  5692  5693  5694  5695  5696  5697  5698  5699 #>  [5701]  5700  5701  5702  5703  5704  5705  5706  5707  5708  5709  5710  5711 #>  [5713]  5712  5713  5714  5715  5716  5717  5718  5719  5720  5721  5722  5723 #>  [5725]  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733  5734  5735 #>  [5737]  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746  5747 #>  [5749]  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 #>  [5761]  5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771 #>  [5773]  5772  5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783 #>  [5785]  5784  5785  5786  5787  5788  5789  5790  5791  5792  5793  5794  5795 #>  [5797]  5796  5797  5798  5799  5800  5801  5802  5803  5804  5805  5806  5807 #>  [5809]  5808  5809  5810  5811  5812  5813  5814  5815  5816  5817  5818  5819 #>  [5821]  5820  5821  5822  5823  5824  5825  5826  5827  5828  5829  5830  5831 #>  [5833]  5832  5833  5834  5835  5836  5837  5838  5839  5840  5841  5842  5843 #>  [5845]  5844  5845  5846  5847  5848  5849  5850  5851  5852  5853  5854  5855 #>  [5857]  5856  5857  5858  5859  5860  5861  5862  5863  5864  5865  5866  5867 #>  [5869]  5868  5869  5870  5871  5872  5873  5874  5875  5876  5877  5878  5879 #>  [5881]  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889  5890  5891 #>  [5893]  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902  5903 #>  [5905]  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 #>  [5917]  5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927 #>  [5929]  5928  5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939 #>  [5941]  5940  5941  5942  5943  5944  5945  5946  5947  5948  5949  5950  5951 #>  [5953]  5952  5953  5954  5955  5956  5957  5958  5959  5960  5961  5962  5963 #>  [5965]  5964  5965  5966  5967  5968  5969  5970  5971  5972  5973  5974  5975 #>  [5977]  5976  5977  5978  5979  5980  5981  5982  5983  5984  5985  5986  5987 #>  [5989]  5988  5989  5990  5991  5992  5993  5994  5995  5996  5997  5998  5999 #>  [6001]  6000  6001  6002  6003  6004  6005  6006  6007  6008  6009  6010  6011 #>  [6013]  6012  6013  6014  6015  6016  6017  6018  6019  6020  6021  6022  6023 #>  [6025]  6024  6025  6026  6027  6028  6029  6030  6031  6032  6033  6034  6035 #>  [6037]  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045  6046  6047 #>  [6049]  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058  6059 #>  [6061]  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 #>  [6073]  6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083 #>  [6085]  6084  6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095 #>  [6097]  6096  6097  6098  6099  6100  6101  6102  6103  6104  6105  6106  6107 #>  [6109]  6108  6109  6110  6111  6112  6113  6114  6115  6116  6117  6118  6119 #>  [6121]  6120  6121  6122  6123  6124  6125  6126  6127  6128  6129  6130  6131 #>  [6133]  6132  6133  6134  6135  6136  6137  6138  6139  6140  6141  6142  6143 #>  [6145]  6144  6145  6146  6147  6148  6149  6150  6151  6152  6153  6154  6155 #>  [6157]  6156  6157  6158  6159  6160  6161  6162  6163  6164  6165  6166  6167 #>  [6169]  6168  6169  6170  6171  6172  6173  6174  6175  6176  6177  6178  6179 #>  [6181]  6180  6181  6182  6183  6184  6185  6186  6187  6188  6189  6190  6191 #>  [6193]  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201  6202  6203 #>  [6205]  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214  6215 #>  [6217]  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 #>  [6229]  6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239 #>  [6241]  6240  6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251 #>  [6253]  6252  6253  6254  6255  6256  6257  6258  6259  6260  6261  6262  6263 #>  [6265]  6264  6265  6266  6267  6268  6269  6270  6271  6272  6273  6274  6275 #>  [6277]  6276  6277  6278  6279  6280  6281  6282  6283  6284  6285  6286  6287 #>  [6289]  6288  6289  6290  6291  6292  6293  6294  6295  6296  6297  6298  6299 #>  [6301]  6300  6301  6302  6303  6304  6305  6306  6307  6308  6309  6310  6311 #>  [6313]  6312  6313  6314  6315  6316  6317  6318  6319  6320  6321  6322  6323 #>  [6325]  6324  6325  6326  6327  6328  6329  6330  6331  6332  6333  6334  6335 #>  [6337]  6336  6337  6338  6339  6340  6341  6342  6343  6344  6345  6346  6347 #>  [6349]  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357  6358  6359 #>  [6361]  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370  6371 #>  [6373]  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 #>  [6385]  6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395 #>  [6397]  6396  6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407 #>  [6409]  6408  6409  6410  6411  6412  6413  6414  6415  6416  6417  6418  6419 #>  [6421]  6420  6421  6422  6423  6424  6425  6426  6427  6428  6429  6430  6431 #>  [6433]  6432  6433  6434  6435  6436  6437  6438  6439  6440  6441  6442  6443 #>  [6445]  6444  6445  6446  6447  6448  6449  6450  6451  6452  6453  6454  6455 #>  [6457]  6456  6457  6458  6459  6460  6461  6462  6463  6464  6465  6466  6467 #>  [6469]  6468  6469  6470  6471  6472  6473  6474  6475  6476  6477  6478  6479 #>  [6481]  6480  6481  6482  6483  6484  6485  6486  6487  6488  6489  6490  6491 #>  [6493]  6492  6493  6494  6495  6496  6497  6498  6499  6500  6501  6502  6503 #>  [6505]  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513  6514  6515 #>  [6517]  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526  6527 #>  [6529]  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 #>  [6541]  6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551 #>  [6553]  6552  6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563 #>  [6565]  6564  6565  6566  6567  6568  6569  6570  6571  6572  6573  6574  6575 #>  [6577]  6576  6577  6578  6579  6580  6581  6582  6583  6584  6585  6586  6587 #>  [6589]  6588  6589  6590  6591  6592  6593  6594  6595  6596  6597  6598  6599 #>  [6601]  6600  6601  6602  6603  6604  6605  6606  6607  6608  6609  6610  6611 #>  [6613]  6612  6613  6614  6615  6616  6617  6618  6619  6620  6621  6622  6623 #>  [6625]  6624  6625  6626  6627  6628  6629  6630  6631  6632  6633  6634  6635 #>  [6637]  6636  6637  6638  6639  6640  6641  6642  6643  6644  6645  6646  6647 #>  [6649]  6648  6649  6650  6651  6652  6653  6654  6655  6656  6657  6658  6659 #>  [6661]  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669  6670  6671 #>  [6673]  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682  6683 #>  [6685]  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 #>  [6697]  6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707 #>  [6709]  6708  6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719 #>  [6721]  6720  6721  6722  6723  6724  6725  6726  6727  6728  6729  6730  6731 #>  [6733]  6732  6733  6734  6735  6736  6737  6738  6739  6740  6741  6742  6743 #>  [6745]  6744  6745  6746  6747  6748  6749  6750  6751  6752  6753  6754  6755 #>  [6757]  6756  6757  6758  6759  6760  6761  6762  6763  6764  6765  6766  6767 #>  [6769]  6768  6769  6770  6771  6772  6773  6774  6775  6776  6777  6778  6779 #>  [6781]  6780  6781  6782  6783  6784  6785  6786  6787  6788  6789  6790  6791 #>  [6793]  6792  6793  6794  6795  6796  6797  6798  6799  6800  6801  6802  6803 #>  [6805]  6804  6805  6806  6807  6808  6809  6810  6811  6812  6813  6814  6815 #>  [6817]  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825  6826  6827 #>  [6829]  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838  6839 #>  [6841]  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 #>  [6853]  6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863 #>  [6865]  6864  6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875 #>  [6877]  6876  6877  6878  6879  6880  6881  6882  6883  6884  6885  6886  6887 #>  [6889]  6888  6889  6890  6891  6892  6893  6894  6895  6896  6897  6898  6899 #>  [6901]  6900  6901  6902  6903  6904  6905  6906  6907  6908  6909  6910  6911 #>  [6913]  6912  6913  6914  6915  6916  6917  6918  6919  6920  6921  6922  6923 #>  [6925]  6924  6925  6926  6927  6928  6929  6930  6931  6932  6933  6934  6935 #>  [6937]  6936  6937  6938  6939  6940  6941  6942  6943  6944  6945  6946  6947 #>  [6949]  6948  6949  6950  6951  6952  6953  6954  6955  6956  6957  6958  6959 #>  [6961]  6960  6961  6962  6963  6964  6965  6966  6967  6968  6969  6970  6971 #>  [6973]  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981  6982  6983 #>  [6985]  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994  6995 #>  [6997]  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 #>  [7009]  7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019 #>  [7021]  7020  7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031 #>  [7033]  7032  7033  7034  7035  7036  7037  7038  7039  7040  7041  7042  7043 #>  [7045]  7044  7045  7046  7047  7048  7049  7050  7051  7052  7053  7054  7055 #>  [7057]  7056  7057  7058  7059  7060  7061  7062  7063  7064  7065  7066  7067 #>  [7069]  7068  7069  7070  7071  7072  7073  7074  7075  7076  7077  7078  7079 #>  [7081]  7080  7081  7082  7083  7084  7085  7086  7087  7088  7089  7090  7091 #>  [7093]  7092  7093  7094  7095  7096  7097  7098  7099  7100  7101  7102  7103 #>  [7105]  7104  7105  7106  7107  7108  7109  7110  7111  7112  7113  7114  7115 #>  [7117]  7116  7117  7118  7119  7120  7121  7122  7123  7124  7125  7126  7127 #>  [7129]  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137  7138  7139 #>  [7141]  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150  7151 #>  [7153]  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 #>  [7165]  7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175 #>  [7177]  7176  7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187 #>  [7189]  7188  7189  7190  7191  7192  7193  7194  7195  7196  7197  7198  7199 #>  [7201]  7200  7201  7202  7203  7204  7205  7206  7207  7208  7209  7210  7211 #>  [7213]  7212  7213  7214  7215  7216  7217  7218  7219  7220  7221  7222  7223 #>  [7225]  7224  7225  7226  7227  7228  7229  7230  7231  7232  7233  7234  7235 #>  [7237]  7236  7237  7238  7239  7240  7241  7242  7243  7244  7245  7246  7247 #>  [7249]  7248  7249  7250  7251  7252  7253  7254  7255  7256  7257  7258  7259 #>  [7261]  7260  7261  7262  7263  7264  7265  7266  7267  7268  7269  7270  7271 #>  [7273]  7272  7273  7274  7275  7276  7277  7278  7279  7280  7281  7282  7283 #>  [7285]  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293  7294  7295 #>  [7297]  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306  7307 #>  [7309]  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 #>  [7321]  7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331 #>  [7333]  7332  7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343 #>  [7345]  7344  7345  7346  7347  7348  7349  7350  7351  7352  7353  7354  7355 #>  [7357]  7356  7357  7358  7359  7360  7361  7362  7363  7364  7365  7366  7367 #>  [7369]  7368  7369  7370  7371  7372  7373  7374  7375  7376  7377  7378  7379 #>  [7381]  7380  7381  7382  7383  7384  7385  7386  7387  7388  7389  7390  7391 #>  [7393]  7392  7393  7394  7395  7396  7397  7398  7399  7400  7401  7402  7403 #>  [7405]  7404  7405  7406  7407  7408  7409  7410  7411  7412  7413  7414  7415 #>  [7417]  7416  7417  7418  7419  7420  7421  7422  7423  7424  7425  7426  7427 #>  [7429]  7428  7429  7430  7431  7432  7433  7434  7435  7436  7437  7438  7439 #>  [7441]  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449  7450  7451 #>  [7453]  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462  7463 #>  [7465]  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 #>  [7477]  7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487 #>  [7489]  7488  7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499 #>  [7501]  7500  7501  7502  7503  7504  7505  7506  7507  7508  7509  7510  7511 #>  [7513]  7512  7513  7514  7515  7516  7517  7518  7519  7520  7521  7522  7523 #>  [7525]  7524  7525  7526  7527  7528  7529  7530  7531  7532  7533  7534  7535 #>  [7537]  7536  7537  7538  7539  7540  7541  7542  7543  7544  7545  7546  7547 #>  [7549]  7548  7549  7550  7551  7552  7553  7554  7555  7556  7557  7558  7559 #>  [7561]  7560  7561  7562  7563  7564  7565  7566  7567  7568  7569  7570  7571 #>  [7573]  7572  7573  7574  7575  7576  7577  7578  7579  7580  7581  7582  7583 #>  [7585]  7584  7585  7586  7587  7588  7589  7590  7591  7592  7593  7594  7595 #>  [7597]  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605  7606  7607 #>  [7609]  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618  7619 #>  [7621]  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 #>  [7633]  7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643 #>  [7645]  7644  7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655 #>  [7657]  7656  7657  7658  7659  7660  7661  7662  7663  7664  7665  7666  7667 #>  [7669]  7668  7669  7670  7671  7672  7673  7674  7675  7676  7677  7678  7679 #>  [7681]  7680  7681  7682  7683  7684  7685  7686  7687  7688  7689  7690  7691 #>  [7693]  7692  7693  7694  7695  7696  7697  7698  7699  7700  7701  7702  7703 #>  [7705]  7704  7705  7706  7707  7708  7709  7710  7711  7712  7713  7714  7715 #>  [7717]  7716  7717  7718  7719  7720  7721  7722  7723  7724  7725  7726  7727 #>  [7729]  7728  7729  7730  7731  7732  7733  7734  7735  7736  7737  7738  7739 #>  [7741]  7740  7741  7742  7743  7744  7745  7746  7747  7748  7749  7750  7751 #>  [7753]  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761  7762  7763 #>  [7765]  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774  7775 #>  [7777]  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 #>  [7789]  7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799 #>  [7801]  7800  7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811 #>  [7813]  7812  7813  7814  7815  7816  7817  7818  7819  7820  7821  7822  7823 #>  [7825]  7824  7825  7826  7827  7828  7829  7830  7831  7832  7833  7834  7835 #>  [7837]  7836  7837  7838  7839  7840  7841  7842  7843  7844  7845  7846  7847 #>  [7849]  7848  7849  7850  7851  7852  7853  7854  7855  7856  7857  7858  7859 #>  [7861]  7860  7861  7862  7863  7864  7865  7866  7867  7868  7869  7870  7871 #>  [7873]  7872  7873  7874  7875  7876  7877  7878  7879  7880  7881  7882  7883 #>  [7885]  7884  7885  7886  7887  7888  7889  7890  7891  7892  7893  7894  7895 #>  [7897]  7896  7897  7898  7899  7900  7901  7902  7903  7904  7905  7906  7907 #>  [7909]  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917  7918  7919 #>  [7921]  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930  7931 #>  [7933]  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 #>  [7945]  7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955 #>  [7957]  7956  7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967 #>  [7969]  7968  7969  7970  7971  7972  7973  7974  7975  7976  7977  7978  7979 #>  [7981]  7980  7981  7982  7983  7984  7985  7986  7987  7988  7989  7990  7991 #>  [7993]  7992  7993  7994  7995  7996  7997  7998  7999  8000  8001  8002  8003 #>  [8005]  8004  8005  8006  8007  8008  8009  8010  8011  8012  8013  8014  8015 #>  [8017]  8016  8017  8018  8019  8020  8021  8022  8023  8024  8025  8026  8027 #>  [8029]  8028  8029  8030  8031  8032  8033  8034  8035  8036  8037  8038  8039 #>  [8041]  8040  8041  8042  8043  8044  8045  8046  8047  8048  8049  8050  8051 #>  [8053]  8052  8053  8054  8055  8056  8057  8058  8059  8060  8061  8062  8063 #>  [8065]  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073  8074  8075 #>  [8077]  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086  8087 #>  [8089]  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 #>  [8101]  8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111 #>  [8113]  8112  8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123 #>  [8125]  8124  8125  8126  8127  8128  8129  8130  8131  8132  8133  8134  8135 #>  [8137]  8136  8137  8138  8139  8140  8141  8142  8143  8144  8145  8146  8147 #>  [8149]  8148  8149  8150  8151  8152  8153  8154  8155  8156  8157  8158  8159 #>  [8161]  8160  8161  8162  8163  8164  8165  8166  8167  8168  8169  8170  8171 #>  [8173]  8172  8173  8174  8175  8176  8177  8178  8179  8180  8181  8182  8183 #>  [8185]  8184  8185  8186  8187  8188  8189  8190  8191  8192  8193  8194  8195 #>  [8197]  8196  8197  8198  8199  8200  8201  8202  8203  8204  8205  8206  8207 #>  [8209]  8208  8209  8210  8211  8212  8213  8214  8215  8216  8217  8218  8219 #>  [8221]  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229  8230  8231 #>  [8233]  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242  8243 #>  [8245]  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 #>  [8257]  8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267 #>  [8269]  8268  8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279 #>  [8281]  8280  8281  8282  8283  8284  8285  8286  8287  8288  8289  8290  8291 #>  [8293]  8292  8293  8294  8295  8296  8297  8298  8299  8300  8301  8302  8303 #>  [8305]  8304  8305  8306  8307  8308  8309  8310  8311  8312  8313  8314  8315 #>  [8317]  8316  8317  8318  8319  8320  8321  8322  8323  8324  8325  8326  8327 #>  [8329]  8328  8329  8330  8331  8332  8333  8334  8335  8336  8337  8338  8339 #>  [8341]  8340  8341  8342  8343  8344  8345  8346  8347  8348  8349  8350  8351 #>  [8353]  8352  8353  8354  8355  8356  8357  8358  8359  8360  8361  8362  8363 #>  [8365]  8364  8365  8366  8367  8368  8369  8370  8371  8372  8373  8374  8375 #>  [8377]  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385  8386  8387 #>  [8389]  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398  8399 #>  [8401]  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 #>  [8413]  8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423 #>  [8425]  8424  8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435 #>  [8437]  8436  8437  8438  8439  8440  8441  8442  8443  8444  8445  8446  8447 #>  [8449]  8448  8449  8450  8451  8452  8453  8454  8455  8456  8457  8458  8459 #>  [8461]  8460  8461  8462  8463  8464  8465  8466  8467  8468  8469  8470  8471 #>  [8473]  8472  8473  8474  8475  8476  8477  8478  8479  8480  8481  8482  8483 #>  [8485]  8484  8485  8486  8487  8488  8489  8490  8491  8492  8493  8494  8495 #>  [8497]  8496  8497  8498  8499  8500  8501  8502  8503  8504  8505  8506  8507 #>  [8509]  8508  8509  8510  8511  8512  8513  8514  8515  8516  8517  8518  8519 #>  [8521]  8520  8521  8522  8523  8524  8525  8526  8527  8528  8529  8530  8531 #>  [8533]  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541  8542  8543 #>  [8545]  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554  8555 #>  [8557]  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 #>  [8569]  8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579 #>  [8581]  8580  8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591 #>  [8593]  8592  8593  8594  8595  8596  8597  8598  8599  8600  8601  8602  8603 #>  [8605]  8604  8605  8606  8607  8608  8609  8610  8611  8612  8613  8614  8615 #>  [8617]  8616  8617  8618  8619  8620  8621  8622  8623  8624  8625  8626  8627 #>  [8629]  8628  8629  8630  8631  8632  8633  8634  8635  8636  8637  8638  8639 #>  [8641]  8640  8641  8642  8643  8644  8645  8646  8647  8648  8649  8650  8651 #>  [8653]  8652  8653  8654  8655  8656  8657  8658  8659  8660  8661  8662  8663 #>  [8665]  8664  8665  8666  8667  8668  8669  8670  8671  8672  8673  8674  8675 #>  [8677]  8676  8677  8678  8679  8680  8681  8682  8683  8684  8685  8686  8687 #>  [8689]  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697  8698  8699 #>  [8701]  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710  8711 #>  [8713]  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 #>  [8725]  8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735 #>  [8737]  8736  8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747 #>  [8749]  8748  8749  8750  8751  8752  8753  8754  8755  8756  8757  8758  8759 #>  [8761]  8760  8761  8762  8763  8764  8765  8766  8767  8768  8769  8770  8771 #>  [8773]  8772  8773  8774  8775  8776  8777  8778  8779  8780  8781  8782  8783 #>  [8785]  8784  8785  8786  8787  8788  8789  8790  8791  8792  8793  8794  8795 #>  [8797]  8796  8797  8798  8799  8800  8801  8802  8803  8804  8805  8806  8807 #>  [8809]  8808  8809  8810  8811  8812  8813  8814  8815  8816  8817  8818  8819 #>  [8821]  8820  8821  8822  8823  8824  8825  8826  8827  8828  8829  8830  8831 #>  [8833]  8832  8833  8834  8835  8836  8837  8838  8839  8840  8841  8842  8843 #>  [8845]  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853  8854  8855 #>  [8857]  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866  8867 #>  [8869]  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 #>  [8881]  8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891 #>  [8893]  8892  8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903 #>  [8905]  8904  8905  8906  8907  8908  8909  8910  8911  8912  8913  8914  8915 #>  [8917]  8916  8917  8918  8919  8920  8921  8922  8923  8924  8925  8926  8927 #>  [8929]  8928  8929  8930  8931  8932  8933  8934  8935  8936  8937  8938  8939 #>  [8941]  8940  8941  8942  8943  8944  8945  8946  8947  8948  8949  8950  8951 #>  [8953]  8952  8953  8954  8955  8956  8957  8958  8959  8960  8961  8962  8963 #>  [8965]  8964  8965  8966  8967  8968  8969  8970  8971  8972  8973  8974  8975 #>  [8977]  8976  8977  8978  8979  8980  8981  8982  8983  8984  8985  8986  8987 #>  [8989]  8988  8989  8990  8991  8992  8993  8994  8995  8996  8997  8998  8999 #>  [9001]  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009  9010  9011 #>  [9013]  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022  9023 #>  [9025]  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 #>  [9037]  9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047 #>  [9049]  9048  9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059 #>  [9061]  9060  9061  9062  9063  9064  9065  9066  9067  9068  9069  9070  9071 #>  [9073]  9072  9073  9074  9075  9076  9077  9078  9079  9080  9081  9082  9083 #>  [9085]  9084  9085  9086  9087  9088  9089  9090  9091  9092  9093  9094  9095 #>  [9097]  9096  9097  9098  9099  9100  9101  9102  9103  9104  9105  9106  9107 #>  [9109]  9108  9109  9110  9111  9112  9113  9114  9115  9116  9117  9118  9119 #>  [9121]  9120  9121  9122  9123  9124  9125  9126  9127  9128  9129  9130  9131 #>  [9133]  9132  9133  9134  9135  9136  9137  9138  9139  9140  9141  9142  9143 #>  [9145]  9144  9145  9146  9147  9148  9149  9150  9151  9152  9153  9154  9155 #>  [9157]  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165  9166  9167 #>  [9169]  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178  9179 #>  [9181]  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 #>  [9193]  9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203 #>  [9205]  9204  9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215 #>  [9217]  9216  9217  9218  9219  9220  9221  9222  9223  9224  9225  9226  9227 #>  [9229]  9228  9229  9230  9231  9232  9233  9234  9235  9236  9237  9238  9239 #>  [9241]  9240  9241  9242  9243  9244  9245  9246  9247  9248  9249  9250  9251 #>  [9253]  9252  9253  9254  9255  9256  9257  9258  9259  9260  9261  9262  9263 #>  [9265]  9264  9265  9266  9267  9268  9269  9270  9271  9272  9273  9274  9275 #>  [9277]  9276  9277  9278  9279  9280  9281  9282  9283  9284  9285  9286  9287 #>  [9289]  9288  9289  9290  9291  9292  9293  9294  9295  9296  9297  9298  9299 #>  [9301]  9300  9301  9302  9303  9304  9305  9306  9307  9308  9309  9310  9311 #>  [9313]  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321  9322  9323 #>  [9325]  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334  9335 #>  [9337]  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 #>  [9349]  9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359 #>  [9361]  9360  9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371 #>  [9373]  9372  9373  9374  9375  9376  9377  9378  9379  9380  9381  9382  9383 #>  [9385]  9384  9385  9386  9387  9388  9389  9390  9391  9392  9393  9394  9395 #>  [9397]  9396  9397  9398  9399  9400  9401  9402  9403  9404  9405  9406  9407 #>  [9409]  9408  9409  9410  9411  9412  9413  9414  9415  9416  9417  9418  9419 #>  [9421]  9420  9421  9422  9423  9424  9425  9426  9427  9428  9429  9430  9431 #>  [9433]  9432  9433  9434  9435  9436  9437  9438  9439  9440  9441  9442  9443 #>  [9445]  9444  9445  9446  9447  9448  9449  9450  9451  9452  9453  9454  9455 #>  [9457]  9456  9457  9458  9459  9460  9461  9462  9463  9464  9465  9466  9467 #>  [9469]  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477  9478  9479 #>  [9481]  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490  9491 #>  [9493]  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 #>  [9505]  9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515 #>  [9517]  9516  9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527 #>  [9529]  9528  9529  9530  9531  9532  9533  9534  9535  9536  9537  9538  9539 #>  [9541]  9540  9541  9542  9543  9544  9545  9546  9547  9548  9549  9550  9551 #>  [9553]  9552  9553  9554  9555  9556  9557  9558  9559  9560  9561  9562  9563 #>  [9565]  9564  9565  9566  9567  9568  9569  9570  9571  9572  9573  9574  9575 #>  [9577]  9576  9577  9578  9579  9580  9581  9582  9583  9584  9585  9586  9587 #>  [9589]  9588  9589  9590  9591  9592  9593  9594  9595  9596  9597  9598  9599 #>  [9601]  9600  9601  9602  9603  9604  9605  9606  9607  9608  9609  9610  9611 #>  [9613]  9612  9613  9614  9615  9616  9617  9618  9619  9620  9621  9622  9623 #>  [9625]  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633  9634  9635 #>  [9637]  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646  9647 #>  [9649]  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 #>  [9661]  9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671 #>  [9673]  9672  9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683 #>  [9685]  9684  9685  9686  9687  9688  9689  9690  9691  9692  9693  9694  9695 #>  [9697]  9696  9697  9698  9699  9700  9701  9702  9703  9704  9705  9706  9707 #>  [9709]  9708  9709  9710  9711  9712  9713  9714  9715  9716  9717  9718  9719 #>  [9721]  9720  9721  9722  9723  9724  9725  9726  9727  9728  9729  9730  9731 #>  [9733]  9732  9733  9734  9735  9736  9737  9738  9739  9740  9741  9742  9743 #>  [9745]  9744  9745  9746  9747  9748  9749  9750  9751  9752  9753  9754  9755 #>  [9757]  9756  9757  9758  9759  9760  9761  9762  9763  9764  9765  9766  9767 #>  [9769]  9768  9769  9770  9771  9772  9773  9774  9775  9776  9777  9778  9779 #>  [9781]  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789  9790  9791 #>  [9793]  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802  9803 #>  [9805]  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 #>  [9817]  9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827 #>  [9829]  9828  9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839 #>  [9841]  9840  9841  9842  9843  9844  9845  9846  9847  9848  9849  9850  9851 #>  [9853]  9852  9853  9854  9855  9856  9857  9858  9859  9860  9861  9862  9863 #>  [9865]  9864  9865  9866  9867  9868  9869  9870  9871  9872  9873  9874  9875 #>  [9877]  9876  9877  9878  9879  9880  9881  9882  9883  9884  9885  9886  9887 #>  [9889]  9888  9889  9890  9891  9892  9893  9894  9895  9896  9897  9898  9899 #>  [9901]  9900  9901  9902  9903  9904  9905  9906  9907  9908  9909  9910  9911 #>  [9913]  9912  9913  9914  9915  9916  9917  9918  9919  9920  9921  9922  9923 #>  [9925]  9924  9925  9926  9927  9928  9929  9930  9931  9932  9933  9934  9935 #>  [9937]  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945  9946  9947 #>  [9949]  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958  9959 #>  [9961]  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 #>  [9973]  9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983 #>  [9985]  9984  9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995 #>  [9997]  9996  9997  9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 #> [10009] 10008 10009 10010 10011 10012 10013 10014 10015 10016 10017 10018 10019 #> [10021] 10020 10021 10022 10023 10024 10025 10026 10027 10028 10029 10030 10031 #> [10033] 10032 10033 10034 10035 10036 10037 10038 10039 10040 10041 10042 10043 #> [10045] 10044 10045 10046 10047 10048 10049 10050 10051 10052 10053 10054 10055 #> [10057] 10056 10057 10058 10059 10060 10061 10062 10063 10064 10065 10066 10067 #> [10069] 10068 10069 10070 10071 10072 10073 10074 10075 10076 10077 10078 10079 #> [10081] 10080 10081 10082 10083 10084 10085 10086 10087 10088 10089 10090 10091 #> [10093] 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 10102 10103 #> [10105] 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 10115 #> [10117] 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 #> [10129] 10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 #> [10141] 10140 10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 #> [10153] 10152 10153 10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 #> [10165] 10164 10165 10166 10167 10168 10169 10170 10171 10172 10173 10174 10175 #> [10177] 10176 10177 10178 10179 10180 10181 10182 10183 10184 10185 10186 10187 #> [10189] 10188 10189 10190 10191 10192 10193 10194 10195 10196 10197 10198 10199 #> [10201] 10200 10201 10202 10203 10204 10205 10206 10207 10208 10209 10210 10211 #> [10213] 10212 10213 10214 10215 10216 10217 10218 10219 10220 10221 10222 10223 #> [10225] 10224 10225 10226 10227 10228 10229 10230 10231 10232 10233 10234 10235 #> [10237] 10236 10237 10238 10239 10240 10241 10242 10243 10244 10245 10246 10247 #> [10249] 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 10258 10259 #> [10261] 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 10271 #> [10273] 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 #> [10285] 10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 #> [10297] 10296 10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 #> [10309] 10308 10309 10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 #> [10321] 10320 10321 10322 10323 10324 10325 10326 10327 10328 10329 10330 10331 #> [10333] 10332 10333 10334 10335 10336 10337 10338 10339 10340 10341 10342 10343 #> [10345] 10344 10345 10346 10347 10348 10349 10350 10351 10352 10353 10354 10355 #> [10357] 10356 10357 10358 10359 10360 10361 10362 10363 10364 10365 10366 10367 #> [10369] 10368 10369 10370 10371 10372 10373 10374 10375 10376 10377 10378 10379 #> [10381] 10380 10381 10382 10383 10384 10385 10386 10387 10388 10389 10390 10391 #> [10393] 10392 10393 10394 10395 10396 10397 10398 10399 10400 10401 10402 10403 #> [10405] 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 10414 10415 #> [10417] 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 10427 #> [10429] 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 #> [10441] 10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 #> [10453] 10452 10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 #> [10465] 10464 10465 10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 #> [10477] 10476 10477 10478 10479 10480 10481 10482 10483 10484 10485 10486 10487 #> [10489] 10488 10489 10490 10491 10492 10493 10494 10495 10496 10497 10498 10499 #> [10501] 10500 10501 10502 10503 10504 10505 10506 10507 10508 10509 10510 10511 #> [10513] 10512 10513 10514 10515 10516 10517 10518 10519 10520 10521 10522 10523 #> [10525] 10524 10525 10526 10527 10528 10529 10530 10531 10532 10533 10534 10535 #> [10537] 10536 10537 10538 10539 10540 10541 10542 10543 10544 10545 10546 10547 #> [10549] 10548 10549 10550 10551 10552 10553 10554 10555 10556 10557 10558 10559 #> [10561] 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 10570 10571 #> [10573] 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 10583 #> [10585] 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 #> [10597] 10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 #> [10609] 10608 10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 #> [10621] 10620 10621 10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 #> [10633] 10632 10633 10634 10635 10636 10637 10638 10639 10640 10641 10642 10643 #> [10645] 10644 10645 10646 10647 10648 10649 10650 10651 10652 10653 10654 10655 #> [10657] 10656 10657 10658 10659 10660 10661 10662 10663 10664 10665 10666 10667 #> [10669] 10668 10669 10670 10671 10672 10673 10674 10675 10676 10677 10678 10679 #> [10681] 10680 10681 10682 10683 10684 10685 10686 10687 10688 10689 10690 10691 #> [10693] 10692 10693 10694 10695 10696 10697 10698 10699 10700 10701 10702 10703 #> [10705] 10704 10705 10706 10707 10708 10709 10710 10711 10712 10713 10714 10715 #> [10717] 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 10726 10727 #> [10729] 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 10739 #> [10741] 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 #> [10753] 10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 #> [10765] 10764 10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 #> [10777] 10776 10777 10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 #> [10789] 10788 10789 10790 10791 10792 10793 10794 10795 10796 10797 10798 10799 #> [10801] 10800 10801 10802 10803 10804 10805 10806 10807 10808 10809 10810 10811 #> [10813] 10812 10813 10814 10815 10816 10817 10818 10819 10820 10821 10822 10823 #> [10825] 10824 10825 10826 10827 10828 10829 10830 10831 10832 10833 10834 10835 #> [10837] 10836 10837 10838 10839 10840 10841 10842 10843 10844 10845 10846 10847 #> [10849] 10848 10849 10850 10851 10852 10853 10854 10855 10856 10857 10858 10859 #> [10861] 10860 10861 10862 10863 10864 10865 10866 10867 10868 10869 10870 10871 #> [10873] 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 10882 10883 #> [10885] 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 10895 #> [10897] 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 #> [10909] 10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 #> [10921] 10920 10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 #> [10933] 10932 10933 10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 #> [10945] 10944 10945 10946 10947 10948 10949 10950 10951 10952 10953 10954 10955 #> [10957] 10956 10957 10958 10959 10960 10961 10962 10963 10964 10965 10966 10967 #> [10969] 10968 10969 10970 10971 10972 10973 10974 10975 10976 10977 10978 10979 #> [10981] 10980 10981 10982 10983 10984 10985 10986 10987 10988 10989 10990 10991 #> [10993] 10992 10993 10994 10995 10996 10997 10998 10999 11000 11001 11002 11003 #> [11005] 11004 11005 11006 11007 11008 11009 11010 11011 11012 11013 11014 11015 #> [11017] 11016 11017 11018 11019 11020 11021 11022 11023 11024 11025 11026 11027 #> [11029] 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 11038 11039 #> [11041] 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 11051 #> [11053] 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 #> [11065] 11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 #> [11077] 11076 11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 #> [11089] 11088 11089 11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 #> [11101] 11100 11101 11102 11103 11104 11105 11106 11107 11108 11109 11110 11111 #> [11113] 11112 11113 11114 11115 11116 11117 11118 11119 11120 11121 11122 11123 #> [11125] 11124 11125 11126 11127 11128 11129 11130 11131 11132 11133 11134 11135 #> [11137] 11136 11137 11138 11139 11140 11141 11142 11143 11144 11145 11146 11147 #> [11149] 11148 11149 11150 11151 11152 11153 11154 11155 11156 11157 11158 11159 #> [11161] 11160 11161 11162 11163 11164 11165 11166 11167 11168 11169 11170 11171 #> [11173] 11172 11173 11174 11175 11176 11177 11178 11179 11180 11181 11182 11183 #> [11185] 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 11194 11195 #> [11197] 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 11207 #> [11209] 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 #> [11221] 11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 #> [11233] 11232 11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 #> [11245] 11244 11245 11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 #> [11257] 11256 11257 11258 11259 11260 11261 11262 11263 11264 11265 11266 11267 #> [11269] 11268 11269 11270 11271 11272 11273 11274 11275 11276 11277 11278 11279 #> [11281] 11280 11281 11282 11283 11284 11285 11286 11287 11288 11289 11290 11291 #> [11293] 11292 11293 11294 11295 11296 11297 11298 11299 11300 11301 11302 11303 #> [11305] 11304 11305 11306 11307 11308 11309 11310 11311 11312 11313 11314 11315 #> [11317] 11316 11317 11318 11319 11320 11321 11322 11323 11324 11325 11326 11327 #> [11329] 11328 11329 11330 11331 11332 11333 11334 11335 11336 11337 11338 11339 #> [11341] 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 11350 11351 #> [11353] 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 11363 #> [11365] 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 #> [11377] 11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 #> [11389] 11388 11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 #> [11401] 11400 11401 11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 #> [11413] 11412 11413 11414 11415 11416 11417 11418 11419 11420 11421 11422 11423 #> [11425] 11424 11425 11426 11427 11428 11429 11430 11431 11432 11433 11434 11435 #> [11437] 11436 11437 11438 11439 11440 11441 11442 11443 11444 11445 11446 11447 #> [11449] 11448 11449 11450 11451 11452 11453 11454 11455 11456 11457 11458 11459 #> [11461] 11460 11461 11462 11463 11464 11465 11466 11467 11468 11469 11470 11471 #> [11473] 11472 11473 11474 11475 11476 11477 11478 11479 11480 11481 11482 11483 #> [11485] 11484 11485 11486 11487 11488 11489 11490 11491 11492 11493 11494 11495 #> [11497] 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 11506 11507 #> [11509] 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 11519 #> [11521] 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 #> [11533] 11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 #> [11545] 11544 11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 #> [11557] 11556 11557 11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 #> [11569] 11568 11569 11570 11571 11572 11573 11574 11575 11576 11577 11578 11579 #> [11581] 11580 11581 11582 11583 11584 11585 11586 11587 11588 11589 11590 11591 #> [11593] 11592 11593 11594 11595 11596 11597 11598 11599 11600 11601 11602 11603 #> [11605] 11604 11605 11606 11607 11608 11609 11610 11611 11612 11613 11614 11615 #> [11617] 11616 11617 11618 11619 11620 11621 11622 11623 11624 11625 11626 11627 #> [11629] 11628 11629 11630 11631 11632 11633 11634 11635 11636 11637 11638 11639 #> [11641] 11640 11641 11642 11643 11644 11645 11646 11647 11648 11649 11650 11651 #> [11653] 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 11662 11663 #> [11665] 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 11675 #> [11677] 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 #> [11689] 11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 #> [11701] 11700 11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 #> [11713] 11712 11713 11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 #> [11725] 11724 11725 11726 11727 11728 11729 11730 11731 11732 11733 11734 11735 #> [11737] 11736 11737 11738 11739 11740 11741 11742 11743 11744 11745 11746 11747 #> [11749] 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 #> [11761] 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11770 11771 #> [11773] 11772 11773 11774 11775 11776 11777 11778 11779 11780 11781 11782 11783 #> [11785] 11784 11785 11786 11787 11788 11789 11790 11791 11792 11793 11794 11795 #> [11797] 11796 11797 11798 11799 11800 11801 11802 11803 11804 11805 11806 11807 #> [11809] 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 11818 11819 #> [11821] 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 11831 #> [11833] 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 #> [11845] 11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 #> [11857] 11856 11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 #> [11869] 11868 11869 11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 #> [11881] 11880 11881 11882 11883 11884 11885 11886 11887 11888 11889 11890 11891 #> [11893] 11892 11893 11894 11895 11896 11897 11898 11899 11900 11901 11902 11903 #> [11905] 11904 11905 11906 11907 11908 11909 11910 11911 11912 11913 11914 11915 #> [11917] 11916 11917 11918 11919 11920 11921 11922 11923 11924 11925 11926 11927 #> [11929] 11928 11929 11930 11931 11932 11933 11934 11935 11936 11937 11938 11939 #> [11941] 11940 11941 11942 11943 11944 11945 11946 11947 11948 11949 11950 11951 #> [11953] 11952 11953 11954 11955 11956 11957 11958 11959 11960 11961 11962 11963 #> [11965] 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 11974 11975 #> [11977] 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 11987 #> [11989] 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 #> [12001] 12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 #> [12013] 12012 12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 #> [12025] 12024 12025 12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 #> [12037] 12036 12037 12038 12039 12040 12041 12042 12043 12044 12045 12046 12047 #> [12049] 12048 12049 12050 12051 12052 12053 12054 12055 12056 12057 12058 12059 #> [12061] 12060 12061 12062 12063 12064 12065 12066 12067 12068 12069 12070 12071 #> [12073] 12072 12073 12074 12075 12076 12077 12078 12079 12080 12081 12082 12083 #> [12085] 12084 12085 12086 12087 12088 12089 12090 12091 12092 12093 12094 12095 #> [12097] 12096 12097 12098 12099 12100 12101 12102 12103 12104 12105 12106 12107 #> [12109] 12108 12109 12110 12111 12112 12113 12114 12115 12116 12117 12118 12119 #> [12121] 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 12130 12131 #> [12133] 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 12143 #> [12145] 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 #> [12157] 12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 #> [12169] 12168 12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 #> [12181] 12180 12181 12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 #> [12193] 12192 12193 12194 12195 12196 12197 12198 12199 12200 12201 12202 12203 #> [12205] 12204 12205 12206 12207 12208 12209 12210 12211 12212 12213 12214 12215 #> [12217] 12216 12217 12218 12219 12220 12221 12222 12223 12224 12225 12226 12227 #> [12229] 12228 12229 12230 12231 12232 12233 12234 12235 12236 12237 12238 12239 #> [12241] 12240 12241 12242 12243 12244 12245 12246 12247 12248 12249 12250 12251 #> [12253] 12252 12253 12254 12255 12256 12257 12258 12259 12260 12261 12262 12263 #> [12265] 12264 12265 12266 12267 12268 12269 12270 12271 12272 12273 12274 12275 #> [12277] 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 12286 12287 #> [12289] 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 12299 #> [12301] 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 #> [12313] 12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 #> [12325] 12324 12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 #> [12337] 12336 12337 12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 #> [12349] 12348 12349 12350 12351 12352 12353 12354 12355 12356 12357 12358 12359 #> [12361] 12360 12361 12362 12363 12364 12365 12366 12367 12368 12369 12370 12371 #> [12373] 12372 12373 12374 12375 12376 12377 12378 12379 12380 12381 12382 12383 #> [12385] 12384 12385 12386 12387 12388 12389 12390 12391 12392 12393 12394 12395 #> [12397] 12396 12397 12398 12399 12400 12401 12402 12403 12404 12405 12406 12407 #> [12409] 12408 12409 12410 12411 12412 12413 12414 12415 12416 12417 12418 12419 #> [12421] 12420 12421 12422 12423 12424 12425 12426 12427 12428 12429 12430 12431 #> [12433] 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 12442 12443 #> [12445] 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 12455 #> [12457] 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 #> [12469] 12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 #> [12481] 12480 12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 #> [12493] 12492 12493 12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 #> [12505] 12504 12505 12506 12507 12508 12509 12510 12511 12512 12513 12514 12515 #> [12517] 12516 12517 12518 12519 12520 12521 12522 12523 12524 12525 12526 12527 #> [12529] 12528 12529 12530 12531 12532 12533 12534 12535 12536 12537 12538 12539 #> [12541] 12540 12541 12542 12543 12544 12545 12546 12547 12548 12549 12550 12551 #> [12553] 12552 12553 12554 12555 12556 12557 12558 12559 12560 12561 12562 12563 #> [12565] 12564 12565 12566 12567 12568 12569 12570 12571 12572 12573 12574 12575 #> [12577] 12576 12577 12578 12579 12580 12581 12582 12583 12584 12585 12586 12587 #> [12589] 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 12598 12599 #> [12601] 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 12611 #> [12613] 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 #> [12625] 12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 #> [12637] 12636 12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 #> [12649] 12648 12649 12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 #> [12661] 12660 12661 12662 12663 12664 12665 12666 12667 12668 12669 12670 12671 #> [12673] 12672 12673 12674 12675 12676 12677 12678 12679 12680 12681 12682 12683 #> [12685] 12684 12685 12686 12687 12688 12689 12690 12691 12692 12693 12694 12695 #> [12697] 12696 12697 12698 12699 12700 12701 12702 12703 12704 12705 12706 12707 #> [12709] 12708 12709 12710 12711 12712 12713 12714 12715 12716 12717 12718 12719 #> [12721] 12720 12721 12722 12723 12724 12725 12726 12727 12728 12729 12730 12731 #> [12733] 12732 12733 12734 12735 12736 12737 12738 12739 12740 12741 12742 12743 #> [12745] 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 12754 12755 #> [12757] 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 12767 #> [12769] 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 #> [12781] 12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 #> [12793] 12792 12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 #> [12805] 12804 12805 12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 #> [12817] 12816 12817 12818 12819 12820 12821 12822 12823 12824 12825 12826 12827 #> [12829] 12828 12829 12830 12831 12832 12833 12834 12835 12836 12837 12838 12839 #> [12841] 12840 12841 12842 12843 12844 12845 12846 12847 12848 12849 12850 12851 #> [12853] 12852 12853 12854 12855 12856 12857 12858 12859 12860 12861 12862 12863 #> [12865] 12864 12865 12866 12867 12868 12869 12870 12871 12872 12873 12874 12875 #> [12877] 12876 12877 12878 12879 12880 12881 12882 12883 12884 12885 12886 12887 #> [12889] 12888 12889 12890 12891 12892 12893 12894 12895 12896 12897 12898 12899 #> [12901] 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 12910 12911 #> [12913] 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 12923 #> [12925] 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 #> [12937] 12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 #> [12949] 12948 12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 #> [12961] 12960 12961 12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 #> [12973] 12972 12973 12974 12975 12976 12977 12978 12979 12980 12981 12982 12983 #> [12985] 12984 12985 12986 12987 12988 12989 12990 12991 12992 12993 12994 12995 #> [12997] 12996 12997 12998 12999 13000 13001 13002 13003 13004 13005 13006 13007 #> [13009] 13008 13009 13010 13011 13012 13013 13014 13015 13016 13017 13018 13019 #> [13021] 13020 13021 13022 13023 13024 13025 13026 13027 13028 13029 13030 13031 #> [13033] 13032 13033 13034 13035 13036 13037 13038 13039 13040 13041 13042 13043 #> [13045] 13044 13045 13046 13047 13048 13049 13050 13051 13052 13053 13054 13055 #> [13057] 13056 13057 13058 13059 13060 13061 13062 13063 13064 13065 13066 13067 #> [13069] 13068 13069 13070 13071 13072 13073 13074 13075 13076 13077 13078 13079 #> [13081] 13080 13081 13082 13083 13084 13085 13086 13087 13088 13089 13090 13091 #> [13093] 13092 13093 13094 13095 13096 13097 13098 13099 13100 13101 13102 13103 #> [13105] 13104 13105 13106 13107 13108 13109 13110 13111 13112 13113 13114 13115 #> [13117] 13116 13117 13118 13119 13120 13121 13122 13123 13124 13125 13126 13127 #> [13129] 13128 13129 13130 13131 13132 13133 13134 13135 13136 13137 13138 13139 #> [13141] 13140 13141 13142 13143 13144 13145 13146 13147 13148 13149 13150 13151 #> [13153] 13152 13153 13154 13155 13156 13157 13158 13159 13160 13161 13162 13163 #> [13165] 13164 13165 13166 13167 13168 13169 13170 13171 13172 13173 13174 13175 #> [13177] 13176 13177 13178 13179 13180 13181 13182 13183 13184 13185 13186 13187 #> [13189] 13188 13189 13190 13191 13192 13193 13194 13195 13196 13197 13198 13199 #> [13201] 13200 13201 13202 13203 13204 13205 13206 13207 13208 13209 13210 13211 #> [13213] 13212 13213 13214 13215 13216 13217 13218 13219 13220 13221 13222 13223 #> [13225] 13224 13225 13226 13227 13228 13229 13230 13231 13232 13233 13234 13235 #> [13237] 13236 13237 13238 13239 13240 13241 13242 13243 13244 13245 13246 13247 #> [13249] 13248 13249 13250 13251 13252 13253 13254 13255 13256 13257 13258 13259 #> [13261] 13260 13261 13262 13263 13264 13265 13266 13267 13268 13269 13270 13271 #> [13273] 13272 13273 13274 13275 13276 13277 13278 13279 13280 13281 13282 13283 #> [13285] 13284 13285 13286 13287 13288 13289 13290 13291 13292 13293 13294 13295 #> [13297] 13296 13297 13298 13299 13300 13301 13302 13303 13304 13305 13306 13307 #> [13309] 13308 13309 13310 13311 13312 13313 13314 13315 13316 13317 13318 13319 #> [13321] 13320 13321 13322 13323 13324 13325 13326 13327 13328 13329 13330 13331 #> [13333] 13332 13333 13334 13335 13336 13337 13338 13339 13340 13341 13342 13343 #> [13345] 13344 13345 13346 13347 13348 13349 13350 13351 13352 13353 13354 13355 #> [13357] 13356 13357 13358 13359 13360 13361 13362 13363 13364 13365 13366 13367 #> [13369] 13368 13369 13370 13371 13372 13373 13374 13375 13376 13377 13378 13379 #> [13381] 13380 13381 13382 13383 13384 13385 13386 13387 13388 13389 13390 13391 #> [13393] 13392 13393 13394 13395 13396 13397 13398 13399 13400 13401 13402 13403 #> [13405] 13404 13405 13406 13407 13408 13409 13410 13411 13412 13413 13414 13415 #> [13417] 13416 13417 13418 13419 13420 13421 13422 13423 13424 13425 13426 13427 #> [13429] 13428 13429 13430 13431 13432 13433 13434 13435 13436 13437 13438 13439 #> [13441] 13440 13441 13442 13443 13444 13445 13446 13447 13448 13449 13450 13451 #> [13453] 13452 13453 13454 13455 13456 13457 13458 13459 13460 13461 13462 13463 #> [13465] 13464 13465 13466 13467 13468 13469 13470 13471 13472 13473 13474 13475 #> [13477] 13476 13477 13478 13479 13480 13481 13482 13483 13484 13485 13486 13487 #> [13489] 13488 13489 13490 13491 13492 13493 13494 13495 13496 13497 13498 13499 #> [13501] 13500 13501 13502 13503 13504 13505 13506 13507 13508 13509 13510 13511 #> [13513] 13512 13513 13514 13515 13516 13517 13518 13519 13520 13521 13522 13523 #> [13525] 13524 13525 13526 13527 13528 13529 13530 13531 13532 13533 13534 13535 #> [13537] 13536 13537 13538 13539 13540 13541 13542 13543 13544 13545 13546 13547 #> [13549] 13548 13549 13550 13551 13552 13553 13554 13555 13556 13557 13558 13559 #> [13561] 13560 13561 13562 13563 13564 13565 13566 13567 13568 13569 13570 13571 #> [13573] 13572 13573 13574 13575 13576 13577 13578 13579 13580 13581 13582 13583 #> [13585] 13584 13585 13586 13587 13588 13589 13590 13591 13592 13593 13594 13595 #> [13597] 13596 13597 13598 13599 13600 13601 13602 13603 13604 13605 13606 13607 #> [13609] 13608 13609 13610 13611 13612 13613 13614 13615 13616 13617 13618 13619 #> [13621] 13620 13621 13622 13623 13624 13625 13626 13627 13628 13629 13630 13631 #> [13633] 13632 13633 13634 13635 13636 13637 13638 13639 13640 13641 13642 13643 #> [13645] 13644 13645 13646 13647 13648 13649 13650 13651 13652 13653 13654 13655 #> [13657] 13656 13657 13658 13659 13660 13661 13662 13663 13664 13665 13666 13667 #> [13669] 13668 13669 13670 13671 13672 13673 13674 13675 13676 13677 13678 13679 #> [13681] 13680 13681 13682 13683 13684 13685 13686 13687 13688 13689 13690 13691 #> [13693] 13692 13693 13694 13695 13696 13697 13698 13699 13700 13701 13702 13703 #> [13705] 13704 13705 13706 13707 13708 13709 13710 13711 13712 13713 13714 13715 #> [13717] 13716 13717 13718 13719 13720 13721 13722 13723 13724 13725 13726 13727 #> [13729] 13728 13729 13730 13731 13732 13733 13734 13735 13736 13737 13738 13739 #> [13741] 13740 13741 13742 13743 13744 13745 13746 13747 13748 13749 13750 13751 #> [13753] 13752 13753 13754 13755 13756 13757 13758 13759 13760 13761 13762 13763 #> [13765] 13764 13765 13766 13767 13768 13769 13770 13771 13772 13773 13774 13775 #> [13777] 13776 13777 13778 13779 13780 13781 13782 13783 13784 13785 13786 13787 #> [13789] 13788 13789 13790 13791 13792 13793 13794 13795 13796 13797 13798 13799 #> [13801] 13800 13801 13802 13803 13804 13805 13806 13807 13808 13809 13810 13811 #> [13813] 13812 13813 13814 13815 13816 13817 13818 13819 13820 13821 13822 13823 #> [13825] 13824 13825 13826 13827 13828 13829 13830 13831 13832 13833 13834 13835 #> [13837] 13836 13837 13838 13839 13840 13841 13842 13843 13844 13845 13846 13847 #> [13849] 13848 13849 13850 13851 13852 13853 13854 13855 13856 13857 13858 13859 #> [13861] 13860 13861 13862 13863 13864 13865 13866 13867 13868 13869 13870 13871 #> [13873] 13872 13873 13874 13875 13876 13877 13878 13879 13880 13881 13882 13883 #> [13885] 13884 13885 13886 13887 13888 13889 13890 13891 13892 13893 13894 13895 #> [13897] 13896 13897 13898 13899 13900 13901 13902 13903 13904 13905 13906 13907 #> [13909] 13908 13909 13910 13911 13912 13913 13914 13915 13916 13917 13918 13919 #> [13921] 13920 13921 13922 13923 13924 13925 13926 13927 13928 13929 13930 13931 #> [13933] 13932 13933 13934 13935 13936 13937 13938 13939 13940 13941 13942 13943 #> [13945] 13944 13945 13946 13947 13948 13949 13950 13951 13952 13953 13954 13955 #> [13957] 13956 13957 13958 13959 13960 13961 13962 13963 13964 13965 13966 13967 #> [13969] 13968 13969 13970 13971 13972 13973 13974 13975 13976 13977 13978 13979 #> [13981] 13980 13981 13982 13983 13984 13985 13986 13987 13988 13989 13990 13991 #> [13993] 13992 13993 13994 13995 13996 13997 13998 13999 14000 14001 14002 14003 #> [14005] 14004 14005 14006 14007 14008 14009 14010 14011 14012 14013 14014 14015 #> [14017] 14016 14017 14018 14019 14020 14021 14022 14023 14024 14025 14026 14027 #> [14029] 14028 14029 14030 14031 14032 14033 14034 14035 14036 14037 14038 14039 #> [14041] 14040 14041 14042 14043 14044 14045 14046 14047 14048 14049 14050 14051 #> [14053] 14052 14053 14054 14055 14056 14057 14058 14059 14060 14061 14062 14063 #> [14065] 14064 14065 14066 14067 14068 14069 14070 14071 14072 14073 14074 14075 #> [14077] 14076 14077 14078 14079 14080 14081 14082 14083 14084 14085 14086 14087 #> [14089] 14088 14089 14090 14091 14092 14093 14094 14095 14096 14097 14098 14099 #> [14101] 14100 14101 14102 14103 14104 14105 14106 14107 14108 14109 14110 14111 #> [14113] 14112 14113 14114 14115 14116 14117 14118 14119 14120 14121 14122 14123 #> [14125] 14124 14125 14126 14127 14128 14129 14130 14131 14132 14133 14134 14135 #> [14137] 14136 14137 14138 14139 14140 14141 14142 14143 14144 14145 14146 14147 #> [14149] 14148 14149 14150 14151 14152 14153 14154 14155 14156 14157 14158 14159 #> [14161] 14160 14161 14162 14163 14164 14165 14166 14167 14168 14169 14170 14171 #> [14173] 14172 14173 14174 14175 14176 14177 14178 14179 14180 14181 14182 14183 #> [14185] 14184 14185 14186 14187 14188 14189 14190 14191 14192 14193 14194 14195 #> [14197] 14196 14197 14198 14199 14200 14201 14202 14203 14204 14205 14206 14207 #> [14209] 14208 14209 14210 14211 14212 14213 14214 14215 14216 14217 14218 14219 #> [14221] 14220 14221 14222 14223 14224 14225 14226 14227 14228 14229 14230 14231 #> [14233] 14232 14233 14234 14235 14236 14237 14238 14239 14240 14241 14242 14243 #> [14245] 14244 14245 14246 14247 14248 14249 14250 14251 14252 14253 14254 14255 #> [14257] 14256 14257 14258 14259 14260 14261 14262 14263 14264 14265 14266 14267 #> [14269] 14268 14269 14270 14271 14272 14273 14274 14275 14276 14277 14278 14279 #> [14281] 14280 14281 14282 14283 14284 14285 14286 14287 14288 14289 14290 14291 #> [14293] 14292 14293 14294 14295 14296 14297 14298 14299 14300 14301 14302 14303 #> [14305] 14304 14305 14306 14307 14308 14309 14310 14311 14312 14313 14314 14315 #> [14317] 14316 14317 14318 14319 14320 14321 14322 14323 14324 14325 14326 14327 #> [14329] 14328 14329 14330 14331 14332 14333 14334 14335 14336 14337 14338 14339 #> [14341] 14340 14341 14342 14343 14344 14345 14346 14347 14348 14349 14350 14351 #> [14353] 14352 14353 14354 14355 14356 14357 14358 14359 14360 14361 14362 14363 #> [14365] 14364 14365 14366 14367 14368 14369 14370 14371 14372 14373 14374 14375 #> [14377] 14376 14377 14378 14379 14380 14381 14382 14383 14384 14385 14386 14387 #> [14389] 14388 14389 14390 14391 14392 14393 14394 14395 14396 14397 14398 14399 #> [14401] 14400 14401 14402 14403 14404 14405 14406 14407 14408 14409 14410 14411 #> [14413] 14412 14413 14414 14415 14416 14417 14418 14419 14420 14421 14422 14423 #> [14425] 14424 14425 14426 14427 14428 14429 14430 14431 14432 14433 14434 14435 #> [14437] 14436 14437 14438 14439 14440 14441 14442 14443 14444 14445 14446 14447 #> [14449] 14448 14449 14450 14451 14452 14453 14454 14455 14456 14457 14458 14459 #> [14461] 14460 14461 14462 14463 14464 14465 14466 14467 14468 14469 14470 14471 #> [14473] 14472 14473 14474 14475 14476 14477 14478 14479 14480 14481 14482 14483 #> [14485] 14484 14485 14486 14487 14488 14489 14490 14491 14492 14493 14494 14495 #> [14497] 14496 14497 14498 14499 14500 14501 14502 14503 14504 14505 14506 14507 #> [14509] 14508 14509 14510 14511 14512 14513 14514 14515 14516 14517 14518 14519 #> [14521] 14520 14521 14522 14523 14524 14525 14526 14527 14528 14529 14530 14531 #> [14533] 14532 14533 14534 14535 14536 14537 14538 14539 14540 14541 14542 14543 #> [14545] 14544 14545 14546 14547 14548 14549 14550 14551 14552 14553 14554 14555 #> [14557] 14556 14557 14558 14559 14560 14561 14562 14563 14564 14565 14566 14567 #> [14569] 14568 14569 14570 14571 14572 14573 14574 14575 14576 14577 14578 14579 #> [14581] 14580 14581 14582 14583 14584 14585 14586 14587 14588 14589 14590 14591 #> [14593] 14592 14593 14594 14595 14596 14597 14598 14599 14600 14601 14602 14603 #> [14605] 14604 14605 14606 14607 14608 14609 14610 14611 14612 14613 14614 14615 #> [14617] 14616 14617 14618 14619 14620 14621 14622 14623 14624 14625 14626 14627 #> [14629] 14628 14629 14630 14631 14632 14633 14634 14635 14636 14637 14638 14639 #> [14641] 14640 14641 14642 14643 14644 14645 14646 14647 14648 14649 14650 14651 #> [14653] 14652 14653 14654 14655 14656 14657 14658 14659 14660 14661 14662 14663 #> [14665] 14664 14665 14666 14667 14668 14669 14670 14671 14672 14673 14674 14675 #> [14677] 14676 14677 14678 14679 14680 14681 14682 14683 14684 14685 14686 14687 #> [14689] 14688 14689 14690 14691 14692 14693 14694 14695 14696 14697 14698 14699 #> [14701] 14700 14701 14702 14703 14704 14705 14706 14707 14708 14709 14710 14711 #> [14713] 14712 14713 14714 14715 14716 14717 14718 14719 14720 14721 14722 14723 #> [14725] 14724 14725 14726 14727 14728 14729 14730 14731 14732 14733 14734 14735 #> [14737] 14736 14737 14738 14739 14740 14741 14742 14743 14744 14745 14746 14747 #> [14749] 14748 14749 14750 14751 14752 14753 14754 14755 14756 14757 14758 14759 #> [14761] 14760 14761 14762 14763 14764 14765 14766 14767 14768 14769 14770 14771 #> [14773] 14772 14773 14774 14775 14776 14777 14778 14779 14780 14781 14782 14783 #> [14785] 14784 14785 14786 14787 14788 14789 14790 14791 14792 14793 14794 14795 #> [14797] 14796 14797 14798 14799 14800 14801 14802 14803 14804 14805 14806 14807 #> [14809] 14808 14809 14810 14811 14812 14813 14814 14815 14816 14817 14818 14819 #> [14821] 14820 14821 14822 14823 14824 14825 14826 14827 14828 14829 14830 14831 #> [14833] 14832 14833 14834 14835 14836 14837 14838 14839 14840 14841 14842 14843 #> [14845] 14844 14845 14846 14847 14848 14849 14850 14851 14852 14853 14854 14855 #> [14857] 14856 14857 14858 14859 14860 14861 14862 14863 14864 14865 14866 14867 #> [14869] 14868 14869 14870 14871 14872 14873 14874 14875 14876 14877 14878 14879 #> [14881] 14880 14881 14882 14883 14884 14885 14886 14887 14888 14889 14890 14891 #> [14893] 14892 14893 14894 14895 14896 14897 14898 14899 14900 14901 14902 14903 #> [14905] 14904 14905 14906 14907 14908 14909 14910 14911 14912 14913 14914 14915 #> [14917] 14916 14917 14918 14919 14920 14921 14922 14923 14924 14925 14926 14927 #> [14929] 14928 14929 14930 14931 14932 14933 14934 14935 14936 14937 14938 14939 #> [14941] 14940 14941 14942 14943 14944 14945 14946 14947 14948 14949 14950 14951 #> [14953] 14952 14953 14954 14955 14956 14957 14958 14959 14960 14961 14962 14963 #> [14965] 14964 14965 14966 14967 14968 14969 14970 14971 14972 14973 14974 14975 #> [14977] 14976 14977 14978 14979 14980 14981 14982 14983 14984 14985 14986 14987 #> [14989] 14988 14989 14990 14991 14992 14993 14994 14995 14996 14997 14998 14999 #> [15001] 15000 15001 15002 15003 15004 15005 15006 15007 15008 15009 15010 15011 #> [15013] 15012 15013 15014 15015 15016 15017 15018 15019 15020 15021 15022 15023 #> [15025] 15024 15025 15026 15027 15028 15029 15030 15031 15032 15033 15034 15035 #> [15037] 15036 15037 15038 15039 15040 15041 15042 15043 15044 15045 15046 15047 #> [15049] 15048 15049 15050 15051 15052 15053 15054 15055 15056 15057 15058 15059 #> [15061] 15060 15061 15062 15063 15064 15065 15066 15067 15068 15069 15070 15071 #> [15073] 15072 15073 15074 15075 15076 15077 15078 15079 15080 15081 15082 15083 #> [15085] 15084 15085 15086 15087 15088 15089 15090 15091 15092 15093 15094 15095 #> [15097] 15096 15097 15098 15099 15100 15101 15102 15103 15104 15105 15106 15107 #> [15109] 15108 15109 15110 15111 15112 15113 15114 15115 15116 15117 15118 15119 #> [15121] 15120 15121 15122 15123 15124 15125 15126 15127 15128 15129 15130 15131 #> [15133] 15132 15133 15134 15135 15136 15137 15138 15139 15140 15141 15142 15143 #> [15145] 15144 15145 15146 15147 15148 15149 15150 15151 15152 15153 15154 15155 #> [15157] 15156 15157 15158 15159 15160 15161 15162 15163 15164 15165 15166 15167 #> [15169] 15168 15169 15170 15171 15172 15173 15174 15175 15176 15177 15178 15179 #> [15181] 15180 15181 15182 15183 15184 15185 15186 15187 15188 15189 15190 15191 #> [15193] 15192 15193 15194 15195 15196 15197 15198 15199 15200 15201 15202 15203 #> [15205] 15204 15205 15206 15207 15208 15209 15210 15211 15212 15213 15214 15215 #> [15217] 15216 15217 15218 15219 15220 15221 15222 15223 15224 15225 15226 15227 #> [15229] 15228 15229 15230 15231 15232 15233 15234 15235 15236 15237 15238 15239 #> [15241] 15240 15241 15242 15243 15244 15245 15246 15247 15248 15249 15250 15251 #> [15253] 15252 15253 15254 15255 15256 15257 15258 15259 15260 15261 15262 15263 #> [15265] 15264 15265 15266 15267 15268 15269 15270 15271 15272 15273 15274 15275 #> [15277] 15276 15277 15278 15279 15280 15281 15282 15283 15284 15285 15286 15287 #> [15289] 15288 15289 15290 15291 15292 15293 15294 15295 15296 15297 15298 15299 #> [15301] 15300 15301 15302 15303 15304 15305 15306 15307 15308 15309 15310 15311 #> [15313] 15312 15313 15314 15315 15316 15317 15318 15319 15320 15321 15322 15323 #> [15325] 15324 15325 15326 15327 15328 15329 15330 15331 15332 15333 15334 15335 #> [15337] 15336 15337 15338 15339 15340 15341 15342 15343 15344 15345 15346 15347 #> [15349] 15348 15349 15350 15351 15352 15353 15354 15355 15356 15357 15358 15359 #> [15361] 15360 15361 15362 15363 15364 15365 15366 15367 15368 15369 15370 15371 #> [15373] 15372 15373 15374 15375 15376 15377 15378 15379 15380 15381 15382 15383 #> [15385] 15384 15385 15386 15387 15388 15389 15390 15391 15392 15393 15394 15395 #> [15397] 15396 15397 15398 15399 15400 15401 15402 15403 15404 15405 15406 15407 #> [15409] 15408 15409 15410 15411 15412 15413 15414 15415 15416 15417 15418 15419 #> [15421] 15420 15421 15422 15423 15424 15425 15426 15427 15428 15429 15430 15431 #> [15433] 15432 15433 15434 15435 15436 15437 15438 15439 15440 15441 15442 15443 #> [15445] 15444 15445 15446 15447 15448 15449 15450 15451 15452 15453 15454 15455 #> [15457] 15456 15457 15458 15459 15460 15461 15462 15463 15464 15465 15466 15467 #> [15469] 15468 15469 15470 15471 15472 15473 15474 15475 15476 15477 15478 15479 #> [15481] 15480 15481 15482 15483 15484 15485 15486 15487 15488 15489 15490 15491 #> [15493] 15492 15493 15494 15495 15496 15497 15498 15499 15500 15501 15502 15503 #> [15505] 15504 15505 15506 15507 15508 15509 15510 15511 15512 15513 15514 15515 #> [15517] 15516 15517 15518 15519 15520 15521 15522 15523 15524 15525 15526 15527 #> [15529] 15528 15529 15530 15531 15532 15533 15534 15535 15536 15537 15538 15539 #> [15541] 15540 15541 15542 15543 15544 15545 15546 15547 15548 15549 15550 15551 #> [15553] 15552 15553 15554 15555 15556 15557 15558 15559 15560 15561 15562 15563 #> [15565] 15564 15565 15566 15567 15568 15569 15570 15571 15572 15573 15574 15575 #> [15577] 15576 15577 15578 15579 15580 15581 15582 15583 15584 15585 15586 15587 #> [15589] 15588 15589 15590 15591 15592 15593 15594 15595 15596 15597 15598 15599 #> [15601] 15600 15601 15602 15603 15604 15605 15606 15607 15608 15609 15610 15611 #> [15613] 15612 15613 15614 15615 15616 15617 15618 15619 15620 15621 15622 15623 #> [15625] 15624 15625 15626 15627 15628 15629 15630 15631 15632 15633 15634 15635 #> [15637] 15636 15637 15638 15639 15640 15641 15642 15643 15644 15645 15646 15647 #> [15649] 15648 15649 15650 15651 15652 15653 15654 15655 15656 15657 15658 15659 #> [15661] 15660 15661 15662 15663 15664 15665 15666 15667 15668 15669 15670 15671 #> [15673] 15672 15673 15674 15675 15676 15677 15678 15679 15680 15681 15682 15683 #> [15685] 15684 15685 15686 15687 15688 15689 15690 15691 15692 15693 15694 15695 #> [15697] 15696 15697 15698 15699 15700 15701 15702 15703 15704 15705 15706 15707 #> [15709] 15708 15709 15710 15711 15712 15713 15714 15715 15716 15717 15718 15719 #> [15721] 15720 15721 15722 15723 15724 15725 15726 15727 15728 15729 15730 15731 #> [15733] 15732 15733 15734 15735 15736 15737 15738 15739 15740 15741 15742 15743 #> [15745] 15744 15745 15746 15747 15748 15749 15750 15751 15752 15753 15754 15755 #> [15757] 15756 15757 15758 15759 15760 15761 15762 15763 15764 15765 15766 15767 #> [15769] 15768 15769 15770 15771 15772 15773 15774 15775 15776 15777 15778 15779 #> [15781] 15780 15781 15782 15783 15784 15785 15786 15787 15788 15789 15790 15791 #> [15793] 15792 15793 15794 15795 15796 15797 15798 15799 15800 15801 15802 15803 #> [15805] 15804 15805 15806 15807 15808 15809 15810 15811 15812 15813 15814 15815 #> [15817] 15816 15817 15818 15819 15820 15821 15822 15823 15824 15825 15826 15827 #> [15829] 15828 15829 15830 15831 15832 15833 15834 15835 15836 15837 15838 15839 #> [15841] 15840 15841 15842 15843 15844 15845 15846 15847 15848 15849 15850 15851 #> [15853] 15852 15853 15854 15855 15856 15857 15858 15859 15860 15861 15862 15863 #> [15865] 15864 15865 15866 15867 15868 15869 15870 15871 15872 15873 15874 15875 #> [15877] 15876 15877 15878 15879 15880 15881 15882 15883 15884 15885 15886 15887 #> [15889] 15888 15889 15890 15891 15892 15893 15894 15895 15896 15897 15898 15899 #> [15901] 15900 15901 15902 15903 15904 15905 15906 15907 15908 15909 15910 15911 #> [15913] 15912 15913 15914 15915 15916 15917 15918 15919 15920 15921 15922 15923 #> [15925] 15924 15925 15926 15927 15928 15929 15930 15931 15932 15933 15934 15935 #> [15937] 15936 15937 15938 15939 15940 15941 15942 15943 15944 15945 15946 15947 #> [15949] 15948 15949 15950 15951 15952 15953 15954 15955 15956 15957 15958 15959 #> [15961] 15960 15961 15962 15963 15964 15965 15966 15967 15968 15969 15970 15971 #> [15973] 15972 15973 15974 15975 15976 15977 15978 15979 15980 15981 15982 15983 #> [15985] 15984 15985 15986 15987 15988 15989 15990 15991 15992 15993 15994 15995 #> [15997] 15996 15997 15998 15999 16000 16001 16002 16003 16004 16005 16006 16007 #> [16009] 16008 16009 16010 16011 16012 16013 16014 16015 16016 16017 16018 16019 #> [16021] 16020 16021 16022 16023 16024 16025 16026 16027 16028 16029 16030 16031 #> [16033] 16032 16033 16034 16035 16036 16037 16038 16039 16040 16041 16042 16043 #> [16045] 16044 16045 16046 16047 16048 16049 16050 16051 16052 16053 16054 16055 #> [16057] 16056 16057 16058 16059 16060 16061 16062 16063 16064 16065 16066 16067 #> [16069] 16068 16069 16070 16071 16072 16073 16074 16075 16076 16077 16078 16079 #> [16081] 16080 16081 16082 16083 16084 16085 16086 16087 16088 16089 16090 16091 #> [16093] 16092 16093 16094 16095 16096 16097 16098 16099 16100 16101 16102 16103 #> [16105] 16104 16105 16106 16107 16108 16109 16110 16111 16112 16113 16114 16115 #> [16117] 16116 16117 16118 16119 16120 16121 16122 16123 16124 16125 16126 16127 #> [16129] 16128 16129 16130 16131 16132 16133 16134 16135 16136 16137 16138 16139 #> [16141] 16140 16141 16142 16143 16144 16145 16146 16147 16148 16149 16150 16151 #> [16153] 16152 16153 16154 16155 16156 16157 16158 16159 16160 16161 16162 16163 #> [16165] 16164 16165 16166 16167 16168 16169 16170 16171 16172 16173 16174 16175 #> [16177] 16176 16177 16178 16179 16180 16181 16182 16183 16184 16185 16186 16187 #> [16189] 16188 16189 16190 16191 16192 16193 16194 16195 16196 16197 16198 16199 #> [16201] 16200 16201 16202 16203 16204 16205 16206 16207 16208 16209 16210 16211 #> [16213] 16212 16213 16214 16215 16216 16217 16218 16219 16220 16221 16222 16223 #> [16225] 16224 16225 16226 16227 16228 16229 16230 16231 16232 16233 16234 16235 #> [16237] 16236 16237 16238 16239 16240 16241 16242 16243 16244 16245 16246 16247 #> [16249] 16248 16249 16250 16251 16252 16253 16254 16255 16256 16257 16258 16259 #> [16261] 16260 16261 16262 16263 16264 16265 16266 16267 16268 16269 16270 16271 #> [16273] 16272 16273 16274 16275 16276 16277 16278 16279 16280 16281 16282 16283 #> [16285] 16284 16285 16286 16287 16288 16289 16290 16291 16292 16293 16294 16295 #> [16297] 16296 16297 16298 16299 16300 16301 16302 16303 16304 16305 16306 16307 #> [16309] 16308 16309 16310 16311 16312 16313 16314 16315 16316 16317 16318 16319 #> [16321] 16320 16321 16322 16323 16324 16325 16326 16327 16328 16329 16330 16331 #> [16333] 16332 16333 16334 16335 16336 16337 16338 16339 16340 16341 16342 16343 #> [16345] 16344 16345 16346 16347 16348 16349 16350 16351 16352 16353 16354 16355 #> [16357] 16356 16357 16358 16359 16360 16361 16362 16363 16364 16365 16366 16367 #> [16369] 16368 16369 16370 16371 16372 16373 16374 16375 16376 16377 16378 16379 #> [16381] 16380 16381 16382 16383 16384 16385 16386 16387 16388 16389 16390 16391 #> [16393] 16392 16393 16394 16395 16396 16397 16398 16399 16400 16401 16402 16403 #> [16405] 16404 16405 16406 16407 16408 16409 16410 16411 16412 16413 16414 16415 #> [16417] 16416 16417 16418 16419 16420 16421 16422 16423 16424 16425 16426 16427 #> [16429] 16428 16429 16430 16431 16432 16433 16434 16435 16436 16437 16438 16439 #> [16441] 16440 16441 16442 16443 16444 16445 16446 16447 16448 16449 16450 16451 #> [16453] 16452 16453 16454 16455 16456 16457 16458 16459 16460 16461 16462 16463 #> [16465] 16464 16465 16466 16467 16468 16469 16470 16471 16472 16473 16474 16475 #> [16477] 16476 16477 16478 16479 16480 16481 16482 16483 16484 16485 16486 16487 #> [16489] 16488 16489 16490 16491 16492 16493 16494 16495 16496 16497 16498 16499 #> [16501] 16500 16501 16502 16503 16504 16505 16506 16507 16508 16509 16510 16511 #> [16513] 16512 16513 16514 16515 16516 16517 16518 16519 16520 16521 16522 16523 #> [16525] 16524 16525 16526 16527 16528 16529 16530 16531 16532 16533 16534 16535 #> [16537] 16536 16537 16538 16539 16540 16541 16542 16543 16544 16545 16546 16547 #> [16549] 16548 16549 16550 16551 16552 16553 16554 16555 16556 16557 16558 16559 #> [16561] 16560 16561 16562 16563 16564 16565 16566 16567 16568 16569 16570 16571 #> [16573] 16572 16573 16574 16575 16576 16577 16578 16579 16580 16581 16582 16583 #> [16585] 16584 16585 16586 16587 16588 16589 16590 16591 16592 16593 16594 16595 #> [16597] 16596 16597 16598 16599 16600 16601 16602 16603 16604 16605 16606 16607 #> [16609] 16608 16609 16610 16611 16612 16613 16614 16615 16616 16617 16618 16619 #> [16621] 16620 16621 16622 16623 16624 16625 16626 16627 16628 16629 16630 16631 #> [16633] 16632 16633 16634 16635 16636 16637 16638 16639 16640 16641 16642 16643 #> [16645] 16644 16645 16646 16647 16648 16649 16650 16651 16652 16653 16654 16655 #> [16657] 16656 16657 16658 16659 16660 16661 16662 16663 16664 16665 16666 16667 #> [16669] 16668 16669 16670 16671 16672 16673 16674 16675 16676 16677 16678 16679 #> [16681] 16680 16681 16682 16683 16684 16685 16686 16687 16688 16689 16690 16691 #> [16693] 16692 16693 16694 16695 16696 16697 16698 16699 16700 16701 16702 16703 #> [16705] 16704 16705 16706 16707 16708 16709 16710 16711 16712 16713 16714 16715 #> [16717] 16716 16717 16718 16719 16720 16721 16722 16723 16724 16725 16726 16727 #> [16729] 16728 16729 16730 16731 16732 16733 16734 16735 16736 16737 16738 16739 #> [16741] 16740 16741 16742 16743 16744 16745 16746 16747 16748 16749 16750 16751 #> [16753] 16752 16753 16754 16755 16756 16757 16758 16759 16760 16761 16762 16763 #> [16765] 16764 16765 16766 16767 16768 16769 16770 16771 16772 16773 16774 16775 #> [16777] 16776 16777 16778 16779 16780 16781 16782 16783 16784 16785 16786 16787 #> [16789] 16788 16789 16790 16791 16792 16793 16794 16795 16796 16797 16798 16799 #> [16801] 16800 16801 16802 16803 16804 16805 16806 16807 16808 16809 16810 16811 #> [16813] 16812 16813 16814 16815 16816 16817 16818 16819 16820 16821 16822 16823 #> [16825] 16824 16825 16826 16827 16828 16829 16830 16831 16832 16833 16834 16835 #> [16837] 16836 16837 16838 16839 16840 16841 16842 16843 16844 16845 16846 16847 #> [16849] 16848 16849 16850 16851 16852 16853 16854 16855 16856 16857 16858 16859 #> [16861] 16860 16861 16862 16863 16864 16865 16866 16867 16868 16869 16870 16871 #> [16873] 16872 16873 16874 16875 16876 16877 16878 16879 16880 16881 16882 16883 #> [16885] 16884 16885 16886 16887 16888 16889 16890 16891 16892 16893 16894 16895 #> [16897] 16896 16897 16898 16899 16900 16901 16902 16903 16904 16905 16906 16907 #> [16909] 16908 16909 16910 16911 16912 16913 16914 16915 16916 16917 16918 16919 #> [16921] 16920 16921 16922 16923 16924 16925 16926 16927 16928 16929 16930 16931 #> [16933] 16932 16933 16934 16935 16936 16937 16938 16939 16940 16941 16942 16943 #> [16945] 16944 16945 16946 16947 16948 16949 16950 16951 16952 16953 16954 16955 #> [16957] 16956 16957 16958 16959 16960 16961 16962 16963 16964 16965 16966 16967 #> [16969] 16968 16969 16970 16971 16972 16973 16974 16975 16976 16977 16978 16979 #> [16981] 16980 16981 16982 16983 16984 16985 16986 16987 16988 16989 16990 16991 #> [16993] 16992 16993 16994 16995 16996 16997 16998 16999 17000 17001 17002 17003 #> [17005] 17004 17005 17006 17007 17008 17009 17010 17011 17012 17013 17014 17015 #> [17017] 17016 17017 17018 17019 17020 17021 17022 17023 17024 17025 17026 17027 #> [17029] 17028 17029 17030 17031 17032 17033 17034 17035 17036 17037 17038 17039 #> [17041] 17040 17041 17042 17043 17044 17045 17046 17047 17048 17049 17050 17051 #> [17053] 17052 17053 17054 17055 17056 17057 17058 17059 17060 17061 17062 17063 #> [17065] 17064 17065 17066 17067 17068 17069 17070 17071 17072 17073 17074 17075 #> [17077] 17076 17077 17078 17079 17080 17081 17082 17083 17084 17085 17086 17087 #> [17089] 17088 17089 17090 17091 17092 17093 17094 17095 17096 17097 17098 17099 #> [17101] 17100 17101 17102 17103 17104 17105 17106 17107 17108 17109 17110 17111 #> [17113] 17112 17113 17114 17115 17116 17117 17118 17119 17120 17121 17122 17123 #> [17125] 17124 17125 17126 17127 17128 17129 17130 17131 17132 17133 17134 17135 #> [17137] 17136 17137 17138 17139 17140 17141 17142 17143 17144 17145 17146 17147 #> [17149] 17148 17149 17150 17151 17152 17153 17154 17155 17156 17157 17158 17159 #> [17161] 17160 17161 17162 17163 17164 17165 17166 17167 17168 17169 17170 17171 #> [17173] 17172 17173 17174 17175 17176 17177 17178 17179 17180 17181 17182 17183 #> [17185] 17184 17185 17186 17187 17188 17189 17190 17191 17192 17193 17194 17195 #> [17197] 17196 17197 17198 17199 17200 17201 17202 17203 17204 17205 17206 17207 #> [17209] 17208 17209 17210 17211 17212 17213 17214 17215 17216 17217 17218 17219 #> [17221] 17220 17221 17222 17223 17224 17225 17226 17227 17228 17229 17230 17231 #> [17233] 17232 17233 17234 17235 17236 17237 17238 17239 17240 17241 17242 17243 #> [17245] 17244 17245 17246 17247 17248 17249 17250 17251 17252 17253 17254 17255 #> [17257] 17256 17257 17258 17259 17260 17261 17262 17263 17264 17265 17266 17267 #> [17269] 17268 17269 17270 17271 17272 17273 17274 17275 17276 17277 17278 17279 #> [17281] 17280 17281 17282 17283 17284 17285 17286 17287 17288 17289 17290 17291 #> [17293] 17292 17293 17294 17295 17296 17297 17298 17299 17300 17301 17302 17303 #> [17305] 17304 17305 17306 17307 17308 17309 17310 17311 17312 17313 17314 17315 #> [17317] 17316 17317 17318 17319 17320 17321 17322 17323 17324 17325 17326 17327 #> [17329] 17328 17329 17330 17331 17332 17333 17334 17335 17336 17337 17338 17339 #> [17341] 17340 17341 17342 17343 17344 17345 17346 17347 17348 17349 17350 17351 #> [17353] 17352 17353 17354 17355 17356 17357 17358 17359 17360 17361 17362 17363 #> [17365] 17364 17365 17366 17367 17368 17369 17370 17371 17372 17373 17374 17375 #> [17377] 17376 17377 17378 17379 17380 17381 17382 17383 17384 17385 17386 17387 #> [17389] 17388 17389 17390 17391 17392 17393 17394 17395 17396 17397 17398 17399 #> [17401] 17400 17401 17402 17403 17404 17405 17406 17407 17408 17409 17410 17411 #> [17413] 17412 17413 17414 17415 17416 17417 17418 17419 17420 17421 17422 17423 #> [17425] 17424 17425 17426 17427 17428 17429 17430 17431 17432 17433 17434 17435 #> [17437] 17436 17437 17438 17439 17440 17441 17442 17443 17444 17445 17446 17447 #> [17449] 17448 17449 17450 17451 17452 17453 17454 17455 17456 17457 17458 17459 #> [17461] 17460 17461 17462 17463 17464 17465 17466 17467 17468 17469 17470 17471 #> [17473] 17472 17473 17474 17475 17476 17477 17478 17479 17480 17481 17482 17483 #> [17485] 17484 17485 17486 17487 17488 17489 17490 17491 17492 17493 17494 17495 #> [17497] 17496 17497 17498 17499 17500 17501 17502 17503 17504 17505 17506 17507 #> [17509] 17508 17509 17510 17511 17512 17513 17514 17515 17516 17517 17518 17519 #> [17521] 17520 17521 17522 17523 17524 17525 17526 17527 17528 17529 17530 17531 #> [17533] 17532 17533 17534 17535 17536 17537 17538 17539 17540 17541 17542 17543 #> [17545] 17544 17545 17546 17547 17548 17549 17550 17551 17552 17553 17554 17555 #> [17557] 17556 17557 17558 17559 17560 17561 17562 17563 17564 17565 17566 17567 #> [17569] 17568 17569 17570 17571 17572 17573 17574 17575 17576 17577 17578 17579 #> [17581] 17580 17581 17582 17583 17584 17585 17586 17587 17588 17589 17590 17591 #> [17593] 17592 17593 17594 17595 17596 17597 17598 17599 17600 17601 17602 17603 #> [17605] 17604 17605 17606 17607 17608 17609 17610 17611 17612 17613 17614 17615 #> [17617] 17616 17617 17618 17619 17620 17621 17622 17623 17624 17625 17626 17627 #> [17629] 17628 17629 17630 17631 17632 17633 17634 17635 17636 17637 17638 17639 #> [17641] 17640 17641 17642 17643 17644 17645 17646 17647 17648 17649 17650 17651 #> [17653] 17652 17653 17654 17655 17656 17657 17658 17659 17660 17661 17662 17663 #> [17665] 17664 17665 17666 17667 17668 17669 17670 17671 17672 17673 17674 17675 #> [17677] 17676 17677 17678 17679 17680 17681 17682 17683 17684 17685 17686 17687 #> [17689] 17688 17689 17690 17691 17692 17693 17694 17695 17696 17697 17698 17699 #> [17701] 17700 17701 17702 17703 17704 17705 17706 17707 17708 17709 17710 17711 #> [17713] 17712 17713 17714 17715 17716 17717 17718 17719 17720 17721 17722 17723 #> [17725] 17724 17725 17726 17727 17728 17729 17730 17731 17732 17733 17734 17735 #> [17737] 17736 17737 17738 17739 17740 17741 17742 17743 17744 17745 17746 17747 #> [17749] 17748 17749 17750 17751 17752 17753 17754 17755 17756 17757 17758 17759 #> [17761] 17760 17761 17762 17763 17764 17765 17766 17767 17768 17769 17770 17771 #> [17773] 17772 17773 17774 17775 17776 17777 17778 17779 17780 17781 17782 17783 #> [17785] 17784 17785 17786 17787 17788 17789 17790 17791 17792 17793 17794 17795 #> [17797] 17796 17797 17798 17799 17800 17801 17802 17803 17804 17805 17806 17807 #> [17809] 17808 17809 17810 17811 17812 17813 17814 17815 17816 17817 17818 17819 #> [17821] 17820 17821 17822 17823 17824 17825 17826 17827 17828 17829 17830 17831 #> [17833] 17832 17833 17834 17835 17836 17837 17838 17839 17840 17841 17842 17843 #> [17845] 17844 17845 17846 17847 17848 17849 17850 17851 17852 17853 17854 17855 #> [17857] 17856 17857 17858 17859 17860 17861 17862 17863 17864 17865 17866 17867 #> [17869] 17868 17869 17870 17871 17872 17873 17874 17875 17876 17877 17878 17879 #> [17881] 17880 17881 17882 17883 17884 17885 17886 17887 17888 17889 17890 17891 #> [17893] 17892 17893 17894 17895 17896 17897 17898 17899 17900 17901 17902 17903 #> [17905] 17904 17905 17906 17907 17908 17909 17910 17911 17912 17913 17914 17915 #> [17917] 17916 17917 17918 17919 17920 17921 17922 17923 17924 17925 17926 17927 #> [17929] 17928 17929 17930 17931 17932 17933 17934 17935 17936 17937 17938 17939 #> [17941] 17940 17941 17942 17943 17944 17945 17946 17947 17948 17949 17950 17951 #> [17953] 17952 17953 17954 17955 17956 17957 17958 17959 17960 17961 17962 17963 #> [17965] 17964 17965 17966 17967 17968 17969 17970 17971 17972 17973 17974 17975 #> [17977] 17976 17977 17978 17979 17980 17981 17982 17983 17984 17985 17986 17987 #> [17989] 17988 17989 17990 17991 17992 17993 17994 17995 17996 17997 17998 17999 #> [18001] 18000 18001 18002 18003 18004 18005 18006 18007 18008 18009 18010 18011 #> [18013] 18012 18013 18014 18015 18016 18017 18018 18019 18020 18021 18022 18023 #> [18025] 18024 18025 18026 18027 18028 18029 18030 18031 18032 18033 18034 18035 #> [18037] 18036 18037 18038 18039 18040 18041 18042 18043 18044 18045 18046 18047 #> [18049] 18048 18049 18050 18051 18052 18053 18054 18055 18056 18057 18058 18059 #> [18061] 18060 18061 18062 18063 18064 18065 18066 18067 18068 18069 18070 18071 #> [18073] 18072 18073 18074 18075 18076 18077 18078 18079 18080 18081 18082 18083 #> [18085] 18084 18085 18086 18087 18088 18089 18090 18091 18092 18093 18094 18095 #> [18097] 18096 18097 18098 18099 18100 18101 18102 18103 18104 18105 18106 18107 #> [18109] 18108 18109 18110 18111 18112 18113 18114 18115 18116 18117 18118 18119 #> [18121] 18120 18121 18122 18123 18124 18125 18126 18127 18128 18129 18130 18131 #> [18133] 18132 18133 18134 18135 18136 18137 18138 18139 18140 18141 18142 18143 #> [18145] 18144 18145 18146 18147 18148 18149 18150 18151 18152 18153 18154 18155 #> [18157] 18156 18157 18158 18159 18160 18161 18162 18163 18164 18165 18166 18167 #> [18169] 18168 18169 18170 18171 18172 18173 18174 18175 18176 18177 18178 18179 #> [18181] 18180 18181 18182 18183 18184 18185 18186 18187 18188 18189 18190 18191 #> [18193] 18192 18193 18194 18195 18196 18197 18198 18199 18200 18201 18202 18203 #> [18205] 18204 18205 18206 18207 18208 18209 18210 18211 18212 18213 18214 18215 #> [18217] 18216 18217 18218 18219 18220 18221 18222 18223 18224 18225 18226 18227 #> [18229] 18228 18229 18230 18231 18232 18233 18234 18235 18236 18237 18238 18239 #> [18241] 18240 18241 18242 18243 18244 18245 18246 18247 18248 18249 18250 18251 #> [18253] 18252 18253 18254 18255 18256 18257 18258 18259 18260 18261 18262 18263 #> [18265] 18264 18265 18266 18267 18268 18269 18270 18271 18272 18273 18274 18275 #> [18277] 18276 18277 18278 18279 18280 18281 18282 18283 18284 18285 18286 18287 #> [18289] 18288 18289 18290 18291 18292 18293 18294 18295 18296 18297 18298 18299 #> [18301] 18300 18301 18302 18303 18304 18305 18306 18307 18308 18309 18310 18311 #> [18313] 18312 18313 18314 18315 18316 18317 18318 18319 18320 18321 18322 18323 #> [18325] 18324 18325 18326 18327 18328 18329 18330 18331 18332 18333 18334 18335 #> [18337] 18336 18337 18338 18339 18340 18341 18342 18343 18344 18345 18346 18347 #> [18349] 18348 18349 18350 18351 18352 18353 18354 18355 18356 18357 18358 18359 #> [18361] 18360 18361 18362 18363 18364 18365 18366 18367 18368 18369 18370 18371 #> [18373] 18372 18373 18374 18375 18376 18377 18378 18379 18380 18381 18382 18383 #> [18385] 18384 18385 18386 18387 18388 18389 18390 18391 18392 18393 18394 18395 #> [18397] 18396 18397 18398 18399 18400 18401 18402 18403 18404 18405 18406 18407 #> [18409] 18408 18409 18410 18411 18412 18413 18414 18415 18416 18417 18418 18419 #> [18421] 18420 18421 18422 18423 18424 18425 18426 18427 18428 18429 18430 18431 #> [18433] 18432 18433 18434 18435 18436 18437 18438 18439 18440 18441 18442 18443 #> [18445] 18444 18445 18446 18447 18448 18449 18450 18451 18452 18453 18454 18455 #> [18457] 18456 18457 18458 18459 18460 18461 18462 18463 18464 18465 18466 18467 #> [18469] 18468 18469 18470 18471 18472 18473 18474 18475 18476 18477 18478 18479 #> [18481] 18480 18481 18482 18483 18484 18485 18486 18487 18488 18489 18490 18491 #> [18493] 18492 18493 18494 18495 18496 18497 18498 18499 18500 18501 18502 18503 #> [18505] 18504 18505 18506 18507 18508 18509 18510 18511 18512 18513 18514 18515 #> [18517] 18516 18517 18518 18519 18520 18521 18522 18523 18524 18525 18526 18527 #> [18529] 18528 18529 18530 18531 18532 18533 18534 18535 18536 18537 18538 18539 #> [18541] 18540 18541 18542 18543 18544 18545 18546 18547 18548 18549 18550 18551 #> [18553] 18552 18553 18554 18555 18556 18557 18558 18559 18560 18561 18562 18563 #> [18565] 18564 18565 18566 18567 18568 18569 18570 18571 18572 18573 18574 18575 #> [18577] 18576 18577 18578 18579 18580 18581 18582 18583 18584 18585 18586 18587 #> [18589] 18588 18589 18590 18591 18592 18593 18594 18595 18596 18597 18598 18599 #> [18601] 18600 18601 18602 18603 18604 18605 18606 18607 18608 18609 18610 18611 #> [18613] 18612 18613 18614 18615 18616 18617 18618 18619 18620 18621 18622 18623 #> [18625] 18624 18625 18626 18627 18628 18629 18630 18631 18632 18633 18634 18635 #> [18637] 18636 18637 18638 18639 18640 18641 18642 18643 18644 18645 18646 18647 #> [18649] 18648 18649 18650 18651 18652 18653 18654 18655 18656 18657 18658 18659 #> [18661] 18660 18661 18662 18663 18664 18665 18666 18667 18668 18669 18670 18671 #> [18673] 18672 18673 18674 18675 18676 18677 18678 18679 18680 18681 18682 18683 #> [18685] 18684 18685 18686 18687 18688 18689 18690 18691 18692 18693 18694 18695 #> [18697] 18696 18697 18698 18699 18700 18701 18702 18703 18704 18705 18706 18707 #> [18709] 18708 18709 18710 18711 18712 18713 18714 18715 18716 18717 18718 18719 #> [18721] 18720 18721 18722 18723 18724 18725 18726 18727 18728 18729 18730 18731 #> [18733] 18732 18733 18734 18735 18736 18737 18738 18739 18740 18741 18742 18743 #> [18745] 18744 18745 18746 18747 18748 18749 18750 18751 18752 18753 18754 18755 #> [18757] 18756 18757 18758 18759 18760 18761 18762 18763 18764 18765 18766 18767 #> [18769] 18768 18769 18770 18771 18772 18773 18774 18775 18776 18777 18778 18779 #> [18781] 18780 18781 18782 18783 18784 18785 18786 18787 18788 18789 18790 18791 #> [18793] 18792 18793 18794 18795 18796 18797 18798 18799 18800 18801 18802 18803 #> [18805] 18804 18805 18806 18807 18808 18809 18810 18811 18812 18813 18814 18815 #> [18817] 18816 18817 18818 18819 18820 18821 18822 18823 18824 18825 18826 18827 #> [18829] 18828 18829 18830 18831 18832 18833 18834 18835 18836 18837 18838 18839 #> [18841] 18840 18841 18842 18843 18844 18845 18846 18847 18848 18849 18850 18851 #> [18853] 18852 18853 18854 18855 18856 18857 18858 18859 18860 18861 18862 18863 #> [18865] 18864 18865 18866 18867 18868 18869 18870 18871 18872 18873 18874 18875 #> [18877] 18876 18877 18878 18879 18880 18881 18882 18883 18884 18885 18886 18887 #> [18889] 18888 18889 18890 18891 18892 18893 18894 18895 18896 18897 18898 18899 #> [18901] 18900 18901 18902 18903 18904 18905 18906 18907 18908 18909 18910 18911 #> [18913] 18912 18913 18914 18915 18916 18917 18918 18919 18920 18921 18922 18923 #> [18925] 18924 18925 18926 18927 18928 18929 18930 18931 18932 18933 18934 18935 #> [18937] 18936 18937 18938 18939 18940 18941 18942 18943 18944 18945 18946 18947 #> [18949] 18948 18949 18950 18951 18952 18953 18954 18955 18956 18957 18958 18959 #> [18961] 18960 18961 18962 18963 18964 18965 18966 18967 18968 18969 18970 18971 #> [18973] 18972 18973 18974 18975 18976 18977 18978 18979 18980 18981 18982 18983 #> [18985] 18984 18985 18986 18987 18988 18989 18990 18991 18992 18993 18994 18995 #> [18997] 18996 18997 18998 18999 19000 19001 19002 19003 19004 19005 19006 19007 #> [19009] 19008 19009 19010 19011 19012 19013 19014 19015 19016 19017 19018 19019 #> [19021] 19020 19021 19022 19023 19024 19025 19026 19027 19028 19029 19030 19031 #> [19033] 19032 19033 19034 19035 19036 19037 19038 19039 19040 19041 19042 19043 #> [19045] 19044 19045 19046 19047 19048 19049 19050 19051 19052 19053 19054 19055 #> [19057] 19056 19057 19058 19059 19060 19061 19062 19063 19064 19065 19066 19067 #> [19069] 19068 19069 19070 19071 19072 19073 19074 19075 19076 19077 19078 19079 #> [19081] 19080 19081 19082 19083 19084 19085 19086 19087 19088 19089 19090 19091 #> [19093] 19092 19093 19094 19095 19096 19097 19098 19099 19100 19101 19102 19103 #> [19105] 19104 19105 19106 19107 19108 19109 19110 19111 19112 19113 19114 19115 #> [19117] 19116 19117 19118 19119 19120 19121 19122 19123 19124 19125 19126 19127 #> [19129] 19128 19129 19130 19131 19132 19133 19134 19135 19136 19137 19138 19139 #> [19141] 19140 19141 19142 19143 19144 19145 19146 19147 19148 19149 19150 19151 #> [19153] 19152 19153 19154 19155 19156 19157 19158 19159 19160 19161 19162 19163 #> [19165] 19164 19165 19166 19167 19168 19169 19170 19171 19172 19173 19174 19175 #> [19177] 19176 19177 19178 19179 19180 19181 19182 19183 19184 19185 19186 19187 #> [19189] 19188 19189 19190 19191 19192 19193 19194 19195 19196 19197 19198 19199 #> [19201] 19200 19201 19202 19203 19204 19205 19206 19207 19208 19209 19210 19211 #> [19213] 19212 19213 19214 19215 19216 19217 19218 19219 19220 19221 19222 19223 #> [19225] 19224 19225 19226 19227 19228 19229 19230 19231 19232 19233 19234 19235 #> [19237] 19236 19237 19238 19239 19240 19241 19242 19243 19244 19245 19246 19247 #> [19249] 19248 19249 19250 19251 19252 19253 19254 19255 19256 19257 19258 19259 #> [19261] 19260 19261 19262 19263 19264 19265 19266 19267 19268 19269 19270 19271 #> [19273] 19272 19273 19274 19275 19276 19277 19278 19279 19280 19281 19282 19283 #> [19285] 19284 19285 19286 19287 19288 19289 19290 19291 19292 19293 19294 19295 #> [19297] 19296 19297 19298 19299 19300 19301 19302 19303 19304 19305 19306 19307 #> [19309] 19308 19309 19310 19311 19312 19313 19314 19315 19316 19317 19318 19319 #> [19321] 19320 19321 19322 19323 19324 19325 19326 19327 19328 19329 19330 19331 #> [19333] 19332 19333 19334 19335 19336 19337 19338 19339 19340 19341 19342 19343 #> [19345] 19344 19345 19346 19347 19348 19349 19350 19351 19352 19353 19354 19355 #> [19357] 19356 19357 19358 19359 19360 19361 19362 19363 19364 19365 19366 19367 #> [19369] 19368 19369 19370 19371 19372 19373 19374 19375 19376 19377 19378 19379 #> [19381] 19380 19381 19382 19383 19384 19385 19386 19387 19388 19389 19390 19391 #> [19393] 19392 19393 19394 19395 19396 19397 19398 19399 19400 19401 19402 19403 #> [19405] 19404 19405 19406 19407 19408 19409 19410 19411 19412 19413 19414 19415 #> [19417] 19416 19417 19418 19419 19420 19421 19422 19423 19424 19425 19426 19427 #> [19429] 19428 19429 19430 19431 19432 19433 19434 19435 19436 19437 19438 19439 #> [19441] 19440 19441 19442 19443 19444 19445 19446 19447 19448 19449 19450 19451 #> [19453] 19452 19453 19454 19455 19456 19457 19458 19459 19460 19461 19462 19463 #> [19465] 19464 19465 19466 19467 19468 19469 19470 19471 19472 19473 19474 19475 #> [19477] 19476 19477 19478 19479 19480 19481 19482 19483 19484 19485 19486 19487 #> [19489] 19488 19489 19490 19491 19492 19493 19494 19495 19496 19497 19498 19499 #> [19501] 19500 19501 19502 19503 19504 19505 19506 19507 19508 19509 19510 19511 #> [19513] 19512 19513 19514 19515 19516 19517 19518 19519 19520 19521 19522 19523 #> [19525] 19524 19525 19526 19527 19528 19529 19530 19531 19532 19533 19534 19535 #> [19537] 19536 19537 19538 19539 19540 19541 19542 19543 19544 19545 19546 19547 #> [19549] 19548 19549 19550 19551 19552 19553 19554 19555 19556 19557 19558 19559 #> [19561] 19560 19561 19562 19563 19564 19565 19566 19567 19568 19569 19570 19571 #> [19573] 19572 19573 19574 19575 19576 19577 19578 19579 19580 19581 19582 19583 #> [19585] 19584 19585 19586 19587 19588 19589 19590 19591 19592 19593 19594 19595 #> [19597] 19596 19597 19598 19599 19600 19601 19602 19603 19604 19605 19606 19607 #> [19609] 19608 19609 19610 19611 19612 19613 19614 19615 19616 19617 19618 19619 #> [19621] 19620 19621 19622 19623 19624 19625 19626 19627 19628 19629 19630 19631 #> [19633] 19632 19633 19634 19635 19636 19637 19638 19639 19640 19641 19642 19643 #> [19645] 19644 19645 19646 19647 19648 19649 19650 19651 19652 19653 19654 19655 #> [19657] 19656 19657 19658 19659 19660 19661 19662 19663 19664 19665 19666 19667 #> [19669] 19668 19669 19670 19671 19672 19673 19674 19675 19676 19677 19678 19679 #> [19681] 19680 19681 19682 19683 19684 19685 19686 19687 19688 19689 19690 19691 #> [19693] 19692 19693 19694 19695 19696 19697 19698 19699 19700 19701 19702 19703 #> [19705] 19704 19705 19706 19707 19708 19709 19710 19711 19712 19713 19714 19715 #> [19717] 19716 19717 19718 19719 19720 19721 19722 19723 19724 19725 19726 19727 #> [19729] 19728 19729 19730 19731 19732 19733 19734 19735 19736 19737 19738 19739 #> [19741] 19740 19741 19742 19743 19744 19745 19746 19747 19748 19749 19750 19751 #> [19753] 19752 19753 19754 19755 19756 19757 19758 19759 19760 19761 19762 19763 #> [19765] 19764 19765 19766 19767 19768 19769 19770 19771 19772 19773 19774 19775 #> [19777] 19776 19777 19778 19779 19780 19781 19782 19783 19784 19785 19786 19787 #> [19789] 19788 19789 19790 19791 19792 19793 19794 19795 19796 19797 19798 19799 #> [19801] 19800 19801 19802 19803 19804 19805 19806 19807 19808 19809 19810 19811 #> [19813] 19812 19813 19814 19815 19816 19817 19818 19819 19820 19821 19822 19823 #> [19825] 19824 19825 19826 19827 19828 19829 19830 19831 19832 19833 19834 19835 #> [19837] 19836 19837 19838 19839 19840 19841 19842 19843 19844 19845 19846 19847 #> [19849] 19848 19849 19850 19851 19852 19853 19854 19855 19856 19857 19858 19859 #> [19861] 19860 19861 19862 19863 19864 19865 19866 19867 19868 19869 19870 19871 #> [19873] 19872 19873 19874 19875 19876 19877 19878 19879 19880 19881 19882 19883 #> [19885] 19884 19885 19886 19887 19888 19889 19890 19891 19892 19893 19894 19895 #> [19897] 19896 19897 19898 19899 19900 19901 19902 19903 19904 19905 19906 19907 #> [19909] 19908 19909 19910 19911 19912 19913 19914 19915 19916 19917 19918 19919 #> [19921] 19920 19921 19922 19923 19924 19925 19926 19927 19928 19929 19930 19931 #> [19933] 19932 19933 19934 19935 19936 19937 19938 19939 19940 19941 19942 19943 #> [19945] 19944 19945 19946 19947 19948 19949 19950 19951 19952 19953 19954 19955 #> [19957] 19956 19957 19958 19959 19960 19961 19962 19963 19964 19965 19966 19967 #> [19969] 19968 19969 19970 19971 19972 19973 19974 19975 19976 19977 19978 19979 #> [19981] 19980 19981 19982 19983 19984 19985 19986 19987 19988 19989 19990 19991 #> [19993] 19992 19993 19994 19995 19996 19997 19998 19999 20000 20001 20002 20003 #> [20005] 20004 20005 20006 20007 20008 20009 20010 20011 20012 20013 20014 20015 #> [20017] 20016 20017 20018 20019 20020 20021 20022 20023 20024 20025 20026 20027 #> [20029] 20028 20029 20030 20031 20032 20033 20034 20035 20036 20037 20038 20039 #> [20041] 20040 20041 20042 20043 20044 20045 20046 20047 20048 20049 20050 20051 #> [20053] 20052 20053 20054 20055 20056 20057 20058 20059 20060 20061 20062 20063 #> [20065] 20064 20065 20066 20067 20068 20069 20070 20071 20072 20073 20074 20075 #> [20077] 20076 20077 20078 20079 20080 20081 20082 20083 20084 20085 20086 20087 #> [20089] 20088 20089 20090 20091 20092 20093 20094 20095 20096 20097 20098 20099 #> [20101] 20100 20101 20102 20103 20104 20105 20106 20107 20108 20109 20110 20111 #> [20113] 20112 20113 20114 20115 20116 20117 20118 20119 20120 20121 20122 20123 #> [20125] 20124 20125 20126 20127 20128 20129 20130 20131 20132 20133 20134 20135 #> [20137] 20136 20137 20138 20139 20140 20141 20142 20143 20144 20145 20146 20147 #> [20149] 20148 20149 20150 20151 20152 20153 20154 20155 20156 20157 20158 20159 #> [20161] 20160 20161 20162 20163 20164 20165 20166 20167 20168 20169 20170 20171 #> [20173] 20172 20173 20174 20175 20176 20177 20178 20179 20180 20181 20182 20183 #> [20185] 20184 20185 20186 20187 20188 20189 20190 20191 20192 20193 20194 20195 #> [20197] 20196 20197 20198 20199 20200 20201 20202 20203 20204 20205 20206 20207 #> [20209] 20208 20209 20210 20211 20212 20213 20214 20215 20216 20217 20218 20219 #> [20221] 20220 20221 20222 20223 20224 20225 20226 20227 20228 20229 20230 20231 #> [20233] 20232 20233 20234 20235 20236 20237 20238 20239 20240 20241 20242 20243 #> [20245] 20244 20245 20246 20247 20248 20249 20250 20251 20252 20253 20254 20255 #> [20257] 20256 20257 20258 20259 20260 20261 20262 20263 20264 20265 20266 20267 #> [20269] 20268 20269 20270 20271 20272 20273 20274 20275 20276 20277 20278 20279 #> [20281] 20280 20281 20282 20283 20284 20285 20286 20287 20288 20289 20290 20291 #> [20293] 20292 20293 20294 20295 20296 20297 20298 20299 20300 20301 20302 20303 #> [20305] 20304 20305 20306 20307 20308 20309 20310 20311 20312 20313 20314 20315 #> [20317] 20316 20317 20318 20319 20320 20321 20322 20323 20324 20325 20326 20327 #> [20329] 20328 20329 20330 20331 20332 20333 20334 20335 20336 20337 20338 20339 #> [20341] 20340 20341 20342 20343 20344 20345 20346 20347 20348 20349 20350 20351 #> [20353] 20352 20353 20354 20355 20356 20357 20358 20359 20360 20361 20362 20363 #> [20365] 20364 20365 20366 20367 20368 20369 20370 20371 20372 20373 20374 20375 #> [20377] 20376 20377 20378 20379 20380 20381 20382 20383 20384 20385 20386 20387 #> [20389] 20388 20389 20390 20391 20392 20393 20394 20395 20396 20397 20398 20399 #> [20401] 20400 20401 20402 20403 20404 20405 20406 20407 20408 20409 20410 20411 #> [20413] 20412 20413 20414 20415 20416 20417 20418 20419 20420 20421 20422 20423 #> [20425] 20424 20425 20426 20427 20428 20429 20430 20431 20432 20433 20434 20435 #> [20437] 20436 20437 20438 20439 20440 20441 20442 20443 20444 20445 20446 20447 #> [20449] 20448 20449 20450 20451 20452 20453 20454 20455 20456 20457 20458 20459 #> [20461] 20460 20461 20462 20463 20464 20465 20466 20467 20468 20469 20470 20471 #> [20473] 20472 20473 20474 20475 20476 20477 20478 20479 20480 20481 20482 20483 #> [20485] 20484 20485 20486 20487 20488 20489 20490 20491 20492 20493 20494 20495 #> [20497] 20496 20497 20498 20499 20500 20501 20502 20503 20504 20505 20506 20507 #> [20509] 20508 20509 20510 20511 20512 20513 20514 20515 20516 20517 20518 20519 #> [20521] 20520 20521 20522 20523 20524 20525 20526 20527 20528 20529 20530 20531 #> [20533] 20532 20533 20534 20535 20536 20537 20538 20539 20540 20541 20542 20543 #> [20545] 20544 20545 20546 20547 20548 20549 20550 20551 20552 20553 20554 20555 #> [20557] 20556 20557 20558 20559 20560 20561 20562 20563 20564 20565 20566 20567 #> [20569] 20568 20569 20570 20571 20572 20573 20574 20575 20576 20577 20578 20579 #> [20581] 20580 20581 20582 20583 20584 20585 20586 20587 20588 20589 20590 20591 #> [20593] 20592 20593 20594 20595 20596 20597 20598 20599 20600 20601 20602 20603 #> [20605] 20604 20605 20606 20607 20608 20609 20610 20611 20612 20613 20614 20615 #> [20617] 20616 20617 20618 20619 20620 20621 20622 20623 20624 20625 20626 20627 #> [20629] 20628 20629 20630 20631 20632 20633 20634 20635 20636 20637 20638 20639 #> [20641] 20640 20641 20642 20643 20644 20645 20646 20647 20648 20649 20650 20651 #> [20653] 20652 20653 20654 20655 20656 20657 20658 20659 20660 20661 20662 20663 #> [20665] 20664 20665 20666 20667 20668 20669 20670 20671 20672 20673 20674 20675 #> [20677] 20676 20677 20678 20679 20680 20681 20682 20683 20684 20685 20686 20687 #> [20689] 20688 20689 20690 20691 20692 20693 20694 20695 20696 20697 20698 20699 #> [20701] 20700 20701 20702 20703 20704 20705 20706 20707 20708 20709 20710 20711 #> [20713] 20712 20713 20714 20715 20716 20717 20718 20719 20720 20721 20722 20723 #> [20725] 20724 20725 20726 20727 20728 20729 20730 20731 20732 20733 20734 20735 #> [20737] 20736 20737 20738 20739 20740 20741 20742 20743 20744 20745 20746 20747 #> [20749] 20748 20749 20750 20751 20752 20753 20754 20755 20756 20757 20758 20759 #> [20761] 20760 20761 20762 20763 20764 20765 20766 20767 20768 20769 20770 20771 #> [20773] 20772 20773 20774 20775 20776 20777 20778 20779 20780 20781 20782 20783 #> [20785] 20784 20785 20786 20787 20788 20789 20790 20791 20792 20793 20794 20795 #> [20797] 20796 20797 20798 20799 20800 20801 20802 20803 20804 20805 20806 20807 #> [20809] 20808 20809 20810 20811 20812 20813 20814 20815 20816 20817 20818 20819 #> [20821] 20820 20821 20822 20823 20824 20825 20826 20827 20828 20829 20830 20831 #> [20833] 20832 20833 20834 20835 20836 20837 20838 20839 20840 20841 20842 20843 #> [20845] 20844 20845 20846 20847 20848 20849 20850 20851 20852 20853 20854 20855 #> [20857] 20856 20857 20858 20859 20860 20861 20862 20863 20864 20865 20866 20867 #> [20869] 20868 20869 20870 20871 20872 20873 20874 20875 20876 20877 20878 20879 #> [20881] 20880 20881 20882 20883 20884 20885 20886 20887 20888 20889 20890 20891 #> [20893] 20892 20893 20894 20895 20896 20897 20898 20899 20900 20901 20902 20903 #> [20905] 20904 20905 20906 20907 20908 20909 20910 20911 20912 20913 20914 20915 #> [20917] 20916 20917 20918 20919 20920 20921 20922 20923 20924 20925 20926 20927 #> [20929] 20928 20929 20930 20931 20932 20933 20934 20935 20936 20937 20938 20939 #> [20941] 20940 20941 20942 20943 20944 20945 20946 20947 20948 20949 20950 20951 #> [20953] 20952 20953 20954 20955 20956 20957 20958 20959 20960 20961 20962 20963 #> [20965] 20964 20965 20966 20967 20968 20969 20970 20971 20972 20973 20974 20975 #> [20977] 20976 20977 20978 20979 20980 20981 20982 20983 20984 20985 20986 20987 #> [20989] 20988 20989 20990 20991 20992 20993 20994 20995 20996 20997 20998 20999 #> [21001] 21000 21001 21002 21003 21004 21005 21006 21007 21008 21009 21010 21011 #> [21013] 21012 21013 21014 21015 21016 21017 21018 21019 21020 21021 21022 21023 #> [21025] 21024 21025 21026 21027 21028 21029 21030 21031 21032 21033 21034 21035 #> [21037] 21036 21037 21038 21039 21040 21041 21042 21043 21044 21045 21046 21047 #> [21049] 21048 21049 21050 21051 21052 21053 21054 21055 21056 21057 21058 21059 #> [21061] 21060 21061 21062 21063 21064 21065 21066 21067 21068 21069 21070 21071 #> [21073] 21072 21073 21074 21075 21076 21077 21078 21079 21080 21081 21082 21083 #> [21085] 21084 21085 21086 21087 21088 21089 21090 21091 21092 21093 21094 21095 #> [21097] 21096 21097 21098 21099 21100 21101 21102 21103 21104 21105 21106 21107 #> [21109] 21108 21109 21110 21111 21112 21113 21114 21115 21116 21117 21118 21119 #> [21121] 21120 21121 21122 21123 21124 21125 21126 21127 21128 21129 21130 21131 #> [21133] 21132 21133 21134 21135 21136 21137 21138 21139 21140 21141 21142 21143 #> [21145] 21144 21145 21146 21147 21148 21149 21150 21151 21152 21153 21154 21155 #> [21157] 21156 21157 21158 21159 21160 21161 21162 21163 21164 21165 21166 21167 #> [21169] 21168 21169 21170 21171 21172 21173 21174 21175 21176 21177 21178 21179 #> [21181] 21180 21181 21182 21183 21184 21185 21186 21187 21188 21189 21190 21191 #> [21193] 21192 21193 21194 21195 21196 21197 21198 21199 21200 21201 21202 21203 #> [21205] 21204 21205 21206 21207 21208 21209 21210 21211 21212 21213 21214 21215 #> [21217] 21216 21217 21218 21219 21220 21221 21222 21223 21224 21225 21226 21227 #> [21229] 21228 21229 21230 21231 21232 21233 21234 21235 21236 21237 21238 21239 #> [21241] 21240 21241 21242 21243 21244 21245 21246 21247 21248 21249 21250 21251 #> [21253] 21252 21253 21254 21255 21256 21257 21258 21259 21260 21261 21262 21263 #> [21265] 21264 21265 21266 21267 21268 21269 21270 21271 21272 21273 21274 21275 #> [21277] 21276 21277 21278 21279 21280 21281 21282 21283 21284 21285 21286 21287 #> [21289] 21288 21289 21290 21291 21292 21293 21294 21295 21296 21297 21298 21299 #> [21301] 21300 21301 21302 21303 21304 21305 21306 21307 21308 21309 21310 21311 #> [21313] 21312 21313 21314 21315 21316 21317 21318 21319 21320 21321 21322 21323 #> [21325] 21324 21325 21326 21327 21328 21329 21330 21331 21332 21333 21334 21335 #> [21337] 21336 21337 21338 21339 21340 21341 21342 21343 21344 21345 21346 21347 #> [21349] 21348 21349 21350 21351 21352 21353 21354 21355 21356 21357 21358 21359 #> [21361] 21360 21361 21362 21363 21364 21365 21366 21367 21368 21369 21370 21371 #> [21373] 21372 21373 21374 21375 21376 21377 21378 21379 21380 21381 21382 21383 #> [21385] 21384 21385 21386 21387 21388 21389 21390 21391 21392 21393 21394 21395 #> [21397] 21396 21397 21398 21399 21400 21401 21402 21403 21404 21405 21406 21407 #> [21409] 21408 21409 21410 21411 21412 21413 21414 21415 21416 21417 21418 21419 #> [21421] 21420 21421 21422 21423 21424 21425 21426 21427 21428 21429 21430 21431 #> [21433] 21432 21433 21434 21435 21436 21437 21438 21439 21440 21441 21442 21443 #> [21445] 21444 21445 21446 21447 21448 21449 21450 21451 21452 21453 21454 21455 #> [21457] 21456 21457 21458 21459 21460 21461 21462 21463 21464 21465 21466 21467 #> [21469] 21468 21469 21470 21471 21472 21473 21474 21475 21476 21477 21478 21479 #> [21481] 21480 21481 21482 21483 21484 21485 21486 21487 21488 21489 21490 21491 #> [21493] 21492 21493 21494 21495 21496 21497 21498 21499 21500 21501 21502 21503 #> [21505] 21504 21505 21506 21507 21508 21509 21510 21511 21512 21513 21514 21515 #> [21517] 21516 21517 21518 21519 21520 21521 21522 21523 21524 21525 21526 21527 #> [21529] 21528 21529 21530 21531 21532 21533 21534 21535 21536 21537 21538 21539 #> [21541] 21540 21541 21542 21543 21544 21545 21546 21547 21548 21549 21550 21551 #> [21553] 21552 21553 21554 21555 21556 21557 21558 21559 21560 21561 21562 21563 #> [21565] 21564 21565 21566 21567 21568 21569 21570 21571 21572 21573 21574 21575 #> [21577] 21576 21577 21578 21579 21580 21581 21582 21583 21584 21585 21586 21587 #> [21589] 21588 21589 21590 21591 21592 21593 21594 21595 21596 21597 21598 21599 #> [21601] 21600 21601 21602 21603 21604 21605 21606 21607 21608 21609 21610 21611 #> [21613] 21612 21613 21614 21615 21616 21617 21618 21619 21620 21621 21622 21623 #> [21625] 21624 21625 21626 21627 21628 21629 21630 21631 21632 21633 21634 21635 #> [21637] 21636 21637 21638 21639 21640 21641 21642 21643 21644 21645 21646 21647 #> [21649] 21648 21649 21650 21651 21652 21653 21654 21655 21656 21657 21658 21659 #> [21661] 21660 21661 21662 21663 21664 21665 21666 21667 21668 21669 21670 21671 #> [21673] 21672 21673 21674 21675 21676 21677 21678 21679 21680 21681 21682 21683 #> [21685] 21684 21685 21686 21687 21688 21689 21690 21691 21692 21693 21694 21695 #> [21697] 21696 21697 21698 21699 21700 21701 21702 21703 21704 21705 21706 21707 #> [21709] 21708 21709 21710 21711 21712 21713 21714 21715 21716 21717 21718 21719 #> [21721] 21720 21721 21722 21723 21724 21725 21726 21727 21728 21729 21730 21731 #> [21733] 21732 21733 21734 21735 21736 21737 21738 21739 21740 21741 21742 21743 #> [21745] 21744 21745 21746 21747 21748 21749 21750 21751 21752 21753 21754 21755 #> [21757] 21756 21757 21758 21759 21760 21761 21762 21763 21764 21765 21766 21767 #> [21769] 21768 21769 21770 21771 21772 21773 21774 21775 21776 21777 21778 21779 #> [21781] 21780 21781 21782 21783 21784 21785 21786 21787 21788 21789 21790 21791 #> [21793] 21792 21793 21794 21795 21796 21797 21798 21799 21800 21801 21802 21803 #> [21805] 21804 21805 21806 21807 21808 21809 21810 21811 21812 21813 21814 21815 #> [21817] 21816 21817 21818 21819 21820 21821 21822 21823 21824 21825 21826 21827 #> [21829] 21828 21829 21830 21831 21832 21833 21834 21835 21836 21837 21838 21839 #> [21841] 21840 21841 21842 21843 21844 21845 21846 21847 21848 21849 21850 21851 #> [21853] 21852 21853 21854 21855 21856 21857 21858 21859 21860 21861 21862 21863 #> [21865] 21864 21865 21866 21867 21868 21869 21870 21871 21872 21873 21874 21875 #> [21877] 21876 21877 21878 21879 21880 21881 21882 21883 21884 21885 21886 21887 #> [21889] 21888 21889 21890 21891 21892 21893 21894 21895 21896 21897 21898 21899 #> [21901] 21900 21901 21902 21903 21904 21905 21906 21907 21908 21909 21910 21911 #> [21913] 21912 21913 21914 21915 21916 21917 21918 21919 21920 21921 21922 21923 #> [21925] 21924 21925 21926 21927 21928 21929 21930 21931 21932 21933 21934 21935 #> [21937] 21936 21937 21938 21939 21940 21941 21942 21943 21944 21945 21946 21947 #> [21949] 21948 21949 21950 21951 21952 21953 21954 21955 21956 21957 21958 21959 #> [21961] 21960 21961 21962 21963 21964 21965 21966 21967 21968 21969 21970 21971 #> [21973] 21972 21973 21974 21975 21976 21977 21978 21979 21980 21981 21982 21983 #> [21985] 21984 21985 21986 21987 21988 21989 21990 21991 21992 21993 21994 21995 #> [21997] 21996 21997 21998 21999 22000 22001 22002 22003 22004 22005 22006 22007 #> [22009] 22008 22009 22010 22011 22012 22013 22014 22015 22016 22017 22018 22019 #> [22021] 22020 22021 22022 22023 22024 22025 22026 22027 22028 22029 22030 22031 #> [22033] 22032 22033 22034 22035 22036 22037 22038 22039 22040 22041 22042 22043 #> [22045] 22044 22045 22046 22047 22048 22049 22050 22051 22052 22053 22054 22055 #> [22057] 22056 22057 22058 22059 22060 22061 22062 22063 22064 22065 22066 22067 #> [22069] 22068 22069 22070 22071 22072 22073 22074 22075 22076 22077 22078 22079 #> [22081] 22080 22081 22082 22083 22084 22085 22086 22087 22088 22089 22090 22091 #> [22093] 22092 22093 22094 22095 22096 22097 22098 22099 22100 22101 22102 22103 #> [22105] 22104 22105 22106 22107 22108 22109 22110 22111 22112 22113 22114 22115 #> [22117] 22116 22117 22118 22119 22120 22121 22122 22123 22124 22125 22126 22127 #> [22129] 22128 22129 22130 22131 22132 22133 22134 22135 22136 22137 22138 22139 #> [22141] 22140 22141 22142 22143 22144 22145 22146 22147 22148 22149 22150 22151 #> [22153] 22152 22153 22154 22155 22156 22157 22158 22159 22160 22161 22162 22163 #> [22165] 22164 22165 22166 22167 22168 22169 22170 22171 22172 22173 22174 22175 #> [22177] 22176 22177 22178 22179 22180 22181 22182 22183 22184 22185 22186 22187 #> [22189] 22188 22189 22190 22191 22192 22193 22194 22195 22196 22197 22198 22199 #> [22201] 22200 22201 22202 22203 22204 22205 22206 22207 22208 22209 22210 22211 #> [22213] 22212 22213 22214 22215 22216 22217 22218 22219 22220 22221 22222 22223 #> [22225] 22224 22225 22226 22227 22228 22229 22230 22231 22232 22233 22234 22235 #> [22237] 22236 22237 22238 22239 22240 22241 22242 22243 22244 22245 22246 22247 #> [22249] 22248 22249 22250 22251 22252 22253 22254 22255 22256 22257 22258 22259 #> [22261] 22260 22261 22262 22263 22264 22265 22266 22267 22268 22269 22270 22271 #> [22273] 22272 22273 22274 22275 22276 22277 22278 22279 22280 22281 22282 22283 #> [22285] 22284 22285 22286 22287 22288 22289 22290 22291 22292 22293 22294 22295 #> [22297] 22296 22297 22298 22299 22300 22301 22302 22303 22304 22305 22306 22307 #> [22309] 22308 22309 22310 22311 22312 22313 22314 22315 22316 22317 22318 22319 #> [22321] 22320 22321 22322 22323 22324 22325 22326 22327 22328 22329 22330 22331 #> [22333] 22332 22333 22334 22335 22336 22337 22338 22339 22340 22341 22342 22343 #> [22345] 22344 22345 22346 22347 22348 22349 22350 22351 22352 22353 22354 22355 #> [22357] 22356 22357 22358 22359 22360 22361 22362 22363 22364 22365 22366 22367 #> [22369] 22368 22369 22370 22371 22372 22373 22374 22375 22376 22377 22378 22379 #> [22381] 22380 22381 22382 22383 22384 22385 22386 22387 22388 22389 22390 22391 #> [22393] 22392 22393 22394 22395 22396 22397 22398 22399 22400 22401 22402 22403 #> [22405] 22404 22405 22406 22407 22408 22409 22410 22411 22412 22413 22414 22415 #> [22417] 22416 22417 22418 22419 22420 22421 22422 22423 22424 22425 22426 22427 #> [22429] 22428 22429 22430 22431 22432 22433 22434 22435 22436 22437 22438 22439 #> [22441] 22440 22441 22442 22443 22444 22445 22446 22447 22448 22449 22450 22451 #> [22453] 22452 22453 22454 22455 22456 22457 22458 22459 22460 22461 22462 22463 #> [22465] 22464 22465 22466 22467 22468 22469 22470 22471 22472 22473 22474 22475 #> [22477] 22476 22477 22478 22479 22480 22481 22482 22483 22484 22485 22486 22487 #> [22489] 22488 22489 22490 22491 22492 22493 22494 22495 22496 22497 22498 22499 #> [22501] 22500 22501 22502 22503 22504 22505 22506 22507 22508 22509 22510 22511 #> [22513] 22512 22513 22514 22515 22516 22517 22518 22519 22520 22521 22522 22523 #> [22525] 22524 22525 22526 22527 22528 22529 22530 22531 22532 22533 22534 22535 #> [22537] 22536 22537 22538 22539 22540 22541 22542 22543 22544 22545 22546 22547 #> [22549] 22548 22549 22550 22551 22552 22553 22554 22555 22556 22557 22558 22559 #> [22561] 22560 22561 22562 22563 22564 22565 22566 22567 22568 22569 22570 22571 #> [22573] 22572 22573 22574 22575 22576 22577 22578 22579 22580 22581 22582 22583 #> [22585] 22584 22585 22586 22587 22588 22589 22590 22591 22592 22593 22594 22595 #> [22597] 22596 22597 22598 22599 22600 22601 22602 22603 22604 22605 22606 22607 #> [22609] 22608 22609 22610 22611 22612 22613 22614 22615 22616 22617 22618 22619 #> [22621] 22620 22621 22622 22623 22624 22625 22626 22627 22628 22629 22630 22631 #> [22633] 22632 22633 22634 22635 22636 22637 22638 22639 22640 22641 22642 22643 #> [22645] 22644 22645 22646 22647 22648 22649 22650 22651 22652 22653 22654 22655 #> [22657] 22656 22657 22658 22659 22660 22661 22662 22663 22664 22665 22666 22667 #> [22669] 22668 22669 22670 22671 22672 22673 22674 22675 22676 22677 22678 22679 #> [22681] 22680 22681 22682 22683 22684 22685 22686 22687 22688 22689 22690 22691 #> [22693] 22692 22693 22694 22695 22696 22697 22698 22699 22700 22701 22702 22703 #> [22705] 22704 22705 22706 22707 22708 22709 22710 22711 22712 22713 22714 22715 #> [22717] 22716 22717 22718 22719 22720 22721 22722 22723 22724 22725 22726 22727 #> [22729] 22728 22729 22730 22731 22732 22733 22734 22735 22736 22737 22738 22739 #> [22741] 22740 22741 22742 22743 22744 22745 22746 22747 22748 22749 22750 22751 #> [22753] 22752 22753 22754 22755 22756 22757 22758 22759 22760 22761 22762 22763 #> [22765] 22764 22765 22766 22767 22768 22769 22770 22771 22772 22773 22774 22775 #> [22777] 22776 22777 22778 22779 22780 22781 22782 22783 22784 22785 22786 22787 #> [22789] 22788 22789 22790 22791 22792 22793 22794 22795 22796 22797 22798 22799 #> [22801] 22800 22801 22802 22803 22804 22805 22806 22807 22808 22809 22810 22811 #> [22813] 22812 22813 22814 22815 22816 22817 22818 22819 22820 22821 22822 22823 #> [22825] 22824 22825 22826 22827 22828 22829 22830 22831 22832 22833 22834 22835 #> [22837] 22836 22837 22838 22839 22840 22841 22842 22843 22844 22845 22846 22847 #> [22849] 22848 22849 22850 22851 22852 22853 22854 22855 22856 22857 22858 22859 #> [22861] 22860 22861 22862 22863 22864 22865 22866 22867 22868 22869 22870 22871 #> [22873] 22872 22873 22874 22875 22876 22877 22878 22879 22880 22881 22882 22883 #> [22885] 22884 22885 22886 22887 22888 22889 22890 22891 22892 22893 22894 22895 #> [22897] 22896 22897 22898 22899 22900 22901 22902 22903 22904 22905 22906 22907 #> [22909] 22908 22909 22910 22911 22912 22913 22914 22915 22916 22917 22918 22919 #> [22921] 22920 22921 22922 22923 22924 22925 22926 22927 22928 22929 22930 22931 #> [22933] 22932 22933 22934 22935 22936 22937 22938 22939 22940 22941 22942 22943 #> [22945] 22944 22945 22946 22947 22948 22949 22950 22951 22952 22953 22954 22955 #> [22957] 22956 22957 22958 22959 22960 22961 22962 22963 22964 22965 22966 22967 #> [22969] 22968 22969 22970 22971 22972 22973 22974 22975 22976 22977 22978 22979 #> [22981] 22980 22981 22982 22983 22984 22985 22986 22987 22988 22989 22990 22991 #> [22993] 22992 22993 22994 22995 22996 22997 22998 22999 23000 23001 23002 23003 #> [23005] 23004 23005 23006 23007 23008 23009 23010 23011 23012 23013 23014 23015 #> [23017] 23016 23017 23018 23019 23020 23021 23022 23023 23024 23025 23026 23027 #> [23029] 23028 23029 23030 23031 23032 23033 23034 23035 23036 23037 23038 23039 #> [23041] 23040 23041 23042 23043 23044 23045 23046 23047 23048 23049 23050 23051 #> [23053] 23052 23053 23054 23055 23056 23057 23058 23059 23060 23061 23062 23063 #> [23065] 23064 23065 23066 23067 23068 23069 23070 23071 23072 23073 23074 23075 #> [23077] 23076 23077 23078 23079 23080 23081 23082 23083 23084 23085 23086 23087 #> [23089] 23088 23089 23090 23091 23092 23093 23094 23095 23096 23097 23098 23099 #> [23101] 23100 23101 23102 23103 23104 23105 23106 23107 23108 23109 23110 23111 #> [23113] 23112 23113 23114 23115 23116 23117 23118 23119 23120 23121 23122 23123 #> [23125] 23124 23125 23126 23127 23128 23129 23130 23131 23132 23133 23134 23135 #> [23137] 23136 23137 23138 23139 23140 23141 23142 23143 23144 23145 23146 23147 #> [23149] 23148 23149 23150 23151 23152 23153 23154 23155 23156 23157 23158 23159 #> [23161] 23160 23161 23162 23163 23164 23165 23166 23167 23168 23169 23170 23171 #> [23173] 23172 23173 23174 23175 23176 23177 23178 23179 23180 23181 23182 23183 #> [23185] 23184 23185 23186 23187 23188 23189 23190 23191 23192 23193 23194 23195 #> [23197] 23196 23197 23198 23199 23200 23201 23202 23203 23204 23205 23206 23207 #> [23209] 23208 23209 23210 23211 23212 23213 23214 23215 23216 23217 23218 23219 #> [23221] 23220 23221 23222 23223 23224 23225 23226 23227 23228 23229 23230 23231 #> [23233] 23232 23233 23234 23235 23236 23237 23238 23239 23240 23241 23242 23243 #> [23245] 23244 23245 23246 23247 23248 23249 23250 23251 23252 23253 23254 23255 #> [23257] 23256 23257 23258 23259 23260 23261 23262 23263 23264 23265 23266 23267 #> [23269] 23268 23269 23270 23271 23272 23273 23274 23275 23276 23277 23278 23279 #> [23281] 23280 23281 23282 23283 23284 23285 23286 23287 23288 23289 23290 23291 #> [23293] 23292 23293 23294 23295 23296 23297 23298 23299 23300 23301 23302 23303 #> [23305] 23304 23305 23306 23307 23308 23309 23310 23311 23312 23313 23314 23315 #> [23317] 23316 23317 23318 23319 23320 23321 23322 23323 23324 23325 23326 23327 #> [23329] 23328 23329 23330 23331 23332 23333 23334 23335 23336 23337 23338 23339 #> [23341] 23340 23341 23342 23343 23344 23345 23346 23347 23348 23349 23350 23351 #> [23353] 23352 23353 23354 23355 23356 23357 23358 23359 23360 23361 23362 23363 #> [23365] 23364 23365 23366 23367 23368 23369 23370 23371 23372 23373 23374 23375 #> [23377] 23376 23377 23378 23379 23380 23381 23382 23383 23384 23385 23386 23387 #> [23389] 23388 23389 23390 23391 23392 23393 23394 23395 23396 23397 23398 23399 #> [23401] 23400 23401 23402 23403 23404 23405 23406 23407 23408 23409 23410 23411 #> [23413] 23412 23413 23414 23415 23416 23417 23418 23419 23420 23421 23422 23423 #> [23425] 23424 23425 23426 23427 23428 23429 23430 23431 23432 23433 23434 23435 #> [23437] 23436 23437 23438 23439 23440 23441 23442 23443 23444 23445 23446 23447 #> [23449] 23448 23449 23450 23451 23452 23453 23454 23455 23456 23457 23458 23459 #> [23461] 23460 23461 23462 23463 23464 23465 23466 23467 23468 23469 23470 23471 #> [23473] 23472 23473 23474 23475 23476 23477 23478 23479 23480 23481 23482 23483 #> [23485] 23484 23485 23486 23487 23488 23489 23490 23491 23492 23493 23494 23495 #> [23497] 23496 23497 23498 23499 23500 23501 23502 23503 23504 23505 23506 23507 #> [23509] 23508 23509 23510 23511 23512 23513 23514 23515 23516 23517 23518 23519 #> [23521] 23520 23521 23522 23523 23524 23525 23526 23527 23528 23529 23530 23531 #> [23533] 23532 23533 23534 23535 23536 23537 23538 23539 23540 23541 23542 23543 #> [23545] 23544 23545 23546 23547 23548 23549 23550 23551 23552 23553 23554 23555 #> [23557] 23556 23557 23558 23559 23560 23561 23562 23563 23564 23565 23566 23567 #> [23569] 23568 23569 23570 23571 23572 23573 23574 23575 23576 23577 23578 23579 #> [23581] 23580 23581 23582 23583 23584 23585 23586 23587 23588 23589 23590 23591 #> [23593] 23592 23593 23594 23595 23596 23597 23598 23599 23600 23601 23602 23603 #> [23605] 23604 23605 23606 23607 23608 23609 23610 23611 23612 23613 23614 23615 #> [23617] 23616 23617 23618 23619 23620 23621 23622 23623 23624 23625 23626 23627 #> [23629] 23628 23629 23630 23631 23632 23633 23634 23635 23636 23637 23638 23639 #> [23641] 23640 23641 23642 23643 23644 23645 23646 23647 23648 23649 23650 23651 #> [23653] 23652 23653 23654 23655 23656 23657 23658 23659 23660 23661 23662 23663 #> [23665] 23664 23665 23666 23667 23668 23669 23670 23671 23672 23673 23674 23675 #> [23677] 23676 23677 23678 23679 23680 23681 23682 23683 23684 23685 23686 23687 #> [23689] 23688 23689 23690 23691 23692 23693 23694 23695 23696 23697 23698 23699 #> [23701] 23700 23701 23702 23703 23704 23705 23706 23707 23708 23709 23710 23711 #> [23713] 23712 23713 23714 23715 23716 23717 23718 23719 23720 23721 23722 23723 #> [23725] 23724 23725 23726 23727 23728 23729 23730 23731 23732 23733 23734 23735 #> [23737] 23736 23737 23738 23739 23740 23741 23742 23743 23744 23745 23746 23747 #> [23749] 23748 23749 23750 23751 23752 23753 23754 23755 23756 23757 23758 23759 #> [23761] 23760 23761 23762 23763 23764 23765 23766 23767 23768 23769 23770 23771 #> [23773] 23772 23773 23774 23775 23776 23777 23778 23779 23780 23781 23782 23783 #> [23785] 23784 23785 23786 23787 23788 23789 23790 23791 23792 23793 23794 23795 #> [23797] 23796 23797 23798 23799 23800 23801 23802 23803 23804 23805 23806 23807 #> [23809] 23808 23809 23810 23811 23812 23813 23814 23815 23816 23817 23818 23819 #> [23821] 23820 23821 23822 23823 23824 23825 23826 23827 23828 23829 23830 23831 #> [23833] 23832 23833 23834 23835 23836 23837 23838 23839 23840 23841 23842 23843 #> [23845] 23844 23845 23846 23847 23848 23849 23850 23851 23852 23853 23854 23855 #> [23857] 23856 23857 23858 23859 23860 23861 23862 23863 23864 23865 23866 23867 #> [23869] 23868 23869 23870 23871 23872 23873 23874 23875 23876 23877 23878 23879 #> [23881] 23880 23881 23882 23883 23884 23885 23886 23887 23888 23889 23890 23891 #> [23893] 23892 23893 23894 23895 23896 23897 23898 23899 23900 23901 23902 23903 #> [23905] 23904 23905 23906 23907 23908 23909 23910 23911 23912 23913 23914 23915 #> [23917] 23916 23917 23918 23919 23920 23921 23922 23923 23924 23925 23926 23927 #> [23929] 23928 23929 23930 23931 23932 23933 23934 23935 23936 23937 23938 23939 #> [23941] 23940 23941 23942 23943 23944 23945 23946 23947 23948 23949 23950 23951 #> [23953] 23952 23953 23954 23955 23956 23957 23958 23959 23960 23961 23962 23963 #> [23965] 23964 23965 23966 23967 23968 23969 23970 23971 23972 23973 23974 23975 #> [23977] 23976 23977 23978 23979 23980 23981 23982 23983 23984 23985 23986 23987 #> [23989] 23988 23989 23990 23991 23992 23993 23994 23995 23996 23997 23998 23999 #> [24001] 24000 24001 24002 24003 24004 24005 24006 24007 24008 24009 24010 24011 #> [24013] 24012 24013 24014 24015 24016 24017 24018 24019 24020 24021 24022 24023 #> [24025] 24024 24025 24026 24027 24028 24029 24030 24031 24032 24033 24034 24035 #> [24037] 24036 24037 24038 24039 24040 24041 24042 24043 24044 24045 24046 24047 #> [24049] 24048 24049 24050 24051 24052 24053 24054 24055 24056 24057 24058 24059 #> [24061] 24060 24061 24062 24063 24064 24065 24066 24067 24068 24069 24070 24071 #> [24073] 24072 24073 24074 24075 24076 24077 24078 24079 24080 24081 24082 24083 #> [24085] 24084 24085 24086 24087 24088 24089 24090 24091 24092 24093 24094 24095 #> [24097] 24096 24097 24098 24099 24100 24101 24102 24103 24104 24105 24106 24107 #> [24109] 24108 24109 24110 24111 24112 24113 24114 24115 24116 24117 24118 24119 #> [24121] 24120 24121 24122 24123 24124 24125 24126 24127 24128 24129 24130 24131 #> [24133] 24132 24133 24134 24135 24136 24137 24138 24139 24140 24141 24142 24143 #> [24145] 24144 24145 24146 24147 24148 24149 24150 24151 24152 24153 24154 24155 #> [24157] 24156 24157 24158 24159 24160 24161 24162 24163 24164 24165 24166 24167 #> [24169] 24168 24169 24170 24171 24172 24173 24174 24175 24176 24177 24178 24179 #> [24181] 24180 24181 24182 24183 24184 24185 24186 24187 24188 24189 24190 24191 #> [24193] 24192 24193 24194 24195 24196 24197 24198 24199 24200 24201 24202 24203 #> [24205] 24204 24205 24206 24207 24208 24209 24210 24211 24212 24213 24214 24215 #> [24217] 24216 24217 24218 24219 24220 24221 24222 24223 24224 24225 24226 24227 #> [24229] 24228 24229 24230 24231 24232 24233 24234 24235 24236 24237 24238 24239 #> [24241] 24240 24241 24242 24243 24244 24245 24246 24247 24248 24249 24250 24251 #> [24253] 24252 24253 24254 24255 24256 24257 24258 24259 24260 24261 24262 24263 #> [24265] 24264 24265 24266 24267 24268 24269 24270 24271 24272 24273 24274 24275 #> [24277] 24276 24277 24278 24279 24280 24281 24282 24283 24284 24285 24286 24287 #> [24289] 24288 24289 24290 24291 24292 24293 24294 24295 24296 24297 24298 24299 #> [24301] 24300 24301 24302 24303 24304 24305 24306 24307 24308 24309 24310 24311 #> [24313] 24312 24313 24314 24315 24316 24317 24318 24319 24320 24321 24322 24323 #> [24325] 24324 24325 24326 24327 24328 24329 24330 24331 24332 24333 24334 24335 #> [24337] 24336 24337 24338 24339 24340 24341 24342 24343 24344 24345 24346 24347 #> [24349] 24348 24349 24350 24351 24352 24353 24354 24355 24356 24357 24358 24359 #> [24361] 24360 24361 24362 24363 24364 24365 24366 24367 24368 24369 24370 24371 #> [24373] 24372 24373 24374 24375 24376 24377 24378 24379 24380 24381 24382 24383 #> [24385] 24384 24385 24386 24387 24388 24389 24390 24391 24392 24393 24394 24395 #> [24397] 24396 24397 24398 24399 24400 24401 24402 24403 24404 24405 24406 24407 #> [24409] 24408 24409 24410 24411 24412 24413 24414 24415 24416 24417 24418 24419 #> [24421] 24420 24421 24422 24423 24424 24425 24426 24427 24428 24429 24430 24431 #> [24433] 24432 24433 24434 24435 24436 24437 24438 24439 24440 24441 24442 24443 #> [24445] 24444 24445 24446 24447 24448 24449 24450 24451 24452 24453 24454 24455 #> [24457] 24456 24457 24458 24459 24460 24461 24462 24463 24464 24465 24466 24467 #> [24469] 24468 24469 24470 24471 24472 24473 24474 24475 24476 24477 24478 24479 #> [24481] 24480 24481 24482 24483 24484 24485 24486 24487 24488 24489 24490 24491 #> [24493] 24492 24493 24494 24495 24496 24497 24498 24499 24500 24501 24502 24503 #> [24505] 24504 24505 24506 24507 24508 24509 24510 24511 24512 24513 24514 24515 #> [24517] 24516 24517 24518 24519 24520 24521 24522 24523 24524 24525 24526 24527 #> [24529] 24528 24529 24530 24531 24532 24533 24534 24535 24536 24537 24538 24539 #> [24541] 24540 24541 24542 24543 24544 24545 24546 24547 24548 24549 24550 24551 #> [24553] 24552 24553 24554 24555 24556 24557 24558 24559 24560 24561 24562 24563 #> [24565] 24564 24565 24566 24567 24568 24569 24570 24571 24572 24573 24574 24575 #> [24577] 24576 24577 24578 24579 24580 24581 24582 24583 24584 24585 24586 24587 #> [24589] 24588 24589 24590 24591 24592 24593 24594 24595 24596 24597 24598 24599 #> [24601] 24600 24601 24602 24603 24604 24605 24606 24607 24608 24609 24610 24611 #> [24613] 24612 24613 24614 24615 24616 24617 24618 24619 24620 24621 24622 24623 #> [24625] 24624 24625 24626 24627 24628 24629 24630 24631 24632 24633 24634 24635 #> [24637] 24636 24637 24638 24639 24640 24641 24642 24643 24644 24645 24646 24647 #> [24649] 24648 24649 24650 24651 24652 24653 24654 24655 24656 24657 24658 24659 #> [24661] 24660 24661 24662 24663 24664 24665 24666 24667 24668 24669 24670 24671 #> [24673] 24672 24673 24674 24675 24676 24677 24678 24679 24680 24681 24682 24683 #> [24685] 24684 24685 24686 24687 24688 24689 24690 24691 24692 24693 24694 24695 #> [24697] 24696 24697 24698 24699 24700 24701 24702 24703 24704 24705 24706 24707 #> [24709] 24708 24709 24710 24711 24712 24713 24714 24715 24716 24717 24718 24719 #> [24721] 24720 24721 24722 24723 24724 24725 24726 24727 24728 24729 24730 24731 #> [24733] 24732 24733 24734 24735 24736 24737 24738 24739 24740 24741 24742 24743 #> [24745] 24744 24745 24746 24747 24748 24749 24750 24751 24752 24753 24754 24755 #> [24757] 24756 24757 24758 24759 24760 24761 24762 24763 24764 24765 24766 24767 #> [24769] 24768 24769 24770 24771 24772 24773 24774 24775 24776 24777 24778 24779 #> [24781] 24780 24781 24782 24783 24784 24785 24786 24787 24788 24789 24790 24791 #> [24793] 24792 24793 24794 24795 24796 24797 24798 24799 24800 24801 24802 24803 #> [24805] 24804 24805 24806 24807 24808 24809 24810 24811 24812 24813 24814 24815 #> [24817] 24816 24817 24818 24819 24820 24821 24822 24823 24824 24825 24826 24827 #> [24829] 24828 24829 24830 24831 24832 24833 24834 24835 24836 24837 24838 24839 #> [24841] 24840 24841 24842 24843 24844 24845 24846 24847 24848 24849 24850 24851 #> [24853] 24852 24853 24854 24855 24856 24857 24858 24859 24860 24861 24862 24863 #> [24865] 24864 24865 24866 24867 24868 24869 24870 24871 24872 24873 24874 24875 #> [24877] 24876 24877 24878 24879 24880 24881 24882 24883 24884 24885 24886 24887 #> [24889] 24888 24889 24890 24891 24892 24893 24894 24895 24896 24897 24898 24899 #> [24901] 24900 24901 24902 24903 24904 24905 24906 24907 24908 24909 24910 24911 #> [24913] 24912 24913 24914 24915 24916 24917 24918 24919 24920 24921 24922 24923 #> [24925] 24924 24925 24926 24927 24928 24929 24930 24931 24932 24933 24934 24935 #> [24937] 24936 24937 24938 24939 24940 24941 24942 24943 24944 24945 24946 24947 #> [24949] 24948 24949 24950 24951 24952 24953 24954 24955 24956 24957 24958 24959 #> [24961] 24960 24961 24962 24963 24964 24965 24966 24967 24968 24969 24970 24971 #> [24973] 24972 24973 24974 24975 24976 24977 24978 24979 24980 24981 24982 24983 #> [24985] 24984 24985 24986 24987 24988 24989 24990 24991 24992 24993 24994 24995 #> [24997] 24996 24997 24998 24999 25000 25001 25002 25003 25004 25005 25006 25007 #> [25009] 25008 25009 25010 25011 25012 25013 25014 25015 25016 25017 25018 25019 #> [25021] 25020 25021 25022 25023 25024 25025 25026 25027 25028 25029 25030 25031 #> [25033] 25032 25033 25034 25035 25036 25037 25038 25039 25040 25041 25042 25043 #> [25045] 25044 25045 25046 25047 25048 25049 25050 25051 25052 25053 25054 25055 #> [25057] 25056 25057 25058 25059 25060 25061 25062 25063 25064 25065 25066 25067 #> [25069] 25068 25069 25070 25071 25072 25073 25074 25075 25076 25077 25078 25079 #> [25081] 25080 25081 25082 25083 25084 25085 25086 25087 25088 25089 25090 25091 #> [25093] 25092 25093 25094 25095 25096 25097 25098 25099 25100 25101 25102 25103 #> [25105] 25104 25105 25106 25107 25108 25109 25110 25111 25112 25113 25114 25115 #> [25117] 25116 25117 25118 25119 25120 25121 25122 25123 25124 25125 25126 25127 #> [25129] 25128 25129 25130 25131 25132 25133 25134 25135 25136 25137 25138 25139 #> [25141] 25140 25141 25142 25143 25144 25145 25146 25147 25148 25149 25150 25151 #> [25153] 25152 25153 25154 25155 25156 25157 25158 25159 25160 25161 25162 25163 #> [25165] 25164 25165 25166 25167 25168 25169 25170 25171 25172 25173 25174 25175 #> [25177] 25176 25177 25178 25179 25180 25181 25182 25183 25184 25185 25186 25187 #> [25189] 25188 25189 25190 25191 25192 25193 25194 25195 25196 25197 25198 25199 #> [25201] 25200 25201 25202 25203 25204 25205 25206 25207 25208 25209 25210 25211 #> [25213] 25212 25213 25214 25215 25216 25217 25218 25219 25220 25221 25222 25223 #> [25225] 25224 25225 25226 25227 25228 25229 25230 25231 25232 25233 25234 25235 #> [25237] 25236 25237 25238 25239 25240 25241 25242 25243 25244 25245 25246 25247 #> [25249] 25248 25249 25250 25251 25252 25253 25254 25255 25256 25257 25258 25259 #> [25261] 25260 25261 25262 25263 25264 25265 25266 25267 25268 25269 25270 25271 #> [25273] 25272 25273 25274 25275 25276 25277 25278 25279 25280 25281 25282 25283 #> [25285] 25284 25285 25286 25287 25288 25289 25290 25291 25292 25293 25294 25295 #> [25297] 25296 25297 25298 25299 25300 25301 25302 25303 25304 25305 25306 25307 #> [25309] 25308 25309 25310 25311 25312 25313 25314 25315 25316 25317 25318 25319 #> [25321] 25320 25321 25322 25323 25324 25325 25326 25327 25328 25329 25330 25331 #> [25333] 25332 25333 25334 25335 25336 25337 25338 25339 25340 25341 25342 25343 #> [25345] 25344 25345 25346 25347 25348 25349 25350 25351 25352 25353 25354 25355 #> [25357] 25356 25357 25358 25359 25360 25361 25362 25363 25364 25365 25366 25367 #> [25369] 25368 25369 25370 25371 25372 25373 25374 25375 25376 25377 25378 25379 #> [25381] 25380 25381 25382 25383 25384 25385 25386 25387 25388 25389 25390 25391 #> [25393] 25392 25393 25394 25395 25396 25397 25398 25399 25400 25401 25402 25403 #> [25405] 25404 25405 25406 25407 25408 25409 25410 25411 25412 25413 25414 25415 #> [25417] 25416 25417 25418 25419 25420 25421 25422 25423 25424 25425 25426 25427 #> [25429] 25428 25429 25430 25431 25432 25433 25434 25435 25436 25437 25438 25439 #> [25441] 25440 25441 25442 25443 25444 25445 25446 25447 25448 25449 25450 25451 #> [25453] 25452 25453 25454 25455 25456 25457 25458 25459 25460 25461 25462 25463 #> [25465] 25464 25465 25466 25467 25468 25469 25470 25471 25472 25473 25474 25475 #> [25477] 25476 25477 25478 25479 25480 25481 25482 25483 25484 25485 25486 25487 #> [25489] 25488 25489 25490 25491 25492 25493 25494 25495 25496 25497 25498 25499 #> [25501] 25500 25501 25502 25503 25504 25505 25506 25507 25508 25509 25510 25511 #> [25513] 25512 25513 25514 25515 25516 25517 25518 25519 25520 25521 25522 25523 #> [25525] 25524 25525 25526 25527 25528 25529 25530 25531 25532 25533 25534 25535 #> [25537] 25536 25537 25538 25539 25540 25541 25542 25543 25544 25545 25546 25547 #> [25549] 25548 25549 25550 25551 25552 25553 25554 25555 25556 25557 25558 25559 #> [25561] 25560 25561 25562 25563 25564 25565 25566 25567 25568 25569 25570 25571 #> [25573] 25572 25573 25574 25575 25576 25577 25578 25579 25580 25581 25582 25583 #> [25585] 25584 25585 25586 25587 25588 25589 25590 25591 25592 25593 25594 25595 #> [25597] 25596 25597 25598 25599 25600 25601 25602 25603 25604 25605 25606 25607 #> [25609] 25608 25609 25610 25611 25612 25613 25614 25615 25616 25617 25618 25619 #> [25621] 25620 25621 25622 25623 25624 25625 25626 25627 25628 25629 25630 25631 #> [25633] 25632 25633 25634 25635 25636 25637 25638 25639 25640 25641 25642 25643 #> [25645] 25644 25645 25646 25647 25648 25649 25650 25651 25652 25653 25654 25655 #> [25657] 25656 25657 25658 25659 25660 25661 25662 25663 25664 25665 25666 25667 #> [25669] 25668 25669 25670 25671 25672 25673 25674 25675 25676 25677 25678 25679 #> [25681] 25680 25681 25682 25683 25684 25685 25686 25687 25688 25689 25690 25691 #> [25693] 25692 25693 25694 25695 25696 25697 25698 25699 25700 25701 25702 25703 #> [25705] 25704 25705 25706 25707 25708 25709 25710 25711 25712 25713 25714 25715 #> [25717] 25716 25717 25718 25719 25720 25721 25722 25723 25724 25725 25726 25727 #> [25729] 25728 25729 25730 25731 25732 25733 25734 25735 25736 25737 25738 25739 #> [25741] 25740 25741 25742 25743 25744 25745 25746 25747 25748 25749 25750 25751 #> [25753] 25752 25753 25754 25755 25756 25757 25758 25759 25760 25761 25762 25763 #> [25765] 25764 25765 25766 25767 25768 25769 25770 25771 25772 25773 25774 25775 #> [25777] 25776 25777 25778 25779 25780 25781 25782 25783 25784 25785 25786 25787 #> [25789] 25788 25789 25790 25791 25792 25793 25794 25795 25796 25797 25798 25799 #> [25801] 25800 25801 25802 25803 25804 25805 25806 25807 25808 25809 25810 25811 #> [25813] 25812 25813 25814 25815 25816 25817 25818 25819 25820 25821 25822 25823 #> [25825] 25824 25825 25826 25827 25828 25829 25830 25831 25832 25833 25834 25835 #> [25837] 25836 25837 25838 25839 25840 25841 25842 25843 25844 25845 25846 25847 #> [25849] 25848 25849 25850 25851 25852 25853 25854 25855 25856 25857 25858 25859 #> [25861] 25860 25861 25862 25863 25864 25865 25866 25867 25868 25869 25870 25871 #> [25873] 25872 25873 25874 25875 25876 25877 25878 25879 25880 25881 25882 25883 #> [25885] 25884 25885 25886 25887 25888 25889 25890 25891 25892 25893 25894 25895 #> [25897] 25896 25897 25898 25899 25900 25901 25902 25903 25904 25905 25906 25907 #> [25909] 25908 25909 25910 25911 25912 25913 25914 25915 25916 25917 25918 25919 #> [25921] 25920 25921 25922 25923 25924 25925 25926 25927 25928 25929 25930 25931 #> [25933] 25932 25933 25934 25935 25936 25937 25938 25939 25940 25941 25942 25943 #> [25945] 25944 25945 25946 25947 25948 25949 25950 25951 25952 25953 25954 25955 #> [25957] 25956 25957 25958 25959 25960 25961 25962 25963 25964 25965 25966 25967 #> [25969] 25968 25969 25970 25971 25972 25973 25974 25975 25976 25977 25978 25979 #> [25981] 25980 25981 25982 25983 25984 25985 25986 25987 25988 25989 25990 25991 #> [25993] 25992 25993 25994 25995 25996 25997 25998 25999 26000 26001 26002 26003 #> [26005] 26004 26005 26006 26007 26008 26009 26010 26011 26012 26013 26014 26015 #> [26017] 26016 26017 26018 26019 26020 26021 26022 26023 26024 26025 26026 26027 #> [26029] 26028 26029 26030 26031 26032 26033 26034 26035 26036 26037 26038 26039 #> [26041] 26040 26041 26042 26043 26044 26045 26046 26047 26048 26049 26050 26051 #> [26053] 26052 26053 26054 26055 26056 26057 26058 26059 26060 26061 26062 26063 #> [26065] 26064 26065 26066 26067 26068 26069 26070 26071 26072 26073 26074 26075 #> [26077] 26076 26077 26078 26079 26080 26081 26082 26083 26084 26085 26086 26087 #> [26089] 26088 26089 26090 26091 26092 26093 26094 26095 26096 26097 26098 26099 #> [26101] 26100 26101 26102 26103 26104 26105 26106 26107 26108 26109 26110 26111 #> [26113] 26112 26113 26114 26115 26116 26117 26118 26119 26120 26121 26122 26123 #> [26125] 26124 26125 26126 26127 26128 26129 26130 26131 26132 26133 26134 26135 #> [26137] 26136 26137 26138 26139 26140 26141 26142 26143 26144 26145 26146 26147 #> [26149] 26148 26149 26150 26151 26152 26153 26154 26155 26156 26157 26158 26159 #> [26161] 26160 26161 26162 26163 26164 26165 26166 26167 26168 26169 26170 26171 #> [26173] 26172 26173 26174 26175 26176 26177 26178 26179 26180 26181 26182 26183 #> [26185] 26184 26185 26186 26187 26188 26189 26190 26191 26192 26193 26194 26195 #> [26197] 26196 26197 26198 26199 26200 26201 26202 26203 26204 26205 26206 26207 #> [26209] 26208 26209 26210 26211 26212 26213 26214 26215 26216 26217 26218 26219 #> [26221] 26220 26221 26222 26223 26224 26225 26226 26227 26228 26229 26230 26231 #> [26233] 26232 26233 26234 26235 26236 26237 26238 26239 26240 26241 26242 26243 #> [26245] 26244 26245 26246 26247 26248 26249 26250 26251 26252 26253 26254 26255 #> [26257] 26256 26257 26258 26259 26260 26261 26262 26263 26264 26265 26266 26267 #> [26269] 26268 26269 26270 26271 26272 26273 26274 26275 26276 26277 26278 26279 #> [26281] 26280 26281 26282 26283 26284 26285 26286 26287 26288 26289 26290 26291 #> [26293] 26292 26293 26294 26295 26296 26297 26298 26299 26300 26301 26302 26303 #> [26305] 26304 26305 26306 26307 26308 26309 26310 26311 26312 26313 26314 26315 #> [26317] 26316 26317 26318 26319 26320 26321 26322 26323 26324 26325 26326 26327 #> [26329] 26328 26329 26330 26331 26332 26333 26334 26335 26336 26337 26338 26339 #> [26341] 26340 26341 26342 26343 26344 26345 26346 26347 26348 26349 26350 26351 #> [26353] 26352 26353 26354 26355 26356 26357 26358 26359 26360 26361 26362 26363 #> [26365] 26364 26365 26366 26367 26368 26369 26370 26371 26372 26373 26374 26375 #> [26377] 26376 26377 26378 26379 26380 26381 26382 26383 26384 26385 26386 26387 #> [26389] 26388 26389 26390 26391 26392 26393 26394 26395 26396 26397 26398 26399 #> [26401] 26400 26401 26402 26403 26404 26405 26406 26407 26408 26409 26410 26411 #> [26413] 26412 26413 26414 26415 26416 26417 26418 26419 26420 26421 26422 26423 #> [26425] 26424 26425 26426 26427 26428 26429 26430 26431 26432 26433 26434 26435 #> [26437] 26436 26437 26438 26439 26440 26441 26442 26443 26444 26445 26446 26447 #> [26449] 26448 26449 26450 26451 26452 26453 26454 26455 26456 26457 26458 26459 #> [26461] 26460 26461 26462 26463 26464 26465 26466 26467 26468 26469 26470 26471 #> [26473] 26472 26473 26474 26475 26476 26477 26478 26479 26480 26481 26482 26483 #> [26485] 26484 26485 26486 26487 26488 26489 26490 26491 26492 26493 26494 26495 #> [26497] 26496 26497 26498 26499 26500 26501 26502 26503 26504 26505 26506 26507 #> [26509] 26508 26509 26510 26511 26512 26513 26514 26515 26516 26517 26518 26519 #> [26521] 26520 26521 26522 26523 26524 26525 26526 26527 26528 26529 26530 26531 #> [26533] 26532 26533 26534 26535 26536 26537 26538 26539 26540 26541 26542 26543 #> [26545] 26544 26545 26546 26547 26548 26549 26550 26551 26552 26553 26554 26555 #> [26557] 26556 26557 26558 26559 26560 26561 26562 26563 26564 26565 26566 26567 #> [26569] 26568 26569 26570 26571 26572 26573 26574 26575 26576 26577 26578 26579 #> [26581] 26580 26581 26582 26583 26584 26585 26586 26587 26588 26589 26590 26591 #> [26593] 26592 26593 26594 26595 26596 26597 26598 26599 26600 26601 26602 26603 #> [26605] 26604 26605 26606 26607 26608 26609 26610 26611 26612 26613 26614 26615 #> [26617] 26616 26617 26618 26619 26620 26621 26622 26623 26624 26625 26626 26627 #> [26629] 26628 26629 26630 26631 26632 26633 26634 26635 26636 26637 26638 26639 #> [26641] 26640 26641 26642 26643 26644 26645 26646 26647 26648 26649 26650 26651 #> [26653] 26652 26653 26654 26655 26656 26657 26658 26659 26660 26661 26662 26663 #> [26665] 26664 26665 26666 26667 26668 26669 26670 26671 26672 26673 26674 26675 #> [26677] 26676 26677 26678 26679 26680 26681 26682 26683 26684 26685 26686 26687 #> [26689] 26688 26689 26690 26691 26692 26693 26694 26695 26696 26697 26698 26699 #> [26701] 26700 26701 26702 26703 26704 26705 26706 26707 26708 26709 26710 26711 #> [26713] 26712 26713 26714 26715 26716 26717 26718 26719 26720 26721 26722 26723 #> [26725] 26724 26725 26726 26727 26728 26729 26730 26731 26732 26733 26734 26735 #> [26737] 26736 26737 26738 26739 26740 26741 26742 26743 26744 26745 26746 26747 #> [26749] 26748 26749 26750 26751 26752 26753 26754 26755 26756 26757 26758 26759 #> [26761] 26760 26761 26762 26763 26764 26765 26766 26767 26768 26769 26770 26771 #> [26773] 26772 26773 26774 26775 26776 26777 26778 26779 26780 26781 26782 26783 #> [26785] 26784 26785 26786 26787 26788 26789 26790 26791 26792 26793 26794 26795 #> [26797] 26796 26797 26798 26799 26800 26801 26802 26803 26804 26805 26806 26807 #> [26809] 26808 26809 26810 26811 26812 26813 26814 26815 26816 26817 26818 26819 #> [26821] 26820 26821 26822 26823 26824 26825 26826 26827 26828 26829 26830 26831 #> [26833] 26832 26833 26834 26835 26836 26837 26838 26839 26840 26841 26842 26843 #> [26845] 26844 26845 26846 26847 26848 26849 26850 26851 26852 26853 26854 26855 #> [26857] 26856 26857 26858 26859 26860 26861 26862 26863 26864 26865 26866 26867 #> [26869] 26868 26869 26870 26871 26872 26873 26874 26875 26876 26877 26878 26879 #> [26881] 26880 26881 26882 26883 26884 26885 26886 26887 26888 26889 26890 26891 #> [26893] 26892 26893 26894 26895 26896 26897 26898 26899 26900 26901 26902 26903 #> [26905] 26904 26905 26906 26907 26908 26909 26910 26911 26912 26913 26914 26915 #> [26917] 26916 26917 26918 26919 26920 26921 26922 26923 26924 26925 26926 26927 #> [26929] 26928 26929 26930 26931 26932 26933 26934 26935 26936 26937 26938 26939 #> [26941] 26940 26941 26942 26943 26944 26945 26946 26947 26948 26949 26950 26951 #> [26953] 26952 26953 26954 26955 26956 26957 26958 26959 26960 26961 26962 26963 #> [26965] 26964 26965 26966 26967 26968 26969 26970 26971 26972 26973 26974 26975 #> [26977] 26976 26977 26978 26979 26980 26981 26982 26983 26984 26985 26986 26987 #> [26989] 26988 26989 26990 26991 26992 26993 26994 26995 26996 26997 26998 26999 #> [27001] 27000 27001 27002 27003 27004 27005 27006 27007 27008 27009 27010 27011 #> [27013] 27012 27013 27014 27015 27016 27017 27018 27019 27020 27021 27022 27023 #> [27025] 27024 27025 27026 27027 27028 27029 27030 27031 27032 27033 27034 27035 #> [27037] 27036 27037 27038 27039 27040 27041 27042 27043 27044 27045 27046 27047 #> [27049] 27048 27049 27050 27051 27052 27053 27054 27055 27056 27057 27058 27059 #> [27061] 27060 27061 27062 27063 27064 27065 27066 27067 27068 27069 27070 27071 #> [27073] 27072 27073 27074 27075 27076 27077 27078 27079 27080 27081 27082 27083 #> [27085] 27084 27085 27086 27087 27088 27089 27090 27091 27092 27093 27094 27095 #> [27097] 27096 27097 27098 27099 27100 27101 27102 27103 27104 27105 27106 27107 #> [27109] 27108 27109 27110 27111 27112 27113 27114 27115 27116 27117 27118 27119 #> [27121] 27120 27121 27122 27123 27124 27125 27126 27127 27128 27129 27130 27131 #> [27133] 27132 27133 27134 27135 27136 27137 27138 27139 27140 27141 27142 27143 #> [27145] 27144 27145 27146 27147 27148 27149 27150 27151 27152 27153 27154 27155 #> [27157] 27156 27157 27158 27159 27160 27161 27162 27163 27164 27165 27166 27167 #> [27169] 27168 27169 27170 27171 27172 27173 27174 27175 27176 27177 27178 27179 #> [27181] 27180 27181 27182 27183 27184 27185 27186 27187 27188 27189 27190 27191 #> [27193] 27192 27193 27194 27195 27196 27197 27198 27199 27200 27201 27202 27203 #> [27205] 27204 27205 27206 27207 27208 27209 27210 27211 27212 27213 27214 27215 #> [27217] 27216 27217 27218 27219 27220 27221 27222 27223 27224 27225 27226 27227 #> [27229] 27228 27229 27230 27231 27232 27233 27234 27235 27236 27237 27238 27239 #> [27241] 27240 27241 27242 27243 27244 27245 27246 27247 27248 27249 27250 27251 #> [27253] 27252 27253 27254 27255 27256 27257 27258 27259 27260 27261 27262 27263 #> [27265] 27264 27265 27266 27267 27268 27269 27270 27271 27272 27273 27274 27275 #> [27277] 27276 27277 27278 27279 27280 27281 27282 27283 27284 27285 27286 27287 #> [27289] 27288 27289 27290 27291 27292 27293 27294 27295 27296 27297 27298 27299 #> [27301] 27300 27301 27302 27303 27304 27305 27306 27307 27308 27309 27310 27311 #> [27313] 27312 27313 27314 27315 27316 27317 27318 27319 27320 27321 27322 27323 #> [27325] 27324 27325 27326 27327 27328 27329 27330 27331 27332 27333 27334 27335 #> [27337] 27336 27337 27338 27339 27340 27341 27342 27343 27344 27345 27346 27347 #> [27349] 27348 27349 27350 27351 27352 27353 27354 27355 27356 27357 27358 27359 #> [27361] 27360 27361 27362 27363 27364 27365 27366 27367 27368 27369 27370 27371 #> [27373] 27372 27373 27374 27375 27376 27377 27378 27379 27380 27381 27382 27383 #> [27385] 27384 27385 27386 27387 27388 27389 27390 27391 27392 27393 27394 27395 #> [27397] 27396 27397 27398 27399 27400 27401 27402 27403 27404 27405 27406 27407 #> [27409] 27408 27409 27410 27411 27412 27413 27414 27415 27416 27417 27418 27419 #> [27421] 27420 27421 27422 27423 27424 27425 27426 27427 27428 27429 27430 27431 #> [27433] 27432 27433 27434 27435 27436 27437 27438 27439 27440 27441 27442 27443 #> [27445] 27444 27445 27446 27447 27448 27449 27450 27451 27452 27453 27454 27455 #> [27457] 27456 27457 27458 27459 27460 27461 27462 27463 27464 27465 27466 27467 #> [27469] 27468 27469 27470 27471 27472 27473 27474 27475 27476 27477 27478 27479 #> [27481] 27480 27481 27482 27483 27484 27485 27486 27487 27488 27489 27490 27491 #> [27493] 27492 27493 27494 27495 27496 27497 27498 27499 27500 27501 27502 27503 #> [27505] 27504 27505 27506 27507 27508 27509 27510 27511 27512 27513 27514 27515 #> [27517] 27516 27517 27518 27519 27520 27521 27522 27523 27524 27525 27526 27527 #> [27529] 27528 27529 27530 27531 27532 27533 27534 27535 27536 27537 27538 27539 #> [27541] 27540 27541 27542 27543 27544 27545 27546 27547 27548 27549 27550 27551 #> [27553] 27552 27553 27554 27555 27556 27557 27558 27559 27560 27561 27562 27563 #> [27565] 27564 27565 27566 27567 27568 27569 27570 27571 27572 27573 27574 27575 #> [27577] 27576 27577 27578 27579 27580 27581 27582 27583 27584 27585 27586 27587 #> [27589] 27588 27589 27590 27591 27592 27593 27594 27595 27596 27597 27598 27599 #> [27601] 27600 27601 27602 27603 27604 27605 27606 27607 27608 27609 27610 27611 #> [27613] 27612 27613 27614 27615 27616 27617 27618 27619 27620 27621 27622 27623 #> [27625] 27624 27625 27626 27627 27628 27629 27630 27631 27632 27633 27634 27635 #> [27637] 27636 27637 27638 27639 27640 27641 27642 27643 27644 27645 27646 27647 #> [27649] 27648 27649 27650 27651 27652 27653 27654 27655 27656 27657 27658 27659 #> [27661] 27660 27661 27662 27663 27664 27665 27666 27667 27668 27669 27670 27671 #> [27673] 27672 27673 27674 27675 27676 27677 27678 27679 27680 27681 27682 27683 #> [27685] 27684 27685 27686 27687 27688 27689 27690 27691 27692 27693 27694 27695 #> [27697] 27696 27697 27698 27699 27700 27701 27702 27703 27704 27705 27706 27707 #> [27709] 27708 27709 27710 27711 27712 27713 27714 27715 27716 27717 27718 27719 #> [27721] 27720 27721 27722 27723 27724 27725 27726 27727 27728 27729 27730 27731 #> [27733] 27732 27733 27734 27735 27736 27737 27738 27739 27740 27741 27742 27743 #> [27745] 27744 27745 27746 27747 27748 27749 27750 27751 27752 27753 27754 27755 #> [27757] 27756 27757 27758 27759 27760 27761 27762 27763 27764 27765 27766 27767 #> [27769] 27768 27769 27770 27771 27772 27773 27774 27775 27776 27777 27778 27779 #> [27781] 27780 27781 27782 27783 27784 27785 27786 27787 27788 27789 27790 27791 #> [27793] 27792 27793 27794 27795 27796 27797 27798 27799 27800 27801 27802 27803 #> [27805] 27804 27805 27806 27807 27808 27809 27810 27811 27812 27813 27814 27815 #> [27817] 27816 27817 27818 27819 27820 27821 27822 27823 27824 27825 27826 27827 #> [27829] 27828 27829 27830 27831 27832 27833 27834 27835 27836 27837 27838 27839 #> [27841] 27840 27841 27842 27843 27844 27845 27846 27847 27848 27849 27850 27851 #> [27853] 27852 27853 27854 27855 27856 27857 27858 27859 27860 27861 27862 27863 #> [27865] 27864 27865 27866 27867 27868 27869 27870 27871 27872 27873 27874 27875 #> [27877] 27876 27877 27878 27879 27880 27881 27882 27883 27884 27885 27886 27887 #> [27889] 27888 27889 27890 27891 27892 27893 27894 27895 27896 27897 27898 27899 #> [27901] 27900 27901 27902 27903 27904 27905 27906 27907 27908 27909 27910 27911 #> [27913] 27912 27913 27914 27915 27916 27917 27918 27919 27920 27921 27922 27923 #> [27925] 27924 27925 27926 27927 27928 27929 27930 27931 27932 27933 27934 27935 #> [27937] 27936 27937 27938 27939 27940 27941 27942 27943 27944 27945 27946 27947 #> [27949] 27948 27949 27950 27951 27952 27953 27954 27955 27956 27957 27958 27959 #> [27961] 27960 27961 27962 27963 27964 27965 27966 27967 27968 27969 27970 27971 #> [27973] 27972 27973 27974 27975 27976 27977 27978 27979 27980 27981 27982 27983 #> [27985] 27984 27985 27986 27987 27988 27989 27990 27991 27992 27993 27994 27995 #> [27997] 27996 27997 27998 27999 28000 28001 28002 28003 28004 28005 28006 28007 #> [28009] 28008 28009 28010 28011 28012 28013 28014 28015 28016 28017 28018 28019 #> [28021] 28020 28021 28022 28023 28024 28025 28026 28027 28028 28029 28030 28031 #> [28033] 28032 28033 28034 28035 28036 28037 28038 28039 28040 28041 28042 28043 #> [28045] 28044 28045 28046 28047 28048 28049 28050 28051 28052 28053 28054 28055 #> [28057] 28056 28057 28058 28059 28060 28061 28062 28063 28064 28065 28066 28067 #> [28069] 28068 28069 28070 28071 28072 28073 28074 28075 28076 28077 28078 28079 #> [28081] 28080 28081 28082 28083 28084 28085 28086 28087 28088 28089 28090 28091 #> [28093] 28092 28093 28094 28095 28096 28097 28098 28099 28100 28101 28102 28103 #> [28105] 28104 28105 28106 28107 28108 28109 28110 28111 28112 28113 28114 28115 #> [28117] 28116 28117 28118 28119 28120 28121 28122 28123 28124 28125 28126 28127 #> [28129] 28128 28129 28130 28131 28132 28133 28134 28135 28136 28137 28138 28139 #> [28141] 28140 28141 28142 28143 28144 28145 28146 28147 28148 28149 28150 28151 #> [28153] 28152 28153 28154 28155 28156 28157 28158 28159 28160 28161 28162 28163 #> [28165] 28164 28165 28166 28167 28168 28169 28170 28171 28172 28173 28174 28175 #> [28177] 28176 28177 28178 28179 28180 28181 28182 28183 28184 28185 28186 28187 #> [28189] 28188 28189 28190 28191 28192 28193 28194 28195 28196 28197 28198 28199 #> [28201] 28200 28201 28202 28203 28204 28205 28206 28207 28208 28209 28210 28211 #> [28213] 28212 28213 28214 28215 28216 28217 28218 28219 28220 28221 28222 28223 #> [28225] 28224 28225 28226 28227 28228 28229 28230 28231 28232 28233 28234 28235 #> [28237] 28236 28237 28238 28239 28240 28241 28242 28243 28244 28245 28246 28247 #> [28249] 28248 28249 28250 28251 28252 28253 28254 28255 28256 28257 28258 28259 #> [28261] 28260 28261 28262 28263 28264 28265 28266 28267 28268 28269 28270 28271 #> [28273] 28272 28273 28274 28275 28276 28277 28278 28279 28280 28281 28282 28283 #> [28285] 28284 28285 28286 28287 28288 28289 28290 28291 28292 28293 28294 28295 #> [28297] 28296 28297 28298 28299 28300 28301 28302 28303 28304 28305 28306 28307 #> [28309] 28308 28309 28310 28311 28312 28313 28314 28315 28316 28317 28318 28319 #> [28321] 28320 28321 28322 28323 28324 28325 28326 28327 28328 28329 28330 28331 #> [28333] 28332 28333 28334 28335 28336 28337 28338 28339 28340 28341 28342 28343 #> [28345] 28344 28345 28346 28347 28348 28349 28350 28351 28352 28353 28354 28355 #> [28357] 28356 28357 28358 28359 28360 28361 28362 28363 28364 28365 28366 28367 #> [28369] 28368 28369 28370 28371 28372 28373 28374 28375 28376 28377 28378 28379 #> [28381] 28380 28381 28382 28383 28384 28385 28386 28387 28388 28389 28390 28391 #> [28393] 28392 28393 28394 28395 28396 28397 28398 28399 28400 28401 28402 28403 #> [28405] 28404 28405 28406 28407 28408 28409 28410 28411 28412 28413 28414 28415 #> [28417] 28416 28417 28418 28419 28420 28421 28422 28423 28424 28425 28426 28427 #> [28429] 28428 28429 28430 28431 28432 28433 28434 28435 28436 28437 28438 28439 #> [28441] 28440 28441 28442 28443 28444 28445 28446 28447 28448 28449 28450 28451 #> [28453] 28452 28453 28454 28455 28456 28457 28458 28459 28460 28461 28462 28463 #> [28465] 28464 28465 28466 28467 28468 28469 28470 28471 28472 28473 28474 28475 #> [28477] 28476 28477 28478 28479 28480 28481 28482 28483 28484 28485 28486 28487 #> [28489] 28488 28489 28490 28491 28492 28493 28494 28495 28496 28497 28498 28499 #> [28501] 28500 28501 28502 28503 28504 28505 28506 28507 28508 28509 28510 28511 #> [28513] 28512 28513 28514 28515 28516 28517 28518 28519 28520 28521 28522 28523 #> [28525] 28524 28525 28526 28527 28528 28529 28530 28531 28532 28533 28534 28535 #> [28537] 28536 28537 28538 28539 28540 28541 28542 28543 28544 28545 28546 28547 #> [28549] 28548 28549 28550 28551 28552 28553 28554 28555 28556 28557 28558 28559 #> [28561] 28560 28561 28562 28563 28564 28565 28566 28567 28568 28569 28570 28571 #> [28573] 28572 28573 28574 28575 28576 28577 28578 28579 28580 28581 28582 28583 #> [28585] 28584 28585 28586 28587 28588 28589 28590 28591 28592 28593 28594 28595 #> [28597] 28596 28597 28598 28599 28600 28601 28602 28603 28604 28605 28606 28607 #> [28609] 28608 28609 28610 28611 28612 28613 28614 28615 28616 28617 28618 28619 #> [28621] 28620 28621 28622 28623 28624 28625 28626 28627 28628 28629 28630 28631 #> [28633] 28632 28633 28634 28635 28636 28637 28638 28639 28640 28641 28642 28643 #> [28645] 28644 28645 28646 28647 28648 28649 28650 28651 28652 28653 28654 28655 #> [28657] 28656 28657 28658 28659 28660 28661 28662 28663 28664 28665 28666 28667 #> [28669] 28668 28669 28670 28671 28672 28673 28674 28675 28676 28677 28678 28679 #> [28681] 28680 28681 28682 28683 28684 28685 28686 28687 28688 28689 28690 28691 #> [28693] 28692 28693 28694 28695 28696 28697 28698 28699 28700 28701 28702 28703 #> [28705] 28704 28705 28706 28707 28708 28709 28710 28711 28712 28713 28714 28715 #> [28717] 28716 28717 28718 28719 28720 28721 28722 28723 28724 28725 28726 28727 #> [28729] 28728 28729 28730 28731 28732 28733 28734 28735 28736 28737 28738 28739 #> [28741] 28740 28741 28742 28743 28744 28745 28746 28747 28748 28749 28750 28751 #> [28753] 28752 28753 28754 28755 28756 28757 28758 28759 28760 28761 28762 28763 #> [28765] 28764 28765 28766 28767 28768 28769 28770 28771 28772 28773 28774 28775 #> [28777] 28776 28777 28778 28779 28780 28781 28782 28783 28784 28785 28786 28787 #> [28789] 28788 28789 28790 28791 28792 28793 28794 28795 28796 28797 28798 28799 #> [28801] 28800 28801 28802 28803 28804 28805 28806 28807 28808 28809 28810 28811 #> [28813] 28812 28813 28814 28815 28816 28817 28818 28819 28820 28821 28822 28823 #> [28825] 28824 28825 28826 28827 28828 28829 28830 28831 28832 28833 28834 28835 #> [28837] 28836 28837 28838 28839 28840 28841 28842 28843 28844 28845 28846 28847 #> [28849] 28848 28849 28850 28851 28852 28853 28854 28855 28856 28857 28858 28859 #> [28861] 28860 28861 28862 28863 28864 28865 28866 28867 28868 28869 28870 28871 #> [28873] 28872 28873 28874 28875 28876 28877 28878 28879 28880 28881 28882 28883 #> [28885] 28884 28885 28886 28887 28888 28889 28890 28891 28892 28893 28894 28895 #> [28897] 28896 28897 28898 28899 28900 28901 28902 28903 28904 28905 28906 28907 #> [28909] 28908 28909 28910 28911 28912 28913 28914 28915 28916 28917 28918 28919 #> [28921] 28920 28921 28922 28923 28924 28925 28926 28927 28928 28929 28930 28931 #> [28933] 28932 28933 28934 28935 28936 28937 28938 28939 28940 28941 28942 28943 #> [28945] 28944 28945 28946 28947 28948 28949 28950 28951 28952 28953 28954 28955 #> [28957] 28956 28957 28958 28959 28960 28961 28962 28963 28964 28965 28966 28967 #> [28969] 28968 28969 28970 28971 28972 28973 28974 28975 28976 28977 28978 28979 #> [28981] 28980 28981 28982 28983 28984 28985 28986 28987 28988 28989 28990 28991 #> [28993] 28992 28993 28994 28995 28996 28997 28998 28999 29000 29001 29002 29003 #> [29005] 29004 29005 29006 29007 29008 29009 29010 29011 29012 29013 29014 29015 #> [29017] 29016 29017 29018 29019 29020 29021 29022 29023 29024 29025 29026 29027 #> [29029] 29028 29029 29030 29031 29032 29033 29034 29035 29036 29037 29038 29039 #> [29041] 29040 29041 29042 29043 29044 29045 29046 29047 29048 29049 29050 29051 #> [29053] 29052 29053 29054 29055 29056 29057 29058 29059 29060 29061 29062 29063 #> [29065] 29064 29065 29066 29067 29068 29069 29070 29071 29072 29073 29074 29075 #> [29077] 29076 29077 29078 29079 29080 29081 29082 29083 29084 29085 29086 29087 #> [29089] 29088 29089 29090 29091 29092 29093 29094 29095 29096 29097 29098 29099 #> [29101] 29100 29101 29102 29103 29104 29105 29106 29107 29108 29109 29110 29111 #> [29113] 29112 29113 29114 29115 29116 29117 29118 29119 29120 29121 29122 29123 #> [29125] 29124 29125 29126 29127 29128 29129 29130 29131 29132 29133 29134 29135 #> [29137] 29136 29137 29138 29139 29140 29141 29142 29143 29144 29145 29146 29147 #> [29149] 29148 29149 29150 29151 29152 29153 29154 29155 29156 29157 29158 29159 #> [29161] 29160 29161 29162 29163 29164 29165 29166 29167 29168 29169 29170 29171 #> [29173] 29172 29173 29174 29175 29176 29177 29178 29179 29180 29181 29182 29183 #> [29185] 29184 29185 29186 29187 29188 29189 29190 29191 29192 29193 29194 29195 #> [29197] 29196 29197 29198 29199 29200 29201 29202 29203 29204 29205 29206 29207 #> [29209] 29208 29209 29210 29211 29212 29213 29214 29215 29216 29217 29218 29219 #> [29221] 29220 29221 29222 29223 29224 29225 29226 29227 29228 29229 29230 29231 #> [29233] 29232 29233 29234 29235 29236 29237 29238 29239 29240 29241 29242 29243 #> [29245] 29244 29245 29246 29247 29248 29249 29250 29251 29252 29253 29254 29255 #> [29257] 29256 29257 29258 29259 29260 29261 29262 29263 29264 29265 29266 29267 #> [29269] 29268 29269 29270 29271 29272 29273 29274 29275 29276 29277 29278 29279 #> [29281] 29280 29281 29282 29283 29284 29285 29286 29287 29288 29289 29290 29291 #> [29293] 29292 29293 29294 29295 29296 29297 29298 29299 29300 29301 29302 29303 #> [29305] 29304 29305 29306 29307 29308 29309 29310 29311 29312 29313 29314 29315 #> [29317] 29316 29317 29318 29319 29320 29321 29322 29323 29324 29325 29326 29327 #> [29329] 29328 29329 29330 29331 29332 29333 29334 29335 29336 29337 29338 29339 #> [29341] 29340 29341 29342 29343 29344 29345 29346 29347 29348 29349 29350 29351 #> [29353] 29352 29353 29354 29355 29356 29357 29358 29359 29360 29361 29362 29363 #> [29365] 29364 29365 29366 29367 29368 29369 29370 29371 29372 29373 29374 29375 #> [29377] 29376 29377 29378 29379 29380 29381 29382 29383 29384 29385 29386 29387 #> [29389] 29388 29389 29390 29391 29392 29393 29394 29395 29396 29397 29398 29399 #> [29401] 29400 29401 29402 29403 29404 29405 29406 29407 29408 29409 29410 29411 #> [29413] 29412 29413 29414 29415 29416 29417 29418 29419 29420 29421 29422 29423 #> [29425] 29424 29425 29426 29427 29428 29429 29430 29431 29432 29433 29434 29435 #> [29437] 29436 29437 29438 29439 29440 29441 29442 29443 29444 29445 29446 29447 #> [29449] 29448 29449 29450 29451 29452 29453 29454 29455 29456 29457 29458 29459 #> [29461] 29460 29461 29462 29463 29464 29465 29466 29467 29468 29469 29470 29471 #> [29473] 29472 29473 29474 29475 29476 29477 29478 29479 29480 29481 29482 29483 #> [29485] 29484 29485 29486 29487 29488 29489 29490 29491 29492 29493 29494 29495 #> [29497] 29496 29497 29498 29499 29500 29501 29502 29503 29504 29505 29506 29507 #> [29509] 29508 29509 29510 29511 29512 29513 29514 29515 29516 29517 29518 29519 #> [29521] 29520 29521 29522 29523 29524 29525 29526 29527 29528 29529 29530 29531 #> [29533] 29532 29533 29534 29535 29536 29537 29538 29539 29540 29541 29542 29543 #> [29545] 29544 29545 29546 29547 29548 29549 29550 29551 29552 29553 29554 29555 #> [29557] 29556 29557 29558 29559 29560 29561 29562 29563 29564 29565 29566 29567 #> [29569] 29568 29569 29570 29571 29572 29573 29574 29575 29576 29577 29578 29579 #> [29581] 29580 29581 29582 29583 29584 29585 29586 29587 29588 29589 29590 29591 #> [29593] 29592 29593 29594 29595 29596 29597 29598 29599 29600 29601 29602 29603 #> [29605] 29604 29605 29606 29607 29608 29609 29610 29611 29612 29613 29614 29615 #> [29617] 29616 29617 29618 29619 29620 29621 29622 29623 29624 29625 29626 29627 #> [29629] 29628 29629 29630 29631 29632 29633 29634 29635 29636 29637 29638 29639 #> [29641] 29640 29641 29642 29643 29644 29645 29646 29647 29648 29649 29650 29651 #> [29653] 29652 29653 29654 29655 29656 29657 29658 29659 29660 29661 29662 29663 #> [29665] 29664 29665 29666 29667 29668 29669 29670 29671 29672 29673 29674 29675 #> [29677] 29676 29677 29678 29679 29680 29681 29682 29683 29684 29685 29686 29687 #> [29689] 29688 29689 29690 29691 29692 29693 29694 29695 29696 29697 29698 29699 #> [29701] 29700 29701 29702 29703 29704 29705 29706 29707 29708 29709 29710 29711 #> [29713] 29712 29713 29714 29715 29716 29717 29718 29719 29720 29721 29722 29723 #> [29725] 29724 29725 29726 29727 29728 29729 29730 29731 29732 29733 29734 29735 #> [29737] 29736 29737 29738 29739 29740 29741 29742 29743 29744 29745 29746 29747 #> [29749] 29748 29749 29750 29751 29752 29753 29754 29755 29756 29757 29758 29759 #> [29761] 29760 29761 29762 29763 29764 29765 29766 29767 29768 29769 29770 29771 #> [29773] 29772 29773 29774 29775 29776 29777 29778 29779 29780 29781 29782 29783 #> [29785] 29784 29785 29786 29787 29788 29789 29790 29791 29792 29793 29794 29795 #> [29797] 29796 29797 29798 29799 29800 29801 29802 29803 29804 29805 29806 29807 #> [29809] 29808 29809 29810 29811 29812 29813 29814 29815 29816 29817 29818 29819 #> [29821] 29820 29821 29822 29823 29824 29825 29826 29827 29828 29829 29830 29831 #> [29833] 29832 29833 29834 29835 29836 29837 29838 29839 29840 29841 29842 29843 #> [29845] 29844 29845 29846 29847 29848 29849 29850 29851 29852 29853 29854 29855 #> [29857] 29856 29857 29858 29859 29860 29861 29862 29863 29864 29865 29866 29867 #> [29869] 29868 29869 29870 29871 29872 29873 29874 29875 29876 29877 29878 29879 #> [29881] 29880 29881 29882 29883 29884 29885 29886 29887 29888 29889 29890 29891 #> [29893] 29892 29893 29894 29895 29896 29897 29898 29899 29900 29901 29902 29903 #> [29905] 29904 29905 29906 29907 29908 29909 29910 29911 29912 29913 29914 29915 #> [29917] 29916 29917 29918 29919 29920 29921 29922 29923 29924 29925 29926 29927 #> [29929] 29928 29929 29930 29931 29932 29933 29934 29935 29936 29937 29938 29939 #> [29941] 29940 29941 29942 29943 29944 29945 29946 29947 29948 29949 29950 29951 #> [29953] 29952 29953 29954 29955 29956 29957 29958 29959 29960 29961 29962 29963 #> [29965] 29964 29965 29966 29967 29968 29969 29970 29971 29972 29973 29974 29975 #> [29977] 29976 29977 29978 29979 29980 29981 29982 29983 29984 29985 29986 29987 #> [29989] 29988 29989 29990 29991 29992 29993 29994 29995 29996 29997 29998 29999 #> [30001] 30000 30001 30002 30003 30004 30005 30006 30007 30008 30009 30010 30011 #> [30013] 30012 30013 30014 30015 30016 30017 30018 30019 30020 30021 30022 30023 #> [30025] 30024 30025 30026 30027 30028 30029 30030 30031 30032 30033 30034 30035 #> [30037] 30036 30037 30038 30039 30040 30041 30042 30043 30044 30045 30046 30047 #> [30049] 30048 30049 30050 30051 30052 30053 30054 30055 30056 30057 30058 30059 #> [30061] 30060 30061 30062 30063 30064 30065 30066 30067 30068 30069 30070 30071 #> [30073] 30072 30073 30074 30075 30076 30077 30078 30079 30080 30081 30082 30083 #> [30085] 30084 30085 30086 30087 30088 30089 30090 30091 30092 30093 30094 30095 #> [30097] 30096 30097 30098 30099 30100 30101 30102 30103 30104 30105 30106 30107 #> [30109] 30108 30109 30110 30111 30112 30113 30114 30115 30116 30117 30118 30119 #> [30121] 30120 30121 30122 30123 30124 30125 30126 30127 30128 30129 30130 30131 #> [30133] 30132 30133 30134 30135 30136 30137 30138 30139 30140 30141 30142 30143 #> [30145] 30144 30145 30146 30147 30148 30149 30150 30151 30152 30153 30154 30155 #> [30157] 30156 30157 30158 30159 30160 30161 30162 30163 30164 30165 30166 30167 #> [30169] 30168 30169 30170 30171 30172 30173 30174 30175 30176 30177 30178 30179 #> [30181] 30180 30181 30182 30183 30184 30185 30186 30187 30188 30189 30190 30191 #> [30193] 30192 30193 30194 30195 30196 30197 30198 30199 30200 30201 30202 30203 #> [30205] 30204 30205 30206 30207 30208 30209 30210 30211 30212 30213 30214 30215 #> [30217] 30216 30217 30218 30219 30220 30221 30222 30223 30224 30225 30226 30227 #> [30229] 30228 30229 30230 30231 30232 30233 30234 30235 30236 30237 30238 30239 #> [30241] 30240 30241 30242 30243 30244 30245 30246 30247 30248 30249 30250 30251 #> [30253] 30252 30253 30254 30255 30256 30257 30258 30259 30260 30261 30262 30263 #> [30265] 30264 30265 30266 30267 30268 30269 30270 30271 30272 30273 30274 30275 #> [30277] 30276 30277 30278 30279 30280 30281 30282 30283 30284 30285 30286 30287 #> [30289] 30288 30289 30290 30291 30292 30293 30294 30295 30296 30297 30298 30299 #> [30301] 30300 30301 30302 30303 30304 30305 30306 30307 30308 30309 30310 30311 #> [30313] 30312 30313 30314 30315 30316 30317 30318 30319 30320 30321 30322 30323 #> [30325] 30324 30325 30326 30327 30328 30329 30330 30331 30332 30333 30334 30335 #> [30337] 30336 30337 30338 30339 30340 30341 30342 30343 30344 30345 30346 30347 #> [30349] 30348 30349 30350 30351 30352 30353 30354 30355 30356 30357 30358 30359 #> [30361] 30360 30361 30362 30363 30364 30365 30366 30367 30368 30369 30370 30371 #> [30373] 30372 30373 30374 30375 30376 30377 30378 30379 30380 30381 30382 30383 #> [30385] 30384 30385 30386 30387 30388 30389 30390 30391 30392 30393 30394 30395 #> [30397] 30396 30397 30398 30399 30400 30401 30402 30403 30404 30405 30406 30407 #> [30409] 30408 30409 30410 30411 30412 30413 30414 30415 30416 30417 30418 30419 #> [30421] 30420 30421 30422 30423 30424 30425 30426 30427 30428 30429 30430 30431 #> [30433] 30432 30433 30434 30435 30436 30437 30438 30439 30440 30441 30442 30443 #> [30445] 30444 30445 30446 30447 30448 30449 30450 30451 30452 30453 30454 30455 #> [30457] 30456 30457 30458 30459 30460 30461 30462 30463 30464 30465 30466 30467 #> [30469] 30468 30469 30470 30471 30472 30473 30474 30475 30476 30477 30478 30479 #> [30481] 30480 30481 30482 30483 30484 30485 30486 30487 30488 30489 30490 30491 #> [30493] 30492 30493 30494 30495 30496 30497 30498 30499 30500 30501 30502 30503 #> [30505] 30504 30505 30506 30507 30508 30509 30510 30511 30512 30513 30514 30515 #> [30517] 30516 30517 30518 30519 30520 30521 30522 30523 30524 30525 30526 30527 #> [30529] 30528 30529 30530 30531 30532 30533 30534 30535 30536 30537 30538 30539 #> [30541] 30540 30541 30542 30543 30544 30545 30546 30547 30548 30549 30550 30551 #> [30553] 30552 30553 30554 30555 30556 30557 30558 30559 30560 30561 30562 30563 #> [30565] 30564 30565 30566 30567 30568 30569 30570 30571 30572 30573 30574 30575 #> [30577] 30576 30577 30578 30579 30580 30581 30582 30583 30584 30585 30586 30587 #> [30589] 30588 30589 30590 30591 30592 30593 30594 30595 30596 30597 30598 30599 #> [30601] 30600 30601 30602 30603 30604 30605 30606 30607 30608 30609 30610 30611 #> [30613] 30612 30613 30614 30615 30616 30617 30618 30619 30620 30621 30622 30623 #> [30625] 30624 30625 30626 30627 30628 30629 30630 30631 30632 30633 30634 30635 #> [30637] 30636 30637 30638 30639 30640 30641 30642 30643 30644 30645 30646 30647 #> [30649] 30648 30649 30650 30651 30652 30653 30654 30655 30656 30657 30658 30659 #> [30661] 30660 30661 30662 30663 30664 30665 30666 30667 30668 30669 30670 30671 #> [30673] 30672 30673 30674 30675 30676 30677 30678 30679 30680 30681 30682 30683 #> [30685] 30684 30685 30686 30687 30688 30689 30690 30691 30692 30693 30694 30695 #> [30697] 30696 30697 30698 30699 30700 30701 30702 30703 30704 30705 30706 30707 #> [30709] 30708 30709 30710 30711 30712 30713 30714 30715 30716 30717 30718 30719 #> [30721] 30720 30721 30722 30723 30724 30725 30726 30727 30728 30729 30730 30731 #> [30733] 30732 30733 30734 30735 30736 30737 30738 30739 30740 30741 30742 30743 #> [30745] 30744 30745 30746 30747 30748 30749 30750 30751 30752 30753 30754 30755 #> [30757] 30756 30757 30758 30759 30760 30761 30762 30763 30764 30765 30766 30767 #> [30769] 30768 30769 30770 30771 30772 30773 30774 30775 30776 30777 30778 30779 #> [30781] 30780 30781 30782 30783 30784 30785 30786 30787 30788 30789 30790 30791 #> [30793] 30792 30793 30794 30795 30796 30797 30798 30799 30800 30801 30802 30803 #> [30805] 30804 30805 30806 30807 30808 30809 30810 30811 30812 30813 30814 30815 #> [30817] 30816 30817 30818 30819 30820 30821 30822 30823 30824 30825 30826 30827 #> [30829] 30828 30829 30830 30831 30832 30833 30834 30835 30836 30837 30838 30839 #> [30841] 30840 30841 30842 30843 30844 30845 30846 30847 30848 30849 30850 30851 #> [30853] 30852 30853 30854 30855 30856 30857 30858 30859 30860 30861 30862 30863 #> [30865] 30864 30865 30866 30867 30868 30869 30870 30871 30872 30873 30874 30875 #> [30877] 30876 30877 30878 30879 30880 30881 30882 30883 30884 30885 30886 30887 #> [30889] 30888 30889 30890 30891 30892 30893 30894 30895 30896 30897 30898 30899 #> [30901] 30900 30901 30902 30903 30904 30905 30906 30907 30908 30909 30910 30911 #> [30913] 30912 30913 30914 30915 30916 30917 30918 30919 30920 30921 30922 30923 #> [30925] 30924 30925 30926 30927 30928 30929 30930 30931 30932 30933 30934 30935 #> [30937] 30936 30937 30938 30939 30940 30941 30942 30943 30944 30945 30946 30947 #> [30949] 30948 30949 30950 30951 30952 30953 30954 30955 30956 30957 30958 30959 #> [30961] 30960 30961 30962 30963 30964 30965 30966 30967 30968 30969 30970 30971 #> [30973] 30972 30973 30974 30975 30976 30977 30978 30979 30980 30981 30982 30983 #> [30985] 30984 30985 30986 30987 30988 30989 30990 30991 30992 30993 30994 30995 #> [30997] 30996 30997 30998 30999 31000 31001 31002 31003 31004 31005 31006 31007 #> [31009] 31008 31009 31010 31011 31012 31013 31014 31015 31016 31017 31018 31019 #> [31021] 31020 31021 31022 31023 31024 31025 31026 31027 31028 31029 31030 31031 #> [31033] 31032 31033 31034 31035 31036 31037 31038 31039 31040 31041 31042 31043 #> [31045] 31044 31045 31046 31047 31048 31049 31050 31051 31052 31053 31054 31055 #> [31057] 31056 31057 31058 31059 31060 31061 31062 31063 31064 31065 31066 31067 #> [31069] 31068 31069 31070 31071 31072 31073 31074 31075 31076 31077 31078 31079 #> [31081] 31080 31081 31082 31083 31084 31085 31086 31087 31088 31089 31090 31091 #> [31093] 31092 31093 31094 31095 31096 31097 31098 31099 31100 31101 31102 31103 #> [31105] 31104 31105 31106 31107 31108 31109 31110 31111 31112 31113 31114 31115 #> [31117] 31116 31117 31118 31119 31120 31121 31122 31123 31124 31125 31126 31127 #> [31129] 31128 31129 31130 31131 31132 31133 31134 31135 31136 31137 31138 31139 #> [31141] 31140 31141 31142 31143 31144 31145 31146 31147 31148 31149 31150 31151 #> [31153] 31152 31153 31154 31155 31156 31157 31158 31159 31160 31161 31162 31163 #> [31165] 31164 31165 31166 31167 31168 31169 31170 31171 31172 31173 31174 31175 #> [31177] 31176 31177 31178 31179 31180 31181 31182 31183 31184 31185 31186 31187 #> [31189] 31188 31189 31190 31191 31192 31193 31194 31195 31196 31197 31198 31199 #> [31201] 31200 31201 31202 31203 31204 31205 31206 31207 31208 31209 31210 31211 #> [31213] 31212 31213 31214 31215 31216 31217 31218 31219 31220 31221 31222 31223 #> [31225] 31224 31225 31226 31227 31228 31229 31230 31231 31232 31233 31234 31235 #> [31237] 31236 31237 31238 31239 31240 31241 31242 31243 31244 31245 31246 31247 #> [31249] 31248 31249 31250 31251 31252 31253 31254 31255 31256 31257 31258 31259 #> [31261] 31260 31261 31262 31263 31264 31265 31266 31267 31268 31269 31270 31271 #> [31273] 31272 31273 31274 31275 31276 31277 31278 31279 31280 31281 31282 31283 #> [31285] 31284 31285 31286 31287 31288 31289 31290 31291 31292 31293 31294 31295 #> [31297] 31296 31297 31298 31299 31300 31301 31302 31303 31304 31305 31306 31307 #> [31309] 31308 31309 31310 31311 31312 31313 31314 31315 31316 31317 31318 31319 #> [31321] 31320 31321 31322 31323 31324 31325 31326 31327 31328 31329 31330 31331 #> [31333] 31332 31333 31334 31335 31336 31337 31338 31339 31340 31341 31342 31343 #> [31345] 31344 31345 31346 31347 31348 31349 31350 31351 31352 31353 31354 31355 #> [31357] 31356 31357 31358 31359 31360 31361 31362 31363 31364 31365 31366 31367 #> [31369] 31368 31369 31370 31371 31372 31373 31374 31375 31376 31377 31378 31379 #> [31381] 31380 31381 31382 31383 31384 31385 31386 31387 31388 31389 31390 31391 #> [31393] 31392 31393 31394 31395 31396 31397 31398 31399 31400 31401 31402 31403 #> [31405] 31404 31405 31406 31407 31408 31409 31410 31411 31412 31413 31414 31415 #> [31417] 31416 31417 31418 31419 31420 31421 31422 31423 31424 31425 31426 31427 #> [31429] 31428 31429 31430 31431 31432 31433 31434 31435 31436 31437 31438 31439 #> [31441] 31440 31441 31442 31443 31444 31445 31446 31447 31448 31449 31450 31451 #> [31453] 31452 31453 31454 31455 31456 31457 31458 31459 31460 31461 31462 31463 #> [31465] 31464 31465 31466 31467 31468 31469 31470 31471 31472 31473 31474 31475 #> [31477] 31476 31477 31478 31479 31480 31481 31482 31483 31484 31485 31486 31487 #> [31489] 31488 31489 31490 31491 31492 31493 31494 31495 31496 31497 31498 31499 #> [31501] 31500 31501 31502 31503 31504 31505 31506 31507 31508 31509 31510 31511 #> [31513] 31512 31513 31514 31515 31516 31517 31518 31519 31520 31521 31522 31523 #> [31525] 31524 31525 31526 31527 31528 31529 31530 31531 31532 31533 31534 31535 #> [31537] 31536 31537 31538 31539 31540 31541 31542 31543 31544 31545 31546 31547 #> [31549] 31548 31549 31550 31551 31552 31553 31554 31555 31556 31557 31558 31559 #> [31561] 31560 31561 31562 31563 31564 31565 31566 31567 31568 31569 31570 31571 #> [31573] 31572 31573 31574 31575 31576 31577 31578 31579 31580 31581 31582 31583 #> [31585] 31584 31585 31586 31587 31588 31589 31590 31591 31592 31593 31594 31595 #> [31597] 31596 31597 31598 31599 31600 31601 31602 31603 31604 31605 31606 31607 #> [31609] 31608 31609 31610 31611 31612 31613 31614 31615 31616 31617 31618 31619 #> [31621] 31620 31621 31622 31623 31624 31625 31626 31627 31628 31629 31630 31631 #> [31633] 31632 31633 31634 31635 31636 31637 31638 31639 31640 31641 31642 31643 #> [31645] 31644 31645 31646 31647 31648 31649 31650 31651 31652 31653 31654 31655 #> [31657] 31656 31657 31658 31659 31660 31661 31662 31663 31664 31665 31666 31667 #> [31669] 31668 31669 31670 31671 31672 31673 31674 31675 31676 31677 31678 31679 #> [31681] 31680 31681 31682 31683 31684 31685 31686 31687 31688 31689 31690 31691 #> [31693] 31692 31693 31694 31695 31696 31697 31698 31699 31700 31701 31702 31703 #> [31705] 31704 31705 31706 31707 31708 31709 31710 31711 31712 31713 31714 31715 #> [31717] 31716 31717 31718 31719 31720 31721 31722 31723 31724 31725 31726 31727 #> [31729] 31728 31729 31730 31731 31732 31733 31734 31735 31736 31737 31738 31739 #> [31741] 31740 31741 31742 31743 31744 31745 31746 31747 31748 31749 31750 31751 #> [31753] 31752 31753 31754 31755 31756 31757 31758 31759 31760 31761 31762 31763 #> [31765] 31764 31765 31766 31767 31768 31769 31770 31771 31772 31773 31774 31775 #> [31777] 31776 31777 31778 31779 31780 31781 31782 31783 31784 31785 31786 31787 #> [31789] 31788 31789 31790 31791 31792 31793 31794 31795 31796 31797 31798 31799 #> [31801] 31800 31801 31802 31803 31804 31805 31806 31807 31808 31809 31810 31811 #> [31813] 31812 31813 31814 31815 31816 31817 31818 31819 31820 31821 31822 31823 #> [31825] 31824 31825 31826 31827 31828 31829 31830 31831 31832 31833 31834 31835 #> [31837] 31836 31837 31838 31839 31840 31841 31842 31843 31844 31845 31846 31847 #> [31849] 31848 31849 31850 31851 31852 31853 31854 31855 31856 31857 31858 31859 #> [31861] 31860 31861 31862 31863 31864 31865 31866 31867 31868 31869 31870 31871 #> [31873] 31872 31873 31874 31875 31876 31877 31878 31879 31880 31881 31882 31883 #> [31885] 31884 31885 31886 31887 31888 31889 31890 31891 31892 31893 31894 31895 #> [31897] 31896 31897 31898 31899 31900 31901 31902 31903 31904 31905 31906 31907 #> [31909] 31908 31909 31910 31911 31912 31913 31914 31915 31916 31917 31918 31919 #> [31921] 31920 31921 31922 31923 31924 31925 31926 31927 31928 31929 31930 31931 #> [31933] 31932 31933 31934 31935 31936 31937 31938 31939 31940 31941 31942 31943 #> [31945] 31944 31945 31946 31947 31948 31949 31950 31951 31952 31953 31954 31955 #> [31957] 31956 31957 31958 31959 31960 31961 31962 31963 31964 31965 31966 31967 #> [31969] 31968 31969 31970 31971 31972 31973 31974 31975 31976 31977 31978 31979 #> [31981] 31980 31981 31982 31983 31984 31985 31986 31987 31988 31989 31990 31991 #> [31993] 31992 31993 31994 31995 31996 31997 31998 31999 32000 32001 32002 32003 #> [32005] 32004 32005 32006 32007 32008 32009 32010 32011 32012 32013 32014 32015 #> [32017] 32016 32017 32018 32019 32020 32021 32022 32023 32024 32025 32026 32027 #> [32029] 32028 32029 32030 32031 32032 32033 32034 32035 32036 32037 32038 32039 #> [32041] 32040 32041 32042 32043 32044 32045 32046 32047 32048 32049 32050 32051 #> [32053] 32052 32053 32054 32055 32056 32057 32058 32059 32060 32061 32062 32063 #> [32065] 32064 32065 32066 32067 32068 32069 32070 32071 32072 32073 32074 32075 #> [32077] 32076 32077 32078 32079 32080 32081 32082 32083 32084 32085 32086 32087 #> [32089] 32088 32089 32090 32091 32092 32093 32094 32095 32096 32097 32098 32099 #> [32101] 32100 32101 32102 32103 32104 32105 32106 32107 32108 32109 32110 32111 #> [32113] 32112 32113 32114 32115 32116 32117 32118 32119 32120 32121 32122 32123 #> [32125] 32124 32125 32126 32127 32128 32129 32130 32131 32132 32133 32134 32135 #> [32137] 32136 32137 32138 32139 32140 32141 32142 32143 32144 32145 32146 32147 #> [32149] 32148 32149 32150 32151 32152 32153 32154 32155 32156 32157 32158 32159 #> [32161] 32160 32161 32162 32163 32164 32165 32166 32167 32168 32169 32170 32171 #> [32173] 32172 32173 32174 32175 32176 32177 32178 32179 32180 32181 32182 32183 #> [32185] 32184 32185 32186 32187 32188 32189 32190 32191 32192 32193 32194 32195 #> [32197] 32196 32197 32198 32199 32200 32201 32202 32203 32204 32205 32206 32207 #> [32209] 32208 32209 32210 32211 32212 32213 32214 32215 32216 32217 32218 32219 #> [32221] 32220 32221 32222 32223 32224 32225 32226 32227 32228 32229 32230 32231 #> [32233] 32232 32233 32234 32235 32236 32237 32238 32239 32240 32241 32242 32243 #> [32245] 32244 32245 32246 32247 32248 32249 32250 32251 32252 32253 32254 32255 #> [32257] 32256 32257 32258 32259 32260 32261 32262 32263 32264 32265 32266 32267 #> [32269] 32268 32269 32270 32271 32272 32273 32274 32275 32276 32277 32278 32279 #> [32281] 32280 32281 32282 32283 32284 32285 32286 32287 32288 32289 32290 32291 #> [32293] 32292 32293 32294 32295 32296 32297 32298 32299 32300 32301 32302 32303 #> [32305] 32304 32305 32306 32307 32308 32309 32310 32311 32312 32313 32314 32315 #> [32317] 32316 32317 32318 32319 32320 32321 32322 32323 32324 32325 32326 32327 #> [32329] 32328 32329 32330 32331 32332 32333 32334 32335 32336 32337 32338 32339 #> [32341] 32340 32341 32342 32343 32344 32345 32346 32347 32348 32349 32350 32351 #> [32353] 32352 32353 32354 32355 32356 32357 32358 32359 32360 32361 32362 32363 #> [32365] 32364 32365 32366 32367 32368 32369 32370 32371 32372 32373 32374 32375 #> [32377] 32376 32377 32378 32379 32380 32381 32382 32383 32384 32385 32386 32387 #> [32389] 32388 32389 32390 32391 32392 32393 32394 32395 32396 32397 32398 32399 #> [32401] 32400 32401 32402 32403 32404 32405 32406 32407 32408 32409 32410 32411 #> [32413] 32412 32413 32414 32415 32416 32417 32418 32419 32420 32421 32422 32423 #> [32425] 32424 32425 32426 32427 32428 32429 32430 32431 32432 32433 32434 32435 #> [32437] 32436 32437 32438 32439 32440 32441 32442 32443 32444 32445 32446 32447 #> [32449] 32448 32449 32450 32451 32452 32453 32454 32455 32456 32457 32458 32459 #> [32461] 32460 32461 32462 32463 32464 32465 32466 32467 32468 32469 32470 32471 #> [32473] 32472 32473 32474 32475 32476 32477 32478 32479 32480 32481 32482 32483 #> [32485] 32484 32485 32486 32487 32488 32489 32490 32491 32492 32493 32494 32495 #> [32497] 32496 32497 32498 32499 32500 32501 32502 32503 32504 32505 32506 32507 #> [32509] 32508 32509 32510 32511 32512 32513 32514 32515 32516 32517 32518 32519 #> [32521] 32520 32521 32522 32523 32524 32525 32526 32527 32528 32529 32530 32531 #> [32533] 32532 32533 32534 32535 32536 32537 32538 32539 32540 32541 32542 32543 #> [32545] 32544 32545 32546 32547 32548 32549 32550 32551 32552 32553 32554 32555 #> [32557] 32556 32557 32558 32559 32560 32561 32562 32563 32564 32565 32566 32567 #> [32569] 32568 32569 32570 32571 32572 32573 32574 32575 32576 32577 32578 32579 #> [32581] 32580 32581 32582 32583 32584 32585 32586 32587 32588 32589 32590 32591 #> [32593] 32592 32593 32594 32595 32596 32597 32598 32599 32600 32601 32602 32603 #> [32605] 32604 32605 32606 32607 32608 32609 32610 32611 32612 32613 32614 32615 #> [32617] 32616 32617 32618 32619 32620 32621 32622 32623 32624 32625 32626 32627 #> [32629] 32628 32629 32630 32631 32632 32633 32634 32635 32636 32637 32638 32639 #> [32641] 32640 32641 32642 32643 32644 32645 32646 32647 32648 32649 32650 32651 #> [32653] 32652 32653 32654 32655 32656 32657 32658 32659 32660 32661 32662 32663 #> [32665] 32664 32665 32666 32667 32668 32669 32670 32671 32672 32673 32674 32675 #> [32677] 32676 32677 32678 32679 32680 32681 32682 32683 32684 32685 32686 32687 #> [32689] 32688 32689 32690 32691 32692 32693 32694 32695 32696 32697 32698 32699 #> [32701] 32700 32701 32702 32703 32704 32705 32706 32707 32708 32709 32710 32711 #> [32713] 32712 32713 32714 32715 32716 32717 32718 32719 32720 32721 32722 32723 #> [32725] 32724 32725 32726 32727 32728 32729 32730 32731 32732 32733 32734 32735 #> [32737] 32736 32737 32738 32739 32740 32741 32742 32743 32744 32745 32746 32747 #> [32749] 32748 32749 32750 32751 32752 32753 32754 32755 32756 32757 32758 32759 #> [32761] 32760 32761 32762 32763 32764 32765 32766 32767 32768 32769 32770 32771 #> [32773] 32772 32773 32774 32775 32776 32777 32778 32779 32780 32781 32782 32783 #> [32785] 32784 32785 32786 32787 32788 32789 32790 32791 32792 32793 32794 32795 #> [32797] 32796 32797 32798 32799 32800 32801 32802 32803 32804 32805 32806 32807 #> [32809] 32808 32809 32810 32811 32812 32813 32814 32815 32816 32817 32818 32819 #> [32821] 32820 32821 32822 32823 32824 32825 32826 32827 32828 32829 32830 32831 #> [32833] 32832 32833 32834 32835 32836 32837 32838 32839 32840 32841 32842 32843 #> [32845] 32844 32845 32846 32847 32848 32849 32850 32851 32852 32853 32854 32855 #> [32857] 32856 32857 32858 32859 32860 32861 32862 32863 32864 32865 32866 32867 #> [32869] 32868 32869 32870 32871 32872 32873 32874 32875 32876 32877 32878 32879 #> [32881] 32880 32881 32882 32883 32884 32885 32886 32887 32888 32889 32890 32891 #> [32893] 32892 32893 32894 32895 32896 32897 32898 32899 32900 32901 32902 32903 #> [32905] 32904 32905 32906 32907 32908 32909 32910 32911 32912 32913 32914 32915 #> [32917] 32916 32917 32918 32919 32920 32921 32922 32923 32924 32925 32926 32927 #> [32929] 32928 32929 32930 32931 32932 32933 32934 32935 32936 32937 32938 32939 #> [32941] 32940 32941 32942 32943 32944 32945 32946 32947 32948 32949 32950 32951 #> [32953] 32952 32953 32954 32955 32956 32957 32958 32959 32960 32961 32962 32963 #> [32965] 32964 32965 32966 32967 32968 32969 32970 32971 32972 32973 32974 32975 #> [32977] 32976 32977 32978 32979 32980 32981 32982 32983 32984 32985 32986 32987 #> [32989] 32988 32989 32990 32991 32992 32993 32994 32995 32996 32997 32998 32999 #> [33001] 33000 33001 33002 33003 33004 33005 33006 33007 33008 33009 33010 33011 #> [33013] 33012 33013 33014 33015 33016 33017 33018 33019 33020 33021 33022 33023 #> [33025] 33024 33025 33026 33027 33028 33029 33030 33031 33032 33033 33034 33035 #> [33037] 33036 33037 33038 33039 33040 33041 33042 33043 33044 33045 33046 33047 #> [33049] 33048 33049 33050 33051 33052 33053 33054 33055 33056 33057 33058 33059 #> [33061] 33060 33061 33062 33063 33064 33065 33066 33067 33068 33069 33070 33071 #> [33073] 33072 33073 33074 33075 33076 33077 33078 33079 33080 33081 33082 33083 #> [33085] 33084 33085 33086 33087 33088 33089 33090 33091 33092 33093 33094 33095 #> [33097] 33096 33097 33098 33099 33100 33101 33102 33103 33104 33105 33106 33107 #> [33109] 33108 33109 33110 33111 33112 33113 33114 33115 33116 33117 33118 33119 #> [33121] 33120 33121 33122 33123 33124 33125 33126 33127 33128 33129 33130 33131 #> [33133] 33132 33133 33134 33135 33136 33137 33138 33139 33140 33141 33142 33143 #> [33145] 33144 33145 33146 33147 33148 33149 33150 33151 33152 33153 33154 33155 #> [33157] 33156 33157 33158 33159 33160 33161 33162 33163 33164 33165 33166 33167 #> [33169] 33168 33169 33170 33171 33172 33173 33174 33175 33176 33177 33178 33179 #> [33181] 33180 33181 33182 33183 33184 33185 33186 33187 33188 33189 33190 33191 #> [33193] 33192 33193 33194 33195 33196 33197 33198 33199 33200 33201 33202 33203 #> [33205] 33204 33205 33206 33207 33208 33209 33210 33211 33212 33213 33214 33215 #> [33217] 33216 33217 33218 33219 33220 33221 33222 33223 33224 33225 33226 33227 #> [33229] 33228 33229 33230 33231 33232 33233 33234 33235 33236 33237 33238 33239 #> [33241] 33240 33241 33242 33243 33244 33245 33246 33247 33248 33249 33250 33251 #> [33253] 33252 33253 33254 33255 33256 33257 33258 33259 33260 33261 33262 33263 #> [33265] 33264 33265 33266 33267 33268 33269 33270 33271 33272 33273 33274 33275 #> [33277] 33276 33277 33278 33279 33280 33281 33282 33283 33284 33285 33286 33287 #> [33289] 33288 33289 33290 33291 33292 33293 33294 33295 33296 33297 33298 33299 #> [33301] 33300 33301 33302 33303 33304 33305 33306 33307 33308 33309 33310 33311 #> [33313] 33312 33313 33314 33315 33316 33317 33318 33319 33320 33321 33322 33323 #> [33325] 33324 33325 33326 33327 33328 33329 33330 33331 33332 33333 33334 33335 #> [33337] 33336 33337 33338 33339 33340 33341 33342 33343 33344 33345 33346 33347 #> [33349] 33348 33349 33350 33351 33352 33353 33354 33355 33356 33357 33358 33359 #> [33361] 33360 33361 33362 33363 33364 33365 33366 33367 33368 33369 33370 33371 #> [33373] 33372 33373 33374 33375 33376 33377 33378 33379 33380 33381 33382 33383 #> [33385] 33384 33385 33386 33387 33388 33389 33390 33391 33392 33393 33394 33395 #> [33397] 33396 33397 33398 33399 33400 33401 33402 33403 33404 33405 33406 33407 #> [33409] 33408 33409 33410 33411 33412 33413 33414 33415 33416 33417 33418 33419 #> [33421] 33420 33421 33422 33423 33424 33425 33426 33427 33428 33429 33430 33431 #> [33433] 33432 33433 33434 33435 33436 33437 33438 33439 33440 33441 33442 33443 #> [33445] 33444 33445 33446 33447 33448 33449 33450 33451 33452 33453 33454 33455 #> [33457] 33456 33457 33458 33459 33460 33461 33462 33463 33464 33465 33466 33467 #> [33469] 33468 33469 33470 33471 33472 33473 33474 33475 33476 33477 33478 33479 #> [33481] 33480 33481 33482 33483 33484 33485 33486 33487 33488 33489 33490 33491 #> [33493] 33492 33493 33494 33495 33496 33497 33498 33499 33500 33501 33502 33503 #> [33505] 33504 33505 33506 33507 33508 33509 33510 33511 33512 33513 33514 33515 #> [33517] 33516 33517 33518 33519 33520 33521 33522 33523 33524 33525 33526 33527 #> [33529] 33528 33529 33530 33531 33532 33533 33534 33535 33536 33537 33538 33539 #> [33541] 33540 33541 33542 33543 33544 33545 33546 33547 33548 33549 33550 33551 #> [33553] 33552 33553 33554 33555 33556 33557 33558 33559 33560 33561 33562 33563 #> [33565] 33564 33565 33566 33567 33568 33569 33570 33571 33572 33573 33574 33575 #> [33577] 33576 33577 33578 33579 33580 33581 33582 33583 33584 33585 33586 33587 #> [33589] 33588 33589 33590 33591 33592 33593 33594 33595 33596 33597 33598 33599 #> [33601] 33600 33601 33602 33603 33604 33605 33606 33607 33608 33609 33610 33611 #> [33613] 33612 33613 33614 33615 33616 33617 33618 33619 33620 33621 33622 33623 #> [33625] 33624 33625 33626 33627 33628 33629 33630 33631 33632 33633 33634 33635 #> [33637] 33636 33637 33638 33639 33640 33641 33642 33643 33644 33645 33646 33647 #> [33649] 33648 33649 33650 33651 33652 33653 33654 33655 33656 33657 33658 33659 #> [33661] 33660 33661 33662 33663 33664 33665 33666 33667 33668 33669 33670 33671 #> [33673] 33672 33673 33674 33675 33676 33677 33678 33679 33680 33681 33682 33683 #> [33685] 33684 33685 33686 33687 33688 33689 33690 33691 33692 33693 33694 33695 #> [33697] 33696 33697 33698 33699 33700 33701 33702 33703 33704 33705 33706 33707 #> [33709] 33708 33709 33710 33711 33712 33713 33714 33715 33716 33717 33718 33719 #> [33721] 33720 33721 33722 33723 33724 33725 33726 33727 33728 33729 33730 33731 #> [33733] 33732 33733 33734 33735 33736 33737 33738 33739 33740 33741 33742 33743 #> [33745] 33744 33745 33746 33747 33748 33749 33750 33751 33752 33753 33754 33755 #> [33757] 33756 33757 33758 33759 33760 33761 33762 33763 33764 33765 33766 33767 #> [33769] 33768 33769 33770 33771 33772 33773 33774 33775 33776 33777 33778 33779 #> [33781] 33780 33781 33782 33783 33784 33785 33786 33787 33788 33789 33790 33791 #> [33793] 33792 33793 33794 33795 33796 33797 33798 33799 33800 33801 33802 33803 #> [33805] 33804 33805 33806 33807 33808 33809 33810 33811 33812 33813 33814 33815 #> [33817] 33816 33817 33818 33819 33820 33821 33822 33823 33824 33825 33826 33827 #> [33829] 33828 33829 33830 33831 33832 33833 33834 33835 33836 33837 33838 33839 #> [33841] 33840 33841 33842 33843 33844 33845 33846 33847 33848 33849 33850 33851 #> [33853] 33852 33853 33854 33855 33856 33857 33858 33859 33860 33861 33862 33863 #> [33865] 33864 33865 33866 33867 33868 33869 33870 33871 33872 33873 33874 33875 #> [33877] 33876 33877 33878 33879 33880 33881 33882 33883 33884 33885 33886 33887 #> [33889] 33888 33889 33890 33891 33892 33893 33894 33895 33896 33897 33898 33899 #> [33901] 33900 33901 33902 33903 33904 33905 33906 33907 33908 33909 33910 33911 #> [33913] 33912 33913 33914 33915 33916 33917 33918 33919 33920 33921 33922 33923 #> [33925] 33924 33925 33926 33927 33928 33929 33930 33931 33932 33933 33934 33935 #> [33937] 33936 33937 33938 33939 33940 33941 33942 33943 33944 33945 33946 33947 #> [33949] 33948 33949 33950 33951 33952 33953 33954 33955 33956 33957 33958 33959 #> [33961] 33960 33961 33962 33963 33964 33965 33966 33967 33968 33969 33970 33971 #> [33973] 33972 33973 33974 33975 33976 33977 33978 33979 33980 33981 33982 33983 #> [33985] 33984 33985 33986 33987 33988 33989 33990 33991 33992 33993 33994 33995 #> [33997] 33996 33997 33998 33999 34000 34001 34002 34003 34004 34005 34006 34007 #> [34009] 34008 34009 34010 34011 34012 34013 34014 34015 34016 34017 34018 34019 #> [34021] 34020 34021 34022 34023 34024 34025 34026 34027 34028 34029 34030 34031 #> [34033] 34032 34033 34034 34035 34036 34037 34038 34039 34040 34041 34042 34043 #> [34045] 34044 34045 34046 34047 34048 34049 34050 34051 34052 34053 34054 34055 #> [34057] 34056 34057 34058 34059 34060 34061 34062 34063 34064 34065 34066 34067 #> [34069] 34068 34069 34070 34071 34072 34073 34074 34075 34076 34077 34078 34079 #> [34081] 34080 34081 34082 34083 34084 34085 34086 34087 34088 34089 34090 34091 #> [34093] 34092 34093 34094 34095 34096 34097 34098 34099 34100 34101 34102 34103 #> [34105] 34104 34105 34106 34107 34108 34109 34110 34111 34112 34113 34114 34115 #> [34117] 34116 34117 34118 34119 34120 34121 34122 34123 34124 34125 34126 34127 #> [34129] 34128 34129 34130 34131 34132 34133 34134 34135 34136 34137 34138 34139 #> [34141] 34140 34141 34142 34143 34144 34145 34146 34147 34148 34149 34150 34151 #> [34153] 34152 34153 34154 34155 34156 34157 34158 34159 34160 34161 34162 34163 #> [34165] 34164 34165 34166 34167 34168 34169 34170 34171 34172 34173 34174 34175 #> [34177] 34176 34177 34178 34179 34180 34181 34182 34183 34184 34185 34186 34187 #> [34189] 34188 34189 34190 34191 34192 34193 34194 34195 34196 34197 34198 34199 #> [34201] 34200 34201 34202 34203 34204 34205 34206 34207 34208 34209 34210 34211 #> [34213] 34212 34213 34214 34215 34216 34217 34218 34219 34220 34221 34222 34223 #> [34225] 34224 34225 34226 34227 34228 34229 34230 34231 34232 34233 34234 34235 #> [34237] 34236 34237 34238 34239 34240 34241 34242 34243 34244 34245 34246 34247 #> [34249] 34248 34249 34250 34251 34252 34253 34254 34255 34256 34257 34258 34259 #> [34261] 34260 34261 34262 34263 34264 34265 34266 34267 34268 34269 34270 34271 #> [34273] 34272 34273 34274 34275 34276 34277 34278 34279 34280 34281 34282 34283 #> [34285] 34284 34285 34286 34287 34288 34289 34290 34291 34292 34293 34294 34295 #> [34297] 34296 34297 34298 34299 34300 34301 34302 34303 34304 34305 34306 34307 #> [34309] 34308 34309 34310 34311 34312 34313 34314 34315 34316 34317 34318 34319 #> [34321] 34320 34321 34322 34323 34324 34325 34326 34327 34328 34329 34330 34331 #> [34333] 34332 34333 34334 34335 34336 34337 34338 34339 34340 34341 34342 34343 #> [34345] 34344 34345 34346 34347 34348 34349 34350 34351 34352 34353 34354 34355 #> [34357] 34356 34357 34358 34359 34360 34361 34362 34363 34364 34365 34366 34367 #> [34369] 34368 34369 34370 34371 34372 34373 34374 34375 34376 34377 34378 34379 #> [34381] 34380 34381 34382 34383 34384 34385 34386 34387 34388 34389 34390 34391 #> [34393] 34392 34393 34394 34395 34396 34397 34398 34399 34400 34401 34402 34403 #> [34405] 34404 34405 34406 34407 34408 34409 34410 34411 34412 34413 34414 34415 #> [34417] 34416 34417 34418 34419 34420 34421 34422 34423 34424 34425 34426 34427 #> [34429] 34428 34429 34430 34431 34432 34433 34434 34435 34436 34437 34438 34439 #> [34441] 34440 34441 34442 34443 34444 34445 34446 34447 34448 34449 34450 34451 #> [34453] 34452 34453 34454 34455 34456 34457 34458 34459 34460 34461 34462 34463 #> [34465] 34464 34465 34466 34467 34468 34469 34470 34471 34472 34473 34474 34475 #> [34477] 34476 34477 34478 34479 34480 34481 34482 34483 34484 34485 34486 34487 #> [34489] 34488 34489 34490 34491 34492 34493 34494 34495 34496 34497 34498 34499 #> [34501] 34500 34501 34502 34503 34504 34505 34506 34507 34508 34509 34510 34511 #> [34513] 34512 34513 34514 34515 34516 34517 34518 34519 34520 34521 34522 34523 #> [34525] 34524 34525 34526 34527 34528 34529 34530 34531 34532 34533 34534 34535 #> [34537] 34536 34537 34538 34539 34540 34541 34542 34543 34544 34545 34546 34547 #> [34549] 34548 34549 34550 34551 34552 34553 34554 34555 34556 34557 34558 34559 #> [34561] 34560 34561 34562 34563 34564 34565 34566 34567 34568 34569 34570 34571 #> [34573] 34572 34573 34574 34575 34576 34577 34578 34579 34580 34581 34582 34583 #> [34585] 34584 34585 34586 34587 34588 34589 34590 34591 34592 34593 34594 34595 #> [34597] 34596 34597 34598 34599 34600 34601 34602 34603 34604 34605 34606 34607 #> [34609] 34608 34609 34610 34611 34612 34613 34614 34615 34616 34617 34618 34619 #> [34621] 34620 34621 34622 34623 34624 34625 34626 34627 34628 34629 34630 34631 #> [34633] 34632 34633 34634 34635 34636 34637 34638 34639 34640 34641 34642 34643 #> [34645] 34644 34645 34646 34647 34648 34649 34650 34651 34652 34653 34654 34655 #> [34657] 34656 34657 34658 34659 34660 34661 34662 34663 34664 34665 34666 34667 #> [34669] 34668 34669 34670 34671 34672 34673 34674 34675 34676 34677 34678 34679 #> [34681] 34680 34681 34682 34683 34684 34685 34686 34687 34688 34689 34690 34691 #> [34693] 34692 34693 34694 34695 34696 34697 34698 34699 34700 34701 34702 34703 #> [34705] 34704 34705 34706 34707 34708 34709 34710 34711 34712 34713 34714 34715 #> [34717] 34716 34717 34718 34719 34720 34721 34722 34723 34724 34725 34726 34727 #> [34729] 34728 34729 34730 34731 34732 34733 34734 34735 34736 34737 34738 34739 #> [34741] 34740 34741 34742 34743 34744 34745 34746 34747 34748 34749 34750 34751 #> [34753] 34752 34753 34754 34755 34756 34757 34758 34759 34760 34761 34762 34763 #> [34765] 34764 34765 34766 34767 34768 34769 34770 34771 34772 34773 34774 34775 #> [34777] 34776 34777 34778 34779 34780 34781 34782 34783 34784 34785 34786 34787 #> [34789] 34788 34789 34790 34791 34792 34793 34794 34795 34796 34797 34798 34799 #> [34801] 34800 34801 34802 34803 34804 34805 34806 34807 34808 34809 34810 34811 #> [34813] 34812 34813 34814 34815 34816 34817 34818 34819 34820 34821 34822 34823 #> [34825] 34824 34825 34826 34827 34828 34829 34830 34831 34832 34833 34834 34835 #> [34837] 34836 34837 34838 34839 34840 34841 34842 34843 34844 34845 34846 34847 #> [34849] 34848 34849 34850 34851 34852 34853 34854 34855 34856 34857 34858 34859 #> [34861] 34860 34861 34862 34863 34864 34865 34866 34867 34868 34869 34870 34871 #> [34873] 34872 34873 34874 34875 34876 34877 34878 34879 34880 34881 34882 34883 #> [34885] 34884 34885 34886 34887 34888 34889 34890 34891 34892 34893 34894 34895 #> [34897] 34896 34897 34898 34899 34900 34901 34902 34903 34904 34905 34906 34907 #> [34909] 34908 34909 34910 34911 34912 34913 34914 34915 34916 34917 34918 34919 #> [34921] 34920 34921 34922 34923 34924 34925 34926 34927 34928 34929 34930 34931 #> [34933] 34932 34933 34934 34935 34936 34937 34938 34939 34940 34941 34942 34943 #> [34945] 34944 34945 34946 34947 34948 34949 34950 34951 34952 34953 34954 34955 #> [34957] 34956 34957 34958 34959 34960 34961 34962 34963 34964 34965 34966 34967 #> [34969] 34968 34969 34970 34971 34972 34973 34974 34975 34976 34977 34978 34979 #> [34981] 34980 34981 34982 34983 34984 34985 34986 34987 34988 34989 34990 34991 #> [34993] 34992 34993 34994 34995 34996 34997 34998 34999 35000 35001 35002 35003 #> [35005] 35004 35005 35006 35007 35008 35009 35010 35011 35012 35013 35014 35015 #> [35017] 35016 35017 35018 35019 35020 35021 35022 35023 35024 35025 35026 35027 #> [35029] 35028 35029 35030 35031 35032 35033 35034 35035 35036 35037 35038 35039 #> [35041] 35040 35041 35042 35043 35044 35045 35046 35047 35048 35049 35050 35051 #> [35053] 35052 35053 35054 35055 35056 35057 35058 35059 35060 35061 35062 35063 #> [35065] 35064 35065 35066 35067 35068 35069 35070 35071 35072 35073 35074 35075 #> [35077] 35076 35077 35078 35079 35080 35081 35082 35083 35084 35085 35086 35087 #> [35089] 35088 35089 35090 35091 35092 35093 35094 35095 35096 35097 35098 35099 #> [35101] 35100 35101 35102 35103 35104 35105 35106 35107 35108 35109 35110 35111 #> [35113] 35112 35113 35114 35115 35116 35117 35118 35119 35120 35121 35122 35123 #> [35125] 35124 35125 35126 35127 35128 35129 35130 35131 35132 35133 35134 35135 #> [35137] 35136 35137 35138 35139 35140 35141 35142 35143 35144 35145 35146 35147 #> [35149] 35148 35149 35150 35151 35152 35153 35154 35155 35156 35157 35158 35159 #> [35161] 35160 35161 35162 35163 35164 35165 35166 35167 35168 35169 35170 35171 #> [35173] 35172 35173 35174 35175 35176 35177 35178 35179 35180 35181 35182 35183 #> [35185] 35184 35185 35186 35187 35188 35189 35190 35191 35192 35193 35194 35195 #> [35197] 35196 35197 35198 35199 35200 35201 35202 35203 35204 35205 35206 35207 #> [35209] 35208 35209 35210 35211 35212 35213 35214 35215 35216 35217 35218 35219 #> [35221] 35220 35221 35222 35223 35224 35225 35226 35227 35228 35229 35230 35231 #> [35233] 35232 35233 35234 35235 35236 35237 35238 35239 35240 35241 35242 35243 #> [35245] 35244 35245 35246 35247 35248 35249 35250 35251 35252 35253 35254 35255 #> [35257] 35256 35257 35258 35259 35260 35261 35262 35263 35264 35265 35266 35267 #> [35269] 35268 35269 35270 35271 35272 35273 35274 35275 35276 35277 35278 35279 #> [35281] 35280 35281 35282 35283 35284 35285 35286 35287 35288 35289 35290 35291 #> [35293] 35292 35293 35294 35295 35296 35297 35298 35299 35300 35301 35302 35303 #> [35305] 35304 35305 35306 35307 35308 35309 35310 35311 35312 35313 35314 35315 #> [35317] 35316 35317 35318 35319 35320 35321 35322 35323 35324 35325 35326 35327 #> [35329] 35328 35329 35330 35331 35332 35333 35334 35335 35336 35337 35338 35339 #> [35341] 35340 35341 35342 35343 35344 35345 35346 35347 35348 35349 35350 35351 #> [35353] 35352 35353 35354 35355 35356 35357 35358 35359 35360 35361 35362 35363 #> [35365] 35364 35365 35366 35367 35368 35369 35370 35371 35372 35373 35374 35375 #> [35377] 35376 35377 35378 35379 35380 35381 35382 35383 35384 35385 35386 35387 #> [35389] 35388 35389 35390 35391 35392 35393 35394 35395 35396 35397 35398 35399 #> [35401] 35400 35401 35402 35403 35404 35405 35406 35407 35408 35409 35410 35411 #> [35413] 35412 35413 35414 35415 35416 35417 35418 35419 35420 35421 35422 35423 #> [35425] 35424 35425 35426 35427 35428 35429 35430 35431 35432 35433 35434 35435 #> [35437] 35436 35437 35438 35439 35440 35441 35442 35443 35444 35445 35446 35447 #> [35449] 35448 35449 35450 35451 35452 35453 35454 35455 35456 35457 35458 35459 #> [35461] 35460 35461 35462 35463 35464 35465 35466 35467 35468 35469 35470 35471 #> [35473] 35472 35473 35474 35475 35476 35477 35478 35479 35480 35481 35482 35483 #> [35485] 35484 35485 35486 35487 35488 35489 35490 35491 35492 35493 35494 35495 #> [35497] 35496 35497 35498 35499 35500 35501 35502 35503 35504 35505 35506 35507 #> [35509] 35508 35509 35510 35511 35512 35513 35514 35515 35516 35517 35518 35519 #> [35521] 35520 35521 35522 35523 35524 35525 35526 35527 35528 35529 35530 35531 #> [35533] 35532 35533 35534 35535 35536 35537 35538 35539 35540 35541 35542 35543 #> [35545] 35544 35545 35546 35547 35548 35549 35550 35551 35552 35553 35554 35555 #> [35557] 35556 35557 35558 35559 35560 35561 35562 35563 35564 35565 35566 35567 #> [35569] 35568 35569 35570 35571 35572 35573 35574 35575 35576 35577 35578 35579 #> [35581] 35580 35581 35582 35583 35584 35585 35586 35587 35588 35589 35590 35591 #> [35593] 35592 35593 35594 35595 35596 35597 35598 35599 35600 35601 35602 35603 #> [35605] 35604 35605 35606 35607 35608 35609 35610 35611 35612 35613 35614 35615 #> [35617] 35616 35617 35618 35619 35620 35621 35622 35623 35624 35625 35626 35627 #> [35629] 35628 35629 35630 35631 35632 35633 35634 35635 35636 35637 35638 35639 #> [35641] 35640 35641 35642 35643 35644 35645 35646 35647 35648 35649 35650 35651 #> [35653] 35652 35653 35654 35655 35656 35657 35658 35659 35660 35661 35662 35663 #> [35665] 35664 35665 35666 35667 35668 35669 35670 35671 35672 35673 35674 35675 #> [35677] 35676 35677 35678 35679 35680 35681 35682 35683 35684 35685 35686 35687 #> [35689] 35688 35689 35690 35691 35692 35693 35694 35695 35696 35697 35698 35699 #> [35701] 35700 35701 35702 35703 35704 35705 35706 35707 35708 35709 35710 35711 #> [35713] 35712 35713 35714 35715 35716 35717 35718 35719 35720 35721 35722 35723 #> [35725] 35724 35725 35726 35727 35728 35729 35730 35731 35732 35733 35734 35735 #> [35737] 35736 35737 35738 35739 35740 35741 35742 35743 35744 35745 35746 35747 #> [35749] 35748 35749 35750 35751 35752 35753 35754 35755 35756 35757 35758 35759 #> [35761] 35760 35761 35762 35763 35764 35765 35766 35767 35768 35769 35770 35771 #> [35773] 35772 35773 35774 35775 35776 35777 35778 35779 35780 35781 35782 35783 #> [35785] 35784 35785 35786 35787 35788 35789 35790 35791 35792 35793 35794 35795 #> [35797] 35796 35797 35798 35799 35800 35801 35802 35803 35804 35805 35806 35807 #> [35809] 35808 35809 35810 35811 35812 35813 35814 35815 35816 35817 35818 35819 #> [35821] 35820 35821 35822 35823 35824 35825 35826 35827 35828 35829 35830 35831 #> [35833] 35832 35833 35834 35835 35836 35837 35838 35839 35840 35841 35842 35843 #> [35845] 35844 35845 35846 35847 35848 35849 35850 35851 35852 35853 35854 35855 #> [35857] 35856 35857 35858 35859 35860 35861 35862 35863 35864 35865 35866 35867 #> [35869] 35868 35869 35870 35871 35872 35873 35874 35875 35876 35877 35878 35879 #> [35881] 35880 35881 35882 35883 35884 35885 35886 35887 35888 35889 35890 35891 #> [35893] 35892 35893 35894 35895 35896 35897 35898 35899 35900 35901 35902 35903 #> [35905] 35904 35905 35906 35907 35908 35909 35910 35911 35912 35913 35914 35915 #> [35917] 35916 35917 35918 35919 35920 35921 35922 35923 35924 35925 35926 35927 #> [35929] 35928 35929 35930 35931 35932 35933 35934 35935 35936 35937 35938 35939 #> [35941] 35940 35941 35942 35943 35944 35945 35946 35947 35948 35949 35950 35951 #> [35953] 35952 35953 35954 35955 35956 35957 35958 35959 35960 35961 35962 35963 #> [35965] 35964 35965 35966 35967 35968 35969 35970 35971 35972 35973 35974 35975 #> [35977] 35976 35977 35978 35979 35980 35981 35982 35983 35984 35985 35986 35987 #> [35989] 35988 35989 35990 35991 35992 35993 35994 35995 35996 35997 35998 35999 #> [36001] 36000 36001 36002 36003 36004 36005 36006 36007 36008 36009 36010 36011 #> [36013] 36012 36013 36014 36015 36016 36017 36018 36019 36020 36021 36022 36023 #> [36025] 36024 36025 36026 36027 36028 36029 36030 36031 36032 36033 36034 36035 #> [36037] 36036 36037 36038 36039 36040 36041 36042 36043 36044 36045 36046 36047 #> [36049] 36048 36049 36050 36051 36052 36053 36054 36055 36056 36057 36058 36059 #> [36061] 36060 36061 36062 36063 36064 36065 36066 36067 36068 36069 36070 36071 #> [36073] 36072 36073 36074 36075 36076 36077 36078 36079 36080 36081 36082 36083 #> [36085] 36084 36085 36086 36087 36088 36089 36090 36091 36092 36093 36094 36095 #> [36097] 36096 36097 36098 36099 36100 36101 36102 36103 36104 36105 36106 36107 #> [36109] 36108 36109 36110 36111 36112 36113 36114 36115 36116 36117 36118 36119 #> [36121] 36120 36121 36122 36123 36124 36125 36126 36127 36128 36129 36130 36131 #> [36133] 36132 36133 36134 36135 36136 36137 36138 36139 36140 36141 36142 36143 #> [36145] 36144 36145 36146 36147 36148 36149 36150 36151 36152 36153 36154 36155 #> [36157] 36156 36157 36158 36159 36160 36161 36162 36163 36164 36165 36166 36167 #> [36169] 36168 36169 36170 36171 36172 36173 36174 36175 36176 36177 36178 36179 #> [36181] 36180 36181 36182 36183 36184 36185 36186 36187 36188 36189 36190 36191 #> [36193] 36192 36193 36194 36195 36196 36197 36198 36199 36200 36201 36202 36203 #> [36205] 36204 36205 36206 36207 36208 36209 36210 36211 36212 36213 36214 36215 #> [36217] 36216 36217 36218 36219 36220 36221 36222 36223 36224 36225 36226 36227 #> [36229] 36228 36229 36230 36231 36232 36233 36234 36235 36236 36237 36238 36239 #> [36241] 36240 36241 36242 36243 36244 36245 36246 36247 36248 36249 36250 36251 #> [36253] 36252 36253 36254 36255 36256 36257 36258 36259 36260 36261 36262 36263 #> [36265] 36264 36265 36266 36267 36268 36269 36270 36271 36272 36273 36274 36275 #> [36277] 36276 36277 36278 36279 36280 36281 36282 36283 36284 36285 36286 36287 #> [36289] 36288 36289 36290 36291 36292 36293 36294 36295 36296 36297 36298 36299 #> [36301] 36300 36301 36302 36303 36304 36305 36306 36307 36308 36309 36310 36311 #> [36313] 36312 36313 36314 36315 36316 36317 36318 36319 36320 36321 36322 36323 #> [36325] 36324 36325 36326 36327 36328 36329 36330 36331 36332 36333 36334 36335 #> [36337] 36336 36337 36338 36339 36340 36341 36342 36343 36344 36345 36346 36347 #> [36349] 36348 36349 36350 36351 36352 36353 36354 36355 36356 36357 36358 36359 #> [36361] 36360 36361 36362 36363 36364 36365 36366 36367 36368 36369 36370 36371 #> [36373] 36372 36373 36374 36375 36376 36377 36378 36379 36380 36381 36382 36383 #> [36385] 36384 36385 36386 36387 36388 36389 36390 36391 36392 36393 36394 36395 #> [36397] 36396 36397 36398 36399 36400 36401 36402 36403 36404 36405 36406 36407 #> [36409] 36408 36409 36410 36411 36412 36413 36414 36415 36416 36417 36418 36419 #> [36421] 36420 36421 36422 36423 36424 36425 36426 36427 36428 36429 36430 36431 #> [36433] 36432 36433 36434 36435 36436 36437 36438 36439 36440 36441 36442 36443 #> [36445] 36444 36445 36446 36447 36448 36449 36450 36451 36452 36453 36454 36455 #> [36457] 36456 36457 36458 36459 36460 36461 36462 36463 36464 36465 36466 36467 #> [36469] 36468 36469 36470 36471 36472 36473 36474 36475 36476 36477 36478 36479 #> [36481] 36480 36481 36482 36483 36484 36485 36486 36487 36488 36489 36490 36491 #> [36493] 36492 36493 36494 36495 36496 36497 36498 36499 36500 36501 36502 36503 #> [36505] 36504 36505 36506 36507 36508 36509 36510 36511 36512 36513 36514 36515 #> [36517] 36516 36517 36518 36519 36520 36521 36522 36523 36524 36525 36526 36527 #> [36529] 36528 36529 36530 36531 36532 36533 36534 36535 36536 36537 36538 36539 #> [36541] 36540 36541 36542 36543 36544 36545 36546 36547 36548 36549 36550 36551 #> [36553] 36552 36553 36554 36555 36556 36557 36558 36559 36560 36561 36562 36563 #> [36565] 36564 36565 36566 36567 36568 36569 36570 36571 36572 36573 36574 36575 #> [36577] 36576 36577 36578 36579 36580 36581 36582 36583 36584 36585 36586 36587 #> [36589] 36588 36589 36590 36591 36592 36593 36594 36595 36596 36597 36598 36599 #> [36601] 36600 36601 36602 36603 36604 36605 36606 36607 36608 36609 36610 36611 #> [36613] 36612 36613 36614 36615 36616 36617 36618 36619 36620 36621 36622 36623 #> [36625] 36624 36625 36626 36627 36628 36629 36630 36631 36632 36633 36634 36635 #> [36637] 36636 36637 36638 36639 36640 36641 36642 36643 36644 36645 36646 36647 #> [36649] 36648 36649 36650 36651 36652 36653 36654 36655 36656 36657 36658 36659 #> [36661] 36660 36661 36662 36663 36664 36665 36666 36667 36668 36669 36670 36671 #> [36673] 36672 36673 36674 36675 36676 36677 36678 36679 36680 36681 36682 36683 #> [36685] 36684 36685 36686 36687 36688 36689 36690 36691 36692 36693 36694 36695 #> [36697] 36696 36697 36698 36699 36700 36701 36702 36703 36704 36705 36706 36707 #> [36709] 36708 36709 36710 36711 36712 36713 36714 36715 36716 36717 36718 36719 #> [36721] 36720 36721 36722 36723 36724 36725 36726 36727 36728 36729 36730 36731 #> [36733] 36732 36733 36734 36735 36736 36737 36738 36739 36740 36741 36742 36743 #> [36745] 36744 36745 36746 36747 36748 36749 36750 36751 36752 36753 36754 36755 #> [36757] 36756 36757 36758 36759 36760 36761 36762 36763 36764 36765 36766 36767 #> [36769] 36768 36769 36770 36771 36772 36773 36774 36775 36776 36777 36778 36779 #> [36781] 36780 36781 36782 36783 36784 36785 36786 36787 36788 36789 36790 36791 #> [36793] 36792 36793 36794 36795 36796 36797 36798 36799 36800 36801 36802 36803 #> [36805] 36804 36805 36806 36807 36808 36809 36810 36811 36812 36813 36814 36815 #> [36817] 36816 36817 36818 36819 36820 36821 36822 36823 36824 36825 36826 36827 #> [36829] 36828 36829 36830 36831 36832 36833 36834 36835 36836 36837 36838 36839 #> [36841] 36840 36841 36842 36843 36844 36845 36846 36847 36848 36849 36850 36851 #> [36853] 36852 36853 36854 36855 36856 36857 36858 36859 36860 36861 36862 36863 #> [36865] 36864 36865 36866 36867 36868 36869 36870 36871 36872 36873 36874 36875 #> [36877] 36876 36877 36878 36879 36880 36881 36882 36883 36884 36885 36886 36887 #> [36889] 36888 36889 36890 36891 36892 36893 36894 36895 36896 36897 36898 36899 #> [36901] 36900 36901 36902 36903 36904 36905 36906 36907 36908 36909 36910 36911 #> [36913] 36912 36913 36914 36915 36916 36917 36918 36919 36920 36921 36922 36923 #> [36925] 36924 36925 36926 36927 36928 36929 36930 36931 36932 36933 36934 36935 #> [36937] 36936 36937 36938 36939 36940 36941 36942 36943 36944 36945 36946 36947 #> [36949] 36948 36949 36950 36951 36952 36953 36954 36955 36956 36957 36958 36959 #> [36961] 36960 36961 36962 36963 36964 36965 36966 36967 36968 36969 36970 36971 #> [36973] 36972 36973 36974 36975 36976 36977 36978 36979 36980 36981 36982 36983 #> [36985] 36984 36985 36986 36987 36988 36989 36990 36991 36992 36993 36994 36995 #> [36997] 36996 36997 36998 36999 37000 37001 37002 37003 37004 37005 37006 37007 #> [37009] 37008 37009 37010 37011 37012 37013 37014 37015 37016 37017 37018 37019 #> [37021] 37020 37021 37022 37023 37024 37025 37026 37027 37028 37029 37030 37031 #> [37033] 37032 37033 37034 37035 37036 37037 37038 37039 37040 37041 37042 37043 #> [37045] 37044 37045 37046 37047 37048 37049 37050 37051 37052 37053 37054 37055 #> [37057] 37056 37057 37058 37059 37060 37061 37062 37063 37064 37065 37066 37067 #> [37069] 37068 37069 37070 37071 37072 37073 37074 37075 37076 37077 37078 37079 #> [37081] 37080 37081 37082 37083 37084 37085 37086 37087 37088 37089 37090 37091 #> [37093] 37092 37093 37094 37095 37096 37097 37098 37099 37100 37101 37102 37103 #> [37105] 37104 37105 37106 37107 37108 37109 37110 37111 37112 37113 37114 37115 #> [37117] 37116 37117 37118 37119 37120 37121 37122 37123 37124 37125 37126 37127 #> [37129] 37128 37129 37130 37131 37132 37133 37134 37135 37136 37137 37138 37139 #> [37141] 37140 37141 37142 37143 37144 37145 37146 37147 37148 37149 37150 37151 #> [37153] 37152 37153 37154 37155 37156 37157 37158 37159 37160 37161 37162 37163 #> [37165] 37164 37165 37166 37167 37168 37169 37170 37171 37172 37173 37174 37175 #> [37177] 37176 37177 37178 37179 37180 37181 37182 37183 37184 37185 37186 37187 #> [37189] 37188 37189 37190 37191 37192 37193 37194 37195 37196 37197 37198 37199 #> [37201] 37200 37201 37202 37203 37204 37205 37206 37207 37208 37209 37210 37211 #> [37213] 37212 37213 37214 37215 37216 37217 37218 37219 37220 37221 37222 37223 #> [37225] 37224 37225 37226 37227 37228 37229 37230 37231 37232 37233 37234 37235 #> [37237] 37236 37237 37238 37239 37240 37241 37242 37243 37244 37245 37246 37247 #> [37249] 37248 37249 37250 37251 37252 37253 37254 37255 37256 37257 37258 37259 #> [37261] 37260 37261 37262 37263 37264 37265 37266 37267 37268 37269 37270 37271 #> [37273] 37272 37273 37274 37275 37276 37277 37278 37279 37280 37281 37282 37283 #> [37285] 37284 37285 37286 37287 37288 37289 37290 37291 37292 37293 37294 37295 #> [37297] 37296 37297 37298 37299 37300 37301 37302 37303 37304 37305 37306 37307 #> [37309] 37308 37309 37310 37311 37312 37313 37314 37315 37316 37317 37318 37319 #> [37321] 37320 37321 37322 37323 37324 37325 37326 37327 37328 37329 37330 37331 #> [37333] 37332 37333 37334 37335 37336 37337 37338 37339 37340 37341 37342 37343 #> [37345] 37344 37345 37346 37347 37348 37349 37350 37351 37352 37353 37354 37355 #> [37357] 37356 37357 37358 37359 37360 37361 37362 37363 37364 37365 37366 37367 #> [37369] 37368 37369 37370 37371 37372 37373 37374 37375 37376 37377 37378 37379 #> [37381] 37380 37381 37382 37383 37384 37385 37386 37387 37388 37389 37390 37391 #> [37393] 37392 37393 37394 37395 37396 37397 37398 37399 37400 37401 37402 37403 #> [37405] 37404 37405 37406 37407 37408 37409 37410 37411 37412 37413 37414 37415 #> [37417] 37416 37417 37418 37419 37420 37421 37422 37423 37424 37425 37426 37427 #> [37429] 37428 37429 37430 37431 37432 37433 37434 37435 37436 37437 37438 37439 #> [37441] 37440 37441 37442 37443 37444 37445 37446 37447 37448 37449 37450 37451 #> [37453] 37452 37453 37454 37455 37456 37457 37458 37459 37460 37461 37462 37463 #> [37465] 37464 37465 37466 37467 37468 37469 37470 37471 37472 37473 37474 37475 #> [37477] 37476 37477 37478 37479 37480 37481 37482 37483 37484 37485 37486 37487 #> [37489] 37488 37489 37490 37491 37492 37493 37494 37495 37496 37497 37498 37499 #> [37501] 37500 37501 37502 37503 37504 37505 37506 37507 37508 37509 37510 37511 #> [37513] 37512 37513 37514 37515 37516 37517 37518 37519 37520 37521 37522 37523 #> [37525] 37524 37525 37526 37527 37528 37529 37530 37531 37532 37533 37534 37535 #> [37537] 37536 37537 37538 37539 37540 37541 37542 37543 37544 37545 37546 37547 #> [37549] 37548 37549 37550 37551 37552 37553 37554 37555 37556 37557 37558 37559 #> [37561] 37560 37561 37562 37563 37564 37565 37566 37567 37568 37569 37570 37571 #> [37573] 37572 37573 37574 37575 37576 37577 37578 37579 37580 37581 37582 37583 #> [37585] 37584 37585 37586 37587 37588 37589 37590 37591 37592 37593 37594 37595 #> [37597] 37596 37597 37598 37599 37600 37601 37602 37603 37604 37605 37606 37607 #> [37609] 37608 37609 37610 37611 37612 37613 37614 37615 37616 37617 37618 37619 #> [37621] 37620 37621 37622 37623 37624 37625 37626 37627 37628 37629 37630 37631 #> [37633] 37632 37633 37634 37635 37636 37637 37638 37639 37640 37641 37642 37643 #> [37645] 37644 37645 37646 37647 37648 37649 37650 37651 37652 37653 37654 37655 #> [37657] 37656 37657 37658 37659 37660 37661 37662 37663 37664 37665 37666 37667 #> [37669] 37668 37669 37670 37671 37672 37673 37674 37675 37676 37677 37678 37679 #> [37681] 37680 37681 37682 37683 37684 37685 37686 37687 37688 37689 37690 37691 #> [37693] 37692 37693 37694 37695 37696 37697 37698 37699 37700 37701 37702 37703 #> [37705] 37704 37705 37706 37707 37708 37709 37710 37711 37712 37713 37714 37715 #> [37717] 37716 37717 37718 37719 37720 37721 37722 37723 37724 37725 37726 37727 #> [37729] 37728 37729 37730 37731 37732 37733 37734 37735 37736 37737 37738 37739 #> [37741] 37740 37741 37742 37743 37744 37745 37746 37747 37748 37749 37750 37751 #> [37753] 37752 37753 37754 37755 37756 37757 37758 37759 37760 37761 37762 37763 #> [37765] 37764 37765 37766 37767 37768 37769 37770 37771 37772 37773 37774 37775 #> [37777] 37776 37777 37778 37779 37780 37781 37782 37783 37784 37785 37786 37787 #> [37789] 37788 37789 37790 37791 37792 37793 37794 37795 37796 37797 37798 37799 #> [37801] 37800 37801 37802 37803 37804 37805 37806 37807 37808 37809 37810 37811 #> [37813] 37812 37813 37814 37815 37816 37817 37818 37819 37820 37821 37822 37823 #> [37825] 37824 37825 37826 37827 37828 37829 37830 37831 37832 37833 37834 37835 #> [37837] 37836 37837 37838 37839 37840 37841 37842 37843 37844 37845 37846 37847 #> [37849] 37848 37849 37850 37851 37852 37853 37854 37855 37856 37857 37858 37859 #> [37861] 37860 37861 37862 37863 37864 37865 37866 37867 37868 37869 37870 37871 #> [37873] 37872 37873 37874 37875 37876 37877 37878 37879 37880 37881 37882 37883 #> [37885] 37884 37885 37886 37887 37888 37889 37890 37891 37892 37893 37894 37895 #> [37897] 37896 37897 37898 37899 37900 37901 37902 37903 37904 37905 37906 37907 #> [37909] 37908 37909 37910 37911 37912 37913 37914 37915 37916 37917 37918 37919 #> [37921] 37920 37921 37922 37923 37924 37925 37926 37927 37928 37929 37930 37931 #> [37933] 37932 37933 37934 37935 37936 37937 37938 37939 37940 37941 37942 37943 #> [37945] 37944 37945 37946 37947 37948 37949 37950 37951 37952 37953 37954 37955 #> [37957] 37956 37957 37958 37959 37960 37961 37962 37963 37964 37965 37966 37967 #> [37969] 37968 37969 37970 37971 37972 37973 37974 37975 37976 37977 37978 37979 #> [37981] 37980 37981 37982 37983 37984 37985 37986 37987 37988 37989 37990 37991 #> [37993] 37992 37993 37994 37995 37996 37997 37998 37999 38000 38001 38002 38003 #> [38005] 38004 38005 38006 38007 38008 38009 38010 38011 38012 38013 38014 38015 #> [38017] 38016 38017 38018 38019 38020 38021 38022 38023 38024 38025 38026 38027 #> [38029] 38028 38029 38030 38031 38032 38033 38034 38035 38036 38037 38038 38039 #> [38041] 38040 38041 38042 38043 38044 38045 38046 38047 38048 38049 38050 38051 #> [38053] 38052 38053 38054 38055 38056 38057 38058 38059 38060 38061 38062 38063 #> [38065] 38064 38065 38066 38067 38068 38069 38070 38071 38072 38073 38074 38075 #> [38077] 38076 38077 38078 38079 38080 38081 38082 38083 38084 38085 38086 38087 #> [38089] 38088 38089 38090 38091 38092 38093 38094 38095 38096 38097 38098 38099 #> [38101] 38100 38101 38102 38103 38104 38105 38106 38107 38108 38109 38110 38111 #> [38113] 38112 38113 38114 38115 38116 38117 38118 38119 38120 38121 38122 38123 #> [38125] 38124 38125 38126 38127 38128 38129 38130 38131 38132 38133 38134 38135 #> [38137] 38136 38137 38138 38139 38140 38141 38142 38143 38144 38145 38146 38147 #> [38149] 38148 38149 38150 38151 38152 38153 38154 38155 38156 38157 38158 38159 #> [38161] 38160 38161 38162 38163 38164 38165 38166 38167 38168 38169 38170 38171 #> [38173] 38172 38173 38174 38175 38176 38177 38178 38179 38180 38181 38182 38183 #> [38185] 38184 38185 38186 38187 38188 38189 38190 38191 38192 38193 38194 38195 #> [38197] 38196 38197 38198 38199 38200 38201 38202 38203 38204 38205 38206 38207 #> [38209] 38208 38209 38210 38211 38212 38213 38214 38215 38216 38217 38218 38219 #> [38221] 38220 38221 38222 38223 38224 38225 38226 38227 38228 38229 38230 38231 #> [38233] 38232 38233 38234 38235 38236 38237 38238 38239 38240 38241 38242 38243 #> [38245] 38244 38245 38246 38247 38248 38249 38250 38251 38252 38253 38254 38255 #> [38257] 38256 38257 38258 38259 38260 38261 38262 38263 38264 38265 38266 38267 #> [38269] 38268 38269 38270 38271 38272 38273 38274 38275 38276 38277 38278 38279 #> [38281] 38280 38281 38282 38283 38284 38285 38286 38287 38288 38289 38290 38291 #> [38293] 38292 38293 38294 38295 38296 38297 38298 38299 38300 38301 38302 38303 #> [38305] 38304 38305 38306 38307 38308 38309 38310 38311 38312 38313 38314 38315 #> [38317] 38316 38317 38318 38319 38320 38321 38322 38323 38324 38325 38326 38327 #> [38329] 38328 38329 38330 38331 38332 38333 38334 38335 38336 38337 38338 38339 #> [38341] 38340 38341 38342 38343 38344 38345 38346 38347 38348 38349 38350 38351 #> [38353] 38352 38353 38354 38355 38356 38357 38358 38359 38360 38361 38362 38363 #> [38365] 38364 38365 38366 38367 38368 38369 38370 38371 38372 38373 38374 38375 #> [38377] 38376 38377 38378 38379 38380 38381 38382 38383 38384 38385 38386 38387 #> [38389] 38388 38389 38390 38391 38392 38393 38394 38395 38396 38397 38398 38399 #> [38401] 38400 38401 38402 38403 38404 38405 38406 38407 38408 38409 38410 38411 #> [38413] 38412 38413 38414 38415 38416 38417 38418 38419 38420 38421 38422 38423 #> [38425] 38424 38425 38426 38427 38428 38429 38430 38431 38432 38433 38434 38435 #> [38437] 38436 38437 38438 38439 38440 38441 38442 38443 38444 38445 38446 38447 #> [38449] 38448 38449 38450 38451 38452 38453 38454 38455 38456 38457 38458 38459 #> [38461] 38460 38461 38462 38463 38464 38465 38466 38467 38468 38469 38470 38471 #> [38473] 38472 38473 38474 38475 38476 38477 38478 38479 38480 38481 38482 38483 #> [38485] 38484 38485 38486 38487 38488 38489 38490 38491 38492 38493 38494 38495 #> [38497] 38496 38497 38498 38499 38500 38501 38502 38503 38504 38505 38506 38507 #> [38509] 38508 38509 38510 38511 38512 38513 38514 38515 38516 38517 38518 38519 #> [38521] 38520 38521 38522 38523 38524 38525 38526 38527 38528 38529 38530 38531 #> [38533] 38532 38533 38534 38535 38536 38537 38538 38539 38540 38541 38542 38543 #> [38545] 38544 38545 38546 38547 38548 38549 38550 38551 38552 38553 38554 38555 #> [38557] 38556 38557 38558 38559 38560 38561 38562 38563 38564 38565 38566 38567 #> [38569] 38568 38569 38570 38571 38572 38573 38574 38575 38576 38577 38578 38579 #> [38581] 38580 38581 38582 38583 38584 38585 38586 38587 38588 38589 38590 38591 #> [38593] 38592 38593 38594 38595 38596 38597 38598 38599 38600 38601 38602 38603 #> [38605] 38604 38605 38606 38607 38608 38609 38610 38611 38612 38613 38614 38615 #> [38617] 38616 38617 38618 38619 38620 38621 38622 38623 38624 38625 38626 38627 #> [38629] 38628 38629 38630 38631 38632 38633 38634 38635 38636 38637 38638 38639 #> [38641] 38640 38641 38642 38643 38644 38645 38646 38647 38648 38649 38650 38651 #> [38653] 38652 38653 38654 38655 38656 38657 38658 38659 38660 38661 38662 38663 #> [38665] 38664 38665 38666 38667 38668 38669 38670 38671 38672 38673 38674 38675 #> [38677] 38676 38677 38678 38679 38680 38681 38682 38683 38684 38685 38686 38687 #> [38689] 38688 38689 38690 38691 38692 38693 38694 38695 38696 38697 38698 38699 #> [38701] 38700 38701 38702 38703 38704 38705 38706 38707 38708 38709 38710 38711 #> [38713] 38712 38713 38714 38715 38716 38717 38718 38719 38720 38721 38722 38723 #> [38725] 38724 38725 38726 38727 38728 38729 38730 38731 38732 38733 38734 38735 #> [38737] 38736 38737 38738 38739 38740 38741 38742 38743 38744 38745 38746 38747 #> [38749] 38748 38749 38750 38751 38752 38753 38754 38755 38756 38757 38758 38759 #> [38761] 38760 38761 38762 38763 38764 38765 38766 38767 38768 38769 38770 38771 #> [38773] 38772 38773 38774 38775 38776 38777 38778 38779 38780 38781 38782 38783 #> [38785] 38784 38785 38786 38787 38788 38789 38790 38791 38792 38793 38794 38795 #> [38797] 38796 38797 38798 38799 38800 38801 38802 38803 38804 38805 38806 38807 #> [38809] 38808 38809 38810 38811 38812 38813 38814 38815 38816 38817 38818 38819 #> [38821] 38820 38821 38822 38823 38824 38825 38826 38827 38828 38829 38830 38831 #> [38833] 38832 38833 38834 38835 38836 38837 38838 38839 38840 38841 38842 38843 #> [38845] 38844 38845 38846 38847 38848 38849 38850 38851 38852 38853 38854 38855 #> [38857] 38856 38857 38858 38859 38860 38861 38862 38863 38864 38865 38866 38867 #> [38869] 38868 38869 38870 38871 38872 38873 38874 38875 38876 38877 38878 38879 #> [38881] 38880 38881 38882 38883 38884 38885 38886 38887 38888 38889 38890 38891 #> [38893] 38892 38893 38894 38895 38896 38897 38898 38899 38900 38901 38902 38903 #> [38905] 38904 38905 38906 38907 38908 38909 38910 38911 38912 38913 38914 38915 #> [38917] 38916 38917 38918 38919 38920 38921 38922 38923 38924 38925 38926 38927 #> [38929] 38928 38929 38930 38931 38932 38933 38934 38935 38936 38937 38938 38939 #> [38941] 38940 38941 38942 38943 38944 38945 38946 38947 38948 38949 38950 38951 #> [38953] 38952 38953 38954 38955 38956 38957 38958 38959 38960 38961 38962 38963 #> [38965] 38964 38965 38966 38967 38968 38969 38970 38971 38972 38973 38974 38975 #> [38977] 38976 38977 38978 38979 38980 38981 38982 38983 38984 38985 38986 38987 #> [38989] 38988 38989 38990 38991 38992 38993 38994 38995 38996 38997 38998 38999 #> [39001] 39000 39001 39002 39003 39004 39005 39006 39007 39008 39009 39010 39011 #> [39013] 39012 39013 39014 39015 39016 39017 39018 39019 39020 39021 39022 39023 #> [39025] 39024 39025 39026 39027 39028 39029 39030 39031 39032 39033 39034 39035 #> [39037] 39036 39037 39038 39039 39040 39041 39042 39043 39044 39045 39046 39047 #> [39049] 39048 39049 39050 39051 39052 39053 39054 39055 39056 39057 39058 39059 #> [39061] 39060 39061 39062 39063 39064 39065 39066 39067 39068 39069 39070 39071 #> [39073] 39072 39073 39074 39075 39076 39077 39078 39079 39080 39081 39082 39083 #> [39085] 39084 39085 39086 39087 39088 39089 39090 39091 39092 39093 39094 39095 #> [39097] 39096 39097 39098 39099 39100 39101 39102 39103 39104 39105 39106 39107 #> [39109] 39108 39109 39110 39111 39112 39113 39114 39115 39116 39117 39118 39119 #> [39121] 39120 39121 39122 39123 39124 39125 39126 39127 39128 39129 39130 39131 #> [39133] 39132 39133 39134 39135 39136 39137 39138 39139 39140 39141 39142 39143 #> [39145] 39144 39145 39146 39147 39148 39149 39150 39151 39152 39153 39154 39155 #> [39157] 39156 39157 39158 39159 39160 39161 39162 39163 39164 39165 39166 39167 #> [39169] 39168 39169 39170 39171 39172 39173 39174 39175 39176 39177 39178 39179 #> [39181] 39180 39181 39182 39183 39184 39185 39186 39187 39188 39189 39190 39191 #> [39193] 39192 39193 39194 39195 39196 39197 39198 39199 39200 39201 39202 39203 #> [39205] 39204 39205 39206 39207 39208 39209 39210 39211 39212 39213 39214 39215 #> [39217] 39216 39217 39218 39219 39220 39221 39222 39223 39224 39225 39226 39227 #> [39229] 39228 39229 39230 39231 39232 39233 39234 39235 39236 39237 39238 39239 #> [39241] 39240 39241 39242 39243 39244 39245 39246 39247 39248 39249 39250 39251 #> [39253] 39252 39253 39254 39255 39256 39257 39258 39259 39260 39261 39262 39263 #> [39265] 39264 39265 39266 39267 39268 39269 39270 39271 39272 39273 39274 39275 #> [39277] 39276 39277 39278 39279 39280 39281 39282 39283 39284 39285 39286 39287 #> [39289] 39288 39289 39290 39291 39292 39293 39294 39295 39296 39297 39298 39299 #> [39301] 39300 39301 39302 39303 39304 39305 39306 39307 39308 39309 39310 39311 #> [39313] 39312 39313 39314 39315 39316 39317 39318 39319 39320 39321 39322 39323 #> [39325] 39324 39325 39326 39327 39328 39329 39330 39331 39332 39333 39334 39335 #> [39337] 39336 39337 39338 39339 39340 39341 39342 39343 39344 39345 39346 39347 #> [39349] 39348 39349 39350 39351 39352 39353 39354 39355 39356 39357 39358 39359 #> [39361] 39360 39361 39362 39363 39364 39365 39366 39367 39368 39369 39370 39371 #> [39373] 39372 39373 39374 39375 39376 39377 39378 39379 39380 39381 39382 39383 #> [39385] 39384 39385 39386 39387 39388 39389 39390 39391 39392 39393 39394 39395 #> [39397] 39396 39397 39398 39399 39400 39401 39402 39403 39404 39405 39406 39407 #> [39409] 39408 39409 39410 39411 39412 39413 39414 39415 39416 39417 39418 39419 #> [39421] 39420 39421 39422 39423 39424 39425 39426 39427 39428 39429 39430 39431 #> [39433] 39432 39433 39434 39435 39436 39437 39438 39439 39440 39441 39442 39443 #> [39445] 39444 39445 39446 39447 39448 39449 39450 39451 39452 39453 39454 39455 #> [39457] 39456 39457 39458 39459 39460 39461 39462 39463 39464 39465 39466 39467 #> [39469] 39468 39469 39470 39471 39472 39473 39474 39475 39476 39477 39478 39479 #> [39481] 39480 39481 39482 39483 39484 39485 39486 39487 39488 39489 39490 39491 #> [39493] 39492 39493 39494 39495 39496 39497 39498 39499 39500 39501 39502 39503 #> [39505] 39504 39505 39506 39507 39508 39509 39510 39511 39512 39513 39514 39515 #> [39517] 39516 39517 39518 39519 39520 39521 39522 39523 39524 39525 39526 39527 #> [39529] 39528 39529 39530 39531 39532 39533 39534 39535 39536 39537 39538 39539 #> [39541] 39540 39541 39542 39543 39544 39545 39546 39547 39548 39549 39550 39551 #> [39553] 39552 39553 39554 39555 39556 39557 39558 39559 39560 39561 39562 39563 #> [39565] 39564 39565 39566 39567 39568 39569 39570 39571 39572 39573 39574 39575 #> [39577] 39576 39577 39578 39579 39580 39581 39582 39583 39584 39585 39586 39587 #> [39589] 39588 39589 39590 39591 39592 39593 39594 39595 39596 39597 39598 39599 #> [39601] 39600 39601 39602 39603 39604 39605 39606 39607 39608 39609 39610 39611 #> [39613] 39612 39613 39614 39615 39616 39617 39618 39619 39620 39621 39622 39623 #> [39625] 39624 39625 39626 39627 39628 39629 39630 39631 39632 39633 39634 39635 #> [39637] 39636 39637 39638 39639 39640 39641 39642 39643 39644 39645 39646 39647 #> [39649] 39648 39649 39650 39651 39652 39653 39654 39655 39656 39657 39658 39659 #> [39661] 39660 39661 39662 39663 39664 39665 39666 39667 39668 39669 39670 39671 #> [39673] 39672 39673 39674 39675 39676 39677 39678 39679 39680 39681 39682 39683 #> [39685] 39684 39685 39686 39687 39688 39689 39690 39691 39692 39693 39694 39695 #> [39697] 39696 39697 39698 39699 39700 39701 39702 39703 39704 39705 39706 39707 #> [39709] 39708 39709 39710 39711 39712 39713 39714 39715 39716 39717 39718 39719 #> [39721] 39720 39721 39722 39723 39724 39725 39726 39727 39728 39729 39730 39731 #> [39733] 39732 39733 39734 39735 39736 39737 39738 39739 39740 39741 39742 39743 #> [39745] 39744 39745 39746 39747 39748 39749 39750 39751 39752 39753 39754 39755 #> [39757] 39756 39757 39758 39759 39760 39761 39762 39763 39764 39765 39766 39767 #> [39769] 39768 39769 39770 39771 39772 39773 39774 39775 39776 39777 39778 39779 #> [39781] 39780 39781 39782 39783 39784 39785 39786 39787 39788 39789 39790 39791 #> [39793] 39792 39793 39794 39795 39796 39797 39798 39799 39800 39801 39802 39803 #> [39805] 39804 39805 39806 39807 39808 39809 39810 39811 39812 39813 39814 39815 #> [39817] 39816 39817 39818 39819 39820 39821 39822 39823 39824 39825 39826 39827 #> [39829] 39828 39829 39830 39831 39832 39833 39834 39835 39836 39837 39838 39839 #> [39841] 39840 39841 39842 39843 39844 39845 39846 39847 39848 39849 39850 39851 #> [39853] 39852 39853 39854 39855 39856 39857 39858 39859 39860 39861 39862 39863 #> [39865] 39864 39865 39866 39867 39868 39869 39870 39871 39872 39873 39874 39875 #> [39877] 39876 39877 39878 39879 39880 39881 39882 39883 39884 39885 39886 39887 #> [39889] 39888 39889 39890 39891 39892 39893 39894 39895 39896 39897 39898 39899 #> [39901] 39900 39901 39902 39903 39904 39905 39906 39907 39908 39909 39910 39911 #> [39913] 39912 39913 39914 39915 39916 39917 39918 39919 39920 39921 39922 39923 #> [39925] 39924 39925 39926 39927 39928 39929 39930 39931 39932 39933 39934 39935 #> [39937] 39936 39937 39938 39939 39940 39941 39942 39943 39944 39945 39946 39947 #> [39949] 39948 39949 39950 39951 39952 39953 39954 39955 39956 39957 39958 39959 #> [39961] 39960 39961 39962 39963 39964 39965 39966 39967 39968 39969 39970 39971 #> [39973] 39972 39973 39974 39975 39976 39977 39978 39979 39980 39981 39982 39983 #> [39985] 39984 39985 39986 39987 39988 39989 39990 39991 39992 39993 39994 39995 #> [39997] 39996 39997 39998 39999 40000 40001 40002 40003 40004 40005 40006 40007 #> [40009] 40008 40009 40010 40011 40012 40013 40014 40015 40016 40017 40018 40019 #> [40021] 40020 40021 40022 40023 40024 40025 40026 40027 40028 40029 40030 40031 #> [40033] 40032 40033 40034 40035 40036 40037 40038 40039 40040 40041 40042 40043 #> [40045] 40044 40045 40046 40047 40048 40049 40050 40051 40052 40053 40054 40055 #> [40057] 40056 40057 40058 40059 40060 40061 40062 40063 40064 40065 40066 40067 #> [40069] 40068 40069 40070 40071 40072 40073 40074 40075 40076 40077 40078 40079 #> [40081] 40080 40081 40082 40083 40084 40085 40086 40087 40088 40089 40090 40091 #> [40093] 40092 40093 40094 40095 40096 40097 40098 40099 40100 40101 40102 40103 #> [40105] 40104 40105 40106 40107 40108 40109 40110 40111 40112 40113 40114 40115 #> [40117] 40116 40117 40118 40119 40120 40121 40122 40123 40124 40125 40126 40127 #> [40129] 40128 40129 40130 40131 40132 40133 40134 40135 40136 40137 40138 40139 #> [40141] 40140 40141 40142 40143 40144 40145 40146 40147 40148 40149 40150 40151 #> [40153] 40152 40153 40154 40155 40156 40157 40158 40159 40160 40161 40162 40163 #> [40165] 40164 40165 40166 40167 40168 40169 40170 40171 40172 40173 40174 40175 #> [40177] 40176 40177 40178 40179 40180 40181 40182 40183 40184 40185 40186 40187 #> [40189] 40188 40189 40190 40191 40192 40193 40194 40195 40196 40197 40198 40199 #> [40201] 40200 40201 40202 40203 40204 40205 40206 40207 40208 40209 40210 40211 #> [40213] 40212 40213 40214 40215 40216 40217 40218 40219 40220 40221 40222 40223 #> [40225] 40224 40225 40226 40227 40228 40229 40230 40231 40232 40233 40234 40235 #> [40237] 40236 40237 40238 40239 40240 40241 40242 40243 40244 40245 40246 40247 #> [40249] 40248 40249 40250 40251 40252 40253 40254 40255 40256 40257 40258 40259 #> [40261] 40260 40261 40262 40263 40264 40265 40266 40267 40268 40269 40270 40271 #> [40273] 40272 40273 40274 40275 40276 40277 40278 40279 40280 40281 40282 40283 #> [40285] 40284 40285 40286 40287 40288 40289 40290 40291 40292 40293 40294 40295 #> [40297] 40296 40297 40298 40299 40300 40301 40302 40303 40304 40305 40306 40307 #> [40309] 40308 40309 40310 40311 40312 40313 40314 40315 40316 40317 40318 40319 #> [40321] 40320 40321 40322 40323 40324 40325 40326 40327 40328 40329 40330 40331 #> [40333] 40332 40333 40334 40335 40336 40337 40338 40339 40340 40341 40342 40343 #> [40345] 40344 40345 40346 40347 40348 40349 40350 40351 40352 40353 40354 40355 #> [40357] 40356 40357 40358 40359 40360 40361 40362 40363 40364 40365 40366 40367 #> [40369] 40368 40369 40370 40371 40372 40373 40374 40375 40376 40377 40378 40379 #> [40381] 40380 40381 40382 40383 40384 40385 40386 40387 40388 40389 40390 40391 #> [40393] 40392 40393 40394 40395 40396 40397 40398 40399 40400 40401 40402 40403 #> [40405] 40404 40405 40406 40407 40408 40409 40410 40411 40412 40413 40414 40415 #> [40417] 40416 40417 40418 40419 40420 40421 40422 40423 40424 40425 40426 40427 #> [40429] 40428 40429 40430 40431 40432 40433 40434 40435 40436 40437 40438 40439 #> [40441] 40440 40441 40442 40443 40444 40445 40446 40447 40448 40449 40450 40451 #> [40453] 40452 40453 40454 40455 40456 40457 40458 40459 40460 40461 40462 40463 #> [40465] 40464 40465 40466 40467 40468 40469 40470 40471 40472 40473 40474 40475 #> [40477] 40476 40477 40478 40479 40480 40481 40482 40483 40484 40485 40486 40487 #> [40489] 40488 40489 40490 40491 40492 40493 40494 40495 40496 40497 40498 40499 #> [40501] 40500 40501 40502 40503 40504 40505 40506 40507 40508 40509 40510 40511 #> [40513] 40512 40513 40514 40515 40516 40517 40518 40519 40520 40521 40522 40523 #> [40525] 40524 40525 40526 40527 40528 40529 40530 40531 40532 40533 40534 40535 #> [40537] 40536 40537 40538 40539 40540 40541 40542 40543 40544 40545 40546 40547 #> [40549] 40548 40549 40550 40551 40552 40553 40554 40555 40556 40557 40558 40559 #> [40561] 40560 40561 40562 40563 40564 40565 40566 40567 40568 40569 40570 40571 #> [40573] 40572 40573 40574 40575 40576 40577 40578 40579 40580 40581 40582 40583 #> [40585] 40584 40585 40586 40587 40588 40589 40590 40591 40592 40593 40594 40595 #> [40597] 40596 40597 40598 40599 40600 40601 40602 40603 40604 40605 40606 40607 #> [40609] 40608 40609 40610 40611 40612 40613 40614 40615 40616 40617 40618 40619 #> [40621] 40620 40621 40622 40623 40624 40625 40626 40627 40628 40629 40630 40631 #> [40633] 40632 40633 40634 40635 40636 40637 40638 40639 40640 40641 40642 40643 #> [40645] 40644 40645 40646 40647 40648 40649 40650 40651 40652 40653 40654 40655 #> [40657] 40656 40657 40658 40659 40660 40661 40662 40663 40664 40665 40666 40667 #> [40669] 40668 40669 40670 40671 40672 40673 40674 40675 40676 40677 40678 40679 #> [40681] 40680 40681 40682 40683 40684 40685 40686 40687 40688 40689 40690 40691 #> [40693] 40692 40693 40694 40695 40696 40697 40698 40699 40700 40701 40702 40703 #> [40705] 40704 40705 40706 40707 40708 40709 40710 40711 40712 40713 40714 40715 #> [40717] 40716 40717 40718 40719 40720 40721 40722 40723 40724 40725 40726 40727 #> [40729] 40728 40729 40730 40731 40732 40733 40734 40735 40736 40737 40738 40739 #> [40741] 40740 40741 40742 40743 40744 40745 40746 40747 40748 40749 40750 40751 #> [40753] 40752 40753 40754 40755 40756 40757 40758 40759 40760 40761 40762 40763 #> [40765] 40764 40765 40766 40767 40768 40769 40770 40771 40772 40773 40774 40775 #> [40777] 40776 40777 40778 40779 40780 40781 40782 40783 40784 40785 40786 40787 #> [40789] 40788 40789 40790 40791 40792 40793 40794 40795 40796 40797 40798 40799 #> [40801] 40800 40801 40802 40803 40804 40805 40806 40807 40808 40809 40810 40811 #> [40813] 40812 40813 40814 40815 40816 40817 40818 40819 40820 40821 40822 40823 #> [40825] 40824 40825 40826 40827 40828 40829 40830 40831 40832 40833 40834 40835 #> [40837] 40836 40837 40838 40839 40840 40841 40842 40843 40844 40845 40846 40847 #> [40849] 40848 40849 40850 40851 40852 40853 40854 40855 40856 40857 40858 40859 #> [40861] 40860 40861 40862 40863 40864 40865 40866 40867 40868 40869 40870 40871 #> [40873] 40872 40873 40874 40875 40876 40877 40878 40879 40880 40881 40882 40883 #> [40885] 40884 40885 40886 40887 40888 40889 40890 40891 40892 40893 40894 40895 #> [40897] 40896 40897 40898 40899 40900 40901 40902 40903 40904 40905 40906 40907 #> [40909] 40908 40909 40910 40911 40912 40913 40914 40915 40916 40917 40918 40919 #> [40921] 40920 40921 40922 40923 40924 40925 40926 40927 40928 40929 40930 40931 #> [40933] 40932 40933 40934 40935 40936 40937 40938 40939 40940 40941 40942 40943 #> [40945] 40944 40945 40946 40947 40948 40949 40950 40951 40952 40953 40954 40955 #> [40957] 40956 40957 40958 40959 40960 40961 40962 40963 40964 40965 40966 40967 #> [40969] 40968 40969 40970 40971 40972 40973 40974 40975 40976 40977 40978 40979 #> [40981] 40980 40981 40982 40983 40984 40985 40986 40987 40988 40989 40990 40991 #> [40993] 40992 40993 40994 40995 40996 40997 40998 40999 41000 41001 41002 41003 #> [41005] 41004 41005 41006 41007 41008 41009 41010 41011 41012 41013 41014 41015 #> [41017] 41016 41017 41018 41019 41020 41021 41022 41023 41024 41025 41026 41027 #> [41029] 41028 41029 41030 41031 41032 41033 41034 41035 41036 41037 41038 41039 #> [41041] 41040 41041 41042 41043 41044 41045 41046 41047 41048 41049 41050 41051 #> [41053] 41052 41053 41054 41055 41056 41057 41058 41059 41060 41061 41062 41063 #> [41065] 41064 41065 41066 41067 41068 41069 41070 41071 41072 41073 41074 41075 #> [41077] 41076 41077 41078 41079 41080 41081 41082 41083 41084 41085 41086 41087 #> [41089] 41088 41089 41090 41091 41092 41093 41094 41095 41096 41097 41098 41099 #> [41101] 41100 41101 41102 41103 41104 41105 41106 41107 41108 41109 41110 41111 #> [41113] 41112 41113 41114 41115 41116 41117 41118 41119 41120 41121 41122 41123 #> [41125] 41124 41125 41126 41127 41128 41129 41130 41131 41132 41133 41134 41135 #> [41137] 41136 41137 41138 41139 41140 41141 41142 41143 41144 41145 41146 41147 #> [41149] 41148 41149 41150 41151 41152 41153 41154 41155 41156 41157 41158 41159 #> [41161] 41160 41161 41162 41163 41164 41165 41166 41167 41168 41169 41170 41171 #> [41173] 41172 41173 41174 41175 41176 41177 41178 41179 41180 41181 41182 41183 #> [41185] 41184 41185 41186 41187 41188 41189 41190 41191 41192 41193 41194 41195 #> [41197] 41196 41197 41198 41199 41200 41201 41202 41203 41204 41205 41206 41207 #> [41209] 41208 41209 41210 41211 41212 41213 41214 41215 41216 41217 41218 41219 #> [41221] 41220 41221 41222 41223 41224 41225 41226 41227 41228 41229 41230 41231 #> [41233] 41232 41233 41234 41235 41236 41237 41238 41239 41240 41241 41242 41243 #> [41245] 41244 41245 41246 41247 41248 41249 41250 41251 41252 41253 41254 41255 #> [41257] 41256 41257 41258 41259 41260 41261 41262 41263 41264 41265 41266 41267 #> [41269] 41268 41269 41270 41271 41272 41273 41274 41275 41276 41277 41278 41279 #> [41281] 41280 41281 41282 41283 41284 41285 41286 41287 41288 41289 41290 41291 #> [41293] 41292 41293 41294 41295 41296 41297 41298 41299 41300 41301 41302 41303 #> [41305] 41304 41305 41306 41307 41308 41309 41310 41311 41312 41313 41314 41315 #> [41317] 41316 41317 41318 41319 41320 41321 41322 41323 41324 41325 41326 41327 #> [41329] 41328 41329 41330 41331 41332 41333 41334 41335 41336 41337 41338 41339 #> [41341] 41340 41341 41342 41343 41344 41345 41346 41347 41348 41349 41350 41351 #> [41353] 41352 41353 41354 41355 41356 41357 41358 41359 41360 41361 41362 41363 #> [41365] 41364 41365 41366 41367 41368 41369 41370 41371 41372 41373 41374 41375 #> [41377] 41376 41377 41378 41379 41380 41381 41382 41383 41384 41385 41386 41387 #> [41389] 41388 41389 41390 41391 41392 41393 41394 41395 41396 41397 41398 41399 #> [41401] 41400 41401 41402 41403 41404 41405 41406 41407 41408 41409 41410 41411 #> [41413] 41412 41413 41414 41415 41416 41417 41418 41419 41420 41421 41422 41423 #> [41425] 41424 41425 41426 41427 41428 41429 41430 41431 41432 41433 41434 41435 #> [41437] 41436 41437 41438 41439 41440 41441 41442 41443 41444 41445 41446 41447 #> [41449] 41448 41449 41450 41451 41452 41453 41454 41455 41456 41457 41458 41459 #> [41461] 41460 41461 41462 41463 41464 41465 41466 41467 41468 41469 41470 41471 #> [41473] 41472 41473 41474 41475 41476 41477 41478 41479 41480 41481 41482 41483 #> [41485] 41484 41485 41486 41487 41488 41489 41490 41491 41492 41493 41494 41495 #> [41497] 41496 41497 41498 41499 41500 41501 41502 41503 41504 41505 41506 41507 #> [41509] 41508 41509 41510 41511 41512 41513 41514 41515 41516 41517 41518 41519 #> [41521] 41520 41521 41522 41523 41524 41525 41526 41527 41528 41529 41530 41531 #> [41533] 41532 41533 41534 41535 41536 41537 41538 41539 41540 41541 41542 41543 #> [41545] 41544 41545 41546 41547 41548 41549 41550 41551 41552 41553 41554 41555 #> [41557] 41556 41557 41558 41559 41560 41561 41562 41563 41564 41565 41566 41567 #> [41569] 41568 41569 41570 41571 41572 41573 41574 41575 41576 41577 41578 41579 #> [41581] 41580 41581 41582 41583 41584 41585 41586 41587 41588 41589 41590 41591 #> [41593] 41592 41593 41594 41595 41596 41597 41598 41599 41600 41601 41602 41603 #> [41605] 41604 41605 41606 41607 41608 41609 41610 41611 41612 41613 41614 41615 #> [41617] 41616 41617 41618 41619 41620 41621 41622 41623 41624 41625 41626 41627 #> [41629] 41628 41629 41630 41631 41632 41633 41634 41635 41636 41637 41638 41639 #> [41641] 41640 41641 41642 41643 41644 41645 41646 41647 41648 41649 41650 41651 #> [41653] 41652 41653 41654 41655 41656 41657 41658 41659 41660 41661 41662 41663 #> [41665] 41664 41665 41666 41667 41668 41669 41670 41671 41672 41673 41674 41675 #> [41677] 41676 41677 41678 41679 41680 41681 41682 41683 41684 41685 41686 41687 #> [41689] 41688 41689 41690 41691 41692 41693 41694 41695 41696 41697 41698 41699 #> [41701] 41700 41701 41702 41703 41704 41705 41706 41707 41708 41709 41710 41711 #> [41713] 41712 41713 41714 41715 41716 41717 41718 41719 41720 41721 41722 41723 #> [41725] 41724 41725 41726 41727 41728 41729 41730 41731 41732 41733 41734 41735 #> [41737] 41736 41737 41738 41739 41740 41741 41742 41743 41744 41745 41746 41747 #> [41749] 41748 41749 41750 41751 41752 41753 41754 41755 41756 41757 41758 41759 #> [41761] 41760 41761 41762 41763 41764 41765 41766 41767 41768 41769 41770 41771 #> [41773] 41772 41773 41774 41775 41776 41777 41778 41779 41780 41781 41782 41783 #> [41785] 41784 41785 41786 41787 41788 41789 41790 41791 41792 41793 41794 41795 #> [41797] 41796 41797 41798 41799 41800 41801 41802 41803 41804 41805 41806 41807 #> [41809] 41808 41809 41810 41811 41812 41813 41814 41815 41816 41817 41818 41819 #> [41821] 41820 41821 41822 41823 41824 41825 41826 41827 41828 41829 41830 41831 #> [41833] 41832 41833 41834 41835 41836 41837 41838 41839 41840 41841 41842 41843 #> [41845] 41844 41845 41846 41847 41848 41849 41850 41851 41852 41853 41854 41855 #> [41857] 41856 41857 41858 41859 41860 41861 41862 41863 41864 41865 41866 41867 #> [41869] 41868 41869 41870 41871 41872 41873 41874 41875 41876 41877 41878 41879 #> [41881] 41880 41881 41882 41883 41884 41885 41886 41887 41888 41889 41890 41891 #> [41893] 41892 41893 41894 41895 41896 41897 41898 41899 41900 41901 41902 41903 #> [41905] 41904 41905 41906 41907 41908 41909 41910 41911 41912 41913 41914 41915 #> [41917] 41916 41917 41918 41919 41920 41921 41922 41923 41924 41925 41926 41927 #> [41929] 41928 41929 41930 41931 41932 41933 41934 41935 41936 41937 41938 41939 #> [41941] 41940 41941 41942 41943 41944 41945 41946 41947 41948 41949 41950 41951 #> [41953] 41952 41953 41954 41955 41956 41957 41958 41959 41960 41961 41962 41963 #> [41965] 41964 41965 41966 41967 41968 41969 41970 41971 41972 41973 41974 41975 #> [41977] 41976 41977 41978 41979 41980 41981 41982 41983 41984 41985 41986 41987 #> [41989] 41988 41989 41990 41991 41992 41993 41994 41995 41996 41997 41998 41999 #> [42001] 42000 42001 42002 42003 42004 42005 42006 42007 42008 42009 42010 42011 #> [42013] 42012 42013 42014 42015 42016 42017 42018 42019 42020 42021 42022 42023 #> [42025] 42024 42025 42026 42027 42028 42029 42030 42031 42032 42033 42034 42035 #> [42037] 42036 42037 42038 42039 42040 42041 42042 42043 42044 42045 42046 42047 #> [42049] 42048 42049 42050 42051 42052 42053 42054 42055 42056 42057 42058 42059 #> [42061] 42060 42061 42062 42063 42064 42065 42066 42067 42068 42069 42070 42071 #> [42073] 42072 42073 42074 42075 42076 42077 42078 42079 42080 42081 42082 42083 #> [42085] 42084 42085 42086 42087 42088 42089 42090 42091 42092 42093 42094 42095 #> [42097] 42096 42097 42098 42099 42100 42101 42102 42103 42104 42105 42106 42107 #> [42109] 42108 42109 42110 42111 42112 42113 42114 42115 42116 42117 42118 42119 #> [42121] 42120 42121 42122 42123 42124 42125 42126 42127 42128 42129 42130 42131 #> [42133] 42132 42133 42134 42135 42136 42137 42138 42139 42140 42141 42142 42143 #> [42145] 42144 42145 42146 42147 42148 42149 42150 42151 42152 42153 42154 42155 #> [42157] 42156 42157 42158 42159 42160 42161 42162 42163 42164 42165 42166 42167 #> [42169] 42168 42169 42170 42171 42172 42173 42174 42175 42176 42177 42178 42179 #> [42181] 42180 42181 42182 42183 42184 42185 42186 42187 42188 42189 42190 42191 #> [42193] 42192 42193 42194 42195 42196 42197 42198 42199 42200 42201 42202 42203 #> [42205] 42204 42205 42206 42207 42208 42209 42210 42211 42212 42213 42214 42215 #> [42217] 42216 42217 42218 42219 42220 42221 42222 42223 42224 42225 42226 42227 #> [42229] 42228 42229 42230 42231 42232 42233 42234 42235 42236 42237 42238 42239 #> [42241] 42240 42241 42242 42243 42244 42245 42246 42247 42248 42249 42250 42251 #> [42253] 42252 42253 42254 42255 42256 42257 42258 42259 42260 42261 42262 42263 #> [42265] 42264 42265 42266 42267 42268 42269 42270 42271 42272 42273 42274 42275 #> [42277] 42276 42277 42278 42279 42280 42281 42282 42283 42284 42285 42286 42287 #> [42289] 42288 42289 42290 42291 42292 42293 42294 42295 42296 42297 42298 42299 #> [42301] 42300 42301 42302 42303 42304 42305 42306 42307 42308 42309 42310 42311 #> [42313] 42312 42313 42314 42315 42316 42317 42318 42319 42320 42321 42322 42323 #> [42325] 42324 42325 42326 42327 42328 42329 42330 42331 42332 42333 42334 42335 #> [42337] 42336 42337 42338 42339 42340 42341 42342 42343 42344 42345 42346 42347 #> [42349] 42348 42349 42350 42351 42352 42353 42354 42355 42356 42357 42358 42359 #> [42361] 42360 42361 42362 42363 42364 42365 42366 42367 42368 42369 42370 42371 #> [42373] 42372 42373 42374 42375 42376 42377 42378 42379 42380 42381 42382 42383 #> [42385] 42384 42385 42386 42387 42388 42389 42390 42391 42392 42393 42394 42395 #> [42397] 42396 42397 42398 42399 42400 42401 42402 42403 42404 42405 42406 42407 #> [42409] 42408 42409 42410 42411 42412 42413 42414 42415 42416 42417 42418 42419 #> [42421] 42420 42421 42422 42423 42424 42425 42426 42427 42428 42429 42430 42431 #> [42433] 42432 42433 42434 42435 42436 42437 42438 42439 42440 42441 42442 42443 #> [42445] 42444 42445 42446 42447 42448 42449 42450 42451 42452 42453 42454 42455 #> [42457] 42456 42457 42458 42459 42460 42461 42462 42463 42464 42465 42466 42467 #> [42469] 42468 42469 42470 42471 42472 42473 42474 42475 42476 42477 42478 42479 #> [42481] 42480 42481 42482 42483 42484 42485 42486 42487 42488 42489 42490 42491 #> [42493] 42492 42493 42494 42495 42496 42497 42498 42499 42500 42501 42502 42503 #> [42505] 42504 42505 42506 42507 42508 42509 42510 42511 42512 42513 42514 42515 #> [42517] 42516 42517 42518 42519 42520 42521 42522 42523 42524 42525 42526 42527 #> [42529] 42528 42529 42530 42531 42532 42533 42534 42535 42536 42537 42538 42539 #> [42541] 42540 42541 42542 42543 42544 42545 42546 42547 42548 42549 42550 42551 #> [42553] 42552 42553 42554 42555 42556 42557 42558 42559 42560 42561 42562 42563 #> [42565] 42564 42565 42566 42567 42568 42569 42570 42571 42572 42573 42574 42575 #> [42577] 42576 42577 42578 42579 42580 42581 42582 42583 42584 42585 42586 42587 #> [42589] 42588 42589 42590 42591 42592 42593 42594 42595 42596 42597 42598 42599 #> [42601] 42600 42601 42602 42603 42604 42605 42606 42607 42608 42609 42610 42611 #> [42613] 42612 42613 42614 42615 42616 42617 42618 42619 42620 42621 42622 42623 #> [42625] 42624 42625 42626 42627 42628 42629 42630 42631 42632 42633 42634 42635 #> [42637] 42636 42637 42638 42639 42640 42641 42642 42643 42644 42645 42646 42647 #> [42649] 42648 42649 42650 42651 42652 42653 42654 42655 42656 42657 42658 42659 #> [42661] 42660 42661 42662 42663 42664 42665 42666 42667 42668 42669 42670 42671 #> [42673] 42672 42673 42674 42675 42676 42677 42678 42679 42680 42681 42682 42683 #> [42685] 42684 42685 42686 42687 42688 42689 42690 42691 42692 42693 42694 42695 #> [42697] 42696 42697 42698 42699 42700 42701 42702 42703 42704 42705 42706 42707 #> [42709] 42708 42709 42710 42711 42712 42713 42714 42715 42716 42717 42718 42719 #> [42721] 42720 42721 42722 42723 42724 42725 42726 42727 42728 42729 42730 42731 #> [42733] 42732 42733 42734 42735 42736 42737 42738 42739 42740 42741 42742 42743 #> [42745] 42744 42745 42746 42747 42748 42749 42750 42751 42752 42753 42754 42755 #> [42757] 42756 42757 42758 42759 42760 42761 42762 42763 42764 42765 42766 42767 #> [42769] 42768 42769 42770 42771 42772 42773 42774 42775 42776 42777 42778 42779 #> [42781] 42780 42781 42782 42783 42784 42785 42786 42787 42788 42789 42790 42791 #> [42793] 42792 42793 42794 42795 42796 42797 42798 42799 42800 42801 42802 42803 #> [42805] 42804 42805 42806 42807 42808 42809 42810 42811 42812 42813 42814 42815 #> [42817] 42816 42817 42818 42819 42820 42821 42822 42823 42824 42825 42826 42827 #> [42829] 42828 42829 42830 42831 42832 42833 42834 42835 42836 42837 42838 42839 #> [42841] 42840 42841 42842 42843 42844 42845 42846 42847 42848 42849 42850 42851 #> [42853] 42852 42853 42854 42855 42856 42857 42858 42859 42860 42861 42862 42863 #> [42865] 42864 42865 42866 42867 42868 42869 42870 42871 42872 42873 42874 42875 #> [42877] 42876 42877 42878 42879 42880 42881 42882 42883 42884 42885 42886 42887 #> [42889] 42888 42889 42890 42891 42892 42893 42894 42895 42896 42897 42898 42899 #> [42901] 42900 42901 42902 42903 42904 42905 42906 42907 42908 42909 42910 42911 #> [42913] 42912 42913 42914 42915 42916 42917 42918 42919 42920 42921 42922 42923 #> [42925] 42924 42925 42926 42927 42928 42929 42930 42931 42932 42933 42934 42935 #> [42937] 42936 42937 42938 42939 42940 42941 42942 42943 42944 42945 42946 42947 #> [42949] 42948 42949 42950 42951 42952 42953 42954 42955 42956 42957 42958 42959 #> [42961] 42960 42961 42962 42963 42964 42965 42966 42967 42968 42969 42970 42971 #> [42973] 42972 42973 42974 42975 42976 42977 42978 42979 42980 42981 42982 42983 #> [42985] 42984 42985 42986 42987 42988 42989 42990 42991 42992 42993 42994 42995 #> [42997] 42996 42997 42998 42999 43000 43001 43002 43003 43004 43005 43006 43007 #> [43009] 43008 43009 43010 43011 43012 43013 43014 43015 43016 43017 43018 43019 #> [43021] 43020 43021 43022 43023 43024 43025 43026 43027 43028 43029 43030 43031 #> [43033] 43032 43033 43034 43035 43036 43037 43038 43039 43040 43041 43042 43043 #> [43045] 43044 43045 43046 43047 43048 43049 43050 43051 43052 43053 43054 43055 #> [43057] 43056 43057 43058 43059 43060 43061 43062 43063 43064 43065 43066 43067 #> [43069] 43068 43069 43070 43071 43072 43073 43074 43075 43076 43077 43078 43079 #> [43081] 43080 43081 43082 43083 43084 43085 43086 43087 43088 43089 43090 43091 #> [43093] 43092 43093 43094 43095 43096 43097 43098 43099 43100 43101 43102 43103 #> [43105] 43104 43105 43106 43107 43108 43109 43110 43111 43112 43113 43114 43115 #> [43117] 43116 43117 43118 43119 43120 43121 43122 43123 43124 43125 43126 43127 #> [43129] 43128 43129 43130 43131 43132 43133 43134 43135 43136 43137 43138 43139 #> [43141] 43140 43141 43142 43143 43144 43145 43146 43147 43148 43149 43150 43151 #> [43153] 43152 43153 43154 43155 43156 43157 43158 43159 43160 43161 43162 43163 #> [43165] 43164 43165 43166 43167 43168 43169 43170 43171 43172 43173 43174 43175 #> [43177] 43176 43177 43178 43179 43180 43181 43182 43183 43184 43185 43186 43187 #> [43189] 43188 43189 43190 43191 43192 43193 43194 43195 43196 43197 43198 43199 #> [43201] 43200 43201 43202 43203 43204 43205 43206 43207 43208 43209 43210 43211 #> [43213] 43212 43213 43214 43215 43216 43217 43218 43219 43220 43221 43222 43223 #> [43225] 43224 43225 43226 43227 43228 43229 43230 43231 43232 43233 43234 43235 #> [43237] 43236 43237 43238 43239 43240 43241 43242 43243 43244 43245 43246 43247 #> [43249] 43248 43249 43250 43251 43252 43253 43254 43255 43256 43257 43258 43259 #> [43261] 43260 43261 43262 43263 43264 43265 43266 43267 43268 43269 43270 43271 #> [43273] 43272 43273 43274 43275 43276 43277 43278 43279 43280 43281 43282 43283 #> [43285] 43284 43285 43286 43287 43288 43289 43290 43291 43292 43293 43294 43295 #> [43297] 43296 43297 43298 43299 43300 43301 43302 43303 43304 43305 43306 43307 #> [43309] 43308 43309 43310 43311 43312 43313 43314 43315 43316 43317 43318 43319 #> [43321] 43320 43321 43322 43323 43324 43325 43326 43327 43328 43329 43330 43331 #> [43333] 43332 43333 43334 43335 43336 43337 43338 43339 43340 43341 43342 43343 #> [43345] 43344 43345 43346 43347 43348 43349 43350 43351 43352 43353 43354 43355 #> [43357] 43356 43357 43358 43359 43360 43361 43362 43363 43364 43365 43366 43367 #> [43369] 43368 43369 43370 43371 43372 43373 43374 43375 43376 43377 43378 43379 #> [43381] 43380 43381 43382 43383 43384 43385 43386 43387 43388 43389 43390 43391 #> [43393] 43392 43393 43394 43395 43396 43397 43398 43399 43400 43401 43402 43403 #> [43405] 43404 43405 43406 43407 43408 43409 43410 43411 43412 43413 43414 43415 #> [43417] 43416 43417 43418 43419 43420 43421 43422 43423 43424 43425 43426 43427 #> [43429] 43428 43429 43430 43431 43432 43433 43434 43435 43436 43437 43438 43439 #> [43441] 43440 43441 43442 43443 43444 43445 43446 43447 43448 43449 43450 43451 #> [43453] 43452 43453 43454 43455 43456 43457 43458 43459 43460 43461 43462 43463 #> [43465] 43464 43465 43466 43467 43468 43469 43470 43471 43472 43473 43474 43475 #> [43477] 43476 43477 43478 43479 43480 43481 43482 43483 43484 43485 43486 43487 #> [43489] 43488 43489 43490 43491 43492 43493 43494 43495 43496 43497 43498 43499 #> [43501] 43500 43501 43502 43503 43504 43505 43506 43507 43508 43509 43510 43511 #> [43513] 43512 43513 43514 43515 43516 43517 43518 43519 43520 43521 43522 43523 #> [43525] 43524 43525 43526 43527 43528 43529 43530 43531 43532 43533 43534 43535 #> [43537] 43536 43537 43538 43539 43540 43541 43542 43543 43544 43545 43546 43547 #> [43549] 43548 43549 43550 43551 43552 43553 43554 43555 43556 43557 43558 43559 #> [43561] 43560 43561 43562 43563 43564 43565 43566 43567 43568 43569 43570 43571 #> [43573] 43572 43573 43574 43575 43576 43577 43578 43579 43580 43581 43582 43583 #> [43585] 43584 43585 43586 43587 43588 43589 43590 43591 43592 43593 43594 43595 #> [43597] 43596 43597 43598 43599 43600 43601 43602 43603 43604 43605 43606 43607 #> [43609] 43608 43609 43610 43611 43612 43613 43614 43615 43616 43617 43618 43619 #> [43621] 43620 43621 43622 43623 43624 43625 43626 43627 43628 43629 43630 43631 #> [43633] 43632 43633 43634 43635 43636 43637 43638 43639 43640 43641 43642 43643 #> [43645] 43644 43645 43646 43647 43648 43649 43650 43651 43652 43653 43654 43655 #> [43657] 43656 43657 43658 43659 43660 43661 43662 43663 43664 43665 43666 43667 #> [43669] 43668 43669 43670 43671 43672 43673 43674 43675 43676 43677 43678 43679 #> [43681] 43680 43681 43682 43683 43684 43685 43686 43687 43688 43689 43690 43691 #> [43693] 43692 43693 43694 43695 43696 43697 43698 43699 43700 43701 43702 43703 #> [43705] 43704 43705 43706 43707 43708 43709 43710 43711 43712 43713 43714 43715 #> [43717] 43716 43717 43718 43719 43720 43721 43722 43723 43724 43725 43726 43727 #> [43729] 43728 43729 43730 43731 43732 43733 43734 43735 43736 43737 43738 43739 #> [43741] 43740 43741 43742 43743 43744 43745 43746 43747 43748 43749 43750 43751 #> [43753] 43752 43753 43754 43755 43756 43757 43758 43759 43760 43761 43762 43763 #> [43765] 43764 43765 43766 43767 43768 43769 43770 43771 43772 43773 43774 43775 #> [43777] 43776 43777 43778 43779 43780 43781 43782 43783 43784 43785 43786 43787 #> [43789] 43788 43789 43790 43791 43792 43793 43794 43795 43796 43797 43798 43799 #> [43801] 43800 43801 43802 43803 43804 43805 43806 43807 43808 43809 43810 43811 #> [43813] 43812 43813 43814 43815 43816 43817 43818 43819 43820 43821 43822 43823 #> [43825] 43824 43825 43826 43827 43828 43829 43830 43831 43832 43833 43834 43835 #> [43837] 43836 43837 43838 43839 43840 43841 43842 43843 43844 43845 43846 43847 #> [43849] 43848 43849 43850 43851 43852 43853 43854 43855 43856 43857 43858 43859 #> [43861] 43860 43861 43862 43863 43864 43865 43866 43867 43868 43869 43870 43871 #> [43873] 43872 43873 43874 43875 43876 43877 43878 43879 43880 43881 43882 43883 #> [43885] 43884 43885 43886 43887 43888 43889 43890 43891 43892 43893 43894 43895 #> [43897] 43896 43897 43898 43899 43900 43901 43902 43903 43904 43905 43906 43907 #> [43909] 43908 43909 43910 43911 43912 43913 43914 43915 43916 43917 43918 43919 #> [43921] 43920 43921 43922 43923 43924 43925 43926 43927 43928 43929 43930 43931 #> [43933] 43932 43933 43934 43935 43936 43937 43938 43939 43940 43941 43942 43943 #> [43945] 43944 43945 43946 43947 43948 43949 43950 43951 43952 43953 43954 43955 #> [43957] 43956 43957 43958 43959 43960 43961 43962 43963 43964 43965 43966 43967 #> [43969] 43968 43969 43970 43971 43972 43973 43974 43975 43976 43977 43978 43979 #> [43981] 43980 43981 43982 43983 43984 43985 43986 43987 43988 43989 43990 43991 #> [43993] 43992 43993 43994 43995 43996 43997 43998 43999 44000 44001 44002 44003 #> [44005] 44004 44005 44006 44007 44008 44009 44010 44011 44012 44013 44014 44015 #> [44017] 44016 44017 44018 44019 44020 44021 44022 44023 44024 44025 44026 44027 #> [44029] 44028 44029 44030 44031 44032 44033 44034 44035 44036 44037 44038 44039 #> [44041] 44040 44041 44042 44043 44044 44045 44046 44047 44048 44049 44050 44051 #> [44053] 44052 44053 44054 44055 44056 44057 44058 44059 44060 44061 44062 44063 #> [44065] 44064 44065 44066 44067 44068 44069 44070 44071 44072 44073 44074 44075 #> [44077] 44076 44077 44078 44079 44080 44081 44082 44083 44084 44085 44086 44087 #> [44089] 44088 44089 44090 44091 44092 44093 44094 44095 44096 44097 44098 44099 #> [44101] 44100 44101 44102 44103 44104 44105 44106 44107 44108 44109 44110 44111 #> [44113] 44112 44113 44114 44115 44116 44117 44118 44119 44120 44121 44122 44123 #> [44125] 44124 44125 44126 44127 44128 44129 44130 44131 44132 44133 44134 44135 #> [44137] 44136 44137 44138 44139 44140 44141 44142 44143 44144 44145 44146 44147 #> [44149] 44148 44149 44150 44151 44152 44153 44154 44155 44156 44157 44158 44159 #> [44161] 44160 44161 44162 44163 44164 44165 44166 44167 44168 44169 44170 44171 #> [44173] 44172 44173 44174 44175 44176 44177 44178 44179 44180 44181 44182 44183 #> [44185] 44184 44185 44186 44187 44188 44189 44190 44191 44192 44193 44194 44195 #> [44197] 44196 44197 44198 44199 44200 44201 44202 44203 44204 44205 44206 44207 #> [44209] 44208 44209 44210 44211 44212 44213 44214 44215 44216 44217 44218 44219 #> [44221] 44220 44221 44222 44223 44224 44225 44226 44227 44228 44229 44230 44231 #> [44233] 44232 44233 44234 44235 44236 44237 44238 44239 44240 44241 44242 44243 #> [44245] 44244 44245 44246 44247 44248 44249 44250 44251 44252 44253 44254 44255 #> [44257] 44256 44257 44258 44259 44260 44261 44262 44263 44264 44265 44266 44267 #> [44269] 44268 44269 44270 44271 44272 44273 44274 44275 44276 44277 44278 44279 #> [44281] 44280 44281 44282 44283 44284 44285 44286 44287 44288 44289 44290 44291 #> [44293] 44292 44293 44294 44295 44296 44297 44298 44299 44300 44301 44302 44303 #> [44305] 44304 44305 44306 44307 44308 44309 44310 44311 44312 44313 44314 44315 #> [44317] 44316 44317 44318 44319 44320 44321 44322 44323 44324 44325 44326 44327 #> [44329] 44328 44329 44330 44331 44332 44333 44334 44335 44336 44337 44338 44339 #> [44341] 44340 44341 44342 44343 44344 44345 44346 44347 44348 44349 44350 44351 #> [44353] 44352 44353 44354 44355 44356 44357 44358 44359 44360 44361 44362 44363 #> [44365] 44364 44365 44366 44367 44368 44369 44370 44371 44372 44373 44374 44375 #> [44377] 44376 44377 44378 44379 44380 44381 44382 44383 44384 44385 44386 44387 #> [44389] 44388 44389 44390 44391 44392 44393 44394 44395 44396 44397 44398 44399 #> [44401] 44400 44401 44402 44403 44404 44405 44406 44407 44408 44409 44410 44411 #> [44413] 44412 44413 44414 44415 44416 44417 44418 44419 44420 44421 44422 44423 #> [44425] 44424 44425 44426 44427 44428 44429 44430 44431 44432 44433 44434 44435 #> [44437] 44436 44437 44438 44439 44440 44441 44442 44443 44444 44445 44446 44447 #> [44449] 44448 44449 44450 44451 44452 44453 44454 44455 44456 44457 44458 44459 #> [44461] 44460 44461 44462 44463 44464 44465 44466 44467 44468 44469 44470 44471 #> [44473] 44472 44473 44474 44475 44476 44477 44478 44479 44480 44481 44482 44483 #> [44485] 44484 44485 44486 44487 44488 44489 44490 44491 44492 44493 44494 44495 #> [44497] 44496 44497 44498 44499 44500 44501 44502 44503 44504 44505 44506 44507 #> [44509] 44508 44509 44510 44511 44512 44513 44514 44515 44516 44517 44518 44519 #> [44521] 44520 44521 44522 44523 44524 44525 44526 44527 44528 44529 44530 44531 #> [44533] 44532 44533 44534 44535 44536 44537 44538 44539 44540 44541 44542 44543 #> [44545] 44544 44545 44546 44547 44548 44549 44550 44551 44552 44553 44554 44555 #> [44557] 44556 44557 44558 44559 44560 44561 44562 44563 44564 44565 44566 44567 #> [44569] 44568 44569 44570 44571 44572 44573 44574 44575 44576 44577 44578 44579 #> [44581] 44580 44581 44582 44583 44584 44585 44586 44587 44588 44589 44590 44591 #> [44593] 44592 44593 44594 44595 44596 44597 44598 44599 44600 44601 44602 44603 #> [44605] 44604 44605 44606 44607 44608 44609 44610 44611 44612 44613 44614 44615 #> [44617] 44616 44617 44618 44619 44620 44621 44622 44623 44624 44625 44626 44627 #> [44629] 44628 44629 44630 44631 44632 44633 44634 44635 44636 44637 44638 44639 #> [44641] 44640 44641 44642 44643 44644 44645 44646 44647 44648 44649 44650 44651 #> [44653] 44652 44653 44654 44655 44656 44657 44658 44659 44660 44661 44662 44663 #> [44665] 44664 44665 44666 44667 44668 44669 44670 44671 44672 44673 44674 44675 #> [44677] 44676 44677 44678 44679 44680 44681 44682 44683 44684 44685 44686 44687 #> [44689] 44688 44689 44690 44691 44692 44693 44694 44695 44696 44697 44698 44699 #> [44701] 44700 44701 44702 44703 44704 44705 44706 44707 44708 44709 44710 44711 #> [44713] 44712 44713 44714 44715 44716 44717 44718 44719 44720 44721 44722 44723 #> [44725] 44724 44725 44726 44727 44728 44729 44730 44731 44732 44733 44734 44735 #> [44737] 44736 44737 44738 44739 44740 44741 44742 44743 44744 44745 44746 44747 #> [44749] 44748 44749 44750 44751 44752 44753 44754 44755 44756 44757 44758 44759 #> [44761] 44760 44761 44762 44763 44764 44765 44766 44767 44768 44769 44770 44771 #> [44773] 44772 44773 44774 44775 44776 44777 44778 44779 44780 44781 44782 44783 #> [44785] 44784 44785 44786 44787 44788 44789 44790 44791 44792 44793 44794 44795 #> [44797] 44796 44797 44798 44799 44800 44801 44802 44803 44804 44805 44806 44807 #> [44809] 44808 44809 44810 44811 44812 44813 44814 44815 44816 44817 44818 44819 #> [44821] 44820 44821 44822 44823 44824 44825 44826 44827 44828 44829 44830 44831 #> [44833] 44832 44833 44834 44835 44836 44837 44838 44839 44840 44841 44842 44843 #> [44845] 44844 44845 44846 44847 44848 44849 44850 44851 44852 44853 44854 44855 #> [44857] 44856 44857 44858 44859 44860 44861 44862 44863 44864 44865 44866 44867 #> [44869] 44868 44869 44870 44871 44872 44873 44874 44875 44876 44877 44878 44879 #> [44881] 44880 44881 44882 44883 44884 44885 44886 44887 44888 44889 44890 44891 #> [44893] 44892 44893 44894 44895 44896 44897 44898 44899 44900 44901 44902 44903 #> [44905] 44904 44905 44906 44907 44908 44909 44910 44911 44912 44913 44914 44915 #> [44917] 44916 44917 44918 44919 44920 44921 44922 44923 44924 44925 44926 44927 #> [44929] 44928 44929 44930 44931 44932 44933 44934 44935 44936 44937 44938 44939 #> [44941] 44940 44941 44942 44943 44944 44945 44946 44947 44948 44949 44950 44951 #> [44953] 44952 44953 44954 44955 44956 44957 44958 44959 44960 44961 44962 44963 #> [44965] 44964 44965 44966 44967 44968 44969 44970 44971 44972 44973 44974 44975 #> [44977] 44976 44977 44978 44979 44980 44981 44982 44983 44984 44985 44986 44987 #> [44989] 44988 44989 44990 44991 44992 44993 44994 44995 44996 44997 44998 44999 #> [45001] 45000 45001 45002 45003 45004 45005 45006 45007 45008 45009 45010 45011 #> [45013] 45012 45013 45014 45015 45016 45017 45018 45019 45020 45021 45022 45023 #> [45025] 45024 45025 45026 45027 45028 45029 45030 45031 45032 45033 45034 45035 #> [45037] 45036 45037 45038 45039 45040 45041 45042 45043 45044 45045 45046 45047 #> [45049] 45048 45049 45050 45051 45052 45053 45054 45055 45056 45057 45058 45059 #> [45061] 45060 45061 45062 45063 45064 45065 45066 45067 45068 45069 45070 45071 #> [45073] 45072 45073 45074 45075 45076 45077 45078 45079 45080 45081 45082 45083 #> [45085] 45084 45085 45086 45087 45088 45089 45090 45091 45092 45093 45094 45095 #> [45097] 45096 45097 45098 45099 45100 45101 45102 45103 45104 45105 45106 45107 #> [45109] 45108 45109 45110 45111 45112 45113 45114 45115 45116 45117 45118 45119 #> [45121] 45120 45121 45122 45123 45124 45125 45126 45127 45128 45129 45130 45131 #> [45133] 45132 45133 45134 45135 45136 45137 45138 45139 45140 45141 45142 45143 #> [45145] 45144 45145 45146 45147 45148 45149 45150 45151 45152 45153 45154 45155 #> [45157] 45156 45157 45158 45159 45160 45161 45162 45163 45164 45165 45166 45167 #> [45169] 45168 45169 45170 45171 45172 45173 45174 45175 45176 45177 45178 45179 #> [45181] 45180 45181 45182 45183 45184 45185 45186 45187 45188 45189 45190 45191 #> [45193] 45192 45193 45194 45195 45196 45197 45198 45199 45200 45201 45202 45203 #> [45205] 45204 45205 45206 45207 45208 45209 45210 45211 45212 45213 45214 45215 #> [45217] 45216 45217 45218 45219 45220 45221 45222 45223 45224 45225 45226 45227 #> [45229] 45228 45229 45230 45231 45232 45233 45234 45235 45236 45237 45238 45239 #> [45241] 45240 45241 45242 45243 45244 45245 45246 45247 45248 45249 45250 45251 #> [45253] 45252 45253 45254 45255 45256 45257 45258 45259 45260 45261 45262 45263 #> [45265] 45264 45265 45266 45267 45268 45269 45270 45271 45272 45273 45274 45275 #> [45277] 45276 45277 45278 45279 45280 45281 45282 45283 45284 45285 45286 45287 #> [45289] 45288 45289 45290 45291 45292 45293 45294 45295 45296 45297 45298 45299 #> [45301] 45300 45301 45302 45303 45304 45305 45306 45307 45308 45309 45310 45311 #> [45313] 45312 45313 45314 45315 45316 45317 45318 45319 45320 45321 45322 45323 #> [45325] 45324 45325 45326 45327 45328 45329 45330 45331 45332 45333 45334 45335 #> [45337] 45336 45337 45338 45339 45340 45341 45342 45343 45344 45345 45346 45347 #> [45349] 45348 45349 45350 45351 45352 45353 45354 45355 45356 45357 45358 45359 #> [45361] 45360 45361 45362 45363 45364 45365 45366 45367 45368 45369 45370 45371 #> [45373] 45372 45373 45374 45375 45376 45377 45378 45379 45380 45381 45382 45383 #> [45385] 45384 45385 45386 45387 45388 45389 45390 45391 45392 45393 45394 45395 #> [45397] 45396 45397 45398 45399 45400 45401 45402 45403 45404 45405 45406 45407 #> [45409] 45408 45409 45410 45411 45412 45413 45414 45415 45416 45417 45418 45419 #> [45421] 45420 45421 45422 45423 45424 45425 45426 45427 45428 45429 45430 45431 #> [45433] 45432 45433 45434 45435 45436 45437 45438 45439 45440 45441 45442 45443 #> [45445] 45444 45445 45446 45447 45448 45449 45450 45451 45452 45453 45454 45455 #> [45457] 45456 45457 45458 45459 45460 45461 45462 45463 45464 45465 45466 45467 #> [45469] 45468 45469 45470 45471 45472 45473 45474 45475 45476 45477 45478 45479 #> [45481] 45480 45481 45482 45483 45484 45485 45486 45487 45488 45489 45490 45491 #> [45493] 45492 45493 45494 45495 45496 45497 45498 45499 45500 45501 45502 45503 #> [45505] 45504 45505 45506 45507 45508 45509 45510 45511 45512 45513 45514 45515 #> [45517] 45516 45517 45518 45519 45520 45521 45522 45523 45524 45525 45526 45527 #> [45529] 45528 45529 45530 45531 45532 45533 45534 45535 45536 45537 45538 45539 #> [45541] 45540 45541 45542 45543 45544 45545 45546 45547 45548 45549 45550 45551 #> [45553] 45552 45553 45554 45555 45556 45557 45558 45559 45560 45561 45562 45563 #> [45565] 45564 45565 45566 45567 45568 45569 45570 45571 45572 45573 45574 45575 #> [45577] 45576 45577 45578 45579 45580 45581 45582 45583 45584 45585 45586 45587 #> [45589] 45588 45589 45590 45591 45592 45593 45594 45595 45596 45597 45598 45599 #> [45601] 45600 45601 45602 45603 45604 45605 45606 45607 45608 45609 45610 45611 #> [45613] 45612 45613 45614 45615 45616 45617 45618 45619 45620 45621 45622 45623 #> [45625] 45624 45625 45626 45627 45628 45629 45630 45631 45632 45633 45634 45635 #> [45637] 45636 45637 45638 45639 45640 45641 45642 45643 45644 45645 45646 45647 #> [45649] 45648 45649 45650 45651 45652 45653 45654 45655 45656 45657 45658 45659 #> [45661] 45660 45661 45662 45663 45664 45665 45666 45667 45668 45669 45670 45671 #> [45673] 45672 45673 45674 45675 45676 45677 45678 45679 45680 45681 45682 45683 #> [45685] 45684 45685 45686 45687 45688 45689 45690 45691 45692 45693 45694 45695 #> [45697] 45696 45697 45698 45699 45700 45701 45702 45703 45704 45705 45706 45707 #> [45709] 45708 45709 45710 45711 45712 45713 45714 45715 45716 45717 45718 45719 #> [45721] 45720 45721 45722 45723 45724 45725 45726 45727 45728 45729 45730 45731 #> [45733] 45732 45733 45734 45735 45736 45737 45738 45739 45740 45741 45742 45743 #> [45745] 45744 45745 45746 45747 45748 45749 45750 45751 45752 45753 45754 45755 #> [45757] 45756 45757 45758 45759 45760 45761 45762 45763 45764 45765 45766 45767 #> [45769] 45768 45769 45770 45771 45772 45773 45774 45775 45776 45777 45778 45779 #> [45781] 45780 45781 45782 45783 45784 45785 45786 45787 45788 45789 45790 45791 #> [45793] 45792 45793 45794 45795 45796 45797 45798 45799 45800 45801 45802 45803 #> [45805] 45804 45805 45806 45807 45808 45809 45810 45811 45812 45813 45814 45815 #> [45817] 45816 45817 45818 45819 45820 45821 45822 45823 45824 45825 45826 45827 #> [45829] 45828 45829 45830 45831 45832 45833 45834 45835 45836 45837 45838 45839 #> [45841] 45840 45841 45842 45843 45844 45845 45846 45847 45848 45849 45850 45851 #> [45853] 45852 45853 45854 45855 45856 45857 45858 45859 45860 45861 45862 45863 #> [45865] 45864 45865 45866 45867 45868 45869 45870 45871 45872 45873 45874 45875 #> [45877] 45876 45877 45878 45879 45880 45881 45882 45883 45884 45885 45886 45887 #> [45889] 45888 45889 45890 45891 45892 45893 45894 45895 45896 45897 45898 45899 #> [45901] 45900 45901 45902 45903 45904 45905 45906 45907 45908 45909 45910 45911 #> [45913] 45912 45913 45914 45915 45916 45917 45918 45919 45920 45921 45922 45923 #> [45925] 45924 45925 45926 45927 45928 45929 45930 45931 45932 45933 45934 45935 #> [45937] 45936 45937 45938 45939 45940 45941 45942 45943 45944 45945 45946 45947 #> [45949] 45948 45949 45950 45951 45952 45953 45954 45955 45956 45957 45958 45959 #> [45961] 45960 45961 45962 45963 45964 45965 45966 45967 45968 45969 45970 45971 #> [45973] 45972 45973 45974 45975 45976 45977 45978 45979 45980 45981 45982 45983 #> [45985] 45984 45985 45986 45987 45988 45989 45990 45991 45992 45993 45994 45995 #> [45997] 45996 45997 45998 45999 46000 46001 46002 46003 46004 46005 46006 46007 #> [46009] 46008 46009 46010 46011 46012 46013 46014 46015 46016 46017 46018 46019 #> [46021] 46020 46021 46022 46023 46024 46025 46026 46027 46028 46029 46030 46031 #> [46033] 46032 46033 46034 46035 46036 46037 46038 46039 46040 46041 46042 46043 #> [46045] 46044 46045 46046 46047 46048 46049 46050 46051 46052 46053 46054 46055 #> [46057] 46056 46057 46058 46059 46060 46061 46062 46063 46064 46065 46066 46067 #> [46069] 46068 46069 46070 46071 46072 46073 46074 46075 46076 46077 46078 46079 #> [46081] 46080 46081 46082 46083 46084 46085 46086 46087 46088 46089 46090 46091 #> [46093] 46092 46093 46094 46095 46096 46097 46098 46099 46100 46101 46102 46103 #> [46105] 46104 46105 46106 46107 46108 46109 46110 46111 46112 46113 46114 46115 #> [46117] 46116 46117 46118 46119 46120 46121 46122 46123 46124 46125 46126 46127 #> [46129] 46128 46129 46130 46131 46132 46133 46134 46135 46136 46137 46138 46139 #> [46141] 46140 46141 46142 46143 46144 46145 46146 46147 46148 46149 46150 46151 #> [46153] 46152 46153 46154 46155 46156 46157 46158 46159 46160 46161 46162 46163 #> [46165] 46164 46165 46166 46167 46168 46169 46170 46171 46172 46173 46174 46175 #> [46177] 46176 46177 46178 46179 46180 46181 46182 46183 46184 46185 46186 46187 #> [46189] 46188 46189 46190 46191 46192 46193 46194 46195 46196 46197 46198 46199 #> [46201] 46200 46201 46202 46203 46204 46205 46206 46207 46208 46209 46210 46211 #> [46213] 46212 46213 46214 46215 46216 46217 46218 46219 46220 46221 46222 46223 #> [46225] 46224 46225 46226 46227 46228 46229 46230 46231 46232 46233 46234 46235 #> [46237] 46236 46237 46238 46239 46240 46241 46242 46243 46244 46245 46246 46247 #> [46249] 46248 46249 46250 46251 46252 46253 46254 46255 46256 46257 46258 46259 #> [46261] 46260 46261 46262 46263 46264 46265 46266 46267 46268 46269 46270 46271 #> [46273] 46272 46273 46274 46275 46276 46277 46278 46279 46280 46281 46282 46283 #> [46285] 46284 46285 46286 46287 46288 46289 46290 46291 46292 46293 46294 46295 #> [46297] 46296 46297 46298 46299 46300 46301 46302 46303 46304 46305 46306 46307 #> [46309] 46308 46309 46310 46311 46312 46313 46314 46315 46316 46317 46318 46319 #> [46321] 46320 46321 46322 46323 46324 46325 46326 46327 46328 46329 46330 46331 #> [46333] 46332 46333 46334 46335 46336 46337 46338 46339 46340 46341 46342 46343 #> [46345] 46344 46345 46346 46347 46348 46349 46350 46351 46352 46353 46354 46355 #> [46357] 46356 46357 46358 46359 46360 46361 46362 46363 46364 46365 46366 46367 #> [46369] 46368 46369 46370 46371 46372 46373 46374 46375 46376 46377 46378 46379 #> [46381] 46380 46381 46382 46383 46384 46385 46386 46387 46388 46389 46390 46391 #> [46393] 46392 46393 46394 46395 46396 46397 46398 46399 46400 46401 46402 46403 #> [46405] 46404 46405 46406 46407 46408 46409 46410 46411 46412 46413 46414 46415 #> [46417] 46416 46417 46418 46419 46420 46421 46422 46423 46424 46425 46426 46427 #> [46429] 46428 46429 46430 46431 46432 46433 46434 46435 46436 46437 46438 46439 #> [46441] 46440 46441 46442 46443 46444 46445 46446 46447 46448 46449 46450 46451 #> [46453] 46452 46453 46454 46455 46456 46457 46458 46459 46460 46461 46462 46463 #> [46465] 46464 46465 46466 46467 46468 46469 46470 46471 46472 46473 46474 46475 #> [46477] 46476 46477 46478 46479 46480 46481 46482 46483 46484 46485 46486 46487 #> [46489] 46488 46489 46490 46491 46492 46493 46494 46495 46496 46497 46498 46499 #> [46501] 46500 46501 46502 46503 46504 46505 46506 46507 46508 46509 46510 46511 #> [46513] 46512 46513 46514 46515 46516 46517 46518 46519 46520 46521 46522 46523 #> [46525] 46524 46525 46526 46527 46528 46529 46530 46531 46532 46533 46534 46535 #> [46537] 46536 46537 46538 46539 46540 46541 46542 46543 46544 46545 46546 46547 #> [46549] 46548 46549 46550 46551 46552 46553 46554 46555 46556 46557 46558 46559 #> [46561] 46560 46561 46562 46563 46564 46565 46566 46567 46568 46569 46570 46571 #> [46573] 46572 46573 46574 46575 46576 46577 46578 46579 46580 46581 46582 46583 #> [46585] 46584 46585 46586 46587 46588 46589 46590 46591 46592 46593 46594 46595 #> [46597] 46596 46597 46598 46599 46600 46601 46602 46603 46604 46605 46606 46607 #> [46609] 46608 46609 46610 46611 46612 46613 46614 46615 46616 46617 46618 46619 #> [46621] 46620 46621 46622 46623 46624 46625 46626 46627 46628 46629 46630 46631 #> [46633] 46632 46633 46634 46635 46636 46637 46638 46639 46640 46641 46642 46643 #> [46645] 46644 46645 46646 46647 46648 46649 46650 46651 46652 46653 46654 46655 #> [46657] 46656 46657 46658 46659 46660 46661 46662 46663 46664 46665 46666 46667 #> [46669] 46668 46669 46670 46671 46672 46673 46674 46675 46676 46677 46678 46679 #> [46681] 46680 46681 46682 46683 46684 46685 46686 46687 46688 46689 46690 46691 #> [46693] 46692 46693 46694 46695 46696 46697 46698 46699 46700 46701 46702 46703 #> [46705] 46704 46705 46706 46707 46708 46709 46710 46711 46712 46713 46714 46715 #> [46717] 46716 46717 46718 46719 46720 46721 46722 46723 46724 46725 46726 46727 #> [46729] 46728 46729 46730 46731 46732 46733 46734 46735 46736 46737 46738 46739 #> [46741] 46740 46741 46742 46743 46744 46745 46746 46747 46748 46749 46750 46751 #> [46753] 46752 46753 46754 46755 46756 46757 46758 46759 46760 46761 46762 46763 #> [46765] 46764 46765 46766 46767 46768 46769 46770 46771 46772 46773 46774 46775 #> [46777] 46776 46777 46778 46779 46780 46781 46782 46783 46784 46785 46786 46787 #> [46789] 46788 46789 46790 46791 46792 46793 46794 46795 46796 46797 46798 46799 #> [46801] 46800 46801 46802 46803 46804 46805 46806 46807 46808 46809 46810 46811 #> [46813] 46812 46813 46814 46815 46816 46817 46818 46819 46820 46821 46822 46823 #> [46825] 46824 46825 46826 46827 46828 46829 46830 46831 46832 46833 46834 46835 #> [46837] 46836 46837 46838 46839 46840 46841 46842 46843 46844 46845 46846 46847 #> [46849] 46848 46849 46850 46851 46852 46853 46854 46855 46856 46857 46858 46859 #> [46861] 46860 46861 46862 46863 46864 46865 46866 46867 46868 46869 46870 46871 #> [46873] 46872 46873 46874 46875 46876 46877 46878 46879 46880 46881 46882 46883 #> [46885] 46884 46885 46886 46887 46888 46889 46890 46891 46892 46893 46894 46895 #> [46897] 46896 46897 46898 46899 46900 46901 46902 46903 46904 46905 46906 46907 #> [46909] 46908 46909 46910 46911 46912 46913 46914 46915 46916 46917 46918 46919 #> [46921] 46920 46921 46922 46923 46924 46925 46926 46927 46928 46929 46930 46931 #> [46933] 46932 46933 46934 46935 46936 46937 46938 46939 46940 46941 46942 46943 #> [46945] 46944 46945 46946 46947 46948 46949 46950 46951 46952 46953 46954 46955 #> [46957] 46956 46957 46958 46959 46960 46961 46962 46963 46964 46965 46966 46967 #> [46969] 46968 46969 46970 46971 46972 46973 46974 46975 46976 46977 46978 46979 #> [46981] 46980 46981 46982 46983 46984 46985 46986 46987 46988 46989 46990 46991 #> [46993] 46992 46993 46994 46995 46996 46997 46998 46999 47000 47001 47002 47003 #> [47005] 47004 47005 47006 47007 47008 47009 47010 47011 47012 47013 47014 47015 #> [47017] 47016 47017 47018 47019 47020 47021 47022 47023 47024 47025 47026 47027 #> [47029] 47028 47029 47030 47031 47032 47033 47034 47035 47036 47037 47038 47039 #> [47041] 47040 47041 47042 47043 47044 47045 47046 47047 47048 47049 47050 47051 #> [47053] 47052 47053 47054 47055 47056 47057 47058 47059 47060 47061 47062 47063 #> [47065] 47064 47065 47066 47067 47068 47069 47070 47071 47072 47073 47074 47075 #> [47077] 47076 47077 47078 47079 47080 47081 47082 47083 47084 47085 47086 47087 #> [47089] 47088 47089 47090 47091 47092 47093 47094 47095 47096 47097 47098 47099 #> [47101] 47100 47101 47102 47103 47104 47105 47106 47107 47108 47109 47110 47111 #> [47113] 47112 47113 47114 47115 47116 47117 47118 47119 47120 47121 47122 47123 #> [47125] 47124 47125 47126 47127 47128 47129 47130 47131 47132 47133 47134 47135 #> [47137] 47136 47137 47138 47139 47140 47141 47142 47143 47144 47145 47146 47147 #> [47149] 47148 47149 47150 47151 47152 47153 47154 47155 47156 47157 47158 47159 #> [47161] 47160 47161 47162 47163 47164 47165 47166 47167 47168 47169 47170 47171 #> [47173] 47172 47173 47174 47175 47176 47177 47178 47179 47180 47181 47182 47183 #> [47185] 47184 47185 47186 47187 47188 47189 47190 47191 47192 47193 47194 47195 #> [47197] 47196 47197 47198 47199 47200 47201 47202 47203 47204 47205 47206 47207 #> [47209] 47208 47209 47210 47211 47212 47213 47214 47215 47216 47217 47218 47219 #> [47221] 47220 47221 47222 47223 47224 47225 47226 47227 47228 47229 47230 47231 #> [47233] 47232 47233 47234 47235 47236 47237 47238 47239 47240 47241 47242 47243 #> [47245] 47244 47245 47246 47247 47248 47249 47250 47251 47252 47253 47254 47255 #> [47257] 47256 47257 47258 47259 47260 47261 47262 47263 47264 47265 47266 47267 #> [47269] 47268 47269 47270 47271 47272 47273 47274 47275 47276 47277 47278 47279 #> [47281] 47280 47281 47282 47283 47284 47285 47286 47287 47288 47289 47290 47291 #> [47293] 47292 47293 47294 47295 47296 47297 47298 47299 47300 47301 47302 47303 #> [47305] 47304 47305 47306 47307 47308 47309 47310 47311 47312 47313 47314 47315 #> [47317] 47316 47317 47318 47319 47320 47321 47322 47323 47324 47325 47326 47327 #> [47329] 47328 47329 47330 47331 47332 47333 47334 47335 47336 47337 47338 47339 #> [47341] 47340 47341 47342 47343 47344 47345 47346 47347 47348 47349 47350 47351 #> [47353] 47352 47353 47354 47355 47356 47357 47358 47359 47360 47361 47362 47363 #> [47365] 47364 47365 47366 47367 47368 47369 47370 47371 47372 47373 47374 47375 #> [47377] 47376 47377 47378 47379 47380 47381 47382 47383 47384 47385 47386 47387 #> [47389] 47388 47389 47390 47391 47392 47393 47394 47395 47396 47397 47398 47399 #> [47401] 47400 47401 47402 47403 47404 47405 47406 47407 47408 47409 47410 47411 #> [47413] 47412 47413 47414 47415 47416 47417 47418 47419 47420 47421 47422 47423 #> [47425] 47424 47425 47426 47427 47428 47429 47430 47431 47432 47433 47434 47435 #> [47437] 47436 47437 47438 47439 47440 47441 47442 47443 47444 47445 47446 47447 #> [47449] 47448 47449 47450 47451 47452 47453 47454 47455 47456 47457 47458 47459 #> [47461] 47460 47461 47462 47463 47464 47465 47466 47467 47468 47469 47470 47471 #> [47473] 47472 47473 47474 47475 47476 47477 47478 47479 47480 47481 47482 47483 #> [47485] 47484 47485 47486 47487 47488 47489 47490 47491 47492 47493 47494 47495 #> [47497] 47496 47497 47498 47499 47500 47501 47502 47503 47504 47505 47506 47507 #> [47509] 47508 47509 47510 47511 47512 47513 47514 47515 47516 47517 47518 47519 #> [47521] 47520 47521 47522 47523 47524 47525 47526 47527 47528 47529 47530 47531 #> [47533] 47532 47533 47534 47535 47536 47537 47538 47539 47540 47541 47542 47543 #> [47545] 47544 47545 47546 47547 47548 47549 47550 47551 47552 47553 47554 47555 #> [47557] 47556 47557 47558 47559 47560 47561 47562 47563 47564 47565 47566 47567 #> [47569] 47568 47569 47570 47571 47572 47573 47574 47575 47576 47577 47578 47579 #> [47581] 47580 47581 47582 47583 47584 47585 47586 47587 47588 47589 47590 47591 #> [47593] 47592 47593 47594 47595 47596 47597 47598 47599 47600 47601 47602 47603 #> [47605] 47604 47605 47606 47607 47608 47609 47610 47611 47612 47613 47614 47615 #> [47617] 47616 47617 47618 47619 47620 47621 47622 47623 47624 47625 47626 47627 #> [47629] 47628 47629 47630 47631 47632 47633 47634 47635 47636 47637 47638 47639 #> [47641] 47640 47641 47642 47643 47644 47645 47646 47647 47648 47649 47650 47651 #> [47653] 47652 47653 47654 47655 47656 47657 47658 47659 47660 47661 47662 47663 #> [47665] 47664 47665 47666 47667 47668 47669 47670 47671 47672 47673 47674 47675 #> [47677] 47676 47677 47678 47679 47680 47681 47682 47683 47684 47685 47686 47687 #> [47689] 47688 47689 47690 47691 47692 47693 47694 47695 47696 47697 47698 47699 #> [47701] 47700 47701 47702 47703 47704 47705 47706 47707 47708 47709 47710 47711 #> [47713] 47712 47713 47714 47715 47716 47717 47718 47719 47720 47721 47722 47723 #> [47725] 47724 47725 47726 47727 47728 47729 47730 47731 47732 47733 47734 47735 #> [47737] 47736 47737 47738 47739 47740 47741 47742 47743 47744 47745 47746 47747 #> [47749] 47748 47749 47750 47751 47752 47753 47754 47755 47756 47757 47758 47759 #> [47761] 47760 47761 47762 47763 47764 47765 47766 47767 47768 47769 47770 47771 #> [47773] 47772 47773 47774 47775 47776 47777 47778 47779 47780 47781 47782 47783 #> [47785] 47784 47785 47786 47787 47788 47789 47790 47791 47792 47793 47794 47795 #> [47797] 47796 47797 47798 47799 47800 47801 47802 47803 47804 47805 47806 47807 #> [47809] 47808 47809 47810 47811 47812 47813 47814 47815 47816 47817 47818 47819 #> [47821] 47820 47821 47822 47823 47824 47825 47826 47827 47828 47829 47830 47831 #> [47833] 47832 47833 47834 47835 47836 47837 47838 47839 47840 47841 47842 47843 #> [47845] 47844 47845 47846 47847 47848 47849 47850 47851 47852 47853 47854 47855 #> [47857] 47856 47857 47858 47859 47860 47861 47862 47863 47864 47865 47866 47867 #> [47869] 47868 47869 47870 47871 47872 47873 47874 47875 47876 47877 47878 47879 #> [47881] 47880 47881 47882 47883 47884 47885 47886 47887 47888 47889 47890 47891 #> [47893] 47892 47893 47894 47895 47896 47897 47898 47899 47900 47901 47902 47903 #> [47905] 47904 47905 47906 47907 47908 47909 47910 47911 47912 47913 47914 47915 #> [47917] 47916 47917 47918 47919 47920 47921 47922 47923 47924 47925 47926 47927 #> [47929] 47928 47929 47930 47931 47932 47933 47934 47935 47936 47937 47938 47939 #> [47941] 47940 47941 47942 47943 47944 47945 47946 47947 47948 47949 47950 47951 #> [47953] 47952 47953 47954 47955 47956 47957 47958 47959 47960 47961 47962 47963 #> [47965] 47964 47965 47966 47967 47968 47969 47970 47971 47972 47973 47974 47975 #> [47977] 47976 47977 47978 47979 47980 47981 47982 47983 47984 47985 47986 47987 #> [47989] 47988 47989 47990 47991 47992 47993 47994 47995 47996 47997 47998 47999 #> [48001] 48000 48001 48002 48003 48004 48005 48006 48007 48008 48009 48010 48011 #> [48013] 48012 48013 48014 48015 48016 48017 48018 48019 48020 48021 48022 48023 #> [48025] 48024 48025 48026 48027 48028 48029 48030 48031 48032 48033 48034 48035 #> [48037] 48036 48037 48038 48039 48040 48041 48042 48043 48044 48045 48046 48047 #> [48049] 48048 48049 48050 48051 48052 48053 48054 48055 48056 48057 48058 48059 #> [48061] 48060 48061 48062 48063 48064 48065 48066 48067 48068 48069 48070 48071 #> [48073] 48072 48073 48074 48075 48076 48077 48078 48079 48080 48081 48082 48083 #> [48085] 48084 48085 48086 48087 48088 48089 48090 48091 48092 48093 48094 48095 #> [48097] 48096 48097 48098 48099 48100 48101 48102 48103 48104 48105 48106 48107 #> [48109] 48108 48109 48110 48111 48112 48113 48114 48115 48116 48117 48118 48119 #> [48121] 48120 48121 48122 48123 48124 48125 48126 48127 48128 48129 48130 48131 #> [48133] 48132 48133 48134 48135 48136 48137 48138 48139 48140 48141 48142 48143 #> [48145] 48144 48145 48146 48147 48148 48149 48150 48151 48152 48153 48154 48155 #> [48157] 48156 48157 48158 48159 48160 48161 48162 48163 48164 48165 48166 48167 #> [48169] 48168 48169 48170 48171 48172 48173 48174 48175 48176 48177 48178 48179 #> [48181] 48180 48181 48182 48183 48184 48185 48186 48187 48188 48189 48190 48191 #> [48193] 48192 48193 48194 48195 48196 48197 48198 48199 48200 48201 48202 48203 #> [48205] 48204 48205 48206 48207 48208 48209 48210 48211 48212 48213 48214 48215 #> [48217] 48216 48217 48218 48219 48220 48221 48222 48223 48224 48225 48226 48227 #> [48229] 48228 48229 48230 48231 48232 48233 48234 48235 48236 48237 48238 48239 #> [48241] 48240 48241 48242 48243 48244 48245 48246 48247 48248 48249 48250 48251 #> [48253] 48252 48253 48254 48255 48256 48257 48258 48259 48260 48261 48262 48263 #> [48265] 48264 48265 48266 48267 48268 48269 48270 48271 48272 48273 48274 48275 #> [48277] 48276 48277 48278 48279 48280 48281 48282 48283 48284 48285 48286 48287 #> [48289] 48288 48289 48290 48291 48292 48293 48294 48295 48296 48297 48298 48299 #> [48301] 48300 48301 48302 48303 48304 48305 48306 48307 48308 48309 48310 48311 #> [48313] 48312 48313 48314 48315 48316 48317 48318 48319 48320 48321 48322 48323 #> [48325] 48324 48325 48326 48327 48328 48329 48330 48331 48332 48333 48334 48335 #> [48337] 48336 48337 48338 48339 48340 48341 48342 48343 48344 48345 48346 48347 #> [48349] 48348 48349 48350 48351 48352 48353 48354 48355 48356 48357 48358 48359 #> [48361] 48360 48361 48362 48363 48364 48365 48366 48367 48368 48369 48370 48371 #> [48373] 48372 48373 48374 48375 48376 48377 48378 48379 48380 48381 48382 48383 #> [48385] 48384 48385 48386 48387 48388 48389 48390 48391 48392 48393 48394 48395 #> [48397] 48396 48397 48398 48399 48400 48401 48402 48403 48404 48405 48406 48407 #> [48409] 48408 48409 48410 48411 48412 48413 48414 48415 48416 48417 48418 48419 #> [48421] 48420 48421 48422 48423 48424 48425 48426 48427 48428 48429 48430 48431 #> [48433] 48432 48433 48434 48435 48436 48437 48438 48439 48440 48441 48442 48443 #> [48445] 48444 48445 48446 48447 48448 48449 48450 48451 48452 48453 48454 48455 #> [48457] 48456 48457 48458 48459 48460 48461 48462 48463 48464 48465 48466 48467 #> [48469] 48468 48469 48470 48471 48472 48473 48474 48475 48476 48477 48478 48479 #> [48481] 48480 48481 48482 48483 48484 48485 48486 48487 48488 48489 48490 48491 #> [48493] 48492 48493 48494 48495 48496 48497 48498 48499 48500 48501 48502 48503 #> [48505] 48504 48505 48506 48507 48508 48509 48510 48511 48512 48513 48514 48515 #> [48517] 48516 48517 48518 48519 48520 48521 48522 48523 48524 48525 48526 48527 #> [48529] 48528 48529 48530 48531 48532 48533 48534 48535 48536 48537 48538 48539 #> [48541] 48540 48541 48542 48543 48544 48545 48546 48547 48548 48549 48550 48551 #> [48553] 48552 48553 48554 48555 48556 48557 48558 48559 48560 48561 48562 48563 #> [48565] 48564 48565 48566 48567 48568 48569 48570 48571 48572 48573 48574 48575 #> [48577] 48576 48577 48578 48579 48580 48581 48582 48583 48584 48585 48586 48587 #> [48589] 48588 48589 48590 48591 48592 48593 48594 48595 48596 48597 48598 48599 #> [48601] 48600 48601 48602 48603 48604 48605 48606 48607 48608 48609 48610 48611 #> [48613] 48612 48613 48614 48615 48616 48617 48618 48619 48620 48621 48622 48623 #> [48625] 48624 48625 48626 48627 48628 48629 48630 48631 48632 48633 48634 48635 #> [48637] 48636 48637 48638 48639 48640 48641 48642 48643 48644 48645 48646 48647 #> [48649] 48648 48649 48650 48651 48652 48653 48654 48655 48656 48657 48658 48659 #> [48661] 48660 48661 48662 48663 48664 48665 48666 48667 48668 48669 48670 48671 #> [48673] 48672 48673 48674 48675 48676 48677 48678 48679 48680 48681 48682 48683 #> [48685] 48684 48685 48686 48687 48688 48689 48690 48691 48692 48693 48694 48695 #> [48697] 48696 48697 48698 48699 48700 48701 48702 48703 48704 48705 48706 48707 #> [48709] 48708 48709 48710 48711 48712 48713 48714 48715 48716 48717 48718 48719 #> [48721] 48720 48721 48722 48723 48724 48725 48726 48727 48728 48729 48730 48731 #> [48733] 48732 48733 48734 48735 48736 48737 48738 48739 48740 48741 48742 48743 #> [48745] 48744 48745 48746 48747 48748 48749 48750 48751 48752 48753 48754 48755 #> [48757] 48756 48757 48758 48759 48760 48761 48762 48763 48764 48765 48766 48767 #> [48769] 48768 48769 48770 48771 48772 48773 48774 48775 48776 48777 48778 48779 #> [48781] 48780 48781 48782 48783 48784 48785 48786 48787 48788 48789 48790 48791 #> [48793] 48792 48793 48794 48795 48796 48797 48798 48799 48800 48801 48802 48803 #> [48805] 48804 48805 48806 48807 48808 48809 48810 48811 48812 48813 48814 48815 #> [48817] 48816 48817 48818 48819 48820 48821 48822 48823 48824 48825 48826 48827 #> [48829] 48828 48829 48830 48831 48832 48833 48834 48835 48836 48837 48838 48839 #> [48841] 48840 48841 48842 48843 48844 48845 48846 48847 48848 48849 48850 48851 #> [48853] 48852 48853 48854 48855 48856 48857 48858 48859 48860 48861 48862 48863 #> [48865] 48864 48865 48866 48867 48868 48869 48870 48871 48872 48873 48874 48875 #> [48877] 48876 48877 48878 48879 48880 48881 48882 48883 48884 48885 48886 48887 #> [48889] 48888 48889 48890 48891 48892 48893 48894 48895 48896 48897 48898 48899 #> [48901] 48900 48901 48902 48903 48904 48905 48906 48907 48908 48909 48910 48911 #> [48913] 48912 48913 48914 48915 48916 48917 48918 48919 48920 48921 48922 48923 #> [48925] 48924 48925 48926 48927 48928 48929 48930 48931 48932 48933 48934 48935 #> [48937] 48936 48937 48938 48939 48940 48941 48942 48943 48944 48945 48946 48947 #> [48949] 48948 48949 48950 48951 48952 48953 48954 48955 48956 48957 48958 48959 #> [48961] 48960 48961 48962 48963 48964 48965 48966 48967 48968 48969 48970 48971 #> [48973] 48972 48973 48974 48975 48976 48977 48978 48979 48980 48981 48982 48983 #> [48985] 48984 48985 48986 48987 48988 48989 48990 48991 48992 48993 48994 48995 #> [48997] 48996 48997 48998 48999 49000 49001 49002 49003 49004 49005 49006 49007 #> [49009] 49008 49009 49010 49011 49012 49013 49014 49015 49016 49017 49018 49019 #> [49021] 49020 49021 49022 49023 49024 49025 49026 49027 49028 49029 49030 49031 #> [49033] 49032 49033 49034 49035 49036 49037 49038 49039 49040 49041 49042 49043 #> [49045] 49044 49045 49046 49047 49048 49049 49050 49051 49052 49053 49054 49055 #> [49057] 49056 49057 49058 49059 49060 49061 49062 49063 49064 49065 49066 49067 #> [49069] 49068 49069 49070 49071 49072 49073 49074 49075 49076 49077 49078 49079 #> [49081] 49080 49081 49082 49083 49084 49085 49086 49087 49088 49089 49090 49091 #> [49093] 49092 49093 49094 49095 49096 49097 49098 49099 49100 49101 49102 49103 #> [49105] 49104 49105 49106 49107 49108 49109 49110 49111 49112 49113 49114 49115 #> [49117] 49116 49117 49118 49119 49120 49121 49122 49123 49124 49125 49126 49127 #> [49129] 49128 49129 49130 49131 49132 49133 49134 49135 49136 49137 49138 49139 #> [49141] 49140 49141 49142 49143 49144 49145 49146 49147 49148 49149 49150 49151 #> [49153] 49152 49153 49154 49155 49156 49157 49158 49159 49160 49161 49162 49163 #> [49165] 49164 49165 49166 49167 49168 49169 49170 49171 49172 49173 49174 49175 #> [49177] 49176 49177 49178 49179 49180 49181 49182 49183 49184 49185 49186 49187 #> [49189] 49188 49189 49190 49191 49192 49193 49194 49195 49196 49197 49198 49199 #> [49201] 49200 49201 49202 49203 49204 49205 49206 49207 49208 49209 49210 49211 #> [49213] 49212 49213 49214 49215 49216 49217 49218 49219 49220 49221 49222 49223 #> [49225] 49224 49225 49226 49227 49228 49229 49230 49231 49232 49233 49234 49235 #> [49237] 49236 49237 49238 49239 49240 49241 49242 49243 49244 49245 49246 49247 #> [49249] 49248 49249 49250 49251 49252 49253 49254 49255 49256 49257 49258 49259 #> [49261] 49260 49261 49262 49263 49264 49265 49266 49267 49268 49269 49270 49271 #> [49273] 49272 49273 49274 49275 49276 49277 49278 49279 49280 49281 49282 49283 #> [49285] 49284 49285 49286 49287 49288 49289 49290 49291 49292 49293 49294 49295 #> [49297] 49296 49297 49298 49299 49300 49301 49302 49303 49304 49305 49306 49307 #> [49309] 49308 49309 49310 49311 49312 49313 49314 49315 49316 49317 49318 49319 #> [49321] 49320 49321 49322 49323 49324 49325 49326 49327 49328 49329 49330 49331 #> [49333] 49332 49333 49334 49335 49336 49337 49338 49339 49340 49341 49342 49343 #> [49345] 49344 49345 49346 49347 49348 49349 49350 49351 49352 49353 49354 49355 #> [49357] 49356 49357 49358 49359 49360 49361 49362 49363 49364 49365 49366 49367 #> [49369] 49368 49369 49370 49371 49372 49373 49374 49375 49376 49377 49378 49379 #> [49381] 49380 49381 49382 49383 49384 49385 49386 49387 49388 49389 49390 49391 #> [49393] 49392 49393 49394 49395 49396 49397 49398 49399 49400 49401 49402 49403 #> [49405] 49404 49405 49406 49407 49408 49409 49410 49411 49412 49413 49414 49415 #> [49417] 49416 49417 49418 49419 49420 49421 49422 49423 49424 49425 49426 49427 #> [49429] 49428 49429 49430 49431 49432 49433 49434 49435 49436 49437 49438 49439 #> [49441] 49440 49441 49442 49443 49444 49445 49446 49447 49448 49449 49450 49451 #> [49453] 49452 49453 49454 49455 49456 49457 49458 49459 49460 49461 49462 49463 #> [49465] 49464 49465 49466 49467 49468 49469 49470 49471 49472 49473 49474 49475 #> [49477] 49476 49477 49478 49479 49480 49481 49482 49483 49484 49485 49486 49487 #> [49489] 49488 49489 49490 49491 49492 49493 49494 49495 49496 49497 49498 49499 #> [49501] 49500 49501 49502 49503 49504 49505 49506 49507 49508 49509 49510 49511 #> [49513] 49512 49513 49514 49515 49516 49517 49518 49519 49520 49521 49522 49523 #> [49525] 49524 49525 49526 49527 49528 49529 49530 49531 49532 49533 49534 49535 #> [49537] 49536 49537 49538 49539 49540 49541 49542 49543 49544 49545 49546 49547 #> [49549] 49548 49549 49550 49551 49552 49553 49554 49555 49556 49557 49558 49559 #> [49561] 49560 49561 49562 49563 49564 49565 49566 49567 49568 49569 49570 49571 #> [49573] 49572 49573 49574 49575 49576 49577 49578 49579 49580 49581 49582 49583 #> [49585] 49584 49585 49586 49587 49588 49589 49590 49591 49592 49593 49594 49595 #> [49597] 49596 49597 49598 49599 49600 49601 49602 49603 49604 49605 49606 49607 #> [49609] 49608 49609 49610 49611 49612 49613 49614 49615 49616 49617 49618 49619 #> [49621] 49620 49621 49622 49623 49624 49625 49626 49627 49628 49629 49630 49631 #> [49633] 49632 49633 49634 49635 49636 49637 49638 49639 49640 49641 49642 49643 #> [49645] 49644 49645 49646 49647 49648 49649 49650 49651 49652 49653 49654 49655 #> [49657] 49656 49657 49658 49659 49660 49661 49662 49663 49664 49665 49666 49667 #> [49669] 49668 49669 49670 49671 49672 49673 49674 49675 49676 49677 49678 49679 #> [49681] 49680 49681 49682 49683 49684 49685 49686 49687 49688 49689 49690 49691 #> [49693] 49692 49693 49694 49695 49696 49697 49698 49699 49700 49701 49702 49703 #> [49705] 49704 49705 49706 49707 49708 49709 49710 49711 49712 49713 49714 49715 #> [49717] 49716 49717 49718 49719 49720 49721 49722 49723 49724 49725 49726 49727 #> [49729] 49728 49729 49730 49731 49732 49733 49734 49735 49736 49737 49738 49739 #> [49741] 49740 49741 49742 49743 49744 49745 49746 49747 49748 49749 49750 49751 #> [49753] 49752 49753 49754 49755 49756 49757 49758 49759 49760 49761 49762 49763 #> [49765] 49764 49765 49766 49767 49768 49769 49770 49771 49772 49773 49774 49775 #> [49777] 49776 49777 49778 49779 49780 49781 49782 49783 49784 49785 49786 49787 #> [49789] 49788 49789 49790 49791 49792 49793 49794 49795 49796 49797 49798 49799 #> [49801] 49800 49801 49802 49803 49804 49805 49806 49807 49808 49809 49810 49811 #> [49813] 49812 49813 49814 49815 49816 49817 49818 49819 49820 49821 49822 49823 #> [49825] 49824 49825 49826 49827 49828 49829 49830 49831 49832 49833 49834 49835 #> [49837] 49836 49837 49838 49839 49840 49841 49842 49843 49844 49845 49846 49847 #> [49849] 49848 49849 49850 49851 49852 49853 49854 49855 49856 49857 49858 49859 #> [49861] 49860 49861 49862 #>  #> [[6]] #>     [1]     6    25    62    98   133   217   262   512   608   768   807   829 #>    [13]   972  1027  1225  1449  1644  1852  1893  2041  2164  2300  2574  2661 #>    [25]  2735  2875  3455  3623  3808  3907  4251  4449  4523  4736  4907  4965 #>    [37]  5499  6166  6708  7421  7969  8444  9276 11017 11658 12642 13332 14938 #>    [49] 15518 15627 15781 16006 16427 16795 18696 18888 19327 19651 19698 20094 #>    [61] 20281 20527 21112 21512 21642 22172 22584 23481 24247 24549 24841 24920 #>    [73] 25872 26708 28626 29353 29423 29716 30962 31044 31688 32486 32667 32809 #>    [85] 32977 34132 37598 38725 38901 39076 41656 41743 41987 42912 42990 44347 #>    [97] 45694 47024 47729 48052 49249     0    30    42    94    99   109   167 #>   [109]   174   184   200   280   304   387   443   461   572   615   782   808 #>   [121]   899  1309  1349  1740  1758  2042  2404  2545  2662  2836  3130  3241 #>   [133]  3389  3409  3566  4281  4484  4588  4801  5412  5438  6134  6856  7062 #>   [145]  7287  7551  7970  8792  9063  9561  9784 10502 10545 10966 11335 11564 #>   [157] 12156 12260 12443 12598 12832 13381 14664 14833 14875 16007 16373 17603 #>   [169] 18465 18640 19138 20282 20774 21956 22173 22942 24188 24691 25229 25313 #>   [181] 25459 25719 26256 27072 27561 27993 28792 30018 30717 31045 31868 32892 #>   [193] 33059 33139 35268 36645 37158 37599 38637 40093 41388 42455 42559 42913 #>   [205] 44241 44439 44745 44832 46337 46922 47309    73   118   127   412   428 #>   [217]   451   474   616   645   704   739  1055  1287  1310  1556  1578  1703 #>   [229]  2876  2987  3043  3536  3567  3676  3699  3789  3809  4022  4222  4252 #>   [241]  4685  5752  5925  6064  6239  6515  6556  6591  7243  8360  8535  9373 #>   [253]  9785  9822  9964 11522 11864 12050 12721 13193 13657 13710 14127 15103 #>   [265] 15628 15724 18572 20283 20775 20982 21443 23482 24248 26037 28314 28627 #>   [277] 28711 29652 30567 32668 32893 33060 33304 33959 34292 36371 36558 37159 #>   [289] 38287 38990 40240 40862 42822 42914 43723 45609 46815 46923 47730 47842 #>   [301] 48848 48940 49367 49764     7    21    26    34    69    95   113   134 #>   [313]   169   218   221   305   327   344   462   562   581   657   692   757 #>   [325]   957  1140  1327  1342  1397  1599  1759  1853  2612  2682  2970  3044 #>   [337]  4524  4655  5057  5302  5530  5951  6592  7063  7103  7422  7739  8077 #>   [349]  8400 10264 11523 11763 11905 11955 12051 12261 12444 12599 13658 14128 #>   [361] 14451 14876 15156 15907 16374 16735 17017 19197 22101 22371 22440 22792 #>   [373] 22943 23226 23483 23914 24123 24189 24625 25314 27268 27838 29354 29802 #>   [385] 30643 31689 32397 33140 33305 34133 34706 36646 37857 38033 38119 39167 #>   [397] 39348 39808 41590 41915 43347 43430 44746 45435 46229 46338 46622 47025 #>   [409] 47509 47625 47843 48359     1    43    77   143   168   228   328   388 #>   [421]   623   705   758   769   900   917   973  1028  1613  1658  1794  3186 #>   [433]  3595  3933  3988  4282  4802  5018  5141  5230  5265  6065  6557  6593 #>   [445]  6744  7288  7328  7367  7465  7666  8008  8078  8536  9064  9105  9234 #>   [457]  9423  9607  9647  9823 10011 10406 10874 11434 12773 13288 13659 13871 #>   [469] 14070 15157 16008 16075 16256 16557 17546 17655 17783 17848 18641 19514 #>   [481] 22238 24190 24921 25149 26179 26398 26995 27073 28628 29803 33141 35269 #>   [493] 36122 36986 37431 37691 38205 40170 41818 42560 43535 43811 44440 45015 #>   [505] 45330 46230 47510 47626 48053 48151     5    13    44    47    63   105 #>   [517]   119   189   367   624   673   883  1197  1226  1557  1659  1760  2002 #>   [529]  2023  2212  2321  2338  2502  2575  2809  2947  3482  3726  4334  4450 #>   [541]  4485  4589  5439  6066  6135  7368  7423  7552  7625  7667  7698  8760 #>   [553]  8870  8949 10920 10967 12349 12543 13500 13555 14989 15205 15840 16855 #>   [565] 16970 17379 17604 18028 18466 18889 19139 20284 21113 21237 21577 21769 #>   [577] 22239 22585 23762 23984 24320 25720 25961 29946 30485 31450 31526 32105 #>   [589] 32264 32398 32669 34043 35270 36463 36987 38034 42266 42456 46439 47214 #>   [601] 48745    10    18    35    52   151   162   185   229   358   452   475 #>   [613]   497   594   609   674   759   884   901  1056  1126  1379  1398  1477 #>   [625]  1963  2524  2793  3045  4023  4335  5303  5343  6379  6516  6594  6745 #>   [637]  6857  7064  7104  7244  7424  7588  7699  7971  8179  8234  9374  9424 #>   [649]  9562 10357 10875 10921 10968 11956 12207 12307 12350 13501 13872 14990 #>   [661] 16132 16190 16796 18093 18890 19030 19582 20285 20467 21770 23550 24061 #>   [673] 24398 24626 26330 27487 28159 29424 29582 31122 33222 34377 35612 36281 #>   [685] 38120 40094 40241 40412 40497 41591 41657 41744 41988 42174 42457 43972 #>   [697] 44150 45784 46713 47215 47403 47943     2    12    38    48    55    76 #>   [709]   306   368   394   421   429   453   476   490   519   538   625   730 #>   [721]  1002  1090  1127  1170  1212  1328  1428  1450  1558  1614  1795  2276 #>   [733]  2810  3511  3727  4558  4620  5118  5377  5654  6067  6517  6631  7848 #>   [745]  8487  8721  8984  9235  9375  9648  9786 10265 10445 10720 11617 12109 #>   [757] 13433 14665 15576 15782 16076 16309 16736 16916 18957 19454 19515 19954 #>   [769] 22174 24842 26180 27074 27415 27630 28071 30389 30486 30963 32670 32737 #>   [781] 34293 35685 35852 36025 36282 37160 37432 38367 39809 40242 40413 40498 #>   [793] 42823 43073 46133 46231 46440 46623 47310 47844 48541     3     8    11 #>   [805]    27    31    53   120   238   248   292   307   333   345   401   456 #>   [817]   513   530   551   582   595   626   635   885  1074  1181  1198  1246 #>   [829]  1329  1363  1671  2186  2525  2546  2637  3537  3652  3790  3934  4024 #>   [841]  4486  4621  4826  5119  5440  5531  5990  6518  6931  7065  8284  8488 #>   [853] 10266 11183 11237 11957 13434 13660 14129 14452 14617 14939 15254 15519 #>   [865] 15679 15725 16310 16797 19198 19455 19895 20528 20649 21238 21390 22944 #>   [877] 23289 23551 24062 25649 25962 27135 27769 28160 28315 28629 28875 29947 #>   [889] 30019 30079 30160 31205 32978 33306 33561 34134 35044 36123 36647 36894 #>   [901] 37251 38546 39997 40243 41307 42175 43626 44242 45331 45865 46816 49250 #>   [913]    32   152   175   298   477   539   552   646   675   797  1107  1227 #>   [925]  1600  1615  2354  2474  2576  2837  2903  2971  3218  3429  4111  4141 #>   [937]  4686  5472  7032  7197  7329  7626  7740  8285  8871  9065 10407 10594 #>   [949] 10799 11238 14453 14618 15520 16077 16503 16737 18697 19516 19896 20415 #>   [961] 20595 20704 20776 21700 22658 22858 23138 24063 24399 24550 24692 25230 #>   [973] 25460 25721 26547 28233 29263 29355 29717 30020 31527 32399 32487 33307 #>   [985] 33711 34378 35686 35768 35853 36199 37252 37340 37510 40244 40330 41389 #>   [997] 41499 44545 44747 45436 47133     4     9    50    78    84   256   281 #>  [1009]   346   413   463   540  1128  1199  1364  1399  1429  1741  1814  1868 #>  [1021]  2355  2765  3538  3596  3791  4085  4765  5092  5120  5614  6100  6272 #>  [1033]  6310  6342  6632  6816  7198  7245  7369  7700  8009  8909  8985  9649 #>  [1045] 10312 10446 11101 11435 11618 11764 12262 12408 12833 13333 13435 14071 #>  [1057] 14714 14781 15104 18891 19699 19822 19955 20286 20529 21513 21836 21895 #>  [1069] 21957 22441 23139 24249 24843 24922 25722 26181 26787 26916 27338 27488 #>  [1081] 27562 28876 29264 29583 31123 31372 31528 31604 33712 33793 33960 34294 #>  [1093] 34961 35045 35687 36895 37075 38726 39546 40588 41047 41658 42458 42748 #>  [1105] 42991 43724 44639 47627 48054 48746 48849 49471    14    17    36    56 #>  [1117]    74   110   170   201   267   359   389   402   627   706   958  1153 #>  [1129]  1256  1300  1311  1451  1683  1869  2043  2301  2450  2503  2928  3107 #>  [1141]  3131  3187  3219  3367  3430  3597  3810  3989  4827  4908  6343  6595 #>  [1153]  7131  7330  7425  7849  8180  8235  9106  9146  9425  9477  9695  9869 #>  [1165]  9965 10112 10267 10876 11704 11865 12052 12445 12722 13289 13382 13436 #>  [1177] 13711 14246 14346 16133 16257 16428 16504 17125 18826 20416 22175 22240 #>  [1189] 22372 22793 23227 23418 24321 24400 24551 24693 24844 24997 25231 25461 #>  [1201] 25873 28466 29501 30228 31373 33386 33562 33961 34214 35528 35769 36648 #>  [1213] 37161 37433 38368 38727 39547 40772 40955 41592 41916 42749 42824 44441 #>  [1225] 48152 48850 49047    45   100   121   135   139   153   186   207   360 #>  [1237]   422   464   553   596   707   798   809   902   918  1228  1684  1815 #>  [1249]  2123  2213  2302  2322  2451  2547  3340  4086  4301  4451  5378  5859 #>  [1261]  6167  7164  7289  7701  8571  8872 10313 10358 11135 11483 12351 12493 #>  [1273] 13027 13242 13334 15521 15577 15908 16258 16612 17240 17656 18214 18698 #>  [1285] 19583 19652 20287 21319 23228 23552 25388 25801 27563 28548 28793 29356 #>  [1297] 29653 31046 31124 31451 32319 35529 36026 36464 37692 37781 38121 38728 #>  [1309] 39168 39653 40095 41140 41308 41989 43176 43348 43812 44546 45016 46134 #>  [1321] 47845 48457    22    79    88   111   144   219   308   843  1008  1091 #>  [1333]  1108  1272  1350  1430  1537  1854  2085  2143  2713  2948  3149  3188 #>  [1345]  3700  3935  6478  6897  6957  7165  7290  7668  8445  8828  9277 10208 #>  [1357] 10503 10546 11336 11436 12053 12157 13335 15206 16134 17126 17190 17911 #>  [1369] 18699 18958 19517 19584 20021 20288 21958 22102 22176 26257 27416 27994 #>  [1381] 28794 29029 29584 29804 30487 30964 31374 31605 32265 33387 36283 37076 #>  [1393] 37858 38035 40245 40682 41819 42267 44055 44151 44243 44348 45531 47216 #>  [1405] 47311 49251 49368    15    28    39    46    59   122   176   208   268 #>  [1417]   282   309   369   693   870  1009  1478  1559  1672  1816  2044  2251 #>  [1429]  3108  3483  4053  4087  4253  4366  4525  4704  5266  5786  7291  9107 #>  [1441]  9513  9608  9696  9734  9870 10161 10595 11524 12352 13140 14247 14290 #>  [1453] 14396 14666 15303 15463 15522 16798 17191 18573 19456 19585 20166 20468 #>  [1465] 21320 21391 23078 25723 26038 26399 27136 27269 27417 27839 28161 28712 #>  [1477] 28795 28951 30161 32020 32979 33563 34215 35351 35443 35688 35770 36284 #>  [1489] 39908 40589 40683 40956 41500 41659 43813 44833 48542 49665    19    37 #>  [1501]    57    64    89   171   283   293   347   770   886  1010  1075  1154 #>  [1513]  1229  1777  1920  2066  2187  2811  3046  3539  3792  4254  4394  4487 #>  [1525]  4526  5019  5093  5590  5821  5991  7199  7370  8010  8324  8572  8829 #>  [1537]  8950  8986  9108  9189  9426  9609 10504 10547 10922 11136 11565 11619 #>  [1549] 12263 12774 13336 13712 14834 16009 16259 16505 16799 17304 17380 20095 #>  [1561] 20417 20596 21578 21959 22300 24064 24191 24401 24627 24694 25874 26548 #>  [1573] 26788 27339 27916 28549 29265 29425 30080 30229 31206 31690 32266 33564 #>  [1585] 34624 36465 36810 37162 37600 38206 39435 42086 42268 43177 43262 44349 #>  [1597] 44834 45228 45437 45695 45950 46135 46543 48246 49765    65   220   370 #>  [1609]   395   423   583   830  1029  1042  1057  1155  1257  1273  1579  1704 #>  [1621]  2188  2252  3341  3390  3701  4088  4173  4527  5267  7466  7889  8181 #>  [1633]  8401  9871 10162 10209 10800 11525 11705 11906 12054 12494 12643 13383 #>  [1645] 13556 13661 15841 16429 16800 17305 17912 18574 18827 19518 20418 20910 #>  [1657] 21321 21392 22659 23553 24124 24845 26182 26258 26331 27270 28162 28386 #>  [1669] 28550 28796 30965 32738 32980 34135 34295 35352 35689 36027 36372 38288 #>  [1681] 39349 40863 41221 41593 43431 45785 47944 48543 48747 49048    20   106 #>  [1693]   163   177   195   209   239   435   731   820   959  1141  1230  1517 #>  [1705]  1964  2024  2379  2405  2736  3047  3109  3368  3431  3540  4089  4223 #>  [1717]  4656  5175  5268  5304  5344  5413  5716  5860  6311  6380  6817  7426 #>  [1729]  7850  8182  8830  9109  9147  9427 10642 10923 11060 11337 12158 12308 #>  [1741] 12353 12409 12446 12644 13821 14715 15105 15158 15523 15629 15726 15842 #>  [1753] 16613 16738 17443 17784 18029 18398 18700 18892 18959 19457 19519 19653 #>  [1765] 21579 21837 22031 22794 22859 23016 23355 23915 24402 24923 26549 26629 #>  [1777] 27193 27770 28163 28551 29099 29654 30021 30488 31869 31950 32320 32400 #>  [1789] 34296 35690 35854 36028 36285 37253 38814 39436 42750 43178 45332 46339 #>  [1801] 46441 47731 49567    16    23    29    33    75    80   249   273   322 #>  [1813]   430   436  1156  1817  2003  2165  2504  2904  3048  3084  3189  3753 #>  [1825]  3835  4054  4195  4705  5688  6818  6984  7741  8446  8616  8987 10643 #>  [1837] 10801 10924 11184 11566 12159 12354 12645 13194 13437 13822 14291 14454 #>  [1849] 14513 14991 15043 15727 15843 17127 18154 18399 20022 20842 21838 24924 #>  [1861] 26630 27489 28952 29030 32106 32810 33223 33962 34379 35353 36029 37601 #>  [1873] 38036 38815 39548 41390 41594 42087 42825 45229 46340 47026 47217 47511 #>  [1885] 49252 49369 49766    24    66   115   136   145   178   257   299   424 #>  [1897]   491   514   531   541   676   771   941  1129  1247  1498  1580  1982 #>  [1909]  2025  2102  2124  2613  2638  3512  3541  4488  4828  4879  4990  5305 #>  [1921]  5414  5558  6344  6381  7132  7200  7669  7742  7890  9324 10113 10359 #>  [1933] 10596 11765 11866 13243 14716 14992 15044 15357 15464 15524 16191 16430 #>  [1945] 17018 18155 18400 19328 19654 19956 20023 20469 20597 20650 21239 21444 #>  [1957] 21960 22301 23079 23554 24403 24628 24764 25462 25650 26789 28877 30162 #>  [1969] 30308 30644 30789 31452 31529 31789 32488 33142 33308 34044 34216 35444 #>  [1981] 35691 35855 37163 37341 37434 37602 39169 39549 39909 40414 42915 43536 #>  [1993] 43627 44640 47312 47732 49666    49    51    70    90   114   154   230 #>  [2005]   284   406   431   532   647   677   919   974  1043  1058  1400  1538 #>  [2017]  1673  1894  1983  2339  2505  2877  3220  3288  3342  3369  3542  3811 #>  [2029]  4112  4657  4909  5379  5753  6312  6783  6819  7371  7427  7553  8236 #>  [2041]  8447  8489  8951  9027  9824 11287 11338 11706 11816 11867 12110 12495 #>  [2053] 12544 13028 13086 13195 13244 14782 14835 14993 15410 16078 16135 17071 #>  [2065] 17547 17657 18642 18760 19079 19276 19458 20167 22177 23916 24322 24695 #>  [2077] 25463 25594 26479 26857 28953 29031 29655 29718 29805 30966 31691 32107 #>  [2089] 33472 33713 33794 34045 34136 34469 34865 35445 35856 36896 37342 37782 #>  [2101] 38037 38547 39550 41820 42561 42916 43179 43263 45333 46232 46817 48153 #>  [2113] 48360    67    71   128   155   190   210   231   240   250   294   465 #>  [2125]   478   498   597   708   810   831   932  1109  1258  1312  2340  2427 #>  [2137]  2988  3015  3062  3513  3793  4590  5121  5615  5952  7033  7201  7589 #>  [2149]  7851  8044  8183  8286  8537  9428  9825 10163 10314 10505 10802 11137 #>  [2161] 11339 11817 12111 12264 12775 13087 13438 13713 14514 14619 15844 16739 #>  [2173] 16856 16971 17019 17968 18156 19080 19586 21896 22241 23419 25724 26183 #>  [2185] 27340 28072 28878 29266 29656 30309 32811 33388 34782 35530 36286 36897 #>  [2197] 38548 39170 39998 41048 41222 42562 43973 45696 46136 47733 47846 48154 #>  [2209] 49137 49370    40    81   407   584   942   960  1059  1076  1130  1182 #>  [2221]  1415  1479  1837  2125  2323  2577  3016  3343  4142  4489  4528  5094 #>  [2233]  5202  5591  5616  6024  6558  6709  7166  7292  7702  7813  8873 10597 #>  [2245] 10925 11138 11567 11766 11818 13088 13612 14072 16079 16375 16614 17715 #>  [2257] 18761 21961 24250 25315 25464 25875 27771 27840 28073 28164 28713 30568 #>  [2269] 31606 31870 32574 33640 33714 34962 36466 36559 37254 37783 39437 39999 #>  [2281] 40331 43725 45951 48247 49667    58    91   137   295   414   432   832 #>  [2293]  1030  1259  1401  1464  1685  1705  2026  2428  2452  2614  2683  2905 #>  [2305]  2929  3017  3344  3432  3728  3812  4766  5058  5122  5617  5717  5754 #>  [2317]  6273  6479  6519  6559  6675  6958  7066  7246  7331  7772  8402  8874 #>  [2329]  8988  9028  9478  9563 10447 10644 10803 11239 11393 11526 11819 11958 #>  [2341] 12410 12447 14130 14187 14347 14877 15680 17020 17658 17716 18030 18094 #>  [2353] 18467 18575 19031 19199 19823 19897 20024 20777 21172 21514 21771 23620 #>  [2365] 23985 24251 25068 25232 25316 26858 27194 28954 29502 29719 29948 30022 #>  [2377] 30310 30718 32188 33061 33309 33389 34046 34707 34963 35105 35271 35446 #>  [2389] 35613 35940 36731 36811 38816 38902 38991 39077 39257 39350 39654 40590 #>  [2401] 41990 44641 46624 47218 48055 49138 49371    82   123   187   323   466 #>  [2413]   499   533   975  1171  1581  1895  2303  2591  2714  2949  2972  3266 #>  [2425]  4424  5059  5123  6025  6240  6345  6676  6710  7105  7293  7670  8011 #>  [2437]  8287  8448  8989  9697  9919 10448 10756 10804 11620 12208 14073 14131 #>  [2449] 14292 14620 15681 15909 16136 17128 17785 18762 19032 19520 20651 21962 #>  [2461] 22178 22373 23555 25389 25876 26259 27137 27271 27418 28955 29806 30489 #>  [2473] 34708 35106 35614 36030 36649 37946 38038 38207 38549 39351 40684 42176 #>  [2485] 43901 44244 45132 46714 48056 48155 48458 48544 49372    41    72    83 #>  [2497]    92   179   348   648   871  1142  1274  1288  1301  1499  1660  2126 #>  [2509]  2214  2253  3132  3190  3456  3624  3677  4687  4966  5231  5306  5755 #>  [2521]  5787  6136  7671  8361  9479 10058 10360 11102 11527 11820 12209 12496 #>  [2533] 12723 15159 15783 17496 17605 18517 18960 20911 21393 22660 24552 24696 #>  [2545] 24765 25069 25802 25877 25963 26114 26260 26480 28234 28316 28714 29426 #>  [2557] 30163 30790 31125 31375 31607 32021 33565 34217 34866 34964 35857 36560 #>  [2569] 36650 36732 36988 37435 38369 38461 40864 41501 41660 42177 44056 44748 #>  [2581] 44920 45334 45438 45866 47027 47512 47847 47945 49139 49472    96   232 #>  [2593]   241   694   709  1011  1143  1302  1380  1452  1674  1896  2103  2506 #>  [2605]  2812  2859  3484  3678  3729  4706  5060  5203  5380  5415  5788  6068 #>  [2617]  6274  6596  6746  7067  7428  8045  8449  9429  9514 10315 10408 11240 #>  [2629] 11340 11707 11821 11907 12265 12724 13337 13439 13557 14132 14397 16080 #>  [2641] 18284 19200 19277 19957 20419 20705 20983 21445 22302 23356 23484 23846 #>  [2653] 24323 24553 24925 25725 25878 26917 26996 27341 28165 28715 30311 30645 #>  [2665] 31047 31376 31453 32894 33641 33795 33875 34047 34297 34709 36200 39438 #>  [2677] 40000 40096 42269 42649 44547 46045 46818 48650 48941    68   129   146 #>  [2689]   242   258   361   408   563   649   720   833   987  1077  1231  1616 #>  [2701]  1661  1706  1796  2067  2104  2215  2277  2684  2973  3345  3568  4591 #>  [2713]  4767  5618  5655  5822  6382  6784  7202  7703  7814  7852  8109  8184 #>  [2725]  8617  8659  9029 10012 10449 11288 11341 12055 12112 12934 14455 14717 #>  [2737] 14878 15465 16081 16192 17192 17306 19587 19766 19824 19958 20289 22860 #>  [2749] 24252 25150 25651 26184 26481 26790 27490 27917 28387 28879 29357 29503 #>  [2761] 29874 30081 30791 31207 31530 31608 33062 34625 34783 37511 37947 39910 #>  [2773] 41049 41223 44548 44642 45133 48748 49373    54   211   233   310   349 #>  [2785]   371   658   695   749   903  1110  1402  1870  1965  2189  2254  2278 #>  [2797]  2406  2766  3085  3191  3457  3702  3730  3908  4224  4592  4737  4768 #>  [2809]  5926  6209  6446  7429  7743  8079  8618  9430  9610  9698 10548 10969 #>  [2821] 11139 11342 11708 11767 12497 12834 14248 14718 15411 15784 16137 16193 #>  [2833] 16506 16615 16917 17548 18643 21701 21897 23140 24324 24476 24697 24846 #>  [2845] 25070 25879 25964 26039 27772 27918 30967 31377 31951 33642 34137 34470 #>  [2857] 34547 35692 40685 41050 42178 45439 46233 46544 47028 48545 48851 49253 #>  [2869] 49374    60   101   156   212   234   338   362   454   479   500   659 #>  [2881]   760   772   821   933  1111  1248  1761  1778  2068  2236  2526  2878 #>  [2893]  2989  3018  3267  3936  4529  4707  5592  5789  6101  6241  6346  6560 #>  [2905]  6747  6898  7294  7853  8237  8362  9376  9650  9735  9966 10268 11061 #>  [2917] 11241 11289 12160 12725 13196 14783 14994 15525 15578 17241 18095 18285 #>  [2929] 19081 19140 19329 19521 20290 20355 21240 21394 22520 22586 23017 23290 #>  [2941] 24065 24998 25465 25652 25803 26859 26918 27995 29875 32489 32812 33063 #>  [2953] 33224 34548 34710 35858 36201 38289 39911 41224 41991 43628 44152 44549 #>  [2965] 45230 45610 47029 48749    61   107   157   243   372   415   433   457 #>  [2977]   480   721   961  1232  1330  1403  1416  1465  1500  1686  1938  2045 #>  [2989]  2341  2639  2930  3543  3679  3963  4143  4708  4880  4967  5176  5381 #>  [3001]  5619  6480  6633  6677  7034  7430  7891  8080  8573  9377 10598 11709 #>  [3013] 11822 11908 12355 12498 13089 13823 14879 15255 15304 15526 16082 16507 #>  [3025] 16673 16918 17242 17849 18468 19959 20470 20843 21395 22945 23229 23763 #>  [3037] 23986 24066 24253 24847 26332 26400 26791 28467 29720 30792 30968 31284 #>  [3049] 31378 33143 35186 35354 35615 36467 36812 37693 38638 40591 42369 43432 #>  [3061] 47134   108   116   172   311   339   403   437   520   564   678   740 #>  [3073]   761   822   943  1112  1871  2027  2453  2548  2794  2838  3192  3458 #>  [3085]  3964  4113  4658  4856  4991  5345  5500  5559  5861  5890  5953  6137 #>  [3097]  6168  6597  7247  8110  8238  8490  8722  9190  9378 10013 10839 10926 #>  [3109] 11343 13440 13502 14188 16260 17444 17717 17786 17850 18096 18286 18828 #>  [3121] 21446 22587 24254 24477 24766 25151 25653 25965 26040 26550 27138 27342 #>  [3133] 28468 29949 30312 32401 35355 35941 38122 38462 38639 39912 40865 40957 #>  [3145] 41391 42270 42370 43264 43814 44643 46924 48459 48546    93   102   112 #>  [3157]   124   158   269   396   542   679   844   976   988  1012  1480  1501 #>  [3169]  1617  2356  2906  2990  3049  3569  3625  3886  3909  4302  4803  5346 #>  [3181]  5756  7068  7106  7627  7928  8046  8081  8761  8793  9699 10210 10450 #>  [3193] 10840 12356 12883 12935 13441 13824 13873 14074 15728 15953 16674 17787 #>  [3205] 18342 18518 18701 19655 21772 22303 22374 22442 22720 22861 23692 24125 #>  [3217] 24926 25233 26551 28630 28880 29176 29358 29950 30569 30885 30969 31790 #>  [3229] 32108 32189 32321 32981 34218 34549 35046 36031 36561 37255 37859 38290 #>  [3241] 41595 42371 44245 44442 45017 45440 47404 47848    85   202   274   350 #>  [3253]   425   554   989  1060  1200  1213  1233  1518  1560  1631  1687  2046 #>  [3265]  2324  2357  2380  2795  2974  3019  3150  4174  4196  4225  4688  4857 #>  [3277]  5307  5501  6169  6383  6447  6634  6959  7133  7203  8794  8831  8952 #>  [3289] 10841 11018 13029 14348 14515 14621 14995 15729 15910 17129 17193 18215 #>  [3301] 18287 18763 18961 19522 19960 20471 21963 22242 22375 22443 23357 23485 #>  [3313] 25466 26919 27272 28469 28552 29657 30230 31952 32109 32402 33064 34048 #>  [3325] 34298 35859 37694 39655 40246 40866 41225 41821 42271 42751 42826 43074 #>  [3337] 43180 44921 45335 45786 46341 48248 48460    86   142   213   329   363 #>  [3349]   783   860  1331  1404  1872  1897  1966  2047  2190  2304  2549  2860 #>  [3361]  3151  3754  3965  4114  4943  5308  5532  6138  6347  6785  7512  7628 #>  [3373]  8012  9325  9787  9920 10877 12545 14189 14784 14996 15160 15682 16558 #>  [3385] 16801 18157 18644 19389 19961 20356 20778 20844 21322 21515 21773 22444 #>  [3397] 26792 26997 27195 27841 29100 30231 30313 30390 30570 31791 34965 35531 #>  [3409] 36373 36733 38463 39171 40247 41226 41309 41822 42179 45336 46234 46715 #>  [3421]   147   180   263   351   409   481   904   944  1013  1157  1234  1313 #>  [3433]  1431  1481  1618  1939  2796  2931  3063  3152  3242  3370  3391  3433 #>  [3445]  3703  3813  4144  4197  5095  5347  5823  5992  6932  7590  7629  8688 #>  [3457]  8723  8795  9826  9967 10014 10805 11959 12000 12448 13090 14249 15106 #>  [3469] 15207 16194 16972 17194 17445 17969 18097 19656 19825 20912 21241 21774 #>  [3481] 22179 24404 24554 25152 25804 26041 27701 27919 28074 28716 28956 29427 #>  [3493] 29504 30082 30164 31692 32322 33876 35187 35356 36651 37436 37784 38729 #>  [3505] 39551 39810 40001 40686 41745 44153 45337 46046 46545 47135 48361 48651 #>  [3517]    87   130   181   191   196   373   482   521   543   762   934  1014 #>  [3529]  1113  1275  1502  1561  1855  1873  2191  2879  3289  3836  3910  4452 #>  [3541]  4709  4804  5269  5473  6275  6348  7035  7204  7854  8149  8185  8363 #>  [3553]  8574  8689  9515 10164 10361 10970 11019 12113 12309 12449 12977 13030 #>  [3565] 13442 14349 14836 15579 17659 18343 19201 19278 19826 20357 22588 22862 #>  [3577] 23018 23080 23420 23621 23764 24255 24629 25153 26261 26482 26631 26998 #>  [3589] 27419 27842 28075 28717 29876 30232 30719 32022 35047 35357 35532 36287 #>  [3601] 36374 36468 38291 38370 41392 42459 43537 44246 44350 44443 45018 45611 #>  [3613] 46716 47313 48156 48461 48852 49140   103   125   148   159   251   416 #>  [3625]   565   610   617   823   845  1114  1562  1582  1940  2255  2578  2839 #>  [3637]  2907  3544  3858  4145  4255  4395  4769  5142  5232  5718  6820  7036 #>  [3649]  7069  7167  7205  7248  7372  7630  7744  7855  8538  9148 10878 10971 #>  [3661] 11344 11909 12266 12411 12835 12978 14250 16675 17660 17913 17970 18216 #>  [3673] 18702 19202 19390 19827 20291 20913 21046 22103 22661 22795 23765 24555 #>  [3685] 24698 25154 26632 28076 29359 32323 32895 33144 33473 34219 35616 35771 #>  [3697] 36288 36898 37437 39078 39352 40097 41051 41227 41502 42917 43726 44351 #>  [3709] 44444 44550 45019 45952 46235 47405 47946 48249    97   131   164   300 #>  [3721]   312   410   434   501   799   861   872   887  1003  1115  1332  1351 #>  [3733]  1365  1874  1898  1921  2579  2592  2767  2950  3268  3346  3485  3545 #>  [3745]  3887  3937  4530  4689  5204  5348  5689  6242  6384  6678  6711  6748 #>  [3757]  7815  8047  8150  8239  8690 10114 11659 12726 13338 13770 14251 14293 #>  [3769] 14398 15045 15256 15412 15683 16431 16559 16740 17243 17606 18764 19657 #>  [3781] 20472 23486 24192 24556 24927 26115 26401 26860 27075 28317 28553 29101 #>  [3793] 29585 31871 33065 34471 35188 36289 36469 36562 37860 38550 39913 40248 #>  [3805] 40332 40415 40958 43727 45020 45787 45953 48057 48157   192   334   397 #>  [3817]   522   544   573   800   905  1235  1724  1742  2004  2127  2279  3110 #>  [3829]  3570  4115  4146  4226  4256  4283  4303  4396  4968  5533  5560  5719 #>  [3841]  5993  6243  6276  6679  7704  8724  9379  9872 10269 10506 11710 12001 #>  [3853] 12056 12310 13141 13245 14133 14294 14568 14785 14880 15630 15845 16195 #>  [3865] 16311 16560 16919 16973 17788 17971 18031 18217 18703 19658 19962 20420 #>  [3877] 22032 22304 23487 26042 26920 27139 27273 28235 29267 30391 30720 31048 #>  [3889] 31285 31379 32490 33066 33145 33715 34626 34711 34784 35772 36290 36899 #>  [3901] 37785 38208 38730 38992 39552 40773 41746 42992 43728 44644 45134 45697 #>  [3913] 47030 47734 47947 48158 48362 48462 49375 49668 49767   104   444   523 #>  [3925]   636   741   824   862  1031  1453  1503  1899  1941  2069  2166  2550 #>  [3937]  2593  2715  2880  2908  3153  3290  4336  4490  5020  5177  5382  5441 #>  [3949]  5656  5954  6102  6349  6635  6749  7513  7705  7892  8364  8450  8660 #>  [3961]  8910  9066  9651 13091 13339 13503 14019 14252 14295 14456 14997 15257 #>  [3973] 15730 15785 16432 17195 19391 20096 21242 21643 22863 23141 24557 24767 #>  [3985] 27631 28166 29505 29586 30646 32023 32110 32575 34220 34299 35773 40098 #>  [3997] 40416 40774 41393 41503 42088 43629 43974 45532 46047   132   165   173 #>  [4009]   235   244   483   524   696   750   906  1432  1519  1779  2048  2144 #>  [4021]  2192  2237  2325  2527  3319  3434  3459  3859  4147  4257  4337  4397 #>  [4033]  4622  4738  5233  5593  5690  5824  5994  6026  6520  6636  7745  8691 #>  [4045]  8725  8762  8875  9326 10842 11062 11140 11185 11345 12727 12936 13504 #>  [4057] 13558 13771 14457 14516 15527 15786 16508 16616 18893 20845 21396 21580 #>  [4069] 23766 24768 26402 26483 26709 28167 29177 29360 29658 29951 31454 32576 #>  [4081] 33474 33643 34049 34380 34472 36813 37948 38209 38292 38817 39079 39553 #>  [4093] 39732 40171 40499 42372 42563 43729 44154 44352 45612 45954 47628 47735 #>  [4105] 48159 48547   197   205   222   502   545   637   742   907   935  1015 #>  [4117]  1032  1044  1131  1144  2429  2737  3626  3814  3860  4055  4304  5657 #>  [4129]  5825  5862  5891  7037  7431  8048  8082  8186  9191 10270 10362 10409 #>  [4141] 10972 11484 11568 11660 11768 12210 12646 13092 14458 14569 15528 15731 #>  [4153] 16376 17072 17914 18288 18519 20025 20292 20598 21047 23019 23081 23291 #>  [4165] 23358 23693 23767 24193 24630 24769 25071 26185 27140 27564 28388 29877 #>  [4177] 30647 31792 34300 34381 34550 34966 35048 35693 35942 36202 36563 36652 #>  [4189] 37256 37438 37861 38371 38551 38731 39733 39914 41661 44922 46442 47219 #>  [4201] 47406 48160   138   203   214   223   352   732   763   863  1236  1276 #>  [4213]  1314  2861  2881  3020  3347  3460  3514  3627  3837  4175  4425  4531 #>  [4225]  4593  4739  4805  5383  5620  5691  6750  7373  8661  8763  8953  9030 #>  [4237]  9516  9700  9921 10015 10211 10271 10879 11103 11141 11186 11528 11711 #>  [4249] 11910 12499 12600 12728 13505 14296 14719 15684 16433 16741 17021 18158 #>  [4261] 18704 18829 20779 21114 22376 22796 24256 24699 24999 25072 26043 26633 #>  [4273] 26999 28077 29952 30648 31693 33310 33796 34301 35107 36032 38732 39080 #>  [4285] 40172 40867 43075 43265 46048 48853   140   484   598   611   751   945 #>  [4297]  1016  1033  1092  1289  1688  1780  1797  2105  2528  2640  2685  3021 #>  [4309]  3392  3704  4453  4623  4770  4969  5270  6069  6139  6598  6960  7107 #>  [4321]  7134  7295  8325  8796  8832  8990  9380  9827  9922 10272 10316 11346 #>  [4333] 11661 12114 14881 15358 15413 15580 16377 16857 16974 18098 18218 18401 #>  [4345] 19033 19659 20652 20706 21048 21447 22033 22104 24405 25526 26634 26861 #>  [4357] 27420 28718 29032 29506 29878 30970 31049 31694 32671 34473 34967 35447 #>  [4369] 35533 36564 38372 39258 43815 44247 44749 44835 46137 46342 46819 47629 #>  [4381] 49141 49254   117   126   141   215   335   353   374   382   398   534 #>  [4393]   660   784   864  1381  1433  1482  1743  1942  1984  2005  2326  2430 #>  [4405]  2475  2615  3022  3086  3435  3571  3888  4148  4338  4970  5124  5349 #>  [4417]  5826  6070  6140  6521  6637  7206  7893  8049  8403  8491  8575  9788 #>  [4429] 10212 10451 10721 10927 10973 12002 12647 13825 14190 14350 14786 16138 #>  [4441] 16975 17718 18469 18830 19828 21516 21581 21644 22445 23768 24067 24770 #>  [4453] 25234 25527 26635 26793 27491 28797 31695 32190 33877 35108 35448 36033 #>  [4465] 36900 37343 39734 40099 40173 40333 40500 41310 42460 42918 43902 44057 #>  [4477] 46138 47630 48058   149   160   224   301   467   566   697   825   846 #>  [4489]   873  1017  1034  1183  1382  1434  2193  2342  2476  2862  3755  4284 #>  [4501]  4339  4624  4710  5143  5502  5790  5927  5995  6103  6680  7108  7706 #>  [4513]  7894  8619  8954  9480  9517  9736  9923 10675 11142 12003 12729 13031 #>  [4525] 13093 13142 13662 14134 14787 15107 15787 17915 18520 18576 19279 20599 #>  [4537] 22105 22377 23556 24126 27000 27141 27421 27565 29807 30490 30571 32024 #>  [4549] 33311 34712 35049 35860 35943 38210 38818 38993 40959 42373 42564 42919 #>  [4561] 43181 46546 46717 46820 47314 48652 48854   216   252   259   330   375 #>  [4573]   417   445   599   710   752   826   847   908  1315  1818  1875  1900 #>  [4585]  1943  2106  2238  2256  2280  2738  2768  3410  3653  3938  4198  5350 #>  [4597]  5384  6417  6961  7070  7135  7514  7816  8326  8576  9236  9652 11020 #>  [4609] 11394 11529 12730 13246 13918 14135 14459 15161 15359 16312 16858 17073 #>  [4621] 17607 18032 18099 18219 18645 18705 19082 19392 19898 21243 21323 22797 #>  [4633] 23694 24194 25000 25390 25726 25880 26044 26186 26794 26862 27001 27274 #>  [4645] 28631 28719 30314 30392 31126 31380 31872 34382 34713 36124 36565 39735 #>  [4657] 40960 41311 41662 41747 42752 43266 45231 45533 46925 47220 48161 48548 #>  [4669] 48750 49142   161   193   260   264   399   411   492   628   680   811 #>  [4681]   848   888   946  1061  1093  1601  1632  1798  1838  1944  2006  2305 #>  [4693]  2594  3436  3486  3598  3628  3815  3861  3990  4559  4881  5144  5178 #>  [4705]  5205  5416  5928  6071  6448  6899  7374  7591  7895  8111  8288  8726 #>  [4717]  9192  9701  9968 10317 10599 10757 10880 11021 11290 12161 12357 12546 #>  [4729] 13559 14020 14253 15108 15631 16139 16196 16434 16561 16676 16920 17130 #>  [4741] 19393 20168 21244 21898 22180 22589 23488 23917 24068 24127 24406 25654 #>  [4753] 26403 28078 28554 29721 30233 30315 30491 30649 32111 32982 34138 34714 #>  [4765] 35189 36375 38039 39259 39736 39915 40249 40592 41141 42461 43903 44155 #>  [4777] 45534 46139 48250 48363 48653   253   468   698   812  1417  1633  1675 #>  [4789]  2580  2840  3064  3111  3221  3572  3599  3680  3731  4176  4625  4944 #>  [4801]  6561  6858  7071  7672  8187  8327  8727  9737 10165 10645 13197 13714 #>  [4813] 14460 15162 15911 16197 16802 16921 16976 17381 17916 18577 19141 20653 #>  [4825] 20984 21049 21173 21702 22864 24325 24700 24771 25001 27843 27920 28318 #>  [4837] 28632 29268 29879 30083 30650 30793 30886 31609 34968 35617 35861 36901 #>  [4849] 37862 38123 38464 39439 40593 41052 43975 44750 45698 46443 47849 48855 #>  [4861] 49049 49376 49669   150   166   198   270   285   313   418   722   785 #>  [4873]   990  1132  1819  1985  2216  2281  2381  2739  2863  2932  3065  3654 #>  [4885]  4199  4711  4971  5061  5351  5561  5720  6562  6821  7072  7249  7332 #>  [4897]  7972  8013  8188  8404  8991  9237  9653  9969 10600 12211 13198 14788 #>  [4909] 14882 15360 16677 17074 17307 17382 17851 18220 18289 18765 19829 19899 #>  [4921] 20169 20293 20530 21775 22521 22590 23230 23622 23987 24326 26045 26710 #>  [4933] 27142 27996 28319 31286 32112 33716 34302 36376 36814 37512 37786 38373 #>  [4945] 39353 40417 40868 41504 41748 41992 42827 43076 43267 45135 45338 45867 #>  [4957] 45955 46718 48654 49670   194   199   204   225   324   786   889   991 #>  [4969]  1062  1158  1184  1303  1504  1725  1744  1762  1820  1839  2007  3112 #>  [4981]  3291  3437  3573  3732  4227  4626  4806  4858  4910  4945  5125  5352 #>  [4993]  5417  5503  5562  5621  5827  6170  7296  7467  8539  8728  8992  9970 #>  [5005] 11712 12884 12979 13199 13290 14622 16313 16859 17308 17608 20218 20600 #>  [5017] 20985 21245 22243 23082 27343 27773 29178 30084 31287 31531 32983 33475 #>  [5029] 33644 34303 34383 34969 35358 35944 36034 36815 37077 40002 40594 41749 #>  [5041] 42374 43630 44645 45232 47221 49671   206   296   400   493   555   585 #>  [5053]   773   787   813   962  1159  1201  1237  1418  1435  1856  2282  2477 #>  [5065]  2507  2551  2909  3154  3222  3348  3681  4305  4426  4740  4911  5062 #>  [5077]  5179  5442  6104  6449  7554  7856  8050  8492  8620  8662  8955  9149 #>  [5089]  9238  9327  9431  9518 10806 11187 11713 12057 12547 12776 12980 13143 #>  [5101] 13443 13715 13919 14998 16010 16378 16678 17022 17244 17661 18706 19034 #>  [5113] 19330 19588 19963 21448 21582 21839 22662 22865 24327 25073 25595 27422 #>  [5125] 27774 28320 28798 29033 29587 32577 32896 34050 35534 36291 37257 37439 #>  [5137] 37863 37949 38124 39260 41228 41663 41823 44923 45339 46343 48162 48942 #>  [5149] 49568   275   286   314   318   331   383   556   629   699   711   890 #>  [5161]  1343  1352  1505  1634  1707  2128  2257  2306  2343  2407  2769  2813 #>  [5173]  3756  4149  5145  5309  5658  5791  5863  6171  6385  6481  6681  7073 #>  [5185]  8112  8833  9150  9193  9432  9873 10601 11104 11347 12162 12212 13560 #>  [5197] 13716 14351 14517 15305 15414 15466 16011 16860 17131 18962 19203 19394 #>  [5209] 21449 22106 23557 23847 23918 23988 24128 24928 25655 26636 27844 27921 #>  [5221] 28236 29034 30887 31127 31610 31953 32984 35862 36035 37603 39737 40334 #>  [5233] 40687 41142 41664 42089 42272 42650 43349 43631 45233 45535 45956 46926 #>  [5245] 47736 47850 48364 48463 49050   182   297   336   354   426   849   891 #>  [5257]   920  1018  1483  1520  1821  2028  2049  2217  2307  2327  2454  2478 #>  [5269]  2686  2740  2951  3193  3574  3629  3757  3794  3911  4177  4992  5534 #>  [5281]  6482  6522  7168  7207  7857  8493  8692  8797  8834  9031  9433  9519 #>  [5293]  9564  9874 10549 10928 10974 11530 11868 12937 14518 14940 15163 15467 #>  [5305] 15581 15632 15732 16617 16922 17023 17196 17309 17789 20294 20421 20780 #>  [5317] 21050 22446 22721 23421 23558 24195 25528 26333 26711 26863 27702 30651 #>  [5329] 31208 32491 33797 34304 34551 35449 35535 36036 38040 38994 39172 39440 #>  [5341] 40100 40418 43904 44751 47948 48365 49143 49473   332   390   469   485 #>  [5353]   503   909   947   977   992  1172  1185  1583  1922  1967  2218  2258 #>  [5365]  2382  2616  2797  2864  3243  3292  3438  3461  3862  3991  4367  4560 #>  [5377]  4659  4712  4807  5063  5418  5757  5892  6350  6418  6933  8494  8835 #>  [5389]  9194  9434  9924 10807 10975 11348 12836 13772 13920 14720 14941 16012 #>  [5401] 17383 17549 18521 18646 19331 20846 21703 22866 23083 24129 25235 27002 #>  [5413] 27423 27492 28237 28555 29179 30316 30888 31288 32813 33146 33312 33798 #>  [5425] 35359 35863 36734 36989 37513 38640 39354 40003 40869 41053 43632 43905 #>  [5437] 44156 44248 44836 45234 45441 47222 49474 49569   183   287   319   391 #>  [5449]   486   515   574   874   963   993  1173  1419  1436  2145  2408  2508 #>  [5461]  2617  2991  3487  3575  3705  3816  3863  4150  4882  5206  7375  8151 #>  [5473]  9654  9828 10273 10550 10758 11242 12450 13384 13613 13717 13773 14191 #>  [5485] 14461 14883 15468 16435 16742 16803 17384 17972 18402 18831 18894 19142 #>  [5497] 19280 20422 20707 20914 21115 21583 22244 22522 23020 23231 23848 24558 #>  [5509] 25467 25529 25596 26046 26404 30492 34474 35360 39916 41054 41394 42462 #>  [5521] 43350 45235 45613 47949 48655   188   236   254   265   271   364   470 #>  [5533]  1145  1160  1202  1619  1745  1781  1986  2029  2328  2409  2952  3630 #>  [5545]  3682  4090  4427  4491  5385  5474  5893  5955  6210  6277  6822  6900 #>  [5557]  7929  8621  8956  9239 10166 10363 11188 11823 12311 13032 13444 13826 #>  [5569] 14075 14942 14999 15109 15733 15846 16140 16679 16861 16977 19083 19281 #>  [5581] 20781 20986 21397 22523 22722 24407 25317 25966 26262 26405 26864 27076 #>  [5593] 27566 28799 29269 31954 32025 32985 33225 33645 35190 40501 43433 43976 #>  [5605] 44353 44445 47031 48251 48656   226   266   315   458   567   712   964 #>  [5617]  1116  1353  1454  1466  1521  1539  1563  1620  1708  1840  2167  2509 #>  [5629]  2618  2770  2953  3050  3864  4025  4492  4594  4883  5021  5096  6712 #>  [5641]  7136  7333  7773  7973  8240  8365  8693  8729  8836  9328  9565 10167 #>  [5653] 10410 10551 11437 12777 12981 13200 13718 14721 15415 15633 15734 16379 #>  [5665] 17973 18033 18159 18963 21324 21964 22034 23769 24478 24772 24929 26187 #>  [5677] 29428 29507 31696 31793 32191 32672 33566 34970 36735 38903 39081 40688 #>  [5689] 43633 43977 44157 45868 46236 47631 47737   245   288   446   471   487 #>  [5701]   681  1045  1174  1214  1249  1277  1383  1726  1923  2308  2383  2479 #>  [5713]  2882  2975  3293  3393  3733  3758  3966  4026  4151  4454  4912  5022 #>  [5725]  5064  5443  5721  6278  6483  6638  7555  7817  9195  9520  9566 10318 #>  [5737] 10976 11022 11662 12213 12837 13094 14136 15416 16436 16562 17075 17132 #>  [5749] 17385 17917 18160 18290 18964 19332 19700 20026 20097 20170 20847 21174 #>  [5761] 21398 21584 21965 22798 23359 24559 24848 25468 25967 26406 27275 27424 #>  [5773] 29270 29429 29588 29659 29880 30393 31050 32897 33390 35945 36902 37344 #>  [5785] 37864 38293 39082 39917 40250 40961 41993 42273 43077 43268 46821 48252 #>  [5797] 48549 49144   237   272   276   600   764  1019  1063  1333  1522  1857 #>  [5809]  1901  3023  3371  3683  3734  5023  5386  5956  6563  6599  7038  7468 #>  [5821]  8451  9278  9329  9702 10274 10552 10808 11189 11621 12214 12267 12358 #>  [5833] 12982 14137 14943 15954 16618 17550 18161 18221 19204 19395 20027 20423 #>  [5845] 21645 21840 22107 22245 22305 23422 24069 24130 24408 24701 25391 25530 #>  [5857] 26047 26484 26921 29035 29102 29508 30493 32492 32814 33476 33878 34051 #>  [5869] 34971 35050 35109 36377 37258 38294 38552 39738 39811 40502 41917 42274 #>  [5881] 43538 43634 44837 45699 47032 47223 47407 48464   246   289   546   601 #>  [5893]   650   936   965   978  1094  1278  1689  1822  1876  2107  2259  2431 #>  [5905]  2663  2741  2814  2910  3087  3133  3194  3294  3320  4595  5065  5504 #>  [5917]  5622  5722  6027  6564  6901  7707  7930  8730  9151  9330  9381 10275 #>  [5929] 10452 10602 11063 11395 11531 12004 12215 12312 12359 12731 13291 13774 #>  [5941] 13827 14192 15735 17245 17446 17497 17719 18100 18162 18344 18707 20473 #>  [5953] 23423 25597 26795 29180 30572 30889 31955 33226 33879 34221 34627 35110 #>  [5965] 35450 35694 35774 37259 37695 38295 38733 38819 40174 41505 41824 42463 #>  [5977] 42753 43978 44551 45614 46140 47224 48550 49377   227   255   277   355 #>  [5989]   376   504   516   547   557   602   765   801   814   865   937  1727 #>  [6001]  1799  1841  2384  2432  2480  2619  2687  2865  2992  3462  3838  3939 #>  [6013]  4056  4368  4741  4884  5271  5353  5792  5996  6211  6523  6823  7376 #>  [6025]  7931  9331  9521  9971 10059 10603 10977 11532 12005 12268 12938 13144 #>  [6037] 13340 13445 14519 14667 15208 15529 15634 16198 16261 16619 17024 17076 #>  [6049] 17246 17386 17790 17974 18403 18766 18965 19205 19459 19701 20171 20531 #>  [6061] 20708 20782 21646 22108 22306 23142 23232 23919 23989 25074 25805 26637 #>  [6073] 27344 27845 27997 29509 29722 31051 32403 33880 34052 37078 39554 39812 #>  [6085] 39918 41055 41229 41312 47632 48163 48366 48465 48751   247   377   438 #>  [6097]   488   494   661   713   802   815   834   948   979   994  1186  1354 #>  [6109]  1437  1484  1564  1635  1728  2219  2688  3195  3295  3349  3631  3735 #>  [6121]  4493  4829  5354  5623  6028  6313  6600  6859  7377  7631  7932  8152 #>  [6133]  8189  9655  9703  9972 10060 10319 10604 10929 11243 11769 12163 12269 #>  [6145] 13446 13614 13961 15258 15736 15788 16013 16563 17387 17918 18101 18966 #>  [6157] 19035 19523 19702 20219 20915 21647 22307 22447 22799 22946 23559 25002 #>  [6169] 25155 25392 25656 28321 28800 29036 32026 32324 33391 33717 34715 35618 #>  [6181] 40775 41395 42565 42651 43816 43906 43979 45136 45236 45340 46822 47136 #>  [6193] 47315 48551   302   320   365   392   505   638   850   921  1064  1260 #>  [6205]  1438  1584  1690  1800  1945  2641  2742  2815  3839  3992  4057  4116 #>  [6217]  4178  4428  4455  4885  4972  5097  5234  5272  5624  6029  6072  6141 #>  [6229]  6279  6351  6682  6713  6786  7774  7933  8153  9789  9875  9973 10061 #>  [6241] 10115 10411 11824 14193 14297 15209 15469 15530 17077 17133 17662 17919 #>  [6253] 17975 18832 20098 20709 20916 21966 22109 23623 25393 25806 26263 26865 #>  [6265] 28389 28881 28957 29723 29808 30165 30494 31209 32027 32404 33718 33799 #>  [6277] 36736 37079 37260 38125 38734 38995 39919 40335 41056 43269 47851 49378 #>  [6289]   278   495   575   788   866   922   949  1035  1146  1187  1215  1366 #>  [6301]  1439  1506  1523  1585  1946  2620  2743  2993  3066  3350  3439  3488 #>  [6313]  3889  4027  4306  4456  4596  5864  7109  7673  7775  7934  8190  8366 #>  [6325]  9925 10364 10412 10809 10930 11105 11960 12778 13033 13719 13962 14570 #>  [6337] 16262 18034 18647 18767 18967 19143 19460 19589 20028 20099 21051 21325 #>  [6349] 21585 22110 22308 22591 23770 24257 24328 24409 24631 25531 26552 30234 #>  [6361] 30721 30794 31128 32113 32986 33147 33227 33392 34139 34867 35111 35536 #>  [6373] 36292 36566 39173 39441 39813 40595 43351 44354 45442 47513 48552   321 #>  [6385]   447   455   506   568   612   630   700   774   816   851  1203  1334 #>  [6397]  1540  1987  2070  2358  2664  2866  3576  3632  3655  4028  4398  4742 #>  [6409]  4886  5126  5419  5723  5957  6524  6751  6860  6902  6985  7378  7592 #>  [6421]  8113  8622  9738 10016 10320 10453 10605 10931 11143 11244 11663 13447 #>  [6433] 13506 13874 13921 13963 14076 14462 14722 15361 15685 16014 16380 16862 #>  [6445] 17852 17920 18404 18578 19144 19396 19964 20172 21450 21704 22448 22947 #>  [6457] 23021 23143 26712 27196 27276 28390 28882 30023 30971 32405 33800 34384 #>  [6469] 36653 36990 38374 38465 42920 43352 43730 44058 44249 44446 44646 46444 #>  [6481] 46547 46823 47514   340   393   558   586   662   733   743   875   966 #>  [6493]   980  1161  1216  1261  1316  1367  1405  1621  1676  1924  2146  2260 #>  [6505]  2455  2642  2665  2771  2911  3372  3394  3684  3795  4340  4627  4830 #>  [6517]  5758  5894  6030  6352  7074  7708  7935  8405  8577  9240  9382  9567 #>  [6529]  9656  9790  9829  9876  9974 14021 14138 14399 15110 16437 17025 18035 #>  [6541] 18768 18895 19282 19767 20029 20173 20987 22800 23022 23292 25003 25394 #>  [6553] 26796 27143 27998 28322 28391 28801 28883 29430 30166 30972 31611 31794 #>  [6565] 37604 38375 39083 40251 40962 41143 41506 42275 44447 44838 44924 46548 #>  [6577] 47408 48059 48367 48657 49672   261   341   378   384   448   576   734 #>  [6589]   876   938   967   995  1004  1095  1162  1188  1262  1763  2050  2129 #>  [6601]  2194  2433  2643  2689  2954  3067  3155  3656  4307  5505  5997  6861 #>  [6613]  7208  7776  7974  8993  9522  9830 10017 10454 10759 12360 13145 13201 #>  [6625] 13964 14022 14139 14352 14571 14723 14884 16083 16438 16509 16680 17134 #>  [6637] 18345 19397 20424 20848 21326 21399 21705 22449 22723 24479 27277 27345 #>  [6649] 27493 30024 30167 30317 31289 33148 35361 35946 37164 38376 39355 40175 #>  [6661] 40503 42566 42652 43635 44752 45957 46927 49379   290   325   379   449 #>  [6673]   489   525   663   892   981  1485  1746  2581  2690  2883  3321  3489 #>  [6685]  3993  4532  4561  4808  4859  4946  5127  5895  6484  7209  7379  8191 #>  [6697]  8452  8623  8694  9032  9196  9332 10168 10843 10881 11144 12115 12885 #>  [6709] 12939 15046 15686 15912 15955 16923 17447 17663 17720 18346 18405 19703 #>  [6721] 19830 19965 20030 20783 22867 23624 24560 24702 24773 24849 25532 25727 #>  [6733] 25881 25968 26264 26713 27278 28556 30394 31532 31697 32192 32815 33477 #>  [6745] 33646 34475 34552 34868 35112 35451 36293 36470 36737 36903 39442 39739 #>  [6757] 40689 41057 41313 41396 41596 41918 42276 43731 43980 45021 46719 47633 #>  [6769]   316   380   535   664   893   923  1096  1440  1877  1902  2772  3269 #>  [6781]  4058  4660  4809  5098  5535  5692  5759  6172  6824  7169  7515  7556 #>  [6793]  7632  7709  9241  9333  9568 10321 10810 10844 10932 11023 11664 11911 #>  [6805] 12164 13095 13247 13292 13775 14298 14837 16439 17135 18222 18347 18470 #>  [6817] 18896 19398 19461 19704 19966 20917 21116 23771 24329 24480 24703 24930 #>  [6829] 25156 27144 28633 29181 29724 30168 30973 32493 32739 33881 34140 34869 #>  [6841] 35191 38466 39740 39814 40336 40596 40870 44839 45237 47515 49051 49380 #>  [6853] 49768   279   291   326   548   587   618   817   996  1005  1036  1368 #>  [6865]  1384  1645  1747  2168  2283  2691  3024  3244  3463  3657  3736  3940 #>  [6877]  4341  4457  4533  5235  5420  5659  5724  6485  6639  6787  7137  8114 #>  [6889]  8663  9197  9383  9523  9657  9704  9877 10062 10365 10760 11245 12361 #>  [6901] 12500 13096 13776 13965 14353 15047 15164 15687 16199 16681 16924 17197 #>  [6913] 18291 18579 18833 20474 20654 21175 21706 23023 25157 25395 26116 26188 #>  [6925] 27197 28884 29725 30169 30890 31129 31210 31795 33478 34222 34716 35362 #>  [6937] 36816 37514 37865 38126 39555 40504 41314 43434 45137 45958 46928 47137 #>  [6949] 47225 48943   317   337   385   577   631   639   682   701  1046  1078 #>  [6961]  1097  1217  1279  1304  1441  1662  1748  1823  1947  2108  2195  2385 #>  [6973]  2552  2644  2666  2744  2884  2933  3223  3490  3633  3941  4179  4342 #>  [6985]  4810  4831  5310  5865  5958  6752  6862  6986  7170  7380  7633  7674 #>  [6997]  8289  8624  9242  9524 10063 10322 11396 11438 11485 11665 12548 12648 #>  [7009] 13385 14194 14254 14400 17310 18708 18968 19206 19590 21586 21841 22592 #>  [7021] 23920 24410 25598 26117 26265 26714 26797 27846 27922 27999 28885 28958 #>  [7033] 30395 31698 32673 32816 33479 33567 34141 34223 34305 34385 34972 35051 #>  [7045] 36294 37080 39174 42567 47950 48553 48856   459   472   507   559   578 #>  [7057]   632   651   665   723   950  1037  1147  1163  1175  1250  1335  1406 #>  [7069]  1858  1968  2030  2086  2456  2481  2716  3351  3440  3759  3817  4285 #>  [7081]  4494  4887  4947  5180  5444  5536  5594  5828  5866  7171  8115  8192 #>  [7093]  8241  8957  9791  9926 11825 12006 12165 12649 12838 13663 14299 14520 #>  [7105] 15789 16564 16743 18406 20031 20710 21117 22181 22450 24258 25158 25657 #>  [7117] 25882 26798 27003 27145 27425 28079 28802 31211 32898 34476 36203 36567 #>  [7129] 36904 37345 38641 39443 39556 39815 42653 43435 43539 44925 45959 46929 #>  [7141] 47634 49145 49255   303   439   735   924  1065  1385  2261  2885  2994 #>  [7153]  3025  3088  3196  3411  3577  3658  4091  4117  4562  4743  5311  5959 #>  [7165]  6714  6825  8193  8625  8764  9110  9525  9569  9792  9878 10455 10507 #>  [7177] 10722 10978 11024 11145 11714 13097 13386 14255 14521 15165 16314 16744 #>  [7189] 17198 17551 17609 18036 19145 19283 20358 21246 21451 22035 22246 22948 #>  [7201] 23084 23233 25004 25318 25396 26922 27004 27632 28886 30652 31381 32325 #>  [7213] 34386 34717 35113 35775 36568 36738 37696 40597 41507 41825 42654 43436 #>  [7225] 43817 45700 45960 46141 46824 47852 48060 48658 48752 48857 49146   613 #>  [7237]   619   666   789  1047  1251  1455  1524  1988  2773  3134  3967  4563 #>  [7249]  5024  5236  5355  5563  7075  7516  7777  8154  8453  9067  9198  9384 #>  [7261] 11025 11246 11349 11715 12116 13341 13387 13875 14023 14195 15913 16200 #>  [7273] 16381 16440 16745 16978 18407 19084 19768 21247 22451 22524 22593 23024 #>  [7285] 23560 24196 25599 26715 27279 27847 28000 28634 28720 29182 29589 30025 #>  [7297] 30495 31382 31873 32674 33719 33963 34306 34387 34870 35272 35619 36654 #>  [7309] 37081 37950 39557 39816 40690 41144 41994 43907 46142 46237 47226 47738 #>  [7321] 48061 49147   366   560   640   818   968  1038  1148  1204  1290  1824 #>  [7333]  1925  1969  2359  2482  2717  3352  3796  4495  4661  5564  5960  6105 #>  [7345]  6142  6450  6525  7432  7896  8406  8495  8911 10213 10553 10606 10646 #>  [7357] 10676 10882 11486 13342 14196 14354 14401 14789 15956 16315 16863 18580 #>  [7369] 19036 20220 22801 22868 23144 23293 23921 24330 26638 26923 29726 30026 #>  [7381] 30891 31290 31455 33568 35620 36817 37165 38211 39817 40691 41508 42180 #>  [7393] 42568 44059 44355 44647 45341 45536 45961 46238 46549 46625 47033 47516 #>  [7405]   342   356   386   579   603   852  1280  1369  1801  1842  1878  2130 #>  [7417]  2284  2309  2798  2886  3156  3296  3578  3706  3968  3994  4228  4564 #>  [7429]  4713  4771  4811  5725  6565  6987  7210  7381  7746  7936  8014  8407 #>  [7441]  8798  8958  9033  9199  9705 11622 12362 12732 12839 12886 13248 13615 #>  [7453] 14024 14197 14522 15259 15635 16263 17247 17498 17552 18522 18834 21452 #>  [7465] 23561 23772 23849 24070 25319 26048 26407 26553 26866 29271 29361 29510 #>  [7477] 31291 31796 32740 35192 36125 37166 37346 38820 39656 40598 40692 42655 #>  [7489] 42993 43437 45022 46143 46239 48753 49148   835  1020  1117  1291  1622 #>  [7501]  1691  1764  1859  1879  1903  2131  2457  2887  3157  3245  4308  4399 #>  [7513]  4597  6031  6640  6934  7517  7557  7675  8454  8540  8876  8912  9975 #>  [7525] 10845 11666 11961 12501 12733 13507 13828 15417 15531 15636 16382 16925 #>  [7537] 17248 18163 18292 19085 19967 20174 20849 22111 23424 23489 23695 24850 #>  [7549] 25883 26189 26266 26485 27567 27923 28001 28080 28168 29809 33964 34053 #>  [7561] 34477 36126 36569 36655 42921 43182 43732 44356 49052 49570   343   381 #>  [7573]   404   549   620   836   939  1149  1281  2169  2196  2386  2529  2745 #>  [7585]  2912  2976  3026  3353  3412  3760  4258  4343  4948  5066  5099  5273 #>  [7597]  5387  5660  5929  6753  6935  7039  8328  8731  8765  8913  9481 10169 #>  [7609] 10811 10979 11247 11716 11962 12117 12363 12412 12601 12650 13293 14025 #>  [7621] 14077 14198 14300 15847 16015 17388 17610 17921 18037 18164 18293 18408 #>  [7633] 18897 19086 19399 20711 21327 21587 21899 22247 22949 24197 24481 24632 #>  [7645] 25600 25728 26408 27703 28392 28557 28635 29103 30085 30892 31052 32193 #>  [7657] 33313 34553 35363 35695 37440 38904 39444 41750 43636 43818 44060 44926 #>  [7669] 45138 45238 46445 46626 48554 48659 49053 49256   508   526   588   744 #>  [7681]   837  1079  1133  1407  1692  1948  1970  2239  2645  2667  3297  3600 #>  [7693]  3840  4152  4369  4534  5421  6212  6280  6962  7138  7469  8051  9111 #>  [7705] 12549 12734 16084 16316 17249 17721 18223 18471 18969 19207 19284 20425 #>  [7717] 21176 21328 21453 22869 23773 24131 24774 25469 25533 25969 26334 26409 #>  [7729] 28081 29810 29881 30496 31212 31383 31956 32028 33480 34628 35621 37082 #>  [7741] 38041 38212 38467 39920 42828 42922 43540 43819 45342 45788 46550 46720 #>  [7753] 47316 47635 49149 49769   357   450   473   683   714   724   894  1048 #>  [7765]  1646  2071  2774  2995  3413  3601  3707  3995  4286  4714  4832  4913 #>  [7777]  5312  5565  5661  5793  5867  7110  7250  8052  8578  9152  9200  9243 #>  [7789]  9879 10980 12118 12364 12550 13034 13294 13720 13829 14572 14724 17553 #>  [7801] 17611 20175 20359 21329 21776 22248 23085 23145 23234 25236 26190 27077 #>  [7813] 27924 28002 28393 28959 30396 31292 31797 32899 33393 33720 33801 33965 #>  [7825] 34224 34785 34973 37261 38553 38905 39558 39657 41058 41397 41919 42994 #>  [7837] 43438 45023 47853 48164   527   725   736   745   766   775   877  1066 #>  [7849]  1118  1408  1507  1565  1802  2008  2132  2553  3027  3322  3602  4092 #>  [7861]  4309  4458  4662  4690  4772  4993  5207  5566  5625  5961  6032  6073 #>  [7873]  6526  6715  7251  7382  7518  7975  8541  9153 10064 10413 11190 12007 #>  [7885] 12058 12502 12551 12651 15210 15260 16441 16804 17722 18835 19831 20360 #>  [7897] 20532 21248 21517 22249 23235 24331 25397 25884 26639 29511 31384 32114 #>  [7909] 33067 34142 35452 35947 36656 37515 38906 40693 41145 41597 41665 42277 #>  [7921] 44840 45615 46344 47034 49381   419   667   746   895   969  1119  1205 #>  [7933]  1677  1749  2009  2582  2668  2718  3579  3797  4059  4310  4429  4860 #>  [7945]  5356  5794  5930  6033  6903  6988  7676  7937  7976  8496 10323 11064 #>  [7957] 11106 12503 12552 12602 13249 13721 14301 14725 15166 15418 16085 16620 #>  [7969] 17311 18348 19660 19769 22182 22309 23990 24071 25658 26335 27005 27198 #>  [7981] 27426 27704 28803 29272 29660 29727 31053 31456 32029 32578 32741 33721 #>  [7993] 34388 34478 35537 35622 36204 40505 41995 42754 42995 46345 46930 48660 #>  [8005] 49257   427   509   536   910  1021  1263  1317  1729  1843  1904  2220 #>  [8017]  2387  2410  2483  2816  2913  3224  3414  3546  3634  4093  4259  4535 #>  [8029]  4715  4773  4914  4994  5475  6034  6386  6486  6527  7172  7334  7519 #>  [8041]  7593  8116  8194  8837  9112 11569 11717 11912 12840 12983 13035 13388 #>  [8053] 14402 14623 16016 17312 17554 17664 17853 18836 19832 20655 20712 21842 #>  [8065] 22183 22452 22594 22724 22950 25075 26554 27078 27705 27925 29431 30170 #>  [8077] 30235 30795 32817 33149 33228 35696 36818 40004 40101 40506 41146 42181 #>  [8089] 42656 43270 46144 49150 49382   652  1370  1386  1467  2147  2170  2554 #>  [8101]  2595  3464  3515  3942  4200  4774  4949  5128  5274  5313  5388  5506 #>  [8113]  6281  6487  7211  7858  8732  8994  9334  9435  9739  9831  9976 10170 #>  [8125] 10324 10883 11350 11439 12270 14026 14403 15211 15637 15737 16383 16442 #>  [8137] 16746 17078 17389 17791 17922 18038 18709 20713 21249 21330 21967 22036 #>  [8149] 22250 23294 23774 24132 24198 25601 26049 26716 26924 28323 28960 30027 #>  [8161] 32194 34871 36819 37347 38377 38907 39356 39559 40963 41509 42464 44158 #>  [8173] 44250 46446 47035 48944   510   528   569   684   940  1264  1636  1647 #>  [8185]  1782  1880  2010  2360  3225  3465  3818  4287  4565  4775  5237  5357 #>  [8197]  5389  5726  5868  6282  6314  6528  7470  7634  7710  7818  7977  8838 #>  [8209]  8959  9832  9977 10018 12166 12365 12553 12735 13922 15000 15167 15638 #>  [8221] 16201 16264 16864 16926 16979 18294 18349 18769 19333 19833 20176 20918 #>  [8233] 20988 21454 22037 22251 23991 24332 25159 25320 25885 26925 27633 27926 #>  [8245] 28636 30236 30397 30573 31957 32195 33229 33802 33882 34225 36127 36657 #>  [8257] 37516 37605 37787 37951 38213 38296 38821 40419 40776 41059 42996 43981 #>  [8269] 44552 45616 46145 47036   405   420   641  1189  1218  1344  1442  1525 #>  [8281]  1566  1586  1693  1709  1730  1765  1905  2148  2692  3298  3373  3635 #>  [8293]  3685  3737  3912  3996  4153  4598  4691  4995  5314  5507  5795  5896 #>  [8305]  6244  6315  6387  6641  7111  7938  8053  8455  8839  9482  9658 10065 #>  [8317] 10171 11623 12008 12059 12940 14078 14140 14885 14944 15738 17079 17499 #>  [8329] 17723 18581 18710 19770 20784 21118 21250 22184 22802 22951 24259 26410 #>  [8341] 27568 27775 28169 29183 29953 33647 34974 35052 35864 36205 37348 38822 #>  [8353] 40252 40871 41996 42569 44648 49151   440   633   790   925  1067  1355 #>  [8365]  1541  1906  2434  2458  2746  3323  3943  4029  4566  5238  5275  5422 #>  [8377]  5796  5829  5998  6074  6353  6601  6989  7383  7433  8766  9154  9201 #>  [8389]  9335  9483 10019 10366 10607 11667 11770 11826 12167 12313 12736 15306 #>  [8401] 15790 16317 16443 17080 18039 18770 19146 19591 20032 20221 20714 21251 #>  [8413] 22803 22952 23775 24199 24633 24851 25886 26050 26118 26717 26799 27346 #>  [8425] 27634 27776 29184 29954 30574 31385 31457 31533 31874 33068 33230 33481 #>  [8437] 36295 36739 36820 36905 38042 39357 39560 40005 42465 44159 44927 47517 #>  [8449] 48368 49571   460   511   550   838   878   911  1318  1345  1356  1456 #>  [8461]  1486  1542  1783  1881  2031  2262  2411  2621  2669  2747  2841  3028 #>  [8473]  3491  3708  4030  4094  4370  4776  5626  5693  5830  6075  6316  6602 #>  [8485]  6863  6990  7434  7778  8083  8117  8626  8799  9202 10367 10508 10647 #>  [8497] 10884 11440 11487 11624 12216 12271 12554 12652 12737 12941 13146 13616 #>  [8509] 14302 14624 15168 15419 15957 16202 16980 17792 18040 18711 19037 19087 #>  [8521] 19400 19834 20222 20295 20850 21400 21455 21968 22378 23146 23625 23776 #>  [8533] 23992 24852 25534 27199 28324 29273 29590 30796 31534 32196 32494 32675 #>  [8545] 33482 33883 34054 35865 37788 38735 42657 43541 44753 44928 48165 49258 #>  [8557] 49475   517   570   604   653   951  1068  1176  1543  1567  1602  1882 #>  [8569]  2051  2510  2530  2996  3089  3761  3841  3913  4744  4973  5067  5100 #>  [8581]  5390  5662  5727  5797  6388  6826  6936  7252  7711  8497  8695  8840 #>  [8593]  9740 10214 11441 11718 11869 12451 12887 13202 14256 14790 14838 15001 #>  [8605] 15111 15212 15470 15582 16265 17136 17500 17724 18041 18295 19334 20475 #>  [8617] 21456 22185 22453 22725 25076 26718 27006 28238 29811 30171 30653 33394 #>  [8629] 33648 34055 36037 36206 36378 37697 38378 38823 39261 39658 42658 45701 #>  [8641] 46049 46240 46346 46551 46825 47317 49259   441   621   668   685   726 #>  [8653]   753   853   896   952  1049  1098  1120  1134  1238  1989  2052  2149 #>  [8665]  2221  2329  2435  2646  3270  3914  4260  4400  4745  5025  5239  5423 #>  [8677]  5445  5728  5931  6317  6716  6963  7139  7173  7335  7897  8155  8290 #>  [8689]  8627  9336  9833 10215 10456 11488 12009 12314 12452 14027 14199 14726 #>  [8701] 15169 15307 15639 16086 16318 17976 18523 19335 19524 20533 21119 21331 #>  [8713] 21843 22310 23147 26336 27079 28325 29812 30172 30497 31458 33395 33569 #>  [8725] 33649 33722 34718 35866 37167 37866 38736 38824 39818 40420 41398 43439 #>  [8737] 45239 45343 45869 45962 46241 48253 48661 48754 49572   442   614   669 #>  [8749]   715   767   791   879  1039  1346  1420  1623  1990  2150  2361  2555 #>  [8761]  2775  3226  3441  3636  3890  4031  4261  4459  4567  4812  5068  6076 #>  [8773]  6283  6318  6451  6991  7859  8195  8456  9155 10066 10172 11489 12060 #>  [8785] 13343 13664 13830 14079 14200 15583 16747 17725 18350 19147 20785 20989 #>  [8797] 21052 21648 21707 22525 22953 23993 25005 25970 26051 26640 27280 28887 #>  [8809] 29185 32579 33231 33803 34226 34389 34629 35053 35453 36207 37517 37606 #>  [8821] 37789 38468 39561 40872 43440 44841 45139 45344 46721   496   686  1526 #>  [8833]  1603  1926  1949  2072  2197  2285  3029  3113  3374  3395  3762  3915 #>  [8845]  4118  4311  4536  4628  4746  4861  5208  5315  5537  5567  5663  5932 #>  [8857]  6529  6937  7819  8084  8542  8877  9156  9244  9611 10276 11570 11827 #>  [8869] 12603 13508 14080 14201 15002 15791 16319 16748 17726 18224 19401 20100 #>  [8881] 20851 21120 21177 24634 25535 26411 27427 27706 28239 29591 30028 30974 #>  [8893] 31213 32326 32580 32818 35114 35193 36570 36991 37083 38379 39445 40964 #>  [8905] 41666 42755 43441 45537 46627 47854 49054 49770   854  1040  1637  1927 #>  [8917]  1950  2310  2511  2622  2997  3090  3158  3547  3659  3997  4862  5627 #>  [8929]  5798  5962  7140  7898  8015  8196  8457  8579  8628  9034  9113  9741 #>  [8941]  9793 10020 10414 10554 11146 11291 11351 12119 12555 12604 12653 13344 #>  [8953] 13509 14573 14727 14945 15532 16017 16805 17199 18102 18837 19148 20101 #>  [8965] 20919 21588 22038 22112 22379 23777 25807 27007 27494 27569 27927 29186 #>  [8977] 29882 30318 30398 30654 30722 32115 34479 34786 35948 36296 36658 37084 #>  [8989] 38127 38214 38297 39175 39446 41060 41826 42997 44754 45345 46447 46628 #>  [9001] 46826 46931 47636 49771   571   727   754   997  1135  1164  1219  1604 #>  [9013]  1624  1883  2011  2073  2198  2647  2670  3091  3135  3197  3271  3442 #>  [9025]  3603  3709  3798  4950  6213  6603  6827  6864  7471  7558  7820  8085 #>  [9037]  8242  8580  9068 10067 10277 10509 11191 11292 12272 15308 15792 16266 #>  [9049] 17390 17501 17612 18838 19705 19771 20102 20786 21053 22039 22311 24260 #>  [9061] 25006 26267 26337 27428 29728 31958 33314 33483 33966 36038 36906 37441 #>  [9073] 38043 38298 38908 39262 39562 39819 40176 46932 47037 47518 47637 48062 #>  [9085] 48555 49260   605  1050  1319  1468  1694  1766  1884  2623  2955  3051 #>  [9097]  3354  3492  3604  3763  4032  4095  4692  4777  5101  5729  5831  6077 #>  [9109]  6173  7212  7635  8118  8543  8629  8664  9279  9526 10761 11352 11719 #>  [9121] 11870 11963 12942 13448 14404 15048 15261 15958 17448 17502 18103 18165 #>  [9133] 18472 18771 19835 20715 20990 21054 21178 21332 21900 22312 22454 22526 #>  [9145] 22726 23025 23994 25729 30575 30723 31386 32495 33150 34872 34975 35273 #>  [9157] 36379 36907 39358 40177 40599 41997 42090 42182 42278 42375 43271 45140 #>  [9169] 45789 46242 47227 47519 48063 48556 48945   518  1265  1421  1625  1710 #>  [9181]  2087  2109  2263  2286  2412  2693  2817  3246  3415  3580  4060  4096 #>  [9193]  4119  4430  5026  5760  6389  6992  7677  7779  8243  8458 10762 11147 #>  [9205] 11668 12217 12779 13389 13561 13617 14625 14668 14839 15471 16141 17977 #>  [9217] 18225 19149 19462 19525 19706 21121 21252 21901 22313 23562 25237 27495 #>  [9229] 28470 28637 28804 28961 29037 29432 30086 30576 30655 33396 36039 37085 #>  [9241] 39359 41827 41920 42466 42659 44160 45240 45702 46827 47409   654   776 #>  [9253]  1305  1371  1784  2110  3324  3396  3443  3548  3916  3969  4120  4693 #>  [9265]  4915  5069  5476  5628  5832  6390  6488  6642  6717  6828  7141  7297 #>  [9277]  7520  7678  7860  8197  8291  8498  8767  8960  9337  9436  9527 11107 #>  [9289] 11353 11913 12010 12654 13923 14355 14405 14791 14946 15049 15112 17137 #>  [9301] 17613 17793 18473 18970 19208 19592 19968 20223 20296 20476 21055 21333 #>  [9313] 21777 23850 24931 25971 26052 26268 26641 27008 27496 27570 28394 28805 #>  [9325] 29038 29104 29883 30399 30724 30797 31535 31699 33884 34787 34976 36659 #>  [9337] 36740 40421 40694 41751 44553 46243 46828 47228 47410 47855   529   537 #>  [9349]   642   998  1006  1080  1711  1951  2053  2362  2671  3068  3159  3299 #>  [9361]  3549  3764  4201  4288  4460  4568  5391  5629  6035  6106  6174  6643 #>  [9373]  6754  6865  7142  8459  8499  9203 10116 10368 10415 10723 10885 11964 #>  [9385] 12273 12556 12984 13924 14523 14728 14840 16203 16320 17854 18226 18772 #>  [9397] 18971 19336 19402 20601 20716 21056 21179 23236 23490 25398 25808 25887 #>  [9409] 26191 30237 31130 31700 32197 32496 33069 33232 33967 35538 36040 36380 #>  [9421] 38825 40965 43908 44061 44448 44842 45241 46050 46448 47138 47411 47520 #>  [9433] 48166   687   716   747   803   999  1605  1731  2088  2199  2222  2240 #>  [9445]  2436  2484  2776  3227  3247  3865  3891  4097  4262  4461  5070  6107 #>  [9457]  6175  6419  6566  7112  8156  8329  9437  9659 10173 10278 10886 11248 #>  [9469] 13036 13390 13665 13876 15739 16018 16204 16682 17026 17138 18648 18773 #>  [9481] 22663 23696 25160 25470 28471 29512 29884 30798 31293 33397 33570 34056 #>  [9493] 35454 35697 35949 36041 36208 36908 37262 37442 38737 39447 41399 43637 #>  [9505] 44251 44357 45870 46722   589   622   688   717   855   880  1190  1306 #>  [9517]  1357  1387  1638  1825  1885  1971  2032  2151  2171  2363  2914  3198 #>  [9529]  3444  3637  4033  4569  4716  4813  4833  4888  5027  6036  6788  6938 #>  [9541]  6964  7559  8016  8367  8408  8696  9204  9528  9834 10021 10369 11871 #>  [9553] 11914 11965 13037 14406 15688 15959 16927 19088 19900 20534 22314 22455 #>  [9565] 25399 25730 27635 28558 28638 30087 31387 31701 31959 32497 32900 33315 #>  [9577] 33484 33571 34873 35698 36571 37607 40422 41921 42570 44649 45346 45443 #>  [9589] 46244 46449 47139 48755 49152 49772   590   643   728   755   777   792 #>  [9601]   827   839  1000  1069  1165  1266  1712  1785  1886  1972  2223  2748 #>  [9613]  3375  3660  3686  4202  4312  5240  5630  6078  6567  7435  8244  8768 #>  [9625]  9069  9114  9338  9385  9570  9612 10022 11533 11872 12168 12985 13562 #>  [9637] 14257 14407 15003 15170 15213 15914 16384 17200 17923 18351 19463 19836 #>  [9649] 20224 20361 21122 21334 21778 21969 22113 22186 22595 23778 24482 24775 #>  [9661] 24853 25659 26719 27848 28472 29039 29592 30498 31459 32116 34307 34390 #>  [9673] 34788 35364 35455 36042 37263 37349 39563 40777 41998 44161 44843 45141 #>  [9685] 46146 48466   561   718   778   867   912  1081  1136  1292  1469  1544 #>  [9697]  1606  1803  2596  2648  3092  3136  3228  3248  4229  4570  4599  4974 #>  [9709]  5477  5568  5897  5933  6108  6644  7521  7594  8198  8878  9280  9386 #>  [9721]  9613 11720 11873 12504 12888 12986 13147 14081 14356 14524 15050 15214 #>  [9733] 16806 17727 18582 19464 19661 19707 21253 21518 22456 23086 23491 24483 #>  [9745] 25321 27571 27636 28806 30319 31960 32987 33485 34391 34480 34630 34874 #>  [9757] 35115 35623 35867 36043 37086 37350 39820 41315 42091 44252 47140 48064 #>  [9769] 49383   580   591   606   719   804   953  1150  1320  1470  1487  1952 #>  [9781]  2074  2089  2172  2437  3093  3738  3842  3866  3970  4975  5595  7436 #>  [9793]  7899  7978  8017  8199  8665  9245  9529  9978 10216 10608 11293 11397 #>  [9805] 11966 12061 12453 12655 12889 14947 15215 15740 15960 16510 16683 16981 #>  [9817] 18296 18774 19708 19969 20717 21401 21519 21844 22457 22664 23779 26269 #>  [9829] 27281 28082 28170 28326 28473 28559 28807 29955 30577 30799 31388 31875 #>  [9841] 32498 32676 32988 33151 33885 34227 34392 34875 36381 36572 38996 39263 #>  [9853] 40423 43183 43442 43638 45617 49384 49773   655   689   729   756   913 #>  [9865]  1206  1293  1457  1527  1568  1639  1786  1804  2388  2556  3069  3199 #>  [9877]  3325  3581  3843  3971  5071  5181  5694  6214  6683  7040  7174  7298 #>  [9889]  7437  7472  7522  7636  9281 10117 10279 10555 10677 11294 12120 12841 #>  [9901] 12890 13722 13966 14082 15113 15171 15262 16385 18409 20656 21779 22527 #>  [9913] 23851 24333 26720 27080 27429 27777 28083 28560 28808 29187 29274 29885 #>  [9925] 30578 31054 31131 31612 31702 31961 34554 39264 40873 43078 43184 46450 #>  [9937] 48369 48858   592   607   644   868   926  1166  1336  1569  1587  1907 #>  [9949]  2264  2311  2583  2649  2934  2998  3094  3229  3917  3944  4061  4496 #>  [9961]  4834  5695  5833  5999  6391  6904  7253  7939  8086  8368  9571  9660 #>  [9973] 10370 10510 10648 11026 11108 11354 11828 12842 13563 14028 14303 14669 #>  [9985] 15114 16019 17250 17665 18649 19285 19970 20362 20535 21649 22252 22665 #>  [9997] 23026 23922 24854 25888 26192 26270 27430 28561 29188 29513 30173 30579 #> [10009] 31460 31703 31798 33316 34393 35699 35776 36821 38642 39448 39564 43272 #> [10021] 44358 45142 46051 46933 49385   593   656   702   840   927  1121  1372 #> [10033]  1508  1528  1545  1713  1826  1928  2485  2719  2777  3230  3493  3710 #> [10045]  3867  3998  4263  4462  4778  4916  5538  5761  5963  6143  6392  6645 #> [10057]  6789  7041  7175  7213  7560  7861  7900  8581  8630  8733  9339  9661 #> [10069] 11109 12413 13295 13510 15263 16020 16142 16565 16807 17503 17666 17978 #> [10081] 18583 19337 19465 19837 20225 21254 22458 22870 24200 24484 25007 25536 #> [10093] 25889 26486 28474 28962 29105 29362 29886 31962 32030 32327 36573 36909 #> [10105] 38554 39565 42183 42571 43353 45024 47038 47141 47521 48254 48557   634 #> [10117]   703   793   819   856   881  1191  1207  1239  1321  1488  1570  1588 #> [10129]  1767  1805  2033  2312  2330  2389  2531  2749  2799  3030  3160  3300 #> [10141]  3582  4571  4717  4996  5209  6079  6354  6604  6718  8119  8582  8769 #> [10153] 10068 10556 11148 11398 11490 11967 12891 13148 13666 14304 14463 14626 #> [10165] 14841 16386 16511 16865 16928 17794 18227 18297 18584 18839 19403 19971 #> [10177] 20477 20536 20787 21457 22871 24485 26193 26642 28562 28963 30320 30400 #> [10189] 30499 30800 30975 31389 31461 32117 32499 34394 34789 34876 35194 35950 #> [10201] 36741 37790 38215 38738 38826 39741 40424 42279 42998 43079 43542 44755 #> [10213] 44929 45790 47229 48662 49673   690   737   882   982  1240  1509  1768 #> [10225]  1887  2624  2720  2956  3114  3301  3397  3799  3972  4401  4497  5631 #> [10237]  5730  6684  7712  7821  7862  8054  8245  9115  9572  9742  9880  9979 #> [10249] 10511 10678 10846 10933 11065 11149 11192 11571 12218 12366 13449 13667 #> [10261] 15848 15961 16087 16205 16982 18228 18585 19404 19593 21458 23087 23425 #> [10273] 24261 24411 25161 25400 25471 26194 26412 27707 27778 27928 28003 28240 #> [10285] 29040 30656 30801 30976 32819 32989 34719 34790 35624 35868 36574 37264 #> [10297] 37608 38299 39265 41400 44253 44554 45242 47230 48167 48467 49674   670 #> [10309]   748  1070  1122  1167  1458  1489  1546  1714  1953  2111  3376  3550 #> [10321]  3945  3973  4154  4180  4663  6176  6993  7637  8583  9205  9573  9614 #> [10333]  9835 10118 10217 10457 12121 13098 13450 13511 13925 14083 14258 14525 #> [10345] 15115 15216 15533 16387 17449 19709 20033 21902 22040 22315 22380 22954 #> [10357] 23492 24412 25602 26413 26721 26867 29106 30321 30401 30580 30977 31613 #> [10369] 31799 31876 33233 34308 34555 35539 36382 36742 37168 37609 37867 38380 #> [10381] 38555 39821 41999 42467 42999 43354 45243 49386   841   869  1177  1648 #> [10393]  1715  2090  2133  2152  2265  2486  2977  3161  3445  3516  3638  3868 #> [10405]  4230  4463  4572  5182  5276  5799  6319  6685  6866  7299  7438  8544 #> [10417]  8734  8879  9035  9836 11110 11193 11249 11355 11399 11915 13099 13926 #> [10429] 14202 14305 16621 17555 17667 17728 18166 19338 19901 20426 20852 20991 #> [10441] 22804 23426 24486 25603 26271 26722 27497 27708 28809 31132 32500 33317 #> [10453] 33886 34228 34977 36044 36992 37351 38300 38909 40425 41316 44062 44254 #> [10465] 44650 48065 49387   691  1051  1252  1649  1769  1787  2054  2112  2200 #> [10477]  2331  2532  2778  2888  2957  3162  3844  4155  4231  4402  5072  5446 #> [10489]  6000  7863  8369  8800  8880 10609 10981 11066 11491 11534 11572 11625 #> [10501] 12557 12943 13967 14029 14203 14259 14670 14729 15051 15472 15849 16143 #> [10513] 17504 18042 18104 18586 18775 20537 20602 23027 23493 23626 23780 23852 #> [10525] 23995 25077 26643 28964 31055 33152 33650 33723 35951 36993 38128 41317 #> [10537] 42092 43273 44844 47951 48168 48370 49153   671   954  1082  1510  1716 #> [10549]  1732  1827  2075  2413  2512  2597  2842  3302  3551  3819  3892  4156 #> [10561]  4537  4664  5277  5731  6144  7254  7473  7979  8018  8584  9743 10280 #> [10573] 10649 10934 11492 12169 12454 12605 12892 13564 13831 14526 14574 14671 #> [10585] 15217 15362 16088 17556 17795 17855 18524 18840 20297 21970 22041 24561 #> [10597] 24704 25660 25731 25809 26272 26723 28721 29107 30657 30893 32406 32820 #> [10609] 33234 33572 35195 35869 36045 38556 39176 39659 40507 41230 42376 43820 #> [10621] 44845 46451 46829 48558 49055   672   794   842   983  1041  1123  1529 #> [10633]  1888  2012  2459  2625  3272  3466  3946  4464  5800  5869  5934  6109 #> [10645]  6530  6568  6994  7214  7384  7474  7561  7747  7780  7901  8200  8292 #> [10657]  8770  8995  9036 10458 10679 12315 12738 12893 13391 13723 14030 14886 #> [10669] 15052 15534 17505 17668 18167 18650 19339 20103 20363 21335 21650 23028 #> [10681] 24855 26926 27200 28327 28475 29189 29729 29813 30402 31536 32742 34481 #> [10693] 35456 35777 36743 37352 37868 38129 39360 40006 40695 40966 42468 42660 #> [10705] 46934 47412 48371 48663   795   828  1220  1358  1650  1717  1733  1954 #> [10717]  2958  3249  4203  4264  4465  4538  4665  5316  5569  5664  5762  5801 #> [10729]  6001  6080  6393  6531  6569  6605  6790  7076  8120  9438  9662 10281 #> [10741] 11027 11535 11771 12414 12656 13203 14141 14408 14627 14887 14948 15264 #> [10753] 15689 16512 18898 19209 19972 20298 21057 21589 21780 22114 22316 23088 #> [10765] 24072 24413 24635 26053 26555 27146 28563 28810 32990 33968 34877 37869 #> [10777] 37952 38130 39177 39266 40967 41828 42661 43733 45025 45444 45538 47856 #> [10789] 48859   805  1052  1373  1511  1589  1770  1788  2390  2598  2721  2935 #> [10801]  2959  3303  3355  3494  3765  4371  4498  4629  4666  4863  5129  5241 #> [10813]  5278  5317  5570  5665  5696  5732  6037  6177  6284  6532  6686  6719 #> [10825]  7336  8370  8545  8697  9340  9387 10174 11028 11295 11573 12316 12606 #> [10837] 13296 13877 14204 15116 15265 15741 15915 16749 16983 18298 18841 19902 #> [10849] 20853 21781 22253 22317 22528 22805 23563 24201 25604 26195 26556 26927 #> [10861] 27081 27572 27849 28395 30802 31877 34720 35054 35196 36297 36744 37353 #> [10873] 40426 41598 43443 43639 44255 45026 47231 47857 48255 48946   738   779 #> [10885]   857  1151  1168  1571  1929  2091  2173  3200  3446  4157  4667  4889 #> [10897]  4997  5242  5834  6320  6355  6420  6533  6646  7042  7143  7385  7713 #> [10909]  8157  8201  8371  8500  8585  8735  8841  8881  8914  9574  9837 10175 #> [10921] 10218 10325 12944 13204 13512 14792 15172 15363 15850 16089 17557 19286 #> [10933] 19340 19662 20226 20603 21058 23029 24202 25078 26054 28396 30174 31056 #> [10945] 31214 31878 32118 32407 33887 33969 34229 34556 35457 36209 36471 36660 #> [10957] 36822 36994 37610 37870 41510 41922 42280 42756 44063 44846 45445 46347 #> [10969] 46935 47638 48372 49261 49476   780   796   897   928  1083  1099  1322 #> [10981]  1572  1678  1930  2174  2391  2414  2487  2599  3999  4181  4344  4403 #> [10993]  4573  5146  5898  6245  6285  6421  6791  7386  7562  7679  8801  9206 #> [11005]  9663 10119 10610 10887 10935 11669 11968 13618 13832 14842 15364 15473 #> [11017] 16513 17081 17313 17558 17924 17979 18229 19150 19526 19663 20478 20718 #> [11029] 20788 21255 21402 22254 24932 25732 25890 26800 27282 27347 28004 28397 #> [11041] 28888 29108 29275 30894 31215 32901 35274 36210 36661 36823 37953 38131 #> [11053] 39267 39921 42572 42757 43080 44256 44651 45143 46245 46723 47039 49154 #> [11065] 49477   858   914  1071  1084  1100  1241  1679  1908  2460  2843  3163 #> [11077]  3250  4158  4265  4814  5279  5733  5802  5835  6038  6356  7077  7475 #> [11089]  7748  8501  9530 10219 11029 12780 13392 13668 14260 14306 14357 15218 #> [11101] 15584 16444 16929 17729 18043 18168 18230 18299 18474 18972 19151 20299 #> [11113] 20719 21336 21651 21845 22872 23697 23996 25238 26487 27201 27348 27431 #> [11125] 28564 29041 31294 31614 33804 35778 39084 40007 41231 42093 42281 42829 #> [11137] 43543 43734 44930 45871 46246 47040 47639 47858   955  1242  1337  1374 #> [11149]  1388  1409  1490  1530  1626  1695  1806  1828  1860  2175  2533  2584 #> [11161]  2800  2889  3115  3447  3639  3893  3918  4204  4313  4431  4600  4668 #> [11173]  4747  5183  5358  5392  5870  6039  6215  6489  6995  7176  7215  7523 #> [11185]  7822  8158  8246  8996  9664 10023 10326 10847 11030 11150 11194 11626 #> [11197] 12219 12505 14142 14575 15793 16388 18231 19038 19466 20034 20104 20479 #> [11209] 20920 22187 22255 22596 23089 23494 23564 23698 25661 25733 26488 26557 #> [11221] 27009 27850 27929 28005 28565 31879 32991 33153 33235 34482 35275 36995 #> [11233] 37698 38381 38469 39566 39660 40008 42282 42377 42662 43735 43982 46629 #> [11245] 48559 49478 49573   806  1243  1651  1734  2513  3070  3095  3116  3495 #> [11257]  3711  3820  3947  4098  4159  4404  4432  4601  4890  5147  5596  6422 #> [11269]  6996  7043  7387  7781  8330  8372  8546  9341 10459 10848 12657 12739 #> [11281] 13100 13833 13968 14730 14793 14949 15004 15117 15365 16321 17251 17506 #> [11293] 18352 18712 19527 21520 21846 22188 22381 23148 23427 24705 25079 25162 #> [11305] 25239 25322 26558 26868 29109 29190 29956 31057 31800 32198 32581 32821 #> [11317] 33154 33486 34230 36298 37087 38044 38470 38643 38910 39922 40102 40178 #> [11329] 40508 43821 44756 46247  1101  1192  1282  1410  1459  1471  1547  1590 #> [11341]  1652  1991  2034  2055  2092  2438  2557  2600  2867  2960  3517  3766 #> [11353]  4289  4314  5028  5148  5280  5318  5899  6002  6357  6452  6829  7439 #> [11365]  7638  7782  7864  7940  7980  8159  8247  8409  9388  9484 10460 10724 #> [11377] 11067 11151 11195 11400 12062 12170 12894 13101 13969 14464 14527 14672 #> [11389] 16021 16206 16267 16322 16514 16622 17201 18169 18353 18410 18713 19152 #> [11401] 19210 19287 19405 20538 21256 22873 23149 23295 23495 23565 23781 24562 #> [11413] 24776 26196 27202 28398 30088 30581 31390 33070 33398 33888 33970 34057 #> [11425] 35365 35625 35952 36046 36575 36745 36996 37443 38911 41829 46052 46452 #> [11437] 47041 49155   781   859   915  1085  1208  1323  1460  1573  1718  2013 #> [11449]  2134  2224  2266  2392  2978  3552  3605  3800  3869  3948  4345  4779 #> [11461]  5447  5734  6394  6453  6720  6755  6830  7177  8121  9037  9116  9439 #> [11473]  9665 10120 10327 10371 10416 10557 10763 11442 11874 12011 12558 13451 #> [11485] 14307 14888 15005 15053 15420 15585 15794 15962 17856 17980 18776 19211 #> [11497] 19664 19838 20177 20604 20789 20854 20992 21059 21971 23150 23923 24487 #> [11509] 24933 25008 25080 25472 25810 26801 27637 28006 28811 28889 29276 29593 #> [11521] 29957 30322 30978 32743 32822 33318 33805 33971 35626 36047 37088 37518 #> [11533] 37791 37954 38216 39822 40103 41752 41923 42923 44757 45963 46830 47522 #> [11545] 47640 48560  1086  1137  1221  1338  1548  1640  1789  1992  2093  2225 #> [11557]  2241  2287  2415  2488  2626  2779  3251  4062  4121  4499  4602  4630 #> [11569]  4718  4864  5149  5508  5935  6286  6358  6939  6997  8631  9207  9342 #> [11581] 10328 10417 10725 10812 11068 11401 11443 12415 12455 13619 14950 16144 #> [11593] 18105 18899 19341 19467 19710 20227 20480 20539 20605 21257 21521 21590 #> [11605] 22256 22727 22874 24073 25605 28399 30500 31216 31462 31880 32823 32902 #> [11617] 33319 34058 34143 36910 37169 39923 41147 42663 45027 45618 46453 46831 #> [11629] 47859 49156   956  1222  1324  1347  1375  1549  1641  1771  1829  1844 #> [11641]  2113  2201  2267  2780  3031  3201  3304  3416  3739  3821  3919  3949 #> [11653]  4000  4433  4719  4780  6246  6647  6756  6998  7300  7388  7714  7902 #> [11665]  8502  8547  8842  9070  9117  9666 11196 11772 12063 12740 13513 14143 #> [11677] 14205 14794 14951 15118 15266 16207 16268 16389 16623 16684 17450 18106 #> [11689] 18300 18525 18714 19468 19594 19711 20178 20300 20364 20921 21522 21652 #> [11701] 22529 22806 23360 23428 23997 24074 24414 25163 25606 25972 26928 27082 #> [11713] 27498 29730 30175 30895 31217 31537 31704 32199 32267 32408 32824 32903 #> [11725] 33573 34144 35870 37699 38301 39085 40600 42094 45347 47318 47523 47739 #> [11737] 48561 48756   898   929  1138  1267  1443  1696  1750  2094  2202  2801 #> [11749]  4720  6110  6145  6454  6831  6940  7476  7941  8331 10176 10220 11670 #> [11761] 11773 11969 12171 12274 13620 13834 14843 15119 15742 16390 16566 17252 #> [11773] 18107 18232 18354 18777 20481 21591 21653 21903 22955 23998 24133 24334 #> [11785] 24488 24563 25081 27203 27930 28084 29731 30725 31963 34059 34231 35366 #> [11797] 36048 37871 38382 43000 45348 46053 46724 48562 49157   930  1001  1139 #> [11809]  1294  1531  1955  2203  2288  2627  2694  2750  2890  3231  3740  3974 #> [11821]  4063  4122  4290  4721  5539  5735  6081  6423  6490  7301  8248  8293 #> [11833]  8460  8632  8915  9282  9343  9927 10069 12122 12416 12456 12987 13514 #> [11845] 13970 14206 14528 15586 15743 16145 16930 17796 18411 20179 20606 21847 #> [11857] 21972 22257 22666 22728 24856 24934 25240 25973 27283 27851 27931 29042 #> [11869] 29514 30403 30501 30896 32031 32677 35953 38912 39178 39823 40968 41667 #> [11881] 41830 43274 43444 43983 44257 44449 44847 46348 47232 47860 49262  1022 #> [11893]  1087  1845  2153  2364  2751  2818  3164  3252  4099  4232  4835  4917 #> [11905]  5763  5900  6040  6455  7113  7255  7524  8087  8202  8503  8548  8802 #> [11917]  9881 10177 10558 11356 11536 11671 11721 12172 12843 12895 13038 13515 #> [11929] 13878 13927 14031 14144 14731 16445 16567 16685 17857 18044 18170 20105 #> [11941] 20482 20540 20922 21060 22956 23429 24262 24564 27932 30176 30979 31133 #> [11953] 31615 32582 32678 33236 33724 35700 35871 36911 37872 38644 39179 40696 #> [11965] 42095 42830 43544 44450 45244 45964 47641   931  1193  1295  1532  1663 #> [11977]  2056  2176  2268  2439  2752  2844  2999  3032  3202  3661  3712  3950 #> [11989]  4001  4405  4434  5029  5424  5964  6003  6178  6321  6687  7216  8160 #> [12001]  8249  8294  8332  9389 10461 10726 10936 11296 11444 11574 11875 12123 #> [12013] 12317 13039 13250 13565 14358 14465 14576 15006 15309 15963 17314 17451 #> [12025] 17797 18973 20483 20923 21180 21337 21973 22115 22597 25009 25164 25607 #> [12037] 26644 26724 27010 27083 27284 27499 27638 28476 28812 30726 31616 33071 #> [12049] 33155 34060 34145 35701 35779 36128 37792 38383 38827 39180 39824 40509 #> [12061] 42000 43001 43445 43822 43984 45965 46552 47413 47524 47642   970  1194 #> [12073]  1422  1550  1607  1735  2076  2416  2489  2650  2672  2695  2819  3033 #> [12085]  3071  3165  3553  3713  3741  4233  4266  5509  5871  6395  6941  7044 #> [12097]  7178  7256  7477  7563  7823  8161  8410  8504  8803  9157  9531  9706 #> [12109]  9744 10650 11069 11445 12275 12506 12658 13724 13879 14308 14359 14795 #> [12121] 15421 15535 15851 16022 19469 20035 20106 20541 20720 21904 21974 22598 #> [12133] 23090 23296 24134 24203 24565 24636 25734 26489 26645 27084 28085 31295 #> [12145] 32032 34483 34557 36472 37354 38045 38217 38557 40969 41599 41924 42001 #> [12157] 42469 42664 43736 44258 46349 47042 47414 47525 48256 48664 48757 48860 #> [12169] 49056 49158 49388 49479   984  1152  1268  1283  1359  1491  1790  1889 #> [12181]  2077  2289  2628  2753  2936  3072  3117  3253  3398  3417  3583  4406 #> [12193]  4669  5210  5425  5571  5836  5901  6082  6359  7595  7680  8250  8461 #> [12205]  8698  8771  9038 10178 10937 11446 11774 12064 12318 12367 13835 14796 #> [12217] 15366 15474 16446 16686 17391 18171 18355 19089 20301 20427 21061 21403 #> [12229] 22459 25165 26414 26802 26929 27147 27349 29191 29277 29363 29814 30980 #> [12241] 31134 31617 32409 32744 33072 35367 36299 37355 38558 39825 39924 41318 #> [12253] 41401 41925 42184 43446 45446 46630 48947  1102  1244  1339  1472  1551 #> [12265]  1591  1861  1993  2154  2204  2440  3377  3467  3801  3894  3920  4631 #> [12277]  5393  6146  6360  6491  6867  6999  7045  7179  7337  7440  7681  8203 #> [12289]  8251  8916  9118  9794  9838 10121 10680 10982 13516 14628 15219 16090 #> [12301] 16568 16931 17669 17798 18715 19712 20036 21258 21782 22729 22807 23627 #> [12313] 24263 25323 25537 26055 26559 27573 29515 29594 30658 31801 32992 36473 #> [12325] 37519 38384 39742 43185 43909 44064 44451 44652 44931 45028 45619 46147 #> [12337] 46248 48468 48948   916   971  1072  1088  1223  1533  2057  2393  2651 #> [12349]  2845  3073  3203  3448  3662  3687  4034  4123  4234  5030  5102  5150 #> [12361]  5597  5632  5965  6688  7180  7749  8804  8917  9344  9795 10122 10329 #> [12373] 11627 11672 12276 13836 15587 15690 15916 16146 16208 16391 17082 20037 #> [12385] 20107 20542 21123 21338 22730 23628 25401 25662 25811 26930 27011 28639 #> [12397] 30897 31218 32501 32583 32993 34309 35627 35872 36211 36576 36997 37520 #> [12409] 38302 39361 39449 39826 39925 41753 42573 43640 43823 44359 44555 45029 #> [12421] 46249 47952 49057  1023  1209  1245  1284  1444  1592  1627  1807  2155 #> [12433]  2490  2601  2652  2696  3305  3326  3554  3688  4748  4918  4976  4998 #> [12445]  5837  6111  6287  6424  6792  6868  7389  8122  8373  8411  9485  9882 #> [12457] 10727 11876 12012 13297 13725 16091 18412 18526 19153 19973 20543 20924 #> [12469] 20993 21404 21783 22667 24135 24489 25891 26490 26725 27012 28171 28813 #> [12481] 30502 31058 31964 32119 32328 32904 34232 34310 35368 36746 37700 38218 #> [12493] 38471 38913 39268 39362 41831 43081 43824 44162 44360 44848 45791 47526 #> [12505] 48066 49574   985  1103  1124  1178  1389  1461  1697  1791  1830  2344 #> [12517]  2365  2697  2722  2868  2961  4346  4574  4632  4749  5540  5872  6004 #> [12529]  6147  6179  6492  6832  7478  7639  7783  8252  8961  9532 10938 11297 #> [12541] 11537 11628 12417 12457 12607 13102 13251 13777 14032 14261 15475 15795 #> [12553] 15964 17027 18233 18301 18974 19839 20484 20721 21181 21592 25324 25892 #> [12565] 26931 27432 32745 33156 33237 33574 34878 35702 36824 37793 39827 40104 #> [12577] 41600 41926 42470 42574 43641 43825 45349 46250 48665 49389   986  1024 #> [12589]  1411  1719  1931  2014  2058  2156  2205  2226  2332  2441  2820  4002 #> [12601]  4575  4836  5243  5966  6689  6905  7181  7257  7479  7596  8253  8295 #> [12613]  8962  9158 10372 10764 10939 12319 12507 12659 14309 15054 15173 15220 #> [12625] 16687 17392 17670 17858 18234 19154 20365 22116 22875 23297 23699 27433 #> [12637] 27639 28241 28965 29958 30803 31463 32584 32679 33725 34061 34558 35458 #> [12649] 35703 36998 37170 37701 38046 39181 40874 41232 42283 44556 44932 49263 #> [12661] 49390 49774  1104  1179  1423  1574  1608  1628  1664  1736  1831  1846 #> [12673]  1956  1973  2059  2394  2891  3034  3118  3327  3518  3975  4124  4603 #> [12685]  4633  5697  6180  6757  6793  7000  7480  8123  8162  8882  9119  9533 #> [12697]  9575 10070 10462 10681 10983 11152 11402 11722 12013 12065 12458 16092 #> [12709] 17452 17925 17981 19713 20790 21124 21708 21784 22318 22382 23430 25241 #> [12721] 25325 26560 27933 28400 29192 29278 30659 30804 31538 31802 32502 33889 #> [12733] 33972 34978 36383 37171 37611 39363 40970 41233 43082 44557 44849 45620 #> [12745] 46148 46553 47740 48949 49575  1073  1376  1473  1492  2269  2366  2442 #> [12757]  2558  2673  2723  2846  3166  3519  3584  3663  3742  4100  4267  4919 #> [12769]  4999  5130  5184  5633  5666  5838  5873  6083  6112  6425  7144  7441 #> [12781]  7564  7942  8019  8963  9390  9576 10024 11250 12559 13040 13298 13778 #> [12793] 13928 14145 14797 15221 15476 16569 17139 17614 17859 19595 19840 21523 #> [12805] 22668 23999 27574 28401 28814 30582 31059 31135 31705 32680 37444 38828 #> [12817] 40009 40337 40510 41668 43642 44163 44933 45447 45966 47741 48257 48950 #> [12829] 49480  1007  1025  1053  1105  1285  1360  1445  1493  1890  1957  1994 #> [12841]  2015  2035  2177  2367  2443  2514  2559  3096  3119  3167  3232  3306 #> [12853]  3714  3802  3951  4235  4372  4500  4670  5073  5281  5874  6361  6606 #> [12865]  6721  7182  7390  7784  7943  9071  9246  9796 10418 10463 11070 11298 #> [12877] 11493 11916 12508 13726 14084 14310 14952 15222 15422 15536 16147 16209 #> [12889] 16323 16392 17202 18235 18587 19470 19841 19974 20038 20302 20544 20925 #> [12901] 22258 23151 23298 24264 24490 25538 26726 27640 28172 30323 30898 31539 #> [12913] 31803 33806 34791 36747 37265 38047 38385 38559 39450 40875 43186 43447 #> [12925] 44065 45030 45245 46454 49058  1026  1390  1552  1575  1832  1862  1891 #> [12937]  1909  2242  2417  2698  2781  2847  2937  3097  4035  4125  4160  4407 #> [12949]  4750  5031  5244  6426  6493  6648  7597  7824  7981  8055  8296  8374 #> [12961]  9839  9883 10123 10512 10849 11197 12124 12988 13669 14360 15796 17203 #> [12973] 17559 17615 17860 18045 18475 18842 19288 20366 20607 20722 21259 21848 #> [12985] 22259 24000 24335 24491 27641 27779 28086 28173 28566 29595 30029 31804 #> [12997] 32410 32825 37955 38219 38386 39269 39926 41402 42284 43083 43187 43355 #> [13009] 43643 45144 46149 47142 47527 48469 48563 49391 49775  1054  1089  1180 #> [13021]  1296  1307  1340  1391  1424  1698  1808  2036  2135  2313  2345  2534 #> [13033]  2560  2724  2754  2821  3328  3399  3418  3520  4003  4751  4781  4951 #> [13045]  5032  5151  5598  5698  7145  7785  8204  8843  9159  9208  9283  9615 #> [13057] 10071 10124 10221 10513 10813 10984 11970 12173 12509 13041 13205 13670 #> [13069] 15055 15223 15852 15917 16023 16093 16515 16624 16688 17453 17507 17560 #> [13081] 18108 20791 23030 23629 24336 24415 24566 25735 25974 26561 27575 28722 #> [13093] 29815 31805 32120 32411 32585 33399 33487 33726 35780 36049 36474 36825 #> [13105] 36912 37089 39182 40601 40876 41148 42924 43188 43545 44653 45967 46350 #> [13117] 46936 47319 47528 49392  1325  1392  1412  1474  1629  1833  2368  2461 #> [13129]  3052  3120  3356  3921  4722  4752  5394  5764  5967  6113  6148  6247 #> [13141]  6494  6649  7750  7786  8375  8462  9284  9980 10072 10559 11198 11299 #> [13153] 11357 11775 11971 12014 12320 12459 12660 15120 16094 16324 16984 17671 #> [13165] 18527 18716 20228 20723 20792 20855 21405 21459 22189 22460 22957 24075 #> [13177] 25473 26273 28174 28890 29110 30238 30727 30981 31219 31706 31806 32033 #> [13189] 32586 32905 33238 33320 33651 33807 33890 34631 35704 36129 36577 37172 #> [13201] 37702 38914 40179 43275 43448 44452 44850 47742 47861 48861 49264  1106 #> [13213]  1169  1348  1847  2114  2290  2491  2653  3204  3233  3585  4782  5185 #> [13225]  5803  5902  6396  6607  6722  7001  8020  8412 10330 10651 10682 12368 #> [13237] 12608 13929 14409 14798 15367 16570 17454 18172 18302 19155 21709 22669 #> [13249] 22876 23091 23152 23700 24337 24706 25893 27085 29193 30404 30982 31881 #> [13261] 32121 32681 32906 33400 33891 34792 35459 35705 36050 37445 38915 38997 #> [13273] 39086 40511 42002 43002 44851 45031 45350 46251 46455 46725 46937 47043 #> [13285] 47143  1297  1393  1665  2178  2333  2755  2782  2962  3496  3767  3845 #> [13297]  4539  5000  5395  5478  5736  6084  6114  6362  6608  6723  6965  7002 #> [13309]  7114  7481  8586  8964  9285  9440  9577  9928  9981 10611 11494 11575 #> [13321] 11776 12560 13837 15174 17393 17616 17730 18413 18778 19212 19342 19528 #> [13333] 19714 20180 20657 21339 21849 21975 22383 23031 23924 24637 26803 27204 #> [13345] 28175 28328 29364 29433 30899 32034 32587 32907 33727 34146 35706 39567 #> [13357] 40697 40971 42665 43003 43644 43826 44453 44654 45246 45539 46456 46726 #> [13369]  1125  1361  1377  1932  2179  2270  2418  2699  2938  3121  3468  3521 #> [13381]  3952  4064  4977  5211  5245  5359  5839  6397  6609  6758  6906  8805 #> [13393]  8997  9707  9884  9929  9982 10612 10728 10940 11777 12125 12561 12945 #> [13405] 13149 13345 14033 14311 14889 17253 19156 19903 20108 20229 20658 20994 #> [13417] 21062 22731 23431 24204 24416 24638 25474 26932 27709 28567 28966 29661 #> [13429] 29732 31296 31391 31882 32329 34395 34484 34559 35276 37446 37794 38048 #> [13441] 38645 39568 44066 44361 45351 47743 47862 49393  1269  1286  1425  1593 #> [13453]  1653  1737  1910  2206  2369  2629  2783  2822  2939  3586  3640  3870 #> [13465]  4753  5074  5541  5634  5903  6005  6690  6794  6907  7302  7565  7682 #> [13477]  7903  7982  8333  8549  8918  9247  9286  9391  9534  9840 10222 10331 #> [13489] 10464 10514 10814 12369 13930 14673 14890 15423 16024 17394 17731 18173 #> [13501] 18476 18528 18588 18779 18900 19157 19289 20608 20659 21654 21785 21976 #> [13513] 22384 23299 23701 24136 24338 25166 25736 26119 26646 27576 27780 28007 #> [13525] 28176 29279 30405 31618 31883 32412 33157 33321 34233 34793 36913 37356 #> [13537] 37521 39087 40010 41669 42096 42831 43004 44934 45540 47415 47529  1195 #> [13549]  1210  1224  1475  1974  2115  2314  2492  2848  3419  3606  3895  3976 #> [13561]  4036  4126  4161  5319  6006  6610  6833  7787  7825  8124  8254  8413 #> [13573]  8736  8919 10282 10729 10850 11403 12066 15007 16516 16932 17982 18303 #> [13585] 19090 19772 20303 20724 21340 21406 21593 22042 25975 27013 27577 28177 #> [13597] 28640 28891 29194 29733 29959 30030 30177 31965 32746 33808 34147 34560 #> [13609] 34879 35055 35116 35197 35628 35707 36914 36999 37173 38049 39364 40602 #> [13621] 41149 42003 42185 42925 44558 46252 48067 49675  1253  1326  1446  1654 #> [13633]  1666  1958  1975  2157  2370  2561  2756  2915  2963  3098  3168  3803 #> [13645]  3822  3871  3953  4501  4723  4783  5479  5667  6248  6427  6908  7258 #> [13657]  8056  8505  9248  9287 10125 10332 10613 10941 11358 11877 12015 12174 #> [13669] 12418 12844 13621 14891 15537 15588 15691 15853 16325 17732 17861 18477 #> [13681] 18589 19471 20428 20995 21460 22808 23432 25010 25082 26415 27578 27642 #> [13693] 29516 29960 30406 30503 30583 31392 34234 34794 35708 36130 37612 40877 #> [13705] 44067 45703 45792 45872 46253 47044 48169 49059  1254  1270  1394  1534 #> [13717]  1667  2078  2116  2315  2334  2371  2462  2562  2654  2802  3823  4101 #> [13729]  4182  4724  4865  5033  5246  5635  6288  6322  7640  8506  8998  9039 #> [13741]  9841  9930 10179 11359 11576 12460 12741 12946 13042 13103 13517 14085 #> [13753] 14312 14629 14799 16148 17672 17926 18478 20109 20485 20926 21260 21594 #> [13765] 23361 24567 24857 25663 26197 27852 27934 28087 28892 30407 30584 31619 #> [13777] 32122 32413 32994 33809 34062 34632 35369 37613 40105 40512 40778 42832 #> [13789] 43005 43546 43645 43985 44655 45448 46631 46727 46832 47416 47744 48068 #> [13801]  1298  1308  1447  1494  1553  1642  2037  2158  2395  2563  2916  3099 #> [13813]  3715  3768  3824  3846  4205  4236  4315  4373  4435  5131  5448  5699 #> [13825]  5904  6398  6534  6650  7391  7788  7983  8999 10025 10419 10730 11031 #> [13837] 11251 12067 12126 12175 12989 13622 13971 14577 14674 15121 15368 15477 #> [13849] 17617 17799 17862 18304 18414 18479 19039 19406 19472 20181 20927 21461 #> [13861] 22461 23362 24707 24935 25083 25737 25812 27781 29111 30031 33322 33652 #> [13873] 35460 35873 35954 38050 38303 38646 39365 40972 41927 42004 42833 46457 #> [13885] 47233 48258  1271  1299  1362  1751  1863  2136  3449  3769  4436  4540 #> [13897]  4866  5700  6007  6428  6795  6909  7826  9249  9616 10180 10683 11878 #> [13909] 12176 12370 12742 13931 14207 14578 15224 15267 15854 16025 16095 16933 #> [13921] 17561 18590 20996 21407 21710 22260 22809 23032 23433 24492 25738 26933 #> [13933] 28723 29112 30504 30660 31136 32826 35277 35874 36131 36384 37174 38051 #> [13945] 41511 41670 41754 42471 43547 43827 43986 44852 47417 48666 48758 48862 #> [13957] 49265  1196  1554  1720  1892  1995  2346  2515  2535  2655  2784  2964 #> [13969]  3053  3074  3357  3522  3872  4237  4268  4291  5001  5132  5247  5510 #> [13981]  5636  5905  6910  7715  7751  7944  8334  8414  8550  8587  9000  9842 #> [13993] 10126 10560 10851 11071 11495 11778 12127 12321 12562 12609 13252 13393 #> [14005] 13932 14732 15122 16210 16326 16517 16625 17083 18843 18901 19158 19343 #> [14017] 19842 19975 20110 20660 21341 21977 22190 24708 25242 25539 25664 26491 #> [14029] 26804 27086 27350 27500 27643 28242 28815 30089 31060 31966 32827 33575 #> [14041] 33810 34063 34148 34235 34485 34633 34979 35540 35955 36662 39661 40011 #> [14053] 40603 41512 41671 42005 42097 43084 43828 44656 45449 46938 47745 48373 #> [14065] 49266  1211  1809  1834  1959  2137  2347  2372  2396  2585  2630  2674 #> [14077]  2725  2823  2917  3054  3254  3607  3896  3922  4037  4238  4269  4347 #> [14089]  4408  4784  5152  5426  5765  5968  6570  6942  7716  8088  8125  8883 #> [14101]  9250  9578 10223 11032 11072 12128 12563 13104 13150 13394 13671 13779 #> [14113] 13933 14208 15175 16026 16269 16327 16689 17455 17508 17733 19159 19529 #> [14125] 21655 22191 23033 23434 23853 25167 27935 28178 29365 29434 29662 30324 #> [14137] 31061 31967 32747 32995 33576 37447 38387 38647 39088 39927 40513 40698 #> [14149] 40779 41755 42575 44935 46351 47320 49267  1426  1911  2316  2348  2757 #> [14161]  3608  3716  3897  3977  4316  4409  4502  4694  5320  5449  5737  6008 #> [14173]  6571  6651  6759  7392  7717  8089  8633  8844  9040  9441  9745 10181 #> [14185] 10333 10942 11829 12371 12781 13105 13253 13452 14146 14361 14410 14466 #> [14197] 15369 16027 16211 16626 17140 18236 18717 18780 18902 19290 19596 20039 #> [14209] 20609 21063 21182 22732 23034 23092 24639 25168 25402 25540 25813 26338 #> [14221] 30032 30178 30239 30805 31884 32748 33728 33973 34149 35198 37614 38220 #> [14233] 39451 40106 41150 41601 41672 43356 44164 46150 47321 48951  1721  1738 #> [14245]  1960  2079  2564  2700  2824  3075  3122  3497  3523  3898  4410  4695 #> [14257]  4867  4978  5153  5396  5450  5637  6249  6760  6911  7078  7338  7641 #> [14269]  7904  8376  8588  9041  9486  9746 10073 10224 10985 11404 11779 12177 #> [14281] 12372 12461 12743 13346 13880 14467 15008 15123 17141 18109 21408 22462 #> [14293] 24493 26056 28402 29280 33488 34236 34721 35117 36212 38388 38472 39089 #> [14305] 39828 39928 42576 42666 44259 45352 45450 47643 47746 47953 48170 48259 #> [14317]  1255  1512  1668  1699  1752  2038  2180  2463  2849  2940  3400  4348 #> [14329]  4374  5212  5397  5451  5599  5906  6216  6761  7217  7259  7752  8666 #> [14341]  8737 10652 10731 10815 11673 11879 12068 12845 13254 13518 13838 14579 #> [14353] 14953 15009 15589 17863 19773 20486 21656 21978 22261 22599 23237 23300 #> [14365] 24265 24777 25326 27782 28008 29281 29961 30806 31062 32588 32908 33073 #> [14377] 33158 33892 34064 36213 37615 38648 39183 39452 39662 41234 42098 42378 #> [14389] 43737 46352 47644 47863 49268  1594  1792  1976  2060  2095  2227  2271 #> [14401]  2419  2516  2536  2586  2602  2631  2701  2979  3035  3076  3169  3689 #> [14413]  3717  3847  4206  4317  4466  4541  4891  5766  5804  5875  6289  6323 #> [14425]  6456  6652  6943  7827  8589  8845  9001  9535  9747  9931 10074 10515 #> [14437] 10614 10684 10732 10852 10888 11199 11674 11917 13151 13255 13934 14362 #> [14449] 14892 15268 15590 16393 17028 17864 18415 18591 18903 19040 19597 19843 #> [14461] 20040 21342 21595 21711 22043 22117 23093 23238 23363 23702 24778 25084 #> [14473] 25541 28179 28724 30408 32828 34150 35709 36132 38304 38389 38649 38998 #> [14485] 40780 40973 42926 45793 46151  1753  1912  1977  2207  2317  2397  2517 #> [14497]  2785  3307  3609  4004  4785  4952  4979  5213  5427  6085  6149  6572 #> [14509]  6724  6869  8255  8335  8699  8738  9002 10182 10685 10765 10889 10943 #> [14521] 11577 11830 12178 12277 12322 12661 13043 13256 13395 14363 14580 14844 #> [14533] 15370 15538 16571 17562 19091 20230 20928 21343 22810 23035 23630 23854 #> [14545] 24709 25894 26647 27936 28725 29113 29435 29517 30505 30728 31393 31807 #> [14557] 32909 34980 36300 36475 36578 37795 38390 39569 39929 40427 46939 47418 #> [14569] 48952  1462  1595  1961  2159  2291  2398  2656  2850  2869  3234  3308 #> [14581]  3664  3718  4162  4671  5360  5840  5876  6041  6429  6944  7115  7683 #> [14593]  8090  8634  9345 10283 10766 11360 12016 12179 12278 12373 12782 13623 #> [14605] 13727 15176 15225 15310 16149 16447 17142 17983 18904 20111 23153 23364 #> [14617] 23496 24137 24339 26057 26274 26339 27579 27710 28403 28726 29436 30033 #> [14629] 30240 31137 32268 33074 34065 34634 34795 34981 35118 36385 36663 37357 #> [14641] 37522 38221 38560 38650 38916 39453 40338 41832 42099 42186 42472 42667 #> [14653] 43910 43987 44260 48759 49676  1427  1513  1535  1576  1609  1669  1754 #> [14665]  1810  1848  1913  2080  2138  2160  2632  2980  3100  3309  3420  3610 #> [14677]  4038  4127  4207  4467  4920  7116  8205  8507  8667  9579 10075 11073 #> [14689] 11300 11880 12896 13106 13453 14364 15177 16690 17315 17456 17734 18356 #> [14701] 18781 21125 22463 22958 23782 24494 24936 25542 25739 26058 26805 27711 #> [14713] 28088 29366 30506 30807 31968 32589 34396 34561 34982 35278 35370 35710 #> [14725] 36301 36386 36664 38052 39090 39270 40339 42834 44758 45968 46054 47954 #> [14737] 48564  1341  2161  2702  2870  3000  3055  3358  3873  4102  4183  4375 #> [14749]  4468  5133  5969  6042  6115  6399  6725  7003  7046  7079  7117  7865 #> [14761]  8163  8590  8806 10076 10890 12220 14365 14468 15424 17204 17865 17984 #> [14773] 18237 18651 19092 19344 19473 19844 19976 21344 22044 22959 23365 23497 #> [14785] 24417 25327 26059 27285 28243 29114 29962 30090 31707 32035 32414 32749 #> [14797] 33159 33577 33974 34237 35199 35279 36387 36665 37358 38739 41756 42758 #> [14809] 43357 44165 44261 45032 46353 48565 49060 49776  1413  1755  1996  2228 #> [14821]  2243  2272  2373  2518  3137  3825  4103  4542  4576  4604  4672  4921 #> [14833]  5075  5428  5480  5877  6181  6430  7482  8415  8508  8635  8772  8920 #> [14845]  9072  9288  9392  9748 10986 11074 11111 11831 12180 12947 13152 13347 #> [14857] 13624 13728 13881 14313 14469 14800 15797 16448 17205 17395 18174 18357 #> [14869] 18592 18718 18975 19160 19774 20429 21183 21850 23925 24779 25328 26060 #> [14881] 26806 28244 29596 30091 31708 32996 33653 34066 34562 35119 35200 35956 #> [14893] 36302 36476 37703 38132 41833 44166 44362 45247 45704 46940 47747  1395 #> [14905]  1700  1962  1978  2117  2420  2493  2703  2965  3743  4065  4163  4239 #> [14917]  4318  4543  4577  4725  4754  4837  5103  5452  6182  6431  6535  6834 #> [14929]  7442  7642  8336  8416  8921  9209 10334 10686 12564 13044 13206 13625 #> [14941] 13672 14845 15269 15478 17029 17316 17985 19904 21261 22464 22670 27853 #> [14953] 28245 29437 29597 30179 31063 32910 34635 35875 37000 37175 40878 41513 #> [14965] 42006 42835 44068 46152 46354 46632  1378  1396  1414  1514  1772  1835 #> [14977]  2244  2803  2892  3205  3555  3611  4208  4544  4696  5034  5104  5154 #> [14989]  5248  5429  6432  6457  6573  7393  7483  7598  7643  7789  9393 10335 #> [15001] 10465 10891 11075 11200 11496 12069 12510 12897 13729 14314 14675 14733 #> [15013] 15124 15479 15798 16150 16985 17563 17735 18480 19093 19905 20041 21126 #> [15025] 22385 22733 22811 23855 24001 25608 25665 26934 27644 29282 30180 30808 #> [15037] 31808 32330 33323 34311 35371 36666 37001 37523 38829 45353 46153 46833 #> [15049] 47864 48069 48260 49061 49269  1610  1655  1722  2181  2675  3138  3255 #> [15061]  3469  3826  3954  4164  4319  4578  4605  5214  5321  5668  5701  7260 #> [15073]  7484  7718  8846  9749 10767 11538 11780 11832 13454 13566 13972 14086 #> [15085] 14954 15178 15692 15855 17030 19598 19715 21905 23926 24340 24858 26648 #> [15097] 28568 29195 30034 31394 33075 34238 35781 37266 38053 38305 38561 38740 #> [15109] 39091 41834 41928 42187 43358 44363 45033 45705 46055 46355 48470 49481 #> [15121]  1448  1476  1670  1811  1836  1914  1997  2565  2804  2871  3036  3056 #> [15133]  3848  4039  4240  4469  4606  5638  6966  7394  8206  8256  8377  8551 #> [15145]  8591  9073  9346  9442  9667  9750 10225 10687 10987 11252 13348 13839 #> [15157] 15591 15856 16394 16449 16518 17206 17317 17457 17800 18110 18782 18905 #> [15169] 19094 19213 19845 20725 20856 21524 22319 22600 22877 23435 23498 23856 #> [15181] 24495 26061 26416 29043 29115 30092 30241 30585 32036 32200 32682 33654 #> [15193] 33729 34880 35372 36051 36477 37359 38391 38473 39829 40253 40604 41061 #> [15205] 42100 43189 43548 45034 46356 46633 46728 48953 49270  2139  2162  2786 #> [15217]  3001  3421  3641  3744  3874  4320  4786  4868  5002  5453  5481  5841 #> [15229]  5970  6183  6611  6796  7395  7525  7566  7599  9042  9347  9751  9885 #> [15241] 10226 10516 11578 12221 12744 12846 14034 14470 14581 15226 15965 16270 #> [15253] 16395 16627 17031 17143 17673 18652 19345 19716 20997 21657 22320 22530 #> [15265] 22734 23631 25243 25609 26275 26807 27351 27580 27645 27937 28329 28816 #> [15277] 29196 30809 31138 31395 31809 31969 32997 33324 34486 35782 36748 36826 #> [15289] 37002 37267 37360 38054 38474 38830 38917 39184 39663 39743 42007 43006 #> [15301] 43646 43911 44936 45248 47419 47645 48471 49159 49677  1812  2140  2208 #> [15313]  2704  3329  3955  4040  4128  5738  5971  6653  7485  7790  8021  8463 #> [15325]  8592  8965  9003  9210  9394  9487  9580  9983 10373 10688 11675 12374 #> [15337] 13567 13626 13730 14262 14734 15311 15480 15966 16691 17318 18481 18529 #> [15349] 18783 19095 19291 19665 19717 19906 20726 21462 21525 21712 22878 23239 #> [15361] 23632 25244 26198 26808 26869 27501 28641 28727 28893 29367 29734 34487 #> [15373] 35461 36749 37448 38222 38306 38651 38999 39271 39830 40605 41403 42008 #> [15385] 42577 43829 44853 45451 46154 46729 46941 47646 47955  1463  1495  1515 #> [15397]  1656  2061  2292  2318  2349  2464  2494  2676  3002  3401  3498  3665 #> [15409]  3923  4869  4922  5215  5282  5805  6495  6912  7183  7486  7600  7866 #> [15421]  8022  8257  8922  9160  9348  9932 10615 10892 11723 11918 12222 12511 #> [15433] 12898 13045 14087 14893 16450 17254 18593 18719 19292 19846 21184 23499 #> [15445] 23927 25666 26417 26727 27434 27854 28477 28569 29438 29735 30035 30242 #> [15457] 30586 30661 31064 32037 32415 35201 35541 35876 37268 37873 38392 38475 #> [15469] 39092 39570 40514 40606 40699 40974 42285 43190 45035 46634 46942 47420 #> [15481]  1496  1596  1680  2444  2537  2603  2677  3256  3310  3402  4165  4634 #> [15493]  4892  4923  5669  6150  6762  6945  7753  8773  9251  9443  9488  9536 #> [15505]  9668 10561 10653 11253 11497 13207 15179 15799 16451 16866 17207 17396 #> [15517] 18238 19346 20182 20487 20610 20793 20929 20998 21713 22192 22321 24937 #> [15529] 26120 26276 28967 30662 32416 33239 33730 33811 35280 35462 36750 37003 #> [15541] 37449 37874 38652 39093 39185 39454 41602 41673 41929 42286 43085 43191 #> [15553] 44262 45706 45873 46554 47748 47956 48171  1497  1516  1577  1597  1773 #> [15565]  2016  2118  2182  2293  2374  2805  2893  3057  3077  3257  3378  3556 #> [15577]  3924  4209  4292  4376  4470  4673  5003  5600  5878  6043  7487  7526 #> [15589]  7684  7828  9074 10689 10988 11405 11579 11781 11881 12070 13935 16867 #> [15601] 17319 17674 17866 18046 19041 19718 19847 20488 21064 21596 21714 22386 #> [15613] 22879 24266 24496 24568 25814 26562 26649 27502 27855 29197 29368 29518 #> [15625] 30663 31139 31970 32201 33489 34239 35281 35373 36133 36827 37004 38562 #> [15637] 39366 41151 43086 43988 44263 45354 47865 47957  1681  1933  1979  2039 #> [15649]  2335  2465  2705  2894  3003  3206  3557  3587  4635  4755  4787  5105 #> [15661]  5216  6116  6913  8417  9161  9211  9444 10077 10284 10466 11153 11724 #> [15673] 11972 12071 13349 13519 13673 14209 14735 15312 15857 16452 16692 16750 #> [15685] 17208 17458 17509 17564 17675 20930 21262 21658 22193 22960 24138 24418 #> [15697] 24859 25895 26121 26199 28642 30036 30093 32750 33076 33731 33893 33975 #> [15709] 34722 35783 36052 37269 37956 43912 45355 46730 47322 47647 49482  1536 #> [15721]  1611  1643  2229  2294  2851  3170  3719  4129  4184  4503  4579  4756 #> [15733]  5283  5454  5542  6217  6763  7080  7567  7905  7984  8297  9289  9933 #> [15745] 10944 11406 11973 14088 14676 14846 14955 15270 15313 15371 15744 15800 #> [15757] 16212 16572 16934 17144 17736 18305 18976 19347 20042 20611 20727 22045 #> [15769] 22735 22961 24139 24497 25403 26809 27205 28009 29598 30409 30587 30729 #> [15781] 31297 31810 33401 33655 35374 37090 37616 37875 39455 39664 40107 40340 #> [15793] 41757 43359 45249 45356 45621 47045 47530 49777  1555  1756  2062  2230 #> [15805]  2466  2566  2895  2918  3123  3207  3470  3524  3827  4005  4041  4293 #> [15817]  4377  4636  4674  4953  5035  5249  5322  5601  6797  7443  7601  7867 #> [15829]  8418 10374 10654 11076 11407 11447 11782 12181 13973 15481 15539 17510 #> [15841] 17737 18239 19096 20112 20999 22262 22671 22736 24860 25169 25245 27435 #> [15853] 28570 28968 29736 30730 30810 31140 31971 33812 35202 35282 35542 35711 #> [15865] 37361 38831 40012 40254 40515 42287 42578 43087 45145 46731 48261  1813 #> [15877]  2017  2096  2119  2567  3612  4815  5106  5284  5543  5670  6009  6324 #> [15889]  6363  7488  7527  7829  8298  8966  9120  9934 10562 10690 11077 11498 #> [15901] 11783 11919 12017 12223 12512 13107 13208 13257 13350 13731 13974 18358 #> [15913] 18594 19042 19293 19474 19530 19719 20545 20661 20794 21000 21065 22962 #> [15925] 23036 23154 23783 23857 24341 24419 25329 25404 25543 25740 25976 27646 #> [15937] 27783 29439 29963 30094 30410 31141 31811 32503 34796 34881 35877 37091 #> [15949] 37176 37270 38563 41235 42101 42579 43830 43989 44937 45357 45622 45794 #> [15961] 46635 46834 47531 48954  1598  1630  1774  1915  2018  2063  2097  2319 #> [15973]  2825  3004  3139  3379  3499  3828  4210  5936  6218  7791  8023  8636 #> [15985]  8739  9162  9395  9445  9581  9984 10733 11539 11882 11920 13299 13568 #> [15997] 13936 13975 15967 16213 16453 17209 18111 19294 19599 20304 20367 22046 #> [16009] 22387 23094 24938 25544 26492 26935 27581 27647 28089 28478 28728 29519 #> [16021] 29816 30325 31065 31298 32331 32829 32998 33732 34983 36828 37177 38832 #> [16033] 41319 42288 43449 44559 45036 46056 48667  1864  2019  2336  2538  3171 #> [16045]  3273  3330  3422  3720  4066  4580  5250  5544  6835  8337  8668  8847 #> [16057] 10420 10655 10893 11408 11580 12513 13108 13396 13732 13780 15918 16214 #> [16069] 16519 16693 17927 19043 19531 20489 21715 24342 24420 25405 26493 27352 #> [16081] 28180 28404 32123 32590 33077 34636 35878 36134 36478 38741 38918 40700 #> [16093] 42009 42759 42836 43549 43913 44167 45037 45146 47421 47532 48566 49483 #> [16105]  1612  1998  2020  2245  2295  2678  2896  3235  3588  6117  6458  6654 #> [16117]  7339  7602  8164  8207  8509  8967  9004  9537 10691 10734 11629 12610 #> [16129] 13209 13569 13937 14471 14956 15125 15314 16271 16751 16808 17928 18784 #> [16141] 19097 20490 20728 21001 21066 21345 21597 21786 23037 23095 24710 26122 #> [16153] 26563 28090 28479 29116 30037 30731 31299 33656 36214 36579 36667 37271 #> [16165] 37957 38393 42188 42668 42927 43007 43450 44560 44938 45452 45541 46155 #> [16177] 47046 47749 47866 48567 49062 49160 49394 49678  1657  1757  1980  2350 #> [16189]  2604  2726  2981  3274  3450  3642  3770  3804  4130  4349  4504  5004 #> [16201]  5076  5134  5285  5430  5482  5602  5671  6655  7081  7218  7489  7830 #> [16213]  7868  8165  8208  8378  8669  8923  9163  9212  9708 10563 10656 11112 #> [16225] 11409 12565 12899 12948 13109 13674 14366 14472 15540 18653 19295 19407 #> [16237] 20612 21346 21906 23155 23784 25246 25977 26200 27784 28091 29117 30181 #> [16249] 30900 31540 32124 32417 32683 32911 33813 34151 35784 38833 39367 40428 #> [16261] 40781 41404 42473 42837 43088 44364 45453 47958 48374 48760  1775  2141 #> [16273]  2495  2706  2872  2941  3359  3690  3771  4067  4104  4131  4241  4545 #> [16285]  4924  5135  5323  5361  5398  6290  6325  7340  7831  8740  8968  9043 #> [16297]  9164  9446  9985 10183 10285 10768 10853 11448 11974 12072 12279 12375 #> [16309] 12419 13627 14529 14801 15425 15592 15693 16096 16328 16454 16520 16935 #> [16321] 17676 17867 18306 18906 19907 20305 20546 20729 21002 22047 22531 22601 #> [16333] 22812 23156 23366 23500 23703 24267 24421 25085 29283 30507 31396 31464 #> [16345] 32202 32684 33733 34397 35120 35375 35463 35957 37524 37958 39094 39665 #> [16357] 40180 40255 43451 44657 44759 44854 46057 47750 48070  1849  1916  2064 #> [16369]  2098  2142  2375  2519  2897  2966  3360  3525  3829  4006  4294  5186 #> [16381]  5511  6010  6118  6219  6459  6726  8379  8419  8464  8848 10127 11630 #> [16393] 12182 12376 12783 13781 13938 14210 14677 15180 16028 18416 19214 19348 #> [16405] 21185 21409 22465 23096 23785 24002 24422 26201 26870 27087 28181 29284 #> [16417] 29663 30095 31709 32418 33578 34797 34984 37092 37178 37796 38653 38919 #> [16429] 39000 40013 40516 40975 41320 42289 45874 46058 46357 46835  1701  2065 #> [16441]  2520  2605  2633  2852  2982  4242  4581  4954  4980  5286  5362  5512 #> [16453]  5907  6044  6184  7261  8209  8338  8552 10467 10517 10564 10769 11725 #> [16465] 12183 13046 14411 14802 14847 15372 15745 15801 15919 16272 16628 17677 #> [16477] 17738 17986 18977 19908 20795 21716 21907 21979 22194 22672 23038 23240 #> [16489] 23928 24003 27436 28092 28246 28571 30664 30901 31710 32591 32685 32751 #> [16501] 35283 35712 36303 36479 37093 39666 40014 40108 40256 43990 44365 44760 #> [16513] 45623 46358 46458 47533 48472 48863 49484  1682  1702  1739  1776  1934 #> [16525]  2099  2120  2183  2296  2421  2758  2806  3172  3208  3772  3925  3978 #> [16537]  4350  4675  4893  5077  5287  5324  5513  5639  5739  5767  6086  6250 #> [16549]  6536  8210  8465  8510  8637  8700  9213  9252  9669 10421 11631 12377 #> [16561] 13840 14412 16029 20430 23786 25475 25667 26564 26936 29118 29285 29599 #> [16573] 29817 31620 32999 33160 34398 35713 35958 37179 38834 38920 39186 39456 #> [16585] 39744 39831 40782 41062 41152 43276 44168 44454 45147 45542 47867 49395 #> [16597]  1917  1935  2209  2351  3979  4955  5325  5399  5702  6045  6220  6537 #> [16609]  7685  7719  7906  8024 10227 10468 10518 11154 11784 12129 12224 12378 #> [16621] 12662 13628 14473 15271 15640 16455 16868 17618 18112 19600 20662 21186 #> [16633] 21717 23241 23566 25476 25741 26340 26810 26871 28330 29044 29520 29964 #> [16645] 31300 31621 33734 35284 35464 36915 37094 38835 40607 42102 42474 42928 #> [16657] 43008 43089 43360 43452 44658 44939 45624 46156 47959 48568 49063 49679 #> [16669]  1723  1865  2231  2445  2467  2521  2707  2898  3124  3173  3380  3875 #> [16681]  4007  4582  4870  5603  5842  5879  6251  6538  7004  7341  7444  8126 #> [16693]  8339  8670  9121  9489 10078 10128 10336 10735 10854 11301 12018 12225 #> [16705] 12420 12784 13675 13733 14035 14474 14736 14894 15373 16986 17739 19349 #> [16717] 19720 19775 19909 20113 22673 22813 23436 26341 26650 26937 27503 27938 #> [16729] 28480 29887 30902 31812 32419 33814 34312 34798 35959 37180 38836 39272 #> [16741] 40517 40783 41514 41758 43090 43277 43361 43991 44659 44761 45454 47144 #> [16753] 47422  2121  2232  2246  2273  2496  2727  2787  2983  3174  3275  3331 #> [16765]  3451  3500  3773  4270  4321  4378  4607  4788  4871  4956  5483  5545 #> [16777]  5806  7005  7754  7832  8258  8701  8807  9122  9617  9709  9752  9935 #> [16789] 10079 10565 10736 11726 13300 13455 13676 14475 14803 16151 16456 16694 #> [16801] 17397 18417 19044 19776 20730 21127 21787 22466 23704 24423 25011 25545 #> [16813] 25610 26811 27014 27939 28010 28894 30411 30508 31301 31711 34240 34723 #> [16825] 34985 35121 36135 37959 38055 39930 40109 40784 40879 42290 42475 42838 #> [16837] 46555 47534 47868 48473 49271  1793  1918  2081  2826  2873  3125  3140 #> [16849]  3175  3613  5155  5455  5546  5843  6011  6691  6870  6914  7490  7720 #> [16861]  7907  8166  8671  9165  9253  9290  9538  9886 10770 10816 11254 12019 #> [16873] 12379 12663 13047 13734 13782 13976 14263 15010 15426 15920 15968 16457 #> [16885] 17740 17929 18720 19475 20491 21128 21908 22388 23633 24205 24343 24780 #> [16897] 27712 29369 30038 31142 32038 32125 34067 35543 38133 40429 40701 41236 #> [16909] 42189 43091 43992 46459 47323 47423 48569 48955 49272  1850  1866  2021 #> [16921]  2422  2759  2807  2827  3005  3501  3830  3956  4008  4505  4872  5768 #> [16933]  6087  6291  6692  8702  9887 10080 10469 10817 11201 11540 11676 11727 #> [16945] 12462 12847 12949 14264 14582 14678 15056 15181 16030 18907 20368 21003 #> [16957] 21067 21598 22674 22737 23039 23301 23705 25086 25170 26062 27286 28093 #> [16969] 28729 28817 31066 32039 32203 33325 33657 35122 37617 39457 40181 41759 #> [16981] 42379 42669 42929 43362 43550 43914 44069 44561 45250 45358 48375  1936 #> [16993]  2122  2606  2874  3311  3526  4894  5604  5937  6151  6574  7342  7755 #> [17005]  7833  8057  8211  8420  8593  8969  9291 10026 10228 10337 10566 10692 #> [17017] 10818 10989 11113 11155 11541 12380 13397 13456 13735 13977 14957 15641 #> [17029] 15694 15746 16629 16987 17032 17210 20306 20547 20613 21851 22532 24076 #> [17041] 25406 25477 25668 28572 28730 29521 29737 29818 31465 34799 35465 36053 #> [17053] 37362 38307 38564 39187 39745 40015 44366 44660 46157 47424 48262 49778 #> [17065]  1867  1919  2568  2634  2899  2919  3176  3276  3831  4042  4211  4271 #> [17077]  4295  4506  5036  5078  5703  5807  6221  6364  6656  7118  8025  8058 #> [17089]  8091  9005  9166  9447  9490  9670  9797  9986 10229 11449 11883 12323 #> [17101] 12566 12785 12900 14089 14211 14265 14476 16458 16809 17741 18844 19161 #> [17113] 19215 19601 19666 20614 20796 21068 21410 23242 23567 25478 26123 26342 #> [17125] 26418 26565 28331 29198 30509 30588 31067 31885 31972 32504 33490 34800 #> [17137] 36916 37005 37363 38223 39667 40430 40880 41835 42839 44562 46158 46254 #> [17149] 46943 49779  1999  2233  2352  2446  2539  2657  2853  3527  3721  4322 #> [17161]  5107  5326  6046  6222  6836  7528  7721  7908  8808  8884  8924  9075 #> [17173]  9671  9936 10184 10375 10657 10771 11156 11728 12226 12664 12786 13153 #> [17185] 13210 13629 14147 14530 15272 16215 16459 16521 17211 17398 17565 17619 #> [17197] 17678 18113 18418 19476 19721 19777 19848 20183 20431 21526 21718 22195 #> [17209] 22814 25479 25611 25896 26566 26651 26728 27353 28481 28573 29522 30039 #> [17221] 31712 32126 32204 33579 33658 34882 36054 36480 37272 37704 37876 40016 #> [17233] 40257 40518 41603 42580 43278 45875 45969 47145 47324 48376  1851  2000 #> [17245]  2184  2247  2320  2540  2569  2728  2788  2854  3277  3558  3745  3774 #> [17257]  3926  4212  4546  5400  5769  5844  6252  7445  7722  7756  7834  7945 #> [17269]  8925  9214  9672 11255 11833 12184 13783 14413 14477 15593 15802 16031 #> [17281] 16573 16752 16936 17868 19162 20931 22602 22675 23437 24939 25247 25612 #> [17293] 25897 25978 26202 26872 27582 27785 29738 31622 32127 32205 33735 34637 #> [17305] 35629 36055 36304 38476 38565 38654 41063 42476 46556 48377  2040  2082 #> [17317]  2274  2522  2570  2587  3141  3403  3528  3666  3746  4068  4105  4323 #> [17329]  4816  4838  5037  5327  5605  5740  5770  6012  6871  7491  8340  8672 #> [17341]  8774  8849  9491 10185 10338 10376 10616 10772 11581 11632 11677 11785 #> [17353] 12567 12611 12787 13154 14531 14804 15594 15642 15695 16273 17320 18114 #> [17365] 19098 19477 20184 20932 21187 21599 22263 22533 23501 24861 25171 25815 #> [17377] 26567 26938 27206 28094 28247 29199 30732 32269 33000 34986 35203 36305 #> [17389] 36580 37273 37450 38566 39188 40182 41153 43738 44762 44940 45970 46836 #> [17401] 47047 48761 49576  1937  2083  2297  2376  2468  2679  2828  3058  3177 #> [17413]  3209  3381  3502  3747  3876  3899  4043  4132  4185  4351  4507  5187 #> [17425]  5547  5572  5672  5704  5771  6400  6657  6837  7568  8092  8809  9006 #> [17437]  9396 10230 10377 10945 11410 12020 12665 13211 13258 13677 13978 14532 #> [17449] 15803 15921 15969 17321 17399 18307 18595 18845 20307 20369 20432 20663 #> [17461] 21069 21263 21600 21909 22322 22963 23438 24781 25898 26124 26939 27354 #> [17473] 28482 28731 31143 32592 34241 34724 36917 37364 38224 39571 40608 41064 #> [17485] 42760 43092 45359 48762  2001  2469  2523  3006  3210  3258  3312  4009 #> [17497]  4272  4352  4411  4608  5217  5972  6152  6253  6326  6915  7006  8167 #> [17509]  8299  8810  9123 10946 11975 12073 12324 12666 13155 13212 13259 13882 #> [17521] 14212 14958 15057 16032 16460 17212 17322 17511 17620 17679 18419 18596 #> [17533] 19778 20615 21659 22264 22738 23502 25899 25979 26063 27287 27856 28732 #> [17545] 28969 30182 30243 31466 31713 31886 32420 33580 34242 35204 36481 37365 #> [17557] 37451 37960 38134 38308 38742 40431 41760 43551 43915 44763 45455 47048 #> [17569] 48263 48474 49577 49780  2399  2497  2729  3361  3589  3614  3643  3775 #> [17581]  4166  4412  4508  4637  4817  4895  5038  5328  5484  6088  6401  6460 #> [17593]  6658  7262  8127  8970  9124 10027 10422 11256 11582 12074 12950 13048 #> [17605] 14213 15427 15541 15747 16097 16630 18359 19163 19532 20308 20370 20731 #> [17617] 20857 21129 23568 23706 24206 24424 24640 25546 25669 26064 26419 26729 #> [17629] 28483 28643 28818 29045 29523 29664 30811 34399 35466 35785 36829 36918 #> [17641] 38837 40183 40258 40609 40881 41674 42190 42761 43093 44455 44855 45707 #> [17653]  1981  2100  2248  2423  2708  3126  3877  3900  3927  3980  4106  4186 #> [17665]  4213  4609  4957  5741  5973  6659  7869  8511  8926  9044  9397 10231 #> [17677] 10378 10855 11450 12021 13301 13630 13883 13979 14959 15058 15643 15804 #> [17689] 16033 16522 17255 17400 17566 17680 18047 18175 18240 18420 18597 18654 #> [17701] 20231 20664 20933 22323 22815 22880 24425 25330 25613 26203 26873 27857 #> [17713] 28248 28332 28970 29370 29440 31714 31973 34563 34638 35123 35714 37452 #> [17725] 37525 37618 37797 39368 40341 41515 42103 43363 44264 45038 46159 46636 #> [17737] 46732 47425 47869 48071  2210  2234  2498  2541  2680  3101  3332  3423 #> [17749]  3849  4010  4243  4638  5329  6185  6327  7007  7082  7219  7446  7909 #> [17761]  8128  8212  8341  8421  8512  8594  9076  9292  9618  9888 10693 11114 #> [17773] 11202 11786 11921 12612 12990 13156 13260 14090 16329 17801 17869 18908 #> [17785] 19045 19296 20616 20732 20797 22739 23367 24940 25480 26277 26652 26812 #> [17797] 28971 29819 30733 30903 33326 33815 34564 37366 38921 39572 40110 40882 #> [17809] 41405 41516 42762 42840 43094 43192 44070 44367 44661 46460 46557 46637 #> [17821] 48264 49161 49578  2022  2249  2607  2829  2855  2984  3142  3178  3471 #> [17833]  3529  4379  4437  4583  4789  5079  5188  6119  6153  6223  6612  6764 #> [17845]  7220  7644  7757  8259  8466  8811  9077  9254  9937 10028 11787 12280 #> [17857] 14315 14533 14805 14895 15428 15595 15644 16216 18115 18308 20185 20371 #> [17869] 21130 21347 22964 23368 25742 25900 27288 27713 27858 28819 29286 30589 #> [17881] 32040 32593 32752 33327 33491 33816 35544 35786 37798 38135 41406 41604 #> [17893] 41761 42291 42841 43279 43552 44764 46359 46638 48668  2185  2298  2377 #> [17905]  2447  2730  2760  2920  3179  3691  3957  4069  4133  4353  4896  5485 #> [17917]  5548  5974  6013  6154  6328  6461  6946  7343  7985  8595  8638  9045 #> [17929]  9293  9619 10081 10186 10990 11451 11633 11922 12075 12130 12381 12848 #> [17941] 13157 13398 15273 15596 16574 17033 18846 19216 20114 20186 20492 21188 #> [17953] 23040 23157 23634 23707 24077 24426 25331 25816 26813 26874 27355 28182 #> [17965] 28574 29739 29965 30412 32270 33581 33976 34243 36919 37453 37526 39001 #> [17977] 41675 42292 43009 43993 44662 45708  2084  2163  2211  2299  2499  2571 #> [17989]  2658  3078  3143  3472  3644  3692  4070  4273  4471  4509  4790  5080 #> [18001]  5549  5673  5908  6186  6433  6462  6727  7396  8927  9215  9673 10029 #> [18013] 10470 10694 11203 11257 11923 12788 13351 13399 13884 14478 14630 14679 #> [18025] 15645 15696 15922 17401 18655 19297 19722 20433 22196 22265 23041 23503 #> [18037] 24569 24641 25012 25743 26814 27289 27583 27859 29119 31715 34152 34883 #> [18049] 35056 36388 37799 38567 39002 40342 41154 41605 44765 46059 46461 47870 #> [18061] 48763 49162  2470  2659  2761  3007  3236  3278  3667  3693  3850  4071 #> [18073]  4107  4244  4413  5156  5251  5772  5845  6187  6292  7569  7723  8093 #> [18085]  8260  9007 10658 10773 10947 11729 12568 12667 13631 13784 14214 15011 #> [18097] 15227 15315 16274 16869 17145 18656 19667 19723 20434 21070 22048 22118 #> [18109] 23369 24344 24570 25013 26065 26343 26420 26940 27088 28333 29888 29966 #> [18121] 31068 31467 31974 32271 32421 33240 33402 33582 34244 34884 36056 37800 #> [18133] 37961 38655 41237 42104 42670 43095 43280 45543 45971 46733 46837 47960 #> [18145] 48072 48172 48570 48864  2101  2275  2424  2542  2942  3333  3645  4414 #> [18157]  4438  4697  5252  5330  5550  5742  6329  6798  6872  6916  8703  9889 #> [18169] 10187 10471 11976 12281 12613 12901 15012 16396 16523 18482 18530 18598 #> [18181] 19910 21264 21601 23097 23370 25172 25248 26730 28334 29371 30040 30326 #> [18193] 30983 31541 31887 32686 33078 33161 34153 35124 35205 35467 37877 38136 #> [18205] 38394 38477 40610 41238 41836 42477 42671 44071 44941 46060 46462  2543 #> [18217]  2660  2856  3079  3102  3180  3334  3530  3668  3901  4324  4510  4639 #> [18229]  4791  5005  5253  5486  5573  5773  6765  7047  7344  7529  7645  7870 #> [18241]  7946  7986  8094  8129  9008 10774 10894 11258 11788 12569 12614 12668 #> [18253] 13841 14534 15182 16524 17512 18048 18241 18909 19533 20309 21910 21980 #> [18265] 22467 22881 22965 23158 23302 23787 23858 23929 24427 24711 25014 25173 #> [18277] 27089 27504 28183 28895 29524 29665 29740 30041 30984 31144 31975 32594 #> [18289] 33659 33977 36215 37878 38922 39668 41239 41517 41676 43553 44072 44368 #> [18301] 44563 46160 46558 46639  2709  2762  2789  2830  3059  3237  3279  3473 #> [18313]  3694  3958  4044  4072  4187  4698  5136  5363  6539  6728  6873  8261 #> [18325]  8300  8342  9216  9938  9987 10232 10519 10567 11078 11361 11834 12570 #> [18337] 14848 15059 15374 15542 15970 16753 16937 16988 17402 17742 19099 19350 #> [18349] 19534 20187 20548 20858 21071 21131 21981 22049 23042 23930 24078 26494 #> [18361] 26653 27356 27505 27584 28011 28575 28644 29666 29889 30985 32753 33162 #> [18373] 34245 34488 34639 36216 37274 38478 38656 39003 39095 39573 40702 40883 #> [18385] 41240 42380 42763 42842 43364 44856 45456 48378 48865 49579  2588  2608 #> [18397]  3103  3127  3280  3313  3362  3404  3474  3959  4073  5039  5364  5456 #> [18409]  5640  5975  6047  6365  6463  6693  7345  9620 10082 10659 11302 11362 #> [18421] 11499 12282 13261 13400 14036 15375 17743 18242 18483 18847 18910 19779 #> [18433] 20549 21072 21132 21265 22468 22740 24642 25817 26066 26495 27437 27860 #> [18445] 28095 29741 30734 30986 31302 31623 32505 33492 34725 34885 35545 37879 #> [18457] 38137 38395 40017 40432 41155 42010 42581 42672 43994 44456 45709 46463 #> [18469] 46838 47648 47961 48379 49273 49680  2400  2471  2572  2731  2857  3037 #> [18481]  3259  3382  3503  3590  3981  4074  5040  5189  5909  6155  7048  7263 #> [18493]  8639  9349  9539  9674 10895 10991 11583 11634 11678 11884 12185 13213 #> [18505] 13457 14680 14737 14960 15060 16098 16525 16754 17459 17802 18531 18785 #> [18517] 19911 20043 20372 20733 21463 21527 22119 22882 24079 24498 24643 24712 #> [18529] 25407 26496 27290 27714 27861 28484 29120 30327 30987 33163 34565 34886 #> [18541] 36389 37619 37705 38479 39458 41930 42105 42673 44766 44942 45251 45710 #> [18553] 45876 47234 47751 48571  2235  2353  2448  2681  3008  3260  3281  3776 #> [18565]  3982  4325  4415  4792  5190  5288  5331  5910  6366  6402  7397  7603 #> [18577]  7947  7987  8095  8301  8640  8741  8775  9448  9582  9843  9939 10233 #> [18589] 10695 10819 12514 12745 12902 12991 13110 13262 13678 13980 14681 15061 #> [18601] 15183 15646 15697 18911 19046 21073 21464 21602 22676 23098 23504 23635 #> [18613] 23859 24713 25174 27148 27207 27585 28249 29667 30413 30590 31303 31716 #> [18625] 32332 34400 34640 34987 35285 38657 42582 43831 44169 44457 45711 46559 #> [18637] 47325 47649 48956  2378  2449  3335  3777  3983  4439  5846  6613  7447 #> [18649]  8302  8467  9449 10856 10896 11204 11584 11679 12789 13458 13736 13885 #> [18661] 13981 14266 15013 15228 15647 15858 15971 16152 16461 16810 17323 18116 #> [18673] 19408 20798 21719 22741 23636 24571 24782 25901 27015 28335 28820 29820 #> [18685] 29967 30042 30183 30328 30665 31304 31397 33493 33660 33736 36136 37454 #> [18697] 38138 39096 39459 40785 41606 43193 44073 45795 46360 47146  2250  2401 #> [18709]  3211  3646  4214  4440  4640  4757  4818  5332  5401  5551  6048  6188 #> [18721]  7346  7448  7492  8553  8971  9350  9540  9753 10030 10568 11835 12076 #> [18733] 12615 13352 13459 15429 15597 15698 15748 15805 15859 17803 18243 18309 #> [18745] 18599 18912 19351 20859 22677 23159 23439 25087 25408 25547 25670 26125 #> [18757] 26204 26731 27506 28096 29441 31468 32830 33328 34313 37006 39574 39832 #> [18769] 40343 40976 43096 44170 45148 46560 46640 47326 47426 49781  2337  2900 #> [18781]  3212  3282  3336  3878  4441  5137  5254  6729  6947  7347  7530  7910 #> [18793]  8262  8928  9583 10423 11789 11885 12227 13111 13302 13570 15062 15860 #> [18805] 16034 16575 17213 17403 17567 18484 19100 20373 20799 20934 21189 21266 #> [18817] 21603 22534 22603 23243 23569 23708 24004 24345 25548 27208 27357 28405 #> [18829] 30184 33164 37455 37880 39460 40611 40884 42191 42843 43995 46255 47327 #> [18841] 47752 49274 49485  2402  2573  2967  3337  3452  3475  3559  3615  3669 #> [18853]  3778  3984  4472  4676  4726  5041  5431  5487  5705  5911  6403  6434 #> [18865]  6614  7049  7264  7449  7792  7948  8380  8641  8812  9541 10083 10188 #> [18877] 10286 10339 11033 11790 11886 12228 12283 12992 13112 13886 14316 14367 #> [18889] 14414 15648 16526 17214 17256 18244 18532 20115 20374 20435 21465 22120 #> [18901] 23440 24207 24572 24644 25332 26941 27862 29668 30591 30735 31469 32754 #> [18913] 34401 34566 37367 39369 39575 41241 41762 42011 43194 44369 44564 44663 #> [18925] 46161 46734 48173 49580  2500  3144  3261  3424  3670  4011  4045  4215 #> [18937]  4296  4326  4547  4958  4981  5191  5402  5774  6464  6967  7221  7348 #> [18949]  7604  7758  7871  8303  8673  8776  9078  9255  9398  9890 10775 11079 #> [18961] 11303 11836 13049 14317 14738 14849 15699 15972 18310 19047 20800 21267 #> [18973] 22050 22816 25671 25818 26278 26875 27358 27648 27863 28576 28645 29525 #> [18985] 30904 32333 32422 33737 36137 36306 37527 38658 39461 40018 40612 40786 #> [18997] 41065 42674 44171 47328 49486  2635  3009  3060  3145  3504  3531  3695 #> [19009]  3879  4108  4134  4354  4839  5042  5157  5255  5289  5457  5488  5706 #> [19021]  6120  6367  7146  7493  8059  8130  8263  8468  8642  8813  9450 10472 #> [19033] 10617 10992 11115 11205 11542 11635 11977 12077 14091 14148 14682 14739 #> [19045] 15316 15482 16153 16811 16938 17324 17513 18245 18848 21190 23043 24005 #> [19057] 24573 24862 24941 25672 26344 26497 27359 27715 28336 30592 30988 31976 #> [19069] 32831 33403 34887 36390 36581 37095 37706 38659 39273 39462 40111 40184 #> [19081] 40433 41242 41407 41763 42293 42675 43453 44265 44664 46256 47871 48572 #> [19093] 49581  2403  2609  2985  3748  4355  4380  4699  5192  5938  6189  6330 #> [19105]  6730  6766  6968  8469  9125  9351  9399 10031 10473 11034 12515 12903 #> [19117] 12951 13460 13737 14037 14806 14896 15274 15317 15543 15861 16099 17146 #> [19129] 17215 18421 19048 19724 21604 21982 22535 23570 24006 24574 24714 25175 #> [19141] 25549 25744 25819 26126 26421 26815 26876 27291 27507 27864 29121 29600 #> [19153] 30329 30905 31624 35468 35879 36482 37007 37096 37181 38838 39004 39463 #> [19165] 40019 40112 41931 42106 42192 43554 43916 45625 46839 47427 47872 49163 #> [19177]  2472  2544  2808  2858  2968  3181  3213  3532  4188  4274  4327  4840 #> [19189]  5006  5108  5290  5365  5514  5574  5912  6254  6331  6575  6948  8343 #> [19201]  9294  9492  9710  9754  9844 10084 10569 10696 10776 11035 11680 12078 #> [19213] 12382 12790 12993 13632 13679 13842 14318 15649 15806 15862 16462 16527 #> [19225] 17325 17804 18913 19977 20436 20935 21004 21605 21720 22389 22604 23160 #> [19237] 24007 25550 26568 26732 26816 26877 30096 31542 31977 32206 33329 33404 #> [19249] 33817 33894 34246 34801 36830 37097 37620 37801 38396 38568 39464 40020 #> [19261] 40977 42107 43647 47535 48475 48669 49582 49782  2425  2473  2710  3038 #> [19273]  3283  3363  3749  4841  5432  5707  6969  8850  9493  9988 10085 10287 #> [19285] 10618 11837 12131 12669 12904 13050 13353 13571 15229 15700 16035 16631 #> [19297] 17404 17460 18360 18422 18600 19101 19535 20734 21983 22605 23441 23788 #> [19309] 24140 24428 24499 25551 26733 27209 27360 27508 28012 28896 31145 31813 #> [19321] 32128 34154 35787 39097 40978 41156 41677 41837 43739 44767 44943 45149 #> [19333] 46561 48670  2426  2711  2921  3146  3476  3722  3851  3985  4511  5109 #> [19345]  5193  5575  6121  6156  6190  6255  6368  6660  7050  7147  7222  7349 #> [19357]  7605  8470  9079  9217  9400  9451 10288 10340 11791 13633 13680 13843 #> [19369] 15063 15650 16528 16632 17084 18049 18978 19602 21788 22606 23099 23161 #> [19381] 24141 24575 24942 25249 25820 27786 28577 29046 29287 33405 34802 34888 #> [19393] 35788 36582 36751 37008 38225 39931 41243 41838 42676 43454 43648 43740 #> [19405] 43832 45150 46944 47962 48380 48573  2501  2732  2831  2922  2969  3314 #> [19417]  3647  3880  4356  4873  5110  6049  6191  6293  6465  6540  6970  7570 #> [19429]  7793  8554  9046  9352  9452  9755  9891  9989 10032 10379 10777 10897 #> [19441] 11259 11730 12670 13158 13572 13939 15184 15376 17461 17681 20116 20801 #> [19453] 20936 21528 22197 22266 23162 24346 24783 24863 26422 26569 27940 29122 #> [19465] 29442 30812 31069 31146 31814 32423 32832 34314 34889 35469 35630 35960 #> [19477] 37098 39189 39576 39833 40344 43917 44370 46735 47753 47963 49164  2636 #> [19489]  3671  4189  4473  4925  4959  5939  7265  7303  7494  8471  9080  9542 #> [19501] 10380 11157 12022 12791 13263 13354 13573 13681 14683 15014 15377 15863 #> [19513] 17514 17987 18721 18979 19352 19912 20188 20937 21984 22678 22742 23163 #> [19525] 24645 24715 26570 27361 27716 29288 29443 29601 30414 31470 31717 32506 #> [19537] 32595 33406 35286 35715 36391 36583 37368 38397 39465 39669 42108 43195 #> [19549] 43833 43918 44172 45712 45796 48174 48265 49583  2589  2712  3010  3039 #> [19561]  3182  3315  3338  3477  3591  3696  4381  4819  4982  5489  5552  5576 #> [19573]  5708  5940  6256  6496  6541  6731  7223  7835  8742  9218  9353  9798 #> [19585] 10086 11036 12571 13844 14479 14684 15318 15378 15749 16330 16463 16695 #> [19597] 17568 17744 20044 21005 21411 21911 22679 24347 24943 25015 25088 26423 #> [19609] 27941 28337 28485 29742 30415 30906 33330 33978 34068 34315 36392 36584 #> [19621] 37621 39098 39190 40345 40613 40703 42193 42764 43834 43919 44665 45151 #> [19633] 45626 45713 46464 46840 49584  3183  4012  4245  4442  4842  5158  5291 #> [19645]  5515  5606  5641  6089  6497  6661  7119  7350  7571  8060  8929  9009 #> [19657]  9081  9126  9295  9543  9756 10520 10619 10660 11037 11411 12792 12849 #> [19669] 13738 13845 14038 14480 15126 15275 15544 15750 15923 16100 17988 18361 #> [19681] 18423 18786 18980 20493 21133 23100 26654 27362 28013 28097 28184 28250 #> [19693] 29289 29743 31625 31888 32129 32912 33079 33165 34402 35631 35789 36585 #> [19705] 37456 37528 39191 39746 40113 40185 40787 41244 42294 43196 43455 44458 #> [19717] 45797 45877 48175  2832  2923  3902  4216  5159  5709  5743  6799  6917 #> [19729]  7450  7794  8743  9082  9621 10289 10424 10778 11116 11304 11363 11636 #> [19741] 12284 12463 12671 13051 13113 13159 14481 16633 17147 18601 19102 19603 #> [19753] 20437 21268 21852 21985 22198 23101 23371 23505 26279 26817 28486 28578 #> [19765] 28972 29444 31147 31543 32913 33738 35470 36586 36668 38309 38743 39274 #> [19777] 40021 41066 41157 42194 42381 42844 46361 46562 46641 48957  2610  3040 #> [19789]  4512  4700  4793  4926  4983  5043  5256  5880  6192  6498  6576  7304 #> [19801]  7495  7911  8555  9083  9990 11080 11585 11887 11978 12079 12325 13052 #> [19813] 14092 14535 15064 15430 15751 15924 16036 16634 16696 16755 17148 17621 #> [19825] 19978 20438 21134 22267 22390 22817 22883 22966 23164 23637 24576 25176 #> [19837] 25980 26424 26655 26734 31889 31978 32130 33407 35287 36669 40434 41678 #> [19849] 44173 44371 45039 45252 45457 49396 49487  2590  2790  2924  2943  3104 #> [19861]  3214  3262  3383  3723  4013  4275  4416  4641  4820  4874  5160  6224 #> [19873]  6874  6918  6949  8026  8472  8513  9256  9354  9892 10129 10697 10779 #> [19885] 11158 12383 12421 12516 12850 15127 15701 15973 16812 16989 17034 17515 #> [19897] 19725 19913 20045 21853 22680 22884 23303 23442 25981 26878 27016 27210 #> [19909] 28338 28733 30244 30907 31070 31544 32272 33408 34489 35376 35790 37099 #> [19921] 37529 37962 39577 39932 40022 40885 41408 42478 43197 44174 44372 44944 #> [19933] 45972 47147 47964 49585 49783  2733  3011  3215  3263  3592  3779  4246 #> [19945]  4382  4443  4474  4610  4642  4677  5194  5642  6014  6157  6193  7083 #> [19957]  7266  7305  7531  7872  7912  8131  8851  8972  9047  9084  9167  9757 #> [19969]  9845  9940 10087 10290 10381 10698 12080 12132 12746 13160 13785 14685 #> [19981] 14740 15702 16101 16275 16397 16635 16697 19409 19979 20375 20938 21269 #> [19993] 21412 21721 21789 21854 23102 25250 26280 26345 27363 27787 27865 28014 #> [20005] 28098 28821 30813 33001 35471 35632 35961 36217 37707 39005 40614 40788 #> [20017] 43741 44373 44857 46061 46642 49165  2611  2833  3780  3832  4014  4357 #> [20029]  4897  5044  5161  5292  5366  5490  5775  5976  6838  6919  6950  7008 #> [20041]  7398  8885 10382 10521 10570 10737 10780 10820 10948 11206 11305 11681 #> [20053] 11924 12616 13053 13682 13940 14415 15752 16331 17870 18787 19164 19353 #> [20065] 19849 19914 20665 21191 21348 21660 22391 22818 23789 25481 25745 26205 #> [20077] 28822 29047 29445 29890 30416 32131 33979 34403 35791 36218 36483 37275 #> [20089] 37881 40519 41679 41839 42012 43555 43649 43835 44266 45152 45798 46162 #> [20101] 47754 48671 48764 49166 49397 49681  2791  2944  3061  3105  3216  4075 #> [20113]  4513  4701  5491  5516  5941  6050  6225  6332  6615  6662  6767  7224 #> [20125]  7351  7988  8132  8381  8886  9758  9893 10291 11500 11838 12905 13683 #> [20137] 13887 13982 14267 14482 14631 15651 16529 16576 16698 17257 17405 18050 #> [20149] 18602 19726 19780 19915 20310 20550 20802 20939 21466 21722 22392 23165 #> [20161] 24008 25251 25409 25482 27149 27364 27586 29968 30908 31471 32424 32507 #> [20173] 33739 34803 36393 36670 36752 37276 38139 38660 39370 43097 43742 44175 #> [20185] 44666 45627 45878 47755 47965 48672  2834  3080  3128  3505  4076  4548 #> [20197]  4584  5808  6051  6369  6732  6839  7795  8061  8674  8777  8887 10383 #> [20209] 11081 11207 11452 11839 12851 15128 15319 16276 17085 17258 18981 19850 #> [20221] 21529 22885 23571 24009 24348 25016 25483 25552 26346 26571 27509 27717 #> [20233] 29048 30593 30909 31626 31979 33241 34404 34641 35057 36831 36920 39466 #> [20245] 39834 40023 40979 41518 44267 44374 45799 47966 49398 49682 49784  2734 #> [20257]  2763  2925  3041  3081  3384  3478  3852  3928  4077  4167  4611  4794 #> [20269]  4843  4875  5218  5517  5607  5776  5847  6257  6733  7686  8264  8778 #> [20281]  8852  9010  9219 10781 11682 13161 13941 14632 14897 15379 15598 15652 #> [20293] 15864 15925 16464 17682 17805 17989 18362 19604 19980 21349 21530 21723 #> [20305] 22051 22469 23931 24268 25484 25746 26572 26656 28185 28646 28897 29446 #> [20317] 29669 30097 31220 31398 31718 34726 36671 37369 40114 41764 42195 42845 #> [20329] 44176 45360 45879 46062 46465 47235 47329 49586  2835  3238  3264  3364 #> [20341]  3781  4358  4612  4758  4795  5643  5710  5777  6734  7084  9544 10522 #> [20353] 10898 12285 13054 14416 16332 16699 16813 17683 18311 18603 18657 18849 #> [20365] 19781 20376 21790 22121 22819 24646 24944 26942 27150 28015 28487 29200 #> [20377] 29744 31545 34247 38056 40520 41321 42196 42846 44268 44375 46257 47650 #> [20389] 47756 48073 48765 49167  2792  3284  3560  3853  4190  4328  4984  5293 #> [20401]  5674  5744  6294  6370  6577  6971  7051  7724  7913  8062  8213  8265 #> [20413]  9711 11159 11260 11925 12852 13786 14368 15483 15599 16154 16577 18117 #> [20425] 18246 18533 18604 19478 19782 19981 20494 22052 22199 22536 23506 24010 #> [20437] 24349 24500 25747 26067 26818 27649 27942 28734 30043 30330 31546 31719 #> [20449] 31815 32755 33002 34804 36484 36672 36753 37963 38569 39192 39275 39933 #> [20461] 40186 40704 41158 41932 43456 43556 43650 44177 44376 45253 47049 48176 #> [20473]  2764  2926  2945  3082  3106  3239  3405  3425  3561  3782  4135  4191 #> [20485]  4329  4549  5111  5675  5745  5881  6158  6466  7352  7532  7759  8304 #> [20497]  8422  8853  8888  9296  9584  9846  9991 10189 10234 10782 12464 12617 #> [20509] 13055 14039 14807 14850 15653 16870 16990 17684 17871 18247 19298 20046 #> [20521] 20311 20735 21006 21192 21531 21912 22324 23638 23932 24011 25089 25748 #> [20533] 26498 29123 30098 30331 30594 31221 31720 32132 32687 34155 34890 35377 #> [20545] 35962 36673 37182 38744 39371 40435 41322 41680 42013 42479 43010 43365 #> [20557] 43836 44565 46736 47236 48958  2901  2927  3385  3672  3805  4136  4359 #> [20569]  4475  4643  4727  4844  4960  5162  5219  5518  5942  6840  7120  7606 #> [20581]  7646  7796  8168  8344  9297  9585  9799 10821 11160 11586 11731 12081 #> [20593] 12747 12793 13461 13520 13684 13787 14215 15545 15926 16578 16939 17216 #> [20605] 17930 18658 18914 20047 20189 20551 21007 21532 22325 23304 23790 24012 #> [20617] 24647 24784 25177 25485 25553 25821 26206 26425 26819 26943 27510 28823 #> [20629] 29526 29745 32688 33409 34156 34316 34405 36057 36307 37708 37882 37964 #> [20641] 40024 40346 41409 41840 42382 44858 45361 47330 47873 48574 49168  3147 #> [20653]  3285  4015  4417  5195  6768  6800  6972  7306  7399  7914  7949  9586 #> [20665]  9847 10130 10384 10425 10571 11161 13634 15276 15546 15600 15974 16333 #> [20677] 16398 16465 16756 17259 17745 17806 18485 18659 19103 19668 19851 20552 #> [20689] 21008 21193 21724 22122 23044 23443 23791 25410 26820 27211 28099 28735 #> [20701] 29670 31222 31399 31472 32207 33661 34891 36674 36921 38140 38745 39578 #> [20713] 39934 42109 42197 42295 42930 43837 44269 44459 44945 45628 47967 48266 #> [20725] 48673  3012  3184  3386  3783  4137  4418  4613  4644  4927  5112  5220 #> [20737]  5577  5644  5809  7607  8305  8345  8643  9220  9587 10523 11261 11926 #> [20749] 12023 12326 12384 12572 13635 13942 14483 14583 15865 15927 16940 17326 #> [20761] 17569 17685 17807 18176 19479 21467 21661 21725 22053 22326 22607 24350 #> [20773] 24648 24716 24785 25749 25822 25982 26879 27365 27718 27788 28736 29372 #> [20785] 29527 31071 31400 32041 32689 33740 33980 35125 35206 35792 37457 38570 #> [20797] 38661 38746 39579 40886 41410 42480 45880 46163 46841 47874 49275  2946 #> [20809]  3217  3286  3616  3903  4046  4444  5196  5848  5977  6159  7121  7400 #> [20821]  7451  7836  7873  7915  8346  8596  9168  9221 11306 11792 12618 12906 #> [20833] 13462 14216 14741 15484 16579 16636 16871 17149 18605 19165 19605 21468 #> [20845] 21726 22268 22608 22681 22886 22967 24717 25178 25333 26068 26347 26499 #> [20857] 26880 27438 27866 28186 28579 29290 32042 32208 32508 34892 35288 35472 #> [20869] 36394 36832 38226 39006 39193 41067 41765 42110 43098 43557 43920 44460 #> [20881] 44566 45458 46063 47237 47536 48959  3083  3148  3479  3593  4047  4419 #> [20893]  4961  5257  5294  5403  5458  6122  6542  6875  7009  7085  7307  7760 #> [20905]  8854  8930  9401  9894 10131 10993 11453 11732 12133 12573 12994 13739 #> [20917] 13788 13943 16037 16991 17516 17686 17808 18424 18486 19354 19783 19916 #> [20929] 19982 20666 21533 22200 22327 22968 24269 24649 24945 25017 25179 26069 #> [20941] 26500 28016 28406 29821 30099 30185 30245 30814 31223 32133 32334 32833 #> [20953] 32914 33080 33166 33242 33494 35546 35880 36485 36833 37009 38057 38571 #> [20965] 39670 40115 40187 40259 42481 42931 43011 43099 43198 44768 48381  2902 #> [20977]  3185  3240  3406  3724  4048  4078  4297  5045  5081  5333  6499  6616 #> [20989]  6735  6769  6920  7608  9257  9895 10292 11979 12327 12385 12517 12794 #> [21001] 13056 14217 14369 14742 16814 16941 18363 18788 19852 20048 21606 21791 #> [21013] 21855 23792 24650 26426 27511 27789 29201 30246 32043 32134 32273 32690 #> [21025] 33167 33583 35126 35289 35547 37370 38923 39276 39580 40521 40705 41323 #> [21037] 41841 42383 44074 46737 47050 47537 47968 48267 48382 48674  3562  3594 #> [21049]  4016  4079  4645  4796  6090  6226  6543  6973  7086  7572  7874  8855 #> [21061]  9712  9759  9941 10235 10426 10822 10949 11262 11412 12082 12186 12286 #> [21073] 12672 13303 13574 14417 14536 15431 15547 15654 16277 16637 17931 17990 #> [21085] 18248 18660 19217 20495 20617 21469 21792 22123 23933 24351 24786 25090 #> [21097] 25252 25486 27790 28647 28737 29373 29822 30666 31627 34642 37183 37277 #> [21109] 37965 39099 39277 41068 41245 41411 45459 45544 47148 48575 48766 48866 #> [21121] 49064  3013  3407  3533  3806  4109  4138  4298  4383  4928  5007  5163 #> [21133]  5258  6333  6544  6841  6921  7010  7267  7533  8063  8133  8214  8597 #> [21145]  8889  9760  9896 10190 10783 10994 11038 11307 12083 13264 13888 13983 #> [21157] 15320 15380 16466 16530 16815 16942 17150 17217 17932 18661 18722 19299 #> [21169] 19355 19727 21270 21727 23572 24013 24651 25983 26127 26501 26735 28017 #> [21181] 28251 28339 28973 30100 30332 30417 33331 33495 34248 34988 37802 38747 #> [21193] 40347 40706 40789 42482 43366 43921 44075 45881 46738 47651 48268 48383 #> [21205]  3316  3426  3506  4049  4384  4476  4985  5008  6404  6578  6663  6842 #> [21217]  7148  7837  7989  9048  9169  9848 10132 10524 10899 11208 14218 14851 #> [21229] 15601 15866 16038 16334 16580 17622 17687 17933 18982 19218 19669 20190 #> [21241] 21194 21271 22124 23045 23305 23793 23860 24718 25487 25673 25750 27943 #> [21253] 28738 28898 29528 29602 30247 30989 31305 34317 34727 37184 37278 38141 #> [21265] 39278 42765 43651 44769 45040 45362 46563 47428 48384 49065 49169  2986 #> [21277]  3129  3287  3339  3387  3507  4929  5221  5433  5810  6052  6123  6258 #> [21289]  6295  6435  7225  7401  7725  7875  8704  9170  9622 10474 10699 11364 #> [21301] 12287 13057 13114 13214 13304 14852 15230 16816 17327 18051 18249 18364 #> [21313] 18662 20117 20312 20736 21607 22125 22328 22393 22470 23507 23639 23709 #> [21325] 24014 24352 25488 26502 26944 27292 27650 29447 29603 29671 30186 30667 #> [21337] 30815 31401 31547 31628 31980 32834 34893 37458 38572 39100 41842 42296 #> [21349] 43838 43996 45800 45882 46362 46466 46739 46842 47652 48269  3014  3042 #> [21361]  3317  3508  4080  4276  4477  5295  5404  5608  6053  6736  6770  7573 #> [21373]  7647  7990  8215  8473  8779  8814  8931  8973  9258  9298 10088 10995 #> [21385] 11454 11637 12748 14149 14418 15602 16102 16399 17086 17688 18052 19480 #> [21397] 19536 19606 20191 21074 21195 21350 24015 24208 24429 24501 24787 24946 #> [21409] 28648 30418 30510 30595 30816 32209 32835 34894 34989 35127 35290 35881 #> [21421] 39372 42014 42847 42932 43281 44667 45041 45714 47757 48385 49785  3265 #> [21433]  3365  3617  4585  4702  5519  7308  7402  8027  8096  8347  8423  8815 #> [21445]  9127  9259  9299  9623  9800 10475 10620 10857 11980 15185 15381 15655 #> [21457] 16155 16943 17872 18250 18789 18983 19104 19219 19917 20377 21075 22201 #> [21469] 22329 22394 22743 23640 24270 25180 25823 27512 28340 29049 29291 30333 #> [21481] 31402 32044 33332 34406 34643 34728 35793 36058 38573 39581 39747 40615 #> [21493] 43839 45460 46164 48074 49587  3618  3854  4168  4330  4614  4646  4930 #> [21505]  5164  5578  5978  6160  6801  7226  7609  7648  8266  8598  8744  9260 #> [21517]  9624 10191 10236 10385 10427 10572 11209 11733 12187 12229 13058 13265 #> [21529] 15065 15129 15321 15807 16103 17035 18312 18790 19166 19853 21196 24719 #> [21541] 25181 26070 26573 27212 27513 28252 28974 29448 30511 30817 31224 34318 #> [21553] 35058 35291 36834 37622 38310 38480 39101 39279 39373 39835 40025 42297 #> [21565] 43282 43558 43997 44461 45153 46467 47758 48960 49276 49488  3855  3904 #> [21577]  4360  4615  4678  4728  4821  4931  5082  5138  5334  6161  6467  6843 #> [21589]  6974  7011  7227  7403  7649  7797  8382  8424  8514  8599  8705  8856 #> [21601]  9261  9675  9801  9849 10237 10341 10950 11117 11263 13521 14743 14898 #> [21613] 15015 15603 15808 16156 16335 19728 19784 20232 20313 21913 21986 23508 #> [21625] 23641 24142 24271 24353 24947 25411 27090 28018 28187 28407 28488 28580 #> [21637] 28824 29202 29449 30044 30334 31548 32045 32135 34069 34157 34249 34407 #> [21649] 34567 35378 36059 36587 36754 37459 37709 38574 40188 42298 42483 43457 #> [21661] 44270 44668 44770 46740 46945 47149 47331  3388  3408  4385  4550  4616 #> [21673]  6664  6876  7228  7268  7991  8932  9300 10293 10476 10700 10996 11793 #> [21685] 12386 12853 13266 13355 13522 14093 14268 14584 14744 15382 16039 16944 #> [21697] 17151 18425 18606 19607 21608 22126 23372 23573 23642 23710 24577 27514 #> [21709] 28899 32136 32596 32836 33895 34408 34729 36675 37623 37803 37966 38398 #> [21721] 38662 38839 38924 39374 39582 40189 44462 44567 47653 47875 47969 49170 #> [21733]  3673  4017  4361  4445  4478  4647  5367  5778  6194  6296  7229  7309 #> [21745]  7610  8097  8675  8857  8933  9085 10342 11118 11587 11927 12673 13162 #> [21757] 13984 14686 15016 15753 15809 16278 16467 16581 16817 17087 17746 18118 #> [21769] 19167 19300 19670 20049 20667 21470 22471 22820 22887 23244 23373 24080 #> [21781] 24652 24864 25412 25902 25984 26574 27151 27719 27867 28188 28581 29374 #> [21793] 30736 32046 32597 32915 33081 33333 33896 36755 38925 40190 40790 40887 #> [21805] 41607 42111 43283 43367 43743 44377 44568 44859 45545 46165 46258 48386 #> [21817] 49066 49171  3648  3960  4551  4679  5165  5434  5459  5579  5645  5676 #> [21829]  5849  6802  6877  8216  8306  8890  9128  9897 10477 10784 12854 12995 #> [21841] 13463 14745 15231 15432 15754 17809 17991 18723 19785 21009 21351 21609 #> [21853] 21987 22054 25554 25824 27366 28649 29050 30187 30668 33082 33897 34250 #> [21865] 34490 35548 36756 36835 37185 37624 38399 38663 39102 39375 41608 42484 #> [21877] 44569 46259 47332 49489  3453  3784  3833  3881  4081  4217  4386  4648 #> [21889]  4822  6054  6545  6617  7149  7726  7992  8745  8780 11455 11734 11928 #> [21901] 12674 12907 13215 14687 15066 17810 18177 18487 18791 18850 20314 20553 #> [21913] 20618 21471 21534 22202 22537 23306 24354 24788 25253 25825 27868 28489 #> [21925] 29969 30669 30818 32509 33334 33741 34568 35716 37710 38058 40260 40348 #> [21937] 41069 42198 42384 42583 42766 43368 43458 44570 45042 45973 46166 46843 #> [21949] 46946 48576  3318  3480  3509  3929  4139  4514  4759  5046  5222  5259 #> [21961]  5405  5811  5913  6737  6878  7353  7404  8169  8217  8425  9011  9049 #> [21973]  9301  9802 10033 10238 11119 11264 11588 11840 12675 12749 13740 13985 #> [21985] 14150 14370 15383 16336 18251 18365 18915 20496 20668 21535 21728 21914 #> [21997] 23574 25182 25614 26207 26503 26736 27367 27720 28975 29375 29970 30188 #> [22009] 30248 30596 31721 32274 32335 33168 33662 34409 34644 36060 38748 39467 #> [22021] 41766 43199 43284 43922 44463 45546 46564 48270 48767 49490 49683  3649 #> [22033]  4247  4387  4420  5260  5711  6091  6124  6844  7269  7310  7534  8307 #> [22045]  9129  9761  9942 10034 10386 10428 10573 10900 11210 11265 11308 12188 #> [22057] 12908 13889 13986 14371 14419 14537 15975 16337 17462 18313 18607 18792 #> [22069] 19168 19537 20118 20378 20497 20803 21135 21915 21988 22127 23861 25183 #> [22081] 25674 27293 27368 28490 28582 29891 31148 31549 32210 34070 34158 34895 #> [22093] 37804 38311 38575 39671 39748 40436 40980 41324 43012 46260 48768 48961 #> [22105]  3427  4082  4110  4421  4845  5009  5261  5460  5492  5979  6125  6579 #> [22117]  6879  7611  7916  7993  8218  8267  8891  9262 11735 12084 12676 12795 #> [22129] 12909 13944 13987 14269 14372 16638 17328 18488 19729 19854 19983 21197 #> [22141] 21610 23166 24502 26071 26737 26945 28100 29746 29892 32425 33243 33663 #> [22153] 35379 35549 36486 36676 38312 39672 40888 43840 44378 44571 44946 45974 #> [22165] 46167 48769 49172  3366  3510  3650  4362  4846  4962  5010  5197  5335 #> [22177]  5882  7496  7574  8219  8892  9355  9898  9943 10192 10343 10429 11211 #> [22189] 11456 11501 11929 12085 12677 12910 13988 14484 15130 15485 16217 16700 #> [22201] 18724 19220 19608 19855 21272 22821 24865 25091 25826 25985 26281 26504 #> [22213] 27213 27369 28900 28976 29450 30249 30512 31890 33818 34159 34896 35473 #> [22225] 36138 36487 37186 38926 39836 40026 40116 40791 40889 42767 43013 44076 #> [22237] 44572 48867 49399 49786  3619  3750  3856  4050  4363  4388  4446  4898 #> [22249]  4932  5047  5166  5368  5580  6015  6297  6546  7122  7150  7311  8220 #> [22261]  8308  8426  9402  9899 10858 11736 11930 11981 12387 12422 12518 12574 #> [22273] 13636 15067 16218 16279 17934 18366 18608 18725 19049 19410 19609 19671 #> [22285] 19786 19918 21413 23643 23862 24355 25413 25986 27294 27515 27721 28408 #> [22297] 29124 31629 32211 32336 33742 34410 35550 36395 36677 37010 37187 38227 #> [22309] 38927 39194 40707 42015 43014 44077 45547 45975 49067 49173 49684  3454 #> [22321]  3697  3882  3930  5167  5223  5493  5609  5980  6055  6259  6618  7184 #> [22333]  7575  8383  9050  9171  9453  9545 10089 10239 11309 12465 12619 12911 #> [22345] 14808 15548 15976 16104 16818 17329 17406 18178 18314 18851 19105 19411 #> [22357] 22055 22472 23374 24503 25987 27152 27944 28341 29451 29823 30250 31149 #> [22369] 31306 31550 32916 33169 33410 33496 34645 34897 36219 36678 36922 37371 #> [22381] 37460 38400 40027 40437 40616 40981 41519 41681 43652 44771 46643 48271 #> [22393] 48770 49685  3931  4515  4847  5168  5336  5461  5520  6162  6771  7576 #> [22405]  7612  8028  8170  8268  8348  8427  9762 10294 10525 11888 12288 12855 #> [22417] 13523 13846 14151 14219 14538 15068 15433 15867 16040 16945 17935 18852 #> [22429] 19106 19301 20554 20804 21010 21136 21856 24272 26946 29051 29292 29893 #> [22441] 30251 30910 31722 32510 33003 33981 36220 37461 39376 39583 40028 40708 #> [22453] 41325 42768 42933 43998 44464 44772 44860 44947 45883 46468 47238 47429 #> [22465] 49686  3428  3534  3563  4018  4277  4586  4617  4649  4760  5369  5462 #> [22477]  5943  5981  6334  6580  7052  7087  7497  7535  7613  7727  8064  8384 #> [22489]  9588 10035 10295 10430 11365 11638 11931 12134 13685 14420 15486 15656 #> [22501] 15755 16157 17036 17407 17463 17936 18367 18489 18534 19050 20555 21198 #> [22513] 21857 22888 24143 25092 25827 26072 26128 26881 27153 28901 29203 29376 #> [22525] 30045 31551 31816 32756 32917 33083 33170 34319 34805 37883 38749 39007 #> [22537] 39195 39468 41246 41682 42199 43841 43999 44178 44271 45801 45884 48075 #> [22549] 49687  3564  4299  4389  4761  5048  5083  5406  5581  5914  5944  6619 #> [22561]  6665  6738  6880  7452  8171  8309  8746  9803 11162 11413 11589 11982 #> [22573] 12086 13115 13305 13401 13575 14319 14585 14633 14746 14899 15434 15810 #> [22585] 15868 16105 16158 16946 16992 17152 19169 19221 20315 21199 21352 21916 #> [22597] 21989 22056 22889 23103 24356 26505 26882 27017 27214 27651 33004 34806 #> [22609] 35794 36308 36679 36923 37884 38313 38664 38750 39469 40029 40890 40982 #> [22621] 42385 43285 43559 45629 46261 46844 48272 49068  3481  3565  3751  4169 #> [22633]  4422  4899  5113  5812  5915  6227  6803  6845  7270  7798  7838  7876 #> [22645]  8029  8385  8600  8706  8747  9086 10193 10240 11082 11737 12678 13576 #> [22657] 14094 15322 15657 15703 16041 16159 16280 18984 19222 19730 20940 21990 #> [22669] 22538 23245 23934 24653 25254 25903 26427 28977 30252 31150 31307 31817 #> [22681] 32212 33005 33335 34320 34411 39008 39196 39935 40030 40117 40349 41247 #> [22693] 41520 42200 42386 42485 43560 43744 43842 44179 45715 46469 46565 46644 #> [22705] 47150 47876 48675  3674  3752  3785  4019  4729  5084  5114  5296  6739 #> [22717]  7012  7312  7728  7761  8098  8310  8676  8934  9900 10090 10621 10997 #> [22729] 11794 11841 11983 12519 12796 13402 16160 16582 17260 17570 17747 17873 #> [22741] 19302 19984 20119 20860 20941 21011 21611 22609 23307 23711 24430 24578 #> [22753] 26348 27945 28491 28739 30513 31473 31630 32426 33819 34569 36924 38059 #> [22765] 38314 39470 39673 40191 40617 42486 44000 44573 44669 45363 47538 47654 #> [22777] 47877 47970 48577 49277 49688  4423  4650  5085  5169  6335  6620  6922 #> [22789]  7498  7799  8134  8515  8707  9087 10133 10241 11310 11502 11683 11842 #> [22801] 11889 12620 12912 13163 13464 13524 14320 14853 15069 16219 17037 17261 #> [22813] 17517 17874 18609 18663 18726 19051 19170 19303 19985 20120 21012 23246 #> [22825] 23375 23509 23794 24431 25555 25675 26073 26129 26208 26575 26657 27215 #> [22837] 27946 28492 28740 29604 30419 30990 31891 34160 35128 35795 35963 38751 #> [22849] 41412 42487 45154 45802 46262 47051 47333  3698  3961  4447  4516  4552 #> [22861]  4651  4730  5086  5170  5198  5779  5916  6500  6881  7577  7614  7877 #> [22873]  9088  9356  9546  9850 10823 11457 11503 11795 11932 11984 12621 12679 #> [22885] 12797 12913 12996 13306 13465 13890 13989 14321 14421 14747 14900 15435 #> [22897] 15928 16583 18053 18985 19610 19856 20050 20498 21917 21991 22682 24654 #> [22909] 24948 25018 25556 25676 25988 26282 26658 27295 29529 29605 30101 30911 #> [22921] 32918 34412 35474 35551 37011 37530 38481 38665 40031 41159 41413 41933 #> [22933] 42201 42584 44574 45043 47151 48387  3535  3620  3786  4331  4986  5049 #> [22945]  5115  5337  5582  6436  6740  6772  7088  7230  7271  7950  9302  9547 #> [22957] 11543 11738 12423 12466 12575 13356 13466 13990 14095 14422 15487 15756 #> [22969] 16872 18252 18727 18916 19787 20121 20192 21200 21793 22128 23644 24866 #> [22981] 26506 29125 32427 32837 32919 34570 36309 36588 36925 38060 38752 40118 #> [22993] 40522 40792 41160 45461 46645 46741 47239 47430 47971  3986  4051  4192 #> [23005]  4390  5494  6228  6501  6882  7185  7578  8601  8893  9303  9403  9625 #> [23017] 10431 10998 11083 11311 11796 12230 12576 12997 14322 14423 14485 14748 #> [23029] 15131 15757 16993 18535 18986 20439 20556 20737 20861 22129 23645 24081 #> [23041] 24720 24867 25489 25677 25989 26349 27018 27091 27869 28583 29824 30102 #> [23053] 31723 32337 33584 33982 34321 34491 35552 35633 37711 40438 44001 45254 #> [23065] 45885 46566 46845 48578 48771 49174  3621  3651  3725  4762  4933  4963 #> [23077]  5050  5407  5850  6163  6298  6468  6883  6923  7405  8781  9304  9676 #> [23089] 10194 12135 12856 12952 12998 13267 13403 13991 14901 15869 16042 16338 #> [23101] 16400 17218 17262 18253 20316 21536 22539 22744 24016 24273 25093 25414 #> [23113] 25678 26883 27791 28101 28902 30912 31225 31403 32338 32757 33411 33983 #> [23125] 35475 36061 37012 37531 38576 41070 42677 42848 43369 43745 44465 44670 #> [23137] 45630 45976 46646 46947 47431 47539 47655 47972 48177 49278 49787  3622 #> [23149]  4652  4680  4823  5463  6336  6694  6846  6884  7089  7151  7272  7354 #> [23161]  7453  9589  9804 10344 10478 10738 11039 12577 13467 13525 13847 13945 #> [23173] 14220 14586 14749 14809 15604 16220 16281 16701 17748 17992 19919 20051 #> [23185] 20440 20738 21076 21662 21918 22540 24144 25490 27722 29530 30597 31226 #> [23197] 32428 34413 34990 36062 36221 40439 40793 41071 41248 41521 43286 43561 #> [23209] 44466 44948 45803 45886 46742 46846 47656 48772  3787  3834  3883  4248 #> [23221]  4876  4900  5408  5521  5851  6405  6773  7650  7687  9012 10785 10824 #> [23233] 12136 12520 12622 12798 13116 13577 13637 13848 14040 15277 15323 16161 #> [23245] 16221 16819 17749 17811 17875 18054 19107 19611 20233 20669 20739 21537 #> [23257] 21858 22330 24209 24579 24655 24868 25990 26507 27792 28253 29377 29531 #> [23269] 29971 30103 30335 30737 31227 31818 32598 32920 33084 34730 34807 36222 #> [23281] 37372 37967 38142 40983 41072 41161 41249 41843 42112 43653 43843 44078 #> [23293] 44180 44575 44773 45631 46263 47759 49689  3675  3962  5011  5370  5610 #> [23305]  5813  6056  6299  6695  7313  7499  7579  7878  9051  9263  9626  9992 #> [23317] 10091 11366 11684 11985 12289 13307 13526 13578 15132 15278 15488 15605 #> [23329] 15870 16339 16702 16994 17038 17408 17571 19223 19356 19412 21612 22057 #> [23341] 22473 23863 24145 25019 27154 28102 29452 30336 31228 31724 31892 32599 #> [23353] 35380 35553 36063 36396 42585 43015 43200 43459 44181 44272 44467 46064 #> [23365] 47052  3905  4553  4934  5371  5464  5746  5814  5883  6016  6260  6337 #> [23377]  6581  7152  8269  8516  9264  9305  9713 10479 10739 11590 11890 12231 #> [23389] 12521 13117 13468 15384 15549 16873 17088 17409 17464 17689 18254 18426 #> [23401] 18536 18853 19108 19481 19857 20441 21414 21794 22203 22890 23247 23646 #> [23413] 25679 25751 25904 25991 26576 27155 27370 28189 28409 29894 31229 31819 #> [23425] 32429 32600 34071 34161 36397 36836 37013 37279 37625 37712 37805 39280 #> [23437] 44079 46948 47432 48388 48773 49690  3788  4083  4140  4249  4278  5372 #> [23449]  5522  6092  6300  6582  7406  8065  8221  8748  8935  9404  9494  9590 #> [23461]  9993 10701 11212 11312 11458 11639 12232 12424 12467 12522 13268 13638 #> [23473] 13946 14041 14152 14634 14902 15232 15436 15704 15871 16222 16468 16874 #> [23485] 17518 18917 19224 19482 19858 20805 20942 21663 22130 22969 24432 26130 #> [23497] 26209 27439 27947 28103 28493 28584 29204 30514 30670 31631 32137 35207 #> [23509] 37188 37532 37626 38143 38482 38753 38840 39471 39749 39837 40192 41073 #> [23521] 42488 43562 43746 44002 44273 45255 45462 46264 46567 47053 47760 47878 #> [23533] 48868  3807  3932  4193  4448  4517  5012  5116  5780  5945  6126  7580 #> [23545]  7688  7951  8222  8602 10242 11213 11367 11414 11986 13059 13164 13269 #> [23557] 14323 15385 15758 16282 17039 17153 17410 18537 18987 19225 19304 20317 #> [23569] 20943 22474 22541 23104 23712 24146 24656 24721 24949 25184 25255 25491 #> [23581] 26350 26577 26659 26821 26947 27216 27440 28019 29293 29453 30104 30189 #> [23593] 31552 32838 34646 36223 36757 38315 39281 40891 41074 41767 41844 42489 #> [23605] 43016 45256 45887 46065 46568 47433 47540 48273 48579 49279 49491 49788 #> [23617]  4084  4170  4218  4364  4518  4587  5224  5373  5747  5781  7013  7500 #> [23629]  7994  8270  8749  8894  9591 10345 10622 12024 12468 12857 14270 14373 #> [23641] 14587 14635 14750 15489 15811 16162 16757 17876 19731 20234 22058 22542 #> [23653] 22822 23167 23575 23864 24082 25185 25752 26131 26283 26738 27217 28650 #> [23665] 28741 28978 29606 29972 30598 32213 34808 37373 38061 38666 40261 40440 #> [23677] 41414 41522 41934 42113 42586 42849 43100 43370 44576 45804 46265 46743 #> [23689] 47152 47657 47879 48274 49492  4020  4219  4391  4554  4935  5051  5117 #> [23701]  5171  5852  6469  7014  7651  7917  8556  9677  9944 10432 10574 11591 #> [23713] 12858 12999 15324 16283 16340 16584 16947 20122 20379 21273 22331 22610 #> [23725] 22823 23865 24210 24869 25020 27296 27587 27793 28342 28903 29532 31308 #> [23737] 31553 33497 34991 35129 36926 37280 37374 39750 40119 40709 40794 42934 #> [23749] 43844 44861 45155 45888 48178 48275  3884  4797  5087  5815  6093  6261 #> [23761]  6502  6924  7015  7314  8474  8750  8895  9222  9405  9805  9945  9994 #> [23773] 10740 12137 12680 13579 13741 14042 14221 14424 14961 15279 18368 19305 #> [23785] 19612 19732 20235 20380 20557 20619 21859 22395 23376 23576 25557 26578 #> [23797] 27588 27948 29205 30253 33171 34162 34251 34414 34571 34647 35554 35634 #> [23809] 37014 37968 39282 40350 40523 41162 41326 43747 44080 47541  3857  3885 #> [23821]  3906  3987  4052  4171  4220  4519  4653  4731  5297  5677  6666  7454 #> [23833]  7729  8517  8603  9013  9172  9357 10825 10859 11163 11214 12290 12799 #> [23845] 12914 13216 13404 13639 13686 13992 14043 14636 15070 15186 15325 16223 #> [23857] 16703 16758 17154 18119 19226 22269 22475 24211 24722 25415 26579 27516 #> [23869] 29052 29607 29973 30046 31072 31725 33172 33743 34252 34809 35208 35292 #> [23881] 36139 36398 37627 37969 40984 42490 43654 43748 45044 46066 48476  4021 #> [23893]  4479  4732  4848  5088  5465  5982  6017  6127  6741  6804  6975  7186 #> [23905]  7273  7501  7879  7995  8172  8271  8677  9406  9454  9627 10387 10480 #> [23917] 10901 10951 10999 11415 12138 13849 14271 15550 16585 16704 17155 17750 #> [23929] 17937 17993 18918 20318 20381 21137 22543 24212 25186 26284 29533 29895 #> [23941] 30254 31893 32921 33744 34072 34572 35964 36064 36140 36224 36399 36680 #> [23953] 38577 39103 39674 40985 42299 42769 43749 44182 45805 46266 48389 48580 #> [23965]  4392  4936  5225  5338  5917  5946  5983  6195  6301  6470  6696  6885 #> [23977]  7053  7187  7315  7502  7652  8272  8557  9265 10092 10134 10346 10481 #> [23989] 10526 10741 11313 12087 12233 12859 13640 14688 14751 16043 16469 16639 #> [24001] 17465 18919 19052 20499 21201 21274 21919 22059 23308 23577 24017 26508 #> [24013] 27441 28020 28410 29294 30420 31404 32047 32511 32691 32758 34253 34810 #> [24025] 35293 36065 36225 36927 37462 37885 37970 39104 41327 41523 42016 43101 #> [24037] 43923 46647 48390 48962 49400  4555  5226  6262  6406  7054  8974  9266 #> [24049]  9306  9455  9851 10135 10347 10527 10623 10786 11215 11266 11640 12425 #> [24061] 12915 13641 13687 14044 14486 14637 14810 15017 15071 16470 17690 17877 #> [24073] 18315 19483 21353 23510 23713 24147 24274 24433 26074 26428 26509 27092 #> [24085] 27371 27949 28742 29206 29534 30515 31405 31726 32214 32759 33412 33498 #> [24097] 34492 34573 38062 39105 40262 40441 42202 43371 44274 45632 45889 45977 #> [24109] 46168 47054 49493  4480  4901  5139  5227  5611  6407  6805  6886  8349 #> [24121]  8518  8678  9358  9495 10433 10624 12681 12800 12860 13308 13789 14425 #> [24133] 14752 15490 15606 16705 17878 18427 18664 19306 19413 19859 19986 22060 #> [24145] 23168 23444 25094 26580 27156 28190 29747 32048 32275 33006 34648 35294 #> [24157] 36310 36400 36589 36681 37628 38144 39283 39472 40524 41250 42017 45364 #> [24169] 45463 46067 47761 47880 48276 48676 48963  4279  4481  4902  5199  5678 #> [24181]  6925  7503  8273  8428  8644  9173  9359  9901 10243 10348 11040 11504 #> [24193] 11843 11987 12025 12139 12953 13000 14096 14487 15437 15812 16820 17623 #> [24205] 18428 18728 20123 22683 22891 23105 24723 26210 26351 26581 26660 26948 #> [24217] 30599 31151 33664 34649 34731 34811 35130 35295 35381 36226 36928 37189 #> [24229] 39584 39838 40986 41683 41768 42300 42678 42850 43460 45978 47055 47762 #> [24241] 48677 49069 49789  4221  4250  4300  4618  4824  4849  4987  5495  5748 #> [24253]  6094  6302  6774  6806  7090  7952  8066  8173  8519  9763  9806 10093 #> [24265] 11084 11120 11164 11544 13405 13469 13527 13688 13891 14045 14689 14962 #> [24277] 15133 15491 15607 16106 16284 17219 17994 18179 18729 19788 20052 20740 #> [24289] 20806 21138 21354 21472 21795 22061 23935 24950 25095 25828 26132 26211 #> [24301] 26429 26739 28585 29378 29454 29748 29896 29974 30255 32692 33007 33665 #> [24313] 34493 34992 39197 39473 40618 41415 44379 44468 45548 49790  4520  5172 #> [24325]  5262  5523  5583  5679  6128  6547  6847  6926  7091  7355  9456  9946 #> [24337] 10094 10625 11891 11933 12578 12750 13165 13406 13642 13790 13892 15072 #> [24349] 15134 15759 15872 18665 18920 20124 20442 20807 20944 21920 22131 22204 #> [24361] 22970 23578 24580 24870 25334 26352 27950 28104 30913 32512 35635 35965 #> [24373] 37015 38401 38483 38667 38928 39106 39675 40120 40263 40525 40795 40987 #> [24385] 41609 43655 44275 45365 45979 46068 46470 46648 46744 47153 47434 48277 #> [24397] 48581 49691  4172  5263  5374  5853  6057  6697  6807  7188  8708  8816 #> [24409]  8936  9014 10244 10482 10702 11459 11592 12026 13118 14588 14690 15187 #> [24421] 15233 15438 15658 16341 16586 16640 16706 17156 17691 17879 17938 18793 #> [24433] 19357 19987 21202 21729 21921 22132 23714 24434 25021 26212 27157 27794 #> [24445] 28343 29672 30421 30671 31554 33173 33336 35636 36590 36682 37100 37971 #> [24457] 40796 41251 41684 41935 44276 44469 45366 47763 48179  4521  4619  4850 #> [24469]  5466  6338  6583  6667  7653  8558  8679  8937  8975  9947 10036 10095 #> [24481] 10136 10296 10483 10902 12523 12682 13166 15018 15439 15492 16875 17220 #> [24493] 18538 18854 19053 19307 20319 20382 21664 22133 22745 23377 23936 24275 #> [24505] 25187 25905 26582 26661 28825 29295 30738 31152 32049 36141 36488 37190 #> [24517] 37375 37886 37972 38228 38484 38754 38929 39585 40032 41685 42203 42301 #> [24529] 44380 44470 47973 49692  4332  4654  4681  4903  5052  5467  5680  5984 #> [24541]  6229  6303  6437  6927  7536  8030  8274  8520  8645  9807 10245 10952 #> [24553] 11593 12328 13947 14691 15073 15608 15873 16707 16821 17330 17466 18610 #> [24565] 19171 19613 20670 21013 22396 22476 23169 24148 25992 27158 27218 28826 #> [24577] 30600 30914 34993 35059 35296 35555 35966 36683 38485 38841 39676 40710 #> [24589] 43924 44081 44381 45156 46169  4194  4682  5013  5435  6095  6503  6848 #> [24601]  7953  8680  9015 10037 10246 10297 10388 10860 11739 11892 12683 12954 #> [24613] 13850 14811 15760 16342 17157 17572 17939 18316 18730 18794 20125 21355 #> [24625] 21613 23715 23937 25022 26430 26949 27219 27372 28021 28411 30422 34073 #> [24637] 35131 36142 38755 39107 39198 39474 39936 44671 44862 45257 47334 47658 #> [24649] 49070  4482  4763  4851  5014  5089  5496  5749  6058  6196  6263  6371 #> [24661]  6471  6928  7123  7954  8067  8311  8938  9016  9457  9902 10137 11121 #> [24673] 11505 11545 11641 11740 12329 12801 13948 14097 15280 15440 15813 16531 #> [24685] 16876 17221 17411 17624 18369 18666 18921 19538 19733 20741 21665 22746 #> [24697] 23106 24581 25335 26583 27517 27652 28022 28191 30105 31073 31555 32601 #> [24709] 32760 33337 33499 33666 34574 35556 36837 37629 38145 38402 39377 40892 #> [24721] 41252 46069 48180 49175 49401  4280  4333  4365  5436  5646  5985  6230 #> [24733]  6264  6438  6548  6621  7124  7504  7581  7615  7918  8386  8475  9407 #> [24745]  9458  9496 10038 10742 11000 11368 11594 11741 12388 12955 13270 13742 #> [24757] 13893 13993 14374 15441 16163 16759 17519 17692 18255 19227 19484 21203 #> [24769] 21796 21922 26133 26510 26822 29455 29535 30106 33413 34494 34898 35557 #> [24781] 35717 36227 36758 37533 38486 39839 41416 42387 42491 45367 46267 46649 #> [24793] 47154  4483  4556  4733  4798  5854  6129  6197  6231  6265  6698  8312 #> [24805]  8521  8709  8896  9130  9948  9995 10138 10484 10575 10703 10903 11267 #> [24817] 11742 12088 12140 12469 12623 13001 13167 13217 13357 13470 13528 14098 #> [24829] 14426 14903 16708 16948 17331 17625 17940 18317 20862 21473 21860 23716 #> [24841] 25558 25829 26511 26950 27297 28412 28979 30107 30337 30672 31153 31727 #> [24853] 31981 32761 33174 33338 34163 36591 37191 38063 38316 38578 39108 39199 #> [24865] 40121 40797 40988 42851 43925 46363 48582  4703  4734  4799  5264  5524 #> [24877]  5553  5681  5884  6622  6668  6775  7189  7231  7316  7955  9949 10953 #> [24889] 11268 11546 11988 12330 13894 15234 16044 17040 17158 17222 18180 18256 #> [24901] 18922 20193 20320 20945 21275 21538 21666 22062 22477 22747 22824 22892 #> [24913] 23309 25492 26134 26662 27298 29296 31632 31728 32276 33500 34074 34575 #> [24925] 34732 34812 36066 41075 41610 41845 42587 42770 44382 44577 45157 46650 #> [24937] 46949 48869 49071  4393  4937  4988  5525  6232  6504  7505  7537  7616 #> [24949]  7800  8099  8223  8313  8559  8782  9307  9459  9903 11369 11642 11685 #> [24961] 13168 13529 13580 13743 13994 14753 15705 16471 17626 18181 18855 19539 #> [24973] 20863 21539 22270 22544 22893 23310 24083 24504 25096 26285 28023 28980 #> [24985] 29297 30108 30256 30516 31474 32277 32602 32693 33414 33745 37713 37887 #> [24997] 39284 40033 41417 44863 45368 45633 46070 46170 46745 46847 47155 47435 #> [25009] 48774 48964 49072  4683  4735  4764  4852  4904  5015  5053  5339  5782 #> [25021]  7617  7654  7880  8350  8429  9131  9904 10389 10787 11216 11595 11797 #> [25033] 12291 12751 13119 13581 13895 14324 14692 15761 16107 16760 16822 17573 #> [25045] 18370 18856 18923 19228 19308 19485 20808 21356 21992 22545 24724 25336 #> [25057] 25993 27093 27299 27870 28981 29456 30338 32603 32694 32839 34075 34322 #> [25069] 35558 36489 38064 38317 38403 39009 39109 39586 40122 40711 42588 44774 #> [25081] 45634  4522  5090  5468  5712  6304  7274  7356  7538  8224  8710  8817 #> [25093]  9996 10528 10704 13218 13309 13791 14046 14153 14589 14754 15326 15706 #> [25105] 16709 16823 17751 18611 18924 18988 19540 21861 22134 22611 23511 23579 #> [25117] 23866 24213 26213 26740 26951 27653 29536 30423 30739 30819 31729 34899 #> [25129] 35060 35382 36067 36490 37973 38318 38668 39110 39751 40193 40526 40989 #> [25141] 41328 41611 42204 44277 45158 45464 45549 45980 46071 46364 48181 48775 #> [25153] 49402 49588  5340  5437  5885  6408  6699  6849  7232  7762  7919  8604 #> [25165]  8818  8858  9592 10434 11217 11686 11934 12684 12802 13471 13792 14154 #> [25177] 14375 14812 15814 16045 16343 16761 16824 17880 18257 18371 18539 19920 #> [25189] 20946 22205 23170 24018 24084 26663 27723 28254 28586 28743 28904 31154 #> [25201] 31894 32138 32762 37714 40712 43201 43845 44383 44864 45981 47156 49589 #> [25213]  4557  4684  4800  4938  4989  5526  5918  6018  6505  7092  7190  7357 #> [25225]  7455  8351  8646  8897  9460  9714  9852 10349 10788 11218 11370 11460 #> [25237] 12234 13060 13896 14427 17812 17995 18925 19414 21415 22135 24019 25416 #> [25249] 25559 27442 28105 29126 29457 29825 30190 32050 32139 32840 32922 34323 #> [25261] 34900 34994 36228 37463 37534 37974 38404 39111 40264 40619 41253 44278 #> [25273] 44384 44672 44775 46171 47881 48965 49073  5497  5612  5682  6305  7275 #> [25285]  7506  7539  7655  7839  8605  8681  8819  9017  9089  9223  9308  9853 #> [25297] 11165 11269 13120 13358 15281 15874 16108 16949 17089 17263 17520 17627 #> [25309] 18926 19358 19860 20383 20620 21139 22332 22971 23046 23445 23795 24435 #> [25321] 24871 25023 25417 26135 27094 28651 29458 30820 31074 32278 33820 34576 #> [25333] 34650 36229 36401 37464 37715 38146 38405 38487 38842 39587 40034 40265 #> [25345] 40798 41769 44385 45258 46848 47335 48076 48278 49074 49176  4905  5298 #> [25357]  5469  5584  5855  6929  6976  7016  7153  7920  8387  8560  8939  9408 #> [25369]  9628 10139 10247 10350 10435 10576 11844 12235 12524 12579 14272 14325 #> [25381] 14488 15074 15609 15659 16762 16950 16995 17041 18372 19541 20194 20809 #> [25393] 21204 23446 23512 25024 25994 26584 27300 27443 27724 27951 29537 29897 #> [25405] 30915 31475 32430 32695 35209 36311 36491 38930 40713 41329 42018 42589 #> [25417] 43102 44279 45982 46746 46849 47436 49403  5527  5816  6059  6198  6266 #> [25429]  6372  6472  6506  6700  7154  7763  9548  9808  9950 10298 10529 10904 #> [25441] 11085 11122 11547 11743 11845 13407 13851 13897 14854 14904 16224 16710 #> [25453] 16996 17042 17090 17521 18540 19054 19229 19415 19486 19672 19861 20195 #> [25465] 20671 21923 22271 25615 25830 28192 28255 28494 29053 30109 31556 31633 #> [25477] 31982 32841 33085 33898 36068 36838 41846 42852 44673 45550 46072 46172 #> [25489] 46365 46651 47240 48279 48583 49075 49494  4853  5054  5375  5613  5647 #> [25501]  5750  5919  6130  6507  6808  6951  6977  7017  7055  7276  7317  7358 #> [25513]  7407  7618  7801  8100  8430  8561  8606  9593  9678 10299 10705 11086 #> [25525] 11744 11935 13121 13995 15815 15929 16109 16285 16344 16587 17332 17996 #> [25537] 18182 18490 19416 21357 21614 21993 22333 22546 23171 23311 24214 24276 #> [25549] 24789 24872 25560 25616 26214 26664 27301 28495 29538 30047 30424 31309 #> [25561] 32140 32696 34995 35476 36402 36684 38406 38756 39010 40527 44183 44674 #> [25573] 45716 46950 47542 48391 48678 48870 48966 49280 49791  4825  5173  5299 #> [25585]  5554  5817  6096  6409  7093  7359  7408  7456  7956  8388  9309  9854 #> [25597] 11687 12089 12470 12624 13002 13169 13744 14273 14590 15386 15493 16164 #> [25609] 16401 18429 20053 23172 23248 23513 23717 23938 24790 25418 26136 26512 #> [25621] 28344 29379 29608 30339 30916 32604 33339 35210 35383 35477 37975 39112 #> [25633] 39200 39752 44865 45551 46747 48182 48679 48776 49495 49693  4939  5091 #> [25645]  5140  5376  5683  5986  6060  7996  8389  8647  8820  9310  9360  9461 #> [25657]  9629  9997 10195 10300 11219 11936 12685 13643 15327 15875 16763 16825 #> [25669] 16877 17693 17881 18055 18183 18373 18612 19109 20054 20126 20321 21205 #> [25681] 21994 22272 22334 22397 23107 23378 23796 24149 25097 26431 27373 28106 #> [25693] 28905 29298 29380 29609 30673 30991 32279 32339 32431 33340 33899 35637 #> [25705] 36069 36759 37888 43202 43750 44184 45259 45635 46748 48280 49177  5200 #> [25717]  5648  5713  6473  6850  9018  9361 10196 11270 12389 13359 13408 13689 #> [25729] 14693 14755 14963 15442 16286 17264 18927 18989 20127 20384 20864 21862 #> [25741] 22136 22684 23647 25419 26585 26665 27795 28906 30674 30992 32215 34164 #> [25753] 34415 37535 38229 38931 39475 41770 42019 42771 43656 46073 47157  4854 #> [25765]  5409  5783  6131  6439  6851  7094  7540  7689  7764  8101  8390  9052 #> [25777]  9715 10390 10905 11461 12580 12625 12752 12916 13793 13898 13996 14155 #> [25789] 14489 14539 15235 15443 16225 17574 17813 18491 19487 20055 20128 22685 #> [25801] 23312 23447 23648 23718 24505 24873 25337 26286 26513 27444 27654 30048 #> [25813] 30110 30517 30993 32842 33415 34733 36760 37016 37281 39285 39588 39677 #> [25825] 41418 42020 42388 43751 43926 45552 45636 46951 49590  4855  5585  5784 #> [25837]  6199  6549  6887  7155  7957  9053  9132  9905 10661 11087 11123 11416 #> [25849] 11596 12525 12803 13003 13310 14156 14376 14428 14591 14694 15236 16402 #> [25861] 16641 16826 17628 17694 17997 18990 19110 19789 20322 20500 20865 21077 #> [25873] 21416 23514 23797 24357 25338 25493 26586 27655 28256 29673 29826 30917 #> [25885] 31075 31155 31895 32605 34813 36403 37017 37465 37889 39678 40035 40442 #> [25897] 40990 44949 45159 47974 48077 48183 48777 49076 49404  4877  4906  5055 #> [25909]  5341  5586  5920  6200  6701  7619  8648  8783  8898  9362  9764  9951 #> [25921] 10197 10248 11271 11371 11417 11462 12390 13219 14429 14490 15075 15816 #> [25933] 16046 16226 17998 18184 19417 19488 19790 20236 21358 22612 22894 23249 #> [25945] 23649 24215 24358 24874 24951 25256 25680 25753 26075 26884 28257 28496 #> [25957] 28652 28982 29207 29610 30740 31896 31983 32051 32432 32606 32697 33175 #> [25969] 33341 34076 35211 35559 36839 37192 39753 43203 43461 43563 45369 45553 #> [25981] 46074 46471 47158 48477 49496  5921  6019  7191  7360  8682  8784  9462 #> [25993]  9906 10140 10485 10789 11745 12804 13311 14813 15076 15328 15817 17575 #> [26005] 17999 18056 19489 19791 20810 21540 21924 22547 22895 23798 24506 25257 #> [26017] 25561 25906 26666 27445 29975 30111 30191 30425 30741 31820 32843 33342 #> [26029] 34651 35061 36492 36592 36840 37630 38230 39754 39840 40528 42021 43017 #> [26041] 44386 45160 46075 46173 48281 49281  4964  5947  6373  7056  7156  7620 #> [26053]  7802  9090  9224  9409  9716 11418 11798 11937 12189 12686 12861 12956 #> [26065] 13122 13220 17576 18258 18857 20237 20323 20558 21797 22206 23173 24020 #> [26077] 24085 24216 25098 26076 26287 27725 27871 28653 28983 29054 29381 29459 #> [26089] 30192 30518 31156 32052 32141 32844 33176 33746 33900 35967 36070 37466 #> [26101] 37716 38147 38231 38843 39476 39755 40123 40194 40620 40714 41524 42492 #> [26113] 43564 44003 44082 46076 47659 49178  4940  5342  5856  6702  7507  7803 #> [26125]  8031  8751  8821  9133  9463 10530 10662 12141 12957 13582 13745 13949 #> [26137] 14222 14592 15387 16345 16588 16764 16878 17091 17265 18259 18374 19418 #> [26149] 20385 21925 22686 23448 23650 23939 24021 24217 25562 25995 27952 28107 #> [26161] 28193 28497 29127 29299 29460 30193 31897 32053 32280 32698 32845 33747 #> [26173] 34577 34734 35062 35718 39378 39841 40351 40991 41847 42205 43287 44004 #> [26185] 45890 46569 47882 49179 49694  4941  5886  6233  6306  6550  7018  7541 #> [26197]  8032  8135  8275  8431  9549  9630  9952 10861 11506 11799 12917 13472 #> [26209] 13794 14047 14157 16346 17412 17522 19419 19673 21359 21926 22548 22613 #> [26221] 22687 23799 24022 24086 25831 26353 26587 27019 27446 28258 29827 30426 #> [26233] 30675 31310 32607 33416 34077 34254 34996 36143 36685 37018 37976 38148 #> [26245] 38844 39286 39937 43565 44280 44675 44950 46850 47437 48078 48967 49077 #> [26257]  4878  4942  5016  5056  5528  5684  6809  7656  7881  8068  8711  9907 #> [26269] 10531 11314 11643 11989 12236 12805 13061 13221 13473 13746 13852 13899 #> [26281] 14377 14905 15494 15551 15876 16110 16879 17092 17159 17266 17523 18731 #> [26293] 19614 20621 20672 20742 20811 21140 21360 21417 22335 22549 23580 25339 #> [26305] 25832 25996 26077 26588 28108 29461 29976 30112 30676 31476 31557 32142 #> [26317] 32281 32433 33417 33984 34078 35384 35968 36493 37101 37890 39477 39756 #> [26329] 40529 44281 44776  5017  5470  7277  8752  9631 10198 10486 10532 10626 #> [26341] 11507 12190 12391 12687 12753 12806 12918 13997 14048 14756 15019 15329 #> [26353] 15707 17093 17814 19111 20056 20238 21418 22896 24087 24657 24952 28744 #> [26365] 28984 29300 29382 31076 32763 33244 33748 36230 36929 37193 38319 38932 #> [26377] 39011 39113 39938 40352 41076 41936 42389 42590 43462 45554 48478 49180 #> [26389] 49282  5228  5555  5685  5818  5922  6201  6551  6776  6888  7095  7582 #> [26401]  7765  7882  9410  9765 10249 12862 13360 13530 14049 14855 14906 15495 #> [26413] 17333 17467 18667 18795 18858 19172 19674 20559 20743 21361 21798 21995 #> [26425] 22273 22336 22825 22897 23867 26741 29383 29611 29828 30519 30601 34997 #> [26437] 35560 35882 37194 40621 40992 41163 41686 41848 42302 42591 43018 43204 #> [26449] 44866 45370 45806 46749 46851 49405  5410  5649  5948  6020  6061  6410 #> [26461]  6508  6742  6777  6810  7278  7657  8976  9091  9679  9809  9953 10039 #> [26473] 10250 10391 11938 12688 12863 12919 14326 14378 15282 15708 15877 16227 #> [26485] 16589 16765 17094 17267 17577 18492 18796 20622 21206 23940 24277 25099 #> [26497] 25997 26589 27220 27796 27872 28413 29977 30520 31634 31730 33418 34255 #> [26509] 35385 35883 36930 37102 37376 37631 38320 38669 39478 39757 39842 41164 #> [26521] 42390 42679 43288 44867 45045 45260 45637 46174 49078  5201  5229  6062 #> [26533]  6097  6307  6552  6930  7318  7730  8136  9174  9311  9594  9766 11220 #> [26545] 11597 12191 13222 14540 16590 16880 16997 18668 18991 19230 19734 20673 #> [26557] 20947 21474 21667 22748 23250 25188 25258 26590 26952 27518 28024 28414 #> [26569] 28498 28907 30194 30257 30340 31311 31406 32434 34652 36686 36841 38407 #> [26581] 38488 39114 40993 41077 41165 44185 45161 46472 48282 49079 49283  6440 #> [26593]  7409  7457  8314  8822  8859  9175  9550 10040 10096 10141 10301 11508 #> [26605] 12807 13271 14541 14757 14907 17334 19231 19615 20239 20324 20443 20501 #> [26617] 20812 20866 21014 21276 23719 24023 24150 25494 25617 26137 26432 26885 #> [26629] 27020 27302 27656 27953 28745 29612 30258 30341 30521 31230 31477 31731 #> [26641] 32513 32846 33343 35386 35796 38933 39115 39679 40530 40893 41078 42303 #> [26653] 42391 44186 45891 47159 49497  5300  5411  5529  5587  6267  6411  6509 #> [26665]  6952  7019  7157  7233  7279  7921  7958  8174  8476  9176  9717 10097 #> [26677] 11548 11893 12331 13004 13361 13409 13583 13900 14050 15283 15762 15930 #> [26689] 16228 16472 17160 18057 18185 18859 18992 20240 21078 21277 22550 22688 #> [26701] 24024 25998 26215 27221 27519 28259 28415 29384 31478 32514 36404 36593 #> [26713] 36931 38670 41612 42114 43846 44676 45465 46652 46852 47056 47241 48283 #> [26725] 48392 48479 48968  6021  6584  6623  7057  7319  7690  7766  8432  8899 #> [26737]  9595  9718  9954  9998 10199 10577 10906 11372 12920 13170 13747 14908 #> [26749] 15496 15709 17268 17941 19055 19616 19735 19862 23313 24151 24278 24582 #> [26761] 25259 25420 25833 25907 26354 26433 26591 26886 27021 27657 28654 30342 #> [26773] 34416 37891 39287 42115 42493 44471 44677 45555 45717 45892 46175 46366 #> [26785] 47660 48871 49695 49792  5174  5471  6510  6553  6778  7020  7158  7410 #> [26797]  7840  7883  8137  8522  8712  9054  9312  9719 10533 10743 10826 11041 #> [26809] 11463 11746 12332 12392 12808 13171 14542 16165 16229 16287 17095 17161 #> [26821] 18058 18318 18669 20867 21015 21615 23174 24359 24725 25340 25908 26078 #> [26833] 26592 26742 26823 28260 28827 28985 29128 29301 31312 34256 34417 35063 #> [26845] 35797 36405 37377 37717 39012 39758 39843 41079 41849 42680 43566 43752 #> [26857] 44187 44282 45162 47160 48393 48680 49406  5498  5887  5923  6098  6234 #> [26869]  6978  7234  7508  8477  8607  8900  8977  9464 10041 11315 11419 12581 #> [26881] 13901 14379 14430 14695 14909 14964 15188 15710 17043 17096 17162 18319 #> [26893] 18993 19112 19675 21079 21419 23800 24658 25025 26288 27022 28416 28828 #> [26905] 28986 29613 29829 30113 31231 31558 31821 33501 34901 34998 36071 37632 #> [26917] 37892 38489 38579 38845 39589 40443 40894 43019 47883 48079 49591  5888 #> [26929]  5987  6022  6889  7125  7192  7411  7621  9092  9999 10827 10907 12333 #> [26941] 12393 12426 12526 12689 13005 13172 13998 14491 14758 15020 15077 16288 #> [26953] 17097 17163 17335 17695 17815 18732 19792 20057 20444 20868 21927 21996 #> [26965] 26355 26667 26743 27303 28417 29302 30427 30522 30821 30994 33901 34653 #> [26977] 35719 35798 37718 37893 38408 38580 39116 39590 40622 42392 42853 46473 #> [26989] 48681  5556  5650  6585  6624  6890  6953  7021  8069  8225  8276  8562 #> [27001]  8713  9055  9313  9720  9767 10042 11549 11598 11846 12626 13690 15021 #> [27013] 15330 16166 16532 18186 18670 18797 19542 20445 21863 23801 23941 24583 #> [27025] 25618 25909 27374 28829 29385 29614 29898 30114 31313 31559 32515 33749 #> [27037] 34079 34578 34654 34735 35212 36231 36687 38671 39759 39939 40353 40444 #> [27049] 40623 42022 42206 42772 42854 43657 44083 44951 45163 46077 46750 47764 #> [27061] 48284 48394 48480  6441  6669  6852  7959  8070  8860  8940  9177  9721 #> [27073]  9908 10043 10098 11124 11166 11221 11316 11847 12334 13362 13584 14099 #> [27085] 14492 14696 14759 14965 15388 15977 16951 17816 17942 18187 19173 19617 #> [27097] 20560 20674 20948 21799 22137 22478 24953 25910 26138 26514 26953 27304 #> [27109] 28746 28830 29129 29615 29674 30115 30428 30523 30995 31314 31479 31822 #> [27121] 32340 32923 33585 33821 34999 35132 36144 36406 36932 37282 38149 38409 #> [27133] 39940 40354 40624 41419 43103 43289 43463 44283 44387 44578 45466 46268 #> [27145] 46751 48682 48872 49181  5301  5588  5857  5949  5988  6023  6099  6670 #> [27157]  6779  6853  7235  8352  8433  8523 10000 10142 10487 11167 11848 12582 #> [27169] 13006 13474 13531 14223 14910 15497 16403 16473 16952 17943 18120 19232 #> [27181] 19420 19618 20869 20949 21080 21207 21278 21928 22274 22898 23868 24152 #> [27193] 24218 24954 26216 26887 28747 29899 29978 31077 31232 31560 31635 31732 #> [27205] 33502 34324 35000 35064 35213 36232 36761 40715 42855 44388 44579 45718 #> [27217] 46176 48481 48584 48969  5819  6671  6703  6891  7159  7412  8102  8138 #> [27229]  8978  9178  9225  9363 10908 11088 12754 13585 13853 16047 16474 17413 #> [27241] 19233 19309 20241 20870 21016 21208 22398 23942 24279 24726 27375 27873 #> [27253] 29616 29900 31898 32143 33902 34418 35884 36594 37019 37467 38321 38490 #> [27265] 40036 41166 42023 43205 43753 47057 48482 48585  5589  6202  6374  6704 #> [27277]  6954  7096  7542  7841  8071  8315  8353  8478  8941  9722  9909 10044 #> [27289] 11509 12427 13410 13748 14327 14380 14543 14814 15878 16881 17098 17336 #> [27301] 17817 18541 19234 19359 19793 20950 21017 21475 21800 22063 22399 22749 #> [27313] 23581 25421 25754 26289 27589 27797 28109 29539 32764 32924 33177 35638 #> [27325] 35799 36595 37468 39379 39479 40195 41525 43206 45556 46752 48395 48778 #> [27337] 48970  5686  6268  6811  7997  8103  9497 10001 10045 10351 11464 11644 #> [27349] 12142 13363 13586 13854 14431 14593 14911 14966 15389 15444 15978 16404 #> [27361] 17414 21476 23175 24360 24955 25999 26744 27159 28499 30343 31823 32847 #> [27373] 33503 33985 34080 34165 34579 36072 36762 36842 37806 37977 38150 38232 #> [27385] 43927 45719 45983 47161 47884 48683 49498  5651  5889  5924  5989  6269 #> [27397]  6375  6511  7022  7193  7458  7543  7658  7998  8072  8316  9364  9411 #> [27409] 10706 10862 11510 11800 12394 12627 13062 13364 14100 15818 16766 17269 #> [27421] 17415 18375 18430 19235 19921 20058 22064 22138 22400 23176 23651 23720 #> [27433] 23943 24875 25100 26515 26954 27023 28110 28500 28748 28908 29303 30822 #> [27445] 31824 32054 32282 32765 34655 34814 34902 35297 35800 36145 36763 38151 #> [27457] 38491 39117 40124 40196 40355 41167 41420 42024 42304 42935 43104 44084 #> [27469] 44952 45807 46078 46653 47438 48396 49407 49592  5557  5652  6164  6235 #> [27481]  6512  6780  7126  7160  7236  7280  8073  8942  9056  9226  9680  9768 #> [27493]  9955 10099 10302 11168 11747 12864 13312 14101 14912 15660 16167 16767 #> [27505] 16998 17337 17752 19360 19863 20561 20744 21801 22207 23251 23314 23515 #> [27517] 23721 23944 24088 25026 26139 26290 27305 27726 30823 32766 33586 34081 #> [27529] 35387 36233 37195 39013 39288 39591 39680 39760 40799 43105 43754 44868 #> [27541] 45467 45984 47162 47765 47885 47975 49182  5653  6203  6376  6513  6586 #> [27553]  7161  7659  7767  8033  8074  8434  8979 10002 10392 10707 11042 11748 #> [27565] 12237 12921 13475 13795 14432 15979 17629 17818 18059 18188 18798 19619 #> [27577] 20813 21730 22551 25619 26434 27874 28418 30116 31636 32283 33750 34257 #> [27589] 34656 35561 35639 37536 38410 38492 38846 39201 40197 41937 43020 43106 #> [27601] 43464 43928 45638 47661 47976 49593  5820  6204  6236  6672  7058  7127 #> [27613]  8479  9855 10003 10744 11043 11317 11511 12090 12428 12471 13855 15331 #> [27625] 15498 15879 16048 16289 16827 17270 18060 18733 18928 19864 20059 21420 #> [27637] 21616 22899 24361 24436 24876 25101 28194 31315 31407 31480 31733 32144 #> [27649] 32608 32767 32848 33667 34258 34657 35969 36596 40716 41938 43755 44085 #> [27661] 46269 47439 48779  6781  6955  7059  7320  7691  7804  8034  8104  9267 #> [27673]  9498  9632 11849 12628 12809 12922 13587 14224 14544 14594 15332 15980 #> [27685] 16290 16533 16642 16768 17044 20871 21477 21668 21997 22065 22826 23177 #> [27697] 24089 24153 25422 25834 26668 26745 27024 27658 27727 28025 28419 29304 #> [27709] 30996 31481 31734 32435 32609 34815 35001 36146 36843 37196 38065 38411 #> [27721] 38581 39289 40625 43756 44953 46474 46654 47766 48184 49284  5687  5714 #> [27733]  6237  6308  6339  6474  6812  7097  7162  7960  9019  9596 10790 11222 #> [27745] 11318 11465 11850 11894 12027 12472 12810 13796 14102 14158 14760 14913 #> [27757] 15135 15763 16999 17338 18431 20562 20951 21864 22275 23869 24090 25911 #> [27769] 26356 26888 28195 28587 29540 29830 30824 31316 31825 32145 32216 32436 #> [27781] 33086 33822 35298 35562 37020 37633 38412 38934 40800 42025 42393 43021 #> [27793] 43372 43847 45371 45557 45639 46570 49183  5785  6412  6979  7281  7459 #> [27805]  7509  8139  8277  8317  8524  8980  9268  9412 12028 12473 13411 15237 #> [27817] 15333 15661 16168 16953 17000 17578 17630 17753 17819 17882 18260 19922 #> [27829] 20060 20386 20675 20814 20872 22208 22689 23108 23252 23870 25755 27222 #> [27841] 28588 29979 30602 31637 32146 33344 34903 36312 37021 38413 38493 40994 #> [27853] 41613 43022 43207 44188 44284 44869  5715  6205  6442  6554  6625  6743 #> [27865]  7692  7805  7842  8175  9314  9597  9723 10200 10352 10436 10578 10909 #> [27877] 12091 12292 12395 13007 13797 13999 15931 17883 18994 19620 19865 20387 #> [27889] 22276 22479 24025 24091 24727 25189 25260 25341 25563 26000 27798 29055 #> [27901] 29208 29541 30259 31233 31561 32437 33419 35388 35640 37634 39118 39380 #> [27913] 39844 40266 41080 42207 44086 44580 44870 45261 45468 45558 46270 47242 #> [27925] 47977 48185 49408  6413  6892  7023  7194  7544  7806  8035  8525  9315 #> [27937]  9465  9598 10143 10828 11223 11420 12143 12335 12429 13272 13412 15078 #> [27949] 15880 19113 19490 19543 19866 20242 20676 21802 22337 22401 22827 23178 #> [27961] 24154 25190 25564 25681 27223 27728 28261 28420 29901 30677 31157 31482 #> [27973] 32147 33751 35478 36933 38672 39202 40037 40531 41421 42305 43208 43567 #> [27985] 45893 46571 47662 49793  6132  6206  7195  7321  8036  8391  8435  8480 #> [27997]  8714  8753  8981  9633 10144 10829 11089 11599 11645 11990 12192 12238 #> [28009] 12755 14328 15079 15238 15499 16169 17696 18061 18734 20325 21362 22209 #> [28021] 23582 23722 24362 24584 24877 25835 26593 26669 27095 27799 28589 29542 #> [28033] 29675 29902 30429 30603 31408 31562 31984 34325 34816 37103 37807 37978 #> [28045] 40532 42208 43757 43848 44005 45640 46079 46271 46753 47543 47663 49184 #> [28057]  6980  7024  7413  8140  8318  8481  9020  9499 10046 10488 11373 11512 #> [28069] 12092 12629 13123 14103 17099 17631 17754 18493 19056 19310 19544 19988 #> [28081] 20129 20815 21541 22139 22338 23802 25191 26670 26746 26889 27306 30344 #> [28093] 31158 31483 31563 31899 32610 33420 34082 34326 35970 36407 36764 37197 #> [28105] 37979 38322 38757 40533 41081 41614 43290 44871 45046 46080 46475 46952 #> [28117] 47058 48971 49080  5751  6626  7622  7807  7843  8037  8482  8715  9179 #> [28129]  9599  9634 10145 10863 11600 11749 12029 12193 12293 12336 12474 12958 #> [28141] 14000 15239 15334 15932 16111 17045 17164 17524 17697 17884 18799 20061 #> [28153] 20326 22277 22402 23253 23449 24507 24659 25192 28196 29056 29543 29831 #> [28165] 31317 31484 32925 33008 33245 33587 34736 35801 35971 36494 37283 38758 #> [28177] 41526 42209 42306 42394 42494 42856 42936 44581 45164 45894 46655 47336 #> [28189] 47544  5858  6133  6207  6238  6309  7237  7545  8483  8861  9021  9057 #> [28201]  9180  9466  9500  9956 10251 10663 11044 11688 11851 11895 12030 12527 #> [28213] 12583 12959 13413 13588 13644 13749 14225 14545 14595 14638 14697 14967 #> [28225] 15933 16291 16828 17100 17165 17525 17579 18613 19361 19621 20563 21018 #> [28237] 22278 22614 25193 25342 25423 26357 26594 26890 27447 27729 29544 29749 #> [28249] 30604 31318 31826 31900 32055 32611 32926 33752 34737 35002 35885 36597 #> [28261] 37198 37719 39290 39681 40717 41254 41615 42026 42773 46476 46754 48285 #> [28273] 48397 48586 48873 49081 49185 49285  6063  6377  6555  6587  6627  6705 #> [28285] 10201 10708 12630 13645 13856 16112 16954 17820 18860 19057 19867 21803 #> [28297] 22066 23315 24155 26747 27096 27224 28655 30742 30997 31234 32612 34419 #> [28309] 34580 34904 35886 37378 38323 41330 43107 44087 44872 47767 47886  6165 #> [28321]  6378  6475  7414  7660  8141  8319  8608  8649  9022  9600 10100 10303 #> [28333] 10830 10910 11374 12144 12960 13476 13691 14914 15022 15335 15881 18062 #> [28345] 19736 20196 20564 21731 21929 21998 22403 22615 22828 23316 24280 24508 #> [28357] 25424 25912 26217 27376 27520 29209 29545 30743 31409 31827 33178 33823 #> [28369] 34420 35802 36688 37284 37635 39941 41422 41771 42495 43373 44285 45047 #> [28381] 45165 45469 46081 46755 47978 49696  6414  6514  7238  7731  7844  7999 #> [28393]  8484  9957 10202 10534 12145 12337 12528 12584 13173 13414 13589 13857 #> [28405] 14001 15390 15934 15981 17166 17271 18121 19236 19622 21865 22140 22210 #> [28417] 22339 22480 24956 25425 26671 27377 28197 29903 30825 32516 32927 33009 #> [28429] 33824 34083 35065 36689 36844 37022 37104 37199 38152 38233 38935 39381 #> [28441] 39682 40198 41082 42496 42937 43209 43929 44189 46656 47337 49594  6443 #> [28453]  7025  7098  7732  7884  8105  8785  9769 10146 10393 10535 11646 11689 #> [28465] 11852 12338 12396 14104 15500 15610 15882 17046 17167 17468 17632 17755 #> [28477] 18000 18063 18122 18320 18432 19737 20677 21141 21279 23652 23803 23871 #> [28489] 25027 25682 26748 27160 28111 28656 29130 29386 32056 32613 34581 35803 #> [28501] 37105 37980 38414 38936 39592 40445 41527 42774 43108 43849 44389 44472 #> [28513] 45262 45641 46082 46477 47768 48684  5950  6628  7693  7768  7808  9134 #> [28525]  9413 10203 10911 11272 11319 11550 11801 12339 12585 13124 13798 13858 #> [28537] 15445 15552 15982 17047 17698 17821 20197 20502 21081 21804 23450 23516 #> [28549] 23583 24728 24791 25261 25565 26435 26595 27730 28749 30260 30826 31485 #> [28561] 31638 32614 35299 35972 36313 37023 37106 37636 37981 40718 41423 41687 #> [28573] 42497 42681 42775 43374 43465 44286 44390 44873 45642 46367 48874  6208 #> [28585]  6444  7661  7733  7845  8038  8176  8320  8716 10101 10147 10252 11421 #> [28597] 11853 13008 13125 13223 15711 16170 16230 16591 17469 21280 21669 21930 #> [28609] 22067 22972 23179 23872 24957 25102 25262 25343 26672 27521 28590 28750 #> [28621] 28831 29057 29904 29980 30744 31410 32768 33753 34259 34582 34738 34905 #> [28633] 35720 36234 36845 38847 39014 39382 40038 40719 42116 45048 45372 46272 #> [28645] 47440 47769 47979 48972 49286  6270  6813  7128  7322  7546  7694  8000 #> [28657]  8226  9093 10912 11001 11045 11601 12690 13224 13415 13692 14105 14226 #> [28669] 14915 15023 18064 18123 19058 20388 21082 21542 21931 21999 23109 23873 #> [28681] 24363 24585 24958 25756 26079 26891 27448 27954 28657 28987 29832 32057 #> [28693] 32284 33010 33903 34084 34817 35641 36934 37107 37808 37894 40267 40356 #> [28705] 40626 41528 41688 42776 43375 43850 44006 44287 44391 45166 46368 46756 #> [28717] 49409  6893  6956  6981  8526  8862  8943  9181 10394 10664 10913 11046 #> [28729] 11224 11320 12031 12146 12529 13174 13532 15240 16292 16405 16475 16643 #> [28741] 16829 16882 18124 18189 18376 18433 18494 18800 18995 19059 19114 19311 #> [28753] 19923 20745 21019 21209 21670 21932 22340 22973 23451 24660 25495 26516 #> [28765] 27225 27307 28112 28501 29305 29833 30998 31564 31639 32341 33668 34421 #> [28777] 34658 35479 35721 36408 37285 37537 37637 38415 38937 39291 39761 39845 #> [28789] 40995 41255 41424 42117 42395 43109 44678 46953 47770 49595  6445  6588 #> [28801]  6629  6894  7196  7809  8106  8563  8944  8982  9681 10148 10395 10437 #> [28813] 11750 12430 12475 13533 13799 13902 14546 16171 16644 18125 18801 19237 #> [28825] 20952 23047 23110 23517 24219 24509 25836 26080 27308 27659 28113 29210 #> [28837] 30345 30524 30678 31319 31828 33345 35300 35642 36147 36235 36846 36935 #> [28849] 39015 40268 40801 41529 42396 42592 43658 44954 45263 46954 47338 48186 #> [28861] 48587  6476  7361  8354  8527  8609  8786  8945  9682  9958 10149 10353 #> [28873] 10791 12397 12756 13416 13800 14381 15336 15662 16592 18614 18929 19060 #> [28885] 19115 19238 19989 22690 23804 24026 24220 26358 26673 27875 28345 29387 #> [28897] 29617 31411 31486 31565 34583 37720 38066 42210 42307 42777 42857 43758 #> [28909] 44955 45373 45808 46369 46478 46955 47339 47980 48875  6340  6814  7099 #> [28921]  7623  7734  7961 10253 10396 11422 12239 12340 13365 14639 15024 15080 #> [28933] 17526 18126 18542 18735 19312 19676 19738 20873 21210 21478 21543 22068 #> [28945] 22974 25344 26140 28114 28658 31412 32148 32928 33904 34495 35133 37286 #> [28957] 39383 40125 41530 41850 42211 42308 42778 43376 44392 44874 47340 48876 #> [28969] 49596  6271  6782  8001  8039  8787  8863  9058  9135  9227  9467 11169 #> [28981] 11273 11375 12294 12431 12586 13009 14916 15501 16347 17168 17223 18001 #> [28993] 18377 19421 19868 20623 21421 21617 22404 22829 23254 24510 24729 25028 #> [29005] 25757 26674 26824 27660 28262 29058 32058 32342 32438 32699 33011 33179 #> [29017] 33588 33754 33825 36073 37024 38067 38938 39942 40039 40269 41531 42027 #> [29029] 42118 42212 45374 46273 47441 47664 48483 48780 49082 49597  7460  8528 #> [29041]  8717  8864  9269  9468  9724 10150 10254 10489 10665 11002 11602 12032 #> [29053] 12194 12811 12865 13175 13417 13534 13750 14227 14433 14698 15446 15883 #> [29065] 16049 16711 17101 17633 18378 19491 19677 20327 20624 20874 21142 21732 #> [29077] 23180 23805 24027 26218 26291 26749 26825 28346 32059 32343 33246 33504 #> [29089] 34166 34327 34584 37721 38939 40446 41331 42498 43210 43466 44190 44473 #> [29101] 45264 46370 46956 47059 47665 48187  6415  6982  7239  7583  7885  8754 #> [29113]  9414  9501  9770 10627 10709 10745 10954 11125 12476 12961 13590 14547 #> [29125] 15764 16050 16348 16769 17416 18434 18996 20243 22552 22616 23317 23584 #> [29137] 23723 23874 24221 24661 25683 27661 27731 28263 28832 28909 29059 30117 #> [29149] 30261 30525 31829 32517 34659 37638 39384 40357 40720 42593 42938 43659 #> [29161] 44875 46083 49499 49697  6477  6706  6815  7026  7060  7323  7810  7962 #> [29173]  8321  9059  9094  9910 10666 11003 11126 12195 12341 12398 12812 13225 #> [29185] 13801 13859 14761 15189 15337 15884 15983 16051 17339 17417 17885 19869 #> [29197] 20062 22141 22830 23724 23875 24028 27876 28026 28502 29750 30605 30745 #> [29209] 30999 31159 31640 32929 33755 33826 34085 36148 36314 37469 39203 40627 #> [29221] 41689 43291 44679 45265 45375 46274 46757 47545 48588 48877 49794  6341 #> [29233]  7129  7362  7662  8075  8564  9551  9683 10628 10667 12691 13010 13063 #> [29245] 13126 13273 13591 13646 16770 16883 19870 20503 21479 22142 22617 23318 #> [29257] 23585 23806 24281 24586 25620 25758 26219 26675 28421 29388 29462 29905 #> [29269] 30430 32344 33247 33827 34086 34496 34585 34906 35389 35480 35887 37809 #> [29281] 38582 39943 40270 41532 42397 43110 43568 43660 43930 46177 46371 47341 #> [29293] 48973  6416  6630  7461  7584  7624  9136  9552  9959 11004 12295 12866 #> [29305] 12923 13176 13751 14159 14596 14699 15819 17418 17580 18861 19623 20328 #> [29317] 22000 22405 23725 23945 24222 26292 26517 27161 27955 29546 30195 31160 #> [29329] 31566 33589 33756 36315 38673 38940 40895 42499 42858 43931 44088 44956 #> [29341] 45049 45167 45720  7547  7922  8142  8650  9095 10004 10304 10792 10955 #> [29353] 11170 11647 12196 12813 13418 14329 15284 15712 16172 16231 18127 18321 #> [29365] 18671 19545 20244 20446 21480 22069 22750 23807 23876 25345 26141 27590 #> [29377] 27956 28988 29618 31830 32345 32518 33180 33986 34087 34328 34422 34497 #> [29389] 34586 35804 36495 37639 37810 39016 39480 39762 39846 40628 41425 42500 #> [29401] 43932 44582 47981 48286 49083  6589  6854  7282  8227  8823  8865  9469 #> [29413] 10047 10102 10490 10579 11005 11171 11376 11466 11751 12093 12477 12867 #> [29425] 13903 14493 14640 15136 15502 16052 16113 16406 16645 16830 18128 18543 #> [29437] 19239 19422 20245 20565 23181 23255 23319 23452 23586 23877 24792 24878 #> [29449] 25759 25837 27378 27449 27800 28591 29906 32217 32346 33346 35722 36496 #> [29461] 38583 39204 39292 39385 39481 40721 41939 42119 44393 45470 49186  7027 #> [29473]  9365  9635  9771 10151 10914 11423 12094 12478 13064 13127 13693 14641 #> [29485] 15503 15935 16593 16646 17527 18065 18862 19739 20746 20953 21143 21805 #> [29497] 22481 22831 22975 23111 23453 26001 27379 28027 28198 28264 28989 29676 #> [29509] 31235 33248 34167 35134 35390 36236 36690 37722 38584 38674 38759 40629 #> [29521] 42501 44089 49598  6855  6895  7548  7695  7963  8228  8866 10536 11603 #> [29533] 12296 12757 12814 13011 14002 14274 14382 15025 15553 16053 16293 16534 #> [29545] 16884 17944 18066 19740 19990 20389 22211 22618 23946 24092 25913 27957 #> [29557] 28265 30118 30431 30746 31078 31161 31641 31831 32060 32519 32615 33249 #> [29569] 33505 34660 35301 35391 35481 35888 36409 36497 36598 36765 37025 37108 #> [29581] 38585 41616 43111 44394 45985 46479 47163 49287  6590  6707  6983  7163 #> [29593]  7363  7415  7462  7696  7923  8107  8229  8392  8901  9415  9684  9810 #> [29605] 10491 11648 11939 12432 12587 12868 13065 13177 14051 14597 14968 15285 #> [29617] 16535 17886 19624 20130 20816 20954 22406 22553 24156 24587 26676 26955 #> [29629] 27097 28422 28592 28751 31487 32769 33757 34739 35214 35723 36074 37723 #> [29641] 38416 38494 38848 39683 39763 42028 42939 43112 43661 44090 45376 47060 #> [29653] 47982  7416  7463  7510  7549  7663  7846  8040  8230 10580 10793 11127 #> [29665] 11377 11513 11649 12033 12297 12692 12962 13419 14700 15026 15338 15447 #> [29677] 15820 16476 16712 17272 17756 19625 20504 20875 21281 21544 21806 22482 #> [29689] 22554 22900 23454 24029 25263 25426 27958 28028 29306 29463 29547 29677 #> [29701] 29751 30262 31488 31642 32520 33012 33421 33590 33987 35215 35392 36316 #> [29713] 37026 37200 37379 38324 38675 39386 40447 40722 41168 42309 43851 45266 #> [29725] 45471 46853 46957 47061 47666 49187 49500 49795  6673  7364  8002  8529 #> [29737]  8651  9096 10005 10103 11802 12693 12869 13904 14598 14762 15027 15663 #> [29749] 15936 16349 16477 17273 17887 19492 22212 22976 23182 23587 24662 24793 #> [29761] 25346 26750 27877 28029 29834 31162 32149 33988 35973 36766 36936 37287 #> [29773] 37470 37640 37982 39205 41332 42120 42398 42682 43211 43852 44876 44957 #> [29785] 45267 45895 46275 47243 49599  6674  7061  7100  7240  7365  8278  8436 #> [29797]  9811 10255 10397 10794 11690 11940 14599 15504 15984 17274 17528 18544 #> [29809] 18930 19061 21144 22341 22832 22901 23256 23947 24879 25264 26359 26436 #> [29821] 26677 27380 27522 28266 29211 30679 31320 33828 34818 35216 36937 37288 #> [29833] 37538 37641 38234 40723 43292 44395 47546 48080 48685  6896  8231  8718 #> [29845]  9812 10048 10668 10831 11551 12758 13012 13592 14383 16407 17275 17757 #> [29857] 19546 22483 25103 25621 26002 26142 26596 26956 30606 31079 32616 32930 #> [29869] 33087 36847 39293 40630 42029 43377 43467 43569 45986 47342 47547 49600 #> [29881]  7028  7324  8652  9470  9772 11552 11604 11691 12034 12694 13313 13752 #> [29893] 13950 14052 14815 15081 15286 15885 15937 16294 16713 17581 18002 18067 #> [29905] 18802 19741 19924 20747 20876 21545 21866 22279 23518 23726 23878 24730 #> [29917] 25104 25347 25427 25914 27959 28115 28593 28833 28990 29307 29752 31321 #> [29929] 31413 31901 32218 33088 33506 35217 35889 37201 37724 38235 38941 42310 #> [29941] 45559 46178 47667 47887 49601 49796  7029  8003  8610 10581 10832 10915 #> [29953] 11047 12530 12695 14160 14494 15391 16594 17102 17470 17699 18379 19626 #> [29965] 19871 19991 20566 22484 23379 23653 23808 26892 26957 27226 28503 29835 #> [29977] 30346 32219 32439 34168 34329 37642 39847 40271 40534 41256 41426 42399 #> [29989] 42502 43113 43378 43759 43853 45268 47888 48188  7030  9316 10956 12759 #> [30001] 13366 13802 14161 14330 14816 14856 15082 16054 16295 16714 16771 16831 #> [30013] 16885 17169 17224 17419 17945 18129 18380 18803 18931 19240 19362 20063 #> [30025] 20955 21422 22555 23112 23183 23257 24030 29619 29753 31163 31236 31643 #> [30037] 31735 32440 34330 34587 35393 36498 36848 37539 38236 38417 38849 39206 #> [30049] 39387 39593 41772 42311 43468 43760 44091 44777 45472 45987 46758 48189 #> [30061]  7101  7283  7417  7585  7924  8041  8279  8653  9813 10492 11321 11752 #> [30073] 13647 13860 14003 14053 14600 14701 14817 16173 16350 17276 19423 19992 #> [30085] 20131 20198 20447 20625 22280 22751 22902 22977 23519 23948 24282 24588 #> [30097] 24794 25915 26003 26597 27309 27450 27591 27732 28199 28267 28347 28752 #> [30109] 29464 29620 30119 30747 32061 32770 32849 33591 33989 34423 35066 35974 #> [30121] 36149 36849 37109 37289 38153 38942 39207 39684 39944 40358 41773 42594 #> [30133] 42683 43293 44288 44474 48398 49410  8393  8437  9270 10152 10582 10833 #> [30145] 11514 11896 12479 12760 12815 12963 13066 13226 14434 14642 15241 15611 #> [30157] 16174 16232 16647 16715 17529 17634 19424 19547 19993 20064 20390 21083 #> [30169] 21282 21618 21933 22213 23320 23654 25496 25760 27592 27662 27801 28116 #> [30181] 29131 29907 30680 31736 31832 32441 33347 33507 34331 34588 35003 35394 #> [30193] 37471 37540 39017 40359 40535 41690 42400 43114 43933 46572 47164 48081 #> [30205] 48287 48686 49797  7769  7886  8004  8143  8824  9601  9814  9911 10583 #> [30217] 13535 13951 14857 15713 16055 17340 17946 18495 18863 19794 20246 20956 #> [30229] 21084 21546 22342 23184 23727 24795 27098 27162 27227 28594 29308 31080 #> [30241] 31237 33250 33508 33669 33758 34088 34819 35004 35563 35643 38154 39119 #> [30253] 39208 39388 42213 42595 42940 43023 44092 46276 46958 47343 48484  7031 #> [30265]  7418  7511  7664  7811  8144  8530  8902  9471  9856 10104 10834 10916 #> [30277] 11467 11803 11991 12035 12095 12816 13067 13128 14004 14917 14969 17001 #> [30289] 17582 18068 19062 19241 19548 21020 21363 22281 22691 23728 25497 27523 #> [30301] 27733 28991 29132 29754 30347 30918 31000 32150 32521 32850 34089 34740 #> [30313] 34907 35135 38237 38418 39120 39209 39945 42596 42941 43294 43934 44007 #> [30325] 44778 46480 46759 48082 48485 48781 49188 49501 49602  7102  7241  7964 #> [30337]  9182 10537 11322 11378 11553 12036 12197 13367 13477 14818 16296 16886 #> [30349] 17635 19925 20748 21671 24589 24731 25029 25838 27310 27381 27451 27524 #> [30361] 27734 27960 28504 29309 30432 30919 32771 32931 33089 33905 35302 36075 #> [30373] 36150 36317 36410 36767 37380 37541 37643 38068 39685 40272 40631 40802 #> [30385] 40896 45721 45809 46277 46959  7735  7965  8076  8177  8903  9553 10629 #> [30397] 10957 11006 11128 11692 12198 12240 14162 15190 15664 15714 15886 15985 #> [30409] 16114 16536 18435 18932 19627 19678 20132 20391 20567 20749 21283 21619 #> [30421] 21733 23113 24663 25265 25348 28200 28910 29389 29755 30263 31081 32442 #> [30433] 33181 33990 34661 34820 35218 36850 38069 38419 38676 40448 40632 40724 #> [30445] 40897 43761 44191 44583 46760 49288 49698  7366  7550  8042  8280  8654 #> [30457]  9366  9636 10864 11090 13013 14005 14435 14702 15665 18190 18322 18997 #> [30469] 20505 20626 20817 21085 22752 25194 25566 26826 27663 28030 29678 30049 #> [30481] 31082 31164 32617 33759 34332 35890 35975 37542 37725 37895 38495 38586 #> [30493] 38760 39389 40273 40996 41083 44680 45377 47344 47668 48589 49289 49502 #> [30505] 49603  7325  8394  9271  9317 10538 11172 12147 13648 13905 14918 14970 #> [30517] 16832 17277 18003 18130 18191 18545 18736 19174 20199 20329 20392 20448 #> [30529] 20568 20818 20877 21284 21620 21672 22692 22978 23048 24732 24880 26360 #> [30541] 27802 29133 30264 30920 31322 32285 33013 34333 35644 35724 36076 36237 #> [30553] 36411 37027 38496 39018 40898 41257 41940 42779 42859 43854 44289 44877 #> [30565] 45896 46761 47983 48083 48288 48974 49604 49798  7130  7284  7770  8145 #> [30577]  8788  9416  9637 10539 11274 11323 11941 12696 14495 14819 16408 17758 #> [30589] 18004 18546 20957 21621 22282 23809 24031 25105 25684 26081 26361 26437 #> [30601] 27525 27664 28423 28753 29390 30265 31165 31644 32932 33090 33422 33509 #> [30613] 33829 33991 34260 34498 35067 35482 36318 38677 39482 40360 40633 40899 #> [30625] 41774 42942 48084 48289 48399 49290 49411  7419  8146  8395  8438  9137 #> [30637]  9183 10584 10746 11693 13314 13649 13753 14971 15505 15938 17170 19242 #> [30649] 19679 19872 21145 22001 22143 23655 23949 24032 24437 24881 26678 26827 #> [30661] 27382 27593 28117 28201 28595 29212 31323 32062 32772 33091 34090 35219 #> [30673] 35725 35805 36319 37028 38155 41617 41691 42780 42943 44681 44779 45473 #> [30685] 46372 48878 49084  7285  7326  7464  7771  7925  8147  8485  8983  9502 #> [30697]  9912 10049 10669 11424 12037 12588 12761 12817 13315 14919 15137 15554 #> [30709] 17048 17278 17583 17636 17759 17822 18436 18737 19363 20065 22070 22979 #> [30721] 23879 24733 24959 25030 25266 26893 27526 27594 27803 28754 30433 31414 #> [30733] 32700 32851 34169 34499 35068 36238 36320 36691 36768 38070 38156 39121 #> [30745] 41427 41851 43935 44093 45050 47669 47889 48190 48687 49412  7242  7286 #> [30757]  7327  8755  8904  9184  9773 11091 11468 11804 11897 11942 12342 12964 #> [30769] 13227 13316 13368 13478 13694 14106 14163 16772 17049 17760 19116 19926 #> [30781] 20066 20449 21146 21285 21364 22407 24511 24590 24882 25839 26894 27228 #> [30793] 28202 29213 29391 31001 31238 32063 32522 34170 34424 34821 35136 35220 #> [30805] 36499 36599 38071 39764 39848 40199 40449 40536 41852 42401 42684 42944 #> [30817] 45560 46179 48290 48879 49085 49291  7966  8178  8531  8611  8825  8867 #> [30829]  9367  9554  9725  9815 10050 10493 10630 11092 11650 13536 14228 14496 #> [30841] 15028 15083 15506 16478 16595 17103 17279 18998 20506 20569 22002 23455 #> [30853] 23588 24157 24364 25031 25567 26004 28203 28505 29310 29621 29679 32852 #> [30865] 33592 33760 34662 37543 37896 37983 39210 39294 39390 39849 40634 41258 #> [30877] 41428 42685 42781 43570 44008 44094 44878 45561 47890 48688 48975  8439 #> [30889]  8532  8565 10670 11605 12762 15029 15887 16648 17280 18192 18323 18496 #> [30901] 19493 19873 20133 21365 21734 22556 24093 24796 25106 26293 26438 26518 #> [30913] 26958 27595 28659 28834 29392 29548 29622 31239 32347 32773 33761 34334 #> [30925] 34741 35976 36769 36851 37472 38072 38761 40200 40450 40635 42860 43024 #> [30937] 43115 43469 43936 44192 44958 45051 46180 47062 47244 47984  7665  7697 #> [30949]  7847  8005  8281  8533  8719  9138  9185  9318  9472  9503  9774  9857 #> [30961] 10305 10710 10795 11606 12038 12096 12589 13369 13754 13952 14384 15821 #> [30973] 16716 17281 17471 17761 19795 19994 20507 22343 23185 23321 24223 24883 #> [30985] 24960 26005 26143 28268 32523 33423 33670 33906 34261 36938 37029 37644 #> [30997] 37984 38497 39594 40725 42686 43116 45052 45269 47442 47548 49292  7420 #> [31009]  7586  7736  8006  8322  8440  9097  9602  9638  9816 10105 10494 11048 #> [31021] 11515 11805 11992 12433 12818 13228 13593 14548 14703 14820 16115 16649 #> [31033] 19175 19742 20393 20627 20819 21547 22283 22833 23114 23810 24094 25428 #> [31045] 25568 26220 27311 27383 27527 28031 28424 28755 29134 29756 30050 32618 #> [31057] 32853 33014 34500 36500 38498 38762 39483 40361 40451 41084 42312 43762 #> [31069] 43855 44959 46084 48291 48782 49293  7812  7887  8441  8946 10051 10106 #> [31081] 11425 12298 13068 13420 13594 13695 14601 14763 15242 15888 16297 16537 #> [31093] 16887 17341 18999 19117 19243 19313 20394 21807 22071 22408 22485 22619 #> [31105] 22693 23186 23880 24158 24664 24797 25761 26082 26439 28204 28269 30827 #> [31117] 30921 31240 31324 32619 33182 34171 34663 35395 38238 39391 40126 40274 #> [31129] 41775 42402 43937 46085 47670 47891 48880 49503  9603 10006 10153 10585 #> [31141] 10865 10917 11049 11093 11225 11694 11993 12148 14436 14497 14764 15138 #> [31153] 15243 16538 16717 17420 17472 19244 19995 21086 21481 22214 22980 23811 #> [31165] 24224 24512 25107 25498 27099 28270 29549 29836 30828 33015 33907 34262 #> [31177] 35069 36501 36939 37473 37544 37645 39019 40275 41169 41941 42121 43025 #> [31189] 44193 46373 46854 47165  7587  7737  8612  8905  9228  9504  9858 10747 #> [31201] 10835 11226 11469 11607 11943 12697 13129 13537 15666 16718 16833 17104 #> [31213] 17282 18672 20450 21087 21211 21286 21482 22003 22144 23656 24665 25032 #> [31225] 25267 25840 26294 27229 27804 28271 28756 29311 30120 30681 31083 31241 #> [31237] 32151 32443 32933 33348 33992 35564 35726 37474 39020 39211 39595 39686 #> [31249] 40276 41853 44009 44879 45378 45643 46481  7888  7926  8282  8355  8906 #> [31261] 10256 10748 12241 12399 12590 12870 13178 13317 13479 13755 15392 15822 #> [31273] 16233 16888 16955 17002 17421 17823 17888 18738 18933 19425 19494 20067 #> [31285] 20628 21212 21287 22409 23589 25195 26598 27384 28425 28506 28596 28911 #> [31297] 29060 29981 30526 30922 31002 31489 31567 32444 33183 35891 38157 39021 #> [31309] 39295 43571 43662 43938 44475 45270 45897 46573 46855 48191 48689 48783 #> [31321]  7967  8007  8356  8566  9186  9368  9685 10540 10958 11173 11324 11898 #> [31333] 13480 13861 14006 14164 14704 15030 15139 15244 15889 16479 16650 16956 #> [31345] 17342 18324 19743 20451 22004 22215 22557 22834 23049 23322 23380 23881 #> [31357] 24159 24438 24734 24798 25429 27025 27100 27230 27805 28757 29550 29757 #> [31369] 34425 36151 36600 37030 39296 39392 40277 40452 41776 43212 43763 45898 #> [31381] 46574  7738  8283  8357  8396  8683  8947  9272  9319  9417  9686  9775 #> [31393] 10154 10586 10918 11050 11227 11608 11695 11994 12039 12097 12871 13803 #> [31405] 14107 14229 14385 14549 14821 15140 15393 16175 16409 16596 16957 17003 #> [31417] 17050 17343 17700 18193 18437 19000 19364 20629 21213 21483 21808 22753 #> [31429] 23323 23590 24033 24365 24513 24961 26083 26221 28660 28912 29837 30434 #> [31441] 31003 31737 32286 34091 34263 35565 36152 36321 36412 38499 40278 40900 #> [31453] 41942 43379 45722 46657 47549 47771 49504 49605  8148  8486  8613  9273 #> [31465]  9505  9776 10398 12400 12965 13179 13318 13906 13953 14165 14230 14858 #> [31477] 15339 15765 15939 16719 16773 17422 17762 17824 18325 18381 18438 19118 #> [31489] 19628 19996 20678 20878 23187 23882 24283 25033 25685 26295 26362 26599 #> [31501] 27231 29758 30829 34092 34589 34908 35303 36239 37290 37475 38073 40362 #> [31513] 44960 45168 45988 47245 48690 48784 49505  7927  7968  8232  8756  9639 #> [31525] 10007 10155 10587 10796 10866 11007 11426 11651 11806 12531 12763 12966 #> [31537] 13069 13804 14007 14108 14437 15555 16889 17530 17947 18005 18131 18739 #> [31549] 19119 19549 20395 20570 21867 22072 22486 22903 23950 26222 27528 27806 #> [31561] 27878 28272 29135 29759 30051 30121 31490 31568 31902 32220 32854 34264 #> [31573] 34664 35483 37476 37726 37897 40127 41085 41259 41429 43213 44396 44780 #> [31585] 45379  8043  8397  8567  8655  9187  9777  9859 10107 10671 11470 11854 #> [31597] 12098 12480 12764 13805 13954 14008 14109 14386 14550 15448 15986 16056 #> [31609] 16351 16651 16720 17889 18132 18382 19495 20134 21934 22558 23188 23456 #> [31621] 24225 24284 24962 25686 26679 28992 30122 33092 34590 34909 35221 36077 #> [31633] 36770 37202 37646 38587 39393 40537 40803 41430 42122 42503 44095 44961 #> [31645] 47166 48292 48691 49294  8684  9023  9098  9687  9817 10354 10631 11325 #> [31657] 12242 12343 12765 13130 13481 14331 14551 14643 15245 16298 16352 16652 #> [31669] 17051 17763 17890 18383 18497 19001 19120 19365 20396 21021 21484 21735 #> [31681] 22284 22904 23381 23812 23951 24666 25762 26144 27232 27735 30266 33993 #> [31693] 34910 35137 35566 35977 37203 38500 39484 39850 40804 42123 42403 42504 #> [31705] 43026 45810 47345 47443 47550 48293 48785 49189  8442  8568  8656  8907 #> [31717]  8948  9555  9960 10711 10867 12819 13180 13370 13806 13862 14275 15394 #> [31729] 16353 16539 16774 17052 17105 17225 17584 18326 19063 19245 19796 19927 #> [31741] 20750 21423 22620 22754 23050 23729 23813 24366 24963 25763 26440 27385 #> [31753] 28758 29393 29551 30830 30923 33093 33424 33593 33762 33830 35005 35978 #> [31765] 36078 36413 36692 38763 39765 39851 40201 42214 43117 43295 43572 43663 #> [31777] 46575 47444  8108  8233  8685  8757  9099  9640 10495 10632 11609 11753 #> [31789] 11995 12099 12967 13371 14498 14552 14644 15340 15612 15987 16354 17053 #> [31801] 17531 19002 21736 21809 22487 23457 23520 24034 25034 25841 26363 26441 #> [31813] 26519 27312 27386 28507 29623 30682 32064 33994 34426 36852 37545 37727 #> [31825] 39596 40453 40636 41086 41170 41777 42124 42313 43573 46482 49606 49799 #> [31837]  8443  8569  8908  9274  9506 10052 10355 10588 10749 11008 11944 12040 #> [31849] 12532 13070 14231 14859 15084 15988 17054 17226 17283 17344 17473 17637 #> [31861] 17891 18133 18261 19928 20820 21935 22488 22621 23730 24035 25430 26084 #> [31873] 27101 27961 29624 29982 30196 31833 34265 34911 37291 37728 38588 39485 #> [31885] 39852 40128 41431 42125 42404 43939 47346 47892 48192 49699  8534  9139 #> [31897]  9188  9556  9604  9641  9688 10008 10204 10257 10438 10496 10541 10750 #> [31909] 11228 11652 12243 12533 13274 13907 14645 14765 15449 16410 16540 17004 #> [31921] 17227 17474 18327 18439 18934 20879 21088 21366 21622 22489 22905 23883 #> [31933] 23952 24285 24735 25268 25569 25916 26680 29214 29983 31084 31645 32221 #> [31945] 32287 32348 34912 35304 36771 37110 38325 38420 38850 40129 40363 40454 #> [31957] 40997 41087 41943 42505 42782 44096 49506 49800  8758  8789  9418  9507 #> [31969]  9860 11696 12766 13482 14553 15191 15450 15556 17345 18134 18194 18615 #> [31981] 18864 19550 19997 20068 20452 20751 20958 22835 23521 24226 25035 25269 #> [31993] 26145 28759 28835 29838 29984 31004 32524 32701 32774 33251 33510 33763 #> [32005] 33908 36940 38678 40726 41171 42314 43574 44584 44682 45644 48085 49700 #> [32017]  8358  8614  8720  9140  9861 10053 10633 11554 12199 12481 14554 14646 #> [32029] 15192 16116 16834 17106 17171 18328 20508 20630 21623 22410 22622 22694 #> [32041] 22981 24884 25108 26223 26681 26959 27962 28118 29136 29312 29552 30052 #> [32053] 30267 30348 30527 31415 31903 32222 32445 33016 34335 34591 35222 37729 #> [32065] 38158 39394 40202 40901 41333 42315 42861 46483 47671 48976  8398  8570 #> [32077]  9100  9141  9229  9726 10439 10634 11379 11555 11754 12434 12968 13229 #> [32089] 13696 13756 13863 14602 14822 15287 15341 16176 16234 16775 17107 17284 #> [32101] 17346 17701 17948 19680 19929 20247 20330 20509 21485 21624 24160 24439 #> [32113] 24799 26006 26085 26296 26895 28508 29760 32775 36601 37031 37730 38159 #> [32125] 38851 39212 39297 39395 41432 43214 43470 46086 48400  8399  8868  9862 #> [32137]  9961 11697 12200 13372 13421 13650 13864 14054 14920 15288 15613 16235 #> [32149] 17347 17825 18135 18262 19681 20135 20679 22411 23382 23731 24800 28273 #> [32161] 29985 30268 31646 32934 34427 35070 35305 37111 38239 38326 39022 40130 #> [32173] 41334 41692 42506 43664 44880 45169 45271 45645 49190 49413 49607  9060 #> [32185]  9142  9508  9778  9863 10959 11807 11855 12041 12100 12149 14009 14276 #> [32197] 14332 14823 15395 15766 15890 16541 17055 17228 17702 17892 18006 18195 #> [32209] 18384 18547 20880 20959 21367 21548 22145 22982 23884 24227 26146 27665 #> [32221] 28426 28661 29839 30924 31738 32935 35306 36853 36941 37647 39687 40203 #> [32233] 40538 42405 42687 45723 47167 48294  8323  9557 10399 11094 11174 11380 #> [32245] 12698 13538 14972 17893 17949 18196 18263 18440 19551 19629 19744 19930 #> [32257] 20069 20136 20248 20960 21486 22344 22490 22755 23115 23258 23814 24591 #> [32269] 25270 26147 27313 27387 27452 27529 27666 27879 28205 29061 30053 30197 #> [32281] 31904 33594 34428 35138 35806 36153 38501 39298 39946 40805 41172 43118 #> [32293] 43296 43856 46181 46762 47985 48881 49191  8686  8759  9689 10306 10589 #> [32305] 10712 10960 11856 11945 12042 13014 13697 14277 14973 15289 15507 16299 #> [32317] 16890 17108 18935 19874 23458 25917 26960 27102 27880 28836 30269 30435 #> [32329] 31085 31834 32152 36414 37204 37648 38679 39023 39486 40040 41433 41618 #> [32341] 41854 44476 46182 47246 47347 47772  8359  8615  8657  9558  9962 10054 #> [32353] 10497 10713 12767 14166 14333 14647 14860 14921 15193 15557 16776 17172 #> [32365] 17229 17423 18740 19745 20453 21022 21089 22559 22756 23732 24036 25196 #> [32377] 25764 25842 26961 29553 29625 30436 31242 32223 32702 33184 33252 33671 #> [32389] 33764 35727 37477 37811 39597 40279 40806 41173 41260 42030 44477 44781 #> [32401] 45170 45474 46374 46576 46658 47348 47986 48786 49295 49507  8658  9101 #> [32413]  9143  9419  9864  9913 10156 11051 11275 11516 11610 11996 12401 12435 #> [32425] 12482 13015 13071 13757 15891 15940 16480 17056 18264 18498 19003 19121 #> [32437] 19797 19931 20631 20961 22345 22757 23324 23657 23733 23885 23953 24801 #> [32449] 24964 25109 25499 26751 26896 27103 27596 28119 28206 28597 28662 29062 #> [32461] 29680 29761 29986 30349 30683 31325 31416 31647 33185 33253 33672 33831 #> [32473] 34172 34336 34501 35484 36602 37649 40637 41434 42597 44097 45053 45989 #> [32485] 48193 48401 49192  9061  9509 10055 10440 11899 12244 13758 13908 14055 #> [32497] 16891 17638 17826 17950 19004 19552 20962 22623 23383 23815 24885 26297 #> [32509] 26442 26520 26600 27104 27233 27667 28348 29063 29465 29554 30831 32065 #> [32521] 32349 32446 32620 33595 34913 35892 36415 39688 40131 41435 42406 43575 #> [32533] 45646 47247 47893 49701 49801  8826  9320  9510  9642  9818 10205 10751 #> [32545] 10961 11095 11175 11808 12201 12299 13181 13539 14110 14438 14974 15246 #> [32557] 15342 15396 15558 15767 16542 16777 17005 17109 17703 18616 19998 20331 #> [32569] 21868 22285 22624 23591 23886 24095 24667 24802 25036 26007 26443 27026 #> [32581] 28032 29064 29215 29908 31491 32066 32936 34502 36942 37812 39213 40204 #> [32593] 40638 40727 40998 42945 44478 45475 46856 47773 48402 49086  8790  8869 #> [32605]  9024  9420 10206 11129 11653 11900 12631 12699 13483 13595 13698 13759 #> [32617] 13909 14555 15397 17057 17230 18329 18804 19366 19426 19875 20249 20332 #> [32629] 22560 22983 23459 24803 27453 29313 32937 34914 35307 35567 35807 36154 #> [32641] 36772 37381 38680 38852 40132 41436 43297 44194 44585 45054 46278 47894 #> [32653] 48086 48977 49296  8687  9230  9605  9727 10258 11096 11130 11229 11946 #> [32665] 12101 12202 12300 14439 15343 15823 16236 16411 17006 18805 19932 20070 #> [32677] 20137 20250 21288 22073 24514 24886 25037 25110 25765 26224 27027 27963 #> [32689] 28120 28274 28509 28760 29626 30350 30832 32855 35808 37032 37546 39299 #> [32701] 39947 40902 41088 42783 43471 43764 44397 45562 48692  9231  9321  9369 #> [32713]  9643  9914 11009 11276 11427 11947 12483 12768 13596 13807 14010 14766 #> [32725] 17058 18806 19630 19933 20571 20632 20821 21673 23522 23658 23887 24736 #> [32737] 25111 26008 26601 26752 26897 27597 28993 29216 29627 29681 30270 30607 #> [32749] 31648 31985 32776 32856 32938 33673 35645 37292 38681 38943 39214 39689 #> [32761] 40999 41533 42688 43119 43576 44098 45272 47063 47168 47551 47774  9690 #> [32773]  9779 10157 10635 11277 11326 11611 11809 11948 12969 13072 13319 14705 #> [32785] 15085 15290 16835 17585 17827 18741 21810 22625 23659 23816 24228 24592 #> [32797] 24737 25112 25431 26753 27964 28275 31326 32447 33425 33832 33995 34093 #> [32809] 34429 35006 35139 35893 37382 38589 40455 42598 42946 43215 44195 44290 #> [32821] 44586 45724 46375 47445 47775 48403  9275 10108 10158 10441 10962 11131 #> [32833] 11517 11556 12484 13373 15398 15508 15892 16237 16481 16597 16892 17532 #> [32845] 18136 19122 19798 20200 20680 21147 26148 26225 26898 27807 28837 29909 #> [32857] 31005 31166 31835 31905 33833 34173 34503 36416 37731 38764 39024 40205 #> [32869] 40280 42507 43472 44479 45273 45380 46279 46376 46659 46857 48295  9025 #> [32881]  9144  9322  9421  9511 10868 11132 11176 11471 12436 12534 13016 13182 #> [32893] 14706 15291 15509 15768 16238 18137 18265 18673 19553 20251 20397 20681 #> [32905] 20881 21023 21487 22491 22695 23523 24515 24965 25500 26226 27028 27105 #> [32917] 27234 29314 29987 31492 32703 33996 37732 39025 40807 41089 42215 43380 #> [32929] 44291 45990 46280 46577 46660 46960 48590 48787  8791  9915 10009 10400 #> [32941] 10442 11278 11557 12043 12245 12535 12632 12769 13230 13955 14648 16177 #> [32953] 16653 16721 17348 17639 18007 18197 18548 18617 18807 18865 18936 20752 #> [32965] 21549 25918 26754 26828 28598 29840 30608 30748 31569 31739 31986 32224 #> [32977] 32857 32939 33834 34430 35007 36603 37813 38160 38327 40539 41693 42126 #> [32989] 42407 42947 43665 43765 44587 47248 47446 47776  9102  9865 10636 11010 #> [33001] 11279 13320 14922 14975 16412 16654 17007 17285 19064 19746 20633 21148 #> [33013] 21550 24887 25843 26086 29137 30271 30528 30684 30749 31006 32777 32858 #> [33025] 33017 33254 33997 34337 35140 36079 40041 41174 44292 44782 45055 47064 #> [33037] 48788 49087 49508 49802 10109 10498 10714 11177 11230 11612 13597 14923 #> [33049] 14976 15086 16117 16355 16413 16482 18385 18618 19314 19876 20138 20822 #> [33061] 21488 21551 21936 22626 22836 23051 23660 23888 24096 25844 26298 27881 #> [33073] 28510 29315 30609 31649 32067 32778 33349 33596 35071 35809 38502 38765 #> [33085] 38944 39122 39598 40206 40808 41437 41694 42031 42316 42784 43216 43473 #> [33097] 43666 43940 44196 44881 45381 45725 46661 47249 47777  9559 10637 10797 #> [33109] 11472 11857 12700 14649 14977 15141 15344 15941 17110 17764 18441 19123 #> [33121] 22906 23116 23734 24229 25845 26009 26227 27029 27314 28427 28663 29762 #> [33133] 31740 31987 32448 32779 33674 34822 35072 35485 37383 37650 37733 37814 #> [33145] 37985 38590 40456 40728 41090 42317 42599 44197 44398 44480 44962 45991 #> [33157] 46484  8827  9145  9323  9644  9728  9780 10401 10590 10715 10919 11231 #> [33169] 12301 12437 13275 13321 14278 14556 14861 15031 15247 15510 15942 16543 #> [33181] 17765 17828 18866 19005 22005 22074 22286 23325 24286 24668 24738 24804 #> [33193] 25846 26521 28428 28838 28994 31493 32068 32525 32704 32940 33094 33511 #> [33205] 33909 34665 36240 36322 36854 37033 37734 38074 38161 38421 39026 41855 #> [33217] 44293 44588 45476 46578 46858 47065 48194 48404 49193  9232  9370  9473 #> [33229]  9645  9729  9916 10259 10672 11381 11698 12633 12924 13017 13073 13183 #> [33241] 14440 15087 15715 16414 17286 17766 18008 18499 21024 21625 21674 22907 #> [33253] 23259 23326 23524 23817 26087 26149 28207 28664 28995 29394 29555 31007 #> [33265] 32153 33426 33910 36241 38162 38591 39690 40042 43120 43577 44010 44399 #> [33277] 45899 46662 48789 49509  9026 11280 11327 11382 11518 11654 12203 12591 #> [33289] 12701 12970 13322 13422 15345 16118 16178 16300 16544 16598 17951 18674 #> [33301] 19006 19427 19554 19747 21424 21626 22006 22075 22346 23384 23818 24230 #> [33313] 27030 27598 29682 30054 31650 31836 32449 33512 34338 35568 37384 38503 #> [33325] 38766 39027 41261 42032 42318 43121 44589 44683 45274 47066 48591 48693 #> [33337]  9062  9103  9474 10056 10752 12150 12344 14441 14557 15893 15943 16893 #> [33349] 19999 20882 21737 22007 22412 24593 25847 26010 26364 28839 29841 32621 #> [33361] 33350 33513 33597 33911 35141 35810 39396 40281 40729 41175 41778 42689 #> [33373] 45563 46961 47169 48195 48296 49510  9691  9730  9781 10110 10443 10963 #> [33385] 11011 11473 11558 12402 12634 12820 12925 13374 13699 14499 14603 14650 #> [33397] 15716 16483 17111 17829 19065 19124 20252 20454 21368 21869 21937 22758 #> [33409] 23189 23260 23735 24594 25349 25570 26899 27388 27599 27668 28121 28349 #> [33421] 28996 29217 30272 30610 30750 30833 32526 33765 35569 36773 36943 37385 #> [33433] 38328 39691 40364 41000 41779 42690 43122 45564 46579 46663 47067 49702 #> [33445]  9371  9512 11052 11949 13018 13074 13910 15399 15769 15894 16655 16722 #> [33457] 17424 18266 18808 19007 20753 21149 21425 21552 22561 22696 23052 26088 #> [33469] 26682 26900 28033 29218 29395 29628 29683 30055 30198 30751 30925 32527 #> [33481] 32705 33186 34174 34592 34915 35308 35811 35894 37735 40133 41176 41534 #> [33493] 41856 44011 44783 45900 46377 48196 48297 48486 48592 49414  9104  9475 #> [33505] 10307 10499 10542 10638 11053 11097 11383 11428 11474 11858 12302 13184 #> [33517] 13423 13484 13651 14011 15292 15824 16599 16723 17059 17475 17952 18009 #> [33529] 18330 18809 19246 20000 20455 21289 22413 23053 23261 23736 23819 24669 #> [33541] 25271 25501 25622 25919 26683 26962 27106 29556 29684 29763 30926 31167 #> [33553] 31651 35396 36604 38163 39300 41001 41335 41438 43298 43766 45477 45992 #> [33565] 47349 47895 48405  9233  9731 11328 11699 12770 13375 13808 14056 14167 #> [33577] 14387 14651 14862 14978 15511 17008 17425 17533 17894 17953 18069 18619 #> [33589] 18867 19247 19799 20001 20139 20201 20754 21090 21150 21426 23889 24966 #> [33601] 25350 25623 26602 27389 27454 28122 28599 30199 30752 32528 32859 33018 #> [33613] 33598 34666 34742 35073 35397 36417 37293 38075 39028 39599 39766 39853 #> [33625] 41091 41944 44400 45993 48406 49194 49297 49608 10798 11384 11755 12872 #> [33637] 13424 13760 14111 14334 14558 15667 16484 16958 17895 20253 20333 20682 #> [33649] 20823 21427 22076 22492 22908 24367 24516 24595 25848 30529 30611 30753 #> [33661] 30927 31417 31494 31570 32350 32622 32941 33255 33835 34094 34266 34593 #> [33673] 35812 36080 36502 37736 38076 39123 39397 39948 40540 42216 42408 43381 #> [33685] 43474 44198 48298 48407 10500 12151 12536 12702 14112 14824 14924 15088 #> [33697] 15989 16057 16485 16894 19748 22077 23820 23890 23954 24967 26150 28913 #> [33709] 30754 31327 31418 32069 33019 33427 33836 34431 36242 36605 39124 40282 #> [33721] 42033 42785 43027 43217 46378 48087 48694 49298  9422 10444 10964 11613 #> [33733] 12152 12246 13809 14113 14168 15346 16119 16486 17830 18267 18500 19631 #> [33745] 20572 21214 21369 22146 22909 23661 23737 23891 24888 25113 25272 27965 #> [33757] 29466 29988 30056 31328 31906 32070 32225 32780 33428 33514 34823 34916 #> [33769] 35979 36243 36693 36944 37112 37386 40639 41262 43667 43857 45382 45565 #> [33781] 47068 49299  9476  9646 10111 11012 11281 11859 12153 12403 12537 12873 #> [33793] 13598 13761 13911 14825 15347 15770 15825 16356 17112 17534 18331 18742 #> [33805] 19632 20254 20755 20883 21091 22759 22837 23190 23385 23738 25849 26603 #> [33817] 26684 27736 27808 29842 29989 30685 30834 30928 31329 31652 31837 31907 #> [33829] 32071 32351 35728 35980 37387 38164 38422 38853 40730 41263 41439 41695 #> [33841] 41945 43299 43578 44012 44784 45171 45275 45811 46087 46281 46485 48197 #> [33853] 48299 48593 49803  9606  9732  9819 11329 11860 12485 12926 13599 13865 #> [33865] 13956 14388 14707 15614 16836 17831 18138 19008 21870 22760 26228 28208 #> [33877] 28761 29219 29629 30057 30123 30835 33256 34095 35309 36323 36694 38767 #> [33889] 39600 40903 41002 41696 42691 42786 43028 43475 44199 44684 46486 46580 #> [33901] 47069 47350 47552 47672 48882  9372 10010 11330 12247 12592 12971 13600 #> [33913] 14279 14500 15451 17009 17426 18139 21092 21370 21627 22147 23739 25114 #> [33925] 25197 27966 28429 28840 29843 30836 31008 31168 31330 32226 33257 33675 #> [33937] 33766 34096 34267 35486 35729 35895 38854 39398 40134 40541 41535 41697 #> [33949] 43123 44882 45056 45383 45812 47778 49195 49415  9692  9866  9963 10308 #> [33961] 10753 11331 12044 12345 12486 13231 13276 14169 14280 14335 14767 15452 #> [33973] 16357 17287 17954 18268 19066 19877 20255 20634 20683 20963 21215 22627 #> [33985] 22697 22838 23191 23327 23892 24161 24368 24517 24889 25432 26444 28600 #> [33997] 28665 31495 33095 33429 34097 34824 35074 36244 36503 36855 37478 38165 #> [34009] 38945 39487 39692 41003 41177 41536 42217 42319 42409 42508 43382 45566 #> [34021] 45994  9560  9693  9733  9867 10543 10716 11232 11429 11950 12154 12438 #> [34033] 12703 12874 13232 13601 13700 13810 15348 18868 20002 20398 20573 20756 #> [34045] 20824 21151 22148 22984 25624 25687 26089 27600 28350 28997 30837 31086 #> [34057] 32352 32706 33599 34432 35310 36418 37034 37205 38768 39029 40283 40365 #> [34069] 40457 40542 40809 41092 43218 44294 45647 45813 46088 46183 46282 47070 #> [34081] 49511  9782  9820 10309 10402 10501 10639 10869 11519 11655 12439 13131 #> [34093] 13376 13701 14979 15089 16778 17113 17231 17476 18010 18620 19878 20071 #> [34105] 20140 21553 21871 21938 22078 23328 24596 25351 27235 27809 28276 28511 #> [34117] 29220 29557 30273 30755 31169 33837 34098 35398 36245 37294 37388 38769 #> [34129] 39030 39693 39949 40458 41619 44295 45478 46184 46379 46859 47351 49416 #> [34141] 11700 12538 12704 12972 13323 14114 14232 14863 15559 16058 16120 16959 #> [34153] 17477 18140 18621 19067 21025 21152 21290 21811 22628 22761 22985 23117 #> [34165] 24518 24670 24805 26299 26604 26829 27315 28430 29844 30530 31419 31741 #> [34177] 32353 34504 34594 35399 36324 37547 38166 38855 39215 39399 39601 39854 #> [34189] 42948 43858 43941 44296 45901 46487 46664 47170 47352 49300 10403 10836 #> [34201] 11901 12539 13075 13185 13277 13425 14281 15453 15990 17060 18442 18810 #> [34213] 19248 20141 20757 21026 21428 21738 22149 22347 22698 23662 24097 24369 #> [34225] 25198 26151 26229 26365 26605 26685 27031 28123 28512 29845 29910 31742 #> [34237] 33258 33430 33515 33912 36945 37737 39400 40640 42509 43942 44297 45995 #> [34249] 46860 48695  9783  9821  9917 10159 10310 10717 11178 12404 12875 13019 #> [34261] 13233 13540 13602 14115 14768 14980 15142 15560 15717 16239 16358 16600 #> [34273] 16779 16837 16895 17114 17478 17704 17832 17896 18070 18501 18811 19800 #> [34285] 20142 20510 21153 21291 21371 23740 23893 24806 25920 29221 29316 29467 #> [34297] 29558 29685 29990 30200 30756 30929 31170 31908 32227 34099 35981 36155 #> [34309] 36419 37206 37548 41537 42127 42510 43029 47896  9694 10057 11054 12821 #> [34321] 13076 13811 14604 14981 15668 16121 17586 17897 18869 19367 19633 20003 #> [34333] 20399 21154 21554 21872 21939 22216 22348 22986 23262 23386 23525 23663 #> [34345] 24287 24890 25038 25352 25688 26090 26755 26901 27455 27967 28034 28351 #> [34357] 28998 29138 31171 31909 32529 33600 34100 34433 34743 35487 36246 36856 #> [34369] 37035 37113 39855 40043 40207 40366 41178 41264 41857 41946 42511 44685 #> [34381] 45172 46962 47250 48198 48594 49703  9918 10311 10673 10965 11282 11475 #> [34393] 11614 13324 14116 14170 14559 14769 16059 16240 17349 18549 19368 20143 #> [34405] 20334 20684 20964 21489 21739 22008 22079 22150 22217 22629 23955 24807 #> [34417] 26902 26963 27107 27810 29396 30531 33187 34505 34744 35075 36857 37389 #> [34429] 38329 38423 39856 40044 40459 40810 42600 43476 45173 45384 45814 46861 #> [34441] 46963 47071  9868 10260 10591 11013 11332 11430 11701 11997 12248 12705 #> [34453] 13132 13485 13702 14501 14605 14982 15400 16487 18011 18743 18812 18937 #> [34465] 19555 20335 20400 20456 21675 22151 24597 25502 26091 28209 28513 28762 #> [34477] 28841 29686 31743 32072 33259 33913 36081 36858 37036 37207 39694 39767 #> [34489] 39857 40731 41440 41947 42128 43579 44200 44401 45567 49088 10837 11476 #> [34501] 11520 12706 13486 13541 14117 14171 14389 14442 14502 14652 15454 15826 #> [34513] 16060 16656 16780 17427 17705 18071 20574 20884 26522 27968 28277 28431 #> [34525] 28842 29139 29222 29846 30686 31838 32073 32942 33260 33838 35982 38424 #> [34537] 39488 41265 41538 44298 45057 47072 47251 48408 10404 11055 11385 11810 #> [34549] 12045 12635 12707 13186 13542 14503 16896 17479 17767 18198 20575 20885 #> [34561] 21555 21812 24037 24891 25353 25766 26830 28035 29468 29559 29847 30612 #> [34573] 31420 31744 32074 32154 33096 33261 33839 34101 34339 34825 36156 37208 #> [34585] 40811 42787 43383 45385 45568 46185 46665 46862 46964 47779 48088 48300 #> [34597] 48487 48595 49417 10207 10754 11179 11477 11998 12822 12927 13133 13426 #> [34609] 13703 14504 14864 14925 15615 15669 15771 16061 16179 16545 16724 17350 #> [34621] 17833 18072 18550 18870 19176 20144 20336 20825 20886 20965 21490 21556 #> [34633] 23118 24098 24231 25571 26366 26964 27882 28432 28601 28666 29469 30532 #> [34645] 31571 31910 32288 32860 35570 35730 40135 40812 40904 41179 43219 43668 #> [34657] 44099 46488 46965 47252 48978 10674 11056 11098 11386 11559 13020 13603 #> [34669] 13652 13912 14233 14983 15090 15827 16488 17535 18141 18502 19249 19634 #> [34681] 19879 20072 22762 22987 23387 23592 24232 24288 26606 28124 28433 29397 #> [34693] 29687 30201 30930 32623 33020 33262 35571 38682 38770 39602 41948 42320 #> [34705] 42410 43767 46186 46380 46666 49089 10261 11811 11902 12708 13134 15032 #> [34717] 15091 15143 15616 15670 18443 18503 18551 19177 19250 19369 19556 21372 #> [34729] 21557 22152 22699 23192 23593 24162 24671 26445 27163 28667 28843 30437 #> [34741] 30687 30931 31839 31911 32228 33601 39301 39489 39768 40045 40208 40367 #> [34753] 42411 44299 44686 44883 46187 48089 10160 11133 11333 12823 13377 13427 #> [34765] 13762 14057 14606 14984 15194 15455 15512 16301 17115 17587 18073 18871 #> [34777] 20685 21740 22562 23193 23329 23741 24370 24968 25039 25273 25689 26092 #> [34789] 26903 27316 27601 28036 28125 29560 30202 30838 32450 32781 34102 34340 #> [34801] 35008 35142 35223 35488 36082 36946 37037 37114 37549 37815 38683 38856 #> [34813] 39031 41539 42218 42412 44481 44785 45902 46381 46667 47673 49418 10640 #> [34825] 13543 14058 15617 17061 17232 17351 19068 19370 19496 20145 20457 21292 #> [34837] 21813 22009 22493 23526 24808 25115 25921 26446 26831 27236 28434 29561 #> [34849] 29991 30351 30688 30932 31009 31745 31988 32624 34667 36504 36947 37651 #> [34861] 40543 41441 42413 43384 44300 45058 47073 47987 48090 48301 11756 11999 #> [34873] 12102 12709 12824 13487 14172 16122 17352 17768 18444 18504 19497 19682 #> [34885] 20004 21216 21491 21814 22839 22988 23388 23594 23956 24038 24519 27530 #> [34897] 28763 30438 30613 33351 33431 34917 36420 37986 39769 40209 41949 42034 #> [34909] 42129 42219 44100 44590 46863 47074 47553 47780 48199 10262 10718 11057 #> [34921] 11283 11387 11757 11812 13812 13913 14059 14926 15671 17288 17428 17480 #> [34933] 17640 17898 17955 18074 18269 18332 18445 18552 18744 19009 20073 20758 #> [34945] 21676 22080 23119 23389 24440 24520 24809 25433 25767 26011 26230 26965 #> [34957] 27108 28999 29140 30058 31421 31572 31840 32530 32782 33021 33352 36157 #> [34969] 36606 36859 37987 39216 40368 40544 41950 43124 44101 44201 44301 44482 #> [34981] 45059 45276 46188 47075 48596 48696 48790 10263 10544 10641 10870 11014 #> [34993] 11134 12103 12249 13077 13278 13378 13544 13604 13813 15513 16123 16241 #> [35005] 16359 17173 19069 19251 19498 19557 20401 21373 22494 22840 23330 24039 #> [35017] 24892 26367 28435 28514 29223 31243 31653 32155 32625 33516 33914 34175 #> [35029] 35009 35143 35311 35813 36607 37652 41004 41780 43580 45174 45277 45479 #> [35041] 46668 48091 10356 11478 12973 13021 13428 14708 14865 15144 16725 16838 #> [35053] 17289 18622 19125 20256 20337 22010 22495 23742 24441 25354 25503 26300 #> [35065] 27811 28278 28764 28914 29000 29141 29688 30533 31746 31841 32531 32626 #> [35077] 32861 32943 33602 33915 35076 35572 35983 36083 36505 37115 37738 39695 #> [35089] 39770 40905 41093 41180 41698 41858 42512 42788 43220 43581 45480 46283 #> [35101] 46669 48488 48791 49704 10871 11180 11431 12104 12540 12636 12876 13135 #> [35113] 13814 14012 14173 15195 15991 18505 19178 19315 19428 19801 20686 20826 #> [35125] 20887 21628 21741 22414 23390 25850 26012 27602 28436 28915 29764 30124 #> [35137] 31087 31172 31842 33097 33263 33916 34826 37295 37653 38504 41442 42321 #> [35149] 43300 44687 45726 46284 46864 49301 49705 10405 10838 11058 11099 11615 #> [35161] 12250 12928 13234 14336 14607 14927 15248 15992 17116 17353 19429 21293 #> [35173] 22763 23054 23527 23894 24289 24893 26152 26607 26686 27237 29001 29142 #> [35185] 30757 32075 32532 32707 33840 35312 35646 35731 36247 36325 36948 37898 #> [35197] 39125 40369 40732 42513 43030 43385 44483 45386 47076 47447 47897 49302 #> [35209] 49804 10719 11284 11951 12593 12710 12825 12877 15401 15828 16124 16302 #> [35221] 16897 17233 18199 18675 20146 21873 22415 22700 22910 23528 23821 25274 #> [35233] 26687 26832 27032 27164 27603 28602 29143 29689 31496 32076 33676 34434 #> [35245] 34506 34668 34918 35732 36506 37816 38771 39401 39490 39771 41443 42035 #> [35257] 42130 44102 44302 44786 45648 46382 46670 10755 11388 12155 12251 13815 #> [35269] 14013 14118 14174 14505 16415 17834 18676 19499 20147 20576 21027 21429 #> [35281] 21677 21742 22841 22911 23055 23743 26013 26523 26608 27969 28844 29317 #> [35293] 29765 30274 30352 30534 31573 31989 33022 34103 34507 35400 36774 38684 #> [35305] 39217 41444 42220 44591 45815 47448 48200 48489 48597 10592 12541 12711 #> [35317] 13235 13488 13653 17010 18012 18075 18333 18446 19430 20148 22011 23664 #> [35329] 26524 28352 28916 29318 29766 30125 30839 32229 33353 34595 35896 37038 #> [35341] 38240 39603 40370 40545 43031 43221 43386 45903 47353 48792 10593 11861 #> [35353] 12542 12929 13022 13078 13489 13545 14390 15145 15349 16242 16546 16726 #> [35365] 17641 20149 20511 20635 20888 21492 21815 23263 25922 26093 26368 26525 #> [35377] 26756 27238 27812 28037 28437 29144 29319 29690 29911 31747 32533 33517 #> [35389] 33917 34827 35984 36775 37039 37296 38685 40046 41699 41859 42862 44963 #> [35401] 46089 47171 47781 47988 48490 11233 11389 12594 14014 14175 14282 14866 #> [35413] 17290 17956 18334 19010 19431 19500 19934 20202 20257 22701 23391 23744 #> [35425] 24163 24521 24672 25504 25690 27737 28038 29848 30614 31497 31654 32451 #> [35437] 32944 33841 35313 35733 35814 36326 36695 37899 39604 40136 40906 41005 #> [35449] 41781 42601 42789 43477 43859 48793 11015 11234 11758 12346 12712 13136 #> [35461] 13325 13763 14015 14060 14985 15196 15249 15993 16416 16547 16781 16839 #> [35473] 17174 17481 17536 18623 18677 18938 19501 19880 20577 21743 22153 22349 #> [35485] 23120 24099 24371 27033 27604 30203 30275 30840 31244 33098 33603 33677 #> [35497] 36507 41336 41540 41700 41951 44964 45387 45481 45569 45727 45816 47253 #> [35509] 48598 48979 49512 11059 11759 15561 15895 16657 16782 17175 17588 17706 #> [35521] 17835 18013 19683 21744 22764 22842 23194 24894 29912 30353 30535 31010 #> [35533] 32708 33678 35010 35077 35144 35224 37040 37817 38772 39858 41094 41181 #> [35545] 42692 44103 47354 49513 11390 13279 13429 14391 14770 15033 15829 16125 #> [35557] 16658 20074 21155 21294 22154 22912 24372 24522 24895 25691 25768 25923 #> [35569] 27239 27317 30126 30841 31011 31912 32452 34919 37479 37550 37900 39696 #> [35581] 40137 40813 40907 41620 41782 41860 42131 43943 46489 47989 48980 49090 #> [35593] 49514 11181 12204 12252 12487 12595 12713 13079 13490 13816 14283 14826 #> [35605] 15197 15672 15944 16243 16548 16659 17354 17482 18014 19011 19070 19252 #> [35617] 19558 19749 19802 20203 20759 21156 21493 21745 22496 24164 24598 25275 #> [35629] 25692 27165 27240 28668 29224 29913 30204 30536 31498 33918 34268 34669 #> [35641] 34745 35011 35734 36327 37116 40047 41337 43032 43387 43768 45388 45728 #> [35653] 47898 48883 49419 49609 49805 10872 11100 11182 11285 11432 11656 11952 #> [35665] 13764 14928 15350 15772 17355 18447 18939 20258 21558 22012 23331 23392 #> [35677] 27166 28039 30537 32289 32453 33767 34176 34920 35225 35401 35985 37390 #> [35689] 37739 38241 38330 41445 43222 43478 45060 45389 45482 45649 46285 47990 #> [35701] 10873 11235 11903 11953 12930 13023 13236 13280 14608 14827 14929 14986 #> [35713] 16360 17589 18553 18940 19502 20150 20578 21940 22630 23332 24969 25116 #> [35725] 25199 26094 26369 27605 27669 27970 28669 30538 32290 32354 33679 33842 #> [35737] 34670 38331 38773 39491 39859 40210 40733 40814 41952 42132 43388 43669 #> [35749] 43944 44303 46865 48092 11334 12714 13704 14016 14234 14392 15402 15514 #> [35761] 15718 15830 17590 17836 17899 18678 18813 19253 19750 20204 21816 21941 #> [35773] 22563 23195 23393 24373 24896 25276 25769 25924 26153 26231 28040 28126 #> [35785] 28279 28765 32355 33099 33264 33432 33768 34104 35986 38686 40048 41338 #> [35797] 42514 44884 45061 45570 45729 45817 46286 48409 48794 11016 11479 11560 #> [35809] 12488 12715 13137 13817 13914 14176 14443 14867 16783 17176 17769 18679 #> [35821] 19559 20005 22631 23196 24442 24897 26757 26833 29145 29320 30059 31913 #> [35833] 31990 32627 34921 35012 36158 36696 37654 38687 41861 44202 44304 46966 #> [35845] 47077 47554 48093 48981 49706 11236 11521 11657 12205 12489 13281 13765 #> [35857] 13866 14868 15896 16489 16898 17591 18270 21028 21559 21942 22632 22765 #> [35869] 23121 25434 25572 26154 26232 29691 30060 30933 32077 35013 35145 39605 #> [35881] 39697 40138 40371 42515 42790 46581 47782 11391 11954 12046 12596 13138 #> [35893] 13654 14061 14337 14560 14930 15618 15994 16062 17429 17483 17770 18941 #> [35905] 20075 20259 20636 20889 21093 21629 22218 22766 23197 24523 25693 25770 #> [35917] 26155 27034 27883 29767 31655 31914 33433 34671 35735 37297 38077 39218 #> [35929] 39698 40815 41095 41541 43033 44305 44688 45650 46383 47449 47991 48410 #> [35941] 49091 11286 11561 11760 12716 12826 13080 13187 14177 16180 16303 17177 #> [35953] 18076 18448 19254 19371 19635 20687 21494 22081 22767 23122 23460 23745 #> [35965] 24233 25117 25277 26156 26834 27738 27884 28280 28917 30934 31422 31499 #> [35977] 31748 31991 32291 32783 33188 34922 36248 36608 38167 38242 39032 40641 #> [35989] 41542 44013 47450 49610 11904 12105 12253 12490 14178 14235 14338 16063 #> [36001] 16490 17062 17484 18814 19012 19432 20260 21157 22013 22497 22989 23264 #> [36013] 25355 27885 30935 32628 33354 36860 38168 38946 39606 40908 43860 44014 #> [36025] 44592 45571 47078 49420 11392 12405 12717 13605 14828 14869 15250 15619 #> [36037] 16491 16784 17234 17837 19255 19636 19803 19881 20261 20688 21943 22913 #> [36049] 23333 23895 24100 24165 24290 24673 24739 25118 25200 25625 26966 27971 #> [36061] 28515 28670 29398 30354 30439 31574 32784 35226 36776 37117 37209 37988 #> [36073] 39302 39492 40642 46490 47783 48411 49806 11480 11813 12254 12827 13705 #> [36085] 14284 14444 14709 15773 15897 16064 16417 16492 16660 18386 18449 18554 #> [36097] 20890 21094 21295 22633 23198 23822 23896 24374 24599 25626 26370 26609 #> [36109] 27241 28127 28671 29470 29992 30615 33023 33604 34177 34435 35573 35736 #> [36121] 35897 37740 38078 39219 40816 41953 43301 43861 45278 45996 47451 47555 #> [36133] 47784 48412 11761 12974 13491 13766 13867 14236 14506 14771 15034 15403 #> [36145] 15719 15898 16601 16785 16899 17900 18335 19560 20760 21817 21874 24166 #> [36157] 24740 25435 25694 26447 27035 28438 29399 29562 29768 30276 30842 31245 #> [36169] 31749 33024 33265 34436 36861 37041 37818 39860 40049 40284 41096 41543 #> [36181] 41701 43125 43670 45572 46189 46384 47992 49611 11702 12047 12255 12828 #> [36193] 13237 13706 14119 14507 17063 17592 17642 17771 18942 19071 19179 20579 #> [36205] 20966 21818 21944 22082 22287 22564 22914 23199 23665 23957 24040 25119 #> [36217] 25851 28603 28766 30061 30689 31750 31843 32629 33355 33434 34746 35078 #> [36229] 36084 36508 36949 37210 37741 38332 38592 38857 39861 41702 41862 42221 #> [36241] 42516 42602 43302 44484 44689 44787 44885 45573 45651 46671 47452 47899 #> [36253] 11481 11562 11814 12048 12440 13326 14237 15673 15831 17291 17430 17537 #> [36265] 18200 19256 20512 21217 22014 22083 22288 22565 23334 23666 23823 24443 #> [36277] 25278 25573 25695 26014 26233 29563 29630 30127 30205 30355 30843 31088 #> [36289] 31575 31915 33189 33843 34923 35227 36777 37551 37742 37901 38425 40734 #> [36301] 41006 42517 42791 43479 44690 46866 48201 49421 49612 11433 11862 12441 #> [36313] 12597 13024 13606 13818 14710 16418 16602 17011 17117 18815 18872 18943 #> [36325] 19684 20205 21158 21430 22015 22416 24810 25040 25436 26095 26835 27318 #> [36337] 28041 29769 33435 33680 34437 36328 37480 39033 40643 41007 41097 42693 #> [36349] 42949 43126 45279 11482 12106 12771 13238 13492 13546 14561 15146 15351 #> [36361] 15945 16493 18271 18745 18944 19433 19751 21296 21678 21746 22417 26448 #> [36373] 26526 26610 26904 27456 28210 28672 29914 30440 32230 32454 33605 34438 #> [36385] 34828 35898 36329 40285 40909 41863 43862 44402 44965 45175 46385 49807 #> [36397] 12303 13282 14238 14987 15404 15832 16361 16840 17118 17431 17901 18272 #> [36409] 18450 21875 23746 24811 25279 25771 26758 27109 27813 29321 29770 30128 #> [36421] 31656 32156 33356 35899 37211 38858 40050 41182 41266 42694 42863 44203 #> [36433] 44485 44691 45062 45280 45390 47453 47556 48302 49515 11563 11616 11815 #> [36445] 11863 12256 12304 12491 12878 14017 14062 15293 15405 16841 18015 18555 #> [36457] 19180 19372 19561 20580 21374 21495 21747 22768 23123 23958 24167 24234 #> [36469] 24291 27972 28604 29065 30277 31089 34924 36509 37298 38169 39862 40211 #> [36481] 40372 40735 41098 41267 41446 42695 43769 44015 44886 45391 45574 47900 #> [36493] 48094 48491 48795 49196 12347 13283 13547 14562 15251 15406 15833 15899 #> [36505] 16549 17012 17485 18624 19072 19804 20689 21748 22418 22915 24812 25201 #> [36517] 25356 25925 26015 27886 29002 29849 29993 30844 38243 38333 41621 42603 #> [36529] 45652 46967 47254 47674 48599 49422 12257 12879 13239 14063 14285 14508 #> [36541] 14772 15352 18201 18506 19805 20076 20206 20967 21297 22702 23461 23959 #> [36553] 24101 24524 24813 25357 25852 25926 26611 27670 28042 28353 29066 31246 #> [36565] 31916 32945 33518 33919 35402 36330 36510 37989 39220 40051 41339 42222 #> [36577] 42414 42696 43034 44966 45730 46672 47355 47675 48600 11703 11762 12637 #> [36589] 12772 12975 13081 13284 13767 14773 14931 15035 16362 17013 17178 18387 #> [36601] 18625 19882 20006 20077 20761 21095 21560 21679 21749 22155 23056 26527 #> [36613] 27390 28605 28767 28918 29003 29631 34341 35228 35737 36950 37552 38334 #> [36625] 38505 38859 40546 40736 42792 43127 43389 44692 45653 47079 48303 12305 #> [36637] 12829 12976 13188 13285 13430 13957 14286 15562 16244 16661 17772 17957 #> [36649] 18077 18451 18816 18873 19806 20207 21159 22498 22769 23747 24600 25120 #> [36661] 25772 26301 26688 26967 27457 28043 28673 28919 30441 30758 31173 31331 #> [36673] 31500 31844 33190 33266 33357 33606 35900 36249 37655 39221 40460 43480 #> [36685] 44788 45063 45654 49092 12049 12442 13493 13607 13655 13868 15092 15294 #> [36697] 16494 17538 18078 18626 19126 20968 22289 22566 23265 25121 26968 27973 #> [36709] 29471 29771 30062 30278 31845 32455 33100 35489 37299 37743 38688 39126 #> [36721] 41099 41954 44789 46968 48796 48982 49613 12258 12638 12880 12931 13548 #> [36733] 14445 15036 15674 15720 15900 15995 16662 17432 20458 21876 22419 23394 #> [36745] 23595 23960 24375 24814 25202 25927 26234 27739 28281 30356 31247 31917 #> [36757] 33607 35229 38506 38593 39607 39699 40286 40547 41340 42223 42415 42793 #> [36769] 43128 45392 46190 46582 47993 48202 49197 49423 49614 12639 12881 13327 #> [36781] 13549 15037 15093 16495 17119 17235 18202 18388 18556 18817 19181 19562 #> [36793] 19752 20338 20690 21029 21750 22156 23124 23335 23462 23596 24041 24102 #> [36805] 24376 24815 26235 27167 27814 27974 28920 29472 29564 29915 30759 32709 #> [36817] 32785 33267 33436 33681 34105 34269 34829 36609 37553 37744 38507 40139 #> [36829] 41268 41544 42133 43481 44306 45176 45997 12718 13328 13379 14179 14653 #> [36841] 15147 15407 15515 15834 15996 16960 18557 19073 19127 19935 20078 20262 #> [36853] 20339 20637 20691 22499 22634 24601 26759 27319 29146 29473 29632 29692 #> [36865] 29772 31248 31657 32292 33519 34672 36778 38170 39303 39863 40644 41183 #> [36877] 41341 42518 46287 47454 48095 49093 12107 12206 13082 14120 14870 15563 #> [36889] 15675 15997 16496 16900 16961 17064 17292 17838 18142 18507 18746 18818 #> [36901] 19128 19373 19936 20638 20969 21751 21877 24042 25203 26096 26157 27815 #> [36913] 28354 31174 31249 31332 32356 32786 33101 34673 34747 35403 36610 39222 #> [36925] 41269 42416 42604 43035 44104 44790 45177 48601 48983 49424 49516 49707 #> [36937] 12348 12932 15198 15901 16181 16497 16962 17356 17902 18079 18508 20827 #> [36949] 21218 22219 22420 22990 23200 23667 25204 26689 27531 28128 29067 31333 #> [36961] 33102 34178 34925 35901 37300 37990 38860 39034 39864 41184 41270 44307 #> [36973] 44791 45818 47172 47676 48203 48304 49303 12108 13189 13494 13608 14121 #> [36985] 14287 14609 15038 15094 15353 15902 16126 16498 16663 17065 17357 19129 #> [36997] 19257 19563 21219 21945 22991 23897 24168 25122 26158 26528 26760 27036 #> [37009] 28921 29225 29400 29693 29773 29850 31090 31501 34508 34926 35815 35902 #> [37021] 36085 36511 36862 37212 40287 40645 41447 42036 43036 44693 44887 45655 #> [37033] 48984 12406 13240 14239 14563 14654 15295 15516 16182 16245 16304 16842 #> [37045] 18680 19316 19374 19434 19564 19753 20762 20970 21752 22084 23125 26371 #> [37057] 27671 28211 28845 28922 29068 29474 29565 29633 29916 30760 31658 32078 #> [37069] 32357 33268 35903 39127 39402 39772 42605 43129 44967 48985 49198 49304 #> [37081] 49425 12259 12306 13329 13431 13495 13550 14122 14240 14655 15095 16246 #> [37093] 16419 17066 17486 18558 18747 19074 20151 22157 23961 24377 24525 24674 #> [37105] 25627 25853 26372 27037 27391 27532 29322 29774 30063 30442 30616 31091 #> [37117] 32630 34509 35904 36159 36421 37042 38171 38244 38335 38508 38947 39223 #> [37129] 39608 40288 40910 41448 41622 41955 42697 43390 44016 44792 46191 46867 #> [37141] 47785 48602 49199 49426 12407 12492 12640 12933 14509 14774 15296 15774 #> [37153] 16065 17293 18627 20152 21375 22567 23266 24292 24675 24816 24898 26905 #> [37165] 27168 27975 29226 30279 30690 31250 31576 31992 32079 32946 33191 33769 #> [37177] 35146 36160 37043 37213 37656 37745 38336 38426 40817 42519 42698 42794 #> [37189] 43130 45178 47786 48305 48884 49615 12830 13286 13330 13707 13768 14064 #> [37201] 14180 14510 14610 15297 15903 16664 17120 17179 17358 17433 17593 17958 #> [37213] 18874 19130 19807 21680 21878 22421 23668 24103 24169 24741 27038 27169 #> [37225] 27392 28212 29775 29917 31334 31423 31993 32293 33358 33437 34106 34179 #> [37237] 34674 36422 37118 37481 37819 37902 40289 40548 40911 41449 42520 43482 #> [37249] 45393 46288 46868 48697 49708 12831 14611 15298 15564 16183 17643 20891 #> [37261] 22568 23267 24899 26449 27170 27740 28439 28674 28768 28846 28923 29069 #> [37273] 29694 30206 31251 31577 31751 32358 32534 33192 33998 34675 36331 37482 #> [37285] 37991 38079 39700 39773 40549 40912 42037 42950 44486 45281 46386 47080 #> [37297] 47677 47787 12882 14181 14393 14511 14871 14932 15039 15299 15565 16184 #> [37309] 16305 16363 16843 18945 19375 19435 20513 21879 22350 23268 23336 24293 #> [37321] 24817 25574 26529 28282 29401 29918 30129 30357 31092 32294 32535 36512 #> [37333] 37044 37554 37903 38080 39865 39950 40052 40212 41783 43770 44017 44487 #> [37345] 44694 45998 47678 49517 13551 14612 14872 15620 15904 15998 16066 16364 #> [37357] 16786 16844 17359 18080 18559 19258 19317 19376 19565 19637 19754 19937 #> [37369] 21160 21220 21496 21819 22016 22220 22569 23337 23898 24294 24602 25773 #> [37381] 26016 26097 26450 26690 26761 26836 27039 28355 28440 28516 30280 30845 #> [37393] 31846 32536 33103 33269 33359 33520 33682 34270 34596 34830 34927 37045 #> [37405] 37657 39128 40461 40818 41703 41956 42038 43223 43945 45483 46387 46763 #> [37417] 47356 47994 48413 48797 49427 49808 13025 15040 15199 15354 17487 18273 #> [37429] 18681 20263 21681 21880 23201 23269 24444 24603 24900 25358 26612 26762 #> [37441] 26906 27242 28847 29004 30443 31012 33270 33844 34831 35014 35314 36513 #> [37453] 36863 38774 39701 40550 42039 42224 43483 45394 47788 47901 48885 12641 #> [37465] 12719 13139 14065 14446 14656 15041 15456 16127 16727 18081 18336 19182 #> [37477] 19436 19638 20007 20340 21431 22770 23202 23395 24604 24818 25280 26236 #> [37489] 28129 28606 29475 30846 31578 32631 32947 33104 33438 33683 34107 34510 #> [37501] 35987 36161 39866 40551 42322 43224 44018 44308 45484 45999 46583 47255 #> [37513] 47357 47455 49305 12720 13083 13190 13915 14182 15621 17180 17773 18452 #> [37525] 18819 19183 19808 19883 19938 20692 22017 22085 22351 23669 24526 25205 #> [37537] 25437 26017 28356 28517 28607 30207 30358 30444 30761 31013 31918 32231 #> [37549] 32359 32537 32710 33608 33999 34832 36332 36514 36864 37820 38594 40053 #> [37561] 40462 42606 44105 44403 44968 45179 45282 45904 46090 47456 47679 48414 #> [37573] 49094 49809 13084 14241 14339 15566 16185 16728 17434 17594 19685 19809 #> [37585] 20763 21820 21881 22422 22500 22635 22916 23396 23962 24104 25206 25575 #> [37597] 27816 30847 31335 32360 33193 33439 33609 34000 34676 35315 35404 36162 #> [37609] 36515 37904 38689 39867 40213 40373 40646 40819 41271 41342 42134 42521 #> [37621] 42864 43484 43671 44019 45485 46969 48415 49428 13026 13380 13496 14066 #> [37633] 14183 14829 15567 16067 16128 16247 16845 18143 18875 19884 20264 20581 #> [37645] 21030 21376 22018 22086 22771 23126 24105 24605 25123 25505 25774 27393 #> [37657] 28924 29695 30359 31252 31502 33920 34511 35405 35574 35905 37746 37905 #> [37669] 39304 41343 42135 42699 43485 44309 44404 44488 45575 46000 13191 13287 #> [37681] 15517 16248 16603 16901 19259 19377 20265 20514 20582 21031 21096 21497 #> [37693] 22501 22917 23597 23963 24043 25207 25359 25506 25576 25696 26098 27533 #> [37705] 27606 27672 28518 29476 30539 32538 33271 33770 35230 37119 37821 38595 #> [37717] 38948 39035 39951 41272 41864 42040 42323 42417 43131 43486 48492 48986 #> [37729] 14184 14242 14340 15457 15676 16365 16902 16963 17488 18453 19013 19260 #> [37741] 19755 20266 20828 21097 21753 22423 22570 22772 24295 24819 25124 25208 #> [37753] 25438 26530 26837 27673 28675 29227 29994 30848 31752 32157 33360 33921 #> [37765] 35231 35647 35906 36333 36423 37822 38775 41273 44020 44793 44969 46091 #> [37777] 46970 47358 47457 48096 48416 48798 13241 14123 15096 15148 15946 16550 #> [37789] 16787 16964 18144 18560 19261 19885 20079 20153 20764 21161 21432 21882 #> [37801] 23397 23824 23964 24378 26838 27040 27171 27674 27887 28357 29070 29995 #> [37813] 31014 31424 31503 33105 33922 34342 34439 34833 35406 35490 35988 37906 #> [37825] 38861 39774 39952 40054 40290 42865 44794 45731 46491 47458 47557 47789 #> [37837] 47995 48886 13552 15097 16551 18145 18509 18628 19437 20008 20208 21162 #> [37849] 21221 21377 21630 23670 24379 26018 26691 27041 28358 28848 30445 31336 #> [37861] 31425 31919 32632 33440 35232 35989 36334 36865 37214 37747 38509 40055 #> [37873] 40374 40737 42324 13769 13958 14124 14657 14933 15098 15568 16846 16903 #> [37885] 17360 17903 18016 18682 19378 19939 20829 20892 21098 21222 22290 22424 #> [37897] 22502 24296 25854 26302 27243 27458 27675 28441 30130 30849 32361 32456 #> [37909] 35407 37046 37658 38949 39493 40738 41865 42225 43225 43863 44106 45180 #> [37921] 46492 46673 48698 49306 13085 13331 13497 14447 15042 16366 16604 17294 #> [37933] 18946 19318 19639 20009 20341 21298 21883 22352 22843 23127 23825 24044 #> [37945] 24170 25577 25928 26839 27888 28283 28442 28849 29996 30281 31920 32232 #> [37957] 32362 33272 33684 35147 36335 37301 37992 38081 39305 39494 43303 46192 #> [37969] 46971 47256 47790 48987 49709 13192 13708 13819 13916 13959 14288 14711 #> [37981] 14775 16367 18017 19184 19262 19886 20342 21821 22019 22221 23057 23598 #> [37993] 23748 24297 24742 25628 27676 28676 29402 29997 30131 31175 31504 31753 #> [38005] 31994 32457 33273 33923 34180 35233 35408 36866 36951 41344 41545 42325 #> [38017] 42607 42951 43132 43946 44405 44489 44695 45732 46584 14125 14564 14658 #> [38029] 14776 15200 15999 16249 16499 16788 17236 17904 18018 18082 18146 18203 #> [38041] 19640 19810 21561 21754 22353 22425 22918 22992 23599 25360 29851 30850 #> [38053] 31337 31579 32080 32233 32458 32539 33274 33924 35015 35409 35907 36086 #> [38065] 37659 37907 39609 39953 40463 40552 41185 41345 41546 43037 45656 47173 #> [38077] 47558 47680 48887 49095 49616 49710 13609 13820 14341 15408 15677 15947 #> [38089] 17595 17774 18454 18876 19014 19263 19756 20402 20893 21099 22222 24171 #> [38101] 24445 26019 26237 27459 27607 27741 28359 28519 29071 29228 29998 30446 #> [38113] 31338 31659 31754 32862 33771 34748 34834 37823 39224 39868 40820 41450 #> [38125] 41784 41866 45733 45905 46493 47081 47681 48888 48988 13498 13869 15099 #> [38137] 15149 15569 16000 16420 16965 17707 18510 18947 19075 19264 19438 20080 #> [38149] 20894 21299 22636 23749 23826 25439 28044 28925 29229 30540 32295 33925 #> [38161] 35316 35491 35738 36250 36424 36611 36697 36867 38337 39610 39954 40291 #> [38173] 40821 41623 42226 42700 43391 44107 46193 46674 47174 49429 49518 14067 #> [38185] 14185 14243 15150 15622 15721 15835 16665 16729 16904 19379 19686 20209 #> [38197] 20459 20830 21100 21682 21755 21822 22291 22426 22703 22773 23529 23827 #> [38209] 24970 25041 25281 25775 26238 26907 27534 27742 27817 28520 29403 31015 #> [38221] 31755 32363 33441 35317 35575 35648 36612 38172 38950 39306 39869 39955 #> [38233] 41100 41451 41624 42522 45181 45395 45819 49711 13553 13709 14068 14448 #> [38245] 16306 16905 18561 19641 21032 21223 22158 22427 23600 23750 23965 24743 #> [38257] 25282 27535 27608 27976 30132 30282 30617 31847 34108 35410 36868 36952 #> [38269] 37047 37660 38245 39611 39956 40140 40647 41452 45657 46494 46764 47459 #> [38281] 48097 49307 49617 13432 13554 13656 14777 14934 15775 16186 16250 16966 #> [38293] 17775 17839 18083 18748 18948 19015 19566 20583 21433 22704 23270 24971 #> [38305] 26020 26239 26373 30936 32081 32633 33275 33521 33845 35492 35649 36087 #> [38317] 36425 36516 37908 38596 39036 40822 42227 43487 43582 43947 45396 49200 #> [38329] 49308 49712 13610 14126 14659 14830 16129 16906 17121 17539 17776 17840 #> [38341] 18455 20010 20081 20154 20210 20515 21946 22223 22637 23463 23530 24106 #> [38353] 24172 24527 24744 24901 25209 25855 26303 26374 27889 29323 29776 30851 #> [38365] 31016 31426 32158 32234 34597 35079 35234 35576 37555 37661 38862 39037 #> [38377] 41453 43488 44108 44696 45064 45486 46869 47175 47359 13499 13960 14018 #> [38389] 14565 15355 15948 17295 17361 17644 18204 18274 18562 19016 19131 19319 #> [38401] 19380 19687 20267 20639 20895 21101 21163 21631 23751 24676 27244 29147 #> [38413] 30208 31017 31093 31580 31848 32459 32787 34271 34440 34512 34749 36613 #> [38425] 38951 39129 39307 41346 42608 43226 43489 43864 44697 46194 46388 46495 #> [38437] 47257 47460 48306 14778 15458 16068 16552 16605 16847 18683 18749 19567 #> [38449] 19757 19811 19887 20896 21756 22774 23338 25629 27394 27536 27977 28130 #> [38461] 28284 28850 30852 31849 31921 34343 35235 35650 35739 35816 37556 37824 #> [38473] 37909 38246 40553 41347 41547 41867 42523 42701 42795 44795 45658 45734 #> [38485] 46870 49309 13611 14342 15300 15678 16606 16730 17237 17362 18563 19185 #> [38497] 19381 23339 23398 24528 25578 25697 25776 26451 26908 27042 27245 27609 #> [38509] 28608 29230 30283 31339 34109 34181 34513 34750 35318 36426 39038 40464 #> [38521] 40648 42866 45576 46389 49713 14566 14660 15570 15836 15905 16421 17540 #> [38533] 17708 18019 18275 18456 19568 20011 20343 20831 21498 22020 22354 23058 #> [38545] 24972 25042 25210 27320 28677 29852 30691 30937 31176 33194 34598 35080 #> [38557] 35148 35817 36336 37825 38597 39495 39870 42609 43392 44310 45735 45906 #> [38569] 46092 47559 49430 14186 15151 15837 17181 17777 18276 18389 21300 22224 #> [38581] 23399 24173 24446 24820 25125 26159 26692 27043 27110 27537 28045 28851 #> [38593] 29324 30064 31253 31922 33106 36869 39871 45659 45736 47176 14613 15409 #> [38605] 15949 17363 17435 17489 17596 18949 19688 19812 20211 20460 21033 22159 #> [38617] 22638 23400 23828 24045 24529 26304 27677 29696 30284 31018 32634 34441 #> [38629] 34599 35016 35740 35990 36698 38427 39775 39872 40292 41625 42326 42702 #> [38641] 43583 43672 44698 45182 46765 48493 49096 49714 13870 14289 14614 14779 #> [38653] 14873 15152 16666 16848 18564 19265 21164 22292 22355 22428 23059 23601 #> [38665] 24606 25043 25283 26305 26763 27111 27172 28360 29231 29325 29697 31427 #> [38677] 33522 33926 37120 37215 39957 41008 41186 41348 43038 43393 43865 44593 #> [38689] 45183 45577 45737 45820 47177 13917 14615 14712 16553 16789 16907 17436 #> [38701] 17597 18629 19132 19439 20268 20344 23060 23203 23464 24821 25044 26693 #> [38713] 26764 27610 27678 28046 28131 29232 29698 31340 32296 33610 34001 34677 #> [38725] 35411 38598 38863 39039 40913 43304 43673 43771 44888 45821 45907 47178 #> [38737] 48417 48699 49618 14780 15459 15571 16667 17182 17296 17541 18020 19813 #> [38749] 19940 21102 21165 21434 21757 25211 25630 26531 27538 27679 28213 29326 #> [38761] 29699 30618 31177 33927 35319 35651 35741 38690 38952 40914 43394 44109 #> [38773] 46195 46871 47560 48700 48989 14988 16069 16554 17183 17959 21499 23061 #> [38785] 23671 23966 24380 25929 29477 31178 32297 33025 35412 35577 36337 37391 #> [38797] 37993 38691 39130 39225 39496 40649 41785 43395 43490 45283 46390 47082 #> [38809] 47561 47902 14069 14343 14935 15153 16422 16849 17364 18084 18565 19133 #> [38821] 19503 19689 20345 20897 21435 21562 21683 22705 23967 24381 24447 24822 #> [38833] 25507 25930 27539 28361 31341 31923 31995 32948 33026 33361 33846 34600 #> [38845] 35818 36517 37910 37994 38864 39403 39612 39958 41957 44406 45487 46093 #> [38857] 49097 49715 14344 14661 16555 16967 17365 19440 19504 20403 20898 21103 #> [38869] 22021 26240 27044 27540 27818 29327 30209 30762 31505 31996 32159 32298 #> [38881] 32635 35081 36338 36518 37748 39226 39613 39702 40293 41187 41704 42796 #> [38893] 43305 44889 45397 46001 46496 47360 49619 14244 14512 14616 15201 15460 #> [38905] 15623 17366 17490 18630 21378 22022 23340 23968 24448 25777 26160 27611 #> [38917] 30133 31506 33442 33772 36251 36699 36779 37392 37826 38865 41101 41188 #> [38929] 41705 44204 44594 44970 48889 49098 14245 17841 18457 18511 19186 20082 #> [38941] 21224 21684 21947 22160 22225 22571 23899 24174 24449 25212 25698 26532 #> [38953] 27460 29148 29328 29999 30541 30763 31924 32082 32460 32863 34344 34678 #> [38965] 35819 35908 36427 36700 37216 37557 39040 39308 40739 41102 41706 41958 #> [38977] 43948 44407 44699 47791 48701 49310 15572 15950 16368 16423 17014 18337 #> [38989] 18512 18631 19187 19266 19382 19941 20155 20404 20584 20765 20832 22844 #> [39001] 23401 23531 24175 24298 26840 27045 27395 27461 27680 28047 28769 29329 #> [39013] 29777 30210 30360 31094 31179 31254 31756 32299 32636 32864 33523 33685 #> [39025] 33773 34345 34442 36953 37558 39309 39404 39959 42610 43133 43866 44595 #> [39037] 45822 47461 47682 48418 48603 14449 15776 16731 17367 17905 18205 19441 #> [39049] 20083 20156 20833 20899 21034 21500 21685 21948 22775 22919 23204 23341 #> [39061] 23532 24530 26161 27246 27462 28926 29778 30065 30764 31428 32637 32949 #> [39073] 33611 34928 37483 38866 42418 42867 43227 43491 43584 46391 47361 47903 #> [39085] 14345 14394 14567 14831 14936 15722 16307 17067 17238 17542 17645 18390 #> [39097] 19569 19758 20405 20834 22776 22845 23752 24745 24902 25045 26162 26841 #> [39109] 27112 27396 28132 28770 28852 28927 29233 29566 29634 30619 30938 31255 #> [39121] 32788 32865 32950 33195 33928 34443 34751 35413 39227 39776 39873 40294 #> [39133] 40650 42041 42868 43228 44110 44408 45284 45908 46196 46497 46872 47179 #> [39145] 48890 49201 49716 14395 14450 14832 15301 15624 16424 18206 18338 18458 #> [39157] 18566 19383 19642 20157 20269 22226 22356 23402 23969 24235 25213 25361 #> [39169] 25931 26099 26375 27890 28048 28362 29234 30939 32300 34835 37911 38082 #> [39181] 38776 40554 40740 41189 42042 42136 42524 43396 44205 47083 47258 47562 #> [39193] 48307 15302 15951 16251 16369 18277 18339 18750 18950 19267 20158 21035 #> [39205] 21104 21501 22639 22846 23900 24176 25778 26306 26842 27113 27541 27612 #> [39217] 29779 29853 30447 31507 33027 34752 35991 37121 37662 38338 38953 39960 #> [39229] 44311 45184 45488 47084 47259 48308 48990 14874 15154 15252 15573 16001 #> [39241] 16130 16790 16968 17368 17709 18391 20084 20406 20971 21823 21949 22777 #> [39253] 23128 24823 25362 25508 26969 27247 27321 28133 29072 29235 29404 30066 #> [39265] 30448 30620 31508 31997 32638 32711 33276 34836 35236 36163 37393 38599 #> [39277] 38867 39310 40555 40741 41009 41190 41626 41786 44596 46197 46498 48891 #> [39289] 14662 15777 15838 16252 16850 17184 18085 18684 21166 22293 23602 23970 #> [39301] 24046 24746 26307 27046 27681 27743 28134 28771 28928 30211 30449 31509 #> [39313] 33028 34002 34110 35237 35414 35909 38692 42228 43134 44111 44490 45660 #> [39325] 45738 45823 48309 48991 49311 14663 16253 17598 18685 19268 20012 20693 #> [39337] 21036 22087 22993 24450 24531 24607 24903 25284 25631 26765 27542 28049 #> [39349] 28214 28285 29149 29567 30285 30361 31581 32364 32461 32866 33443 34601 #> [39361] 36519 36954 37827 38868 38954 41548 42229 43306 47260 48204 16002 17122 #> [39373] 18147 18820 19188 20461 20516 20835 21686 22920 23672 24299 25126 25779 #> [39385] 25932 27682 28135 28609 28853 29780 30134 30212 31095 31180 31342 31925 #> [39397] 32540 32712 33612 33929 36870 37394 37484 37749 38428 39777 40742 41191 #> [39409] 44971 45065 45578 46289 47462 48419 49810 14713 16003 16187 16607 17015 #> [39421] 17068 17842 18021 18459 19017 21436 21563 22640 23062 23603 23673 23829 #> [39433] 24904 26308 26694 27047 27819 28050 28136 28929 29236 29405 30135 30621 #> [39445] 30853 31096 31181 31429 32365 33444 33613 33686 33774 34182 35320 35742 #> [39457] 36252 37122 37217 38777 39874 40823 40915 41707 41787 42611 43397 44409 #> [39469] 44796 44972 46766 47563 47683 47792 48310 48604 15100 15625 15778 16131 #> [39481] 17369 17710 19690 19942 20900 22357 24382 25856 26452 27683 27820 28521 #> [39493] 28772 29237 30136 30362 31757 33277 33445 33930 35910 36164 36701 37123 #> [39505] 37663 38173 38955 39875 40295 40824 41192 43039 43492 44206 44491 44700 #> [39517] 45185 47564 47996 48494 49202 49811 15461 16851 17491 17646 19018 19189 #> [39529] 19442 20270 20640 21502 21824 22227 22503 22994 23901 24532 24677 25363 #> [39541] 25632 25699 26309 26970 27114 27173 27891 28137 28522 28678 30622 31660 #> [39553] 33362 34602 35321 39131 40465 41454 41868 43135 43307 44312 49812 16425 #> [39565] 16852 17370 18632 18877 19505 20085 21379 21884 22641 23403 26453 26613 #> [39577] 27543 28679 28773 29073 30542 30623 30940 31850 33196 35082 35238 35578 #> [39589] 36339 37124 38600 40056 40556 41103 41869 44597 44890 45186 45285 45661 #> [39601] 46873 47793 47904 48311 48892 49203 14937 15906 16608 17906 17960 18207 #> [39613] 18567 18686 19076 20585 21825 23063 23404 24747 24824 25700 27248 27322 #> [39625] 27397 28854 29635 29854 29919 30941 32235 33614 34111 35017 36088 36428 #> [39637] 37912 38693 38869 39228 39497 39614 44112 44701 47463 48992 49204 15202 #> [39649] 15574 16004 16791 16969 17437 17599 17647 17711 17778 18278 18951 19943 #> [39661] 20346 20972 21380 21503 21758 22023 22642 22778 23064 23129 23465 24047 #> [39673] 24451 24533 24748 25857 26843 27048 27544 30450 30692 31097 32462 32713 #> [39685] 33107 33847 35652 37125 37664 37828 38247 38956 41010 41455 42327 42952 #> [39697] 43308 45739 46972 47565 48205 48702 49205 15101 15155 15203 15253 15779 #> [39709] 15952 16254 16908 17185 17600 18460 18687 19134 22088 22706 23271 23342 #> [39721] 23405 23604 23971 24973 25046 27049 27545 27978 28523 28774 29406 30854 #> [39733] 31582 32867 33029 34444 35239 35493 35653 36253 38174 39778 40214 40296 #> [39745] 42612 42703 43585 43867 44207 46874 46973 47997 48098 48993 15102 15356 #> [39757] 15723 16556 17297 18688 20271 20347 20407 22228 22504 22572 22921 23830 #> [39769] 23972 24236 24300 25127 26021 26100 29238 30213 30855 32789 34346 35322 #> [39781] 36955 37302 37750 39229 43674 43772 44702 45398 45740 47566 48495 48605 #> [39793] 15204 16070 17016 18751 19019 19190 20212 21632 22847 22922 25128 25440 #> [39805] 26241 26533 27821 28443 28524 31098 31256 31343 32541 34753 35149 35820 #> [39817] 36165 36340 36614 37048 37303 38429 38601 38957 41011 41274 41349 42043 #> [39829] 42230 42953 43136 44208 44797 47085 47362 47464 48312 48703 48893 49519 #> [39841] 16071 17492 17961 18086 18633 18752 20013 20086 21381 21564 22089 22505 #> [39853] 22707 22779 24177 24383 24749 24974 26101 28855 29074 29150 29920 30363 #> [39865] 30451 31510 33108 34003 34347 35992 36089 37218 39405 39703 41104 41193 #> [39877] 41959 42137 42231 43398 43586 46002 47794 48496 48606 49717 15462 16668 #> [39889] 17298 18148 18392 18821 22429 25047 25285 25509 25780 27398 27463 27613 #> [39901] 28138 29075 32301 32639 33197 33363 34603 35743 35911 38083 39615 40215 #> [39913] 40557 41275 41456 42138 43309 44492 45286 46875 47363 47567 48420 48704 #> [39925] 49099 49431 15626 16072 16500 16609 16792 16853 18689 19269 19443 19570 #> [39937] 20087 20159 20408 20836 20901 21504 22923 23406 23605 23674 25579 26022 #> [39949] 28444 30364 31099 31926 32868 33278 33446 37126 37485 37995 38175 39498 #> [39961] 41105 41194 42869 44113 45287 46876 48099 48313 48607 48894 49206 16610 #> [39973] 17186 17371 18568 19888 20160 20409 22090 23675 24237 24608 24750 25048 #> [39985] 26376 26766 27050 27822 28215 29005 29330 29921 31182 31430 33364 33524 #> [39997] 34837 35654 38870 41627 41870 42139 43949 47180 47568 48314 49312 15780 #> [40009] 16188 16370 17543 17907 22506 23065 23466 24107 24678 24905 25441 25781 #> [40021] 26909 27323 27464 28286 28445 28775 28930 29151 30214 30452 30693 31583 #> [40033] 31661 31927 33030 34004 34183 36429 38084 38339 40916 41106 41276 41708 #> [40045] 43310 43675 45066 46094 48100 48994 16732 17187 18022 20641 21105 21301 #> [40057] 21759 22091 22161 23205 23272 23676 24679 24906 26844 26910 27823 27892 #> [40069] 28525 29076 30765 32463 34514 36090 36520 36956 38248 38694 42044 45288 #> [40081] 45741 47261 48705 49813 16426 16669 17299 18208 19506 19571 21437 22358 #> [40093] 23343 24108 24609 25858 26310 27115 27249 27399 27684 27824 28139 29006 #> [40105] 30137 30286 30766 31257 31758 33279 33848 34348 34445 36957 37127 38085 #> [40117] 38510 38602 39132 39779 41107 42525 46290 46392 46767 46877 48206 48421 #> [40129] 15575 16189 16371 17123 17300 17648 17908 18149 18393 18513 19384 19944 #> [40141] 20348 20517 20642 20694 20766 21106 22643 23902 24452 24534 26102 28216 #> [40153] 28776 29007 29478 30138 32366 34272 34349 34679 34929 35579 35744 35821 #> [40165] 35993 40743 42232 42613 42870 44410 46291 46974 47262 16372 16670 16909 #> [40177] 17438 17493 18087 18394 19020 19320 20349 21302 22708 22780 22924 24109 #> [40189] 24384 24610 24825 25049 25129 25442 25782 26163 28287 28446 28526 29781 #> [40201] 30856 32367 32951 33365 33525 33615 35494 35994 37913 39041 39311 40825 #> [40213] 41871 41960 43587 45909 46292 47181 16793 16910 18878 19385 20272 20350 #> [40225] 20695 20973 22430 23467 23533 24048 24535 25214 25286 26164 26311 30215 #> [40237] 30857 31258 32952 33031 33931 34005 35495 36254 36430 36958 41549 42140 #> [40249] 43311 43588 45289 46975 47086 47263 47569 49313 49520 16005 17962 18461 #> [40261] 19386 19507 19759 21225 21303 21760 21885 22162 23831 24453 24680 25050 #> [40273] 25633 25783 26534 26695 28140 28931 29239 31183 32640 33932 34446 35018 #> [40285] 37219 37996 38176 38249 38695 39406 40297 40826 41709 44798 45067 45290 #> [40297] 45489 45910 47465 48207 48422 49432 16501 16911 17649 18690 19021 19814 #> [40309] 20014 20273 20767 21633 21687 22644 24611 24826 25859 27893 28932 29240 #> [40321] 30067 31431 32464 32641 33526 33933 34112 36255 36702 37128 37486 37665 #> [40333] 40298 42871 43229 43773 43868 44493 45068 46003 46585 48608 49620 15839 #> [40345] 16733 16912 17963 18023 23130 23468 23534 23753 24681 24975 25051 25287 #> [40357] 25860 26696 28288 28447 30767 31184 32160 33849 35150 35655 36521 36780 #> [40369] 37666 39312 39499 39961 40216 43493 43774 45662 46768 48101 17069 17843 #> [40381] 18209 18462 19022 20462 22573 24301 24454 25288 25784 26614 27051 27825 #> [40393] 29855 30694 32161 32714 34006 34754 34930 35151 35580 35995 36522 37129 #> [40405] 37559 38086 38603 40217 41350 42233 42419 43494 45399 45911 46293 48497 #> [40417] 49521 49621 16073 16255 17239 17439 17650 17844 17909 18463 18569 19270 #> [40429] 19321 19508 19945 21167 21304 21826 23066 23206 23677 24385 24536 25052 #> [40441] 25215 26377 26454 27174 28051 29152 31259 31344 31432 32368 36256 36703 #> [40453] 37751 38177 39962 40141 41961 42872 47684 47998 49314 49433 16074 17301 #> [40465] 17372 17440 17964 18024 20586 21305 22431 24049 24110 24827 25861 27744 #> [40477] 28289 28933 29077 29636 30000 31759 31998 33109 33934 34184 34350 35152 #> [40489] 35415 37220 37829 38250 38340 39230 40299 40466 41457 43869 16854 17373 #> [40501] 17494 17544 18395 18464 18691 19023 19946 21306 22229 23678 27116 30453 #> [40513] 32465 32542 33110 33447 33616 34185 35153 35323 35912 36091 36166 37752 #> [40525] 37997 38511 39313 39407 39500 39876 41012 42234 42704 43676 43775 44411 #> [40537] 44598 45824 46769 47264 47466 47570 48498 17374 17495 18150 18952 19077 #> [40549] 20351 21634 22163 22230 23067 23207 24111 24302 24976 25216 25701 27894 #> [40561] 28527 29568 30139 31100 31662 33032 35019 37221 38341 39963 40375 40467 #> [40573] 41277 42141 42797 42954 43677 43950 44021 44313 44973 45490 46878 47265 #> [40585] 47795 48102 16913 17375 17712 18088 18279 18822 18879 19572 20088 20463 #> [40597] 20518 20768 21037 22359 22432 22645 22925 23208 25289 25634 26911 27895 #> [40609] 29078 29407 30068 30454 31185 35240 35324 36431 36615 38178 38430 40218 #> [40621] 40376 41108 41195 41550 42798 43040 45187 47087 48995 49522 16734 17545 #> [40633] 18692 19573 20769 21107 21226 22507 22646 25443 26845 27465 27745 28363 #> [40645] 28448 29408 29922 31663 32715 32953 33198 33687 35083 36341 37130 37304 #> [40657] 39616 40651 43230 45069 45491 47266 47364 47571 48423 16308 16502 17188 #> [40669] 18210 18570 18880 19643 20837 23131 24751 25130 25364 25933 27117 27400 #> [40681] 29409 29479 30455 30695 31101 31760 32236 32302 32543 32716 32954 33033 #> [40693] 35241 35745 35822 36092 36342 37830 38778 39133 41013 42955 45188 47999 #> [40705] 49100 16671 16794 19078 20352 20696 22508 22647 22709 23273 23679 24977 #> [40717] 25934 26242 26455 27746 30456 30624 33366 35496 36093 37560 37667 38512 #> [40729] 40219 40377 40468 41458 43312 44974 45291 46879 47088 48103 48499 48609 #> [40741] 48799 49814 17376 17779 18634 18953 19191 20410 20902 21227 21688 22164 #> [40753] 22648 23274 23754 23832 24112 24455 24682 25131 25444 27118 28052 28290 #> [40765] 30069 30365 30543 30696 31433 31584 32162 32869 33527 34351 34515 35497 #> [40777] 36094 36959 37222 37561 38251 39231 39314 41962 42045 43399 44022 44314 #> [40789] 45912 47905 48000 48208 48500 49523 49622 17651 18089 18635 19024 20161 #> [40801] 20643 20838 22509 23535 23833 25217 25635 26971 27614 29241 30544 31186 #> [40813] 31434 32369 33199 33617 33775 34186 35154 35581 36095 37049 37305 38696 #> [40825] 40917 42705 43137 43495 45070 45400 46499 46586 46675 48209 48424 18090 #> [40837] 19815 19889 21307 21382 22649 22781 23344 23973 24050 26312 27175 27250 #> [40849] 27615 28528 30216 30697 31019 31585 31761 31851 32163 33528 33688 35746 #> [40861] 37131 37306 37668 39501 39617 40469 40918 41109 41963 42328 42420 43589 #> [40873] 44209 44494 45663 45825 47267 47365 48104 48315 48895 49315 49623 16611 #> [40885] 16672 18280 18753 18954 21505 22574 22710 24752 26456 26972 28610 29331 #> [40897] 29480 29700 30001 30625 31511 32164 34755 35498 35823 35996 36523 37998 #> [40909] 38252 40744 40919 41459 42421 42614 43678 44703 44799 45401 46976 47572 #> [40921] 48105 48706 48996 16914 17601 19444 19574 21506 22360 24238 26103 28529 #> [40933] 28680 29410 29637 29701 29856 30287 30366 30457 30545 31928 32370 32544 #> [40945] 33448 33776 34447 34680 34838 36524 36781 36960 37132 37307 38431 41110 #> [40957] 41551 41710 41872 42956 43590 43679 43870 44114 44599 45492 45579 46004 #> [40969] 47268 47906 48707 49207 49815 17302 17780 19445 19644 20213 20519 21383 #> [40981] 22024 23345 23606 24456 25580 26535 27324 28217 28449 29242 30140 30458 #> [40993] 31345 32717 33367 34448 34681 34931 35913 36167 36961 37050 37562 38253 #> [41005] 39232 39618 39780 40378 40652 40827 42706 42799 45402 45493 45580 46005 #> [41017] 46880 46977 47366 48425 48501 17441 17652 19025 19322 19691 19890 20089 #> [41029] 21384 21761 21886 22294 22361 23834 23974 24612 24828 25636 25702 26313 #> [41041] 26378 26615 27052 27325 27616 29153 31512 32466 33111 34756 36704 37395 #> [41053] 39877 40142 40653 41196 41278 41351 42046 42873 43138 43871 44800 45403 #> [41065] 45742 46006 46770 47467 17377 18091 18514 18754 19323 20697 22926 24113 #> [41077] 24178 24978 25053 25132 25703 26023 26457 28450 30070 30367 31513 31929 #> [41089] 33034 33529 36168 38087 41873 43680 44495 44704 46294 46393 46500 47367 #> [41101] 48502 48896 48997 49624 16915 17378 17653 18025 18340 19271 20090 20520 #> [41113] 21308 22995 24114 26314 26379 26767 27401 27826 28611 29008 29923 30217 #> [41125] 30459 30942 31260 31664 31762 31852 34273 34932 35416 35499 35582 35656 #> [41137] 36432 36782 37308 37563 37669 38432 40558 40828 44115 44210 44975 46295 #> [41149] 46978 47468 47685 48503 48610 48800 49101 17070 17910 18881 18955 23068 #> [41161] 24613 24753 25935 26380 27326 27617 29154 29782 30288 30626 32955 33112 #> [41173] 33280 34352 34516 35020 35997 36616 37670 39134 42526 42707 43400 43591 #> [41185] 44496 46296 47796 48426 49816 17124 18151 18211 18281 18882 19891 19947 #> [41197] 22362 22433 23536 23680 24979 25936 26381 26536 27466 27896 28777 29924 #> [41209] 30141 32083 32718 33035 33618 34113 35242 35657 35747 35824 36343 36871 #> [41221] 37133 37487 37831 38088 39619 41279 41460 44891 46394 47573 47907 48210 #> [41233] 48427 17845 20214 20839 21108 21689 22231 22711 23469 23537 23681 23903 #> [41245] 24051 24754 24980 25510 25862 26165 27546 28053 29009 29155 29569 30858 #> [41257] 31999 32642 33689 35748 36705 39135 39408 39620 39964 40379 41197 42047 #> [41269] 42874 43139 45292 45826 47089 48801 17189 17713 17781 17846 18212 19026 #> [41281] 19324 19446 20162 20464 20903 22782 23209 24386 25054 26616 27053 27467 #> [41293] 28612 29925 30368 30546 30768 31102 31514 32000 32719 32870 33935 34933 #> [41305] 35914 37396 38433 40470 40920 42235 42708 44023 47269 48316 48611 49434 #> [41317] 17442 17965 18026 21228 22927 23346 24052 24179 24457 24829 24981 25937 #> [41329] 26315 27327 28451 28613 29079 31665 31763 32237 32643 33281 33530 33619 #> [41341] 34449 36433 37223 37671 38342 39136 39233 39315 39878 43140 45494 45743 #> [41353] 47574 49625 17303 17782 18213 18636 18693 19692 21385 21690 23275 23470 #> [41365] 24387 25290 26104 28054 28452 29156 29481 31764 32084 32644 33531 34450 #> [41377] 35021 35915 35998 36169 36783 37488 38254 39137 40057 41788 43041 43681 #> [41389] 44315 44801 45744 46771 47368 17654 18755 19387 19575 20274 20587 22650 #> [41401] 23069 23347 23607 24537 24830 25133 26537 27119 28141 28218 28856 29570 #> [41413] 31765 33282 35084 35825 37832 38089 38871 39042 39879 43401 44211 45189 #> [41425] 45404 45581 45745 45827 46881 47090 47686 48001 48317 48708 49435 17602 #> [41437] 19027 19447 20904 21168 21309 21565 21762 22783 23348 23975 24115 24614 #> [41449] 24907 24982 25445 25637 26382 28453 28681 28857 30142 32165 33449 35243 #> [41461] 35999 37051 37564 39704 39781 40921 42329 42527 42615 42709 43776 44212 #> [41473] 45190 45495 45582 46772 47270 47908 48897 18152 18282 19816 20521 20698 #> [41485] 22434 23210 23276 25291 25511 27176 27251 28682 28858 29010 29157 29243 #> [41497] 29638 29926 30859 31020 33620 34187 34451 36096 36617 37397 37753 39138 #> [41509] 39502 40058 41014 41552 44116 44497 44976 47271 48709 49718 18883 19760 #> [41521] 20015 20588 21038 21229 21566 21691 22435 22784 23211 23277 23682 23904 #> [41533] 24538 25785 27979 28530 29639 30071 30943 31515 33450 35916 36000 37754 #> [41545] 37999 38179 38604 38872 40745 40922 41198 42422 42616 42875 44892 45405 #> [41557] 46007 47272 47687 47909 48106 48898 17847 17966 18283 19135 19192 20770 #> [41569] 20974 21039 21310 22575 24908 26105 27252 27547 27747 29571 29927 30460 #> [41581] 30627 33200 33283 33368 34007 35085 36434 36618 37398 38343 39503 41280 #> [41593] 42423 45496 46395 47575 48802 48899 49102 18092 19576 21887 22996 23132 #> [41605] 23755 23905 24116 24755 26383 26617 27253 28142 28291 28454 28531 29482 #> [41617] 29640 30461 30547 30628 31516 32720 32871 35658 36619 37309 37399 39880 #> [41629] 39965 40143 40380 43872 44893 46198 47576 48612 17714 18153 18823 18884 #> [41641] 19193 19577 19645 20016 20215 20644 21567 21950 22651 23538 23608 25292 #> [41653] 25786 26166 26538 28143 29783 30002 30289 30462 31103 31346 32001 32645 #> [41665] 33451 34188 34682 35086 35244 35500 37400 38180 38344 38958 39316 40144 #> [41677] 40471 42236 44213 46773 49626 18027 18637 18756 19272 19448 19761 20275 #> [41689] 21311 21386 21635 21827 24303 25055 25293 26167 26384 26458 31666 31766 #> [41701] 32790 33284 36435 37224 37401 40059 40381 40829 41352 43873 45071 48107 #> [41713] 49208 19194 19273 19449 19578 21507 21951 22363 22997 23349 23609 24683 #> [41725] 25294 25365 25581 25704 27685 32002 32238 32545 33036 33113 33452 34008 #> [41737] 34604 35749 36001 36257 37914 38255 39881 40923 41015 42617 44705 45072 #> [41749] 45293 46979 47182 49436 18515 19450 19509 19693 19948 20017 20091 20276 #> [41761] 21040 22576 22998 23278 23835 24831 25446 26973 27827 27897 28292 28455 #> [41773] 29784 29857 32467 32872 33285 33690 34114 34189 35087 36170 38181 40654 #> [41785] 40746 41281 42528 42957 43874 44977 45073 45406 45583 46396 46676 47183 #> [41797] 47273 47577 49524 17967 18341 19325 19451 19646 20645 20840 21230 21438 #> [41809] 21568 21636 22999 24053 24117 24180 24388 24458 25638 26316 27120 28293 #> [41821] 29244 29702 31667 32085 32873 33850 34517 34934 36706 37489 37915 38256 #> [41833] 38345 38779 39504 40559 40655 41461 41711 42958 43231 43313 43496 43682 #> [41845] 44978 46774 47578 48428 48803 49437 49525 18757 20975 23000 23976 24684 #> [41857] 24909 25056 25134 25447 26168 26768 27402 28055 28364 32239 33532 33851 #> [41869] 34274 34518 35155 36258 37052 38000 38873 39234 39621 39882 43683 44412 #> [41881] 45584 46199 46775 46882 47274 48002 48108 18638 18824 19647 19694 19949 #> [41893] 21763 21888 22785 22928 23070 23133 23906 24304 25218 26024 26317 27618 #> [41905] 27828 28294 28614 29483 30463 30860 32646 34009 34190 34275 34757 35022 #> [41917] 35325 35659 36344 36525 37053 37310 38001 38959 39043 39505 39705 40830 #> [41929] 42959 46501 46980 47910 48318 49719 18396 18639 18694 18758 19762 19892 #> [41941] 21637 21764 22364 22510 22652 22929 23001 23610 24305 24832 25448 25705 #> [41953] 27328 27468 27686 28056 28219 28532 30464 31021 31261 32791 33852 34519 #> [41965] 38960 39235 39506 40560 43684 45746 46008 46297 47184 47911 48109 48429 #> [41977] 48900 18695 18759 19028 20411 20976 21889 23836 24389 25057 25219 26169 #> [41989] 26912 30629 30698 31347 32003 33777 34758 36097 36707 38002 38605 39883 #> [42001] 41553 42048 42424 43592 44316 45585 45747 47185 47369 48613 18397 18516 #> [42013] 18571 19195 19950 21828 22930 23071 24390 24983 25220 25295 26769 27548 #> [42025] 27687 28220 29484 29928 30630 30944 31767 33114 35660 38434 38606 38697 #> [42037] 39236 41282 42049 42142 43777 44117 45074 46502 47688 19817 20018 20277 #> [42049] 20589 24239 24984 25706 25938 26697 26846 29245 29785 30769 32874 33453 #> [42061] 33533 34935 35156 35245 36872 37755 38607 39966 40060 40382 41016 41964 #> [42073] 42529 42800 42876 44600 45748 46009 47797 48614 20465 20522 22931 23539 #> [42085] 24756 25512 25939 26243 26318 27054 27688 28456 28683 29703 29858 30369 #> [42097] 31022 32371 34683 35326 36171 38961 41111 43875 44601 44894 45075 45497 #> [42109] 46298 46397 47186 47370 48615 19274 20019 20590 20646 20977 21387 22092 #> [42121] 23350 25221 27829 28457 29572 30218 30370 31668 32546 32875 34353 34520 #> [42133] 35023 35327 36436 37225 38182 39967 40061 41462 41554 43593 43951 44214 #> [42145] 44802 44979 45294 46010 47469 47912 48616 49438 20699 20905 21312 21508 #> [42157] 22025 22511 23002 23907 25366 25787 26244 27748 30003 31262 32240 33286 #> [42169] 34010 34354 35246 35417 35501 36962 37134 37565 37833 38435 39409 42050 #> [42181] 43141 43314 43594 44895 46011 48617 49439 49627 49817 18825 18885 18956 #> [42193] 19326 19510 20216 20978 23977 24181 24539 24833 24910 25296 25513 25788 #> [42205] 25940 27329 27469 27749 28533 28778 28859 29158 29246 29485 30290 31187 #> [42217] 31586 31853 32876 33115 33621 35088 36526 36708 37834 38608 43497 45407 #> [42229] 45498 45586 45828 46299 49628 18886 19763 20353 21439 21569 21765 21829 #> [42241] 24391 25222 26245 26385 26770 30072 30548 30861 31104 32004 32792 33622 #> [42253] 34355 35024 35750 36002 36345 42237 43876 44024 44980 45749 48998 49316 #> [42265] 49526 49629 19029 19695 21041 22093 23212 23471 25514 25582 26319 26459 #> [42277] 27403 31188 31669 31854 32086 33936 34011 34839 34936 35826 35917 36098 #> [42289] 37135 38780 38962 40383 40472 41628 43315 44981 49209 49720 20163 20278 #> [42301] 21313 21952 23003 23072 23351 23472 23540 24392 24459 25058 25515 25863 #> [42313] 26246 26771 28365 29080 29159 29486 29704 29859 31930 32166 32372 34759 #> [42325] 35661 36172 36259 37566 38781 38874 39782 41283 42801 43685 44602 45750 #> [42337] 48003 49103 49440 19951 20591 21830 23541 23837 24834 24985 25449 25789 #> [42349] 25941 27177 28366 28615 29247 29332 29786 31855 32303 32877 33116 34012 #> [42361] 34276 34937 35157 36003 36099 36527 36784 38609 38963 39507 39622 41284 #> [42373] 41629 41874 44706 45664 46981 47798 48618 49818 19136 19648 21570 21953 #> [42385] 22436 22512 24393 24757 24986 25059 25516 26106 26698 27898 30219 30631 #> [42397] 31435 31768 33691 35089 36004 37835 39706 40062 40300 42330 43402 43595 #> [42409] 45076 45829 47371 47799 47913 48004 48110 18887 19388 19952 20020 20523 #> [42421] 21954 22577 22932 23134 23407 24054 24540 25060 25583 25639 28934 29011 #> [42433] 31023 31189 31931 34452 35583 37136 39623 40924 41112 43403 45751 46095 #> [42445] 48901 19137 19196 19649 21890 22513 22712 23004 23279 23542 23756 24987 #> [42457] 25297 26460 27470 27619 27899 27980 30770 32167 32547 33117 34013 34191 #> [42469] 34760 35502 36100 36528 36620 39884 40473 41789 42960 43042 43877 44118 #> [42481] 44317 45191 47275 47689 19452 19511 19579 19818 20279 21042 21169 21231 #> [42493] 22094 23838 24911 25223 25942 26974 27689 28779 29333 29487 29573 29787 #> [42505] 31932 32468 34014 34192 35827 35918 36709 38875 39968 41353 42238 42425 #> [42517] 44119 47579 48005 48804 19275 19512 19696 20592 21109 21831 22026 22295 #> [42529] 22514 22848 23408 24541 24615 26975 27055 27471 27750 31105 31769 32878 #> [42541] 32956 34761 34938 35503 36101 37567 38257 40656 40747 40925 41463 41555 #> [42553] 43498 43686 43878 43952 44025 44120 44707 46300 46776 47580 48999 19764 #> [42565] 19893 20466 21043 21891 22095 22578 22713 23135 23908 23978 24306 24460 #> [42577] 24616 24912 25224 26699 27620 28057 28684 29248 30143 30371 30862 31106 #> [42589] 33454 33534 33778 34840 34939 35328 36102 37311 37402 38183 38513 39139 #> [42601] 42961 43499 44318 44982 45077 48319 48619 48710 49210 49317 19650 19819 #> [42613] 20593 20647 21232 22232 22365 23005 23352 24055 25135 25225 25707 26025 #> [42625] 26539 27121 27472 28685 29488 29641 30291 31107 31436 34684 37137 37756 #> [42637] 38698 41113 43043 43142 44026 46982 47091 48006 49819 19580 19765 20524 #> [42649] 20771 20906 21571 21692 22296 22849 23006 23280 24461 25061 25450 25943 #> [42661] 26170 26618 27178 28686 29929 30144 32879 34605 34940 35025 35418 38782 #> [42673] 40474 41114 44603 46883 47800 47914 48211 48320 48430 49721 20412 21233 #> [42685] 22366 22437 23353 23611 28534 29411 29930 32087 32168 32241 33369 33853 #> [42697] 34193 35584 36005 36346 36785 36963 37054 37312 37836 39140 39317 40831 #> [42709] 43687 44604 44708 45665 45830 46503 46983 49820 20525 21314 23543 25136 #> [42721] 25367 27330 28367 28616 30465 30771 30863 31348 32957 34453 34941 35026 #> [42733] 35329 35419 35585 36710 37568 38699 38964 39707 40301 40657 42618 43778 #> [42745] 46504 47092 48805 49000 49211 49318 49722 19453 19513 19581 19697 20092 #> [42757] 21110 21892 23007 23281 23409 24307 25298 27690 28935 29334 29931 30466 #> [42769] 30549 30864 32373 32548 32793 33692 34685 38346 38514 38610 38965 39141 #> [42781] 39969 41556 42239 42710 43316 43404 44027 46398 46984 49319 49527 20907 #> [42793] 21044 21315 21440 22165 23073 24462 25864 25944 29012 29788 31587 32169 #> [42805] 32469 34841 36873 37403 37916 38090 40832 40926 41115 41464 42426 45666 #> [42817] 47093 47801 48007 49104 49320 19820 20217 20772 21441 21509 21766 22714 #> [42829] 22850 24182 25062 26540 26976 27331 28687 28936 29081 30467 31263 31856 #> [42841] 32794 33535 36173 36964 37569 38876 39318 40475 42051 42240 43143 43688 #> [42853] 43779 44498 44803 45408 49321 20164 21316 22851 23544 24617 26461 27981 #> [42865] 28058 30073 30699 30945 31024 31108 31588 31770 32088 32170 33118 33536 #> [42877] 34842 35330 35420 36103 36529 37672 38515 39410 39508 39708 40063 41285 #> [42889] 43689 44413 44709 47372 49001 19894 20700 21234 21693 22027 22933 23136 #> [42901] 23410 23473 24463 25790 25945 26247 26462 26977 27179 27549 27830 28059 #> [42913] 28295 28860 28937 29082 29489 30550 30865 34606 36437 36965 37226 38347 #> [42925] 38436 39783 41017 41354 41557 41875 42427 42962 43044 43690 48806 49821 #> [42937] 20413 22852 23008 23683 23757 23979 24464 25299 25865 27751 29412 29932 #> [42949] 30551 31190 31771 31933 32304 32374 32549 33201 33537 34521 34686 35027 #> [42961] 35751 37227 40833 41018 41286 41790 41876 42052 45409 46096 46505 47187 #> [42973] 48111 48711 48807 49212 19821 19953 20280 21388 21638 21694 23411 23474 #> [42985] 24308 25226 26463 27332 27752 28368 28458 29013 29933 31025 32375 32550 #> [42997] 33037 33623 33854 34277 35028 36530 39237 39411 39970 41199 41287 42877 #> [43009] 43232 44710 45667 46012 21389 22367 22934 23475 24465 24618 24988 27691 #> [43021] 28296 28369 28780 28938 29083 29249 29335 30145 30552 31026 31670 32242 #> [43033] 32376 33455 37490 38437 39709 40064 41288 41465 43045 43144 43233 43596 #> [43045] 44121 44499 45078 45499 46677 46884 48808 49002 20093 20414 22166 23684 #> [43057] 25137 26026 26171 28688 28861 28939 29336 31349 31934 32551 33855 34015 #> [43069] 35090 36174 36438 37055 37228 37313 38783 39412 40927 41116 43046 43234 #> [43081] 43317 43500 43691 44215 45587 46777 48504 22028 22297 23213 23412 23612 #> [43093] 23758 24309 24685 25300 25368 26107 27180 28862 29084 32377 32880 32958 #> [43105] 33624 33693 34522 34762 35158 35586 37056 39971 40302 40384 41791 42619 #> [43117] 44804 45192 46097 46200 46399 46587 47581 48008 48505 49003 49528 20165 #> [43129] 20979 21639 22167 22233 22579 22935 23909 24466 25063 25517 25946 26541 #> [43141] 27056 27181 27550 27753 28060 28535 28689 28863 30700 33694 33937 34763 #> [43153] 36006 36175 37138 37314 38966 40065 41019 41117 41466 41965 42143 46400 #> [43165] 46588 48712 20701 21572 21832 22168 23214 23282 24056 24118 24835 24913 #> [43177] 25369 25640 25791 26772 26978 27404 27831 28370 30220 30772 31857 32552 #> [43189] 33779 34454 35247 37404 41289 41355 42878 43879 44983 20702 22368 22786 #> [43201] 22853 23685 24310 24394 25641 25866 25947 26027 27122 28371 29860 31437 #> [43213] 31772 31858 32647 33456 34455 34942 35029 36439 37837 39972 41356 41558 #> [43225] 43318 44122 44896 44984 46985 47690 49322 49441 20526 20908 21573 21640 #> [43237] 21833 22854 23476 23686 25370 25518 26386 26979 27473 30004 31191 31517 #> [43249] 32378 32648 33202 35248 35828 36260 36440 37570 39044 40748 40834 41118 #> [43261] 42144 45410 47582 49004 49442 49529 49822 20354 20594 20648 20980 21170 #> [43273] 21235 21442 23215 24542 25451 25708 26847 27474 28536 28690 28864 30146 #> [43285] 30553 31027 31935 32005 32553 32649 35752 37229 37315 37571 37673 37917 #> [43297] 38184 40145 41712 42053 43145 43597 46678 46986 47583 48620 48713 21574 #> [43309] 22169 22653 22715 24467 25709 25792 25948 26387 26464 26848 27057 27405 #> [43321] 28372 28781 29934 30147 30554 30866 32554 32795 34607 34943 36786 38091 #> [43333] 38877 39973 41559 44414 44605 45079 46885 48112 21045 22096 23687 25301 #> [43345] 26619 26700 26980 27333 27621 27832 28373 28537 29250 29413 31028 32379 #> [43357] 33038 34843 35249 35421 35919 36007 37139 37405 37838 39045 39319 39710 #> [43369] 40066 41200 41877 42145 42802 42963 43047 43598 44028 45500 46301 47373 #> [43381] 48113 48809 49723 20703 20773 22097 23216 23413 23910 25584 26108 26388 #> [43393] 26465 26981 27406 28940 29337 30468 31518 31589 32650 34687 35587 36711 #> [43405] 36874 37406 37572 37757 38003 38611 38700 39885 41357 42241 42331 42803 #> [43417] 43235 44319 44415 45411 45752 47584 49724 20981 21575 22515 25642 27475 #> [43429] 27754 28297 28865 30372 30701 32721 33039 33856 34608 35662 35920 38004 #> [43441] 38185 38258 39320 41290 42530 42711 45080 45668 46778 46886 48810 48902 #> [43453] 49213 21767 22654 22936 23283 23839 24619 24989 25949 29338 29642 29705 #> [43465] 30867 31671 31936 32959 33040 33370 33938 34523 34688 34844 35588 36347 #> [43477] 36621 38092 38967 39046 41560 41713 41792 41878 43048 44805 45081 46013 #> [43489] 46987 47094 48321 49005 20841 21510 21695 22655 22855 23009 23074 23354 #> [43501] 24183 25643 25867 28144 29339 29861 30702 31109 31264 32006 32171 32380 #> [43513] 33538 34194 34944 35159 35504 38005 38968 39238 40561 41358 41879 43405 #> [43525] 43880 44320 44711 45295 45501 46679 47276 48811 48903 20909 22787 23075 #> [43537] 23477 23980 24119 24240 24468 24914 25519 25585 27755 28691 29085 29706 #> [43549] 29862 31110 31590 32470 34016 34356 35663 37140 37918 38969 39239 39624 #> [43561] 39886 41291 41714 42146 42332 42712 43599 44029 46014 48904 49214 49725 #> [43573] 21171 21511 22029 22170 22298 22788 23217 24057 24543 26320 26466 26701 #> [43585] 27756 28692 30946 31350 31438 31672 32243 32471 33625 34278 35829 37057 #> [43597] 37919 38784 39413 41793 42620 43049 43953 44030 45669 47802 48009 48322 #> [43609] 21696 22030 22234 23613 24311 25793 26321 26773 26849 27622 28941 31673 #> [43621] 31773 33119 33287 33939 34195 35664 36176 37491 38612 41561 41630 42333 #> [43633] 42713 44031 44806 45753 49630 23414 24241 24312 24395 24758 25138 27757 #> [43645] 29086 30703 31265 31351 33857 34017 34689 35753 36008 36441 37573 38093 #> [43657] 39142 39625 40928 42714 43050 43501 43692 44416 45082 45193 45588 45670 #> [43669] 46302 46401 47277 48010 49006 49323 49631 21111 22716 23010 23218 23284 #> [43681] 23478 23759 24759 24836 25371 26982 27123 27254 27982 28538 28693 29490 #> [43693] 29574 29789 31774 31859 32305 32881 32960 35589 37674 38613 38701 39887 #> [43705] 41467 41631 41715 42334 42715 43319 45754 45913 47585 21893 21955 22516 #> [43717] 22937 23011 23688 24120 24184 24544 24915 25227 25372 25452 26028 26389 #> [43729] 26774 26983 27407 27551 28061 28617 30005 30704 30773 31352 31519 32651 #> [43741] 36177 36966 38516 38878 39143 39321 41292 41468 42054 42964 44985 46402 #> [43753] 47374 21317 21697 22098 22856 22938 23076 23219 23981 24990 26620 26984 #> [43765] 27552 28298 28782 30292 31674 32472 33203 33288 33858 34279 38006 38186 #> [43777] 38879 39414 41562 41880 42879 44712 44897 46201 47375 48114 48905 49215 #> [43789] 49443 21236 21576 22939 24313 24396 26029 26248 26467 27182 27255 27476 #> [43801] 27692 29251 30469 30868 31353 31775 32306 34115 34609 36622 36787 37839 #> [43813] 39626 41716 41794 42055 42335 42716 42804 44417 44807 45296 46098 46887 #> [43825] 47470 47586 47803 48621 48906 49105 21318 23012 23760 25302 27058 27477 #> [43837] 27693 27758 27983 28618 28866 31029 31591 31937 34116 34945 38438 38517 #> [43849] 40146 40749 41795 42056 42531 42621 42965 43502 46506 46888 46988 47471 #> [43861] 48714 49530 21768 21834 22438 23614 24121 24469 24686 24991 27124 28374 #> [43873] 28539 30774 33041 33539 34196 36261 36875 37316 39784 40835 41359 41881 #> [43885] 42532 42622 43320 44606 44898 46403 47691 48115 49324 49531 49726 22369 #> [43897] 24837 25303 25373 25520 26030 26109 26542 28867 29790 29863 30006 30869 #> [43909] 31354 31592 32007 33371 34690 35590 35921 38094 38880 40147 41020 42623 #> [43921] 43051 43693 45502 45671 47804 21641 21698 22517 22857 23840 24242 24620 #> [43933] 25374 25586 25710 26031 26322 26390 26985 28299 28375 29575 30148 30293 #> [43945] 30632 31030 31192 31266 32473 32722 34018 35422 35922 36178 36348 36712 #> [43957] 37141 37758 38614 39144 39627 39888 40750 42336 42717 43954 45672 46589 #> [43969] 49444 21699 22171 22235 25139 26468 26702 26850 27408 28062 29160 32381 #> [43981] 32474 33204 35160 35423 38615 39047 39240 39711 40658 41717 42718 43321 #> [43993] 43406 43503 44713 46404 46507 47095 47915 48212 48506 48622 49007 49325 #> [44005] 21835 22656 22717 23841 23982 25711 25950 26851 28459 28694 29014 29643 #> [44017] 30373 31267 34197 34524 35505 35665 36262 37492 39048 39509 39628 39785 #> [44029] 41469 41966 42337 43052 44032 45503 46508 48431 48623 49727 21894 22099 #> [44041] 22236 22370 23220 23545 23689 24243 24470 24687 24760 25587 26621 26986 #> [44053] 27833 27900 28376 29015 29161 29252 29707 30775 31268 31860 33120 34117 #> [44065] 34456 34845 35830 36104 36876 36967 38259 38518 38616 39145 45914 46099 #> [44077] 46509 47188 47278 47692 49823 22580 22718 22789 23546 24314 24688 25140 #> [44089] 25304 25453 25951 28145 28695 29414 29791 29864 30705 30947 31269 32244 #> [44101] 35161 35331 35591 35831 36531 36623 38007 38260 38785 39889 40476 41563 #> [44113] 42624 43146 46405 47189 49445 22581 23137 23221 23285 23479 23547 23911 #> [44125] 24185 25375 25454 25521 26323 26391 26469 27759 28300 28377 28942 29576 #> [44137] 29792 32723 32796 33121 33372 33540 34946 35030 35250 35332 35666 36877 #> [44149] 37317 38261 38617 38881 38970 40220 41360 41632 43236 43694 44123 44808 #> [44161] 45083 47587 48116 48323 49532 22100 22719 25305 25588 25794 26470 29162 #> [44173] 30294 30948 31776 32307 32652 32961 33541 35506 35592 37493 38262 39510 #> [44185] 39890 40929 41718 46100 46590 48324 49632 23415 23690 24838 24916 25141 #> [44197] 26987 28301 30149 32653 32797 33542 33626 33695 35162 35593 36442 36788 #> [44209] 37058 37407 38095 38519 39511 39629 40477 41361 41564 41882 42242 43780 #> [44221] 44033 45915 46015 47096 48117 48507 49216 22299 22518 24397 26249 26392 #> [44233] 26622 26852 27478 27984 28063 28302 28943 29016 30374 31520 31593 33122 #> [44245] 34457 34846 35333 36532 37059 37230 38008 39241 40303 41021 42147 43147 #> [44257] 43695 45084 45297 45412 46406 47097 23615 24992 25306 26324 27059 27553 #> [44269] 27623 28619 29017 29644 29935 30150 30221 31270 32008 32089 32555 33373 #> [44281] 34019 35424 36105 36349 39974 41362 43237 43504 44124 44321 44809 45589 #> [44293] 45916 46779 47098 47190 48508 49106 49533 49728 22237 22940 24186 24545 #> [44305] 24993 25064 25589 27183 27334 27479 27624 27901 28146 28696 29018 29163 #> [44317] 29253 29340 30151 31938 32090 32245 32654 32798 32882 33123 34118 34525 #> [44329] 34764 35425 36350 37231 38618 38786 39242 39512 41470 41967 42057 44714 #> [44341] 45755 47805 48715 48907 49008 49217 22439 22790 23077 25795 25868 26172 #> [44353] 26775 27060 28147 28303 30152 30375 31439 32724 33042 33205 37060 37840 #> [44365] 38971 39513 40304 41633 43600 43696 22519 22657 23286 24058 25952 26173 #> [44377] 27184 27760 30376 30470 33859 34198 35031 37494 38520 40836 42966 44715 #> [44389] 44986 45298 45756 45917 46202 48325 49009 23416 24315 25142 25376 25712 #> [44401] 27335 27480 28540 28697 29708 30555 30776 31111 31193 31861 32556 33696 #> [44413] 34280 34357 34847 35032 35426 35594 36263 36713 37318 38263 39049 40385 #> [44425] 41363 41883 42719 44500 45590 49729 23222 23480 25644 26471 26543 27902 #> [44437] 29793 29936 31194 32246 33206 33627 33860 34119 34765 36351 36714 38439 #> [44449] 38619 39415 40067 40562 41471 41884 43322 44607 46889 48118 49534 22582 #> [44461] 22941 23013 23691 23912 26472 26776 29865 30556 30706 32962 33780 33940 #> [44473] 34020 34199 35033 36106 36968 38264 38348 42720 42880 45194 46101 46203 #> [44485] 46890 47279 22583 23014 24316 24621 24761 26777 27694 27985 28304 28698 #> [44497] 29577 31355 32963 35091 36878 37920 40751 40930 41364 42058 42721 43505 #> [44509] 43601 43881 45757 48011 48716 49218 22791 26110 26325 26473 27061 27125 #> [44521] 27409 27554 28541 28620 29415 30153 30377 30777 31271 32247 34021 36009 #> [44533] 36264 36533 37495 37574 37675 38620 38882 39050 39891 40068 40563 43506 #> [44545] 44125 44322 44501 23287 25377 25645 25713 25796 25869 25953 26393 30949 #> [44557] 31356 32172 32655 32883 33207 33697 34120 34358 35163 35251 35334 35667 #> [44569] 36010 36179 36534 37921 38972 40221 40305 41565 42243 42805 43602 44502 #> [44581] 44987 45085 47099 47376 48119 49107 49535 49824 23223 23288 23548 23616 #> [44593] 25143 25228 25797 26703 27410 27625 27761 28148 28460 29164 29491 30557 #> [44605] 31112 31675 33861 35252 36535 38521 39786 39892 42059 45831 49108 49825 #> [44617] 23224 23417 23617 23983 24244 24762 26853 26988 27126 28064 28868 29087 #> [44629] 30471 30633 31272 31777 32173 33374 34691 34848 34947 35923 36107 36879 #> [44641] 37142 38621 38787 38973 39051 40306 40659 41293 41634 41885 42881 43148 #> [44653] 43697 43781 45086 45918 46016 46680 47693 48812 49010 25307 25522 26623 #> [44665] 26704 26778 27062 27185 28542 28699 29416 29578 30222 30295 31357 32009 #> [44677] 32091 32174 32308 34692 36265 36352 36715 36789 36880 37408 37496 37575 #> [44689] 37922 41201 41886 43407 45299 45673 47588 48326 48813 48908 23015 23618 #> [44701] 24917 25378 25455 25646 26394 26854 28149 28461 29165 29341 30154 30223 #> [44713] 31440 31939 32557 33289 34359 35092 35595 35754 37923 38009 38096 38522 #> [44725] 39514 39787 39893 40222 41635 42148 42882 44034 44126 45087 46780 46989 #> [44737] 48909 24471 26174 27186 27481 30472 30634 31031 32248 33543 34526 36180 #> [44749] 39630 39712 41119 41566 43323 43603 45088 47589 48213 48432 23225 23761 #> [44761] 23842 24763 25065 25144 25308 25379 26544 26913 28305 28783 29709 32558 #> [44773] 32725 33628 33862 33941 34458 34693 36443 37061 37759 38187 38440 38622 #> [44785] 38788 39146 39243 40069 40837 41120 42883 43238 44503 45089 45300 47472 #> [44797] 47694 48214 49326 49536 49633 26474 26989 27695 27762 30870 31594 32010 #> [44809] 33043 33457 34022 34360 35034 35335 35427 39975 40148 40478 40660 40838 #> [44821] 40931 42338 44127 45758 46017 46510 47473 47695 49109 49537 49634 23913 #> [44833] 24317 24472 24546 24622 25380 26032 26111 27127 28065 29019 29937 31778 #> [44845] 32382 32884 33124 33375 36969 37409 37497 37576 37924 42149 44504 44899 #> [44857] 44988 45504 45832 46303 46681 24187 25456 25647 26250 26545 27986 28221 #> [44869] 29417 30473 31779 32092 32475 32559 33290 34200 35507 35596 36353 36624 #> [44881] 38974 39147 39244 39515 40564 41121 41567 42533 42722 43053 43324 43408 #> [44893] 43955 44128 45833 46102 46204 46304 49110 49635 23549 24122 24473 25714 #> [44905] 26175 27256 27763 29710 30707 32885 34201 34361 34766 35924 36181 38010 #> [44917] 38097 38789 38975 39516 39976 40752 41365 41472 41568 42060 42339 43054 #> [44929] 45413 46205 46305 46407 49011 49538 49636 23619 23843 25066 25381 26779 #> [44941] 27903 28543 29020 29645 29866 31032 32249 33863 34202 35035 35508 37062 #> [44953] 37676 38441 38790 39148 39517 40223 40565 42340 42806 42884 43239 46306 #> [44965] 46990 47590 49327 24318 24994 25798 25870 27257 27764 28378 29492 31033 #> [44977] 31273 31358 32250 33544 33781 34121 35336 35755 36182 36790 37143 38098 #> [44989] 39322 39416 40307 40566 42244 42885 42967 43149 43782 45505 45919 46781 #> [45001] 47474 48215 24245 24547 24623 24689 25145 25309 25954 26251 29088 29711 #> [45013] 30950 33698 33864 34362 36625 36716 37232 38623 38883 39713 40070 40224 #> [45025] 40386 42061 42428 42968 43409 44418 45506 48624 49826 23844 24839 26705 #> [45037] 27128 27187 27626 27904 28621 28700 29089 29938 30155 30635 30778 30951 #> [45049] 31441 32175 32560 32656 32799 32886 33942 34023 34610 35253 36626 37410 #> [45061] 37760 38976 39323 39714 40071 40387 43325 44419 44505 44900 46307 46408 #> [45073] 47916 48012 49219 49730 49827 23845 25955 27555 27627 27696 28784 29166 #> [45085] 29254 34203 35164 35428 37233 37761 38099 39052 39631 40149 41022 41202 #> [45097] 43055 43783 44608 44989 45301 45920 46409 46782 47377 47591 48717 26326 #> [45109] 26855 27258 27765 28222 28701 29255 29342 29418 30007 30074 33044 33782 #> [45121] 34527 34849 35254 35832 36717 37144 37677 38523 38702 39245 39715 41569 #> [45133] 43604 44035 44716 46682 46783 48013 48625 24059 25590 25715 26112 28223 #> [45145] 28306 29167 30008 30075 30474 30708 33629 34459 34694 35093 35756 36444 #> [45157] 37841 39716 40308 41122 41796 44990 45507 47696 48814 49446 49731 24060 #> [45169] 24474 25146 25310 25716 27063 27987 28702 30952 31113 31195 32011 32726 #> [45181] 32800 32964 33125 33783 34611 35094 35509 36536 37411 37842 38977 39053 #> [45193] 41719 42625 43150 44991 47697 48014 48509 24246 25591 27188 28307 29419 #> [45205] 30009 30558 31034 31274 32657 33376 34024 34363 35510 35757 36791 38349 #> [45217] 39632 40388 41123 41203 42429 43410 45195 45508 45591 46103 46308 47280 #> [45229] 49447 24319 24548 25457 26780 28544 28785 29343 30296 30636 31676 32176 #> [45241] 32251 33377 33545 33943 34695 35597 35833 36266 39518 40567 40753 40839 #> [45253] 44810 45090 47378 48216 49220 26033 27482 27905 27988 28308 29794 30475 #> [45265] 30779 30871 31035 31862 32561 34281 36183 36792 37577 37843 38100 41124 #> [45277] 42430 44036 44323 45196 45592 45921 46104 46784 47475 49539 26475 27189 #> [45289] 27628 29867 29939 30780 31114 31677 32093 34122 34364 37678 37844 40389 #> [45301] 40568 40661 40840 41636 43605 44129 44506 45922 46410 47698 48015 48217 #> [45313] 48910 49012 24475 24840 25067 25382 25956 26034 27190 28150 29795 32383 #> [45325] 32476 33126 33378 35165 35511 36445 37145 37412 38791 39149 39633 41797 #> [45337] 42431 44609 46511 46785 47100 47476 48327 48510 24918 25383 25523 25957 #> [45349] 26990 27129 27697 28151 28379 32094 32727 33291 36354 38524 39977 40479 #> [45361] 42245 42534 46309 46512 47191 47477 49328 49732 24624 24690 24919 26035 #> [45373] 26176 26327 29090 29168 30872 33546 33699 35036 35337 36446 36627 36881 #> [45385] 38703 38792 39150 39717 40309 40390 40480 42432 42723 42969 44717 44992 #> [45397] 45302 46891 47101 47192 47478 48433 48911 49733 49828 24995 25147 25592 #> [45409] 25799 26706 26914 27766 28152 28224 28462 29021 30010 31036 33630 36011 #> [45421] 36718 37578 40072 40225 40662 43784 44718 45834 46591 46786 46892 49540 #> [45433] 25384 25648 25717 25958 26252 26328 26781 27191 27259 28153 28703 28869 #> [45445] 30873 32309 32562 32658 33045 35255 35338 35512 35925 36447 36628 38011 #> [45457] 38442 38525 40481 42150 42886 43151 45197 45923 46310 46787 47281 47806 #> [45469] 48718 25718 25800 25959 26624 27629 28225 28463 29091 29256 29344 30378 #> [45481] 31115 31595 31780 32384 33046 34204 34365 35037 36719 38526 39054 39634 #> [45493] 40150 40391 40754 40841 43507 45759 46105 46592 49221 25524 26177 26395 #> [45505] 26991 27260 27483 27767 28154 28786 30297 31196 32252 32801 33547 34366 #> [45517] 34612 34696 35758 37063 37413 39055 39246 40482 40569 42062 42341 42433 #> [45529] 42724 42887 42970 43326 45674 48434 49013 49111 49222 49637 25148 27064 #> [45541] 27906 29868 30156 30781 30874 31442 31940 32177 32802 33379 33865 34850 #> [45553] 35513 36537 36970 37579 38265 40073 40932 41637 42434 43327 44420 45198 #> [45565] 45509 46206 46683 49014 49329 24996 25458 26253 27989 28066 28944 30298 #> [45577] 30559 31443 31596 32563 34123 35038 35166 35598 36538 37762 37845 39247 #> [45589] 39519 40151 41638 42063 42535 42807 43882 44507 46513 49015 49541 49638 #> [45601] 25311 25593 26476 28787 29169 30782 32178 32477 33380 33944 35834 35926 #> [45613] 36539 38012 39718 40226 40392 41125 41798 42342 42725 44421 44719 44901 #> [45625] 45924 47193 48435 49112 25312 25385 26329 27065 28067 28380 28704 29796 #> [45637] 30637 30709 31941 32310 33458 33700 34205 34528 34697 35599 36184 37580 #> [45649] 40663 43956 44508 45675 47379 47479 47592 47699 25386 27066 27698 29345 #> [45661] 29420 30157 32095 34529 34613 35759 37763 38624 39417 39978 41473 41639 #> [45673] 42343 43056 46411 48016 48815 48912 49639 49734 25871 26254 26782 27411 #> [45685] 27768 31942 32728 34460 35167 36108 37925 38978 39418 39979 40570 41720 #> [45697] 42626 43240 43411 43883 45760 47380 48017 48436 48816 49330 49829 25525 #> [45709] 26255 28705 30710 31275 31781 33381 33631 33701 33784 34948 35039 35429 #> [45721] 36267 37064 37234 37581 39324 39788 40755 41204 41968 42726 43957 44216 #> [45733] 44422 44509 45091 46593 47282 49542 25387 27907 27990 29257 29493 30783 #> [45745] 31359 32012 32253 32478 32729 33702 35095 36185 36793 38188 39325 39520 #> [45757] 40310 41126 42064 43606 44130 44510 45092 46893 26707 27484 27556 28870 #> [45769] 30560 30638 31360 32179 32254 32564 32659 33548 33866 35096 35430 36012 #> [45781] 36629 37926 38013 38979 41294 41887 43152 43607 43698 44720 45093 47807 #> [45793] 47917 26178 26625 26992 27067 27557 28788 28871 29170 29579 30379 30711 #> [45805] 32255 32730 33047 34530 35097 35431 36971 38704 40393 42151 42246 43057 #> [45817] 43241 43328 44610 44902 45414 47918 49113 49735 27068 27834 27908 28226 #> [45829] 28309 28789 30875 31116 31197 31943 33127 33382 34124 35040 35668 36268 #> [45841] 36355 37498 38189 39635 42435 42627 43242 43884 44423 47381 47700 47919 #> [45853] 48817 26036 26113 26477 27558 27835 28622 29869 29940 30561 31276 32096 #> [45865] 34025 34125 34282 35514 39056 39521 40152 40571 40842 41366 42436 42628 #> [45877] 44903 45094 45199 45925 46311 46594 47593 48018 48437 49640 49736 27261 #> [45889] 27412 28706 29494 30380 30953 31277 31361 31597 32311 34767 38014 38443 #> [45901] 39057 40664 41474 42065 44511 45593 46991 47808 48328 48438 48719 49830 #> [45913] 25960 27413 27559 28155 28707 29171 30476 31598 32013 33048 33292 35168 #> [45925] 35339 39894 39980 40153 40483 41023 42971 43243 43958 45095 45200 45926 #> [45937] 47809 48329 49331 49737 26783 27130 27262 27909 28945 29346 30381 30562 #> [45949] 31198 31678 31863 32803 33549 34026 34206 34283 34614 35340 36013 37414 #> [45961] 37499 37582 39058 39326 42066 42629 43699 44037 44217 44811 45761 47920 #> [45973] 48019 48218 49332 26546 26626 26784 27131 27263 28310 29092 29258 30299 #> [45985] 31864 32014 32180 32256 32965 33632 36356 36882 37065 38015 38266 39636 #> [45997] 40665 40756 43244 47480 48330 49831 30784 32181 32385 33208 34531 34768 #> [46009] 36794 37415 38190 38884 42630 42727 43508 44131 45201 45303 45927 46412 #> [46021] 48331 49738 26396 27069 27485 27836 27910 28156 29022 29347 29580 30639 #> [46033] 33785 34207 34851 35169 35669 36448 36540 36795 37764 38101 38267 39151 #> [46045] 39719 44611 45835 46595 49543 49739 26397 26627 26785 28068 28227 29348 #> [46057] 31037 31362 31521 31679 32182 32386 34027 34698 34769 35760 36357 36449 #> [46069] 38527 39637 40394 41367 45202 45928 46106 46992 48219 48332 49016 26915 #> [46081] 27070 27192 29023 30563 30876 31444 31782 32257 33209 33633 35341 36109 #> [46093] 37319 37679 39152 39789 40666 40843 40933 41205 41570 42344 42728 43412 #> [46105] 43785 44612 45510 46107 46788 47701 47810 48020 49448 27486 27837 27911 #> [46117] 29421 29797 29941 30954 33293 34532 35342 35432 36630 38016 40074 40484 #> [46129] 40844 41295 41721 43700 46108 46514 47102 47481 49333 26478 27912 30785 #> [46141] 31680 32731 32887 33550 33945 34028 34699 37146 37846 40395 40572 41571 #> [46153] 41888 42152 42972 43959 44512 47702 48021 48220 49832 28381 30011 33128 #> [46165] 34700 34852 35343 35670 36269 37147 38268 39638 40311 41024 41368 42067 #> [46177] 42888 43786 44613 44721 45836 46413 47482 49017 49544 27132 27336 28946 #> [46189] 29024 29495 31363 31599 32258 33551 33786 34701 35600 38191 38444 40312 #> [46201] 41969 42345 42889 43701 44513 45096 46993 47811 48333 48626 49018 49223 #> [46213] 26628 27560 28545 28623 28947 29025 29093 29349 30477 31522 32097 32966 #> [46225] 34461 34533 35927 37066 37500 37583 37680 37765 38793 40573 40934 42346 #> [46237] 42729 44324 44614 46109 46207 46414 46789 47382 48120 48439 49641 26856 #> [46249] 27133 27414 28382 29646 30224 30877 31865 32565 33210 34208 34615 35671 #> [46261] 36270 38350 38885 39981 40313 42247 42347 43702 43885 47812 48022 48511 #> [46273] 49019 49334 26786 26993 27699 28157 28948 29942 32888 33459 34462 34616 #> [46285] 35928 36271 36972 37584 38269 38625 38794 39720 39790 40485 42248 42808 #> [46297] 43058 43329 44424 45203 46018 46208 46684 27264 28228 28464 29712 30012 #> [46309] 30564 31117 31199 32098 33634 33867 33946 35601 35835 37320 37681 38705 #> [46321] 41296 42348 43787 43960 44425 44812 47813 48720 49740 26994 27913 28229 #> [46333] 28872 29259 30013 31783 34284 34853 38102 39639 41297 41889 42349 43788 #> [46345] 45097 45929 46415 46994 47383 47594 48023 49335 49449 49545 27265 27700 #> [46357] 28311 28708 31866 33552 34367 34534 34770 35344 36796 37148 37235 40075 #> [46369] 41127 41572 41970 42437 44325 45304 45837 46995 47384 47921 48221 48721 #> [46381] 49114 49336 27071 27134 28465 28949 32259 32387 33553 34854 36541 36631 #> [46393] 38103 38528 38980 39059 39419 39721 41475 42973 43509 44993 45415 46019 #> [46405] 46790 47283 48627 49115 49833 27266 28312 28873 29350 29870 30158 30878 #> [46417] 31278 31445 33049 33211 33460 34126 34949 35515 38270 38445 38795 38981 #> [46429] 39420 40154 41722 42068 42730 45098 45204 45930 46996 47595 48222 48334 #> [46441] 49020 49642 27267 28158 30478 30879 30955 32312 32566 33787 35672 38796 #> [46453] 40935 41723 42438 44132 45838 46894 49021 49450 27337 28546 28624 28950 #> [46465] 29094 29496 31364 32660 33129 34368 35170 35516 35929 36014 36110 37501 #> [46477] 37766 38706 39060 40076 43153 43245 43608 43961 44514 44615 45099 45305 #> [46489] 47922 48512 49116 29871 30382 31681 32099 33050 33212 34029 34285 35433 #> [46501] 35517 37149 37321 37502 38104 38982 39153 40845 40936 41724 41799 42731 #> [46513] 42809 47703 49117 30479 30956 31038 33130 34369 34535 35345 35930 36186 #> [46525] 36272 36720 36883 37322 38351 39061 40486 44326 45416 45511 46416 46515 #> [46537] 47103 48024 48513 48628 49118 29095 29172 30383 32388 35673 36187 37067 #> [46549] 37847 37927 38352 38626 38886 39421 39522 40155 40846 40937 41369 41725 #> [46561] 42732 42974 43609 44218 46417 47385 48121 30014 30225 30300 32479 33868 #> [46573] 35171 35931 36188 37848 37928 38017 41370 44616 45205 46110 47104 48514 #> [46585] 49224 27914 28383 29647 30159 30301 30480 33703 34030 34370 34617 35674 #> [46597] 36450 36632 37323 38627 39062 39791 41476 43703 44904 46596 46895 47704 #> [46609] 47814 49225 49451 49741 28313 29096 29497 32967 33461 34031 35256 36358 #> [46621] 38707 39063 39327 39722 39792 40396 47105 47596 48223 49022 29351 30712 #> [46633] 32100 34702 35172 35434 36111 36633 37150 37416 37767 38192 40314 40574 #> [46645] 44327 45100 46312 46685 48025 48818 49119 28790 29260 30640 30713 31279 #> [46657] 31446 32015 32480 33131 33294 33462 33788 34536 35098 36634 37417 37503 #> [46669] 38353 38628 38887 39154 40487 40938 41477 41800 43789 46418 46516 46597 #> [46681] 27915 27991 28069 28230 28384 29173 29498 29648 29798 29943 30076 30957 #> [46693] 31600 31944 32389 32481 32567 33213 35836 36015 36273 36451 36542 36973 #> [46705] 37768 38708 38888 39064 39328 39422 40757 41890 41971 42249 42890 44617 #> [46717] 47106 48913 49023 27992 28070 30880 31945 32101 33295 35602 36721 37324 #> [46729] 38529 39523 39640 40315 42631 42975 43154 43886 44515 44618 46517 46997 #> [46741] 47107 47483 48122 49834 28231 28709 29026 31365 33296 33789 33947 35518 #> [46753] 35837 36543 36884 36974 38709 38797 40077 41371 41801 42250 42632 43059 #> [46765] 43246 44133 44994 48123 48335 48440 28232 28385 29422 30302 31200 32313 #> [46777] 34032 34286 35041 35257 36274 36797 37068 37325 37769 39329 40078 41025 #> [46789] 42153 44905 45594 46209 46313 46686 47194 48026 48441 48722 29027 30015 #> [46801] 30565 32183 32732 32889 34287 34771 35346 35435 36112 36452 36885 38710 #> [46813] 39423 40156 40758 41372 41972 44813 46518 48515 48629 28710 29261 29649 #> [46825] 31784 33132 33869 33948 34537 35603 37682 38798 39641 39982 40227 41478 #> [46837] 41802 41891 42633 43060 43247 45306 45417 45839 47386 48516 48819 48914 #> [46849] 28625 29174 29352 30481 31039 31280 31682 32733 34538 35436 36113 36275 #> [46861] 36975 37236 38018 39524 39723 42069 42536 42733 43155 45931 48820 49452 #> [46873] 28547 28791 29097 29713 32390 32804 33214 34539 35604 42154 42634 42734 #> [46885] 44722 45676 47108 48224 49835 29714 29944 30714 30881 31040 32734 33635 #> [46897] 34703 36722 36798 37069 38193 38799 38889 39155 39642 42439 42537 42735 #> [46909] 44219 44516 45101 46111 46210 46687 48915 30958 31041 31366 31523 32968 #> [46921] 33215 34704 35519 35605 39065 39248 40157 43510 43704 44220 47815 47923 #> [46933] 48442 28874 30077 31118 31447 32016 32102 33133 35606 36016 38271 38800 #> [46945] 38983 40667 41026 43156 44723 45677 46112 46519 47924 29799 30016 30715 #> [46957] 32969 33870 34371 35173 35437 35675 37237 38446 38530 38629 39525 40847 #> [46969] 42891 43157 43511 44134 44995 46211 47705 29581 29800 30482 30786 31119 #> [46981] 35099 35258 35838 36544 37326 38447 39526 39793 41298 42976 45512 46314 #> [46993] 46520 48124 48821 29028 29098 30641 30787 31367 32391 33297 35174 35607 #> [47005] 35839 38272 39527 39983 41206 41892 41973 42070 46212 46419 47195 47484 #> [47017] 49546 31281 31368 32661 33134 33554 34463 37418 38531 38801 39156 39724 #> [47029] 40158 42440 45102 46420 47597 48225 49836 29175 30017 31369 31683 32184 #> [47041] 32260 32314 32890 35100 35259 35932 36723 37151 37327 38354 39330 39528 #> [47053] 40848 41479 43248 44135 44221 44996 45840 47196 47598 48916 49742 30959 #> [47065] 31684 32185 33383 34033 34950 35175 35438 36359 37238 37328 37929 38019 #> [47077] 38105 39725 40575 40668 44997 45103 48517 48917 29262 29650 29872 30882 #> [47089] 31448 33790 34127 34855 34951 35101 36360 36545 37419 38106 40488 40576 #> [47101] 40759 41027 41373 42441 42810 43705 44517 45841 47109 47387 48918 49743 #> [47113] 30303 30642 30883 31946 33871 34288 34772 35608 35761 36361 36635 37504 #> [47125] 39424 39529 41128 41640 41893 42071 43158 43413 43610 44222 44518 44619 #> [47137] 46113 46315 46688 48226 49744 29499 29715 30304 32482 35762 36636 36724 #> [47149] 36799 37239 38890 39331 39530 39794 40489 40849 41028 41207 42155 42538 #> [47161] 42635 43330 44519 45104 46020 46689 29500 29801 30226 31449 32392 33949 #> [47173] 34209 34372 34618 35260 36453 36637 36800 38448 41641 41726 42072 43331 #> [47185] 43887 44520 44724 48125 48336 49120 29651 31685 32186 33704 34856 35520 #> [47197] 36546 37849 37930 39332 39895 40850 42251 43888 44814 46896 47284 47485 #> [47209] 48443 48723 49024 49837 30078 30384 30960 32970 34464 35933 37683 38020 #> [47221] 38355 38891 41129 42073 42350 42442 45206 46791 46897 47285 48027 49337 #> [47233] 49838 30385 31370 32393 32483 32662 34034 34857 35676 35840 36114 37329 #> [47245] 39249 39984 40316 41573 42443 43414 47110 47599 48630 48822 48919 49121 #> [47257] 30305 32805 33463 33791 36362 36638 36801 37420 37585 37931 40939 46316 #> [47269] 47286 49226 29873 30306 31601 31785 32017 32568 32971 33135 33464 33636 #> [47281] 33950 34210 35841 38194 39985 40317 43611 44815 48823 49338 29945 30386 #> [47293] 30483 30566 31042 31282 33465 34289 36017 36189 37240 37850 38356 39531 #> [47305] 40760 41374 41642 42351 42444 44223 45678 46421 46598 46898 47600 47706 #> [47317] 48518 49025 30387 31120 31201 31686 32187 32394 32569 34465 35521 35677 #> [47329] 36454 36886 36976 37241 38892 39157 39986 40397 40577 42352 42977 43415 #> [47341] 43889 44620 45418 47197 47486 47816 48126 30227 32663 33705 35934 37770 #> [47353] 37851 40159 40578 40761 41480 41803 42074 42252 42736 43790 44621 45207 #> [47365] 47601 48724 48824 30484 31524 31947 32735 33637 35042 35935 36977 37771 #> [47377] 38893 38984 42892 44224 46599 47287 48920 49122 32972 33951 36802 37152 #> [47389] 37421 38195 38273 38357 38532 39795 40228 40851 41574 43249 43512 45307 #> [47401] 45513 45932 46792 48725 30307 30716 31202 31948 32261 32315 32484 33216 #> [47413] 33555 33952 34466 34540 36115 37070 38449 39066 39333 39643 41804 42811 #> [47425] 43612 43706 43962 45208 45308 46600 47198 48227 48337 49227 30388 31687 #> [47437] 32570 32973 34035 34467 34541 34858 35522 36018 36803 38450 39158 39250 #> [47449] 40852 41894 42075 43707 43791 44038 44328 44906 45105 46422 47487 48825 #> [47461] 32316 32485 33051 33217 33556 36547 36639 37932 38196 38533 38894 39644 #> [47473] 41029 41895 45842 46423 47199 47602 48519 48726 49026 30788 31043 32103 #> [47485] 33052 33136 33466 33557 34211 35176 37586 37772 38802 40160 43061 44907 #> [47497] 46601 47111 47488 31283 32018 32664 33953 34373 34542 36190 36548 37684 #> [47509] 38021 38274 40318 40669 43159 44426 45419 46521 46899 48228 31121 32806 #> [47521] 33053 33558 34543 35177 35842 36363 37587 38985 39645 40940 42539 43250 #> [47533] 44998 45106 46424 48727 48826 49839 30884 32571 33218 34036 35043 36725 #> [47545] 37422 39532 39896 40579 41030 41643 41727 42445 42540 44725 44999 45309 #> [47557] 45679 45933 46522 46690 31525 33298 34037 36640 37071 37773 38275 38803 #> [47569] 39334 39533 39796 40398 41481 41974 42541 43160 43792 44726 45934 46317 #> [47581] 46602 47288 48728 30961 31786 32974 33299 33872 34374 35178 35678 36116 #> [47593] 36549 38895 39534 39797 40229 40853 41644 41975 42156 43708 45209 46998 #> [47605] 47289 47817 48444 31203 31602 31787 32736 34038 34705 36455 37774 38711 #> [47617] 38896 39159 39251 41575 42636 45210 45514 45843 48127 48338 48520 31204 #> [47629] 33219 33792 34773 35523 35609 36117 37685 37933 38276 38712 39535 39646 #> [47641] 40670 41208 41645 41976 42737 43416 43793 45000 45310 45515 46603 46691 #> [47653] 49339 49745 32665 33054 33220 33300 34952 35179 39160 40399 41728 44225 #> [47665] 44816 45107 47200 49027 31371 31867 32019 32572 32975 34859 34953 35261 #> [47677] 36550 36887 37934 38534 39726 39798 40079 40319 40490 41031 41576 42738 #> [47689] 44622 45108 45762 46318 46692 47290 31603 34039 34619 34860 35102 35439 #> [47701] 36191 36978 38022 38197 39335 40230 41299 41805 41896 42076 42157 42893 #> [47713] 43890 44521 45935 46213 47291 47603 48827 31949 32976 33055 33301 34128 #> [47725] 34375 34620 34954 35180 36118 36641 37686 39536 39727 41897 42894 43161 #> [47737] 44039 44136 45109 45311 45844 46021 46425 46523 47388 48828 31788 32807 #> [47749] 33384 34955 38023 38358 38986 39067 39537 41032 42077 42158 45001 47389 #> [47761] 47489 33137 35181 36364 36888 37330 37687 38535 40320 40854 41577 42895 #> [47773] 43613 44329 45110 45595 46114 48631 49228 32262 35524 35679 35763 36726 #> [47785] 36979 37242 37331 37775 39425 39538 39799 40080 40491 42353 44040 44522 #> [47797] 48921 49643 49840 32666 33954 34774 36642 38630 40161 42978 43332 43891 #> [47809] 45002 45111 45936 46693 47818 48128 49746 32104 32317 32573 33638 33706 #> [47821] 34212 34775 37153 38451 40762 41130 41375 41977 42979 43251 43417 44623 #> [47833] 45763 45845 47925 48028 32395 34290 34861 35262 36804 37588 39252 40231 #> [47845] 41482 42253 42637 43162 43794 44330 44727 46900 32396 33056 33955 34129 #> [47857] 36980 37423 38804 40232 41729 42159 42354 42446 42542 43709 45764 46604 #> [47869] 46694 49028 49644 33385 33467 34956 35263 35347 36889 37243 37776 39068 #> [47881] 39800 45312 46214 46999 48129 33707 34544 37244 37424 37688 38107 39987 #> [47893] 40400 40941 41730 41898 42896 43614 43892 43963 44624 44817 44908 45420 #> [47905] 46524 47926 49229 49340 49645 32263 33138 33468 34957 35680 36119 37072 #> [47917] 38359 38452 39069 40942 41300 42160 44909 45680 46525 46695 47819 48229 #> [47929] 48922 49123 32318 33302 33639 33708 33956 35103 35681 35764 38277 38536 #> [47941] 39336 39801 40321 40580 41899 42161 42543 43418 43513 43795 44523 46901 #> [47953] 47000 34040 35843 35936 36192 36456 36727 38108 39337 39988 41376 41978 #> [47965] 42254 43514 44137 44226 48829 33469 37505 37589 38713 39426 39539 40671 #> [47977] 40763 42447 42544 42897 43252 44331 44427 44728 44818 45211 46022 47201 #> [47989] 49547 33057 33709 34213 34776 35844 36890 38360 39338 41209 42545 42739 #> [48001] 44524 45846 45937 46526 46902 47390 33873 34777 34862 36551 36728 40233 #> [48013] 40672 41578 42078 42546 43419 45681 46023 47707 32808 33470 34863 35264 #> [48025] 35937 37506 37689 38109 41483 41731 42255 44041 44138 46024 46319 46903 #> [48037] 47112 47202 32891 33710 35104 35682 41377 43333 44227 44332 45003 46320 #> [48049] 46605 47113 48923 33058 34291 34778 35610 37332 37852 39161 39427 39647 #> [48061] 40492 43515 43710 45938 46426 46696 47490 48230 49029 49341 49841 34376 #> [48073] 34958 35348 35845 35938 37777 38110 38714 38805 39253 39897 40322 41033 #> [48085] 41484 43334 46115 47001 47927 49646 49747 33221 33303 33874 33957 34041 #> [48097] 35846 36019 36193 38024 39428 39989 40581 42638 44139 46793 48729 48830 #> [48109] 49548 33559 36365 36552 37333 38111 38453 39339 39648 40401 40943 43615 #> [48121] 46025 47604 49030 33471 36553 38025 38537 39990 40162 40673 42355 42547 #> [48133] 42740 43163 43711 45516 46427 47292 49549 34468 35182 35265 35765 36457 #> [48145] 39991 41131 41210 41301 41979 42980 43335 43616 45421 46116 47002 47820 #> [48157] 47928 49124 34545 36643 36805 38715 39898 39992 41646 41732 41806 42548 #> [48169] 44428 44525 44625 45313 46321 46428 47114 47708 49748 34621 36366 36981 #> [48181] 37154 37507 37935 38112 38278 38361 38897 41485 42898 43164 43253 43516 #> [48193] 43617 44729 45596 46606 46697 47709 33560 34042 34779 35440 37245 37425 #> [48205] 37590 37778 37853 38898 40081 41211 41900 43254 43796 44526 45517 46904 #> [48217] 47003 47115 47491 49031 49749 34130 34864 36644 38198 39254 39340 40674 #> [48229] 40855 43062 43336 43420 43893 44042 44228 46607 47004 48521 48924 49032 #> [48241] 36458 36806 38279 38806 40082 41807 42356 43165 44527 46026 48522 49647 #> [48253] 35183 35847 37246 37690 38026 38199 39429 40402 41378 42256 42812 42981 #> [48265] 43166 43517 44626 44819 46527 47929 48925 49230 33958 34622 35184 36194 #> [48277] 37936 39728 41579 41733 42162 43518 43797 43964 44043 46322 46698 47821 #> [48289] 48632 49125 34131 34959 35611 35683 36982 37426 38113 38538 38987 39802 #> [48301] 39899 39993 40764 43519 44627 45112 45212 46794 47203 47492 47710 48633 #> [48313] 49453 36459 39540 40675 41580 42079 42549 43255 44229 44333 45518 45597 #> [48325] 46117 46323 46608 46795 49454 49750 35766 35848 36020 36120 36276 36367 #> [48337] 37591 38716 40676 41212 41901 41980 42357 42982 45113 45314 45682 46118 #> [48349] 46215 46324 46609 47293 47493 48634 34623 36277 36368 36554 38280 38807 #> [48361] 39341 39994 40493 42257 42983 44334 45683 46610 46796 47204 47605 47822 #> [48373] 48130 35349 35849 39430 40163 41302 42639 42813 45847 46027 34546 39342 #> [48385] 39431 39995 40164 40944 42358 42640 44429 44628 45519 47606 34780 35350 #> [48397] 36729 37247 38362 38539 38717 39255 39729 39803 42258 43520 43798 44430 #> [48409] 46797 47005 47391 47494 47823 48131 49550 34781 35767 35850 37073 37427 #> [48421] 37592 39070 39730 40083 40234 42259 42641 43256 43521 45213 48029 48132 #> [48433] 49033 49342 34960 35441 36555 37334 37937 38631 39162 40084 43167 43799 #> [48445] 44528 45004 45214 46119 47116 47824 48231 48339 49126 36556 37854 38718 #> [48457] 38808 40235 41132 41213 41486 41647 42260 42741 45848 49648 35525 36891 #> [48469] 41487 42742 42984 43063 44529 45598 45849 46611 48232 49343 35266 36195 #> [48481] 37593 38027 38114 38200 40494 40765 40945 41034 42985 45599 45939 47825 #> [48493] 48030 48635 48730 35442 37779 38281 40236 40323 40403 41581 41648 42986 #> [48505] 44431 45114 45520 46798 46905 47117 47205 48523 49344 35267 37248 37428 #> [48517] 38719 41488 42642 44044 46699 47607 48233 48831 49231 49455 49842 35185 #> [48529] 35526 36369 38028 38201 39163 40324 40404 41035 41489 42643 43522 44530 #> [48541] 45684 46325 47006 47294 49551 49751 35527 35684 36021 36121 37335 38029 #> [48553] 40085 40165 40405 40856 41379 42359 42987 43523 43712 44140 44531 44730 #> [48565] 46700 46799 47007 47495 47826 48340 49752 36022 36807 36983 37594 37938 #> [48577] 38030 38115 38202 39343 41582 41734 42644 43618 45422 45765 45850 47930 #> [48589] 48731 49345 37074 37508 38632 40582 43524 44629 44820 45005 46028 46120 #> [48601] 47118 48234 49232 36196 36557 36892 37429 38031 40166 41583 41808 42645 #> [48613] 44045 44141 44910 45766 46800 47608 47827 47931 36023 36984 37336 38203 #> [48625] 38282 40325 40766 41214 41584 41902 44335 44821 44911 45115 46801 47119 #> [48637] 47392 47711 48524 48636 49649 36278 37249 37430 37939 38363 39432 40086 #> [48649] 40326 40946 42080 42360 42899 44046 44230 44532 45940 46906 48031 48525 #> [48661] 49233 49346 49650 36024 36197 37337 37509 38116 38364 40167 40677 41735 #> [48673] 42163 42261 43337 43965 44047 45006 45315 46701 47120 48235 49552 35939 #> [48685] 36279 36370 36460 37940 38540 38720 38809 39541 39649 40406 41981 45600 #> [48697] 47121 47206 47828 48637 48732 48832 35851 36461 37855 41585 41736 43064 #> [48709] 43168 43619 43894 45215 46528 47496 48032 49127 38117 38283 38633 38721 #> [48721] 39433 40087 41903 42164 42448 42550 43257 44533 48733 36808 38365 38541 #> [48733] 41133 41215 42814 45116 45423 45941 46326 47497 47712 49753 36198 36462 #> [48745] 37155 37856 37941 38634 38988 39164 41586 41982 42361 43800 44336 44731 #> [48757] 45851 46529 46612 47295 47932 48526 36280 38542 38899 39434 41649 43620 #> [48769] 45424 46121 46530 36893 39542 40583 40947 41380 41490 41737 44337 48527 #> [48781] 49347 49456 39344 40767 41491 41809 42815 44432 44732 45685 46613 46702 #> [48793] 47207 47393 48033 48833 49034 36730 37156 37595 38204 38454 39804 42165 #> [48805] 42816 42900 44733 45007 46531 48734 48834 37942 38118 39650 40168 41810 #> [48817] 42743 43065 43525 43621 44338 45601 46122 46614 47609 49035 49457 49651 #> [48829] 37157 37338 37596 39071 40088 41216 42166 44142 45216 46327 46615 46703 #> [48841] 48835 49553 36985 38284 39543 40495 40584 40768 41036 42551 42817 43421 #> [48853] 44048 44734 45217 45316 46029 46532 49128 49652 49754 36809 38455 38635 #> [48865] 39805 42744 48445 49843 37943 39345 40089 40857 41037 42988 43801 43895 #> [48877] 44339 45008 45117 45218 46030 46533 46616 47610 48341 49458 37944 39900 #> [48889] 40948 42552 43802 44049 45942 46429 47008 47122 49348 49459 38285 41134 #> [48901] 41492 42081 42449 43526 43713 45852 46123 46430 46704 48034 48133 49129 #> [48913] 49755 49844 37250 38456 39072 39544 39651 39996 40858 41738 42646 42745 #> [48925] 43714 44630 45118 45219 47296 47498 48035 38366 38543 38722 39346 39731 #> [48937] 39806 41038 41983 44340 45317 46907 47611 48638 37339 41135 41303 41381 #> [48949] 41904 43169 43527 45119 45318 45602 45686 46908 47394 47713 48236 48639 #> [48961] 38457 38723 38810 39545 40769 41136 43528 43715 43803 44631 44912 45425 #> [48973] 48237 37597 37945 40237 40407 41382 42450 42901 44534 45319 46705 46802 #> [48985] 37780 38458 40408 41905 42902 43804 44050 44822 45120 46431 47395 47714 #> [48997] 38032 38900 38989 40678 43066 43338 44231 45320 46216 47612 48036 48528 #> [49009] 48926 38811 40238 40585 41493 41811 41906 42362 45220 45853 47499 49234 #> [49021] 49554 38286 38544 39165 41039 45521 45767 47009 47396 48134 41217 41383 #> [49033] 43258 43896 44632 45768 46124 46706 46803 47829 48037 48529 39901 40409 #> [49045] 40770 41040 41384 42903 46534 48038 38459 39902 40949 41385 43529 44051 #> [49057] 44143 46217 39073 39807 41386 43530 44433 45121 47397 47613 47830 48735 #> [49069] 38460 38545 38812 39347 39903 40327 40410 40679 41650 44232 44735 45603 #> [49081] 45687 45854 45943 47500 48039 48342 38813 40328 41907 42262 43339 44535 #> [49093] 44633 44823 44913 46031 46125 47933 48135 48530 49349 49555 38636 40090 #> [49105] 42647 43622 43716 44052 44536 45522 47715 49556 49653 39166 41908 42082 #> [49117] 42553 43067 43340 43422 43717 43966 44341 44736 45321 45688 46126 46432 #> [49129] 48040 48343 48836 49130 39904 42554 44434 45122 45604 45855 46804 38724 #> [49141] 39074 40496 41304 43068 43423 44144 45123 47010 47398 48736 49557 49654 #> [49153] 40950 41305 41651 42167 43170 43805 44145 47501 48531 48640 41812 41909 #> [49165] 42904 43424 46032 46433 46617 48041 49655 39652 40859 41041 43341 43425 #> [49177] 45944 46707 49656 39075 39905 41218 41494 41739 41813 42168 42555 42818 #> [49189] 44233 44737 44824 46535 46805 47123 48136 48344 39256 39906 41910 42363 #> [49201] 43718 44146 47124 47831 48345 48737 49756 40169 40680 41306 42746 42905 #> [49213] 43069 43171 44634 44738 44914 45426 45769 45856 47011 47297 48346 48446 #> [49225] 48837 49235 49845 41219 41911 42819 43719 44635 45322 48927 49131 40239 #> [49237] 41387 42556 43259 43426 43806 44537 44915 45770 47716 48042 39907 41042 #> [49249] 41220 41814 42364 42747 42906 43531 45124 45523 46536 47399 48928 40091 #> [49261] 40329 40586 40951 41815 43260 44739 45857 47614 49236 41137 41495 41740 #> [49273] 45524 46806 41984 42820 43070 43897 44053 45125 45323 47012 47208 47298 #> [49285] 47615 47832 48641 49460 40092 40952 41043 41652 42263 42907 43172 43427 #> [49297] 44740 45009 45605 46909 47616 47717 49657 49846 40771 41985 42365 44825 #> [49309] 45427 45858 46910 47400 47502 49350 42169 43173 44538 44826 45126 45606 #> [49321] 45771 46033 46127 46708 48137 48347 48532 41044 41653 41741 42083 43342 #> [49333] 44147 44435 44827 45428 46034 47401 47503 48138 48929 49036 49237 40860 #> [49345] 41816 42170 42557 43343 46035 46911 48838 49558 49757 40411 41742 42366 #> [49357] 44636 46618 47125 47617 49238 49847 40681 41138 42558 43174 44234 45525 #> [49369] 45772 46036 48139 48930 41045 42908 43720 43967 44539 46218 46537 47504 #> [49381] 48533 40587 40953 42367 44916 45010 45221 45324 45859 47013 48534 48839 #> [49393] 41587 41912 42171 42451 44342 45222 47126 47718 48238 49559 49758 40861 #> [49405] 40954 41588 44235 44343 44917 47934 48738 49239 41046 41139 42368 42821 #> [49417] 42909 47299 48840 43344 44344 45325 48043 48447 49351 41589 41654 45223 #> [49429] 45945 46037 46538 47127 48044 49848 41655 41913 42084 45127 45429 46038 #> [49441] 47209 47935 48348 48642 49461 49658 41496 42172 43623 43968 44345 47618 #> [49453] 48239 48448 48535 41497 46039 46328 46912 49352 42648 42910 43721 43969 #> [49465] 45773 45946 47300 48931 41498 42173 42452 43722 43970 45011 45689 45947 #> [49477] 46709 47301 48240 49353 43261 43532 45774 47302 48449 48536 42264 43071 #> [49489] 45526 46434 48140 49849 41914 42265 44540 44637 44741 46435 46619 46807 #> [49501] 47210 47505 47719 47833 48141 48349 49850 41817 41986 46913 47014 48350 #> [49513] 48932 49354 49851 42453 42911 44236 46219 46329 47720 49355 42085 43898 #> [49525] 46040 46914 47402 48351 49462 42989 43175 43345 43533 44541 44828 45527 #> [49537] 45860 46620 49356 44237 45326 46808 47015 49560 43899 44742 45224 45327 #> [49549] 45607 47721 48739 49037 49357 42454 43807 44436 44542 48740 48933 43428 #> [49561] 44148 45430 47834 49240 49358 43429 46809 47128 47619 47722 48045 48352 #> [49573] 48450 48934 49038 44743 45012 47016 48353 49463 43346 44054 45013 45690 #> [49585] 46330 47129 48643 43534 46220 47017 47303 49039 44829 45128 46539 47723 #> [49597] 48537 48741 44830 44918 45431 46810 47936 48451 43072 43624 44238 45691 #> [49609] 45948 46710 48142 48742 48935 49561 49852 43808 44346 44638 45775 45861 #> [49621] 46811 49759 43809 43971 44744 46128 48452 43625 44239 44543 46221 46331 #> [49633] 46711 48143 45129 45432 46222 49241 46129 46223 47506 47937 48354 49659 #> [49645] 44919 45862 47507 47620 48241 48841 49040 43810 45130 45776 47018 48644 #> [49657] 49132 45528 45692 45777 46224 46540 46712 48144 48242 49041 49464 43900 #> [49669] 44240 44437 46915 47019 48453 49133 44544 45131 46812 48936 49465 44149 #> [49681] 45433 45863 46916 48145 48243 45529 48454 49660 45225 44438 45778 46436 #> [49693] 46813 47835 48645 45434 47130 47211 47724 48146 48743 49134 45014 46130 #> [49705] 46332 46437 47836 44831 45530 46541 49466 45779 47304 48046 48646 49242 #> [49717] 49661 45226 46041 46131 46225 48538 45693 46333 48539 45227 45328 46334 #> [49729] 46621 47938 48147 49135 45780 46335 47305 47837 49042 45329 46226 47939 #> [49741] 49243 45608 47621 47725 47940 49359 45781 46042 46438 46917 47020 47838 #> [49753] 48047 48937 45864 45949 46043 46542 48148 48355 48455 45782 46227 49467 #> [49765] 49853 46814 45783 46918 47622 48356 46132 47623 49043 47212 49468 46044 #> [49777] 47306 49360 46228 46336 46919 49361 47131 47213 47726 47839 49044 49244 #> [49789] 49760 46920 49469 47624 47727 47840 48842 49761 47307 48048 48540 48843 #> [49801] 49562 49762 46921 47021 47308 48049 48149 49045 49362 49854 47132 47022 #> [49813] 47508 48844 49363 49563 49662 47023 47841 48647 48845 49046 49470 47728 #> [49825] 48150 48938 49855 48050 49245 49564 47941 48846 48051 49856 49565 48357 #> [49837] 49246 47942 48244 49857 48744 49858 48245 48456 49663 49859 48358 48648 #> [49849] 49136 49860 48649 49364 49861 48847 48939 49247 49365 49664 49566 49248 #> [49861] 49366 49763 49862 #>  #> [[7]] #>    [1]     0     0     0     0     1     1     2     2     2     3     4     4 #>   [13]     4     5     6     9    10    10    12    13    15    17    18    21 #>   [25]    25    30    34    38    42    47    50    52    55    59    62    69 #>   [37]    73    76    77    84    88    94    98   105   109   113   115   118 #>   [49]   127   133   139   142   143   151   162   167   169   174   184   189 #>   [61]   195   200   205   207   217   221   228   238   248   256   262   267 #>   [73]   273   280   292   298   304   318   322   327   333   338   344   358 #>   [85]   367   382   387   394   401   406   412   421   428   435   443   451 #>   [97]   456   461   474   490   497   512   519   530   538   551   562   572 #>  [109]   581   594   608   615   623   635   645   657   673   692   704   720 #>  [121]   730   739   749   757   768   782   797   807   820   829   843   860 #>  [133]   870   883   899   917   932   941   957   972   987  1002  1008  1027 #>  [145]  1042  1055  1074  1090  1107  1126  1140  1153  1170  1181  1197  1212 #>  [157]  1225  1246  1256  1272  1287  1300  1309  1327  1342  1349  1363  1379 #>  [169]  1397  1415  1428  1449  1464  1477  1498  1517  1537  1556  1578  1599 #>  [181]  1613  1631  1644  1658  1671  1683  1703  1724  1740  1758  1777  1794 #>  [193]  1814  1837  1852  1868  1893  1920  1938  1963  1982  2002  2023  2041 #>  [205]  2066  2085  2102  2123  2143  2164  2186  2212  2236  2251  2276  2300 #>  [217]  2321  2338  2354  2379  2404  2427  2450  2474  2502  2524  2545  2574 #>  [229]  2591  2612  2637  2661  2682  2713  2735  2765  2793  2809  2836  2859 #>  [241]  2875  2903  2928  2947  2970  2987  3015  3043  3062  3084  3107  3130 #>  [253]  3149  3186  3218  3241  3266  3288  3319  3340  3367  3389  3409  3429 #>  [265]  3455  3482  3511  3536  3566  3595  3623  3652  3676  3699  3726  3753 #>  [277]  3789  3808  3835  3858  3886  3907  3933  3963  3988  4022  4053  4085 #>  [289]  4111  4141  4173  4195  4222  4251  4281  4301  4334  4366  4394  4424 #>  [301]  4449  4484  4523  4558  4588  4620  4655  4685  4704  4736  4765  4801 #>  [313]  4826  4856  4879  4907  4943  4965  4990  5018  5057  5092  5118  5141 #>  [325]  5175  5202  5230  5265  5302  5343  5377  5412  5438  5472  5499  5530 #>  [337]  5558  5590  5614  5654  5688  5716  5752  5786  5821  5859  5890  5925 #>  [349]  5951  5990  6024  6064  6100  6134  6166  6209  6239  6272  6310  6342 #>  [361]  6379  6417  6446  6478  6515  6556  6591  6631  6675  6708  6744  6783 #>  [373]  6816  6856  6897  6931  6957  6984  7032  7062  7103  7131  7164  7197 #>  [385]  7243  7287  7328  7367  7421  7465  7512  7551  7588  7625  7666  7698 #>  [397]  7739  7772  7813  7848  7889  7928  7969  8008  8044  8077  8109  8149 #>  [409]  8179  8234  8284  8324  8360  8400  8444  8487  8535  8571  8616  8659 #>  [421]  8688  8721  8760  8792  8828  8870  8909  8949  8984  9027  9063  9105 #>  [433]  9146  9189  9234  9276  9324  9373  9423  9477  9513  9561  9607  9647 #>  [445]  9695  9734  9784  9822  9869  9919  9964 10011 10058 10112 10161 10208 #>  [457] 10264 10312 10357 10406 10445 10502 10545 10594 10642 10675 10720 10756 #>  [469] 10799 10839 10874 10920 10966 11017 11060 11101 11135 11183 11237 11287 #>  [481] 11335 11393 11434 11483 11522 11564 11617 11658 11704 11763 11816 11864 #>  [493] 11905 11955 12000 12050 12109 12156 12207 12260 12307 12349 12408 12443 #>  [505] 12493 12543 12598 12642 12721 12773 12832 12883 12934 12977 13027 13086 #>  [517] 13140 13193 13242 13288 13332 13381 13433 13500 13555 13612 13657 13710 #>  [529] 13770 13821 13871 13918 13961 14019 14070 14127 14187 14246 14290 14346 #>  [541] 14396 14451 14513 14568 14617 14664 14714 14781 14833 14875 14938 14989 #>  [553] 15043 15103 15156 15205 15254 15303 15357 15410 15463 15518 15576 15627 #>  [565] 15679 15724 15781 15840 15907 15953 16006 16075 16132 16190 16256 16309 #>  [577] 16373 16427 16503 16557 16612 16673 16735 16795 16855 16916 16970 17017 #>  [589] 17071 17125 17190 17240 17304 17379 17443 17496 17546 17603 17655 17715 #>  [601] 17783 17848 17911 17968 18028 18093 18154 18214 18284 18342 18398 18465 #>  [613] 18517 18572 18640 18696 18760 18826 18888 18957 19030 19079 19138 19197 #>  [625] 19276 19327 19389 19454 19514 19582 19651 19698 19766 19822 19895 19954 #>  [637] 20021 20094 20166 20218 20281 20355 20415 20467 20527 20595 20649 20704 #>  [649] 20774 20842 20910 20982 21046 21112 21172 21237 21319 21390 21443 21512 #>  [661] 21577 21642 21700 21769 21836 21895 21956 22031 22101 22172 22238 22300 #>  [673] 22371 22440 22520 22584 22658 22720 22792 22858 22942 23016 23078 23138 #>  [685] 23226 23289 23355 23418 23481 23550 23620 23692 23762 23846 23914 23984 #>  [697] 24061 24123 24188 24247 24320 24398 24476 24549 24625 24691 24764 24841 #>  [709] 24920 24997 25068 25149 25229 25313 25388 25459 25526 25594 25649 25719 #>  [721] 25801 25872 25961 26037 26114 26179 26256 26330 26398 26479 26547 26629 #>  [733] 26708 26787 26857 26916 26995 27072 27135 27193 27268 27338 27415 27487 #>  [745] 27561 27630 27701 27769 27838 27916 27993 28071 28159 28233 28314 28386 #>  [757] 28466 28548 28626 28711 28792 28875 28951 29029 29099 29176 29263 29353 #>  [769] 29423 29501 29582 29652 29716 29802 29874 29946 30018 30079 30160 30228 #>  [781] 30308 30389 30485 30567 30643 30717 30789 30885 30962 31044 31122 31205 #>  [793] 31284 31372 31450 31526 31604 31688 31789 31868 31950 32020 32105 32188 #>  [805] 32264 32319 32397 32486 32574 32667 32737 32809 32892 32977 33059 33139 #>  [817] 33222 33304 33386 33472 33561 33640 33711 33793 33875 33959 34043 34132 #>  [829] 34214 34292 34377 34469 34547 34624 34706 34782 34865 34961 35044 35105 #>  [841] 35186 35268 35351 35443 35528 35612 35685 35768 35852 35940 36025 36122 #>  [853] 36199 36281 36371 36463 36558 36645 36731 36810 36894 36986 37075 37158 #>  [865] 37251 37340 37431 37510 37598 37691 37781 37857 37946 38033 38119 38205 #>  [877] 38287 38367 38461 38546 38637 38725 38814 38901 38990 39076 39167 39257 #>  [889] 39348 39435 39546 39653 39732 39808 39908 39997 40093 40170 40240 40330 #>  [901] 40412 40497 40588 40682 40772 40862 40955 41047 41140 41221 41307 41388 #>  [913] 41499 41590 41656 41743 41818 41915 41987 42086 42174 42266 42369 42455 #>  [925] 42559 42649 42748 42822 42912 42990 43073 43176 43262 43347 43430 43535 #>  [937] 43626 43723 43811 43901 43972 44055 44150 44241 44347 44439 44545 44639 #>  [949] 44745 44832 44920 45015 45132 45228 45330 45435 45531 45609 45694 45784 #>  [961] 45865 45950 46045 46133 46229 46337 46439 46543 46622 46713 46815 46922 #>  [973] 47024 47133 47214 47309 47403 47509 47625 47729 47842 47943 48052 48151 #>  [985] 48246 48359 48457 48541 48650 48745 48848 48940 49047 49137 49249 49367 #>  [997] 49471 49567 49665 49764 49863 #>  #> [[8]] #>    [1]     0   101   211   304   412   510   601   702   801   912  1001  1112 #>   [13]  1227  1322  1407  1498  1605  1690  1803  1887  1997  2113  2210  2285 #>   [25]  2407  2493  2590  2685  2779  2869  2968  3061  3153  3248  3343  3420 #>   [37]  3516  3618  3716  3813  3921  4005  4106  4202  4290  4382  4479  4567 #>   [49]  4670  4781  4863  4960  5046  5149  5249  5348  5444  5525  5609  5695 #>   [61]  5798  5888  5984  6093  6194  6288  6383  6483  6581  6668  6768  6853 #>   [73]  6950  7051  7143  7235  7322  7404  7495  7570  7676  7756  7840  7925 #>   [85]  8005  8093  8176  8272  8358  8450  8557  8647  8745  8829  8912  9004 #>   [97]  9086  9175  9250  9346  9433  9508  9594  9686  9769  9859  9938 10025 #>  [109] 10115 10217 10307 10388 10467 10543 10625 10708 10789 10882 10973 11065 #>  [121] 11144 11247 11332 11438 11546 11630 11738 11805 11891 11971 12070 12172 #>  [133] 12259 12339 12423 12506 12586 12662 12749 12829 12929 13017 13120 13211 #>  [145] 13285 13368 13448 13547 13628 13712 13800 13886 13957 14065 14155 14242 #>  [157] 14316 14393 14489 14569 14657 14737 14816 14903 14970 15053 15120 15213 #>  [169] 15309 15393 15480 15559 15644 15719 15800 15875 15964 16039 16104 16184 #>  [181] 16270 16365 16438 16519 16596 16668 16753 16841 16917 16991 17064 17150 #>  [193] 17242 17314 17403 17488 17572 17652 17740 17823 17901 17982 18062 18148 #>  [205] 18215 18304 18394 18474 18556 18639 18706 18778 18843 18928 19001 19093 #>  [217] 19176 19268 19334 19410 19487 19556 19637 19719 19786 19855 19937 20022 #>  [229] 20106 20190 20255 20336 20392 20472 20561 20651 20725 20807 20886 20975 #>  [241] 21046 21121 21204 21275 21358 21431 21497 21574 21667 21732 21818 21880 #>  [253] 21950 22031 22104 22167 22240 22319 22394 22465 22549 22628 22707 22781 #>  [265] 22855 22938 23001 23070 23147 23216 23299 23365 23442 23533 23616 23693 #>  [277] 23754 23818 23891 23964 24041 24111 24175 24243 24322 24398 24465 24532 #>  [289] 24593 24649 24725 24793 24871 24939 25011 25081 25154 25212 25279 25354 #>  [301] 25423 25495 25581 25642 25715 25763 25833 25905 25985 26046 26118 26189 #>  [313] 26256 26331 26389 26454 26529 26591 26657 26727 26788 26863 26927 26989 #>  [325] 27063 27148 27220 27272 27337 27391 27476 27547 27606 27663 27730 27799 #>  [337] 27858 27927 27988 28056 28119 28189 28278 28319 28386 28451 28518 28583 #>  [349] 28649 28717 28798 28861 28917 28969 29038 29106 29164 29231 29293 29343 #>  [361] 29405 29471 29523 29588 29653 29732 29789 29841 29880 29946 29996 30060 #>  [373] 30138 30207 30263 30333 30389 30451 30505 30572 30631 30687 30754 30822 #>  [385] 30887 30946 31007 31074 31136 31192 31255 31320 31381 31460 31519 31585 #>  [397] 31648 31712 31778 31836 31894 31964 32016 32074 32133 32183 32238 32299 #>  [409] 32346 32410 32487 32537 32602 32655 32709 32771 32826 32879 32936 32996 #>  [421] 33040 33105 33157 33225 33280 33336 33378 33444 33502 33567 33632 33688 #>  [433] 33728 33782 33855 33905 33956 34021 34081 34140 34198 34250 34316 34386 #>  [445] 34442 34498 34544 34599 34661 34710 34758 34823 34870 34917 34987 35042 #>  [457] 35104 35155 35209 35263 35313 35350 35405 35454 35511 35548 35593 35657 #>  [469] 35700 35752 35805 35849 35887 35941 35992 36028 36079 36134 36188 36252 #>  [481] 36309 36351 36396 36441 36496 36534 36585 36635 36688 36727 36777 36835 #>  [493] 36882 36936 36979 37033 37081 37144 37194 37253 37298 37348 37422 37463 #>  [505] 37515 37574 37628 37678 37728 37782 37838 37875 37924 37973 38025 38082 #>  [517] 38133 38183 38240 38283 38330 38385 38439 38486 38525 38571 38602 38648 #>  [529] 38693 38739 38777 38810 38858 38899 38934 38982 39041 39084 39147 39193 #>  [541] 39235 39288 39329 39370 39415 39476 39522 39563 39606 39647 39703 39754 #>  [553] 39792 39840 39886 39926 39971 40007 40050 40084 40128 40173 40218 40257 #>  [565] 40302 40343 40378 40418 40462 40498 40543 40586 40630 40665 40705 40742 #>  [577] 40795 40835 40883 40923 40973 41021 41068 41104 41155 41189 41233 41274 #>  [589] 41316 41354 41393 41435 41479 41518 41562 41599 41636 41681 41713 41752 #>  [601] 41799 41851 41887 41934 41977 42010 42045 42080 42113 42152 42189 42233 #>  [613] 42266 42298 42339 42380 42415 42445 42484 42520 42563 42610 42645 42682 #>  [625] 42716 42751 42791 42821 42857 42893 42936 42976 43012 43052 43087 43127 #>  [637] 43166 43197 43232 43267 43307 43340 43383 43423 43453 43492 43533 43572 #>  [649] 43608 43637 43675 43713 43753 43789 43830 43862 43895 43925 43969 44004 #>  [661] 44038 44081 44117 44165 44191 44227 44262 44300 44346 44370 44395 44430 #>  [673] 44459 44486 44514 44547 44588 44616 44661 44698 44737 44758 44801 44831 #>  [685] 44861 44900 44935 44967 45002 45033 45077 45107 45139 45167 45199 45229 #>  [697] 45257 45286 45314 45344 45368 45405 45432 45469 45501 45538 45569 45600 #>  [709] 45628 45656 45680 45707 45738 45764 45793 45824 45853 45887 45912 45940 #>  [721] 45975 46002 46022 46050 46079 46113 46137 46161 46185 46212 46247 46274 #>  [733] 46303 46329 46354 46382 46409 46442 46460 46491 46515 46541 46567 46585 #>  [745] 46612 46630 46651 46680 46719 46744 46770 46798 46821 46848 46872 46889 #>  [757] 46915 46933 46953 46975 46995 47017 47035 47063 47084 47112 47141 47166 #>  [769] 47190 47212 47233 47256 47270 47290 47318 47347 47367 47384 47404 47434 #>  [781] 47460 47481 47499 47518 47538 47560 47583 47607 47627 47654 47668 47694 #>  [793] 47719 47746 47761 47779 47799 47815 47836 47852 47871 47885 47909 47930 #>  [805] 47953 47969 47989 48006 48020 48038 48051 48071 48091 48109 48123 48139 #>  [817] 48158 48177 48198 48221 48240 48252 48272 48290 48313 48330 48354 48373 #>  [829] 48382 48394 48415 48434 48453 48466 48478 48495 48513 48527 48546 48571 #>  [841] 48590 48603 48620 48641 48663 48683 48702 48716 48729 48742 48762 48771 #>  [853] 48782 48797 48811 48828 48842 48861 48868 48886 48898 48914 48931 48944 #>  [865] 48960 48973 48984 48996 49009 49021 49030 49042 49050 49058 49068 49086 #>  [877] 49102 49113 49132 49139 49152 49162 49171 49179 49196 49207 49227 49235 #>  [889] 49246 49259 49269 49274 49288 49304 49314 49327 49343 49353 49362 49372 #>  [901] 49381 49392 49403 49412 49419 49425 49434 49446 49455 49460 49468 49480 #>  [913] 49486 49492 49507 49515 49522 49529 49539 49544 49553 49559 49565 49575 #>  [925] 49580 49587 49592 49598 49604 49615 49622 49627 49634 49638 49644 49651 #>  [937] 49657 49667 49674 49679 49685 49688 49689 49695 49702 49707 49711 49717 #>  [949] 49722 49725 49732 49737 49741 49746 49754 49761 49765 49766 49770 49773 #>  [961] 49775 49778 49782 49789 49791 49796 49802 49810 49811 49817 49823 49827 #>  [973] 49830 49831 49832 49834 49835 49835 49835 49837 49840 49842 49846 49847 #>  [985] 49850 49850 49852 49852 49853 49857 49858 49859 49859 49861 49861 49862 #>  [997] 49862 49863 49863 49863 49863 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Erdos-Renyi (gnp) graph\" #>  #> [[9]][[2]]$type #> [1] \"gnp\" #>  #> [[9]][[2]]$loops #> [1] FALSE #>  #> [[9]][[2]]$p #> [1] 0.1 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb92617c8> #>  #> attr(,\"class\") #> [1] \"igraph\" g2 #> [[1]] #> [1] 1000 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>     [1]   3   6   7   8  10  10  11  11  12  12  17  17  17  19  20  20  20  21 #>    [19]  21  22  22  22  22  23  23  23  24  24  24  25  25  26  27  27  27  28 #>    [37]  28  28  29  29  30  31  31  32  32  32  32  32  32  33  33  34  34  34 #>    [55]  35  35  35  35  35  35  36  36  36  36  38  38  38  38  38  38  38  39 #>    [73]  40  40  40  40  41  41  41  41  41  41  42  42  42  42  42  43  43  44 #>    [91]  44  44  44  45  45  46  46  46  46  46  47  47  47  47  47  48  48  48 #>   [109]  48  48  48  48  48  49  49  49  49  49  50  50  50  50  50  50  51  51 #>   [127]  51  52  52  52  52  52  52  52  52  52  53  53  53  53  53  53  54  54 #>   [145]  54  54  54  54  54  54  54  55  55  55  55  55  56  56  56  56  56  57 #>   [163]  57  57  57  57  57  57  57  57  57  57  58  58  58  58  59  59  59  59 #>   [181]  59  60  60  60  60  60  60  60  61  61  62  62  62  62  63  63  63  63 #>   [199]  63  63  63  63  63  63  63  64  64  64  64  64  64  64  65  65  65  65 #>   [217]  65  65  66  66  66  66  66  66  66  66  66  66  67  67  67  67  67  67 #>   [235]  67  67  67  68  68  68  68  68  68  68  68  68  68  69  69  69  69  69 #>   [253]  69  69  69  70  70  70  70  70  70  71  71  71  71  71  72  72  72  72 #>   [271]  72  72  73  73  73  73  73  73  73  73  73  73  73  73  74  74  74  74 #>   [289]  74  74  74  74  75  75  75  75  75  75  75  75  75  75  76  76  76  76 #>   [307]  76  76  76  76  76  77  77  77  77  77  77  77  78  78  78  78  78  79 #>   [325]  79  79  79  79  79  79  80  80  80  80  80  81  81  81  81  81  81  81 #>   [343]  82  82  82  82  82  82  82  82  82  83  83  83  83  83  83  83  83  84 #>   [361]  84  84  84  84  84  84  84  84  84  84  84  84  84  85  85  85  85  85 #>   [379]  85  86  86  86  86  86  86  86  87  87  87  87  87  87  87  87  87  88 #>   [397]  88  88  88  88  88  88  88  89  89  89  89  89  90  90  90  90  90  90 #>   [415]  90  90  90  90  91  91  91  91  91  91  91  91  92  92  92  92  92  92 #>   [433]  92  92  92  93  93  93  93  93  93  93  93  93  93  93  93  93  94  94 #>   [451]  94  94  94  94  94  94  95  95  95  95  95  96  96  96  96  96  96  96 #>   [469]  96  96  96  97  97  97  97  97  97  97  97  97  97  97  97  98  98  98 #>   [487]  98  98  98  98  98  98  98  98  98  98  99  99  99  99  99  99  99  99 #>   [505]  99  99  99 100 100 100 100 100 100 100 100 100 100 100 100 101 101 101 #>   [523] 101 101 101 101 101 101 102 102 102 102 102 102 102 102 102 102 102 102 #>   [541] 103 103 103 103 103 103 103 104 104 104 104 104 104 104 104 104 104 105 #>   [559] 105 105 105 105 105 105 105 105 105 105 105 105 105 105 106 106 106 106 #>   [577] 106 106 106 106 106 106 107 107 107 107 107 107 107 108 108 108 108 108 #>   [595] 108 108 108 108 108 108 108 108 108 109 109 109 109 109 109 109 109 109 #>   [613] 109 109 109 110 110 110 110 110 110 110 110 110 110 111 111 111 111 111 #>   [631] 111 111 111 112 112 112 112 112 112 112 112 112 112 112 113 113 113 113 #>   [649] 113 113 113 113 114 114 114 114 114 114 114 114 114 114 114 114 114 114 #>   [667] 114 115 115 115 115 115 115 115 115 115 115 115 115 115 115 115 115 116 #>   [685] 116 116 116 116 116 116 116 116 116 116 116 117 117 117 117 117 117 117 #>   [703] 117 118 118 118 118 118 118 118 118 118 118 118 118 119 119 119 119 119 #>   [721] 119 119 119 119 119 119 119 120 120 120 120 120 120 120 120 121 121 121 #>   [739] 121 121 121 121 121 122 122 122 122 122 122 122 122 122 122 122 123 123 #>   [757] 123 123 123 123 123 123 124 124 124 124 124 124 124 124 124 124 125 125 #>   [775] 125 125 125 125 125 125 125 125 125 126 126 126 126 126 126 126 126 126 #>   [793] 126 126 126 126 127 127 127 127 127 127 127 127 127 127 127 127 127 127 #>   [811] 127 127 127 128 128 128 128 128 128 128 128 128 128 128 129 129 129 129 #>   [829] 129 129 129 129 129 129 129 129 129 130 130 130 130 130 130 130 130 130 #>   [847] 130 130 130 130 130 130 131 131 131 131 131 131 131 131 131 131 131 132 #>   [865] 132 132 132 132 132 132 132 132 132 132 132 132 132 132 132 132 132 133 #>   [883] 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 133 #>   [901] 133 133 133 134 134 134 134 134 134 134 134 134 134 134 134 134 134 134 #>   [919] 134 134 134 134 134 135 135 135 135 135 135 135 135 135 135 135 135 135 #>   [937] 135 135 136 136 136 136 136 136 136 136 136 136 136 136 136 136 136 137 #>   [955] 137 137 137 137 137 137 137 137 137 137 137 138 138 138 138 138 138 138 #>   [973] 138 138 138 138 138 139 139 139 139 139 139 139 139 139 139 139 139 139 #>   [991] 139 139 139 139 139 140 140 140 140 140 140 140 140 140 140 140 140 140 #>  [1009] 140 140 140 141 141 141 141 141 141 141 141 141 141 141 141 141 141 142 #>  [1027] 142 142 142 142 142 142 142 142 142 142 142 142 142 142 142 142 142 143 #>  [1045] 143 143 143 143 143 143 143 143 143 143 144 144 144 144 144 144 144 144 #>  [1063] 144 144 144 144 144 144 144 144 144 145 145 145 145 145 145 145 145 145 #>  [1081] 145 145 145 145 145 146 146 146 146 146 146 146 146 146 146 146 146 146 #>  [1099] 146 146 146 146 147 147 147 147 147 147 147 147 147 147 147 147 147 148 #>  [1117] 148 148 148 148 148 148 148 148 148 148 148 148 148 149 149 149 149 149 #>  [1135] 149 149 149 149 149 149 149 149 149 149 149 149 150 150 150 150 150 150 #>  [1153] 150 150 150 150 150 150 150 150 150 151 151 151 151 151 151 151 151 151 #>  [1171] 151 151 151 151 151 151 151 151 152 152 152 152 152 152 152 152 152 152 #>  [1189] 152 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 153 #>  [1207] 154 154 154 154 154 154 154 154 154 154 154 155 155 155 155 155 155 155 #>  [1225] 155 155 155 155 155 156 156 156 156 156 156 156 156 156 156 156 156 156 #>  [1243] 156 156 156 156 156 157 157 157 157 157 157 157 157 157 157 157 157 157 #>  [1261] 157 158 158 158 158 158 158 158 158 158 158 158 158 158 158 158 158 158 #>  [1279] 158 158 159 159 159 159 159 159 159 159 159 159 159 159 159 159 159 160 #>  [1297] 160 160 160 160 160 160 160 160 160 160 160 160 161 161 161 161 161 161 #>  [1315] 161 161 161 161 161 161 161 161 161 161 161 161 162 162 162 162 162 162 #>  [1333] 162 162 162 162 162 162 162 162 163 163 163 163 163 163 163 163 163 164 #>  [1351] 164 164 164 164 164 164 164 164 164 164 164 164 165 165 165 165 165 165 #>  [1369] 165 165 165 165 165 165 165 165 165 165 166 166 166 166 166 166 166 166 #>  [1387] 166 166 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 167 #>  [1405] 167 167 168 168 168 168 168 168 168 168 168 168 168 168 168 168 169 169 #>  [1423] 169 169 169 169 169 169 169 169 170 170 170 170 170 170 170 170 170 170 #>  [1441] 170 170 170 170 170 170 170 170 171 171 171 171 171 171 171 171 171 171 #>  [1459] 171 171 171 171 172 172 172 172 172 172 172 172 172 172 172 172 172 172 #>  [1477] 172 172 173 173 173 173 173 173 173 173 173 173 173 173 173 173 173 173 #>  [1495] 173 173 173 173 174 174 174 174 174 174 174 174 174 174 174 174 174 175 #>  [1513] 175 175 175 175 175 175 175 175 175 175 175 175 175 175 175 176 176 176 #>  [1531] 176 176 176 176 176 176 176 176 176 176 176 176 176 176 176 176 176 176 #>  [1549] 176 176 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 177 #>  [1567] 177 177 177 177 177 178 178 178 178 178 178 178 178 178 178 178 178 178 #>  [1585] 178 178 178 178 178 179 179 179 179 179 179 179 179 179 179 179 179 179 #>  [1603] 179 180 180 180 180 180 180 180 180 180 180 180 180 180 180 181 181 181 #>  [1621] 181 181 181 181 181 181 181 181 181 181 181 181 181 181 181 181 181 181 #>  [1639] 181 182 182 182 182 182 182 183 183 183 183 183 183 183 183 183 183 183 #>  [1657] 183 183 183 184 184 184 184 184 184 184 184 184 185 185 185 185 185 185 #>  [1675] 185 185 185 185 185 185 185 185 185 185 185 185 185 185 186 186 186 186 #>  [1693] 186 186 186 186 186 186 186 186 186 186 186 186 186 187 187 187 187 187 #>  [1711] 187 187 187 187 187 187 187 187 187 187 187 187 187 187 187 187 188 188 #>  [1729] 188 188 188 188 188 188 188 188 188 188 188 188 188 188 189 189 189 189 #>  [1747] 189 189 189 189 189 189 189 189 190 190 190 190 190 190 190 190 190 190 #>  [1765] 190 190 190 190 190 190 190 190 190 190 190 191 191 191 191 191 191 191 #>  [1783] 191 191 191 191 191 191 191 191 191 191 192 192 192 192 192 192 192 192 #>  [1801] 192 192 192 192 192 192 192 192 192 192 192 192 193 193 193 193 193 193 #>  [1819] 193 193 193 193 193 193 193 193 193 193 194 194 194 194 194 194 194 194 #>  [1837] 194 194 194 195 195 195 195 195 195 195 195 195 195 195 195 195 195 195 #>  [1855] 195 195 195 195 195 195 196 196 196 196 196 196 196 196 196 196 196 196 #>  [1873] 196 196 196 196 196 196 196 196 196 197 197 197 197 197 197 197 197 197 #>  [1891] 197 197 197 197 197 197 197 197 197 198 198 198 198 198 198 198 198 198 #>  [1909] 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 #>  [1927] 198 198 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 #>  [1945] 199 199 199 200 200 200 200 200 200 200 200 200 200 200 200 200 200 200 #>  [1963] 200 200 200 201 201 201 201 201 201 201 201 201 201 201 201 201 201 201 #>  [1981] 201 201 201 201 201 202 202 202 202 202 202 202 202 202 202 202 202 202 #>  [1999] 202 202 202 202 202 202 202 202 203 203 203 203 203 203 203 203 203 203 #>  [2017] 203 203 203 203 203 203 203 203 203 203 203 203 204 204 204 204 204 204 #>  [2035] 204 204 204 204 204 204 204 204 204 204 204 204 204 204 205 205 205 205 #>  [2053] 205 205 205 205 205 205 205 205 205 205 205 205 205 205 206 206 206 206 #>  [2071] 206 206 206 206 206 206 206 206 206 206 206 206 206 206 206 207 207 207 #>  [2089] 207 207 207 207 207 207 207 207 207 207 207 207 207 208 208 208 208 208 #>  [2107] 208 208 208 208 208 208 208 208 208 208 208 208 208 208 208 209 209 209 #>  [2125] 209 209 209 209 209 209 209 209 209 209 209 209 209 209 209 209 209 210 #>  [2143] 210 210 210 210 210 210 210 210 210 210 210 210 210 210 210 210 210 211 #>  [2161] 211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 #>  [2179] 211 212 212 212 212 212 212 212 212 212 213 213 213 213 213 213 213 213 #>  [2197] 213 213 213 213 213 213 213 213 213 213 213 213 213 214 214 214 214 214 #>  [2215] 214 214 214 214 214 214 214 214 214 214 214 214 214 214 214 214 214 214 #>  [2233] 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 #>  [2251] 215 216 216 216 216 216 216 216 216 216 216 216 216 216 216 216 216 216 #>  [2269] 216 216 216 216 216 216 216 216 217 217 217 217 217 217 217 217 217 217 #>  [2287] 217 217 217 217 217 217 217 217 218 218 218 218 218 218 218 218 218 218 #>  [2305] 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 #>  [2323] 218 218 218 219 219 219 219 219 219 219 219 219 219 219 219 219 219 219 #>  [2341] 219 219 219 219 219 219 219 219 219 219 219 219 219 220 220 220 220 220 #>  [2359] 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 221 #>  [2377] 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 221 #>  [2395] 221 221 221 221 221 221 221 221 221 221 221 221 222 222 222 222 222 222 #>  [2413] 222 222 222 222 222 222 222 222 222 222 222 222 222 222 222 222 222 222 #>  [2431] 222 222 222 222 222 222 222 222 222 223 223 223 223 223 223 223 223 223 #>  [2449] 223 223 223 223 223 223 223 223 223 223 223 223 223 223 223 223 223 224 #>  [2467] 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 #>  [2485] 224 224 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 #>  [2503] 225 225 225 225 225 225 225 226 226 226 226 226 226 226 226 226 226 226 #>  [2521] 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 226 227 #>  [2539] 227 227 227 227 227 227 227 227 227 227 227 227 227 227 228 228 228 228 #>  [2557] 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 #>  [2575] 228 228 228 228 228 228 228 229 229 229 229 229 229 229 229 229 229 229 #>  [2593] 229 229 229 229 229 229 229 229 229 229 229 229 229 230 230 230 230 230 #>  [2611] 230 230 230 230 230 230 230 230 230 230 230 230 230 230 230 230 230 230 #>  [2629] 230 230 230 230 230 231 231 231 231 231 231 231 231 231 231 231 231 231 #>  [2647] 231 231 231 231 231 231 231 232 232 232 232 232 232 232 232 232 232 232 #>  [2665] 232 232 232 232 232 232 232 232 232 232 232 232 232 232 232 232 233 233 #>  [2683] 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 #>  [2701] 233 233 233 234 234 234 234 234 234 234 234 234 234 234 234 234 234 234 #>  [2719] 234 234 234 234 234 234 234 234 234 234 234 234 235 235 235 235 235 235 #>  [2737] 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 235 236 236 #>  [2755] 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 236 #>  [2773] 236 236 236 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 #>  [2791] 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 238 #>  [2809] 238 238 238 238 238 238 238 238 238 238 238 238 238 238 238 238 238 238 #>  [2827] 238 238 238 239 239 239 239 239 239 239 239 239 239 239 240 240 240 240 #>  [2845] 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 240 #>  [2863] 240 240 240 240 240 240 240 240 240 240 240 241 241 241 241 241 241 241 #>  [2881] 241 241 241 241 241 241 241 241 241 241 241 241 241 241 242 242 242 242 #>  [2899] 242 242 242 242 242 242 242 242 242 242 242 242 242 242 242 243 243 243 #>  [2917] 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 #>  [2935] 243 243 243 244 244 244 244 244 244 244 244 244 244 244 244 244 244 244 #>  [2953] 244 244 244 244 244 245 245 245 245 245 245 245 245 245 245 245 245 245 #>  [2971] 245 245 245 245 245 245 245 245 245 245 246 246 246 246 246 246 246 246 #>  [2989] 246 246 246 246 246 246 246 246 246 246 246 246 246 247 247 247 247 247 #>  [3007] 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 #>  [3025] 247 247 248 248 248 248 248 248 248 248 248 248 248 248 248 248 248 248 #>  [3043] 248 248 248 248 248 248 248 248 249 249 249 249 249 249 249 249 249 249 #>  [3061] 249 249 249 249 249 249 249 249 249 249 249 249 249 249 249 250 250 250 #>  [3079] 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 251 251 251 #>  [3097] 251 251 251 251 251 251 251 251 251 251 251 251 251 251 251 251 251 251 #>  [3115] 251 251 251 251 251 252 252 252 252 252 252 252 252 252 252 252 252 252 #>  [3133] 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 #>  [3151] 252 252 252 252 253 253 253 253 253 253 253 253 253 253 253 253 253 253 #>  [3169] 253 253 253 253 253 253 253 253 253 253 253 253 253 253 253 254 254 254 #>  [3187] 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 #>  [3205] 254 254 254 254 254 255 255 255 255 255 255 255 255 255 255 255 255 255 #>  [3223] 255 255 255 255 255 255 255 255 255 255 255 255 255 256 256 256 256 256 #>  [3241] 256 256 256 256 256 256 256 256 256 256 256 256 256 256 256 256 257 257 #>  [3259] 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 #>  [3277] 257 257 257 257 258 258 258 258 258 258 258 258 258 258 258 258 258 258 #>  [3295] 258 258 258 258 258 258 258 259 259 259 259 259 259 259 259 259 259 259 #>  [3313] 259 259 259 259 259 259 259 259 259 259 259 259 260 260 260 260 260 260 #>  [3331] 260 260 260 260 260 260 260 260 260 260 260 261 261 261 261 261 261 261 #>  [3349] 261 261 261 261 261 261 261 261 261 261 261 261 261 262 262 262 262 262 #>  [3367] 262 262 262 262 262 262 262 262 262 262 262 262 262 262 262 262 263 263 #>  [3385] 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 #>  [3403] 263 263 263 263 263 263 263 263 263 263 264 264 264 264 264 264 264 264 #>  [3421] 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 #>  [3439] 264 264 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 #>  [3457] 265 265 265 265 265 265 265 265 265 265 265 265 265 266 266 266 266 266 #>  [3475] 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 266 #>  [3493] 266 266 266 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 #>  [3511] 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 #>  [3529] 267 267 268 268 268 268 268 268 268 268 268 268 268 268 268 268 268 268 #>  [3547] 268 268 268 268 268 268 268 268 268 268 269 269 269 269 269 269 269 269 #>  [3565] 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 #>  [3583] 269 269 270 270 270 270 270 270 270 270 270 270 270 270 270 270 270 270 #>  [3601] 270 270 270 270 270 270 270 270 270 270 270 270 270 271 271 271 271 271 #>  [3619] 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 #>  [3637] 271 271 271 271 272 272 272 272 272 272 272 272 272 272 272 272 272 272 #>  [3655] 272 272 272 272 272 272 272 272 272 272 272 272 272 272 272 272 273 273 #>  [3673] 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 #>  [3691] 273 273 274 274 274 274 274 274 274 274 274 274 274 274 274 274 274 274 #>  [3709] 274 274 274 274 274 274 274 274 274 275 275 275 275 275 275 275 275 275 #>  [3727] 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 #>  [3745] 275 275 275 275 275 276 276 276 276 276 276 276 276 276 276 276 276 276 #>  [3763] 276 276 276 276 276 276 276 276 276 276 276 277 277 277 277 277 277 277 #>  [3781] 277 277 277 277 277 277 277 277 277 277 277 277 277 278 278 278 278 278 #>  [3799] 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 279 #>  [3817] 279 279 279 279 279 279 279 279 279 279 279 279 279 279 279 279 279 279 #>  [3835] 279 279 279 279 279 279 279 279 279 279 279 279 279 279 280 280 280 280 #>  [3853] 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 #>  [3871] 280 280 280 280 280 280 280 280 280 280 281 281 281 281 281 281 281 281 #>  [3889] 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 #>  [3907] 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 #>  [3925] 282 282 282 282 283 283 283 283 283 283 283 283 283 283 283 283 283 283 #>  [3943] 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 284 284 284 #>  [3961] 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 284 #>  [3979] 284 284 284 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 #>  [3997] 285 285 285 285 285 285 285 285 285 285 285 285 286 286 286 286 286 286 #>  [4015] 286 286 286 286 286 286 286 286 286 286 286 286 286 286 286 286 286 286 #>  [4033] 286 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 #>  [4051] 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 288 #>  [4069] 288 288 288 288 288 288 288 288 288 288 288 288 288 288 288 288 288 288 #>  [4087] 288 288 288 288 288 288 288 288 288 288 288 289 289 289 289 289 289 289 #>  [4105] 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 #>  [4123] 289 289 289 289 289 289 290 290 290 290 290 290 290 290 290 290 290 290 #>  [4141] 290 290 290 290 290 290 290 290 290 290 290 290 291 291 291 291 291 291 #>  [4159] 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 #>  [4177] 291 292 292 292 292 292 292 292 292 292 292 292 292 292 292 292 292 292 #>  [4195] 292 292 292 292 292 292 292 292 292 292 292 292 292 292 292 293 293 293 #>  [4213] 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 #>  [4231] 293 293 293 293 293 293 294 294 294 294 294 294 294 294 294 294 294 294 #>  [4249] 294 294 294 294 294 294 294 294 294 294 294 294 294 294 294 295 295 295 #>  [4267] 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 #>  [4285] 295 295 295 295 295 295 295 295 295 296 296 296 296 296 296 296 296 296 #>  [4303] 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 #>  [4321] 296 296 296 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 #>  [4339] 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 298 298 298 #>  [4357] 298 298 298 298 298 298 298 298 298 298 298 298 298 298 298 298 298 298 #>  [4375] 298 298 298 298 299 299 299 299 299 299 299 299 299 299 299 299 299 299 #>  [4393] 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 300 300 #>  [4411] 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 300 #>  [4429] 300 300 300 300 300 300 300 300 300 300 301 301 301 301 301 301 301 301 #>  [4447] 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 301 #>  [4465] 301 301 301 301 302 302 302 302 302 302 302 302 302 302 302 302 302 302 #>  [4483] 302 302 302 302 302 302 302 302 302 302 302 302 302 302 303 303 303 303 #>  [4501] 303 303 303 303 303 303 303 303 303 303 303 303 303 303 303 303 303 303 #>  [4519] 303 303 303 303 303 304 304 304 304 304 304 304 304 304 304 304 304 304 #>  [4537] 304 304 304 304 304 304 304 304 304 304 304 304 304 304 304 304 304 304 #>  [4555] 304 304 304 305 305 305 305 305 305 305 305 305 305 305 305 305 305 305 #>  [4573] 305 305 305 305 305 305 305 305 305 305 306 306 306 306 306 306 306 306 #>  [4591] 306 306 306 306 306 306 306 306 306 306 306 306 306 306 306 306 306 306 #>  [4609] 306 306 306 306 306 307 307 307 307 307 307 307 307 307 307 307 307 307 #>  [4627] 307 307 307 307 307 307 307 307 307 307 307 307 307 307 308 308 308 308 #>  [4645] 308 308 308 308 308 308 308 308 308 308 308 308 308 308 308 308 308 308 #>  [4663] 308 308 308 308 308 308 308 308 308 309 309 309 309 309 309 309 309 309 #>  [4681] 309 309 309 309 309 309 309 309 309 309 309 309 309 309 309 309 309 309 #>  [4699] 309 309 309 309 309 309 309 310 310 310 310 310 310 310 310 310 310 310 #>  [4717] 310 310 310 310 310 310 310 310 310 310 310 310 310 310 310 310 310 310 #>  [4735] 310 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 #>  [4753] 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 311 312 #>  [4771] 312 312 312 312 312 312 312 312 312 312 312 312 312 312 312 312 312 312 #>  [4789] 312 312 312 312 312 312 312 312 312 312 312 312 312 312 312 312 313 313 #>  [4807] 313 313 313 313 313 313 313 313 313 313 313 313 313 313 313 313 313 313 #>  [4825] 313 314 314 314 314 314 314 314 314 314 314 314 314 314 314 314 314 314 #>  [4843] 314 314 314 314 314 314 314 314 314 314 314 314 314 314 315 315 315 315 #>  [4861] 315 315 315 315 315 315 315 315 315 315 315 315 315 315 315 315 315 315 #>  [4879] 315 315 315 315 315 315 315 315 315 315 315 315 315 316 316 316 316 316 #>  [4897] 316 316 316 316 316 316 316 316 316 316 316 316 316 316 316 316 316 316 #>  [4915] 316 316 316 316 316 316 316 316 316 316 316 316 316 317 317 317 317 317 #>  [4933] 317 317 317 317 317 317 317 317 317 317 317 317 317 317 317 317 317 317 #>  [4951] 317 317 317 318 318 318 318 318 318 318 318 318 318 318 318 318 318 318 #>  [4969] 318 318 318 318 318 318 318 318 318 318 319 319 319 319 319 319 319 319 #>  [4987] 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 319 #>  [5005] 319 319 319 319 319 319 319 319 319 319 319 319 320 320 320 320 320 320 #>  [5023] 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 320 #>  [5041] 320 320 320 320 320 320 320 320 321 321 321 321 321 321 321 321 321 321 #>  [5059] 321 321 321 321 321 321 321 321 321 321 321 321 321 321 321 321 321 321 #>  [5077] 321 321 322 322 322 322 322 322 322 322 322 322 322 322 322 322 322 322 #>  [5095] 322 322 322 322 322 322 322 322 322 322 322 322 322 322 323 323 323 323 #>  [5113] 323 323 323 323 323 323 323 323 323 323 323 323 323 323 323 323 323 323 #>  [5131] 323 323 323 323 323 323 323 323 323 323 323 323 323 324 324 324 324 324 #>  [5149] 324 324 324 324 324 324 324 324 324 324 324 324 324 324 324 324 324 324 #>  [5167] 324 324 324 325 325 325 325 325 325 325 325 325 325 325 325 325 325 325 #>  [5185] 325 325 325 325 325 325 325 325 325 325 325 325 325 325 326 326 326 326 #>  [5203] 326 326 326 326 326 326 326 326 326 326 326 326 326 326 326 326 326 326 #>  [5221] 326 326 326 326 326 326 326 326 326 327 327 327 327 327 327 327 327 327 #>  [5239] 327 327 327 327 327 327 327 327 327 327 327 327 327 327 327 327 327 327 #>  [5257] 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 #>  [5275] 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 328 #>  [5293] 328 328 328 328 329 329 329 329 329 329 329 329 329 329 329 329 329 329 #>  [5311] 329 329 329 329 329 329 329 329 329 329 329 329 329 329 330 330 330 330 #>  [5329] 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 #>  [5347] 330 330 330 330 330 330 330 331 331 331 331 331 331 331 331 331 331 331 #>  [5365] 331 331 331 331 331 331 331 331 331 331 331 331 331 331 331 331 331 331 #>  [5383] 331 331 331 331 332 332 332 332 332 332 332 332 332 332 332 332 332 332 #>  [5401] 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 #>  [5419] 332 332 333 333 333 333 333 333 333 333 333 333 333 333 333 333 333 333 #>  [5437] 333 333 333 333 333 333 333 333 333 333 333 334 334 334 334 334 334 334 #>  [5455] 334 334 334 334 334 334 334 334 334 334 334 334 334 334 334 334 334 334 #>  [5473] 334 334 334 334 334 334 334 334 335 335 335 335 335 335 335 335 335 335 #>  [5491] 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 335 #>  [5509] 335 335 335 335 335 335 336 336 336 336 336 336 336 336 336 336 336 336 #>  [5527] 336 336 336 336 336 336 336 336 336 336 336 336 336 336 336 336 336 336 #>  [5545] 336 336 336 336 336 337 337 337 337 337 337 337 337 337 337 337 337 337 #>  [5563] 337 337 337 337 337 337 337 338 338 338 338 338 338 338 338 338 338 338 #>  [5581] 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 338 #>  [5599] 338 338 338 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 #>  [5617] 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 339 #>  [5635] 339 339 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 #>  [5653] 340 340 340 340 340 340 340 340 340 340 340 340 340 340 340 341 341 341 #>  [5671] 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 #>  [5689] 341 341 341 341 341 341 341 341 342 342 342 342 342 342 342 342 342 342 #>  [5707] 342 342 342 342 342 342 342 342 342 342 342 342 342 342 342 342 342 342 #>  [5725] 342 342 342 342 342 342 342 342 342 342 342 342 342 342 343 343 343 343 #>  [5743] 343 343 343 343 343 343 343 343 343 343 343 343 343 343 343 343 343 343 #>  [5761] 343 344 344 344 344 344 344 344 344 344 344 344 344 344 344 344 344 344 #>  [5779] 344 344 344 344 344 344 344 344 344 344 344 344 344 345 345 345 345 345 #>  [5797] 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 #>  [5815] 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 345 #>  [5833] 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 #>  [5851] 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 346 347 347 #>  [5869] 347 347 347 347 347 347 347 347 347 347 347 347 347 347 347 347 347 347 #>  [5887] 347 347 347 347 347 347 347 347 347 347 347 347 347 347 347 348 348 348 #>  [5905] 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 #>  [5923] 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 348 #>  [5941] 349 349 349 349 349 349 349 349 349 349 349 349 349 349 349 349 349 349 #>  [5959] 349 349 349 349 349 349 349 349 349 349 349 350 350 350 350 350 350 350 #>  [5977] 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 #>  [5995] 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 350 #>  [6013] 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 #>  [6031] 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 351 #>  [6049] 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 #>  [6067] 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 352 353 353 #>  [6085] 353 353 353 353 353 353 353 353 353 353 353 353 353 353 353 353 353 353 #>  [6103] 353 353 353 353 353 353 354 354 354 354 354 354 354 354 354 354 354 354 #>  [6121] 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 354 #>  [6139] 354 354 354 354 354 354 355 355 355 355 355 355 355 355 355 355 355 355 #>  [6157] 355 355 355 355 355 355 355 355 355 355 355 355 355 355 355 355 356 356 #>  [6175] 356 356 356 356 356 356 356 356 356 356 356 356 356 356 356 356 356 356 #>  [6193] 356 356 356 356 356 356 356 356 356 356 356 356 357 357 357 357 357 357 #>  [6211] 357 357 357 357 357 357 357 357 357 357 357 357 357 357 357 357 357 357 #>  [6229] 357 357 357 357 357 357 358 358 358 358 358 358 358 358 358 358 358 358 #>  [6247] 358 358 358 358 358 358 358 358 358 358 358 358 358 358 358 358 358 358 #>  [6265] 358 358 358 358 358 358 358 359 359 359 359 359 359 359 359 359 359 359 #>  [6283] 359 359 359 359 359 359 359 359 359 359 359 359 359 359 359 359 359 359 #>  [6301] 359 359 359 359 359 359 360 360 360 360 360 360 360 360 360 360 360 360 #>  [6319] 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 360 #>  [6337] 360 360 360 360 360 361 361 361 361 361 361 361 361 361 361 361 361 361 #>  [6355] 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 361 #>  [6373] 361 361 361 361 361 361 361 361 361 361 362 362 362 362 362 362 362 362 #>  [6391] 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 362 #>  [6409] 362 362 362 362 362 362 362 362 362 362 362 363 363 363 363 363 363 363 #>  [6427] 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 363 #>  [6445] 363 363 363 363 364 364 364 364 364 364 364 364 364 364 364 364 364 364 #>  [6463] 364 364 364 364 364 364 364 364 364 364 364 364 364 365 365 365 365 365 #>  [6481] 365 365 365 365 365 365 365 365 365 365 365 365 365 365 365 365 365 365 #>  [6499] 365 365 365 365 365 365 365 366 366 366 366 366 366 366 366 366 366 366 #>  [6517] 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 #>  [6535] 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 366 367 367 #>  [6553] 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 #>  [6571] 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 367 #>  [6589] 367 367 367 367 368 368 368 368 368 368 368 368 368 368 368 368 368 368 #>  [6607] 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 368 #>  [6625] 368 368 368 368 368 368 369 369 369 369 369 369 369 369 369 369 369 369 #>  [6643] 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 369 #>  [6661] 369 369 369 369 369 369 369 369 369 369 369 369 369 370 370 370 370 370 #>  [6679] 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 #>  [6697] 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 370 #>  [6715] 371 371 371 371 371 371 371 371 371 371 371 371 371 371 371 371 371 371 #>  [6733] 371 371 371 371 371 371 371 371 372 372 372 372 372 372 372 372 372 372 #>  [6751] 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 372 #>  [6769] 372 372 372 372 372 372 372 372 372 372 373 373 373 373 373 373 373 373 #>  [6787] 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 373 #>  [6805] 373 373 373 373 373 373 373 373 373 373 373 373 373 374 374 374 374 374 #>  [6823] 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 374 #>  [6841] 374 374 374 374 374 374 374 374 374 374 374 374 374 375 375 375 375 375 #>  [6859] 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 375 #>  [6877] 375 375 375 375 375 375 375 375 375 375 375 376 376 376 376 376 376 376 #>  [6895] 376 376 376 376 376 376 376 376 376 376 376 376 376 376 376 376 376 376 #>  [6913] 376 376 376 376 376 376 376 376 377 377 377 377 377 377 377 377 377 377 #>  [6931] 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 377 #>  [6949] 377 377 377 377 377 377 377 377 377 377 377 377 377 378 378 378 378 378 #>  [6967] 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 #>  [6985] 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 378 #>  [7003] 378 378 378 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 #>  [7021] 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 #>  [7039] 379 380 380 380 380 380 380 380 380 380 380 380 380 380 380 380 380 380 #>  [7057] 380 380 380 380 380 380 380 380 380 380 380 380 380 380 381 381 381 381 #>  [7075] 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 381 #>  [7093] 381 381 381 381 381 381 381 381 381 381 381 381 382 382 382 382 382 382 #>  [7111] 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 382 #>  [7129] 382 382 382 382 382 382 383 383 383 383 383 383 383 383 383 383 383 383 #>  [7147] 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 383 #>  [7165] 383 383 383 383 383 383 383 383 383 383 383 383 384 384 384 384 384 384 #>  [7183] 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 384 #>  [7201] 384 384 384 384 384 384 384 384 384 384 384 384 384 384 385 385 385 385 #>  [7219] 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 #>  [7237] 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 385 386 386 #>  [7255] 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 386 #>  [7273] 386 386 386 386 386 387 387 387 387 387 387 387 387 387 387 387 387 387 #>  [7291] 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 387 #>  [7309] 387 387 387 387 387 387 387 387 388 388 388 388 388 388 388 388 388 388 #>  [7327] 388 388 388 388 388 388 388 388 388 388 388 388 388 388 388 388 388 388 #>  [7345] 388 388 388 388 388 388 388 388 388 388 389 389 389 389 389 389 389 389 #>  [7363] 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 #>  [7381] 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 #>  [7399] 389 389 389 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 #>  [7417] 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 390 #>  [7435] 390 390 390 390 390 390 390 390 390 390 390 390 390 391 391 391 391 391 #>  [7453] 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 #>  [7471] 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 391 #>  [7489] 391 391 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 #>  [7507] 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 392 #>  [7525] 392 392 392 392 392 392 393 393 393 393 393 393 393 393 393 393 393 393 #>  [7543] 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 393 #>  [7561] 393 393 393 393 393 393 393 393 393 393 393 393 394 394 394 394 394 394 #>  [7579] 394 394 394 394 394 394 394 394 394 394 394 394 394 394 394 394 394 394 #>  [7597] 394 394 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 #>  [7615] 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 395 #>  [7633] 395 395 395 395 395 395 395 395 395 395 396 396 396 396 396 396 396 396 #>  [7651] 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 396 #>  [7669] 396 396 396 396 396 396 396 397 397 397 397 397 397 397 397 397 397 397 #>  [7687] 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 #>  [7705] 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 397 #>  [7723] 397 397 397 397 397 397 397 398 398 398 398 398 398 398 398 398 398 398 #>  [7741] 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 398 #>  [7759] 398 398 398 398 398 398 398 398 398 398 398 398 399 399 399 399 399 399 #>  [7777] 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 399 #>  [7795] 399 399 399 399 399 399 399 399 400 400 400 400 400 400 400 400 400 400 #>  [7813] 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 400 #>  [7831] 400 400 400 400 400 400 400 401 401 401 401 401 401 401 401 401 401 401 #>  [7849] 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 #>  [7867] 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 401 402 402 #>  [7885] 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 #>  [7903] 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 402 403 403 #>  [7921] 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 403 #>  [7939] 403 403 403 403 403 403 403 403 403 403 403 403 403 403 404 404 404 404 #>  [7957] 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 404 #>  [7975] 404 404 404 404 404 404 404 404 404 404 404 405 405 405 405 405 405 405 #>  [7993] 405 405 405 405 405 405 405 405 405 405 405 405 405 405 405 405 405 405 #>  [8011] 405 405 405 405 405 405 405 405 405 405 406 406 406 406 406 406 406 406 #>  [8029] 406 406 406 406 406 406 406 406 406 406 406 406 406 406 406 406 406 406 #>  [8047] 406 406 406 406 406 406 406 406 406 406 406 407 407 407 407 407 407 407 #>  [8065] 407 407 407 407 407 407 407 407 407 407 407 407 407 407 407 407 407 407 #>  [8083] 407 407 407 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 #>  [8101] 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 408 #>  [8119] 408 408 408 408 408 408 408 408 408 408 409 409 409 409 409 409 409 409 #>  [8137] 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 409 #>  [8155] 409 409 409 409 409 409 409 409 409 409 409 409 409 409 410 410 410 410 #>  [8173] 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 410 #>  [8191] 410 410 410 410 410 410 410 410 410 410 411 411 411 411 411 411 411 411 #>  [8209] 411 411 411 411 411 411 411 411 411 411 411 411 411 411 411 411 411 411 #>  [8227] 411 411 411 411 411 411 411 412 412 412 412 412 412 412 412 412 412 412 #>  [8245] 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 #>  [8263] 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 412 413 413 #>  [8281] 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 #>  [8299] 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 413 #>  [8317] 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 #>  [8335] 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 #>  [8353] 414 414 414 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 #>  [8371] 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 #>  [8389] 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 415 416 #>  [8407] 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 416 #>  [8425] 416 416 416 416 416 416 416 416 416 416 416 416 417 417 417 417 417 417 #>  [8443] 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 #>  [8461] 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 417 #>  [8479] 417 417 417 417 417 417 417 417 417 418 418 418 418 418 418 418 418 418 #>  [8497] 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 418 #>  [8515] 418 418 418 418 418 418 418 418 418 418 418 418 418 418 419 419 419 419 #>  [8533] 419 419 419 419 419 419 419 419 419 419 419 419 419 419 419 419 419 419 #>  [8551] 419 419 419 419 419 419 419 419 419 419 419 420 420 420 420 420 420 420 #>  [8569] 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 #>  [8587] 420 420 420 420 420 420 420 420 420 420 420 420 420 420 420 421 421 421 #>  [8605] 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 #>  [8623] 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 421 422 #>  [8641] 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 #>  [8659] 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 422 #>  [8677] 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 #>  [8695] 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 423 #>  [8713] 423 423 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 #>  [8731] 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 424 #>  [8749] 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 #>  [8767] 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 425 426 #>  [8785] 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 426 #>  [8803] 426 426 426 426 426 426 426 426 426 426 426 426 426 426 427 427 427 427 #>  [8821] 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 427 #>  [8839] 427 427 427 427 427 427 427 427 427 427 427 427 427 428 428 428 428 428 #>  [8857] 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 #>  [8875] 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 428 #>  [8893] 428 428 428 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 #>  [8911] 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 429 #>  [8929] 429 429 429 429 429 429 429 429 430 430 430 430 430 430 430 430 430 430 #>  [8947] 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 430 #>  [8965] 430 430 430 430 430 430 430 430 430 430 430 430 430 431 431 431 431 431 #>  [8983] 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 #>  [9001] 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 431 #>  [9019] 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 #>  [9037] 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 432 #>  [9055] 432 432 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 #>  [9073] 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 433 #>  [9091] 433 433 433 433 433 433 433 433 434 434 434 434 434 434 434 434 434 434 #>  [9109] 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 434 #>  [9127] 434 434 434 434 434 434 434 434 434 434 434 434 434 434 435 435 435 435 #>  [9145] 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 #>  [9163] 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 435 #>  [9181] 435 435 435 435 435 435 435 435 435 435 436 436 436 436 436 436 436 436 #>  [9199] 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 #>  [9217] 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 436 #>  [9235] 436 436 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 #>  [9253] 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 437 #>  [9271] 437 437 437 437 437 437 437 437 437 437 438 438 438 438 438 438 438 438 #>  [9289] 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 #>  [9307] 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 438 #>  [9325] 438 438 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 #>  [9343] 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 439 #>  [9361] 439 439 439 439 440 440 440 440 440 440 440 440 440 440 440 440 440 440 #>  [9379] 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 440 #>  [9397] 440 440 440 440 440 440 440 440 440 440 440 440 440 440 441 441 441 441 #>  [9415] 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 #>  [9433] 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 441 #>  [9451] 441 441 441 441 441 441 441 441 441 441 442 442 442 442 442 442 442 442 #>  [9469] 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 #>  [9487] 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 442 443 443 #>  [9505] 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 #>  [9523] 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 443 #>  [9541] 443 443 443 443 443 443 443 443 444 444 444 444 444 444 444 444 444 444 #>  [9559] 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 #>  [9577] 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 444 445 #>  [9595] 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 #>  [9613] 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 445 #>  [9631] 445 445 445 445 445 445 445 445 446 446 446 446 446 446 446 446 446 446 #>  [9649] 446 446 446 446 446 446 446 446 446 446 446 446 446 446 446 446 446 446 #>  [9667] 446 446 446 446 446 446 446 446 446 446 446 446 447 447 447 447 447 447 #>  [9685] 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 #>  [9703] 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 447 #>  [9721] 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 #>  [9739] 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 448 #>  [9757] 448 448 448 448 448 448 448 448 448 448 449 449 449 449 449 449 449 449 #>  [9775] 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 #>  [9793] 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 449 #>  [9811] 449 449 449 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 #>  [9829] 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 450 #>  [9847] 450 450 450 450 450 450 450 450 450 450 450 451 451 451 451 451 451 451 #>  [9865] 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 #>  [9883] 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 451 452 #>  [9901] 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 #>  [9919] 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 #>  [9937] 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 452 #>  [9955] 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 #>  [9973] 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 453 #>  [9991] 453 453 453 453 453 453 453 453 453 453 454 454 454 454 454 454 454 454 #> [10009] 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 #> [10027] 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 454 #> [10045] 454 454 454 454 454 455 455 455 455 455 455 455 455 455 455 455 455 455 #> [10063] 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 #> [10081] 455 455 455 455 455 455 455 455 455 455 455 455 455 456 456 456 456 456 #> [10099] 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 #> [10117] 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 456 #> [10135] 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 #> [10153] 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 457 #> [10171] 457 457 457 457 457 458 458 458 458 458 458 458 458 458 458 458 458 458 #> [10189] 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 #> [10207] 458 458 458 458 458 458 458 458 458 458 458 458 458 458 458 459 459 459 #> [10225] 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 #> [10243] 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 459 #> [10261] 459 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 #> [10279] 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 #> [10297] 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 460 #> [10315] 460 460 460 460 460 460 460 460 460 460 460 461 461 461 461 461 461 461 #> [10333] 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 #> [10351] 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 461 #> [10369] 461 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 #> [10387] 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 #> [10405] 462 462 462 462 462 462 462 462 462 462 462 462 462 462 463 463 463 463 #> [10423] 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 #> [10441] 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 #> [10459] 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 463 464 464 #> [10477] 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 #> [10495] 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 464 #> [10513] 464 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 #> [10531] 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 #> [10549] 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 465 #> [10567] 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 #> [10585] 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 466 #> [10603] 466 466 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 #> [10621] 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 467 #> [10639] 467 467 467 467 467 467 467 467 467 467 467 467 467 468 468 468 468 468 #> [10657] 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 #> [10675] 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 469 #> [10693] 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 #> [10711] 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 469 470 #> [10729] 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 #> [10747] 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 470 #> [10765] 470 470 470 470 470 470 470 471 471 471 471 471 471 471 471 471 471 471 #> [10783] 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 #> [10801] 471 471 471 471 471 471 471 471 471 471 471 471 471 471 471 472 472 472 #> [10819] 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 #> [10837] 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 #> [10855] 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 472 #> [10873] 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 #> [10891] 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 473 #> [10909] 473 473 473 473 473 473 473 473 473 473 473 473 473 474 474 474 474 474 #> [10927] 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 #> [10945] 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 474 #> [10963] 474 474 474 474 474 475 475 475 475 475 475 475 475 475 475 475 475 475 #> [10981] 475 475 475 475 475 475 475 475 475 475 475 475 475 475 475 475 475 475 #> [10999] 475 475 475 475 475 475 475 475 475 475 476 476 476 476 476 476 476 476 #> [11017] 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 #> [11035] 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 476 #> [11053] 476 476 476 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 #> [11071] 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 477 #> [11089] 477 477 477 477 477 477 477 477 477 477 478 478 478 478 478 478 478 478 #> [11107] 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 #> [11125] 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 478 #> [11143] 478 478 478 478 478 478 478 478 478 478 478 479 479 479 479 479 479 479 #> [11161] 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 #> [11179] 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 479 #> [11197] 479 479 479 479 479 479 480 480 480 480 480 480 480 480 480 480 480 480 #> [11215] 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 #> [11233] 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 #> [11251] 480 480 480 480 480 480 480 480 480 481 481 481 481 481 481 481 481 481 #> [11269] 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 #> [11287] 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 481 #> [11305] 481 481 481 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 #> [11323] 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 482 #> [11341] 482 482 482 482 482 482 482 482 482 482 482 482 482 483 483 483 483 483 #> [11359] 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 #> [11377] 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 484 #> [11395] 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 #> [11413] 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 484 #> [11431] 484 484 484 484 484 484 484 485 485 485 485 485 485 485 485 485 485 485 #> [11449] 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 #> [11467] 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 485 #> [11485] 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 #> [11503] 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 486 #> [11521] 486 486 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 #> [11539] 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 487 #> [11557] 487 487 487 487 487 487 487 487 487 487 487 487 488 488 488 488 488 488 #> [11575] 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 #> [11593] 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 488 #> [11611] 488 488 488 488 488 488 488 488 488 488 488 488 489 489 489 489 489 489 #> [11629] 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 #> [11647] 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 489 #> [11665] 489 489 489 489 489 489 489 489 489 489 489 489 489 489 490 490 490 490 #> [11683] 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 #> [11701] 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 490 #> [11719] 490 490 490 490 490 490 490 490 490 490 490 490 490 490 491 491 491 491 #> [11737] 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 #> [11755] 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 491 #> [11773] 491 491 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 #> [11791] 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 #> [11809] 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 492 #> [11827] 492 492 492 492 492 492 492 492 493 493 493 493 493 493 493 493 493 493 #> [11845] 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 #> [11863] 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 493 #> [11881] 493 493 493 493 493 493 493 493 494 494 494 494 494 494 494 494 494 494 #> [11899] 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 #> [11917] 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 494 #> [11935] 494 494 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 #> [11953] 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 #> [11971] 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 495 496 #> [11989] 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 #> [12007] 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 496 #> [12025] 496 496 496 496 496 496 496 496 496 496 496 496 496 497 497 497 497 497 #> [12043] 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 #> [12061] 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 497 #> [12079] 497 497 497 497 497 498 498 498 498 498 498 498 498 498 498 498 498 498 #> [12097] 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 498 #> [12115] 498 498 498 498 498 498 498 498 498 498 498 498 498 498 499 499 499 499 #> [12133] 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 #> [12151] 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 499 #> [12169] 499 499 499 499 499 499 499 500 500 500 500 500 500 500 500 500 500 500 #> [12187] 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 #> [12205] 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 #> [12223] 500 500 500 500 501 501 501 501 501 501 501 501 501 501 501 501 501 501 #> [12241] 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 #> [12259] 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 501 #> [12277] 501 501 501 501 501 501 501 501 501 501 502 502 502 502 502 502 502 502 #> [12295] 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 #> [12313] 502 502 502 502 502 502 502 502 503 503 503 503 503 503 503 503 503 503 #> [12331] 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 #> [12349] 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 503 #> [12367] 503 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 #> [12385] 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 504 #> [12403] 504 504 504 504 504 504 505 505 505 505 505 505 505 505 505 505 505 505 #> [12421] 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 #> [12439] 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 505 #> [12457] 505 505 505 505 505 505 505 505 505 506 506 506 506 506 506 506 506 506 #> [12475] 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 #> [12493] 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 506 #> [12511] 506 506 506 506 506 506 506 506 506 506 506 507 507 507 507 507 507 507 #> [12529] 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 #> [12547] 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 #> [12565] 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 507 508 #> [12583] 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 #> [12601] 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 508 #> [12619] 508 508 508 508 508 508 508 508 508 508 508 508 508 509 509 509 509 509 #> [12637] 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 #> [12655] 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 509 #> [12673] 509 509 509 509 509 509 509 509 509 509 509 509 509 509 510 510 510 510 #> [12691] 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 #> [12709] 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 510 #> [12727] 510 510 510 510 510 510 510 511 511 511 511 511 511 511 511 511 511 511 #> [12745] 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 #> [12763] 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 511 #> [12781] 511 511 511 511 512 512 512 512 512 512 512 512 512 512 512 512 512 512 #> [12799] 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 #> [12817] 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 512 #> [12835] 512 512 512 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 #> [12853] 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 #> [12871] 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513 514 514 #> [12889] 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 #> [12907] 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 #> [12925] 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 514 515 515 #> [12943] 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 #> [12961] 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 #> [12979] 515 515 515 515 515 515 515 515 515 515 515 515 515 515 515 516 516 516 #> [12997] 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 #> [13015] 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 516 #> [13033] 516 516 516 516 516 516 516 516 516 517 517 517 517 517 517 517 517 517 #> [13051] 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 #> [13069] 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 517 #> [13087] 517 517 517 517 517 517 517 517 518 518 518 518 518 518 518 518 518 518 #> [13105] 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 #> [13123] 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 #> [13141] 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 518 #> [13159] 518 518 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 #> [13177] 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 519 #> [13195] 519 519 519 519 519 519 519 519 519 520 520 520 520 520 520 520 520 520 #> [13213] 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 #> [13231] 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 520 #> [13249] 520 520 520 520 520 520 520 520 520 520 520 520 521 521 521 521 521 521 #> [13267] 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 #> [13285] 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 521 #> [13303] 521 521 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 #> [13321] 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 #> [13339] 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 522 #> [13357] 522 522 522 522 522 522 522 522 522 522 522 522 523 523 523 523 523 523 #> [13375] 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 #> [13393] 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 #> [13411] 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 523 #> [13429] 523 523 523 523 523 523 524 524 524 524 524 524 524 524 524 524 524 524 #> [13447] 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 #> [13465] 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 #> [13483] 524 524 524 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 #> [13501] 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 #> [13519] 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 525 526 #> [13537] 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 #> [13555] 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 #> [13573] 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 526 527 #> [13591] 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 #> [13609] 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 #> [13627] 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 #> [13645] 527 527 527 527 527 527 528 528 528 528 528 528 528 528 528 528 528 528 #> [13663] 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 #> [13681] 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 528 529 529 #> [13699] 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 #> [13717] 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 #> [13735] 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 529 530 530 #> [13753] 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 #> [13771] 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 530 #> [13789] 530 530 530 530 530 530 530 530 530 530 530 530 530 530 531 531 531 531 #> [13807] 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 #> [13825] 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 531 #> [13843] 531 531 531 531 531 531 531 531 531 531 532 532 532 532 532 532 532 532 #> [13861] 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 #> [13879] 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 532 #> [13897] 532 532 532 532 532 532 532 532 532 532 533 533 533 533 533 533 533 533 #> [13915] 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 #> [13933] 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 #> [13951] 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 533 534 #> [13969] 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 #> [13987] 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 #> [14005] 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 534 #> [14023] 534 534 534 534 534 534 535 535 535 535 535 535 535 535 535 535 535 535 #> [14041] 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 #> [14059] 535 535 535 535 535 535 535 535 535 535 535 536 536 536 536 536 536 536 #> [14077] 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 #> [14095] 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 536 #> [14113] 536 536 536 536 536 536 536 536 536 536 536 537 537 537 537 537 537 537 #> [14131] 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 #> [14149] 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 537 #> [14167] 537 537 537 537 538 538 538 538 538 538 538 538 538 538 538 538 538 538 #> [14185] 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 #> [14203] 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 #> [14221] 538 538 538 538 538 538 538 539 539 539 539 539 539 539 539 539 539 539 #> [14239] 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 #> [14257] 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 539 #> [14275] 539 539 539 539 539 539 539 539 539 540 540 540 540 540 540 540 540 540 #> [14293] 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 #> [14311] 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 #> [14329] 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 540 541 541 #> [14347] 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 #> [14365] 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 541 #> [14383] 541 541 541 541 541 541 541 541 541 542 542 542 542 542 542 542 542 542 #> [14401] 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 #> [14419] 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 542 #> [14437] 542 542 542 542 542 542 542 542 542 542 543 543 543 543 543 543 543 543 #> [14455] 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 #> [14473] 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 #> [14491] 543 543 543 543 543 543 544 544 544 544 544 544 544 544 544 544 544 544 #> [14509] 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 #> [14527] 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 544 #> [14545] 544 544 544 544 544 544 544 544 545 545 545 545 545 545 545 545 545 545 #> [14563] 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 545 #> [14581] 545 545 545 545 545 545 545 545 545 545 545 545 545 546 546 546 546 546 #> [14599] 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 #> [14617] 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 #> [14635] 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 #> [14653] 546 546 546 546 546 547 547 547 547 547 547 547 547 547 547 547 547 547 #> [14671] 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 #> [14689] 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 547 #> [14707] 547 547 547 547 547 547 548 548 548 548 548 548 548 548 548 548 548 548 #> [14725] 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 #> [14743] 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 548 #> [14761] 548 548 548 548 548 548 548 548 549 549 549 549 549 549 549 549 549 549 #> [14779] 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 #> [14797] 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 549 #> [14815] 549 549 549 549 549 549 549 549 549 549 549 549 549 550 550 550 550 550 #> [14833] 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 #> [14851] 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 550 #> [14869] 550 550 550 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 #> [14887] 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 551 #> [14905] 551 551 551 551 551 551 551 551 551 551 551 551 552 552 552 552 552 552 #> [14923] 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 #> [14941] 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 552 #> [14959] 552 552 552 552 552 552 552 552 552 552 553 553 553 553 553 553 553 553 #> [14977] 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 #> [14995] 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 #> [15013] 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 553 #> [15031] 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 #> [15049] 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 554 #> [15067] 554 554 554 554 554 554 554 554 554 554 554 554 555 555 555 555 555 555 #> [15085] 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 #> [15103] 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 555 #> [15121] 555 555 555 555 555 555 555 555 555 555 555 555 555 555 556 556 556 556 #> [15139] 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 #> [15157] 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 556 #> [15175] 556 556 556 556 556 556 556 556 556 556 556 557 557 557 557 557 557 557 #> [15193] 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 #> [15211] 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 557 #> [15229] 557 557 557 557 557 557 557 557 557 557 557 557 557 557 558 558 558 558 #> [15247] 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 #> [15265] 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 #> [15283] 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 #> [15301] 558 558 558 558 558 559 559 559 559 559 559 559 559 559 559 559 559 559 #> [15319] 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 #> [15337] 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 559 560 #> [15355] 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 #> [15373] 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 560 #> [15391] 560 560 560 560 560 560 560 560 560 560 560 561 561 561 561 561 561 561 #> [15409] 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 #> [15427] 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 561 #> [15445] 561 561 561 561 561 561 561 561 562 562 562 562 562 562 562 562 562 562 #> [15463] 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 #> [15481] 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 562 #> [15499] 562 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 #> [15517] 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 #> [15535] 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 563 #> [15553] 563 563 563 563 563 563 563 563 564 564 564 564 564 564 564 564 564 564 #> [15571] 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 #> [15589] 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 564 #> [15607] 564 564 564 564 564 564 565 565 565 565 565 565 565 565 565 565 565 565 #> [15625] 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 #> [15643] 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 565 #> [15661] 565 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 #> [15679] 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 #> [15697] 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 566 #> [15715] 566 566 566 566 566 566 566 566 567 567 567 567 567 567 567 567 567 567 #> [15733] 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 #> [15751] 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 567 #> [15769] 567 567 567 567 567 567 567 567 568 568 568 568 568 568 568 568 568 568 #> [15787] 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 #> [15805] 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 568 #> [15823] 568 568 568 568 568 568 569 569 569 569 569 569 569 569 569 569 569 569 #> [15841] 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 #> [15859] 569 569 569 569 569 569 569 569 569 569 569 569 570 570 570 570 570 570 #> [15877] 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 #> [15895] 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 #> [15913] 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 #> [15931] 570 570 570 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 #> [15949] 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 #> [15967] 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 #> [15985] 571 571 571 571 571 571 571 571 571 572 572 572 572 572 572 572 572 572 #> [16003] 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 #> [16021] 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 #> [16039] 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 572 573 #> [16057] 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 #> [16075] 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 #> [16093] 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 573 #> [16111] 573 573 573 573 573 573 573 573 573 573 574 574 574 574 574 574 574 574 #> [16129] 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 #> [16147] 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 574 #> [16165] 574 574 574 574 574 574 574 574 574 574 574 575 575 575 575 575 575 575 #> [16183] 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 #> [16201] 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 #> [16219] 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 575 #> [16237] 575 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 #> [16255] 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 #> [16273] 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 576 #> [16291] 576 576 576 576 576 576 576 576 577 577 577 577 577 577 577 577 577 577 #> [16309] 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 #> [16327] 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 #> [16345] 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 577 #> [16363] 577 577 577 577 578 578 578 578 578 578 578 578 578 578 578 578 578 578 #> [16381] 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 #> [16399] 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 578 #> [16417] 578 578 578 578 578 578 578 578 578 578 578 579 579 579 579 579 579 579 #> [16435] 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 #> [16453] 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 579 #> [16471] 579 579 579 579 579 579 579 579 579 580 580 580 580 580 580 580 580 580 #> [16489] 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 #> [16507] 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 580 #> [16525] 580 580 580 580 580 580 580 580 580 580 580 580 580 580 581 581 581 581 #> [16543] 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 #> [16561] 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 #> [16579] 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 581 #> [16597] 581 581 581 581 581 581 582 582 582 582 582 582 582 582 582 582 582 582 #> [16615] 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 #> [16633] 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 582 #> [16651] 582 582 582 582 582 582 582 582 582 582 583 583 583 583 583 583 583 583 #> [16669] 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 #> [16687] 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 #> [16705] 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 583 #> [16723] 583 583 583 583 583 583 583 583 583 584 584 584 584 584 584 584 584 584 #> [16741] 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 #> [16759] 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 584 #> [16777] 584 584 584 584 584 584 584 584 584 584 584 585 585 585 585 585 585 585 #> [16795] 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 #> [16813] 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 #> [16831] 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 #> [16849] 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 #> [16867] 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 #> [16885] 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 586 587 #> [16903] 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 #> [16921] 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 #> [16939] 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 587 #> [16957] 587 587 587 587 587 587 587 587 587 588 588 588 588 588 588 588 588 588 #> [16975] 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 #> [16993] 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 588 #> [17011] 588 588 588 588 588 588 588 588 588 589 589 589 589 589 589 589 589 589 #> [17029] 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 #> [17047] 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 #> [17065] 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 #> [17083] 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 589 590 590 #> [17101] 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 #> [17119] 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 #> [17137] 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 590 #> [17155] 590 590 590 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 #> [17173] 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 #> [17191] 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 591 #> [17209] 591 591 591 591 591 591 591 591 591 591 592 592 592 592 592 592 592 592 #> [17227] 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 #> [17245] 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 #> [17263] 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 592 #> [17281] 592 592 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 #> [17299] 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 #> [17317] 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 593 #> [17335] 593 593 593 593 593 593 593 593 593 593 593 594 594 594 594 594 594 594 #> [17353] 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 #> [17371] 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 #> [17389] 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 594 #> [17407] 594 594 594 594 594 594 594 595 595 595 595 595 595 595 595 595 595 595 #> [17425] 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 #> [17443] 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 595 #> [17461] 595 595 595 595 595 595 595 595 595 595 595 595 595 595 596 596 596 596 #> [17479] 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 #> [17497] 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 #> [17515] 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 596 #> [17533] 596 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 #> [17551] 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 #> [17569] 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 597 #> [17587] 597 597 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 #> [17605] 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 #> [17623] 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 598 #> [17641] 598 598 598 598 598 599 599 599 599 599 599 599 599 599 599 599 599 599 #> [17659] 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 #> [17677] 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 #> [17695] 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 599 #> [17713] 599 599 599 599 599 599 599 599 599 600 600 600 600 600 600 600 600 600 #> [17731] 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 #> [17749] 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 #> [17767] 600 600 600 600 600 600 600 600 600 601 601 601 601 601 601 601 601 601 #> [17785] 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 #> [17803] 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 #> [17821] 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 601 #> [17839] 601 601 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 #> [17857] 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 #> [17875] 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 602 #> [17893] 602 602 602 602 602 602 602 602 602 602 602 602 602 603 603 603 603 603 #> [17911] 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 #> [17929] 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 603 #> [17947] 603 603 603 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 #> [17965] 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 #> [17983] 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 #> [18001] 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 604 #> [18019] 604 604 604 604 604 604 604 604 604 604 604 604 605 605 605 605 605 605 #> [18037] 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 #> [18055] 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 #> [18073] 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 605 #> [18091] 605 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 #> [18109] 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 #> [18127] 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 606 #> [18145] 606 606 606 606 606 606 606 606 606 606 606 606 607 607 607 607 607 607 #> [18163] 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 #> [18181] 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 #> [18199] 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 607 #> [18217] 607 607 607 607 607 607 607 607 607 607 607 608 608 608 608 608 608 608 #> [18235] 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 #> [18253] 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 608 #> [18271] 608 608 608 608 608 608 608 608 608 608 608 608 608 609 609 609 609 609 #> [18289] 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 #> [18307] 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 #> [18325] 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 609 #> [18343] 609 609 609 609 609 609 609 609 610 610 610 610 610 610 610 610 610 610 #> [18361] 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 #> [18379] 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 #> [18397] 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 610 611 611 #> [18415] 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 #> [18433] 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 #> [18451] 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 611 #> [18469] 611 611 611 611 611 611 611 611 611 612 612 612 612 612 612 612 612 612 #> [18487] 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 #> [18505] 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 #> [18523] 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 #> [18541] 612 612 612 612 612 612 613 613 613 613 613 613 613 613 613 613 613 613 #> [18559] 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 #> [18577] 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 #> [18595] 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 614 614 #> [18613] 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 #> [18631] 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 #> [18649] 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 614 #> [18667] 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 #> [18685] 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 #> [18703] 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 615 #> [18721] 615 615 615 615 615 615 615 616 616 616 616 616 616 616 616 616 616 616 #> [18739] 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 #> [18757] 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 616 #> [18775] 616 616 616 616 616 616 616 616 616 616 617 617 617 617 617 617 617 617 #> [18793] 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 #> [18811] 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 #> [18829] 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 #> [18847] 617 617 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 #> [18865] 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 #> [18883] 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 #> [18901] 618 618 618 618 618 618 618 618 618 618 618 618 618 618 619 619 619 619 #> [18919] 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 #> [18937] 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 #> [18955] 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 #> [18973] 619 619 619 619 619 620 620 620 620 620 620 620 620 620 620 620 620 620 #> [18991] 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 #> [19009] 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 620 621 621 #> [19027] 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 #> [19045] 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 #> [19063] 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 #> [19081] 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 #> [19099] 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 #> [19117] 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 622 623 #> [19135] 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 #> [19153] 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 #> [19171] 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 #> [19189] 623 623 623 623 624 624 624 624 624 624 624 624 624 624 624 624 624 624 #> [19207] 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 #> [19225] 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 624 #> [19243] 624 624 624 624 624 625 625 625 625 625 625 625 625 625 625 625 625 625 #> [19261] 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 #> [19279] 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 625 #> [19297] 625 625 625 625 625 625 626 626 626 626 626 626 626 626 626 626 626 626 #> [19315] 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 #> [19333] 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 #> [19351] 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 626 627 627 #> [19369] 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 #> [19387] 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 #> [19405] 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 #> [19423] 627 627 627 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 #> [19441] 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 #> [19459] 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 #> [19477] 628 628 628 628 628 628 628 628 628 629 629 629 629 629 629 629 629 629 #> [19495] 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 #> [19513] 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 #> [19531] 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 629 #> [19549] 629 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 #> [19567] 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 #> [19585] 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 #> [19603] 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 630 #> [19621] 630 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 #> [19639] 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 #> [19657] 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 631 #> [19675] 631 631 631 631 631 631 632 632 632 632 632 632 632 632 632 632 632 632 #> [19693] 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 #> [19711] 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 632 #> [19729] 632 632 632 632 632 632 633 633 633 633 633 633 633 633 633 633 633 633 #> [19747] 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 #> [19765] 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 633 #> [19783] 633 633 633 633 633 633 633 633 633 633 633 633 634 634 634 634 634 634 #> [19801] 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 #> [19819] 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 #> [19837] 634 634 634 634 634 634 634 634 634 634 634 634 635 635 635 635 635 635 #> [19855] 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 #> [19873] 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 #> [19891] 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 #> [19909] 635 635 635 635 635 635 636 636 636 636 636 636 636 636 636 636 636 636 #> [19927] 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 #> [19945] 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 #> [19963] 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 636 #> [19981] 636 636 636 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 #> [19999] 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 #> [20017] 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 #> [20035] 637 637 637 637 637 637 637 637 637 637 637 637 637 637 638 638 638 638 #> [20053] 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 #> [20071] 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 #> [20089] 638 638 638 638 638 638 638 638 638 638 638 638 638 638 639 639 639 639 #> [20107] 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 #> [20125] 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 #> [20143] 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 #> [20161] 639 639 639 639 639 640 640 640 640 640 640 640 640 640 640 640 640 640 #> [20179] 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 #> [20197] 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 #> [20215] 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 641 641 641 #> [20233] 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 #> [20251] 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 #> [20269] 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 642 #> [20287] 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 #> [20305] 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 #> [20323] 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 642 #> [20341] 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 #> [20359] 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 #> [20377] 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 643 #> [20395] 643 643 643 643 643 643 643 644 644 644 644 644 644 644 644 644 644 644 #> [20413] 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 #> [20431] 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 #> [20449] 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 #> [20467] 644 644 644 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 #> [20485] 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 #> [20503] 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 #> [20521] 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 #> [20539] 645 645 645 645 646 646 646 646 646 646 646 646 646 646 646 646 646 646 #> [20557] 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 #> [20575] 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 #> [20593] 646 646 646 646 647 647 647 647 647 647 647 647 647 647 647 647 647 647 #> [20611] 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 #> [20629] 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 #> [20647] 647 647 647 647 647 647 647 647 647 647 647 647 647 647 647 648 648 648 #> [20665] 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 #> [20683] 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 #> [20701] 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 #> [20719] 648 648 648 648 648 648 648 648 648 649 649 649 649 649 649 649 649 649 #> [20737] 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 #> [20755] 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 #> [20773] 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 #> [20791] 649 649 649 649 649 649 649 649 649 649 649 649 650 650 650 650 650 650 #> [20809] 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 #> [20827] 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 #> [20845] 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 650 #> [20863] 650 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 #> [20881] 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 #> [20899] 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 #> [20917] 651 651 651 651 651 652 652 652 652 652 652 652 652 652 652 652 652 652 #> [20935] 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 #> [20953] 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 #> [20971] 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 652 #> [20989] 652 652 652 652 652 653 653 653 653 653 653 653 653 653 653 653 653 653 #> [21007] 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 #> [21025] 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 #> [21043] 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 653 #> [21061] 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 #> [21079] 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 #> [21097] 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 #> [21115] 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 654 #> [21133] 654 654 654 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 #> [21151] 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 #> [21169] 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 #> [21187] 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 655 #> [21205] 655 655 655 655 655 655 655 655 656 656 656 656 656 656 656 656 656 656 #> [21223] 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 #> [21241] 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 #> [21259] 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 656 #> [21277] 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 #> [21295] 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 #> [21313] 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 #> [21331] 657 657 657 657 657 657 658 658 658 658 658 658 658 658 658 658 658 658 #> [21349] 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 #> [21367] 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 #> [21385] 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 658 659 659 #> [21403] 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 #> [21421] 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 #> [21439] 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 659 #> [21457] 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 #> [21475] 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 #> [21493] 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 660 #> [21511] 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 #> [21529] 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 #> [21547] 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 #> [21565] 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 662 662 662 #> [21583] 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 #> [21601] 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 #> [21619] 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 #> [21637] 662 662 662 662 662 662 662 662 662 662 662 662 662 662 663 663 663 663 #> [21655] 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 #> [21673] 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 #> [21691] 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 #> [21709] 663 663 663 663 663 663 664 664 664 664 664 664 664 664 664 664 664 664 #> [21727] 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 #> [21745] 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 664 #> [21763] 664 664 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 #> [21781] 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 #> [21799] 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 665 #> [21817] 665 665 665 665 665 665 665 665 665 665 665 665 666 666 666 666 666 666 #> [21835] 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 #> [21853] 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 #> [21871] 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 #> [21889] 666 666 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 #> [21907] 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 #> [21925] 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 #> [21943] 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 #> [21961] 667 667 667 667 667 667 667 667 667 667 668 668 668 668 668 668 668 668 #> [21979] 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 #> [21997] 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 #> [22015] 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 668 #> [22033] 668 668 668 668 668 668 668 668 668 668 668 669 669 669 669 669 669 669 #> [22051] 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 #> [22069] 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 #> [22087] 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 669 #> [22105] 669 669 669 669 669 669 669 669 669 669 669 669 669 669 670 670 670 670 #> [22123] 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 #> [22141] 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 #> [22159] 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 #> [22177] 670 670 670 670 670 670 670 670 670 670 670 671 671 671 671 671 671 671 #> [22195] 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 #> [22213] 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 #> [22231] 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 671 672 #> [22249] 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 #> [22267] 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 #> [22285] 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 672 #> [22303] 672 672 672 672 672 672 672 672 672 672 672 672 672 673 673 673 673 673 #> [22321] 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 #> [22339] 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 #> [22357] 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 #> [22375] 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 673 #> [22393] 673 673 673 673 674 674 674 674 674 674 674 674 674 674 674 674 674 674 #> [22411] 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 #> [22429] 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 674 #> [22447] 674 674 674 674 674 674 674 674 674 674 674 674 675 675 675 675 675 675 #> [22465] 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 #> [22483] 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 #> [22501] 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 675 #> [22519] 675 675 675 675 675 675 675 675 675 676 676 676 676 676 676 676 676 676 #> [22537] 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 #> [22555] 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 #> [22573] 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 676 #> [22591] 676 676 676 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 #> [22609] 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 #> [22627] 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 #> [22645] 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 677 #> [22663] 677 677 677 677 677 677 677 677 677 677 677 678 678 678 678 678 678 678 #> [22681] 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 #> [22699] 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 #> [22717] 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 #> [22735] 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 679 679 #> [22753] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 #> [22771] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 #> [22789] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 #> [22807] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 #> [22825] 679 679 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 #> [22843] 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 #> [22861] 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 680 #> [22879] 680 680 680 680 680 680 680 680 680 680 680 680 680 681 681 681 681 681 #> [22897] 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 #> [22915] 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 #> [22933] 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 #> [22951] 681 681 681 681 681 681 681 682 682 682 682 682 682 682 682 682 682 682 #> [22969] 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 #> [22987] 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 #> [23005] 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 #> [23023] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 #> [23041] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 #> [23059] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 #> [23077] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 #> [23095] 683 683 683 683 683 683 683 683 683 683 684 684 684 684 684 684 684 684 #> [23113] 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 #> [23131] 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 684 #> [23149] 684 684 684 684 684 684 684 684 684 684 685 685 685 685 685 685 685 685 #> [23167] 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 #> [23185] 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 #> [23203] 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 #> [23221] 685 685 685 685 685 685 685 686 686 686 686 686 686 686 686 686 686 686 #> [23239] 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 #> [23257] 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 #> [23275] 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 686 #> [23293] 686 686 686 686 686 686 686 686 686 686 686 686 686 687 687 687 687 687 #> [23311] 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 #> [23329] 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 #> [23347] 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 687 #> [23365] 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 #> [23383] 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 #> [23401] 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 #> [23419] 688 688 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 #> [23437] 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 #> [23455] 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 #> [23473] 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 690 690 690 #> [23491] 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 #> [23509] 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 #> [23527] 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 #> [23545] 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 690 #> [23563] 690 690 690 690 691 691 691 691 691 691 691 691 691 691 691 691 691 691 #> [23581] 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 #> [23599] 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 #> [23617] 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 691 692 692 #> [23635] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23653] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23671] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23689] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23707] 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 692 #> [23725] 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 #> [23743] 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 #> [23761] 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 #> [23779] 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 #> [23797] 693 693 693 693 693 693 694 694 694 694 694 694 694 694 694 694 694 694 #> [23815] 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 #> [23833] 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 #> [23851] 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 695 695 #> [23869] 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 #> [23887] 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 #> [23905] 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 #> [23923] 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 695 696 #> [23941] 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 #> [23959] 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 #> [23977] 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 696 #> [23995] 696 696 696 696 696 696 696 696 697 697 697 697 697 697 697 697 697 697 #> [24013] 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 #> [24031] 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 #> [24049] 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 697 #> [24067] 697 697 697 697 697 697 697 697 697 697 697 697 697 698 698 698 698 698 #> [24085] 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 #> [24103] 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 #> [24121] 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 698 #> [24139] 698 698 698 698 698 698 698 698 698 698 698 698 698 699 699 699 699 699 #> [24157] 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 #> [24175] 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 #> [24193] 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 699 #> [24211] 699 699 699 699 699 699 699 700 700 700 700 700 700 700 700 700 700 700 #> [24229] 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 #> [24247] 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 #> [24265] 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 #> [24283] 700 700 700 700 700 700 700 700 700 701 701 701 701 701 701 701 701 701 #> [24301] 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 #> [24319] 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 #> [24337] 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 #> [24355] 701 701 701 701 701 702 702 702 702 702 702 702 702 702 702 702 702 702 #> [24373] 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 #> [24391] 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 #> [24409] 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 703 703 703 #> [24427] 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 #> [24445] 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 #> [24463] 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 #> [24481] 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 703 #> [24499] 703 703 703 703 703 703 704 704 704 704 704 704 704 704 704 704 704 704 #> [24517] 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 #> [24535] 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 #> [24553] 704 704 704 704 704 704 704 704 704 704 704 705 705 705 705 705 705 705 #> [24571] 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 #> [24589] 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 #> [24607] 705 705 705 705 705 705 705 705 705 705 705 705 705 705 706 706 706 706 #> [24625] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 #> [24643] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 #> [24661] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 #> [24679] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 #> [24697] 706 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 #> [24715] 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 #> [24733] 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 #> [24751] 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 708 #> [24769] 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 #> [24787] 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 #> [24805] 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 #> [24823] 708 708 708 708 708 708 708 708 708 708 708 708 709 709 709 709 709 709 #> [24841] 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 #> [24859] 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 #> [24877] 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 #> [24895] 709 709 709 709 710 710 710 710 710 710 710 710 710 710 710 710 710 710 #> [24913] 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 #> [24931] 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 #> [24949] 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 #> [24967] 710 710 710 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 #> [24985] 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 #> [25003] 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 #> [25021] 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 #> [25039] 711 711 711 711 711 711 711 711 711 711 711 711 711 711 712 712 712 712 #> [25057] 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 #> [25075] 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 #> [25093] 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 #> [25111] 712 712 712 712 712 713 713 713 713 713 713 713 713 713 713 713 713 713 #> [25129] 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 #> [25147] 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 #> [25165] 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 #> [25183] 713 713 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 #> [25201] 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 #> [25219] 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 #> [25237] 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 715 #> [25255] 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 #> [25273] 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 #> [25291] 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 #> [25309] 715 715 715 715 715 715 715 715 715 715 715 716 716 716 716 716 716 716 #> [25327] 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 #> [25345] 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 #> [25363] 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 #> [25381] 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 717 717 717 #> [25399] 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 #> [25417] 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 #> [25435] 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 #> [25453] 717 717 717 717 717 717 717 717 717 717 717 717 717 717 718 718 718 718 #> [25471] 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 #> [25489] 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 #> [25507] 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 718 #> [25525] 718 718 718 718 718 718 718 718 718 718 718 719 719 719 719 719 719 719 #> [25543] 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 #> [25561] 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 #> [25579] 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 #> [25597] 719 719 719 719 719 719 719 719 719 719 719 719 719 719 719 720 720 720 #> [25615] 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 #> [25633] 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 #> [25651] 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 720 #> [25669] 720 720 720 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 #> [25687] 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 #> [25705] 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 #> [25723] 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 721 #> [25741] 721 721 721 721 721 721 721 721 722 722 722 722 722 722 722 722 722 722 #> [25759] 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 #> [25777] 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 #> [25795] 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 722 #> [25813] 722 722 722 722 722 722 722 722 723 723 723 723 723 723 723 723 723 723 #> [25831] 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 #> [25849] 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 #> [25867] 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 #> [25885] 723 723 723 723 723 723 723 724 724 724 724 724 724 724 724 724 724 724 #> [25903] 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 #> [25921] 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 #> [25939] 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 724 #> [25957] 724 724 724 724 724 725 725 725 725 725 725 725 725 725 725 725 725 725 #> [25975] 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 #> [25993] 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 #> [26011] 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 #> [26029] 725 725 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 #> [26047] 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 #> [26065] 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 #> [26083] 726 726 726 726 726 727 727 727 727 727 727 727 727 727 727 727 727 727 #> [26101] 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 #> [26119] 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 #> [26137] 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 #> [26155] 727 727 727 727 727 727 728 728 728 728 728 728 728 728 728 728 728 728 #> [26173] 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 #> [26191] 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 #> [26209] 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 729 729 #> [26227] 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 #> [26245] 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 #> [26263] 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 #> [26281] 729 729 729 729 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #> [26299] 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #> [26317] 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #> [26335] 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #> [26353] 730 730 730 730 730 730 730 730 730 730 730 731 731 731 731 731 731 731 #> [26371] 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 #> [26389] 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 #> [26407] 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 #> [26425] 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 731 732 732 #> [26443] 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 #> [26461] 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 #> [26479] 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 732 #> [26497] 732 732 732 732 732 732 732 732 732 732 732 732 733 733 733 733 733 733 #> [26515] 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 #> [26533] 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 #> [26551] 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 733 #> [26569] 733 733 733 733 733 733 733 733 733 734 734 734 734 734 734 734 734 734 #> [26587] 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 #> [26605] 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 #> [26623] 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 734 #> [26641] 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 #> [26659] 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 #> [26677] 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 #> [26695] 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 735 #> [26713] 735 735 735 735 735 735 735 736 736 736 736 736 736 736 736 736 736 736 #> [26731] 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 #> [26749] 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 #> [26767] 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 736 #> [26785] 736 736 736 736 736 736 736 736 736 736 736 736 736 737 737 737 737 737 #> [26803] 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 #> [26821] 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 #> [26839] 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 #> [26857] 737 737 737 737 737 737 737 737 738 738 738 738 738 738 738 738 738 738 #> [26875] 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 #> [26893] 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 #> [26911] 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 #> [26929] 738 738 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 #> [26947] 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 #> [26965] 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 739 #> [26983] 739 739 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 #> [27001] 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 #> [27019] 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 #> [27037] 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 740 #> [27055] 740 740 740 740 740 740 740 740 740 741 741 741 741 741 741 741 741 741 #> [27073] 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 #> [27091] 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 #> [27109] 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 741 #> [27127] 741 741 741 741 741 741 741 742 742 742 742 742 742 742 742 742 742 742 #> [27145] 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 #> [27163] 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 #> [27181] 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 #> [27199] 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 742 #> [27217] 742 742 742 742 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #> [27235] 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #> [27253] 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #> [27271] 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #> [27289] 743 743 743 743 743 743 743 743 743 744 744 744 744 744 744 744 744 744 #> [27307] 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 #> [27325] 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 #> [27343] 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 #> [27361] 744 744 744 744 744 745 745 745 745 745 745 745 745 745 745 745 745 745 #> [27379] 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 #> [27397] 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 #> [27415] 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 745 #> [27433] 745 745 745 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 #> [27451] 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 #> [27469] 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 #> [27487] 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 746 #> [27505] 746 746 746 746 746 746 746 747 747 747 747 747 747 747 747 747 747 747 #> [27523] 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 #> [27541] 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 #> [27559] 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 #> [27577] 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 747 #> [27595] 747 747 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 #> [27613] 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 #> [27631] 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 #> [27649] 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 748 #> [27667] 748 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #> [27685] 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #> [27703] 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #> [27721] 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #> [27739] 749 749 749 749 749 749 749 749 749 749 749 749 749 750 750 750 750 750 #> [27757] 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #> [27775] 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #> [27793] 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #> [27811] 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #> [27829] 750 750 750 750 750 750 750 751 751 751 751 751 751 751 751 751 751 751 #> [27847] 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 #> [27865] 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 #> [27883] 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 #> [27901] 751 751 751 751 751 751 751 751 751 751 751 751 751 751 751 752 752 752 #> [27919] 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 #> [27937] 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 #> [27955] 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 #> [27973] 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 752 #> [27991] 752 752 752 752 752 752 752 753 753 753 753 753 753 753 753 753 753 753 #> [28009] 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 #> [28027] 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 #> [28045] 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 753 #> [28063] 753 753 753 753 753 753 753 753 753 754 754 754 754 754 754 754 754 754 #> [28081] 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 #> [28099] 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 #> [28117] 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 754 #> [28135] 754 754 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 #> [28153] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 #> [28171] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 #> [28189] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 #> [28207] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 756 756 756 #> [28225] 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 #> [28243] 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 #> [28261] 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 #> [28279] 756 756 756 756 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #> [28297] 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #> [28315] 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #> [28333] 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #> [28351] 757 757 757 757 757 757 757 757 758 758 758 758 758 758 758 758 758 758 #> [28369] 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 #> [28387] 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 #> [28405] 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 #> [28423] 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 758 #> [28441] 758 758 758 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #> [28459] 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #> [28477] 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #> [28495] 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #> [28513] 759 759 759 759 759 759 759 759 759 760 760 760 760 760 760 760 760 760 #> [28531] 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 #> [28549] 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 #> [28567] 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 #> [28585] 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 761 761 #> [28603] 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #> [28621] 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #> [28639] 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #> [28657] 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #> [28675] 761 761 761 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 #> [28693] 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 #> [28711] 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 #> [28729] 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 762 #> [28747] 762 762 762 762 762 762 762 762 763 763 763 763 763 763 763 763 763 763 #> [28765] 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 #> [28783] 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 #> [28801] 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 #> [28819] 763 763 763 763 763 763 763 763 763 763 764 764 764 764 764 764 764 764 #> [28837] 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 #> [28855] 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 #> [28873] 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 764 #> [28891] 764 764 764 764 764 764 764 764 764 764 764 764 765 765 765 765 765 765 #> [28909] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 #> [28927] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 #> [28945] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 #> [28963] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 #> [28981] 765 765 765 765 765 765 765 765 765 766 766 766 766 766 766 766 766 766 #> [28999] 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 #> [29017] 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 #> [29035] 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 #> [29053] 766 766 766 766 766 766 766 766 766 767 767 767 767 767 767 767 767 767 #> [29071] 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 #> [29089] 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 #> [29107] 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 #> [29125] 767 767 767 767 767 767 767 767 767 767 767 767 767 767 768 768 768 768 #> [29143] 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 #> [29161] 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 #> [29179] 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 #> [29197] 768 768 768 768 768 768 768 768 768 768 769 769 769 769 769 769 769 769 #> [29215] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [29233] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [29251] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [29269] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [29287] 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 #> [29305] 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 #> [29323] 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 #> [29341] 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 770 #> [29359] 770 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 #> [29377] 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 #> [29395] 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 #> [29413] 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 772 772 #> [29431] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 #> [29449] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 #> [29467] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 #> [29485] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 #> [29503] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 773 773 773 773 #> [29521] 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 #> [29539] 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 #> [29557] 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 #> [29575] 773 773 773 773 773 773 773 773 773 773 773 773 773 773 774 774 774 774 #> [29593] 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 #> [29611] 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 #> [29629] 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 774 #> [29647] 774 774 774 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 #> [29665] 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 #> [29683] 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 #> [29701] 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 #> [29719] 775 775 775 775 776 776 776 776 776 776 776 776 776 776 776 776 776 776 #> [29737] 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 #> [29755] 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 #> [29773] 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 #> [29791] 776 776 776 776 776 776 776 776 777 777 777 777 777 777 777 777 777 777 #> [29809] 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 #> [29827] 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 #> [29845] 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 #> [29863] 777 777 777 777 777 777 777 777 777 777 777 777 777 778 778 778 778 778 #> [29881] 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 #> [29899] 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 #> [29917] 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 778 #> [29935] 778 778 778 778 778 778 778 779 779 779 779 779 779 779 779 779 779 779 #> [29953] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 #> [29971] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 #> [29989] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 #> [30007] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 #> [30025] 779 779 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [30043] 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [30061] 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [30079] 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [30097] 780 780 780 780 780 780 780 780 780 780 781 781 781 781 781 781 781 781 #> [30115] 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30133] 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30151] 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30169] 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [30187] 781 781 781 781 781 781 781 781 782 782 782 782 782 782 782 782 782 782 #> [30205] 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 #> [30223] 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 #> [30241] 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 #> [30259] 782 782 782 782 782 782 782 782 782 782 782 782 782 783 783 783 783 783 #> [30277] 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 #> [30295] 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 #> [30313] 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 #> [30331] 783 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 #> [30349] 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 #> [30367] 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 #> [30385] 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 #> [30403] 784 784 784 784 784 784 784 784 784 784 784 784 784 784 784 785 785 785 #> [30421] 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 #> [30439] 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 #> [30457] 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 #> [30475] 785 785 785 785 785 785 785 785 785 785 785 785 785 785 785 786 786 786 #> [30493] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30511] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30529] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30547] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30565] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 786 #> [30583] 786 786 786 786 786 786 786 786 786 786 786 787 787 787 787 787 787 787 #> [30601] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 #> [30619] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 #> [30637] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 #> [30655] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 788 788 788 #> [30673] 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [30691] 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [30709] 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [30727] 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [30745] 788 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 #> [30763] 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 #> [30781] 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 #> [30799] 789 789 789 789 789 789 789 789 789 789 789 789 790 790 790 790 790 790 #> [30817] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [30835] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [30853] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [30871] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [30889] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [30907] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [30925] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [30943] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [30961] 791 791 791 791 791 791 791 791 791 791 791 792 792 792 792 792 792 792 #> [30979] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [30997] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [31015] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [31033] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [31051] 792 792 792 792 792 792 792 792 792 792 792 793 793 793 793 793 793 793 #> [31069] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [31087] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [31105] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [31123] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [31141] 793 793 793 793 793 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [31159] 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [31177] 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [31195] 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [31213] 794 794 794 794 794 794 795 795 795 795 795 795 795 795 795 795 795 795 #> [31231] 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 #> [31249] 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 #> [31267] 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 #> [31285] 795 795 795 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 #> [31303] 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 #> [31321] 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 #> [31339] 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 796 #> [31357] 796 796 796 796 796 796 796 797 797 797 797 797 797 797 797 797 797 797 #> [31375] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31393] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31411] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31429] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 797 #> [31447] 797 797 797 797 797 797 797 797 797 797 797 797 798 798 798 798 798 798 #> [31465] 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [31483] 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [31501] 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [31519] 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [31537] 798 798 798 798 798 798 798 798 799 799 799 799 799 799 799 799 799 799 #> [31555] 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 #> [31573] 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 #> [31591] 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 #> [31609] 799 799 799 799 799 799 799 799 799 799 799 800 800 800 800 800 800 800 #> [31627] 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 #> [31645] 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 #> [31663] 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 #> [31681] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 #> [31699] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 #> [31717] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 #> [31735] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 #> [31753] 801 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [31771] 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [31789] 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [31807] 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [31825] 802 802 802 802 802 802 802 802 802 802 803 803 803 803 803 803 803 803 #> [31843] 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 #> [31861] 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 #> [31879] 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 803 #> [31897] 803 803 803 803 803 803 803 803 803 803 803 803 803 804 804 804 804 804 #> [31915] 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 #> [31933] 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 #> [31951] 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 804 #> [31969] 804 804 804 804 804 805 805 805 805 805 805 805 805 805 805 805 805 805 #> [31987] 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 #> [32005] 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 #> [32023] 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 805 #> [32041] 805 805 805 805 805 805 805 805 805 805 805 805 806 806 806 806 806 806 #> [32059] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [32077] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [32095] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [32113] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [32131] 806 806 806 806 806 806 806 806 807 807 807 807 807 807 807 807 807 807 #> [32149] 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 #> [32167] 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 #> [32185] 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 807 #> [32203] 807 807 807 807 807 807 807 807 807 807 807 808 808 808 808 808 808 808 #> [32221] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 #> [32239] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 #> [32257] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 808 #> [32275] 808 808 808 808 808 808 808 808 808 808 808 809 809 809 809 809 809 809 #> [32293] 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 #> [32311] 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 #> [32329] 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 #> [32347] 809 809 809 809 810 810 810 810 810 810 810 810 810 810 810 810 810 810 #> [32365] 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 #> [32383] 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 #> [32401] 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 #> [32419] 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 811 811 811 #> [32437] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [32455] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [32473] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [32491] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [32509] 811 811 811 811 811 811 811 811 812 812 812 812 812 812 812 812 812 812 #> [32527] 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [32545] 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [32563] 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [32581] 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [32599] 812 812 812 812 812 812 813 813 813 813 813 813 813 813 813 813 813 813 #> [32617] 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 #> [32635] 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 #> [32653] 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 #> [32671] 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 #> [32689] 813 813 813 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [32707] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [32725] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [32743] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [32761] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [32779] 814 814 814 814 814 814 814 814 815 815 815 815 815 815 815 815 815 815 #> [32797] 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [32815] 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [32833] 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [32851] 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [32869] 815 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [32887] 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [32905] 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [32923] 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [32941] 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [32959] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [32977] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [32995] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [33013] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [33031] 817 817 817 817 817 817 818 818 818 818 818 818 818 818 818 818 818 818 #> [33049] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [33067] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [33085] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [33103] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [33121] 818 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [33139] 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [33157] 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [33175] 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [33193] 819 819 819 819 819 819 819 819 819 820 820 820 820 820 820 820 820 820 #> [33211] 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 #> [33229] 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 #> [33247] 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 820 #> [33265] 820 820 820 820 820 820 820 820 820 820 821 821 821 821 821 821 821 821 #> [33283] 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 #> [33301] 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 #> [33319] 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 #> [33337] 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 821 #> [33355] 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 #> [33373] 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 #> [33391] 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 822 #> [33409] 822 822 822 822 822 822 822 822 822 822 822 822 822 822 823 823 823 823 #> [33427] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 #> [33445] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 #> [33463] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 #> [33481] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 #> [33499] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 824 824 824 #> [33517] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 #> [33535] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 #> [33553] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 #> [33571] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 824 825 825 825 #> [33589] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [33607] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [33625] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [33643] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [33661] 825 825 825 825 825 825 825 825 826 826 826 826 826 826 826 826 826 826 #> [33679] 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [33697] 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [33715] 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [33733] 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [33751] 826 826 826 826 826 826 826 826 826 826 826 826 826 827 827 827 827 827 #> [33769] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [33787] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [33805] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [33823] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [33841] 827 827 827 827 827 827 827 828 828 828 828 828 828 828 828 828 828 828 #> [33859] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 #> [33877] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 #> [33895] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 #> [33913] 828 828 828 828 828 828 828 828 828 828 828 828 829 829 829 829 829 829 #> [33931] 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 #> [33949] 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 #> [33967] 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 #> [33985] 829 829 829 829 829 829 829 829 830 830 830 830 830 830 830 830 830 830 #> [34003] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [34021] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [34039] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [34057] 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [34075] 830 830 830 830 830 830 830 831 831 831 831 831 831 831 831 831 831 831 #> [34093] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 #> [34111] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 #> [34129] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 #> [34147] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 #> [34165] 831 831 831 831 831 831 832 832 832 832 832 832 832 832 832 832 832 832 #> [34183] 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 #> [34201] 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 #> [34219] 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 #> [34237] 832 832 832 832 832 832 832 832 832 832 832 832 832 832 833 833 833 833 #> [34255] 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 #> [34273] 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 #> [34291] 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 #> [34309] 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 834 834 #> [34327] 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 #> [34345] 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 #> [34363] 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 #> [34381] 834 834 834 834 834 834 834 834 835 835 835 835 835 835 835 835 835 835 #> [34399] 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 #> [34417] 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 #> [34435] 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 #> [34453] 835 835 835 835 835 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34471] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34489] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34507] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34525] 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 836 #> [34543] 836 836 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [34561] 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [34579] 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [34597] 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [34615] 837 837 837 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 #> [34633] 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 #> [34651] 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 #> [34669] 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 #> [34687] 838 838 838 838 838 838 838 838 838 838 838 838 838 839 839 839 839 839 #> [34705] 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 #> [34723] 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 #> [34741] 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 #> [34759] 839 839 839 839 839 839 839 839 839 839 839 839 839 840 840 840 840 840 #> [34777] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [34795] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [34813] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [34831] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [34849] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 841 #> [34867] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 #> [34885] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 #> [34903] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 #> [34921] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 #> [34939] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 842 #> [34957] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [34975] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [34993] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [35011] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [35029] 842 842 842 842 842 842 843 843 843 843 843 843 843 843 843 843 843 843 #> [35047] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 #> [35065] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 #> [35083] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 #> [35101] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 #> [35119] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [35137] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [35155] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [35173] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [35191] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 845 845 #> [35209] 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 #> [35227] 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 #> [35245] 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 #> [35263] 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 #> [35281] 845 845 845 845 845 845 845 845 845 846 846 846 846 846 846 846 846 846 #> [35299] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [35317] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [35335] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [35353] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [35371] 846 846 846 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 #> [35389] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 #> [35407] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 #> [35425] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 #> [35443] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 848 848 848 848 #> [35461] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [35479] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [35497] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [35515] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [35533] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 849 849 849 #> [35551] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [35569] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [35587] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [35605] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [35623] 849 849 849 849 849 849 850 850 850 850 850 850 850 850 850 850 850 850 #> [35641] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [35659] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [35677] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [35695] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [35713] 850 850 850 850 850 850 850 850 850 850 850 850 851 851 851 851 851 851 #> [35731] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [35749] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [35767] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [35785] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [35803] 851 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [35821] 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [35839] 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [35857] 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [35875] 852 852 852 852 852 852 852 852 852 852 852 852 852 852 853 853 853 853 #> [35893] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 #> [35911] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 #> [35929] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 #> [35947] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 854 #> [35965] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [35983] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [36001] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [36019] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [36037] 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 855 855 855 #> [36055] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36073] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36091] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36109] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36127] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [36145] 855 855 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36163] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36181] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36199] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36217] 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 856 #> [36235] 856 856 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [36253] 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [36271] 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [36289] 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [36307] 857 857 857 857 857 857 857 857 857 857 857 858 858 858 858 858 858 858 #> [36325] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [36343] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [36361] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [36379] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [36397] 858 858 858 858 858 858 858 858 858 858 858 858 859 859 859 859 859 859 #> [36415] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36433] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36451] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36469] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36487] 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 859 #> [36505] 859 859 859 859 859 860 860 860 860 860 860 860 860 860 860 860 860 860 #> [36523] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 #> [36541] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 #> [36559] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 #> [36577] 860 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [36595] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [36613] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [36631] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [36649] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [36667] 861 861 861 861 861 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [36685] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [36703] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [36721] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [36739] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [36757] 862 862 862 862 862 862 862 862 862 862 862 862 863 863 863 863 863 863 #> [36775] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [36793] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [36811] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [36829] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [36847] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 #> [36865] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [36883] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [36901] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [36919] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [36937] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [36955] 864 864 864 864 864 864 865 865 865 865 865 865 865 865 865 865 865 865 #> [36973] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 #> [36991] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 #> [37009] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 #> [37027] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 866 #> [37045] 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 #> [37063] 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 #> [37081] 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 #> [37099] 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 #> [37117] 866 866 866 866 866 866 867 867 867 867 867 867 867 867 867 867 867 867 #> [37135] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 #> [37153] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 #> [37171] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 #> [37189] 867 867 867 867 867 867 867 867 867 867 867 868 868 868 868 868 868 868 #> [37207] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37225] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37243] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37261] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37279] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [37297] 868 868 868 868 868 868 869 869 869 869 869 869 869 869 869 869 869 869 #> [37315] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 #> [37333] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 #> [37351] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 #> [37369] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 #> [37387] 869 869 869 869 869 869 869 869 870 870 870 870 870 870 870 870 870 870 #> [37405] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [37423] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [37441] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [37459] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [37477] 870 870 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37495] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37513] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37531] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37549] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [37567] 871 871 871 871 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [37585] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [37603] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [37621] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [37639] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [37657] 872 872 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 #> [37675] 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 #> [37693] 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 #> [37711] 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 #> [37729] 873 873 873 873 873 873 873 873 873 873 873 873 874 874 874 874 874 874 #> [37747] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [37765] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [37783] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [37801] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [37819] 874 874 874 874 874 874 874 874 874 874 874 875 875 875 875 875 875 875 #> [37837] 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 #> [37855] 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 #> [37873] 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 #> [37891] 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 875 #> [37909] 875 875 875 875 875 875 876 876 876 876 876 876 876 876 876 876 876 876 #> [37927] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [37945] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [37963] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [37981] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [37999] 876 876 876 876 876 876 877 877 877 877 877 877 877 877 877 877 877 877 #> [38017] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [38035] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [38053] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [38071] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [38089] 877 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38107] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38125] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38143] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38161] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [38179] 878 878 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [38197] 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [38215] 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [38233] 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [38251] 879 879 879 879 879 879 879 879 879 880 880 880 880 880 880 880 880 880 #> [38269] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 #> [38287] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 #> [38305] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 #> [38323] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 881 #> [38341] 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [38359] 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [38377] 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [38395] 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [38413] 881 881 881 881 881 882 882 882 882 882 882 882 882 882 882 882 882 882 #> [38431] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 #> [38449] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 #> [38467] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 #> [38485] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 883 #> [38503] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38521] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38539] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38557] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [38575] 883 883 883 883 883 883 883 883 883 883 883 883 883 884 884 884 884 884 #> [38593] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [38611] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [38629] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [38647] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [38665] 884 884 884 884 884 884 884 885 885 885 885 885 885 885 885 885 885 885 #> [38683] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [38701] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [38719] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [38737] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [38755] 885 885 885 885 885 885 885 885 886 886 886 886 886 886 886 886 886 886 #> [38773] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [38791] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [38809] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [38827] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [38845] 886 886 886 886 886 886 886 887 887 887 887 887 887 887 887 887 887 887 #> [38863] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [38881] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [38899] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [38917] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [38935] 887 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [38953] 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [38971] 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [38989] 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [39007] 888 888 888 888 888 888 888 888 888 888 889 889 889 889 889 889 889 889 #> [39025] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39043] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39061] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39079] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39097] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 #> [39115] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 890 890 #> [39133] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39151] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39169] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39187] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [39205] 890 890 890 890 890 890 890 890 890 890 890 890 891 891 891 891 891 891 #> [39223] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [39241] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [39259] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [39277] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [39295] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 892 892 892 892 #> [39313] 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 #> [39331] 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 #> [39349] 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 #> [39367] 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 #> [39385] 892 892 892 892 892 892 893 893 893 893 893 893 893 893 893 893 893 893 #> [39403] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39421] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39439] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39457] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [39475] 893 893 893 893 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39493] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39511] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39529] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39547] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [39565] 894 894 894 894 894 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [39583] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [39601] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [39619] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [39637] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [39655] 895 895 895 895 895 895 896 896 896 896 896 896 896 896 896 896 896 896 #> [39673] 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 #> [39691] 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 #> [39709] 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 #> [39727] 896 896 896 896 896 896 896 896 896 896 896 896 897 897 897 897 897 897 #> [39745] 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 #> [39763] 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 #> [39781] 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 #> [39799] 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 #> [39817] 897 897 897 897 897 897 897 897 897 897 897 898 898 898 898 898 898 898 #> [39835] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [39853] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [39871] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [39889] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [39907] 898 898 898 898 898 898 899 899 899 899 899 899 899 899 899 899 899 899 #> [39925] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 #> [39943] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 #> [39961] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 #> [39979] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 899 #> [39997] 899 899 899 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40015] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40033] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40051] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40069] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [40087] 900 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40105] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40123] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40141] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40159] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 #> [40177] 901 901 901 901 901 901 902 902 902 902 902 902 902 902 902 902 902 902 #> [40195] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40213] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40231] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40249] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [40267] 902 902 902 902 902 902 902 902 902 903 903 903 903 903 903 903 903 903 #> [40285] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40303] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40321] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40339] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [40357] 903 903 903 903 903 903 903 903 903 903 903 904 904 904 904 904 904 904 #> [40375] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40393] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40411] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40429] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [40447] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40465] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40483] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40501] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40519] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [40537] 905 905 905 905 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [40555] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [40573] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [40591] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [40609] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [40627] 906 906 906 906 906 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [40645] 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [40663] 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [40681] 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [40699] 907 907 907 907 907 907 907 907 908 908 908 908 908 908 908 908 908 908 #> [40717] 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 #> [40735] 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 #> [40753] 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 #> [40771] 908 908 908 908 908 908 908 908 908 908 909 909 909 909 909 909 909 909 #> [40789] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [40807] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [40825] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [40843] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [40861] 909 909 909 909 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [40879] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [40897] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [40915] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [40933] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [40951] 910 910 910 910 910 910 911 911 911 911 911 911 911 911 911 911 911 911 #> [40969] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [40987] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [41005] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [41023] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [41041] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 912 912 912 #> [41059] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41077] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41095] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41113] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41131] 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [41149] 912 912 912 912 912 912 912 912 912 912 912 912 912 913 913 913 913 913 #> [41167] 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 #> [41185] 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 #> [41203] 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 #> [41221] 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 #> [41239] 913 913 913 913 913 913 913 913 913 913 914 914 914 914 914 914 914 914 #> [41257] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41275] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41293] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41311] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [41329] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 915 #> [41347] 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [41365] 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [41383] 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [41401] 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [41419] 915 915 915 915 915 915 915 915 915 915 916 916 916 916 916 916 916 916 #> [41437] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41455] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41473] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41491] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41509] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [41527] 916 916 916 916 916 916 916 916 916 916 916 916 916 917 917 917 917 917 #> [41545] 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [41563] 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [41581] 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [41599] 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [41617] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [41635] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [41653] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [41671] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [41689] 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [41707] 918 918 918 918 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [41725] 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [41743] 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [41761] 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [41779] 919 919 919 919 919 919 919 919 919 919 919 919 919 920 920 920 920 920 #> [41797] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [41815] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [41833] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [41851] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [41869] 920 920 920 920 920 920 920 920 920 920 920 921 921 921 921 921 921 921 #> [41887] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [41905] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [41923] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [41941] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [41959] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 921 #> [41977] 921 921 921 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [41995] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [42013] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [42031] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [42049] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [42067] 922 922 922 922 922 922 922 922 923 923 923 923 923 923 923 923 923 923 #> [42085] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42103] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42121] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42139] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [42157] 923 923 923 923 923 923 923 923 923 923 924 924 924 924 924 924 924 924 #> [42175] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [42193] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [42211] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [42229] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [42247] 924 924 924 924 924 924 924 924 924 924 924 924 925 925 925 925 925 925 #> [42265] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42283] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42301] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42319] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42337] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [42355] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 #> [42373] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 #> [42391] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 #> [42409] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 926 #> [42427] 926 926 926 926 926 926 926 926 926 926 926 926 926 926 927 927 927 927 #> [42445] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42463] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42481] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42499] 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 927 #> [42517] 927 927 927 927 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42535] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42553] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42571] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42589] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 928 #> [42607] 928 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [42625] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [42643] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [42661] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [42679] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [42697] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [42715] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [42733] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [42751] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [42769] 930 930 930 930 930 930 930 930 930 930 931 931 931 931 931 931 931 931 #> [42787] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [42805] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [42823] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [42841] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [42859] 931 931 931 931 931 931 931 931 931 931 932 932 932 932 932 932 932 932 #> [42877] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [42895] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [42913] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [42931] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [42949] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [42967] 932 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [42985] 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [43003] 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [43021] 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [43039] 933 933 933 933 933 933 933 933 933 934 934 934 934 934 934 934 934 934 #> [43057] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43075] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43093] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43111] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43129] 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [43147] 934 934 934 934 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43165] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43183] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43201] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43219] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [43237] 935 935 935 935 935 935 935 935 935 936 936 936 936 936 936 936 936 936 #> [43255] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43273] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43291] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43309] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [43327] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [43345] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [43363] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [43381] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [43399] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 938 #> [43417] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [43435] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [43453] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [43471] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [43489] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 939 939 939 #> [43507] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 #> [43525] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 #> [43543] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 #> [43561] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 #> [43579] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 940 #> [43597] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [43615] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [43633] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [43651] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [43669] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [43687] 940 940 940 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [43705] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [43723] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [43741] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [43759] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 941 #> [43777] 941 941 941 941 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [43795] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [43813] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [43831] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [43849] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [43867] 942 942 942 942 942 942 942 943 943 943 943 943 943 943 943 943 943 943 #> [43885] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [43903] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [43921] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [43939] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [43957] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 944 #> [43975] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [43993] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [44011] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [44029] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [44047] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [44065] 944 944 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44083] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44101] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44119] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44137] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [44155] 945 945 945 945 945 945 945 945 945 945 945 946 946 946 946 946 946 946 #> [44173] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 #> [44191] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 #> [44209] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 #> [44227] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 #> [44245] 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 946 947 947 #> [44263] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44281] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44299] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44317] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44335] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44353] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [44371] 947 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44389] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44407] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44425] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44443] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [44461] 948 948 948 948 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44479] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44497] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44515] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44533] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [44551] 949 949 949 949 949 949 949 949 949 949 950 950 950 950 950 950 950 950 #> [44569] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [44587] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [44605] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [44623] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [44641] 950 950 950 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [44659] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [44677] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [44695] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [44713] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 #> [44731] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 952 952 952 952 #> [44749] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [44767] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [44785] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [44803] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [44821] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [44839] 952 952 952 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [44857] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [44875] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [44893] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [44911] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [44929] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 954 #> [44947] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [44965] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [44983] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [45001] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [45019] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 954 #> [45037] 954 954 954 954 954 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45055] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45073] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45091] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45109] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [45127] 955 955 955 955 955 955 956 956 956 956 956 956 956 956 956 956 956 956 #> [45145] 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 #> [45163] 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 #> [45181] 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 #> [45199] 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 957 957 #> [45217] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45235] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45253] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45271] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45289] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [45307] 957 957 957 957 957 957 957 957 957 957 957 957 957 958 958 958 958 958 #> [45325] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [45343] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [45361] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [45379] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [45397] 958 958 958 958 958 958 958 958 958 958 958 959 959 959 959 959 959 959 #> [45415] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [45433] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [45451] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [45469] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [45487] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 960 960 960 960 #> [45505] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [45523] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [45541] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [45559] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [45577] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 961 #> [45595] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [45613] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [45631] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [45649] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [45667] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 962 962 962 #> [45685] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [45703] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [45721] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [45739] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [45757] 962 962 962 962 962 962 963 963 963 963 963 963 963 963 963 963 963 963 #> [45775] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [45793] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [45811] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [45829] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [45847] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 964 964 #> [45865] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [45883] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [45901] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [45919] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [45937] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [45955] 964 964 964 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [45973] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [45991] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [46009] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [46027] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [46045] 965 965 965 965 965 965 965 965 965 966 966 966 966 966 966 966 966 966 #> [46063] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46081] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46099] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46117] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [46135] 966 966 966 966 966 966 967 967 967 967 967 967 967 967 967 967 967 967 #> [46153] 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 #> [46171] 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 #> [46189] 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 #> [46207] 967 967 967 967 967 967 967 967 967 967 967 967 967 968 968 968 968 968 #> [46225] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46243] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46261] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46279] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46297] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [46315] 968 968 968 968 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46333] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46351] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46369] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46387] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [46405] 969 969 969 969 969 969 969 969 970 970 970 970 970 970 970 970 970 970 #> [46423] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46441] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46459] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46477] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46495] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [46513] 970 970 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [46531] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [46549] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [46567] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [46585] 971 971 971 971 971 971 971 971 971 971 971 971 971 972 972 972 972 972 #> [46603] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [46621] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [46639] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [46657] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [46675] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [46693] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 973 973 973 #> [46711] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [46729] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [46747] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [46765] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [46783] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [46801] 973 973 973 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [46819] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [46837] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [46855] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [46873] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [46891] 974 974 974 974 974 974 974 974 974 974 975 975 975 975 975 975 975 975 #> [46909] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [46927] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [46945] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [46963] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [46981] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 976 #> [46999] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47017] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47035] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47053] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [47071] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 977 977 #> [47089] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47107] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47125] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47143] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47161] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [47179] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 978 978 #> [47197] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47215] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47233] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47251] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47269] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [47287] 978 978 978 978 978 978 978 978 978 978 978 978 978 979 979 979 979 979 #> [47305] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47323] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47341] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47359] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47377] 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 979 #> [47395] 979 979 979 979 979 979 979 979 979 979 980 980 980 980 980 980 980 980 #> [47413] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47431] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47449] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47467] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47485] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [47503] 980 980 980 980 980 980 980 980 980 980 981 981 981 981 981 981 981 981 #> [47521] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [47539] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [47557] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [47575] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [47593] 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [47611] 981 981 981 981 981 981 982 982 982 982 982 982 982 982 982 982 982 982 #> [47629] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [47647] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [47665] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [47683] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [47701] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 983 #> [47719] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [47737] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [47755] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [47773] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [47791] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [47809] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [47827] 983 983 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [47845] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [47863] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [47881] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [47899] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [47917] 984 984 984 984 984 984 984 984 985 985 985 985 985 985 985 985 985 985 #> [47935] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [47953] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [47971] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [47989] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [48007] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [48025] 985 985 985 985 985 985 986 986 986 986 986 986 986 986 986 986 986 986 #> [48043] 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [48061] 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [48079] 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [48097] 986 986 986 986 986 986 986 986 986 986 986 986 987 987 987 987 987 987 #> [48115] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48133] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48151] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48169] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48187] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [48205] 987 987 987 987 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48223] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48241] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48259] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48277] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [48295] 988 988 988 988 988 988 988 988 988 989 989 989 989 989 989 989 989 989 #> [48313] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48331] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48349] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48367] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48385] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [48403] 989 989 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48421] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48439] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48457] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48475] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [48493] 990 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48511] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48529] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48547] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48565] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48583] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [48601] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 992 992 992 #> [48619] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [48637] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [48655] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [48673] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [48691] 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [48709] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [48727] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [48745] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [48763] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [48781] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [48799] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 994 #> [48817] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [48835] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [48853] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [48871] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [48889] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [48907] 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [48925] 994 994 994 994 994 994 994 994 994 994 994 994 994 995 995 995 995 995 #> [48943] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [48961] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [48979] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [48997] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [49015] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [49033] 995 995 995 995 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49051] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49069] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49087] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49105] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49123] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [49141] 996 996 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49159] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49177] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49195] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49213] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [49231] 997 997 997 997 997 997 997 997 997 997 998 998 998 998 998 998 998 998 #> [49249] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49267] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49285] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49303] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49321] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [49339] 998 998 998 998 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49357] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49375] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49393] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49411] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [49429] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #>  #> [[4]] #>     [1]   1   3   3   7   2   8   5   7   2   8   6   8  11   4  11  14  18  11 #>    [19]  14   0   4   6  17   0   3  19   0   3  18   3   5   3  14  22  25   4 #>    [37]   5  14   7  21  10   8  28   4   6   8  11  15  20  14  32   0   5  27 #>    [55]   4  12  15  20  21  25   1   2  16  30   2   4  10  13  18  24  25  28 #>    [73]   5  20  25  32   1   2   3  22  25  26   0   1  12  29  40  17  31   1 #>    [91]   5  13  32   3  20   5  13  27  31  45   8  12  15  24  42   2  23  24 #>   [109]  27  34  36  41  45  12  19  23  35  43   8  21  22  25  44  45  12  34 #>   [127]  36  13  19  23  27  35  37  46  49  50   6  12  20  21  29  48   0   6 #>   [145]   8  11  41  43  45  51  52   1   3   4  34  53  11  20  21  26  31   1 #>   [163]   5   8   9  17  18  25  35  36  46  56   1  24  35  57   7   8  36  39 #>   [181]  48   7  39  44  45  50  51  55  13  33  12  31  42  52  12  14  17  21 #>   [199]  25  29  31  40  43  50  54   0   3  11  14  16  20  42   3   6  43  51 #>   [217]  56  58  17  18  21  26  28  29  36  47  54  60   0  21  24  26  27  30 #>   [235]  41  59  63   8   9  16  18  21  34  37  47  57  62   8  10  27  30  35 #>   [253]  47  54  68   7  19  35  41  57  69   3  29  32  50  68  20  31  53  60 #>   [271]  62  71   1   8  10  14  23  50  53  58  61  66  69  71   5  21  23  33 #>   [289]  35  52  54  70   2   9  11  28  29  41  43  51  52  64   1   7   8  11 #>   [307]  28  50  58  70  72  12  33  56  61  64  66  71  18  39  46  51  56   3 #>   [325]   4  34  47  53  55  73   1  23  26  39  63  29  31  57  61  67  68  77 #>   [343]   8  15  19  33  45  62  65  77  81   6  14  32  34  39  57  76  79   5 #>   [361]  14  21  30  33  36  38  45  64  68  69  70  75  79   0  53  65  68  74 #>   [379]  77   0   1   4  65  66  68  73   5  32  35  39  45  52  65  80  86   8 #>   [397]  11  26  31  54  58  73  79  11  15  17  20  22   9  23  29  34  47  50 #>   [415]  67  73  87  89   7  12  16  19  31  54  84  85   5  15  20  29  32  43 #>   [433]  52  82  89   3  17  26  28  30  31  41  58  73  78  85  88  92  18  48 #>   [451]  66  68  69  79  81  91   2   6  66  72  82   3   7  14  17  20  30  35 #>   [469]  47  53  89   1   3  12  16  21  44  57  59  73  79  81  89   2  10  21 #>   [487]  24  29  30  35  36  41  46  56  59  61   4   6  14  37  40  48  50  52 #>   [505]  58  63  77   6  21  34  38  42  50  53  62  64  76  86  89   0   8  14 #>   [523]  15  19  56  62  83  97  19  20  31  40  41  44  53  65  69  80  82  99 #>   [541]   8  20  24  29  44  70  76   9  10  19  29  32  35  36  71  82 101   7 #>   [559]   8  12  15  52  53  54  55  67  70  71  73  81  87 100  13  23  27  32 #>   [577]  54  58  59  66  86  95   1  13  50  65  68  77  98   3  16  22  26  34 #>   [595]  56  71  80  85  91 101 102 103 104   6  12  14  38  39  44  73  96  98 #>   [613] 104 105 106   0   6   9  24  37  44  70  75  82  92   2  37  51  71  75 #>   [631]  82 101 105   4   5   8  22  24  37  53  86  96 108 109   1   3  11  39 #>   [649]  58  64  87 112   2  20  26  27  28  56  61  65  74  86  90  94  98 105 #>   [667] 107   3  28  29  45  63  66  69  73  74  83  91  92 101 110 113 114   3 #>   [685]   5  19  20  31  32  93 100 101 105 109 112   3  14  24  26  38  41  59 #>   [703]  95   4  26  27  47  53  67  81  88 100 101 103 104  18  21  27  30  40 #>   [721]  58  59  70  73  75  82  92   7  11  35  50  61  74 109 117  19  23  35 #>   [739]  40  58  61  67  83  15  28  32  40  44  74  91  95  99 105 120  31  45 #>   [757]  60  78  82  84  92 120  15  19  21  52  76  98 101 102 120 123   1  45 #>   [775]  46  65  75  80  91  92 103 108 118   3   9  12  16  39  62  70  78  99 #>   [793] 100 103 104 123   0   1   6  20  21  32  39  48  49  62  63  66  68  71 #>   [811]  97 108 126  16  17  19  29  33  46  75  86  93 102 115   0  21  27  55 #>   [829]  63  79  80  96 102 107 110 111 126  13  21  32  37  39  54  75  77  85 #>   [847]  91  94 101 108 119 123  13  21  27  34  38  41  43  65  69  95 103  14 #>   [865]  15  17  21  22  38  44  46  58  59  62  67  68  82  89 101 108 118   6 #>   [883]   7   8  12  17  21  27  28  38  48  53  66  69  70  73  81  83  86  91 #>   [901] 118 121 126   3   4   6  10  12  18  28  36  39  47  54  55  63  70  84 #>   [919]  89 105 119 126 133   3   4  11  12  20  29  40  66  74  76  88 106 126 #>   [937] 127 129   4   5  21  27  42  43  44  52  61  62  68  86  93 130 133  22 #>   [955]  35  44  63  91 104 111 113 116 119 125 136   3  14  22  52  56  61  76 #>   [973]  83  96 114 117 130   0   3   4  32  43  53  55  65  67  69  89 100 102 #>   [991] 106 108 123 129 135   4  22  32  33  39  51  55  61  63  88  95 102 108 #>  [1009] 119 127 131   0   7  16  23  27  38  54  68  99 114 123 127 131 134  13 #>  [1027]  14  15  26  32  35  42  44  46  49  79  86 104 110 115 128 134 140   0 #>  [1045]  15  16  20  28  34  44  46  71  76  94   4  16  20  33  38  53  72  78 #>  [1063]  81  96 104 106 115 116 123 129 141   2  15  22  37  61  64  74  82  88 #>  [1081]  99 105 110 133 138  22  27  30  37  70  80  84  93 110 113 118 119 123 #>  [1099] 124 125 135 141  13  28  31  44  68  69  72  96 119 132 135 139 145  13 #>  [1117]  15  17  21  37  40  58  67  70  78 107 112 141 145   7  10  19  21  22 #>  [1135]  25  36  42  58  63  81  91  95 103 107 124 127   2   8  12  21  25  26 #>  [1153]  30  42  65  79  83 104 111 117 120  16  18  35  51  57  68  70  73  78 #>  [1171]  85  95 102 106 110 117 121 143   7  14  24  55  56  65  73  83  91  99 #>  [1189] 137   2   8  19  22  46  51  52  55  63  65  68  87 108 129 130 139 152 #>  [1207]   5   8  10  45  52  66 105 123 138 147 153   7  20  33  72  83  95  98 #>  [1225] 124 125 136 139 147   0   9  12  15  17  33  39  43  52  64  78  91  93 #>  [1243] 106 109 114 132 139   8  18  19  47  65  71  84 112 116 117 120 136 149 #>  [1261] 156   0   2  16  20  21  23  27  64  81  84  94  97  98 126 131 143 146 #>  [1279] 149 151  13  25  27  32  36  40  43  55  59  77 107 114 131 146 154   2 #>  [1297]  12  31  46  72 103 105 127 128 144 145 151 157   5   9  26  60  61  69 #>  [1315]  74  79  84  92  98 101 102 108 112 121 150 158   3   7  11  21  35  42 #>  [1333]  68  84  86  89 123 138 142 148   3   7  34  41  51  60  66  69 124  15 #>  [1351]  42  53  55  57  89  92 107 120 125 139 143 156  10  29  39  53  54  58 #>  [1369]  62  63  73  75  76  80  92  99 115 145  27  31  85  92 107 125 137 138 #>  [1387] 145 164   6  24  26  36  46  50  52  74  86 101 123 135 141 144 149 156 #>  [1405] 163 164  10  17  23  30  34  38  48  54  73 110 112 130 142 162  22  30 #>  [1423]  36  49 130 138 141 144 154 156   7  17  35  45  46  63  70  72  87  94 #>  [1441] 123 126 134 139 143 151 165 166  26  29  38  40  75  89 102 105 106 110 #>  [1459] 111 115 135 159   1  23  27  30  53  81  85  96 103 114 122 138 147 153 #>  [1477] 165 166   4  22  45  51  57  66  71  89 107 108 110 113 131 138 139 150 #>  [1495] 152 169 170 171  19  22  36  41  51  59  77  85 113 141 156 169 171  17 #>  [1513]  33  41  58  60  62  65 110 114 129 133 141 149 150 155 160  13  29  48 #>  [1531]  58  66  77  83  89  98 103 110 120 122 124 125 130 134 140 145 150 152 #>  [1549] 172 174   5   7  14  26  36  37  40  47  62  63  82  90 105 106 108 118 #>  [1567] 124 125 137 140 159   2  16  19  24  37  40  55  64  87  94 106 108 122 #>  [1585] 132 134 156 157 176   4   6  15  48  95 100 103 105 123 137 152 160 173 #>  [1603] 178   2   4  32  57  58  62  69  78  92  93  95 115 162 176  26  33  48 #>  [1621]  50  51  63  67  71  76  79  86  89  90 101 105 115 123 125 135 150 172 #>  [1639] 173 111 112 115 133 147 172   5  13  18  25  65  79 123 137 139 149 156 #>  [1657] 158 166 170  20  56  63  83 102 106 111 155 183  11  23  27  30  58  61 #>  [1675]  64  76  81  87  98 120 126 132 134 135 158 171 172 182  10  27  53  64 #>  [1693]  87  96  97  99 107 110 113 120 136 152 155 173 185  39  46  51  56  62 #>  [1711]  84  91 100 106 113 114 121 123 130 134 146 153 156 158 177 183   5  10 #>  [1729]  39  59  69  71  72  75  83  94 114 132 156 158 162 186   3   5  29  67 #>  [1747]  68  78  83  96 112 118 125 164  14  17  30  39  76  79  86  89  92  94 #>  [1765]  98 102 105 112 118 133 136 146 157 172 187   4   7  27  32  62  75  78 #>  [1783]  82 103 105 108 134 153 166 168 175 177  10  14  18  37  47  51  53  54 #>  [1801]  58  99 100 110 113 125 137 140 152 153 166 172  22  47  48  51  58  62 #>  [1819]  68 109 118 128 132 137 143 174 188 190  13  38  51  52  64  78 107 120 #>  [1837] 132 146 191  11  16  28  31  35  38  47  54  61  70  77  78  96 102 109 #>  [1855] 114 140 171 175 176 184  14  20  24  26  34  61  78  81  87  97 119 146 #>  [1873] 154 156 158 163 172 176 181 184 187  15  20  26  47  57  61  76  85  93 #>  [1891]  94  97 107 129 145 158 162 183 184  25  26  30  35  37  40  45  48  52 #>  [1909]  65  67  72  79  80  81  94  99 104 110 118 119 128 131 139 155 159 163 #>  [1927] 166 189   6  21  28  32  46  68  73  76  80  87 101 118 137 147 157 158 #>  [1945] 172 179 197  19  20  25  32  50  75 104 105 124 147 148 152 154 162 166 #>  [1963] 176 195 198   2  18  39  45  48  62  82  83  86  87  95 107 113 136 156 #>  [1981] 171 176 178 182 195  19  23  31  45  49  68  73  77  89  97 108 116 119 #>  [1999] 138 139 140 141 156 176 188 201   0   1   6  11  14  20  33  34  41  84 #>  [2017]  91  99 122 133 137 168 169 174 178 180 182 186  15  27  29  66  86  87 #>  [2035]  95 104 106 113 123 125 130 131 135 149 155 174 200 201   6  13  27  36 #>  [2053]  63  73 108 117 122 124 126 142 156 157 181 183 197 203   0   5  10  26 #>  [2071]  43  61  72  76  97  98 110 112 118 133 143 149 175 183 186  12  13  16 #>  [2089]  22  44  69  86 103 111 127 141 151 153 167 174 177   4  13  26  39  58 #>  [2107]  60  67  70 119 128 134 136 142 144 148 161 167 195 198 205   0   1  13 #>  [2125]  18  50  55  56  57  71  75  79 117 120 144 146 147 150 156 194 202   2 #>  [2143]   8  16  17  41  79  81  83  95 112 125 126 127 154 164 175 193 206   5 #>  [2161]  12  15  27  54  55  63  84 100 123 126 136 157 162 173 174 180 190 191 #>  [2179] 198  12  25  47  91 124 140 159 164 199  14  16  25  34  40  44  61  74 #>  [2197]  89  97 109 123 125 129 138 145 153 161 162 193 203  26  27  28  42  44 #>  [2215]  45  47  50  52  61  71  77  81 127 131 163 167 173 178 183 186 187 201 #>  [2233]  12  34  46  53  54  77  81  94 106 143 144 147 149 154 158 160 176 179 #>  [2251] 208   5  12  22  25  33  39  41  45  52  54  57  91 112 119 132 144 149 #>  [2269] 151 171 172 175 177 186 198 211  15  20  22  25  33  38  53  91  96 105 #>  [2287] 115 141 152 154 169 172 184 209   0   3  32  33  47  49  52  71  76  85 #>  [2305]  86  93  99 119 127 128 135 139 140 146 148 149 159 175 181 194 200 204 #>  [2323] 208 209 211  17  21  23  27  33  42  50  59  62  67  78  87  99 101 111 #>  [2341] 122 133 137 151 155 158 159 167 168 191 196 205 212   1  26  51  56  57 #>  [2359]  83  89  94  97 108 118 119 139 145 157 163 177 187 196 197 215 217   4 #>  [2377]  21  30  42  45  53  61  62  65  68  82  85  88  96 100 104 122 128 131 #>  [2395] 136 138 139 162 165 170 191 193 208 213 214 216   1   8  11  12  17  23 #>  [2413]  25  31  41  42  48  51  54  56  60  67  73  78  79  81  88  99 102 112 #>  [2431] 119 153 172 190 193 194 202 207 217  11  33  52  59  61  62  72  75  82 #>  [2449]  93 107 118 124 126 130 138 143 147 180 182 186 196 199 201 213 219   5 #>  [2467]  11  26  48  52  54  56  58  94 107 110 113 149 152 157 162 181 182 185 #>  [2485] 193 195   6  26  29  44  49  60  77  79  85  90 105 108 112 120 141 152 #>  [2503] 157 171 176 177 178 216 220   1   8  18  26  31  32  34  40  78  85  87 #>  [2521]  92 114 122 138 141 148 149 150 165 175 176 190 192 201 208 210 212   0 #>  [2539]   2   5   7   9  46  69  80 117 120 125 156 193 195 206   3   5  16  38 #>  [2557]  40  44  46  56  58  70  96 102 105 110 113 116 119 126 129 134 144 173 #>  [2575] 182 190 199 204 206 215 227   0  19  23  45  56  62  66  70  94 102 119 #>  [2593] 120 124 127 128 131 133 135 146 151 157 160 190 227   9  10  19  30  44 #>  [2611]  50  67  72  77  79  80  81  95 102 104 117 130 133 134 142 143 152 159 #>  [2629] 183 191 201 204 211   0  12  43  61  72  80  83  90  95  99 117 120 121 #>  [2647] 124 130 138 153 170 178 198  14  23  27  44  54  60  61  62  69  85  87 #>  [2665]  92  99 109 127 130 140 145 151 157 160 161 168 172 180 197 217  13  15 #>  [2683]  24  30  40  57  60  62  76  83 102 109 110 116 135 139 143 148 153 167 #>  [2701] 200 201 230   0  15  26  42  47  54  57  65  71  79 108 128 129 139 141 #>  [2719] 144 150 154 165 179 183 191 202 205 227 229 230  28  58  67  70  78  81 #>  [2737]  87  92 112 113 123 124 125 128 142 152 158 167 184 192 198 205   5   6 #>  [2755]   9  25  31  33  35  43  55  66  67  77  85  96 108 118 126 149 160 164 #>  [2773] 166 172 208   5  15  17  30  33  57  61  64  66  84  97 100 103 130 136 #>  [2791] 141 146 149 158 169 178 187 188 194 196 205 222 223 224 227 229 233  23 #>  [2809]  33  34  37  49  89 101 119 120 133 139 147 154 156 158 159 178 192 205 #>  [2827] 207 216 237  26  62  66  88 122 148 150 179 187 196 223  10  20  29  36 #>  [2845]  40  59  61  69  72  73  76  78  90 100 113 114 121 125 137 140 151 156 #>  [2863] 161 171 174 178 181 184 186 187 189 215 234   9  18  23  37  42  47  65 #>  [2881]  84  91 117 127 135 143 148 167 174 200 203 223 234 235  11  30  34  50 #>  [2899]  55  85 116 127 145 156 166 180 203 211 223 225 233 237 238  13  20  38 #>  [2917]  57  68  79  91 109 112 115 120 122 127 134 135 144 152 163 165 172 173 #>  [2935] 180 209 212   0   5  24  27  33  36  57  62  95  99 111 138 144 157 174 #>  [2953] 182 190 199 215 243   4  19  21  24  29  30  32  39  56  62  74  75  81 #>  [2971]  94 110 118 129 169 202 207 214 226 242  17  18  37  43  45  49  71  76 #>  [2989]  82 108 116 119 125 130 157 176 201 207 221 224 230   3  15  17  18  32 #>  [3007]  55  63  64  69  86  93  96 135 142 152 153 161 186 194 203 205 211 214 #>  [3025] 243 244   8  14  21  23  48  50  67 102 106 121 127 129 131 136 152 163 #>  [3043] 171 175 203 204 207 226 230 238   2  18  28  32  42  48  61  71  74  94 #>  [3061] 103 106 116 118 140 148 153 160 178 198 203 204 206 208 233   7  11  25 #>  [3079]  26  39  46  51  69 109 137 138 162 197 206 214 228 229 238   1  14  21 #>  [3097]  25  41  49  64  75  95 103 162 165 176 187 192 199 201 213 214 218 230 #>  [3115] 231 235 238 246 247   6  20  27  33  34  35  55  76  78  85  94  98 108 #>  [3133] 119 126 128 138 139 152 156 157 161 177 180 186 187 194 198 199 212 219 #>  [3151] 221 222 236 239  28  30  31  40  62  63  74  82 101 105 107 117 124 133 #>  [3169] 141 143 149 161 172 174 183 195 198 208 216 218 225 226 231   4  20  33 #>  [3187]  41  52  74  84  92 106 124 127 137 139 140 143 150 151 181 193 211 214 #>  [3205] 228 231 233 239 247   1  35  51  55  63  71  79  84  93 100 103 114 119 #>  [3223] 128 153 170 171 199 204 208 226 231 232 233 248 252   3   4  24  29  64 #>  [3241]  65  70  95 114 136 140 159 180 196 202 206 215 235 237 243 255  20  30 #>  [3259]  34  36  51  64  66  69  80  99 109 116 125 127 138 156 160 162 170 189 #>  [3277] 195 211 244 252   3  41  80  82  94 105 111 134 137 144 146 165 167 177 #>  [3295] 186 198 203 204 209 211 250   4  12  16  20  52  55  63  65  76  77  84 #>  [3313]  93  96 134 153 174 180 187 216 231 243 245 255  11  15  20  24  60 102 #>  [3331] 112 117 132 149 175 176 185 198 236 243 248   2   5  35  59  67  91  93 #>  [3349]  98 125 128 131 167 170 174 193 206 207 233 241 248   1  31  47  74  79 #>  [3367]  81  84 124 125 128 131 136 165 167 177 186 198 199 233 237 254   5   9 #>  [3385]  11  23  41  42  48  49  60  67  72  86  92  95  99 101 104 111 116 126 #>  [3403] 127 129 133 151 179 200 235 239 251 257  14  28  40  44  54  62  85  89 #>  [3421]  90 111 132 146 171 174 178 180 182 189 194 199 201 205 206 210 218 238 #>  [3439] 243 261   5  12  26  48  50  58  65  72  79  89  96 116 119 121 140 150 #>  [3457] 154 155 169 176 186 202 205 207 229 234 241 242 243   7  21  51  80  83 #>  [3475]  85 104 106 111 122 137 138 143 160 164 172 174 189 191 193 197 199 204 #>  [3493] 216 241 244   2   8  12  14  17  19  30  38  43  65  66  77  84  94  98 #>  [3511]  99 108 110 113 130 135 136 137 171 183 192 200 212 231 232 233 240 245 #>  [3529] 248 259   1   2   6  18  32  41  45  51  56  57  74  83  97 102 108 114 #>  [3547] 126 131 138 146 196 207 238 239 249 255  11  16  34  38  49  57  59  61 #>  [3565]  75  81  82  95  96 107 120 147 158 160 164 187 212 230 235 237 244 246 #>  [3583] 252 256  15  32  42  43  45  48  54  63  66  84  87  89 101 107 111 120 #>  [3601] 122 140 158 167 179 196 203 210 235 249 253 263 267   1   8  36  47  50 #>  [3619]  52  68  74  94 102 129 133 134 138 143 146 159 188 189 193 201 202 212 #>  [3637] 220 232 237 249   1   2  25  26  30  49  52  62  67  69 102 128 132 133 #>  [3655] 138 152 154 157 159 167 180 192 201 205 214 221 241 243 257 264  13  16 #>  [3673]  28  34  35  53  68  74  95 129 130 139 150 157 169 177 182 191 209 218 #>  [3691] 225 256   7  10  21  26  28  37  42  49  53  60  63  65  74 104 125 127 #>  [3709] 130 163 165 192 193 194 198 246 256  12  23  48  54  55  59  63  73  79 #>  [3727]  89  90  99 104 113 116 122 139 144 150 153 165 172 179 192 196 197 225 #>  [3745] 226 231 234 236 265   2  10  18  21  52  57  68  73  76  79  83  96 104 #>  [3763] 109 122 124 185 195 234 247 251 260 265 273  11  13  20  23  34  35  43 #>  [3781]  56  80  84 121 125 127 133 149 162 164 190 221 251  21  36  64  80  81 #>  [3799]  97 104 105 112 131 144 150 157 166 170 180 192 198 216 232 247 256  35 #>  [3817]  39  40  41  42  48  55  56  63 100 104 107 111 120 123 126 144 148 151 #>  [3835] 152 161 167 188 197 198 214 241 257 258 268 269 271 277   0  38  44  54 #>  [3853]  72  81  99 100 113 120 132 142 145 147 153 154 155 177 180 192 197 200 #>  [3871] 204 205 221 222 223 231 237 241 247 260   0   8  15  28  32  54  59  78 #>  [3889]  85  87  91  98  99 106 125 132 171 179 192 197 206 220 230 231 252 257 #>  [3907]  22  29  38  68  72 104 106 110 118 125 126 137 140 145 148 188 206 210 #>  [3925] 233 239 250 279   7  26  34  38  48  59  75  77  98 104 105 110 112 113 #>  [3943] 127 137 146 149 169 175 183 199 208 209 213 218 248 252 277   4  11  17 #>  [3961]  48  55  69  77  91 105 112 118 136 157 158 164 174 180 181 185 195 227 #>  [3979] 275 278 282   6  29  48  58  65  88  89  96 133 135 136 147 166 168 194 #>  [3997] 201 202 213 237 239 242 248 255 271 274 277 280  18  30  35  64  70  77 #>  [4015]  83  97 110 127 145 163 171 183 202 226 228 229 240 248 254 264 266 270 #>  [4033] 272  10  12  14  17  23  29  37  38  45  47  82  89  96  97 111 115 128 #>  [4051] 131 148 162 164 170 176 193 195 197 202 214 228 238 246 254 265 271   9 #>  [4069]  20  31  34  35  39  74  87  97  98  99 129 133 140 160 161 170 172 175 #>  [4087] 179 188 214 220 234 241 252 262 272 278 284   5   9  22  30  35  37  39 #>  [4105]  41  73  87 110 112 113 114 119 140 147 149 162 163 172 175 177 183 196 #>  [4123] 222 248 261 271 274 285  16  43  45  52  57  64  72  79  89  90 124 149 #>  [4141] 161 173 196 197 223 233 250 253 270 273 276 283  18  22  33  35  43  47 #>  [4159]  48  50  85  99 134 137 150 164 178 180 186 190 193 197 210 213 218 275 #>  [4177] 286   2   8  17  27  28  31  51  60  77  93 103 128 130 139 141 148 150 #>  [4195] 152 153 155 163 174 180 202 206 208 212 222 235 253 267 269   0   4  14 #>  [4213]  41  70  87  95 105 107 112 115 119 120 130 153 190 201 205 216 222 225 #>  [4231] 237 244 272 276 280 290   1   4   5  19  46  59  60  73  81  95  99 104 #>  [4249] 105 137 152 174 186 190 220 227 239 246 250 254 260 283 291   4  12  16 #>  [4267]  35  39  52  65  68  78  89 102 144 150 154 165 166 167 186 191 193 204 #>  [4285] 216 227 233 246 263 266 282 287 290   5   6  13  16  29  64  67  68  71 #>  [4303]  72  79  97 118 123 142 159 164 195 200 216 219 220 225 227 234 249 256 #>  [4321] 259 274 290  24  30  55  62  64  80  86  90 105 106 116 142 150 160 161 #>  [4339] 171 172 174 176 182 186 190 199 206 209 211 215 226 242 248  11  20  39 #>  [4357]  66  72  77  93 121 129 130 140 153 155 156 163 169 179 195 208 235 236 #>  [4375] 253 262 272 291   3  15  24  25  27  43  57  64  83  90  99 120 121 129 #>  [4393] 137 148 160 167 174 193 199 203 209 211 213 218 222 238 256 257   0  12 #>  [4411]  19  29  64  82  92  99 100 107 110 111 114 115 127 138 166 168 188 204 #>  [4429] 220 226 227 234 249 269 281 282 285 291   3   5   8  15  22  40  76  83 #>  [4447] 101 106 124 148 149 152 154 166 177 184 196 199 204 218 228 232 252 258 #>  [4465] 264 274 284 295   3   5   9  15  16  29  43  55  69  87 103 108 115 144 #>  [4483] 151 196 218 226 229 233 240 248 250 254 261 271 275 284   7  20  75  76 #>  [4501]  77  86  87  88  92  99 101 118 135 136 139 140 150 162 173 199 201 229 #>  [4519] 239 259 265 267 292  10  27  43  56  61  62  66  87 107 117 120 128 132 #>  [4537] 133 137 162 165 166 195 197 205 211 224 226 232 236 245 246 247 259 264 #>  [4555] 274 283 287   5   6  41  43  46  51  62  72  93 132 146 156 157 170 172 #>  [4573] 198 204 210 234 236 240 259 263 287 288  12  14  31  57  70  76  82  86 #>  [4591] 107 113 115 117 131 137 138 174 178 180 186 189 201 212 220 222 224 247 #>  [4609] 259 277 288 297 301   2   4   9  25  27  50  67  81  82  87  90  96  98 #>  [4627] 105 109 123 135 154 156 181 205 208 211 233 289 292 293   1   2   5  29 #>  [4645]  30  46  50  84 124 125 127 128 149 163 166 203 214 234 240 242 246 247 #>  [4663] 262 264 268 276 277 291 292 294 307  18  28  31  33  35  41  52  62  66 #>  [4681]  74  83  90  91  93 120 134 141 146 160 163 166 193 195 210 216 225 231 #>  [4699] 259 267 270 278 289 294 306   9  10  23  31  32  37  44  67  75  84 101 #>  [4717] 107 125 132 135 141 148 158 160 167 186 207 208 212 230 238 240 266 292 #>  [4735] 294   1   4   9  23  32  36  39  43  44  51  55  64  69  70  72  84  92 #>  [4753]  93 101 119 125 134 175 210 213 221 225 247 251 268 271 284 292 293   0 #>  [4771]   7  42  51  56  58  63  64  69  83  86  92  98  99 101 128 136 139 141 #>  [4789] 159 178 193 198 214 216 217 222 230 258 267 278 280 283 286 305   7  31 #>  [4807]  43  51  83  94 115 116 128 149 151 167 186 204 225 230 261 269 304 307 #>  [4825] 312  19  30  33  44  48  56  58  66  73  93 101 150 153 157 159 163 177 #>  [4843] 189 200 205 206 212 227 254 260 267 269 272 281 307 308  11  18  20  43 #>  [4861]  51  52  59  76  81  84  86  90  98 107 137 171 174 180 191 198 224 236 #>  [4879] 241 243 247 256 263 267 283 294 303 308 310 311 312  16  25  41  51  66 #>  [4897]  73  79  85  98 111 113 137 141 158 159 168 174 179 184 186 197 200 211 #>  [4915] 213 215 220 234 236 237 238 246 267 295 305 309 314   1   2   4  28  30 #>  [4933]  33  39  43  45  50  90 118 124 134 144 145 155 158 166 182 191 265 283 #>  [4951] 292 297 316   3  62  77  84  87 101 105 133 134 138 152 158 165 171 174 #>  [4969] 179 217 221 241 267 273 281 288 289 310   4  26  58  59  70  71  75  83 #>  [4987]  85  87  96 101 121 122 129 140 149 174 193 207 212 214 224 227 239 252 #>  [5005] 256 260 265 267 268 275 284 287 294 307 312 313   3  19  50  55  63  79 #>  [5023]  90 100 101 105 111 115 123 126 127 137 139 146 179 190 193 202 212 213 #>  [5041] 214 234 247 263 276 295 303 311  10  22  31  35  39  55  64  84  86  90 #>  [5059] 133 134 150 164 172 175 183 198 218 233 248 257 258 262 265 266 273 289 #>  [5077] 307 320   7   8  10  21  45  50  51  55  62  63  66  68  85 106 116 122 #>  [5095] 123 138 154 161 199 205 211 213 247 253 265 300 303 311   4   5  16  19 #>  [5113]  52  65  87 118 122 126 133 153 155 166 169 187 209 225 227 234 240 241 #>  [5131] 243 246 257 259 263 264 267 275 278 283 284 290 311  20  30  40  52  73 #>  [5149] 111 118 127 129 138 143 181 185 196 202 207 209 226 235 246 253 264 275 #>  [5167] 281 313 317  21  41  42  48  52  78  93 103 108 114 117 127 145 156 158 #>  [5185] 165 169 181 188 195 203 204 235 236 243 252 257 279 280   4  22  25  33 #>  [5203]  77  86 102 116 117 136 140 141 149 152 160 169 174 193 214 224 240 241 #>  [5221] 242 253 256 263 281 285 292 303 313   4  14  16  36  44  79  88 111 113 #>  [5239] 116 119 122 139 152 164 182 214 222 227 232 258 268 299 302 305 318 321 #>  [5257]   3   6   8   9  19  25  33  35  59  67  74  80  82  85  91  93  95 107 #>  [5275] 115 129 147 154 167 170 180 183 184 186 191 196 198 205 239 244 258 265 #>  [5293] 280 284 294 307   5  17  31  35  38  39  41  45  46  51  73  83  89  93 #>  [5311] 108 180 198 205 206 216 227 249 254 256 259 270 273 274   0   7  12  20 #>  [5329]  22  30  42  48  57  85  90  96  97 101 121 142 156 167 180 189 192 210 #>  [5347] 232 252 254 260 263 269 318   1  19  25  27  43  48  55  65  66  71  74 #>  [5365]  80  88  91 104 117 130 149 153 158 159 185 200 212 217 226 237 243 245 #>  [5383] 249 283 284 296   1   8  12  17  31  52  73  79  89 112 114 123 127 129 #>  [5401] 150 154 163 164 170 179 194 214 229 238 250 268 271 281 282 286 295 316 #>  [5419] 320 329   9  12  36  50  51  57  98 103 108 113 132 144 148 157 167 173 #>  [5437] 179 188 206 214 221 228 240 266 283 289 311   0  31  33  38  46  51  59 #>  [5455]  62  68  80  85 124 168 189 211 216 222 228 234 238 243 245 247 253 258 #>  [5473] 269 272 289 300 302 309 315 318   3   8  39  70  79  85  93 100 102 107 #>  [5491] 110 127 128 133 135 137 142 146 160 168 173 175 186 187 201 208 210 214 #>  [5509] 252 280 281 292 297 309  11  13  31  50  51  81  82  93 103 116 128 131 #>  [5527] 132 141 153 193 194 204 216 218 230 236 250 256 260 280 284 291 293 299 #>  [5545] 307 309 318 323 335  15  22  73  76 105 120 121 126 133 141 156 189 193 #>  [5563] 218 238 244 259 281 298 301  10  13  21  23  27  30  43  51  61  63  66 #>  [5581]  89  98 102 109 138 149 151 155 161 187 206 224 228 236 238 250 258 273 #>  [5599] 328 330 331  16  24  30  42  50  53  73  79  93  97 116 120 123 138 148 #>  [5617] 164 165 170 173 186 201 225 232 233 250 277 282 285 287 295 312 314 321 #>  [5635] 328 334  15  18  24  26  28  39  41  43  69  70  86 100 105 113 116 143 #>  [5653] 150 194 217 221 235 242 245 269 287 295 304 311 325 333 336   0  17  23 #>  [5671]  38  41  45  50  64  66  71  77  89  94  97 104 123 144 154 168 197 223 #>  [5689] 234 241 243 274 296 303 310 312   2  23  25  32  36  38  53  67  70 107 #>  [5707] 115 121 124 128 148 153 157 158 175 184 193 194 202 203 208 227 230 232 #>  [5725] 236 237 254 268 273 274 290 294 298 305 306 314 326 337  16  25  26  46 #>  [5743]  73  83  87  94 134 143 186 236 243 244 252 256 271 279 294 302 326 336 #>  [5761] 341   4  15  34  42  45  88  89 119 120 131 134 143 145 162 175 185 187 #>  [5779] 192 202 209 230 237 267 268 269 284 285 294 299 310   1  12  26  31  35 #>  [5797]  36  41  42  53  61  72  73  81  85  86  98 121 130 135 136 139 150 154 #>  [5815] 157 159 163 173 185 224 233 239 255 271 272 292 296 311 321 322 329 341 #>  [5833]  14  26  31  42  55  56  63  67  76  87 109 116 139 146 156 163 166 207 #>  [5851] 208 216 222 242 255 260 261 268 289 298 301 307 314 321 329 342   1   2 #>  [5869]  41  46  57  66  71  76  79  83  90  91 114 120 124 131 176 185 189 220 #>  [5887] 221 234 251 257 259 260 267 273 279 303 309 315 325 339 346  21  40  41 #>  [5905]  47  60  66  72  82  84  86  89  94 112 114 127 132 136 144 153 168 181 #>  [5923] 195 200 206 214 237 245 246 266 274 279 283 287 296 303 306 329 331 333 #>  [5941]  24  35  41  47  62  88  89  97 106 112 113 127 146 147 154 155 175 181 #>  [5959] 187 224 226 240 256 262 266 271 301 316 325   2   6  14  21  22  24  64 #>  [5977]  67  69  89  95  99 106 116 141 150 161 171 182 184 191 206 210 219 228 #>  [5995] 229 234 244 251 253 257 262 270 296 299 300 303 315 316 325 326 342 344 #>  [6013]   4   7  13  26  38  45  64  71  83  88  89  92 102 108 111 122 124 142 #>  [6031] 144 156 158 159 183 188 196 241 253 276 278 284 288 295 307 316 325 349 #>  [6049]  10  15  28  36  43  72  74  76 102 103 126 133 134 142 151 153 161 181 #>  [6067] 199 214 227 237 243 249 253 254 266 272 278 284 301 312 338 341   4  11 #>  [6085]  25  36  44  57  61  64  74  76 126 135 158 166 170 195 196 213 218 222 #>  [6103] 226 237 258 287 307 330  12  13  31  33  35  53  56  69  84 103 110 116 #>  [6121] 119 135 137 163 198 202 210 218 224 226 242 257 284 288 289 291 306 307 #>  [6139] 312 314 327 332 338 347   0  28  34  45  57  99 105 111 148 173 181 221 #>  [6157] 222 228 240 248 254 261 283 287 293 295 301 305 308 311 330 334  24  29 #>  [6175]  38  39  42  62 118 132 142 148 166 179 185 192 195 199 214 217 225 230 #>  [6193] 234 238 243 252 271 284 285 288 289 328 353 355   4  16  21  23  30  36 #>  [6211]  51  56  57  80 118 124 134 149 155 157 180 199 219 243 244 259 271 279 #>  [6229] 283 287 300 341 351 354  10  17  20  27  29  86  88  89 116 117 144 146 #>  [6247] 149 152 154 157 167 175 184 195 200 202 203 213 215 218 241 259 263 268 #>  [6265] 271 282 286 290 334 352 357  10  19  20  24  29  36  64  67  89  96 120 #>  [6283] 122 124 132 134 139 175 187 190 203 206 208 214 218 230 265 302 309 311 #>  [6301] 314 315 327 329 343 344  14  25  52  53  84  95  97  98 106 107 115 123 #>  [6319] 139 145 150 153 161 183 192 208 229 236 296 302 315 317 318 329 334 335 #>  [6337] 336 337 344 355 358   7  11  31  46  50  51  55  84 105 111 117 127 130 #>  [6355] 134 138 141 148 151 154 157 162 163 164 173 195 201 207 212 221 243 258 #>  [6373] 277 280 290 295 301 313 336 342 350 356  33  35 126 129 135 143 150 157 #>  [6391] 159 162 174 178 183 200 201 208 213 226 233 247 253 275 276 279 290 304 #>  [6409] 306 316 318 334 342 343 351 354 355 356 360  13  53  54  59  61  69  71 #>  [6427]  80  84 127 135 140 142 169 224 239 258 259 264 266 276 297 300 318 320 #>  [6445] 330 331 333 361   7   8  19  23  54  64  67  84  86 116 117 179 185 193 #>  [6463] 219 227 238 240 241 251 256 284 289 314 320 341 342   2  22  23  25  50 #>  [6481]  58  77  81  84 100 102 115 127 153 154 158 164 182 189 216 232 249 271 #>  [6499] 272 286 319 331 346 352 360   6  19  26  28  31  52  63  66  88  89  98 #>  [6517] 108 114 115 128 139 144 145 156 164 165 167 176 180 185 199 227 228 230 #>  [6535] 239 241 242 243 248 257 260 277 299 305 316 319 323 340 342 344   0   7 #>  [6553]  22  33  39  41  45  48  59  68  71  82  87  94  99 103 105 140 150 153 #>  [6571] 162 166 178 190 197 204 218 219 220 222 224 228 239 242 248 277 286 288 #>  [6589] 301 324 342 365   7  10  12  24  30  38  46  63  65  81  97  99 109 111 #>  [6607] 119 122 133 136 163 177 185 187 188 212 215 268 279 291 296 300 307 308 #>  [6625] 310 317 322 327 356 363   0  24  33  37  54  56  75  91  92  98 101 104 #>  [6643] 108 116 123 126 139 143 144 158 176 177 194 197 205 215 226 229 230 239 #>  [6661] 245 251 252 262 265 298 315 321 322 324 336 338 342  24  37  40  48  66 #>  [6679]  72  79  98  99 103 123 125 129 137 155 166 173 183 194 215 226 227 228 #>  [6697] 232 233 244 247 256 262 265 267 269 283 292 310 325 330 347 353 357 360 #>  [6715]  20  27  71  75  83 127 128 137 151 167 174 179 194 216 227 235 245 261 #>  [6733] 275 281 285 315 317 345 348 352  10  17  20  22  57  61  70  74  90 104 #>  [6751] 114 116 126 135 137 147 151 159 162 191 195 204 209 218 229 240 243 247 #>  [6769] 251 268 278 288 289 304 345 350 360 362   1  15  23  44  46  63  66  68 #>  [6787]  89  94  99 115 123 126 132 135 153 187 205 225 250 253 254 260 268 271 #>  [6805] 281 297 298 306 314 322 323 326 333 337 349 356 367   7   8  19  23  24 #>  [6823]  27  29  39  57  60  65  66  72  74  83 106 127 148 177 187 203 220 225 #>  [6841] 227 239 263 282 284 287 289 299 308 316 319 329 355   5  11  35  38  51 #>  [6859]  53  69  74  79  87 101 102 120 124 141 142 153 159 162 170 196 200 216 #>  [6877] 223 227 270 289 301 303 337 345 349 351 371   0   8  13  17  23  31  34 #>  [6895]  44  47  52  76  77  80  81  91  96 138 173 215 217 228 232 240 272 278 #>  [6913] 287 292 299 321 335 339 340 352  18  72  77  83  97 114 121 125 132 137 #>  [6931] 143 154 161 162 163 190 195 203 205 227 230 241 247 262 275 276 280 284 #>  [6949] 300 301 314 320 337 339 341 345 358 361 368 369 370   8   9  22  30  42 #>  [6967]  46  48  53  60  66  68  75  79  88 105 108 112 117 121 133 140 161 168 #>  [6985] 173 200 204 218 232 235 240 246 247 251 259 279 280 302 309 320 332 342 #>  [7003] 351 354 375   3  23  30  32  39  49  50  65  72  85 104 115 118 139 141 #>  [7021] 157 160 179 198 226 228 261 262 265 268 285 302 307 345 351 352 353 366 #>  [7039] 371   3   6  32  40  44  56  81  82  87 100 103 106 144 159 173 177 190 #>  [7057] 222 240 270 289 290 309 315 322 330 332 334 348 357 379   8  12  16  19 #>  [7075]  33  44  50  58  71  94  98  99 115 117 181 189 214 215 218 233 251 252 #>  [7093] 268 273 299 300 314 320 326 329 330 334 363 368  12  50  54  72  73  80 #>  [7111]  84  91  97 105 110 120 132 158 169 211 222 237 245 257 263 266 278 279 #>  [7129] 290 292 308 329 350 370   9  10  19  33  34  36  37  41  45  54  67  69 #>  [7147]  79 120 122 129 135 179 180 186 199 213 218 221 225 228 243 246 248 265 #>  [7165] 292 296 311 326 330 337 344 350 355 366 378 382  10  34  36  37  50  69 #>  [7183]  75  90  96  99 106 136 141 148 220 224 225 227 237 253 265 276 278 287 #>  [7201] 295 298 313 315 325 326 350 360 364 368 370 379 381 382  12  13  14  22 #>  [7219]  47  49  65  76  93  98 105 111 127 146 172 193 210 220 228 229 245 249 #>  [7237] 253 270 271 276 289 296 297 300 304 320 348 368 372 373 381 382   3  11 #>  [7255]  23  44  69  72 104 116 132 135 155 188 189 206 211 213 249 252 253 277 #>  [7273] 342 351 356 366 384   4  10  52  56  62  63  69  70  72  76  82  83 107 #>  [7291] 113 114 117 118 127 139 150 154 157 176 201 211 227 235 237 254 279 301 #>  [7309] 320 322 338 339 344 346 371 380   0   3   5  12  20  26  89  90 102 105 #>  [7327] 107 111 138 149 163 174 188 192 210 212 214 229 237 238 262 268 297 311 #>  [7345] 313 317 319 322 325 326 354 358 363 364   4   9  16  49  60  80  86  89 #>  [7363]  95 101 105 112 113 125 126 130 136 162 164 165 169 171 180 210 214 220 #>  [7381] 221 223 224 225 227 259 261 263 270 274 282 290 291 298 299 310 315 335 #>  [7399] 344 365 378   0  16  27  34  40  70  71  78  82  84  98 103 105 107 118 #>  [7417] 128 167 171 175 197 204 205 211 218 233 235 238 249 253 259 287 289 293 #>  [7435] 299 305 325 327 329 336 348 353 359 360 362 376 377   0   5   6  20  30 #>  [7453]  33  50  52  78  94  95 114 118 119 137 138 160 167 168 177 180 182 194 #>  [7471] 196 202 216 220 222 244 252 255 266 270 273 290 314 358 360 371 376 384 #>  [7489] 386 389   6  11  18  31  35  44  48  70  80  84 109 119 126 131 135 136 #>  [7507] 161 164 167 169 178 184 201 208 227 234 239 246 254 259 264 276 290 299 #>  [7525] 309 320 322 326 327 358   5   7   9  15  16  32  35  55  63  70  72  96 #>  [7543] 105 110 121 149 155 163 165 204 234 266 267 273 294 298 303 310 315 317 #>  [7561] 320 323 329 330 331 336 343 347 357 374 385 386   5  13  19  24  25  46 #>  [7579]  49  61  83  98 126 153 159 171 175 182 269 273 275 279 290 323 336 348 #>  [7597] 366 385   1   5   6  10  12  22  27  39  40  45  57  61  63  67  70  81 #>  [7615]  90 110 113 116 125 152 165 192 209 215 219 220 232 237 264 277 280 286 #>  [7633] 291 340 344 347 356 359 370 376 380 386   3   9  19  28  52  62  73 113 #>  [7651] 119 127 142 146 152 156 176 189 195 213 237 238 243 288 291 299 300 305 #>  [7669] 346 352 371 379 381 389 395   1  64  65  70  75  89  97 104 109 111 114 #>  [7687] 115 121 122 123 133 135 139 141 142 147 150 160 164 168 180 188 203 215 #>  [7705] 219 223 229 241 247 251 252 266 270 285 289 301 309 310 311 312 314 336 #>  [7723] 337 340 352 354 356 377 387  22  47  59  89  94  95 104 109 110 111 120 #>  [7741] 132 150 151 157 161 171 175 189 192 214 217 221 233 242 261 268 270 289 #>  [7759] 298 306 314 320 324 327 336 339 344 347 364 379   7  11  27  34  36  37 #>  [7777]  52  58  85  92 107 109 112 135 148 161 169 197 204 213 226 240 270 278 #>  [7795] 300 312 313 314 318 371 373 387   7  16  23  24  28  48  49  74  94 114 #>  [7813] 131 146 155 161 173 179 183 191 211 217 223 231 232 241 254 275 290 294 #>  [7831] 297 299 318 351 353 359 380  13  14  53  57  63  64  67  77  94  98 106 #>  [7849] 113 114 116 120 122 126 138 139 152 184 190 195 204 206 235 245 265 273 #>  [7867] 276 284 292 302 306 318 324 326 333 334 352 362 371 391 394 400   0   5 #>  [7885]  12  52  58  68  82  93 104 113 119 122 132 150 200 208 228 231 242 244 #>  [7903] 248 251 274 278 329 344 346 348 353 365 367 370 381 382 383 386   1   5 #>  [7921]  10  15  22  25  46  54  58  94 104 106 113 119 138 146 168 190 204 210 #>  [7939] 255 258 261 272 293 310 311 317 331 333 336 338 353 371  26  32  38  45 #>  [7957]  52  62  67  77  87 113 126 140 148 184 192 193 219 222 229 232 241 258 #>  [7975] 259 261 272 283 289 313 323 324 327 329 331   3   4  24  30  50  51  89 #>  [7993] 100 101 106 114 128 153 154 156 159 163 190 192 194 204 238 262 285 305 #>  [8011] 306 308 326 333 334 344 345 350 358 369  10  27  45  48  66  71  73  84 #>  [8029]  89  96 105 109 133 134 147 192 196 198 204 214 228 241 247 317 335 343 #>  [8047] 350 356 358 359 373 374 379 380 387 395 396  64  70  95 100 109 117 130 #>  [8065] 135 136 169 174 179 190 208 210 212 234 247 278 280 283 295 318 341 347 #>  [8083] 361 366 402   0   5   6  23  31  46  63  65  84  92  94  96 104 105 109 #>  [8101] 117 128 129 141 145 152 178 182 183 189 201 241 250 256 266 272 305 324 #>  [8119] 360 361 363 364 367 375 382 384 398 401   6  19  20  29  58  64  70 108 #>  [8137] 109 112 120 127 129 131 135 136 169 177 186 188 202 205 211 214 218 230 #>  [8155] 257 271 282 308 323 335 366 368 371 377 385 390 391 392   8  21  38  65 #>  [8173]  72  77 114 116 129 134 136 161 170 173 194 205 209 224 233 236 250 253 #>  [8191] 260 262 288 291 293 329 335 340 343 406  15  24  34  44  46  54  79 117 #>  [8209] 118 121 128 152 158 163 185 205 209 216 234 236 245 258 283 294 325 341 #>  [8227] 346 351 367 386 391 399 402  25  29  30  40  51  58  63  65  96 101 116 #>  [8245] 132 134 140 142 143 152 157 166 167 179 183 196 212 242 247 248 257 259 #>  [8263] 272 276 287 290 299 302 303 331 338 353 371 372 392 393 401 403  14  15 #>  [8281]  23  25  34  43  50  67  73  75  76  87  92 130 134 143 163 172 174 181 #>  [8299] 239 242 252 258 282 292 301 311 319 325 335 343 356 361 380 386 387 397 #>  [8317]  14  17  18  20  26  40  96  99 116 127 131 151 168 169 181 183 205 209 #>  [8335] 210 218 220 225 232 244 250 252 276 290 312 321 327 328 341 344 359 362 #>  [8353] 381 384 393   7  23  31  53  55  83  89  90  99 105 111 114 119 125 128 #>  [8371] 130 160 169 178 183 187 198 213 222 225 247 265 266 277 281 283 284 300 #>  [8389] 318 320 325 330 334 335 337 349 354 356 360 374 376 383 384 385 389   4 #>  [8407]  21  37  51 107 111 121 125 131 146 152 166 182 183 192 210 216 224 266 #>  [8425] 268 286 299 301 307 315 337 350 357 380 393 403  12  36  45  47  67  68 #>  [8443]  70  79  81  87  96 113 114 144 150 152 155 157 161 168 174 198 200 203 #>  [8461] 208 210 213 222 229 234 237 246 247 257 266 277 282 287 296 298 321 327 #>  [8479] 340 343 351 369 375 380 383 389 402  15  17  18  35  40  44  46  66  72 #>  [8497]  80  86  89  91  94 107 113 115 140 143 149 154 183 187 205 207 214 303 #>  [8515] 307 322 324 327 344 351 359 365 368 371 388 395 397 417  25  40  50  52 #>  [8533]  56  71  76  82 104 117 133 156 160 193 195 196 205 213 229 233 235 240 #>  [8551] 262 278 281 288 298 308 345 381 396 398 413  30  35  36  41  43  69  70 #>  [8569]  76  85 101 116 129 131 144 158 161 183 186 188 196 224 247 261 263 271 #>  [8587] 291 295 312 320 323 327 337 338 346 348 354 367 376 391 401   7  35  39 #>  [8605]  41  46  58  62  64  67  71  79  85  92  97 107 111 158 175 180 201 217 #>  [8623] 246 261 266 272 277 286 300 302 336 338 343 344 377 379 394 398 401   3 #>  [8641]  21  32  33  43  54  62  63  74  75  98 102 108 114 156 162 193 199 206 #>  [8659] 208 216 230 241 251 267 277 286 290 291 296 312 314 331 345 353 388 413 #>  [8677]   1  25  32  35  44  52  54  58  69 112 124 128 133 145 151 153 175 186 #>  [8695] 194 199 209 221 231 235 245 273 285 295 298 310 318 330 361 362 382 383 #>  [8713] 401 422  11  13  15  17  33  53  54  55  56  58  68  90 103 118 125 137 #>  [8731] 141 154 157 174 186 195 209 230 238 247 249 263 265 300 317 333 354 412 #>  [8749]   9  12  22  32  57  78  87  93  99 112 113 117 132 152 186 191 196 218 #>  [8767] 227 233 250 255 262 270 274 276 297 319 371 378 389 390 398 399 408  38 #>  [8785]  40  45  56  58  76  78  79  87 117 127 131 133 137 146 179 192 201 233 #>  [8803] 272 279 286 294 299 300 327 328 351 364 371 377 380 387   8  15  20  43 #>  [8821]  52  73  82  86  98 111 126 135 136 138 168 175 178 196 208 210 215 244 #>  [8839] 253 264 296 313 315 321 326 337 344 362 366 419 425   1   7  10  15  21 #>  [8857]  23  24  40  50  62  67  68  73  92  97 105 109 114 129 137 145 152 155 #>  [8875] 157 173 178 179 222 252 256 265 277 285 288 289 298 304 334 361 372 380 #>  [8893] 387 400 416   9  11  20  54  69  94 106 111 114 115 123 125 140 149 154 #>  [8911] 167 168 180 187 204 226 252 257 268 270 292 306 307 323 330 341 342 345 #>  [8929] 349 353 356 358 372 373 425 427   4  35  52  55  75  95 121 130 136 139 #>  [8947] 142 152 157 162 171 198 225 226 231 249 250 261 263 264 267 294 299 318 #>  [8965] 322 331 342 348 356 359 365 396 398 405 425 427 428   4  11  14  17  34 #>  [8983]  39  44  58  63  66  67  69  74  80  90  94 102 108 109 123 155 177 185 #>  [9001] 186 195 253 291 310 323 325 328 334 353 380 400 402 403 409 416 417 422 #>  [9019]  11  17  52  53  61  64  73  81  92  94 141 169 172 179 180 183 189 211 #>  [9037] 226 237 243 264 273 298 300 308 313 315 317 318 324 326 327 340 363 382 #>  [9055] 391 393   7  19  31  48  53  55  59  64  73  75  77  78  81  89 101 110 #>  [9073] 112 124 127 141 168 172 181 183 205 218 230 234 237 248 270 281 298 306 #>  [9091] 330 346 354 372 398 403 413 429   4   5  50  52  57  61  67  70 108 116 #>  [9109] 125 129 148 169 170 194 198 199 213 225 233 238 244 245 246 247 254 264 #>  [9127] 267 280 295 296 319 326 333 335 372 378 393 406 416 432   0  37  60  88 #>  [9145]  96 100 105 124 127 141 144 148 155 173 185 187 200 201 205 222 234 247 #>  [9163] 248 251 252 259 265 266 268 271 280 286 290 293 302 304 320 332 336 342 #>  [9181] 349 370 375 380 390 392 396 411 414 423   5  19  32  41  52  56  65  69 #>  [9199]  81  85  88  91  92 116 121 124 135 150 157 159 166 167 201 210 215 221 #>  [9217] 225 237 252 257 270 280 289 303 307 329 330 331 334 339 340 361 364 368 #>  [9235] 391 435   2   6  39  44  67  85  93 102 103 122 129 132 159 162 168 176 #>  [9253] 194 197 213 218 238 249 255 256 272 278 299 309 314 334 335 346 353 355 #>  [9271] 363 365 377 379 391 407 412 417 432 435   4   6  11  17  28  52  53  54 #>  [9289]  70  71  74  75  98 109 144 150 151 152 154 166 170 176 180 209 214 219 #>  [9307] 256 257 261 278 284 293 297 307 308 312 321 332 353 360 371 374 417 425 #>  [9325] 428 433  11  23  69  76  79  87 122 132 155 158 170 190 194 203 206 207 #>  [9343] 217 233 272 277 283 288 290 313 330 333 338 339 341 344 349 355 381 385 #>  [9361] 389 399 401 427  14  21  26  36  43  45  46  59  62  72  75  77  79  96 #>  [9379] 103 119 120 126 135 146 157 187 190 193 207 212 217 220 221 222 257 265 #>  [9397] 293 300 311 337 358 365 383 397 406 408 411 421 423 436   4   6   7  54 #>  [9415]  56  58  70  74  91 100 109 110 117 129 137 138 144 152 153 160 168 176 #>  [9433] 201 205 208 211 220 234 235 237 259 272 274 290 296 319 327 334 337 365 #>  [9451] 370 373 382 383 386 388 393 394 400 434   4   7  16  28  40  80  93 103 #>  [9469] 113 141 148 186 200 202 206 209 223 237 246 247 275 278 290 292 299 303 #>  [9487] 313 333 338 361 371 375 377 379 391 394 414 422 423 429 433 441   4   9 #>  [9505]  10  11  16  47  63  87 102 105 106 107 108 115 119 123 137 141 143 158 #>  [9523] 170 171 195 198 201 207 209 263 275 279 301 312 330 342 350 351 363 371 #>  [9541] 387 393 400 415 431 432 436 437  11  24  28  33  36  41  43  48  50  63 #>  [9559]  71  86 101 105 121 130 133 140 145 158 175 179 200 205 232 240 243 255 #>  [9577] 271 287 305 309 320 336 392 399 400 403 413 422 423 424 426 428 434  15 #>  [9595]  29  44  46  47  49  66  90  94 104 112 121 157 162 166 167 175 185 193 #>  [9613] 202 208 210 216 226 228 240 241 247 253 269 278 307 314 316 330 361 368 #>  [9631] 382 385 393 405 415 426 429 438   2   6   7  33  34  53  64  89 101 113 #>  [9649] 132 136 158 174 180 192 204 219 232 242 247 253 265 276 283 288 300 305 #>  [9667] 318 329 330 365 369 371 386 411 415 435 438 443  21  44  71  77  80  85 #>  [9685]  86  89 110 111 117 146 149 169 176 185 216 226 233 235 236 242 247 264 #>  [9703] 297 298 300 319 322 323 332 348 374 389 402 418 419 428 436 437 439 444 #>  [9721]  14  16  39  49  54  70  74  81 113 120 124 128 134 138 139 145 169 170 #>  [9739] 174 213 219 226 232 238 241 245 250 255 256 262 282 289 294 301 306 312 #>  [9757] 323 327 373 380 385 409 414 424 441 443   9  22  24  25  55  65  66  83 #>  [9775]  88 127 142 145 147 149 157 169 173 175 179 181 184 187 191 205 206 214 #>  [9793] 221 233 240 244 246 271 275 287 292 315 319 330 341 344 345 351 364 376 #>  [9811] 397 404 408  19  22  35  50  62  63  64  76  79  85  86  88  90 106 129 #>  [9829] 142 144 150 168 169 176 180 190 194 205 215 218 270 272 276 319 322 323 #>  [9847] 325 331 350 359 385 388 391 394 400 412 435   4  31  32  35  51  88  89 #>  [9865] 102 111 120 128 134 138 165 174 196 208 210 213 227 235 252 253 273 281 #>  [9883] 286 289 290 303 315 317 324 327 328 336 361 369 383 402 403 408 432   0 #>  [9901]  14  25  30  62  63  68  72  84  87  92  99 108 127 136 137 147 150 155 #>  [9919] 160 161 168 172 176 177 186 188 200 206 213 216 221 244 255 256 270 279 #>  [9937] 283 284 297 302 317 318 336 353 365 374 397 401 404 416 420 426 432 435 #>  [9955]  53  64  66  78  92  99 105 110 123 132 135 140 152 155 161 178 181 204 #>  [9973] 212 222 238 253 267 282 286 289 291 292 308 317 338 345 347 350 351 354 #>  [9991] 362 364 366 392 394 395 409 415 419 441   1   2   6   7  36  45  49  55 #> [10009]  57  58  65  68  69  85  87  92 101 116 118 126 128 131 145 149 154 158 #> [10027] 171 200 207 230 241 246 261 288 303 304 315 325 344 372 375 385 392 411 #> [10045] 412 414 429 443 447   9  13  16  35  37  45  69  76  90  91 104 105 117 #> [10063] 119 141 146 153 159 194 205 206 212 220 224 233 246 257 261 263 273 282 #> [10081] 287 290 314 320 347 352 354 357 383 390 413 445 448   3   6   9  18  41 #> [10099]  42  43  53  57  60  67  93  95 100 105 109 114 115 122 128 129 135 147 #> [10117] 159 180 201 217 219 226 261 263 271 300 303 306 322 330 343 391 399 441 #> [10135]   7   8  12  21  29  48  49  59  63  66  70  80 114 117 146 148 149 154 #> [10153] 155 185 193 204 213 218 221 225 253 268 274 277 279 280 297 309 310 317 #> [10171] 335 409 414 430 455   6   7  12  19  25  27  40  42  57  65  71  75  88 #> [10189] 107 123 128 131 145 172 191 193 194 215 219 222 224 226 229 253 278 283 #> [10207] 287 305 315 328 345 346 350 352 356 358 405 418 422 438 446  16  42  64 #> [10225]  82  94  99 108 114 121 123 124 139 150 175 193 196 211 219 223 235 253 #> [10243] 261 266 285 288 324 336 341 343 373 391 400 407 416 418 428 432 435 439 #> [10261] 444   6   7  21  23  24  27  32  33  36  45  66  74  91 106 112 114 117 #> [10279] 121 122 135 137 146 157 164 172 180 182 184 188 190 191 197 201 205 230 #> [10297] 243 245 248 250 253 257 268 269 271 278 282 286 295 313 339 354 356 360 #> [10315] 363 372 383 389 398 408 420 428 431 438 450  15  20  21  22  39  69  75 #> [10333]  87  89  90 110 141 146 182 183 184 220 222 227 231 249 256 258 264 280 #> [10351] 282 287 308 310 320 326 345 353 358 362 375 378 379 394 400 414 418 428 #> [10369] 437   1   3  31  41  54  58  60  76  83  85  90 103 105 108 140 147 151 #> [10387] 152 154 175 186 189 190 205 226 227 229 235 251 253 268 291 319 325 336 #> [10405] 340 350 360 364 369 372 380 386 407 417 444 447 454 461   9  14  16  22 #> [10423]  24  30  48  50  55  62  63  84  97 100 104 106 111 112 118 129 140 144 #> [10441] 145 148 157 158 164 165 169 186 193 215 218 245 254 268 269 274 280 281 #> [10459] 284 288 295 299 357 373 397 402 415 416 425 428 438 449 451 454   8  17 #> [10477]  18  23  89 113 116 117 125 130 170 172 174 179 190 198 199 258 266 268 #> [10495] 289 300 310 311 319 328 330 334 335 353 354 356 357 367 375 396 413 431 #> [10513] 432   8  69  74  76  79  96 101 105 109 114 117 125 137 138 141 151 156 #> [10531] 158 162 166 168 171 189 193 198 201 208 216 225 226 243 254 257 259 262 #> [10549] 267 277 280 283 294 301 327 329 333 342 346 385 397 407 408 422 441 453 #> [10567]   4  28  36  45  54  69  89 122 124 133 145 147 156 157 158 159 170 176 #> [10585] 178 184 236 240 243 244 268 271 299 320 336 340 369 389 390 399 400 425 #> [10603] 436 447   4   5  35  38  44  51  68  71  91 108 114 123 130 133 136 138 #> [10621] 152 165 167 168 171 180 182 187 191 193 200 204 213 216 219 229 230 241 #> [10639] 245 250 269 279 289 308 334 366 368 377 421 441 448   9  18  21  24  55 #> [10657]  65  79 107 124 127 133 141 142 146 176 187 188 189 194 198 234 237 243 #> [10675] 264 269 277 287 306 312 320 321 331 337 338 343 374 385 440 442 445   6 #> [10693]   9  11  26  32  41  48  69  78  79 109 120 121 140 152 157 187 192 222 #> [10711] 230 256 259 288 313 329 338 344 366 376 394 396 397 417 423 467 468   4 #> [10729]   5  34  37  43  48  70  76  85  94  99 100 133 164 169 177 201 204 207 #> [10747] 209 218 219 231 242 258 278 286 290 300 305 319 322 336 337 346 348 351 #> [10765] 361 372 374 388 391 392 422  15  17  18  31  52  54  63  65  66  97 109 #> [10783] 131 139 144 145 148 153 158 194 195 202 209 227 229 236 240 247 248 254 #> [10801] 264 278 307 328 340 353 356 376 386 405 407 430 434 435 443   3   6  19 #> [10819]  21  28  36  38  40  45  54  55  59  62  79  81 112 117 136 137 141 145 #> [10837] 147 162 171 189 200 206 214 218 224 227 238 246 261 270 275 290 303 321 #> [10855] 335 340 346 348 352 354 364 380 394 397 399 414 419 430 444 463 468 470 #> [10873]   0  33  47  70  74  89  98 106 111 119 120 139 144 159 160 196 212 216 #> [10891] 218 221 222 258 268 282 327 331 332 341 346 347 348 349 358 371 386 388 #> [10909] 392 393 397 400 405 406 409 430 446 448 453 457 464   2   9  29  31  55 #> [10927]  61  74  78  83 109 118 122 130 139 152 153 174 175 205 213 217 221 224 #> [10945] 244 253 262 283 295 305 338 339 345 354 367 374 383 388 389 406 411 418 #> [10963] 426 427 448 456 467  10  15  53  58  83  88  91  98 111 113 117 121 152 #> [10981] 223 232 245 247 249 258 276 283 300 301 311 324 355 356 359 364 366 367 #> [10999] 375 387 390 411 413 416 417 435 448 450   5   7  19  28  41  43  66  74 #> [11017]  97 120 122 137 138 143 160 172 175 184 185 189 191 211 219 232 235 243 #> [11035] 260 264 266 293 298 319 324 330 348 350 353 357 359 391 400 404 407 420 #> [11053] 441 459 466   8  52  57  60  63  82  89  91  93 109 120 122 133 140 142 #> [11071] 157 172 182 189 221 246 257 268 272 273 274 277 286 303 334 337 388 389 #> [11089] 392 413 420 422 425 437 444 463 464 468   5   8  23  29  34  51  56  60 #> [11107]  63  67  72 100 112 116 118 121 131 138 150 155 166 185 192 199 201 226 #> [11125] 244 247 252 276 280 292 298 304 312 329 346 353 363 365 379 382 383 391 #> [11143] 414 418 419 424 443 448 453 457 458 461 473   6  20  29  45  48  84  91 #> [11161]  94  98 100 105 129 135 142 160 182 185 188 190 192 204 206 210 227 237 #> [11179] 244 246 253 257 300 303 314 319 321 334 349 350 356 363 371 375 383 391 #> [11197] 415 424 434 435 436 444   1  20  27  28  31  38  41  42  44  53  55  67 #> [11215]  85  94  96  98 106 124 127 128 149 159 172 205 206 227 229 241 243 259 #> [11233] 273 278 293 296 297 306 319 336 343 354 355 357 360 364 372 379 392 403 #> [11251] 406 423 424 437 446 451 462 465 471  10  23  37  47  54  61  74  92 101 #> [11269] 104 111 122 124 137 147 155 168 174 179 194 216 222 234 240 253 259 260 #> [11287] 273 276 282 288 303 306 307 309 338 342 361 381 387 398 429 432 437 450 #> [11305] 456 462 471   4  58  72  85  89  90 108 118 129 154 173 174 180 202 229 #> [11323] 238 251 256 257 264 275 292 305 315 320 325 328 362 374 382 386 393 407 #> [11341] 417 421 426 428 433 443 445 447 449 458 470 476 481  12  17  24  42  91 #> [11359]  92 101 111 113 139 145 146 156 170 206 228 240 258 273 282 289 301 304 #> [11377] 317 326 331 339 356 364 381 385 386 387 399 416 438 445 452 471 479   2 #> [11395]   3   7   8  37  47  54  62  98 102 105 114 128 147 165 168 176 187 188 #> [11413] 189 203 261 265 283 289 290 292 323 346 348 351 360 367 368 375 377 402 #> [11431] 403 405 411 416 447 448 479  15  22  59  80  84  90  93 109 112 116 149 #> [11449] 150 158 163 171 193 196 209 222 243 249 252 260 271 275 281 286 287 290 #> [11467] 301 306 325 328 338 340 362 384 389 392 394 407 416 425 427 435 449 474 #> [11485]  10  15  24  25  60  62  65  77 112 133 135 168 176 181 207 223 234 242 #> [11503] 259 271 272 289 291 302 309 338 345 359 363 364 369 394 423 424 430 436 #> [11521] 438 462  38  42  45  59  70  72  78  79  88  97 112 118 126 128 133 156 #> [11539] 157 176 188 193 207 216 227 257 260 270 284 296 302 341 345 353 358 376 #> [11557] 388 392 395 401 404 405 417 429 439 444 478 480   8  11  16  26  35  51 #> [11575]  52  75  79  95  96 104 135 148 169 177 182 186 188 191 202 225 234 235 #> [11593] 238 246 256 261 285 290 294 300 332 343 355 360 395 398 400 403 409 437 #> [11611] 450 452 453 455 461 463 473 476 477 478 483 486  15  16  19  22  28  42 #> [11629]  62  63  88 115 130 131 145 149 152 155 171 174 175 184 185 193 198 199 #> [11647] 204 211 212 224 248 252 262 264 281 289 294 297 305 309 311 346 351 364 #> [11665] 374 382 386 394 403 405 420 446 447 449 453 456 476 483  10  20  21  23 #> [11683]  25  30  47  57  60  64  73  88  93  99 106 154 162 189 192 202 205 213 #> [11701] 217 228 229 233 236 282 296 303 319 323 324 325 327 330 331 334 347 352 #> [11719] 356 373 375 394 405 407 415 421 424 433 434 480 483 488  11  20  21  35 #> [11737]  41  59  90  96 100 101 102 123 138 146 148 162 171 184 205 207 211 219 #> [11755] 262 263 264 284 318 331 334 343 368 405 406 410 412 417 425 449 461 468 #> [11773] 472 474   2   3  23  24  26  37  68  78  84  86  90  96  98 101 110 111 #> [11791] 119 124 135 143 152 157 169 176 186 198 200 201 212 227 232 236 246 251 #> [11809] 254 255 256 284 295 301 309 315 331 363 366 379 389 398 399 414 415 418 #> [11827] 427 437 439 441 472 478 483 484   3   6   8  16  23  41  74  78  91 104 #> [11845] 118 126 129 142 159 160 167 172 173 180 185 193 195 197 203 213 221 229 #> [11863] 230 231 256 260 262 269 270 273 292 307 314 338 342 367 374 386 388 398 #> [11881] 415 422 447 449 462 477 484 492   9  35  39  45  46  52  61  66  73  96 #> [11899] 123 134 148 159 176 178 179 194 220 233 236 282 285 286 301 302 310 334 #> [11917] 336 340 349 354 368 374 381 385 399 405 407 419 435 436 446 447 448 472 #> [11935] 478 488  14  16  33  35  61  76  87  92  94 137 142 147 150 161 171 172 #> [11953] 173 179 183 185 209 210 213 214 216 222 233 240 241 255 285 286 303 306 #> [11971] 332 336 338 339 349 351 385 395 406 413 423 433 440 454 456 490 494   7 #> [11989]  26  36  58  69  75  81  94 115 129 150 152 153 162 172 178 184 189 200 #> [12007] 250 259 262 269 273 275 276 291 297 300 303 310 321 331 344 349 378 385 #> [12025] 405 416 421 425 437 445 455 458 459 463 473 475 490   1  17  18  29  39 #> [12043]  55  58  65  70  86 102 113 126 128 141 143 159 162 182 184 194 205 207 #> [12061] 210 223 240 246 253 272 309 313 316 333 340 356 367 375 399 402 413 430 #> [12079] 469 475 485 492 494   6  17  26  50  53  59  66  75  89  97 109 148 155 #> [12097] 175 189 204 212 215 246 266 272 274 279 291 297 312 331 338 352 356 371 #> [12115] 373 377 390 396 403 410 414 435 436 454 476 483 485 496   3   4  10  15 #> [12133]  21  23  40  60  62  63  79  89  99 112 121 130 133 144 152 158 159 172 #> [12151] 175 186 199 206 211 212 240 270 278 279 300 314 340 341 353 358 361 372 #> [12169] 379 387 422 469 487 489 493   6  36  39  44  57  64  88  91 108 114 116 #> [12187] 124 127 136 142 154 155 158 178 186 190 191 199 229 236 240 278 280 303 #> [12205] 317 320 344 345 346 351 356 362 367 375 393 408 412 424 425 426 454 455 #> [12223] 467 469 490 493   6  14  17  24  25  30  48  59  60  68  77  79  81  86 #> [12241] 101 109 110 124 131 143 151 154 155 161 168 180 181 187 199 200 209 216 #> [12259] 236 248 275 290 304 307 313 320 322 329 336 345 351 356 362 399 426 427 #> [12277] 433 437 441 452 468 469 475 486 497 499  23  37  40  79  86  96 115 121 #> [12295] 124 127 135 146 156 158 185 245 248 256 272 283 322 332 347 350 353 379 #> [12313] 386 399 409 417 459 479 480 488  17  23  35  47  56  74  94  96 124 127 #> [12331] 128 133 135 140 142 143 155 188 223 227 229 233 235 265 272 274 331 334 #> [12349] 335 350 351 372 380 404 409 414 416 420 430 434 436 470 471 483 491 494 #> [12367] 497   9  12  16  20  25  30  69  71  78  83  93 101 103 106 107 120 124 #> [12385] 136 138 164 177 212 222 239 256 262 272 322 324 341 346 369 371 382 394 #> [12403] 399 400 405 417 431 460   5   8  16  20  34  40  52  66  77  80  81  82 #> [12421]  83  89  94 120 123 125 135 138 149 150 179 190 205 211 221 236 242 245 #> [12439] 246 248 253 256 266 276 284 291 305 321 325 330 339 344 346 353 354 355 #> [12457] 366 381 405 421 442 458 472 480 502   1   2  39  43  55  79  83  88  94 #> [12475] 128 135 140 143 152 166 167 168 177 178 192 193 199 204 208 210 233 244 #> [12493] 250 255 257 261 263 289 300 308 328 329 335 338 342 396 412 414 418 424 #> [12511] 428 437 439 455 456 472 476 489 490 497 503   0   2  16  42  57  63  82 #> [12529]  89 115 121 136 142 143 158 164 172 184 187 188 194 240 246 249 252 254 #> [12547] 261 276 281 282 286 288 295 296 303 304 309 313 357 359 364 365 369 371 #> [12565] 374 386 406 419 421 424 427 437 446 454 457 458 460 463 469 491 500   2 #> [12583]  16  25  26  29  38  43  45  47  58  67  68  86  88  89 149 170 184 200 #> [12601] 215 226 234 239 244 252 256 279 294 313 326 331 358 362 363 364 367 370 #> [12619] 372 374 381 384 394 395 413 414 423 469 480 481 486   4  15  26  52  53 #> [12637]  58  61  67  69  71  92  99 119 133 150 154 185 191 193 216 219 233 254 #> [12655] 262 264 279 281 296 306 313 320 333 334 355 356 362 367 369 372 374 377 #> [12673] 379 380 381 397 417 442 447 450 473 476 478 487 498 499   1  10  31  37 #> [12691]  45  56  59  65  84  93  98 105 129 148 168 188 207 222 225 247 250 258 #> [12709] 267 274 275 279 286 309 330 354 360 361 363 392 395 399 413 430 433 437 #> [12727] 458 466 477 490 491 500 504   1  32  64  69  77  80  85 105 110 120 122 #> [12745] 132 140 160 164 169 179 181 187 188 190 193 203 207 217 228 251 253 254 #> [12763] 264 275 277 280 302 313 315 317 319 328 333 335 349 371 398 414 426 434 #> [12781] 458 461 470 508   1   6   9  11  27  35  41  46  48  54  57  71  87  93 #> [12799]  98 105 117 136 138 145 162 186 188 196 209 216 240 267 280 282 288 289 #> [12817] 290 299 341 344 346 351 393 394 398 400 408 409 417 435 439 440 444 450 #> [12835] 486 504 508   5  37  60  73  89 102 103 127 140 142 143 148 169 173 197 #> [12853] 212 220 222 225 238 239 250 254 264 267 268 275 296 303 306 318 322 340 #> [12871] 351 354 357 367 377 385 399 409 423 448 455 461 468 485 495 502   6  12 #> [12889]  20  27  33  57  79 100 103 108 125 129 133 138 141 155 158 162 175 182 #> [12907] 187 213 215 217 219 224 226 231 233 242 246 250 273 297 312 325 328 350 #> [12925] 357 362 371 372 387 409 415 421 423 458 461 466 473 505 510 512  18  21 #> [12943]  29  35  40  46  69  70  74  77  84 100 108 111 112 121 122 135 137 153 #> [12961] 179 195 204 211 212 237 245 263 271 274 284 292 294 309 327 339 361 367 #> [12979] 369 373 394 396 406 433 444 447 451 456 458 463 470 474 476  37  46  52 #> [12997]  62  88 102 108 120 153 172 176 177 182 184 191 192 193 198 201 230 231 #> [13015] 243 253 284 285 289 291 293 298 318 319 320 321 329 344 349 354 390 411 #> [13033] 423 428 435 440 451 473 487 505 507   5  12  18  41  50  51  58  78  90 #> [13051]  94  99 107 114 115 117 128 141 146 151 166 170 175 178 191 194 195 211 #> [13069] 214 218 243 258 260 277 291 296 304 307 309 363 367 372 378 403 418 423 #> [13087] 442 457 478 481 485 495 508 509   7  12  16  19  20  36  47  54  70  77 #> [13105]  83  94 100 104 114 123 125 127 128 129 131 136 152 154 158 159 165 167 #> [13123] 188 206 208 217 220 226 241 246 266 267 272 273 285 290 295 305 317 333 #> [13141] 340 357 363 376 401 422 430 436 441 451 454 466 471 482 486 497 498 507 #> [13159] 508 512   3   4  11  61  70  71  79  92 112 116 134 138 176 186 215 220 #> [13177] 240 242 243 264 270 295 308 363 368 373 379 381 390 391 393 415 422 424 #> [13195] 454 476 486 490 498 500 505 512 515   0  10  12  13  15  38  40  51  60 #> [13213]  62  75  76  92  94 101 104 109 127 141 155 162 175 198 201 202 210 212 #> [13231] 217 221 230 233 249 261 269 285 291 296 304 321 328 329 339 348 364 369 #> [13249] 384 396 427 429 450 454 460 465 466 480 506 518  10  46  57  72  74  97 #> [13267] 100 114 125 129 152 153 154 169 189 200 220 242 256 260 262 283 284 300 #> [13285] 312 326 335 337 341 348 354 364 387 390 398 424 430 438 446 472 487 488 #> [13303] 496 497   7   8  11  18  26  31  32  36  39  51  62  75  83  84  85 107 #> [13321] 109 110 120 123 139 149 157 160 165 197 205 207 209 229 234 237 265 268 #> [13339] 271 280 283 296 312 313 325 329 331 366 375 379 381 390 396 412 430 444 #> [13357] 445 452 460 461 466 473 477 481 488 496 516 521   5   6  21  23  31  32 #> [13375]  41  43  52  67  68  78  88  94 105 115 128 151 156 163 166 167 172 187 #> [13393] 195 201 213 222 234 247 248 258 268 270 286 291 293 294 305 318 321 325 #> [13411] 337 349 368 373 383 384 396 397 412 414 417 427 435 445 446 447 451 488 #> [13429] 489 496 501 509 510 518   5  16  41  59  63  65  73  86  94  97 102 106 #> [13447] 129 142 145 168 176 191 196 197 213 214 215 219 238 258 261 270 276 293 #> [13465] 294 307 318 326 328 333 344 355 387 414 435 448 454 463 468 480 494 503 #> [13483] 515 520 523   9  22  54  56  63  66  68  70  76  84  89  97 115 118 122 #> [13501] 148 150 162 168 180 184 191 192 197 203 216 235 256 267 270 277 279 280 #> [13519] 282 299 303 338 341 342 357 363 378 404 405 424 453 461 483 488 513   2 #> [13537]   4  10  14  16  28  45  50  73  86  92 105 108 109 140 141 153 179 184 #> [13555] 194 197 206 214 218 221 228 251 259 277 283 288 311 323 344 348 353 357 #> [13573] 358 361 382 387 417 426 428 437 438 444 465 469 476 478 498 513 518  18 #> [13591]  37  40  49  52  56  58  65  96 105 120 130 150 152 154 159 160 164 174 #> [13609] 175 177 185 187 189 222 243 252 276 290 293 300 310 312 316 319 324 326 #> [13627] 341 342 351 365 368 378 383 390 403 409 410 412 426 430 450 467 469 477 #> [13645] 486 490 499 508 511 522  73  95 124 132 138 187 196 197 234 250 254 255 #> [13663] 258 278 281 284 296 305 306 311 331 334 348 351 368 370 377 380 384 395 #> [13681] 397 414 429 453 454 456 459 463 465 466 473 492 500 513 515 526   3   5 #> [13699]  13  23  28  45  57  61  62  78  81  84 118 131 133 144 166 167 183 218 #> [13717] 222 236 251 252 253 258 287 288 291 331 332 333 342 346 349 361 371 374 #> [13735] 378 381 392 395 397 398 403 434 438 470 484 507 516 524 527 528   4   6 #> [13753]  15  32  39  66  73  75 100 116 130 162 167 180 195 200 201 211 212 228 #> [13771] 233 245 253 283 284 304 305 312 340 353 378 381 393 396 409 410 412 417 #> [13789] 423 433 448 458 469 470 480 483 492 499 504 513 523 524  55  66  89  98 #> [13807]  99 101 110 111 123 124 135 138 143 151 153 156 157 178 181 193 205 219 #> [13825] 227 230 236 238 254 258 268 304 310 315 317 318 345 360 366 373 376 393 #> [13843] 395 408 418 423 451 471 476 477 513 521  66  68  74  94 106 107 111 112 #> [13861] 115 121 123 126 127 138 150 165 168 174 178 187 189 197 198 208 209 228 #> [13879] 241 252 253 255 258 268 293 305 308 313 323 336 340 344 367 373 374 377 #> [13897] 391 405 428 456 459 463 469 479 481 528   3  23  40  53  67  79  80  85 #> [13915]  91 104 105 106 135 144 149 158 172 181 185 196 198 200 215 233 241 246 #> [13933] 269 272 277 280 295 308 311 314 319 331 337 338 348 363 368 370 371 404 #> [13951] 408 415 429 434 450 451 456 463 464 470 483 485 492 498 511 522 531  10 #> [13969]  12  22  24  32  49  57  72  79  83  87  92 103 105 110 131 136 139 144 #> [13987] 149 155 165 169 173 176 180 186 207 214 218 248 265 280 281 282 290 291 #> [14005] 292 306 313 329 339 345 348 351 367 368 375 394 400 430 431 439 440 441 #> [14023] 457 475 494 496 509 520   2  24  47  59  60  67  74  92 115 116 120 124 #> [14041] 125 139 154 159 169 187 190 207 244 272 288 305 334 355 369 376 382 393 #> [14059] 408 419 429 436 440 456 459 474 478 504 508   2   4  27  31  38  45  56 #> [14077]  61  67  72  76  79  83  92  93 107 109 111 112 125 129 130 150 151 153 #> [14095] 169 172 183 202 215 227 234 239 264 304 333 341 348 351 354 383 392 402 #> [14113] 422 455 469 474 479 489 496 499 505 521 533  28  35  37  38  46  48  54 #> [14131]  61  66 102 109 110 112 113 119 135 136 157 168 170 188 228 234 248 254 #> [14149] 276 285 291 299 302 303 339 362 368 371 394 397 419 435 440 466 476 487 #> [14167] 494 513 527 531  17  35  36  38  39  40  43  55  64  65  73  79 106 113 #> [14185] 119 130 132 136 139 142 145 149 161 162 199 212 213 260 263 271 273 294 #> [14203] 302 305 308 315 327 338 359 365 375 377 398 405 430 431 436 447 465 472 #> [14221] 474 500 507 508 523 531 532  11  14  20  23  24  33  35  36  56  71  76 #> [14239]  86  98 101 103 109 117 121 138 140 154 157 160 183 188 192 215 232 239 #> [14257] 252 253 254 258 275 306 326 327 351 354 362 366 371 385 392 398 406 429 #> [14275] 434 437 445 460 465 515 516 528 537  14  33  38  40  42  72  76  84 104 #> [14293] 109 126 132 154 159 167 177 183 187 192 196 201 203 208 209 212 213 227 #> [14311] 231 240 244 253 264 265 266 275 276 281 284 297 306 307 328 344 348 355 #> [14329] 361 377 394 413 425 426 439 447 470 473 476 488 493 508 512 528   9  26 #> [14347]  27  47  49  56  66 122 123 142 154 155 161 162 167 179 185 190 195 201 #> [14365] 224 231 233 255 265 282 303 322 324 336 360 369 383 388 395 413 416 426 #> [14383] 435 438 445 447 454 462 465 485 500   1  18  21  22  27  39  41  60  62 #> [14401]  66  72  80  99 101 103 113 135 151 182 193 199 246 251 253 264 266 286 #> [14419] 300 302 305 320 333 350 354 355 357 359 381 392 395 396 398 410 412 425 #> [14437] 449 450 453 460 472 481 495 502 514 521  40  44 110 120 125 129 150 151 #> [14455] 159 168 181 185 190 213 221 236 260 274 285 295 302 306 310 328 333 341 #> [14473] 363 365 371 387 393 406 410 426 444 450 457 464 468 471 478 499 501 513 #> [14491] 517 525 526 528 533 539   4  21  24  36  38  43  53  71  84 108 119 120 #> [14509] 149 154 167 180 187 204 215 228 247 260 272 277 297 310 326 341 352 361 #> [14527] 362 365 396 400 402 408 409 418 421 426 460 488 490 491 496 503 507 511 #> [14545] 513 514 518 520 522 524 526 542   4   7  13  14  23  41  52  78  91 113 #> [14563] 122 150 188 201 207 219 220 226 249 251 279 283 285 287 294 321 323 325 #> [14581] 330 343 364 378 415 437 455 465 484 520 524 526 528   7  17  28  32  52 #> [14599]  55  58  66  91  96 105 108 109 116 128 152 168 171 172 185 209 210 214 #> [14617] 216 221 223 237 239 247 250 255 260 264 274 279 281 288 291 293 295 304 #> [14635] 313 322 332 334 349 356 357 364 367 387 394 410 414 418 436 439 459 486 #> [14653] 513 522 527 529 539  20  29  34  39  41  50  76  81  90  98 100 101 121 #> [14671] 125 130 143 149 168 180 186 190 199 215 228 230 268 270 288 296 308 334 #> [14689] 337 355 367 371 386 390 392 403 405 406 417 420 431 433 439 440 441 468 #> [14707] 471 487 506 511 520 524   1   8  12  15  30  36  49  52  53  59  68  95 #> [14725]  97 109 126 132 134 158 164 173 178 182 213 214 233 242 243 260 263 268 #> [14743] 274 300 311 319 340 343 359 369 370 387 406 422 447 455 459 462 469 470 #> [14761] 471 472 474 475 482 499 524 527   1  27  30  39  44  56  76 112 114 115 #> [14779] 135 145 148 157 163 167 168 169 192 199 203 206 224 228 230 247 257 260 #> [14797] 264 267 274 291 293 325 328 334 338 374 380 391 403 405 408 420 431 433 #> [14815] 435 447 451 453 457 467 468 472 491 500 509 519 548   0   9  27  41  54 #> [14833]  60  63  64  87  95  98 125 148 165 202 207 212 222 236 249 252 258 271 #> [14851] 301 321 328 352 358 378 380 402 406 407 411 421 429 434 441 450 468 474 #> [14869] 477 516 542  12  18  19  34  47  53  84  86  87 109 123 129 140 141 152 #> [14887] 155 156 176 187 209 220 241 249 271 280 286 303 313 319 323 331 362 364 #> [14905] 365 383 391 434 473 477 490 494 500 502 503 512  18  30  71  79  98 103 #> [14923] 109 113 114 141 148 159 177 188 195 197 208 218 224 246 247 263 277 280 #> [14941] 284 299 307 314 322 328 330 338 352 368 389 413 415 416 420 423 450 469 #> [14959] 488 490 494 512 516 522 529 530 540 551  10  17  35  44  67  73  90 105 #> [14977] 106 116 123 125 126 129 142 152 155 164 186 208 246 255 266 270 275 283 #> [14995] 297 299 308 323 325 329 334 354 358 360 367 369 379 391 395 409 411 412 #> [15013] 421 437 441 481 488 489 492 495 499 508 509 514 516 525 527 528 533 550 #> [15031]   0  12  17  25  31  34  35  49  50  54  59  71  74  83  89 116 117 136 #> [15049] 144 152 160 165 170 180 181 188 231 321 356 376 383 390 392 396 401 409 #> [15067] 420 436 448 450 456 463 493 533 537 549 550 552   3   5   9  10  13  17 #> [15085]  19  22  73  74  90  95 103 104 108 110 119 124 132 136 138 139 151 159 #> [15103] 167 202 220 250 272 285 293 305 306 310 338 340 349 362 372 387 388 391 #> [15121] 396 415 428 455 457 458 463 464 474 475 484 488 523 540   8  14  30  38 #> [15139]  50  63  77  82  83  88 105 115 116 125 133 136 141 143 146 151 157 159 #> [15157] 162 163 206 215 222 226 234 237 270 298 318 353 368 371 403 404 415 426 #> [15175] 439 443 486 495 497 514 515 525 534 537 538  20  21  30  45  53  57  59 #> [15193]  66  88 113 129 133 149 159 167 168 173 178 214 229 232 233 235 241 252 #> [15211] 259 275 277 295 303 308 320 333 341 342 343 351 356 373 378 387 391 398 #> [15229] 411 413 421 424 432 440 444 461 467 481 502 510 521 524   0  10  19  43 #> [15247]  44  47  50  66  71  95 113 117 118 122 126 130 131 134 137 143 152 154 #> [15265] 158 163 170 173 176 179 205 208 220 221 248 264 273 289 298 302 306 324 #> [15283] 343 344 350 361 363 365 369 397 401 405 412 416 422 427 437 444 480 491 #> [15301] 515 516 517 528 555  18  26  35  59  79  83  93 130 131 141 147 161 166 #> [15319] 176 196 199 210 224 228 240 244 258 259 260 286 305 315 328 346 354 364 #> [15337] 379 415 437 440 445 450 466 474 480 485 490 499 508 511 513 522 546  14 #> [15355]  27  36  53  54  55  56  64 112 118 131 138 161 164 168 203 205 219 237 #> [15373] 255 259 267 274 281 283 286 312 325 332 338 345 360 361 371 380 383 389 #> [15391] 390 395 404 422 424 461 469 491 499 502 536   9  12  30  32  39  43  62 #> [15409]  64  78  90  94 110 114 119 130 139 148 171 179 210 216 222 230 234 236 #> [15427] 240 246 278 294 310 312 338 361 362 363 381 401 405 412 434 441 444 450 #> [15445] 454 487 499 516 524 549 555 560   7  29  37  44  54  70 140 143 145 146 #> [15463] 148 166 199 200 230 232 237 247 258 260 268 270 281 283 286 288 299 328 #> [15481] 345 353 355 372 388 426 434 449 472 475 478 492 499 517 544 545 553 555 #> [15499] 557   0  10  16  31  33  54  57  58  77  83  85  86 112 133 150 156 163 #> [15517] 184 197 199 201 209 216 218 230 240 245 259 260 262 265 278 285 308 320 #> [15535] 323 327 330 335 337 348 351 363 365 368 382 389 405 418 419 442 447 466 #> [15553] 480 485 486 496 508 509 522 523   8  23  24  38  43  66  71 101 113 115 #> [15571] 118 119 139 141 148 163 165 170 178 180 189 190 193 201 210 213 223 225 #> [15589] 226 246 261 272 287 295 296 315 321 326 347 362 373 441 449 467 469 516 #> [15607] 517 525 537 551 552 554   9  10  18  28  32  39  52  57  60  63  85 100 #> [15625] 126 150 173 191 196 207 210 216 224 226 228 233 234 241 259 265 266 273 #> [15643] 284 288 309 334 353 405 411 414 420 424 427 433 463 467 475 476 519 541 #> [15661] 550   0  16  28  41  63  66  69  84  85  88  93  94 101 123 140 145 149 #> [15679] 159 162 173 183 191 192 197 214 216 225 237 282 287 289 294 296 299 301 #> [15697] 302 303 307 315 329 337 338 340 355 358 368 375 385 391 395 413 428 433 #> [15715] 445 469 479 482 489 491 524 541   2   5   6  17  21  24  40  79  81  94 #> [15733] 113 117 128 130 141 172 181 209 210 215 220 225 242 257 258 267 275 276 #> [15751] 284 298 309 336 340 348 349 359 366 368 374 376 405 416 425 427 454 471 #> [15769] 472 484 494 499 523 548 550 552   1   3  15  24  27  37  69 102 116 117 #> [15787] 133 161 163 181 187 188 219 222 223 234 264 280 284 301 318 326 336 340 #> [15805] 344 350 361 365 373 374 392 393 409 421 422 450 458 466 478 479 481 488 #> [15823] 512 515 522 526 530 539  60  69  89  96 109 123 126 129 135 138 153 160 #> [15841] 167 170 176 205 209 213 225 237 253 283 324 328 344 346 356 366 398 399 #> [15859] 405 412 440 448 467 489 516 525 529 544 546 549   2   3   4  15  36  51 #> [15877]  53  79  87  94  99 100 124 132 151 179 181 183 188 192 195 197 211 217 #> [15895] 233 242 248 258 267 279 307 314 320 332 346 351 356 362 366 367 385 395 #> [15913] 399 411 416 425 431 434 443 445 447 451 466 474 495 499 501 503 506 513 #> [15931] 522 555 567   4   7   9  22  25  27  30  37  38  39  49  62  68  78  80 #> [15949]  83  88  99 109 113 136 137 151 166 182 220 222 246 248 249 259 260 283 #> [15967] 284 286 294 301 312 360 373 376 378 380 418 420 432 442 446 447 452 454 #> [15985] 458 492 496 500 508 520 540 561 565   2  11  13  14  28  45  57  64  99 #> [16003] 106 112 124 127 152 161 164 166 195 209 214 225 237 245 259 261 262 269 #> [16021] 273 290 302 320 330 335 338 347 352 359 367 371 372 392 396 418 421 425 #> [16039] 447 463 470 471 473 488 493 497 505 519 524 526 532 543 551 553 557   6 #> [16057]  19  27  28  35  39  50  62  64  66  75  80  83  84  86  99 100 104 122 #> [16075] 125 128 139 140 151 152 169 173 177 199 215 218 221 238 244 255 263 268 #> [16093] 281 285 305 320 359 367 372 376 390 400 403 413 416 417 441 443 454 496 #> [16111] 506 510 519 526 541 542 550 554 555 558   4   6  11  12  15  39  68  77 #> [16129]  86 112 122 152 165 170 182 193 198 200 209 217 226 229 240 256 261 263 #> [16147] 269 273 275 283 301 304 320 322 333 338 349 360 368 370 375 387 396 407 #> [16165] 422 450 473 477 487 503 518 529 537 563 573   1   8  39  51  61  69  70 #> [16183]  74  76  80  93  95  99 121 122 139 142 147 150 152 157 164 165 185 198 #> [16201] 221 228 242 247 250 252 253 267 270 271 285 323 327 340 353 356 361 365 #> [16219] 371 396 416 420 441 454 482 486 501 504 529 533 539 540 548 557 561 562 #> [16237] 571   1   3  24  42  44  49  52  66  75  84  85 102 103 108 110 120 133 #> [16255] 136 140 143 164 165 235 244 265 267 302 304 323 328 349 354 379 380 392 #> [16273] 395 400 420 446 448 457 459 463 465 476 480 481 483 493 496 502 521 522 #> [16291] 527 528 535 538 546 559 566 572   0   5  16  19  38  40  43  45  58  59 #> [16309]  61  67  70  75  85  88  92  93 109 119 130 145 159 164 166 176 183 184 #> [16327] 186 187 193 195 207 216 221 241 243 244 249 272 279 280 286 293 309 311 #> [16345] 325 338 349 364 365 385 391 426 430 444 445 448 471 474 475 476 480 488 #> [16363] 490 555 564 573   9  11  15  37  40  49  66  68  79 105 118 125 138 139 #> [16381] 141 147 154 158 166 174 177 194 197 203 207 212 215 216 218 228 241 253 #> [16399] 260 277 282 289 305 313 321 363 376 388 397 405 408 411 415 422 433 463 #> [16417] 466 472 474 484 510 522 528 530 551 572 575   4  32  34  35  38  39  48 #> [16435]  62  63  64  83 122 143 177 184 192 200 232 234 235 236 237 242 249 275 #> [16453] 285 290 293 301 316 319 330 337 339 356 361 376 383 407 428 441 457 470 #> [16471] 472 480 499 522 526 544 545 555 572   9  12  17  22  29  41  57  63  76 #> [16489]  83 111 112 114 122 129 134 141 145 153 155 188 190 208 218 230 231 237 #> [16507] 250 260 284 285 307 314 333 352 360 384 385 391 396 407 419 427 434 441 #> [16525] 445 446 465 466 476 487 527 529 547 554 559 561 574 578  20  30  33  44 #> [16543]  50  52  57  59  61  68  74  79  82 101 104 108 125 141 153 160 168 177 #> [16561] 186 190 193 221 224 231 257 270 277 278 285 287 291 300 313 316 328 354 #> [16579] 362 364 372 388 393 428 439 447 455 471 485 490 494 496 517 523 532 533 #> [16597] 536 559 565 573 575 578   1   7  24  38  43  56  64  69  74  75  80  85 #> [16615]  87  92 100 103 116 124 141 149 170 172 178 188 192 207 210 224 235 244 #> [16633] 253 254 277 283 290 294 302 303 340 370 391 397 411 421 433 438 441 455 #> [16651] 463 470 476 477 484 509 510 528 542 561   0   6   8  14  15  27  29  47 #> [16669]  48  51  56  74  82  94  97 103 104 160 190 209 214 225 243 249 252 257 #> [16687] 269 272 278 295 296 308 315 332 336 351 359 362 369 370 389 394 415 430 #> [16705] 434 441 446 451 455 463 468 482 483 495 500 502 506 511 515 521 522 527 #> [16723] 531 541 546 547 548 551 569 576 577   4   5  21  47  51  56  57  66  69 #> [16741]  76 101 105 108 114 117 139 143 149 161 170 175 237 286 289 300 303 312 #> [16759] 316 323 327 349 362 370 390 410 416 431 441 446 447 468 470 477 479 507 #> [16777] 508 511 517 520 524 528 533 544 550 561 579  16  21  30  33  37  39  48 #> [16795]  49  62  86 100 101 122 151 152 163 180 192 209 214 234 239 245 247 248 #> [16813] 258 260 264 268 275 286 289 291 298 324 325 342 349 376 389 391 392 414 #> [16831] 429 430 436 439 445 453 491 492 495 501 508 519 532 534 549 560 581 584 #> [16849]   5  33  35  39  45  48  49  57  70  86  89  97 106 109 116 132 164 189 #> [16867] 205 225 233 234 260 266 299 312 319 326 330 332 334 335 342 357 369 390 #> [16885] 398 402 411 413 419 429 434 444 453 460 480 518 519 535 545 562 583   3 #> [16903]  19  21  23  26  42  54  62  67 100 102 122 125 140 150 156 163 165 182 #> [16921] 189 200 201 212 225 238 247 259 270 273 287 291 292 299 312 321 333 345 #> [16939] 346 356 360 379 381 382 398 399 405 409 416 428 450 451 452 474 478 484 #> [16957] 492 496 544 545 562 572 576 580 584  20  40  47  55  59  64  67  76 100 #> [16975] 101 118 136 138 150 152 158 159 163 171 181 182 187 191 216 220 229 271 #> [16993] 275 283 288 290 298 300 312 325 327 339 354 369 375 397 401 402 407 411 #> [17011] 421 433 450 467 474 522 524 543 544  11  13  24  25  29  33  45  50  53 #> [17029]  54  55  59  64  68  70  84  85  90  98 102 123 126 140 145 165 166 179 #> [17047] 202 222 223 224 232 237 241 260 264 268 270 276 277 278 285 288 318 320 #> [17065] 321 334 335 340 341 344 345 353 374 377 388 393 402 408 419 449 453 464 #> [17083] 473 480 498 499 504 515 525 529 530 533 537 539 550 552 556 587   8  14 #> [17101]  20  22  27  30  33  35  39  40  43  44  54  74  88 122 126 139 159 162 #> [17119] 164 166 175 180 191 207 211 215 234 246 259 260 264 269 283 286 289 308 #> [17137] 327 353 357 370 397 400 405 408 412 438 459 473 475 491 511 523 524 537 #> [17155] 540 564 570  20  30  38  61  62  78  80 106 126 137 145 147 152 190 212 #> [17173] 213 229 259 262 263 265 269 272 284 304 310 319 336 337 340 341 344 345 #> [17191] 347 365 366 367 371 385 393 403 413 423 436 444 445 479 481 492 497 500 #> [17209] 510 521 529 541 551 560 564 568 580 590  15  27  36  50  51  85 102 106 #> [17227] 112 118 160 163 166 168 193 195 200 214 216 220 225 250 254 257 267 288 #> [17245] 291 312 314 317 322 334 343 347 369 373 391 403 429 443 447 451 464 467 #> [17263] 490 493 494 495 498 501 506 511 512 521 531 532 533 536 545 547 556 568 #> [17281] 569 570   5  15  34  50  55  59  60  62  79  84  85  98 101 110 131 135 #> [17299] 150 158 170 188 191 201 211 217 224 228 251 257 259 264 271 273 287 292 #> [17317] 327 328 358 361 362 365 371 374 389 390 393 407 408 411 425 427 435 445 #> [17335] 479 488 489 496 505 528 545 556 568 575 587   7   9  17  31  35  45  61 #> [17353]  69  72  82  94 110 125 127 143 155 160 166 172 190 210 215 219 253 259 #> [17371] 262 271 276 279 284 287 298 306 314 325 330 340 347 369 373 376 378 380 #> [17389] 385 388 399 400 409 423 428 438 439 446 453 463 464 484 496 502 511 512 #> [17407] 522 526 546 553 556 561 569   9  25  60  67  69  90  92  94  96 104 112 #> [17425] 114 139 150 153 163 166 171 174 179 204 211 214 232 253 263 266 284 293 #> [17443] 298 306 307 312 322 340 341 351 352 361 366 372 399 416 423 425 429 433 #> [17461] 448 482 509 511 514 529 530 537 548 557 579 580 582 584  28  39  55  56 #> [17479]  61  64  67  69  74  77  81 100 102 113 117 118 123 125 140 141 151 158 #> [17497] 164 197 214 236 262 270 288 294 305 308 309 317 324 335 338 341 358 368 #> [17515] 374 381 390 396 397 407 415 419 429 468 469 486 488 499 507 515 558 586 #> [17533] 591   5  14  20  38  47  74  81  95 107 138 143 149 150 173 182 184 191 #> [17551] 195 198 224 232 252 274 298 299 312 325 339 354 372 375 393 410 453 454 #> [17569] 460 461 475 489 499 525 526 543 549 560 566 567 569 570 573 576 581 584 #> [17587] 590 591   4  12  14  20  23  36  44  64  69  72  84 104 106 107 111 128 #> [17605] 142 147 149 155 171 172 189 194 195 206 228 230 231 233 242 244 271 285 #> [17623] 290 303 315 338 340 369 376 377 392 399 405 431 463 477 489 497 509 515 #> [17641] 540 564 565 571 596  20  21  22  23  25  29  31  45  48  61  66  69  80 #> [17659]  88  90  93 103 114 119 122 148 160 166 169 171 178 182 184 185 187 190 #> [17677] 206 207 213 218 221 224 227 228 241 248 249 252 255 262 277 278 295 299 #> [17695] 322 324 339 381 382 383 384 387 393 396 404 421 430 439 447 452 454 472 #> [17713] 478 498 515 543 547 549 575 586 587  13  17  24  31  39  54  58  85  89 #> [17731] 120 127 129 144 150 152 166 177 206 210 218 235 236 238 251 269 270 281 #> [17749] 297 313 322 324 327 331 335 381 389 404 411 415 422 447 460 477 483 492 #> [17767] 519 520 534 545 579 580 586 588 599   4  58  66  84  86  95  99 100 110 #> [17785] 113 119 136 137 138 140 148 150 157 163 173 180 183 192 200 240 248 249 #> [17803] 260 262 274 280 289 298 321 323 326 335 336 340 346 356 365 408 415 428 #> [17821] 429 430 440 442 449 452 453 467 469 479 482 493 514 515 526 554 557 558 #> [17839] 567 599   7  13  16  23  34  37  46  49  79 102 109 113 118 137 149 150 #> [17857] 160 177 189 208 224 239 240 256 270 278 283 285 288 289 304 305 319 320 #> [17875] 325 333 362 370 373 381 394 403 410 424 428 429 441 447 449 453 462 489 #> [17893] 516 522 524 530 541 548 553 562 563 565 588 595 600  25  26  39  58  64 #> [17911]  67  78  86  94 101 107 118 137 159 163 196 220 250 253 268 283 297 300 #> [17929] 308 338 348 353 378 399 400 465 466 483 491 506 513 514 524 530 544 546 #> [17947] 562 568 583   5   6  12  17  26  39  42  44  47  54  65  67  70  74  79 #> [17965]  88  89 115 119 125 171 172 182 191 195 197 198 204 218 228 232 242 243 #> [17983] 245 262 264 271 273 280 306 308 318 333 338 343 344 348 359 361 362 374 #> [18001] 375 379 382 420 424 440 441 442 445 453 464 473 478 485 487 488 493 501 #> [18019] 503 514 519 520 541 561 564 571 577 582 595 597   6  14  23  27  35  44 #> [18037]  47  54  57  61  63  94  96  98  99 112 124 125 126 128 155 158 166 168 #> [18055] 184 209 222 232 249 251 273 275 278 282 289 293 325 344 345 349 350 370 #> [18073] 378 384 391 404 417 435 448 478 487 489 494 510 516 548 553 554 560 585 #> [18091] 596  17  18  21  48  54  61  78  79  96  98  99 114 119 124 131 144 146 #> [18109] 159 162 171 184 197 214 228 236 243 264 266 293 301 318 319 331 336 361 #> [18127] 364 367 378 385 386 401 402 406 412 418 425 439 446 447 469 477 479 485 #> [18145] 490 514 518 555 560 566 578 587 589 590 595 598   1   3  47  50  84  90 #> [18163]  93  97 100 108 118 119 120 132 139 145 174 183 197 210 211 214 232 233 #> [18181] 234 243 245 249 252 290 296 302 309 328 344 352 354 381 385 392 399 404 #> [18199] 406 407 409 412 417 421 427 436 442 450 453 471 482 499 502 507 518 521 #> [18217] 525 547 549 558 567 571 573 578 582 592 594  23  26  29  33  36  42  59 #> [18235]  67  71  78  79 108 147 149 151 162 163 186 190 193 194 199 201 204 205 #> [18253] 210 246 253 280 288 291 303 311 317 320 341 345 354 377 390 396 397 412 #> [18271] 428 433 460 462 477 489 502 504 538 559 571 583 600   1   7   9  32  42 #> [18289]  51  69  70  82  83  92  97 102 104 106 160 162 169 172 185 215 226 230 #> [18307] 236 241 243 245 252 258 259 273 279 294 299 305 306 310 311 329 331 332 #> [18325] 338 349 358 369 393 396 420 421 476 483 486 495 501 503 504 507 508 523 #> [18343] 527 561 567 585 587 602 603 605  11  18  19  58  66  76  79  94  98 122 #> [18361] 144 157 181 186 187 215 225 238 248 271 282 296 302 321 331 345 349 350 #> [18379] 355 359 366 376 381 386 392 393 406 415 425 426 434 449 450 453 460 467 #> [18397] 473 476 482 483 487 508 509 515 534 547 552 561 567 569 587 588   5   6 #> [18415]  23  30  45  73  76  80  91  93  98 117 119 122 136 140 149 150 164 165 #> [18433] 187 188 189 207 211 226 231 238 252 254 263 266 267 305 315 344 349 359 #> [18451] 360 373 396 400 418 423 448 451 452 456 466 497 516 521 534 535 540 551 #> [18469] 560 573 582 587 589 590 599 605 609   0   8   9  25  39  46  55  67  68 #> [18487] 100 102 105 114 125 132 168 184 187 192 220 242 268 273 279 286 287 296 #> [18505] 300 309 317 321 327 335 336 359 373 379 391 399 405 409 418 420 425 443 #> [18523] 447 449 450 453 464 476 481 483 490 491 496 501 509 512 521 523 529 534 #> [18541] 538 540 548 567 605 606   2  16  21  24  29  34  46  49  66  71  81  87 #> [18559] 105 107 112 117 148 157 162 167 169 173 194 196 203 210 217 223 240 253 #> [18577] 263 275 283 289 295 299 301 311 339 351 367 377 391 411 418 420 424 445 #> [18595] 455 464 484 486 488 498 510 526 528 535 547 553 558 589 595 597   1  28 #> [18613]  66  70  81  94  99 106 110 133 158 160 167 193 197 201 234 240 241 243 #> [18631] 246 263 289 293 297 304 311 316 317 320 328 359 373 386 389 396 424 436 #> [18649] 438 462 463 470 475 489 498 502 522 548 550 551 555 580 582 589 603 613 #> [18667]   0   9  12  14  17  32  43  47  52  61  68  72  89 100 121 142 150 154 #> [18685] 162 168 182 219 220 232 241 250 255 256 258 263 265 282 283 322 327 332 #> [18703] 352 377 378 381 390 394 396 397 415 433 455 471 481 486 492 496 519 539 #> [18721] 552 582 583 585 590 603 609  27  38  50  62  67  86  90  99 100 104 123 #> [18739] 126 131 154 160 168 178 203 227 245 253 273 288 304 307 311 314 323 331 #> [18757] 350 359 368 370 398 412 418 428 436 440 441 444 468 474 481 483 486 504 #> [18775] 527 543 554 555 559 564 571 596 604 610   1   3   7  11  12  16  33  43 #> [18793]  45  56  67  68  74  77  84  89  94  95  98  99 108 114 116 128 141 162 #> [18811] 178 194 200 206 214 231 251 265 269 271 272 286 291 294 309 314 336 342 #> [18829] 367 373 379 396 399 401 422 426 438 450 480 506 515 516 547 583 586 593 #> [18847] 610 611   2   5   6  10  14  35  46  67  70  71  77  79 109 146 152 154 #> [18865] 166 169 197 198 206 208 216 234 236 263 265 268 272 284 289 292 295 298 #> [18883] 300 304 312 332 366 370 376 411 418 438 439 450 462 463 472 474 478 480 #> [18901] 484 492 500 519 526 544 548 549 551 562 571 576 584 600  33  35  53  58 #> [18919]  62  63  69  72  94  99 119 128 129 135 182 186 190 191 203 210 220 229 #> [18937] 233 239 242 244 245 256 261 264 295 304 306 318 336 364 371 374 380 383 #> [18955] 397 398 409 410 411 427 448 457 462 466 474 526 544 546 555 561 576 581 #> [18973] 591 603 604 611 612   6   9  30  44  76  81 121 136 157 171 177 181 186 #> [18991] 206 213 256 259 279 285 286 300 302 338 339 348 351 374 383 401 406 419 #> [19009] 434 451 454 466 472 482 491 496 516 541 574 580 585 590 591 617   5  23 #> [19027]  32  69  70  73  75  78  89 117 131 151 153 166 168 174 176 178 206 218 #> [19045] 223 295 315 327 329 345 349 351 353 369 379 382 387 388 393 394 396 401 #> [19063] 409 437 459 465 471 488 491 492 494 501 521 540 550 558 561 570 615 617 #> [19081]   1  21  43  51  60  64  65  74  84  88  97 102 114 115 119 122 133 136 #> [19099] 138 145 149 178 196 201 213 248 249 253 260 287 293 340 386 411 412 449 #> [19117] 456 470 478 510 513 523 532 534 535 543 554 568 569 575 594 596 605   3 #> [19135]   8  23  26  37  60  62  72  80  83  92  98 122 123 144 166 181 190 200 #> [19153] 219 236 242 245 260 270 272 277 316 317 325 327 329 344 351 353 363 370 #> [19171] 380 381 388 397 425 449 451 454 466 468 469 470 492 494 506 507 521 527 #> [19189] 535 583 597 619  26  36  45  46  67  80  81  89  98 106 107 117 122 130 #> [19207] 146 154 168 169 173 175 176 185 195 198 207 213 227 233 252 253 260 273 #> [19225] 286 298 318 336 337 349 352 376 397 436 445 464 495 501 512 521 531 557 #> [19243] 559 561 567 581 582  23  29  35  52  61  79  80  86  99 111 118 124 129 #> [19261] 130 149 167 183 185 189 191 205 210 218 220 224 227 241 243 250 268 272 #> [19279] 298 342 344 370 392 412 442 448 451 473 492 498 499 500 501 506 507 517 #> [19297] 521 523 538 563 597 616  15  29  37  40  48  66  68  75  79  89  99 106 #> [19315] 108 109 156 161 179 190 221 229 238 240 241 257 270 281 293 297 300 301 #> [19333] 321 328 341 343 348 352 360 371 390 397 432 457 460 462 482 494 500 503 #> [19351] 516 521 528 532 533 536 540 568 579 580 581 587 591 598 600 617   8  17 #> [19369]  19  20  41  51  53  55  62  63  70  97 125 132 139 161 163 175 187 191 #> [19387] 227 237 244 271 280 282 290 295 297 305 315 337 354 372 376 377 390 395 #> [19405] 402 410 451 452 454 459 469 488 489 501 506 509 526 532 547 551 559 563 #> [19423] 567 599 618   7  17  22  24  28  33  91  98 121 139 144 153 177 196 197 #> [19441] 204 205 208 209 217 218 220 244 245 259 269 287 289 295 308 329 356 359 #> [19459] 410 424 444 449 453 454 461 477 483 494 495 497 519 522 530 555 572 590 #> [19477] 595 596 598 605 612 613 618 622 624   6  12  13  21  35  52  94  98 109 #> [19495] 125 138 154 155 157 176 180 184 223 230 244 248 250 255 256 264 276 277 #> [19513] 287 302 304 312 319 325 336 341 359 363 364 368 375 381 393 406 414 432 #> [19531] 433 448 458 472 475 489 501 503 512 514 516 538 590 591 596 598 600 617 #> [19549] 621   0  17  19  29  35  36  38  70  76  92  99 103 111 117 118 121 124 #> [19567] 125 132 135 164 171 178 187 202 204 209 230 235 237 256 257 260 268 279 #> [19585] 280 300 311 314 323 326 332 350 366 376 380 408 415 426 447 452 456 463 #> [19603] 468 498 504 517 521 523 531 543 545 587 589 599 602 603 607 612 613 619 #> [19621] 625  10  15  32  48  59  63  97 104 110 112 117 137 140 165 167 185 191 #> [19639] 196 202 207 225 228 239 241 261 274 287 298 301 313 316 319 320 330 334 #> [19657] 336 345 349 352 368 369 388 391 401 406 408 419 424 431 441 454 469 515 #> [19675] 522 591 611 618 620 622  65  75  83  87  95 147 162 163 166 184 186 203 #> [19693] 213 219 228 231 232 247 250 256 265 278 283 293 303 306 308 367 376 401 #> [19711] 406 410 451 454 455 466 469 475 484 487 494 504 526 535 546 548 577 578 #> [19729] 582 606 618 619 627 631   3   6  10  23  27  35  50  69  84  89  96 107 #> [19747] 115 121 135 138 147 152 157 169 192 196 220 229 243 246 250 254 255 256 #> [19765] 260 281 298 313 319 330 332 335 336 337 353 357 380 407 412 436 438 448 #> [19783] 463 480 503 509 513 530 554 558 577 581 607 616   2 101 111 117 136 144 #> [19801] 145 161 163 164 168 180 196 197 207 220 225 227 228 268 269 306 324 335 #> [19819] 341 368 389 403 413 455 462 491 492 493 501 511 529 535 541 542 549 560 #> [19837] 567 569 582 590 594 602 604 605 614 616 625 631   7  10  26  30  33  34 #> [19855]  50  52  58  66  69  73  78  93  98 104 105 106 108 138 139 149 152 168 #> [19873] 190 216 224 226 229 230 261 262 273 276 294 298 335 360 398 402 404 411 #> [19891] 412 425 428 449 451 452 465 477 483 497 502 503 510 512 542 549 567 572 #> [19909] 593 596 599 612 616 621  13  18  19  27  42  47  59  60  61  67  69  76 #> [19927]  88 120 135 154 164 171 172 185 215 225 233 246 259 291 302 315 322 329 #> [19945] 330 331 344 356 358 370 372 373 375 381 382 390 407 414 419 434 438 439 #> [19963] 448 453 475 485 486 496 503 510 520 534 535 540 547 555 562 581 592 606 #> [19981] 614 625 633  11  15  40  42  53  59  64  67  95 114 117 118 120 130 145 #> [19999] 149 150 151 152 159 174 175 200 212 243 250 253 265 275 288 304 321 339 #> [20017] 376 395 404 413 416 420 427 429 438 440 443 447 458 461 468 475 509 523 #> [20035] 535 536 538 539 542 545 565 576 587 591 608 628 629 635   3  22  27  28 #> [20053]  37  48  59  62  66  67  76  78  81  92 112 123 126 144 174 200 203 205 #> [20071] 216 237 242 244 280 281 282 292 299 300 304 317 343 346 359 371 378 419 #> [20089] 424 429 462 475 480 485 487 510 517 520 533 560 586 627   7  51  63  68 #> [20107]  69  71  72  76  81  88  89  90  95 102 107 124 138 142 158 167 177 178 #> [20125] 180 197 220 246 248 269 270 274 307 312 313 318 326 345 360 389 393 397 #> [20143] 403 407 412 413 421 429 433 447 451 452 462 467 474 475 491 508 528 538 #> [20161] 543 556 564 590 631  10  11  12  13  27  30  54  81  87  98 100 125 131 #> [20179] 132 139 180 193 196 203 204 228 233 241 260 278 286 292 306 330 340 351 #> [20197] 356 363 371 372 378 403 404 412 424 430 444 456 481 489 494 509 513 524 #> [20215] 528 531 537 551 560 561 562 570 583 590 608 609 611 615 632   8  29  34 #> [20233]  81 102 106 108 125 136 146 188 196 211 212 222 226 231 235 248 275 276 #> [20251] 278 304 329 346 348 362 372 377 378 382 394 395 396 408 437 442 454 492 #> [20269] 496 512 515 527 540 544 551 555 559 564 575 588 604 620 623 631 639   8 #> [20287]  11  17  20  26  39  52  53  54  67  68  80  94  96 115 131 136 141 155 #> [20305] 157 158 190 194 197 212 216 230 240 268 271 279 317 318 322 359 371 382 #> [20323] 389 394 416 426 428 451 455 456 458 459 460 465 505 512 571 607 620 634 #> [20341]  14  26  29  41  61  77  81  90  93  98 101 110 118 122 124 126 128 129 #> [20359] 138 149 170 177 178 187 200 219 220 222 232 243 252 253 266 274 279 306 #> [20377] 317 350 355 377 385 389 390 402 414 415 423 432 435 504 533 537 541 560 #> [20395] 571 580 583 587 607 616 622   9  36  50  54  58  79  82  91 101 108 112 #> [20413] 120 122 125 130 134 149 153 155 180 189 205 206 217 219 225 228 233 251 #> [20431] 260 276 313 314 321 327 331 334 337 341 354 371 378 381 394 403 437 445 #> [20449] 450 459 466 468 478 483 485 486 489 519 523 539 568 593 601 606 609 612 #> [20467] 614 636 639  19  28  38  42  46  51  85  99 117 123 124 127 128 135 140 #> [20485] 154 170 173 189 198 210 214 227 228 240 251 257 267 272 281 295 298 307 #> [20503] 308 312 315 343 354 361 371 372 373 377 383 392 402 419 425 430 435 436 #> [20521] 437 448 460 472 475 481 489 503 521 534 536 544 546 555 558 576 592 600 #> [20539] 604 617 621 639   0   8  18  24  44  66  67  71  83  84 134 152 194 238 #> [20557] 249 250 252 272 287 300 324 337 339 359 370 377 401 404 425 430 436 443 #> [20575] 447 462 474 475 481 484 491 532 537 560 561 574 590 592 593 609 618 629 #> [20593] 636 637 643 644   2   4   9  22  26  31  56  70  92  99 103 104 118 119 #> [20611] 127 128 130 135 142 147 157 166 168 191 194 207 210 243 244 264 266 268 #> [20629] 269 275 289 326 330 349 360 361 373 375 395 397 427 445 457 466 476 487 #> [20647] 491 495 511 523 560 564 572 574 583 594 608 621 623 627 642   1   2  18 #> [20665]  19  34  59  62  69  81  82  86  87  95 108 113 123 134 140 142 143 165 #> [20683] 169 173 182 198 204 219 221 228 255 283 291 294 323 335 358 377 386 414 #> [20701] 423 456 461 468 504 506 507 510 517 523 535 536 543 552 555 557 573 574 #> [20719] 582 600 614 617 619 624 631 634 635  32  36  39  40  55  59  63  68  74 #> [20737]  89  94 115 123 143 166 170 176 196 210 214 219 236 238 243 247 250 260 #> [20755] 262 290 291 293 304 317 320 322 323 326 333 352 364 369 370 376 378 385 #> [20773] 393 405 417 425 428 433 439 453 473 494 497 511 512 515 516 522 531 532 #> [20791] 555 561 567 568 575 586 601 605 620 622 638 646  54  56  63  65  70  86 #> [20809]  94 107 108 120 129 139 149 150 170 172 185 192 198 209 219 226 228 229 #> [20827] 242 248 261 272 284 292 296 297 321 333 363 405 406 422 447 452 467 472 #> [20845] 485 492 495 524 529 540 541 546 557 562 589 594 601 602 608 610 636 639 #> [20863] 643   2  10  49  57  60  64  67  83  96 103 111 126 134 177 178 179 188 #> [20881] 207 221 255 262 263 302 309 320 327 341 368 394 396 401 408 417 423 428 #> [20899] 432 439 440 448 459 471 490 506 509 519 524 526 529 536 571 572 574 596 #> [20917] 604 612 640 641 648   5  18  25  33  37  42  43  44  45  49  62  63  65 #> [20935]  70  92  95  96 114 116 131 141 145 154 171 177 178 188 205 208 222 244 #> [20953] 245 256 257 305 306 311 327 329 330 332 338 358 373 377 388 400 408 433 #> [20971] 440 443 444 459 472 490 505 515 517 521 529 532 533 558 579 586 590 600 #> [20989] 607 612 616 619 650   0  10  23  43  54  56  62  70  81  84  87  93 119 #> [21007] 133 174 178 186 187 196 199 201 206 222 241 243 253 258 270 274 278 307 #> [21025] 312 337 339 343 345 361 366 380 390 410 416 418 419 422 424 429 430 441 #> [21043] 442 465 466 474 480 483 491 501 510 521 523 529 541 552 597 612 639 647 #> [21061]  12  41  49  60  71  80  93  96  99 106 129 154 162 167 168 169 181 184 #> [21079] 193 200 232 239 242 244 246 248 253 254 259 260 262 265 278 279 280 288 #> [21097] 290 297 303 315 324 325 326 349 352 359 374 376 380 386 389 406 432 434 #> [21115] 475 479 488 493 494 511 518 526 555 575 577 582 588 593 600 603 621 623 #> [21133] 639 646 653   0   8  35  40  48  51  52  55  87  88 103 121 122 124 132 #> [21151] 136 140 149 153 163 172 190 197 203 206 211 213 223 235 242 245 255 257 #> [21169] 259 269 275 279 285 292 303 310 317 318 328 331 340 345 347 352 372 376 #> [21187] 382 386 389 390 413 440 457 476 516 525 527 547 558 559 561 563 567 569 #> [21205] 577 591 593 613 624 626 649 654   4  14  16  19  34  80  81  85  91  98 #> [21223] 102 114 129 147 153 157 158 161 178 227 244 250 260 271 280 283 288 307 #> [21241] 313 314 338 339 356 382 383 384 400 405 415 426 432 435 441 448 449 461 #> [21259] 483 497 506 507 521 524 537 540 545 547 553 577 589 597 601 628 632 638 #> [21277]   3   8  16  30  32  33  52  57  68  72  83  95 104 110 118 134 155 165 #> [21295] 169 181 185 201 207 221 242 259 275 295 298 306 312 321 333 345 352 354 #> [21313] 372 374 376 414 415 419 429 445 459 480 484 508 519 531 544 557 559 576 #> [21331] 586 607 611 626 639 649   2   8  24  31  33  50  52  53  77  80  86  93 #> [21349] 102 113 114 145 148 168 177 185 197 200 203 207 208 228 249 268 283 291 #> [21367] 307 316 329 357 359 389 396 403 421 432 441 443 447 461 466 472 483 501 #> [21385] 507 512 529 532 539 542 546 555 574 577 579 585 596 609 647 650   0  10 #> [21403]  45  66 103 109 121 124 130 133 150 166 191 229 230 234 235 252 256 267 #> [21421] 269 292 293 324 336 357 361 364 386 401 418 420 422 428 438 442 502 505 #> [21439] 531 553 572 584 591 593 595 596 600 611 615 617 621 622 638 640 652 653 #> [21457]   2   5  45  56  65  71  74  79 103 124 126 142 149 150 151 153 157 168 #> [21475] 171 188 215 216 239 243 248 254 270 288 298 301 332 370 372 376 387 390 #> [21493] 392 403 408 423 435 440 456 510 525 527 528 552 558 564 570 575 597 657 #> [21511]  10  21  38  40  48  54  62  92  98 103 107 114 116 125 129 136 144 146 #> [21529] 156 157 167 172 177 195 202 227 236 272 286 289 303 305 316 331 333 344 #> [21547] 349 375 378 403 414 423 424 430 476 481 487 498 502 504 514 517 531 534 #> [21565] 536 545 552 562 564 586 589 602 603 610 622 626 648 657 658   9  28  42 #> [21583]  50  66  68  71  79  89  92  98 106 132 137 143 151 157 166 170 171 191 #> [21601] 209 215 226 228 229 236 237 241 251 252 290 292 302 312 313 331 335 343 #> [21619] 354 373 381 384 387 391 398 409 422 433 456 459 464 474 481 486 495 502 #> [21637] 505 508 517 529 533 535 563 591 602 611 616 646 649 655   5  14  17  32 #> [21655]  49  81  98 102 115 119 129 132 134 150 178 193 218 231 232 239 240 283 #> [21673] 288 290 303 309 322 324 330 342 346 357 358 361 364 365 387 398 415 438 #> [21691] 446 449 451 452 469 471 477 482 505 517 519 523 540 548 597 605 611 612 #> [21709] 614 619 644 655 657 659  13  17  18  30  35  39  46  87  91 119 127 145 #> [21727] 185 189 195 213 225 238 241 258 259 280 303 323 334 355 368 411 435 442 #> [21745] 482 489 492 502 509 510 518 547 558 559 563 572 581 590 604 617 620 621 #> [21763] 651 660  10  11  21  27  28  37  56  95  97 130 150 171 182 183 221 226 #> [21781] 237 247 250 252 260 262 264 265 279 281 285 293 304 308 310 311 312 314 #> [21799] 346 347 349 351 361 395 424 438 461 468 469 471 473 475 494 506 511 520 #> [21817] 533 540 549 559 565 590 593 596 618 620 651 659   1  21  24  33  58  83 #> [21835]  89 113 115 130 135 144 152 156 158 166 182 185 198 205 215 217 218 220 #> [21853] 223 232 247 259 261 264 300 303 322 332 333 343 365 389 391 417 422 424 #> [21871] 425 438 467 471 474 496 504 506 513 524 533 549 551 584 607 612 616 629 #> [21889] 647 648  11  21  27  39  43  44  53  59  61  66  74  94  95 138 143 147 #> [21907] 159 175 176 180 205 208 215 221 227 230 233 235 250 267 270 273 281 282 #> [21925] 292 296 303 311 319 327 337 342 345 347 358 362 381 385 387 422 424 431 #> [21943] 433 434 446 453 460 463 478 479 486 487 495 500 504 532 535 542 550 553 #> [21961] 556 573 590 608 612 618 620 652 654 660  11  19  22  44  45  46  57  62 #> [21979]  64  71  84 102 111 115 129 134 138 140 207 212 231 235 236 242 246 248 #> [21997] 253 254 265 266 272 284 295 302 304 313 324 329 339 351 357 364 405 430 #> [22015] 432 435 437 440 463 470 482 486 490 496 521 526 527 546 558 559 563 573 #> [22033] 575 589 599 603 606 632 633 635 640 647 658   1   7  11  13  19  20  26 #> [22051]  48  61  73  90  96 121 136 140 143 152 153 170 191 201 220 223 230 232 #> [22069] 238 251 258 275 284 288 307 309 328 330 338 344 350 352 354 362 365 388 #> [22087] 391 401 418 435 437 460 464 491 493 504 513 522 523 525 534 538 540 543 #> [22105] 546 553 569 570 584 586 588 621 623 625 626 648 658 667  11  25  28  38 #> [22123]  46  56  60  74  79  81  85  86 101 110 118 120 124 149 156 174 186 209 #> [22141] 219 224 233 248 263 264 265 277 300 303 314 325 336 349 353 363 368 371 #> [22159] 372 379 385 386 387 416 422 432 439 458 462 472 475 478 479 480 488 501 #> [22177] 505 528 581 588 599 619 621 622 628 632 665   3   9  19  20  32  39  60 #> [22195]  63  83  91  96 101 110 116 133 170 197 233 234 235 236 238 243 273 276 #> [22213] 279 298 301 308 314 325 339 349 351 368 373 377 423 424 436 442 444 459 #> [22231] 463 491 500 512 514 524 527 559 571 577 600 603 618 623 656 660 662   2 #> [22249]   3  13  24  32  40  41  42  43  89 121 137 144 146 164 176 178 180 188 #> [22267] 192 211 215 216 244 245 267 290 293 302 303 310 326 327 349 353 363 382 #> [22285] 385 390 395 412 425 428 434 442 444 456 478 480 481 484 488 489 494 498 #> [22303] 508 511 514 517 527 554 568 571 585 592 593 623 631   3  32  33  43  48 #> [22321]  54  63  66  75  76  80  81  90  94  96 103 104 108 116 119 136 142 150 #> [22339] 151 152 163 164 181 186 206 212 213 220 243 244 257 308 309 324 329 336 #> [22357] 349 361 367 381 387 394 398 399 400 417 420 430 438 440 445 451 454 459 #> [22375] 465 477 491 505 511 512 517 550 557 560 567 569 574 576 593 603 609 612 #> [22393] 617 619 657 672  29  40  50  75  84  96 116 125 147 153 165 167 178 180 #> [22411] 193 207 211 232 248 251 267 269 273 280 293 308 311 317 318 319 335 363 #> [22429] 384 387 391 395 408 412 457 463 478 479 482 488 499 501 508 527 547 551 #> [22447] 555 557 566 584 599 618 620 630 635 652 659 662  29  48  65  68  75  77 #> [22465]  84 101 102 140 143 156 159 162 169 192 195 212 216 217 218 219 236 237 #> [22483] 250 264 272 275 277 295 297 307 331 335 340 343 349 353 356 357 369 371 #> [22501] 382 386 389 397 399 408 411 417 418 432 436 470 498 509 512 520 544 547 #> [22519] 549 564 572 577 582 591 603 640 663   5   9  16  37  48  49  51 100 115 #> [22537] 127 134 136 138 140 143 144 146 160 174 175 182 192 220 221 225 237 264 #> [22555] 266 277 278 282 318 330 332 335 354 374 378 417 427 434 436 440 449 458 #> [22573] 461 489 495 519 527 528 531 533 540 546 553 561 565 567 574 592 637 641 #> [22591] 650 659 663  10  22  30  54  59  66  68  70  90  96 110 123 127 137 145 #> [22609] 146 153 154 166 167 173 174 188 195 198 209 218 220 230 245 264 267 286 #> [22627] 289 292 316 327 361 365 371 375 379 381 392 397 402 405 406 409 426 434 #> [22645] 439 448 457 471 483 498 506 510 514 517 522 533 536 537 540 546 549 561 #> [22663] 567 586 587 588 600 602 605 637 647 661 668   3  11  40  43  56  57  67 #> [22681]  76  88 115 116 125 129 132 135 139 144 158 164 196 206 213 215 216 231 #> [22699] 249 255 259 270 284 291 292 304 314 320 324 339 343 356 358 361 366 386 #> [22717] 389 390 392 398 417 420 424 436 452 454 459 464 477 483 503 512 528 536 #> [22735] 539 546 551 552 562 563 593 627 630 637 638 645 652 657 667 676   6   8 #> [22753]   9  17  27  32  38  40  49  52  69  97 107 108 122 124 132 136 143 166 #> [22771] 174 180 184 186 187 204 224 225 237 238 246 248 257 259 260 271 284 307 #> [22789] 316 323 325 345 355 362 365 366 373 384 430 454 456 475 478 484 507 514 #> [22807] 528 551 557 561 571 574 588 596 601 605 616 620 629 632 634 652 663 667 #> [22825] 669 672   1   2   3   6  15  30  47  60  66  74  79  87  92 100 145 167 #> [22843] 172 173 194 199 219 224 237 238 257 265 291 298 310 337 347 361 365 371 #> [22861] 374 398 412 415 421 437 439 442 452 474 494 498 502 542 546 563 578 591 #> [22879] 598 599 601 609 613 617 621 625 645 654 657 666 679   5  17  57  64  66 #> [22897]  71  72  75  96 102 106 114 117 144 153 158 175 178 182 188 190 200 201 #> [22915] 205 214 235 298 305 311 323 331 366 374 397 420 428 452 457 483 486 513 #> [22933] 522 524 530 544 548 557 563 567 590 601 602 611 614 626 630 631 635 644 #> [22951] 645 646 652 656 665 668 670  14  30  36  44  51  55  58  74  78  81 103 #> [22969] 109 120 124 126 143 176 178 181 208 222 223 230 231 260 261 272 273 282 #> [22987] 283 301 303 314 335 350 370 376 386 391 396 407 421 447 453 489 490 495 #> [23005] 508 512 525 527 545 549 552 561 565 573 580 602 616 629 640 662 668 669 #> [23023]   3   8   9  10  11  28  30  48  56  66  81  88  91  98 115 118 121 139 #> [23041] 143 150 167 169 170 204 211 215 220 228 229 241 244 254 274 280 301 302 #> [23059] 309 320 326 328 329 333 354 356 359 373 385 393 426 431 436 449 461 462 #> [23077] 470 472 476 478 493 509 517 519 536 570 574 587 593 600 612 634 636 639 #> [23095] 642 647 650 653 660 662 670 671 676 677  12  20  25  40  44  71  74  78 #> [23113]  99 153 156 157 168 178 182 202 217 230 245 249 251 256 261 294 316 330 #> [23131] 335 344 357 366 368 383 406 408 423 428 474 480 488 499 502 519 557 561 #> [23149] 579 592 611 624 644 655 660 669 675 676   8  11  24  29  34  66  67  70 #> [23167]  76  85  99 104 115 122 126 136 139 156 234 242 255 262 267 292 301 305 #> [23185] 317 319 321 335 343 355 357 360 378 385 392 404 409 423 429 450 460 467 #> [23203] 484 490 498 499 507 519 533 536 542 544 555 559 569 591 594 598 602 603 #> [23221] 613 621 623 633 660 667 673  17  23  26  27  31  42  58  60  73  81  90 #> [23239]  93  97 123 125 126 149 150 155 157 159 168 178 180 199 203 208 226 251 #> [23257] 257 258 267 286 303 320 337 338 342 346 364 365 371 391 404 410 428 442 #> [23275] 448 452 455 456 459 462 467 468 503 505 509 518 523 537 547 550 555 559 #> [23293] 572 577 616 625 626 631 634 642 649 664 667 670 677   8  21  31  39  44 #> [23311]  45  54  60  67  79  87 103 104 105 109 111 121 134 137 151 153 166 192 #> [23329] 210 217 225 305 332 344 356 361 372 380 407 420 425 450 473 479 520 523 #> [23347] 544 547 557 562 565 568 589 592 599 608 613 631 632 646 662 667 671 681 #> [23365]   0  33  38  39  47  75  80 103 110 133 153 158 161 169 193 195 201 218 #> [23383] 223 232 243 247 280 295 330 348 350 368 371 386 404 410 420 451 457 458 #> [23401] 463 510 520 522 561 576 580 585 587 596 607 609 613 614 617 624 628 661 #> [23419] 662 681   4   6   8  29  44  46  53  55  75  83  97 112 116 122 137 162 #> [23437] 188 197 211 215 216 229 248 252 274 276 279 284 288 295 296 297 346 355 #> [23455] 360 363 376 377 383 389 391 411 441 448 457 489 507 511 514 541 550 581 #> [23473] 595 596 598 623 638 648 652 655 660 662 676 677 679 686 688   5  23  39 #> [23491]  45  50  54  55  64  75  77  89 104 127 132 156 167 169 184 187 200 204 #> [23509] 209 216 224 238 243 244 247 248 256 266 294 295 305 307 314 331 338 345 #> [23527] 361 380 381 389 409 414 415 420 432 440 442 456 460 466 472 479 480 492 #> [23545] 493 504 510 516 530 543 556 557 567 586 587 593 599 609 610 635 637 641 #> [23563] 660 664 669 681  12  18  23  32  33  42  54  99 100 119 120 123 136 143 #> [23581] 146 180 188 196 200 216 219 220 226 233 237 262 273 288 291 294 296 301 #> [23599] 302 305 307 317 329 338 347 352 356 368 373 393 397 407 409 438 441 450 #> [23617] 459 462 494 513 521 555 560 575 612 630 650 654 669 681 685 689   0   5 #> [23635]  11  12  17  30  38  41  45  62  65  80  88  89  91 103 110 112 130 155 #> [23653] 157 174 175 179 183 187 203 204 212 227 235 242 253 256 263 264 302 306 #> [23671] 310 311 314 321 322 323 339 351 369 379 388 389 391 397 406 407 412 415 #> [23689] 418 420 423 433 434 439 445 451 458 476 482 487 505 508 509 512 516 517 #> [23707] 531 540 544 551 553 563 565 568 575 581 599 604 608 657 659 679 686 690 #> [23725]   6  13  15  25  47  56  78  82  98 105 107 112 151 153 158 161 164 208 #> [23743] 221 227 230 236 242 253 270 275 295 314 325 335 345 347 348 355 359 360 #> [23761] 377 387 389 391 393 400 402 405 421 431 432 435 436 440 441 475 483 485 #> [23779] 487 489 511 532 534 539 546 549 562 570 586 593 595 602 620 635 642 645 #> [23797] 654 662 674 678 683 692  20  39  40  42  53  60  72  88  98 106 117 142 #> [23815] 157 159 169 172 207 233 255 261 262 283 286 288 302 307 318 324 326 362 #> [23833] 370 371 378 380 394 426 431 443 478 489 496 505 509 531 536 538 551 553 #> [23851] 561 564 577 586 587 589 591 599 601 610 629 630 652 659 678 680   5  13 #> [23869]  19  21  29  38  50  51  62  83  86  96 112 118 125 138 156 164 167 181 #> [23887] 185 191 211 215 229 232 241 244 267 277 290 296 297 313 317 318 336 347 #> [23905] 351 354 370 379 380 392 398 399 408 428 446 452 489 490 492 494 512 520 #> [23923] 541 549 568 577 588 597 600 610 621 626 628 636 646 647 685 692 693   6 #> [23941]  15  30  38  48  52  71  83 124 125 142 155 192 200 207 249 273 293 296 #> [23959] 309 310 313 327 330 334 336 344 362 365 370 377 395 402 411 420 436 447 #> [23977] 485 490 494 498 499 505 516 520 526 557 559 561 568 570 575 582 583 586 #> [23995] 600 610 632 636 646 651 667 689   3  16  24  32  46  48  50  53  55  56 #> [24013]  60  72  77  78 123 126 130 140 143 146 148 154 172 189 206 211 218 237 #> [24031] 261 268 273 280 287 303 306 313 319 337 360 363 383 391 396 403 424 436 #> [24049] 437 444 447 449 462 477 488 494 505 515 520 525 532 553 579 582 587 588 #> [24067] 600 618 627 630 652 662 667 670 671 678 690 692 696   3   5  15  21  24 #> [24085]  33  38  53  54  75  78  79  92 130 145 187 196 212 226 244 251 258 269 #> [24103] 275 295 301 303 307 310 320 325 330 338 347 350 355 358 383 385 388 391 #> [24121] 400 401 410 424 451 457 463 468 473 474 483 492 502 515 520 526 538 548 #> [24139] 551 557 579 584 595 606 646 648 657 660 675 677 681   0   2   3  22  30 #> [24157]  31  36  64  87 116 118 124 132 156 163 171 189 215 221 233 237 240 242 #> [24175] 245 247 258 267 300 302 303 310 315 319 326 348 366 389 393 400 412 423 #> [24193] 427 448 475 497 508 527 535 551 554 593 597 600 603 620 625 630 632 634 #> [24211] 648 653 654 668 673 687 690   5  11  20  26  28  50  52  55  65  70  76 #> [24229]  82 120 128 146 151 152 159 165 175 187 188 211 214 226 229 232 243 246 #> [24247] 247 251 260 264 288 298 306 307 309 315 318 328 332 378 382 388 393 397 #> [24265] 436 440 455 465 467 476 487 490 493 496 510 521 553 567 587 589 600 603 #> [24283] 612 613 619 631 635 639 649 653 665   7  10  11  19  27  32  33  44  48 #> [24301]  49  57  60  61  72  75  97 109 156 172 175 177 187 197 204 217 224 227 #> [24319] 237 252 262 272 298 313 323 330 332 338 341 352 388 399 403 414 453 470 #> [24337] 482 502 531 534 545 549 559 560 563 566 575 576 580 588 610 613 622 629 #> [24355] 630 640 646 685 698  26  54  57  68  74  79  80 108 110 123 126 134 139 #> [24373] 160 166 171 186 207 208 244 254 350 370 378 389 417 430 436 439 451 452 #> [24391] 465 466 472 485 496 501 504 526 536 542 549 560 562 569 570 577 590 593 #> [24409] 604 610 613 615 625 633 647 651 662 663 687 688 692 695 696   0   7   9 #> [24427]  11  25  26  38  40  56  98 110 126 130 141 149 157 169 190 192 201 205 #> [24445] 209 212 214 215 218 224 248 262 269 274 281 282 284 289 295 314 317 323 #> [24463] 324 329 348 366 367 375 380 381 382 408 415 426 430 438 448 453 457 459 #> [24481] 498 502 503 506 512 527 542 545 552 556 559 564 572 576 581 591 594 604 #> [24499] 620 644 673 680 683 686  15  16  19  21  23  31  36  42  65  79  88  93 #> [24517]  98 115 127 128 145 196 198 201 203 207 234 236 240 243 249 254 269 274 #> [24535] 282 298 321 340 384 389 402 422 428 437 459 461 475 512 538 558 563 565 #> [24553] 586 601 606 616 643 655 656 661 668 670 697   1   9  11  20  25  69  70 #> [24571]  74 113 121 145 152 158 169 174 181 200 212 215 220 236 242 248 266 277 #> [24589] 294 315 342 375 378 380 415 419 422 447 477 502 518 525 529 537 541 548 #> [24607] 549 573 578 586 595 599 643 649 667 669 673 677 681 690  20  25  34  37 #> [24625]  41  42  49  51  53  57  58  64  69  87  97 110 115 122 142 156 162 175 #> [24643] 187 224 234 240 249 273 279 291 310 313 325 333 365 371 373 384 398 403 #> [24661] 404 409 411 412 414 439 443 445 454 469 479 484 503 508 525 531 541 551 #> [24679] 559 561 564 568 572 577 590 603 610 614 616 618 636 650 668 673 689 691 #> [24697] 698   0   6   7  10  11  28  32  59  89 115 127 149 155 165 172 174 195 #> [24715] 214 219 242 245 249 255 269 284 298 301 310 311 329 332 334 338 342 360 #> [24733] 380 382 388 398 422 430 432 436 442 454 469 494 497 501 502 515 519 520 #> [24751] 534 537 542 557 591 596 601 605 610 618 620 626 636 664 669 674 680   5 #> [24769]  18  53  58  70  98 118 121 123 131 145 150 159 160 176 179 187 192 212 #> [24787] 214 218 228 231 234 238 264 273 283 284 301 307 325 328 355 381 392 395 #> [24805] 397 417 429 468 508 513 524 528 535 550 553 555 565 574 586 591 595 606 #> [24823] 620 630 632 633 652 655 667 670 683 692 701 706   1   5  11  30  49  63 #> [24841]  67  74  84  92  96 129 141 169 181 186 196 201 202 221 229 232 238 285 #> [24859] 288 298 333 351 353 362 378 381 384 401 411 450 461 467 472 481 504 524 #> [24877] 525 527 528 537 556 561 563 565 582 586 587 593 601 615 622 627 664 667 #> [24895] 675 681 686 693  10  16  23  25  28  40  42  43  56  66  82  90 120 121 #> [24913] 123 126 129 138 154 157 168 179 188 210 223 240 247 255 259 267 281 283 #> [24931] 290 309 315 319 331 347 390 396 402 409 415 438 451 468 471 475 478 487 #> [24949] 499 505 506 508 525 528 535 552 556 561 590 618 619 621 633 652 661 664 #> [24967] 670 693 696   4  20  21  27  31  35  51  60  62  63  70  86  99 109 121 #> [24985] 126 129 146 148 154 161 174 186 190 193 203 204 214 215 218 230 234 236 #> [25003] 246 252 265 267 269 273 274 278 286 300 308 330 336 337 339 340 341 349 #> [25021] 362 377 379 385 390 408 432 437 440 458 475 484 489 501 505 510 524 529 #> [25039] 534 535 564 567 570 576 598 600 605 627 651 654 660 662   1  11  12  23 #> [25057]  32  42  45  49  78  97 127 137 174 209 217 218 221 226 228 261 281 288 #> [25075] 290 308 322 364 376 377 381 389 401 437 450 453 458 461 469 473 479 482 #> [25093] 493 532 542 556 560 565 598 605 618 625 630 634 641 654 656 660 661 663 #> [25111] 678 688 693 700 707   1   3  36  47  57  63  74  83  86  88  93 107 112 #> [25129] 130 132 155 156 161 162 175 200 208 212 237 241 248 250 270 273 274 284 #> [25147] 289 296 305 306 312 347 363 367 368 385 391 410 426 442 446 474 476 484 #> [25165] 501 507 514 540 546 567 573 598 634 636 651 655 657 662 670 679 699 702 #> [25183] 708 712  12  15  24  60  63  64  67  74  82  90  99 102 105 108 120 133 #> [25201] 153 154 160 161 163 165 173 196 210 222 228 240 243 251 256 269 282 304 #> [25219] 338 344 348 362 364 375 377 389 408 413 415 469 477 495 503 507 508 514 #> [25237] 516 527 557 572 591 603 614 639 640 649 651 653 690 695 703 706 710   1 #> [25255]   9  13  22  29  33  53  56  59 122 123 133 147 172 189 190 191 194 198 #> [25273] 207 228 230 234 242 243 267 268 289 306 307 317 340 349 372 375 405 417 #> [25291] 428 453 455 461 462 469 485 506 507 513 518 526 534 540 592 608 610 612 #> [25309] 621 635 646 648 662 666 677 678 687 709 711  44  45  54  56  65  80  89 #> [25327]  93  94  96 100 104 107 114 118 122 139 149 152 154 164 167 186 196 198 #> [25345] 210 211 216 217 229 234 263 264 266 273 276 287 297 308 310 336 337 346 #> [25363] 349 386 395 400 426 441 442 447 450 453 459 471 479 488 490 505 507 512 #> [25381] 519 529 554 555 557 559 582 587 598 613 615 658 676 681 707   1  15  38 #> [25399]  50  56  61  72  85  97 110 111 114 124 125 135 153 164 167 186 192 202 #> [25417] 214 222 243 252 271 282 301 303 325 327 339 352 357 363 367 398 423 428 #> [25435] 429 437 456 462 475 476 493 495 503 512 522 529 530 542 547 563 564 571 #> [25453] 581 591 593 616 621 636 637 652 659 671 695 699 702 714  19  23  25  26 #> [25471]  29  31  53  59  73  76 100 102 106 135 154 164 176 213 214 242 252 261 #> [25489] 263 264 266 267 272 288 291 304 327 337 345 355 370 373 379 392 406 409 #> [25507] 413 421 424 437 442 458 465 466 472 477 527 550 570 581 593 598 603 606 #> [25525] 621 625 635 639 640 657 670 685 692 693 703   5   9  21  27  47  67  69 #> [25543]  82  84  95  99 110 113 118 150 151 169 175 176 201 205 214 230 232 233 #> [25561] 236 240 242 258 269 271 274 279 289 301 320 348 353 360 387 397 400 413 #> [25579] 453 470 471 472 475 482 506 517 528 533 539 554 557 561 563 593 601 609 #> [25597] 618 631 636 648 649 660 663 668 671 680 687 702 703 704 709  12  29  35 #> [25615]  46  52  59 113 117 157 158 193 206 218 221 224 237 238 245 250 259 264 #> [25633] 283 291 300 311 312 329 336 339 355 360 382 389 408 422 425 430 433 435 #> [25651] 445 456 478 480 485 499 511 520 549 550 558 559 564 568 586 626 643 668 #> [25669] 675 682 706   0   2  10  15  22  24  25  28  47  73  80  82  86  92  99 #> [25687] 107 127 136 151 158 172 191 192 194 195 209 213 215 223 227 230 249 261 #> [25705] 271 288 296 299 308 320 323 324 334 366 371 394 397 400 407 418 428 441 #> [25723] 451 469 472 484 512 517 530 531 572 573 574 584 585 606 614 622 629 637 #> [25741] 644 661 663 688 698 699 702 705   8  20  21  28  49  53  57  59  69  80 #> [25759]  91  98 107 123 125 138 140 141 172 175 176 195 224 225 236 249 255 256 #> [25777] 264 265 271 287 290 294 299 312 318 320 322 345 361 385 390 405 414 421 #> [25795] 453 456 463 465 479 482 489 501 510 520 522 555 595 602 621 627 629 637 #> [25813] 643 651 653 657 683 686 698 714  14  31  35  39  43  59  77  88  92  98 #> [25831]  99 117 132 151 159 160 161 162 166 174 176 188 194 195 196 202 206 214 #> [25849] 238 246 254 259 263 269 280 315 332 334 348 350 379 392 399 412 419 423 #> [25867] 437 444 452 455 468 473 480 501 514 529 538 547 560 579 583 592 594 596 #> [25885] 615 642 648 649 683 713 716  22  25  88 118 126 150 161 172 178 202 213 #> [25903] 224 225 233 244 256 259 260 263 274 283 288 290 292 298 317 330 332 342 #> [25921] 385 388 390 396 401 402 406 423 450 451 457 471 472 473 485 492 495 516 #> [25939] 526 533 537 561 562 586 589 596 597 599 601 608 609 622 633 639 647 668 #> [25957] 680 685 689 700 714   0   2   3   4   6  10  21  42  47  69  71  78  81 #> [25975]  99 100 104 108 134 153 172 179 197 201 205 215 219 222 225 226 234 240 #> [25993] 252 261 272 274 283 291 299 306 310 318 343 347 357 392 394 413 423 471 #> [26011] 489 496 519 552 553 555 607 609 615 628 629 631 642 665 670 684 702 706 #> [26029] 710 715   1  16  54  57  59  64  69  72  78  95  98 102 104 113 133 134 #> [26047] 162 167 170 180 186 198 206 213 223 255 267 274 305 309 330 354 383 403 #> [26065] 410 420 433 439 487 502 511 526 530 541 544 563 571 572 583 588 647 648 #> [26083] 654 659 691 700 725   4   6  16  52  54  61  72  80  83  95 119 136 149 #> [26101] 154 174 176 184 185 190 198 214 223 227 229 237 239 264 266 282 284 299 #> [26119] 319 322 351 358 359 360 378 382 396 398 418 423 425 440 445 451 461 468 #> [26137] 472 504 516 536 538 543 548 567 572 584 585 595 615 616 622 638 640 650 #> [26155] 657 662 671 675 679 706  30  38  48  49  54  59  77  79  80  87  93 105 #> [26173] 110 125 142 166 169 190 196 202 221 224 238 248 261 283 291 296 303 332 #> [26191] 346 356 365 379 394 397 432 472 477 481 490 496 499 511 531 535 542 545 #> [26209] 567 574 591 595 612 617 619 628 629 631 642 647 662 682 697 722   7  27 #> [26227]  36  41  64  77  78 107 109 114 119 120 124 134 152 180 188 192 219 233 #> [26245] 237 251 255 265 284 291 302 320 344 396 398 445 451 461 466 481 488 499 #> [26263] 534 542 563 568 580 585 590 603 613 617 621 622 627 656 672 673 681 684 #> [26281] 695 700 707 720   1   9  15  17  20  36  48  61  70  77  84  87 100 110 #> [26299] 115 116 120 121 137 171 174 176 178 190 191 200 216 220 229 230 239 247 #> [26317] 279 281 282 299 304 315 319 320 338 341 344 346 371 392 402 410 414 415 #> [26335] 418 429 433 440 452 453 457 468 499 502 547 557 581 587 621 633 635 643 #> [26353] 647 648 652 660 665 692 694 697 714 720 729   3  10  17  19  36  49  57 #> [26371]  62  72  76  79 107 129 130 131 165 198 205 230 252 259 263 264 275 282 #> [26389] 286 292 301 304 322 337 338 351 357 366 367 374 389 390 402 415 427 428 #> [26407] 435 440 441 452 457 466 474 480 486 487 491 495 501 509 525 526 528 529 #> [26425] 544 553 562 563 565 574 606 620 641 646 650 661 678 684 701 703   0  26 #> [26443]  41  50  56  69  75  82  85  90 102 106 113 129 134 144 178 191 193 196 #> [26461] 210 216 217 218 224 236 241 253 254 274 283 286 288 294 320 333 345 349 #> [26479] 354 389 395 409 414 423 442 445 448 461 491 501 502 519 527 528 542 551 #> [26497] 601 605 611 648 651 701 706 710 717 720 723 731  10  13  15  19  27  30 #> [26515]  45  47  49  55  60  64  67  73  88  97 108 112 118 125 144 157 161 162 #> [26533] 165 183 184 186 198 215 216 223 234 244 279 285 290 313 328 353 354 380 #> [26551] 397 423 439 441 451 458 464 476 480 501 508 537 558 567 570 572 593 606 #> [26569] 626 640 653 658 665 673 676 679 730  20  23  44  49  54  64  83 121 123 #> [26587] 148 184 187 192 197 199 200 206 215 216 223 225 236 239 259 267 275 288 #> [26605] 306 307 317 319 325 334 341 348 354 369 381 382 395 403 409 414 415 427 #> [26623] 442 464 485 486 517 523 542 550 557 558 566 588 622 673 681 687 701 733 #> [26641]   1   3  11  13  24  32  60  61  64  74  76  86 103 107 109 114 125 133 #> [26659] 145 151 177 185 194 202 214 243 257 258 280 288 292 316 324 343 362 368 #> [26677] 369 384 385 395 402 408 411 419 436 443 451 453 465 466 479 488 490 494 #> [26695] 522 540 546 560 601 618 638 639 650 652 657 660 664 667 668 677 689 694 #> [26713] 699 702 710 725 730 731 733   4  14  17  18  25  26  35  36  43  44  47 #> [26731]  74  83  84  90 129 134 167 184 186 209 225 233 240 260 266 304 317 326 #> [26749] 333 355 363 369 371 373 378 390 391 411 413 438 440 463 472 477 480 489 #> [26767] 493 494 498 500 501 509 520 523 526 532 533 542 564 566 594 607 619 640 #> [26785] 650 668 678 693 705 708 709 715 721 722 726 729 735   3   4   7  38  57 #> [26803]  59  64  69 105 116 129 130 146 163 181 187 204 208 215 231 247 250 268 #> [26821] 280 283 294 298 312 332 338 342 363 373 383 393 399 409 428 434 443 444 #> [26839] 480 482 514 517 523 527 546 560 573 587 594 602 621 626 650 666 671 674 #> [26857] 677 683 690 699 714 720 728 730   8  14  24  31  39  46  67  73 100 115 #> [26875] 122 131 154 201 202 208 226 228 257 271 278 285 287 293 295 314 322 328 #> [26893] 358 393 401 409 410 443 444 449 458 466 476 483 490 499 527 531 546 551 #> [26911] 561 567 578 592 614 622 629 634 637 667 668 669 680 681 689 694 698 708 #> [26929] 724 735  81  89 122 126 144 154 211 225 235 263 271 274 287 290 315 318 #> [26947] 347 351 369 389 396 400 402 413 416 417 418 436 438 449 451 457 502 515 #> [26965] 540 548 553 562 577 579 582 585 592 653 679 685 694 704 719 720 732 734 #> [26983] 736 737  14  18  24  33  35  59  68  75  98 122 127 129 161 167 175 188 #> [27001] 198 201 207 211 234 241 253 259 264 269 274 275 283 299 301 302 315 319 #> [27019] 322 324 338 339 349 352 369 370 380 386 390 405 406 414 421 439 444 481 #> [27037] 500 501 510 524 545 548 551 557 561 571 580 581 582 598 603 607 608 610 #> [27055] 624 631 670 690 692 728 729 732 738   3  10  15  26  31  42  51  63 118 #> [27073] 119 134 152 177 191 200 205 220 226 228 253 255 263 280 317 322 326 334 #> [27091] 337 338 343 345 356 361 366 375 390 397 406 437 440 457 465 468 486 488 #> [27109] 498 522 535 539 543 548 554 559 569 583 605 612 614 619 624 642 651 674 #> [27127] 690 697 700 710 718 723 730   4  10  12  14  20  30  35  36  41  43  46 #> [27145]  52  53  55  73  83  95 105 106 119 136 152 156 162 165 174 202 218 220 #> [27163] 223 237 248 272 275 277 279 297 305 308 311 341 346 348 360 371 375 381 #> [27181] 406 407 412 436 442 443 466 473 482 508 513 522 534 540 545 557 558 561 #> [27199] 572 573 583 585 617 619 621 624 634 638 639 665 668 670 689 694 696 700 #> [27217] 704 710 716 724   6  45  51  55  68  69  75  94  98 100 116 122 125 126 #> [27235] 131 152 168 171 174 180 185 189 194 195 217 229 234 246 260 272 275 304 #> [27253] 316 347 348 366 374 375 379 381 394 404 406 408 432 438 439 452 457 462 #> [27271] 496 507 515 518 519 529 542 549 550 556 586 608 620 650 651 666 671 677 #> [27289] 690 695 704 706 714 716 718 729 742  11  12  15  42  46  48  57  79 103 #> [27307] 116 125 131 134 138 141 149 160 167 169 176 247 286 327 330 356 371 372 #> [27325] 377 380 384 403 414 417 424 426 427 439 463 468 470 471 480 486 500 503 #> [27343] 515 518 523 528 533 538 539 554 576 589 611 619 624 641 648 676 689 690 #> [27361] 697 701 703 727 733   7  11  12  57  86  88  94 111 123 125 139 144 167 #> [27379] 175 257 260 266 279 281 295 311 317 319 321 327 333 340 344 345 350 353 #> [27397] 359 372 379 400 405 416 423 426 427 469 478 480 503 504 507 508 529 535 #> [27415] 541 543 545 563 564 594 598 603 625 653 659 661 673 680 682 699 702 708 #> [27433] 709 734 741   7   9  49  54  62  74  75  83  84 109 111 145 199 207 214 #> [27451] 242 249 251 252 256 275 276 293 296 311 320 330 333 341 344 346 351 358 #> [27469] 370 371 374 387 392 399 431 443 462 469 473 486 487 510 515 518 541 545 #> [27487] 548 568 574 594 602 624 630 631 642 646 647 649 650 654 662 678 685 688 #> [27505] 689 690 703 704 712 738 742   8  22  28  33  34  52  55  61  75  76  88 #> [27523] 105 107 120 140 146 150 179 183 191 196 197 201 206 218 226 233 239 240 #> [27541] 251 268 269 304 311 323 336 346 360 378 381 389 390 391 394 400 416 428 #> [27559] 438 443 455 479 482 490 502 505 507 511 516 519 523 525 533 545 559 564 #> [27577] 566 570 575 596 602 608 624 636 641 656 660 663 664 668 676 685 706 722 #> [27595] 727 738   3  14  34  49  52  53  70  75  94  96 116 120 127 163 169 171 #> [27613] 195 197 199 201 206 226 230 237 249 266 272 284 290 294 296 297 309 315 #> [27631] 326 335 351 353 365 407 409 414 426 447 472 484 495 496 517 533 544 546 #> [27649] 558 570 571 585 615 667 671 692 696 705 709 715 719 722 726 727 731 740 #> [27667] 743   9  15  23  27  28  35  42  50  78  81  84  90  91  94 101 126 128 #> [27685] 129 137 167 178 180 185 186 201 232 242 257 262 265 272 276 280 293 299 #> [27703] 310 317 328 332 358 359 364 368 375 376 399 406 413 415 416 421 430 432 #> [27721] 435 442 453 457 475 480 483 487 488 499 518 537 550 590 593 596 608 628 #> [27739] 632 644 648 650 654 665 671 673 684 693 706 734 748   1   6  13  29  50 #> [27757]  62  65  67  72  78  81  92  97 103 107 109 115 146 156 161 167 171 173 #> [27775] 186 189 203 205 214 217 222 238 241 250 254 256 273 279 288 291 293 302 #> [27793] 333 356 361 364 365 377 386 391 394 411 427 446 450 453 461 469 474 490 #> [27811] 511 525 528 535 538 542 544 572 575 582 586 589 601 628 629 635 640 643 #> [27829] 653 683 686 706 708 712 748   4   7  19  21  22  35  37  43  53  72  73 #> [27847]  76  78  80  86  87  96  99 104 105 123 126 130 149 160 182 183 188 193 #> [27865] 198 238 250 267 272 283 284 301 302 329 333 341 345 348 350 387 396 402 #> [27883] 409 413 427 429 432 437 440 450 458 468 469 493 503 504 537 540 544 554 #> [27901] 559 563 582 587 595 609 614 618 667 676 678 679 704 718 722   3   6   8 #> [27919]  14  16  17  22  29  40  41  51  71  78  81  94 125 133 134 153 177 178 #> [27937] 181 200 204 214 230 237 247 249 275 289 307 311 316 317 320 326 334 335 #> [27955] 358 361 376 379 382 383 387 406 409 423 432 445 459 481 495 496 498 513 #> [27973] 525 556 569 579 580 590 603 605 623 627 636 647 653 671 685 691 719 721 #> [27991] 723 736 738 740 747 749 750   3   9  18  25  53  54  60  79  90  93  96 #> [28009] 109 130 136 137 145 163 166 179 182 193 197 208 222 257 287 306 307 311 #> [28027] 312 320 337 353 355 360 361 362 371 379 387 389 394 395 404 407 438 445 #> [28045] 482 486 489 500 504 512 513 522 543 549 595 615 625 629 633 643 652 655 #> [28063] 662 664 665 667 696 717 726 734 748  19  24  35  44  50  63  67  91 104 #> [28081] 107 114 118 144 164 166 167 184 190 191 196 197 200 203 209 225 275 288 #> [28099] 334 343 345 354 371 400 407 419 424 460 461 489 501 504 510 511 515 523 #> [28117] 525 575 589 601 608 613 624 630 636 641 646 649 653 654 657 660 687 717 #> [28135] 719 727   3  26  62  66  79  85  93  98 118 122 124 147 149 155 165 175 #> [28153] 211 238 242 247 271 273 278 279 291 294 295 304 310 315 316 318 325 330 #> [28171] 331 333 344 357 374 379 386 392 394 395 422 445 447 448 451 454 456 461 #> [28189] 477 496 497 499 500 501 504 511 512 515 524 550 552 557 565 572 582 589 #> [28207] 591 595 608 615 618 623 659 667 694 703 711 716 724 732 735   8  30  31 #> [28225]  63  65  66 104 107 114 115 178 191 221 231 247 248 285 296 300 310 330 #> [28243] 351 356 375 377 391 400 403 413 433 440 441 444 454 474 475 479 482 501 #> [28261] 507 512 515 516 517 520 545 550 555 561 566 594 595 631 639 657 678 686 #> [28279] 708 738 743 754   7  12  16  94 105 106 115 117 120 126 137 140 144 145 #> [28297] 165 167 169 182 189 205 213 244 253 255 256 266 272 291 296 334 341 345 #> [28315] 368 373 380 383 390 409 418 423 429 436 458 470 478 483 486 495 503 504 #> [28333] 506 543 544 575 583 602 614 618 624 641 651 654 658 666 673 674 680 689 #> [28351] 695 700 729 738 742 745 751 753   0   4   8  42  53  88  91  97 115 120 #> [28369] 146 147 158 164 168 171 172 174 196 209 214 240 244 274 281 296 305 309 #> [28387] 319 320 324 327 342 345 348 349 352 369 370 384 403 409 436 447 449 468 #> [28405] 476 481 487 490 499 501 513 524 530 535 543 546 547 579 591 592 603 607 #> [28423] 620 621 627 638 644 646 647 651 658 660 661 667 670 678 699 708 725 729 #> [28441] 742 747 752   4   8  22  26  47  53  74  75  90 111 113 120 132 141 157 #> [28459] 158 159 173 174 189 194 195 214 225 232 240 244 263 274 296 317 323 324 #> [28477] 325 329 347 363 367 379 381 413 417 422 434 440 452 455 456 462 469 478 #> [28495] 486 493 499 537 550 557 560 574 585 595 610 611 618 624 625 632 640 652 #> [28513] 681 690 692 707 714 715 736 739 748   1  12  13  14  16  52  63  66  83 #> [28531]  93  97 103 106 110 123 129 130 134 138 139 163 170 188 193 196 199 226 #> [28549] 227 234 236 247 265 276 287 314 320 321 323 324 345 347 354 355 364 367 #> [28567] 368 386 416 422 425 435 445 449 459 483 495 499 502 510 512 525 535 553 #> [28585] 591 596 622 629 632 633 634 636 639 645 656 670 693 713 733 736   8  19 #> [28603]  21  23  27  32  55  64  71 107 123 142 147 149 152 168 186 203 204 227 #> [28621] 242 244 248 255 259 267 303 304 305 309 316 329 389 391 392 410 428 431 #> [28639] 442 453 455 460 473 480 486 487 490 495 499 506 519 527 540 557 563 564 #> [28657] 568 585 602 616 622 627 632 642 648 665 666 701 706 714 715 719 729 735 #> [28675] 739 744 746  20  23  51  64  65  72  81  85 112 119 121 136 145 174 197 #> [28693] 198 208 211 216 219 255 259 261 263 291 293 294 301 307 309 321 348 359 #> [28711] 361 372 392 395 406 417 422 426 427 429 440 442 445 454 455 457 486 504 #> [28729] 507 515 551 556 557 560 581 592 610 626 634 659 660 661 664 665 666 667 #> [28747] 671 683 712 722 726 736 741 749   0  20  25  44  52  53  97 102 105 119 #> [28765] 127 148 162 166 196 218 224 227 229 231 232 236 245 258 260 270 300 309 #> [28783] 312 318 340 353 373 402 403 406 411 415 420 442 462 464 483 485 493 495 #> [28801] 499 506 509 515 521 522 546 547 553 558 568 588 594 614 624 629 631 634 #> [28819] 646 649 671 720 725 729 738 741 744 760  11  12  17  51  56  98 110 113 #> [28837] 142 158 166 179 207 212 224 227 233 237 241 243 248 253 262 264 265 297 #> [28855] 303 317 318 320 333 337 342 343 370 372 374 386 387 390 419 422 438 441 #> [28873] 442 453 455 461 462 470 481 491 521 528 536 542 557 584 586 589 610 633 #> [28891] 638 658 660 676 690 692 700 714 718 721 735 747   0   9  18  32  51  55 #> [28909]  60  70  75  87 105 106 107 114 121 131 133 137 138 143 147 158 171 173 #> [28927] 190 193 222 231 247 250 259 264 265 276 280 291 307 313 355 366 380 382 #> [28945] 391 394 401 406 414 421 424 426 432 434 454 455 480 483 494 497 508 515 #> [28963] 521 534 536 538 540 545 548 551 573 593 604 610 614 620 654 659 660 667 #> [28981] 668 703 712 720 733 749 752 757 764  37  59  77  83  89  96 105 123 131 #> [28999] 137 146 151 155 164 172 180 181 183 194 199 222 232 237 277 279 292 300 #> [29017] 303 313 320 358 368 373 375 389 401 402 412 425 459 460 461 482 490 491 #> [29035] 500 525 532 534 535 556 568 575 578 585 590 618 625 626 632 642 645 691 #> [29053] 695 697 719 722 723 736 745 753 765   3   9  23  27  42  49  53  77 131 #> [29071] 144 153 160 168 171 187 217 224 225 240 249 262 269 283 298 300 302 309 #> [29089] 311 313 314 323 341 345 351 357 366 379 388 392 397 416 423 425 431 432 #> [29107] 448 475 496 500 513 517 538 540 542 558 571 572 573 575 579 582 617 623 #> [29125] 629 630 637 654 674 675 678 691 694 706 725 741 750 758   4   6  15  25 #> [29143]  35  41  67  68  84  95  97 132 144 158 163 169 174 177 220 221 223 227 #> [29161] 246 248 255 273 283 284 290 294 310 336 372 400 410 421 432 434 441 447 #> [29179] 476 503 506 530 552 560 562 573 588 589 595 602 605 610 612 618 630 639 #> [29197] 650 673 676 678 687 692 701 721 740 743   0   8  11  20  23  27  35  40 #> [29215]  44  50  58  62  69  80  96 106 127 132 135 148 171 172 178 189 194 197 #> [29233] 212 236 242 253 268 271 275 278 280 290 291 292 299 306 327 330 333 341 #> [29251] 343 354 364 391 402 408 410 428 431 438 477 478 495 496 500 542 563 586 #> [29269] 590 608 618 619 636 650 652 662 665 672 677 678 705 714 743 744 746 764 #> [29287]  10  15  18  19  32  38  40  52  53  61  74  78  89  90  93 100 102 107 #> [29305] 112 123 140 150 162 163 170 173 220 258 263 272 275 277 288 302 303 307 #> [29323] 314 317 323 359 363 370 376 398 399 400 402 408 413 427 456 486 495 526 #> [29341] 537 548 569 579 592 598 644 659 682 688 699 701 705 730 747 750 752 764 #> [29359] 768   2  17  21  33  44  51  59  69  77  88  90  96 105 145 153 186 193 #> [29377] 205 212 230 243 255 271 285 291 303 329 338 341 356 370 383 414 419 424 #> [29395] 427 428 441 444 448 450 455 458 461 471 487 491 496 504 506 527 528 550 #> [29413] 579 591 595 607 613 677 681 689 700 709 718 732 742 750 754 766   0   9 #> [29431]  22  40  48  62  70  83  84 104 114 124 125 126 140 145 158 161 168 169 #> [29449] 170 192 200 204 206 207 221 231 241 272 281 291 337 342 357 360 364 368 #> [29467] 369 374 382 386 387 391 394 421 428 436 451 456 459 460 467 472 477 482 #> [29485] 489 491 496 498 520 522 524 535 536 539 544 561 584 596 598 618 629 648 #> [29503] 650 656 659 689 690 708 725 728 747 749 758 759 763 764   7  14  20  46 #> [29521]  80  90 115 131 144 159 176 183 192 194 197 198 238 257 271 288 291 297 #> [29539] 311 315 323 326 334 340 349 359 363 365 366 374 376 392 401 405 418 430 #> [29557] 435 439 440 446 448 472 484 486 500 514 515 524 546 548 560 595 607 613 #> [29575] 644 645 656 661 680 686 690 716 727 736 739 744 766 770   5  24  27  44 #> [29593]  47  59  80  94  98 107 110 112 175 180 205 212 226 229 254 258 267 278 #> [29611] 325 332 335 344 357 360 372 461 464 466 481 490 495 498 508 539 553 556 #> [29629] 560 570 583 585 587 592 594 602 608 614 622 631 640 649 653 674 683 689 #> [29647] 703 711 747  11  23  31  32  41  43  52  71  85  87  88 129 130 136 147 #> [29665] 153 161 173 175 200 209 226 228 247 252 269 276 283 285 308 312 313 325 #> [29683] 345 347 349 390 399 400 401 409 417 432 433 441 451 476 501 508 509 512 #> [29701] 515 526 534 558 568 578 580 596 609 618 624 643 656 691 692 694 696 699 #> [29719] 701 732 745 766   8  23  54  56  68  75  93 101 106 115 125 135 154 165 #> [29737] 166 182 187 191 196 199 204 209 235 247 253 259 264 265 277 285 291 340 #> [29755] 355 363 367 377 386 391 394 402 404 406 411 421 424 432 434 442 453 455 #> [29773] 456 459 470 478 488 504 525 526 529 536 540 549 559 564 566 575 601 640 #> [29791] 662 666 667 691 695 720 757 769   5  21  27  51  66  75  79  81  97 122 #> [29809] 139 141 160 162 172 185 213 216 230 241 242 260 266 269 270 277 279 282 #> [29827] 289 291 293 300 305 308 312 320 321 323 342 355 362 366 367 371 387 389 #> [29845] 394 400 404 425 443 459 469 479 500 510 513 518 533 543 560 570 585 596 #> [29863] 605 622 632 641 648 657 667 668 674 709 736 743 759   3   8   9  19  25 #> [29881]  35  38  41  68 106 123 128 134 147 154 155 157 164 195 202 209 238 243 #> [29899] 252 263 297 308 309 310 316 334 351 358 363 396 406 422 429 447 449 461 #> [29917] 462 467 479 499 506 522 538 539 546 551 552 557 562 577 601 644 664 678 #> [29935] 679 681 684 708 730 734 775  15  21  24  36  48  62  65  84  99 121 130 #> [29953] 142 143 144 159 169 173 207 209 215 225 228 239 242 252 255 262 267 280 #> [29971] 283 312 321 325 346 369 385 395 404 407 419 441 459 477 483 485 488 497 #> [29989] 501 510 512 518 523 526 535 542 550 559 583 584 595 596 611 614 627 628 #> [30007] 636 652 653 663 677 695 701 704 706 712 742 743 750 753 756 757 765 766 #> [30025] 771 778   0   5   7  19  23  34  44  47  48  57  68  80  93 104 108 110 #> [30043] 123 128 131 133 153 169 182 184 198 207 209 232 241 243 245 247 254 269 #> [30061] 270 287 292 302 307 328 333 339 364 365 369 374 396 404 409 418 451 459 #> [30079] 470 479 489 500 504 535 542 564 575 579 582 587 588 607 608 620 624 643 #> [30097] 652 665 703 714 717 719 729 745 769 774   0   7  17  27  31  33  59  67 #> [30115]  72  81  94  95  98 110 111 113 127 155 157 161 177 186 189 200 220 227 #> [30133] 234 241 254 269 276 285 288 295 301 310 315 322 330 362 375 392 416 420 #> [30151] 421 452 475 481 485 487 496 502 504 515 521 539 540 549 553 554 569 571 #> [30169] 573 574 579 580 583 596 597 602 603 612 624 645 653 677 698 699 703 734 #> [30187] 737 740 743 749 753 761 773 776   5   7  17  21  28  46  48  53  56  64 #> [30205]  65  75  80  84  92 102 103 108 127 130 135 146 156 158 160 161 163 165 #> [30223] 168 190 196 201 212 224 227 244 294 309 314 324 333 342 355 363 375 392 #> [30241] 402 403 419 430 439 443 447 455 464 466 483 484 498 508 516 534 587 591 #> [30259] 595 629 632 676 713 716 719 724 732 741 743 751 759   2  14  22  52  61 #> [30277]  81  86  96  97 102 104 106 108 138 148 149 161 173 197 199 208 210 212 #> [30295] 214 252 323 327 328 335 337 338 339 356 360 370 400 430 459 465 470 471 #> [30313] 477 496 518 520 540 544 546 550 553 560 574 594 642 670 678 691 695 728 #> [30331] 760  40  42  43  48  49  53  73  74  90  94  96  97 105 109 112 113 121 #> [30349] 132 139 151 160 169 170 171 173 186 189 209 210 240 250 251 272 281 285 #> [30367] 292 295 301 311 320 343 350 364 372 409 433 449 455 476 478 497 503 532 #> [30385] 533 549 557 566 568 572 575 594 604 625 635 643 645 648 649 651 657 661 #> [30403] 662 671 672 686 688 714 715 726 737 742 745 752 755 761 765   1  39  70 #> [30421]  75  90  94 124 129 132 142 148 149 150 152 158 173 178 183 198 201 228 #> [30439] 249 267 269 286 287 290 295 307 308 335 342 343 347 348 357 376 381 417 #> [30457] 418 429 430 431 434 441 465 487 504 529 534 536 558 565 569 598 617 624 #> [30475] 636 651 660 675 689 696 697 699 705 707 719 736 738 759 781  25  31  40 #> [30493]  49  57  65  88  95 104 109 110 111 113 116 137 145 149 154 156 160 167 #> [30511] 174 196 203 222 223 226 228 235 238 243 244 246 247 254 267 279 298 305 #> [30529] 329 330 334 346 377 387 393 409 410 413 433 434 435 437 447 450 457 460 #> [30547] 465 479 480 501 503 505 520 522 544 551 561 562 563 566 569 588 592 602 #> [30565] 611 617 620 622 625 629 644 653 673 678 680 698 700 701 702 705 715 722 #> [30583] 724 730 734 736 742 748 753 754 755 770 771   2   6   7  32  40  50  53 #> [30601]  57  61  71  76  85  99 125 127 133 139 148 179 185 203 221 225 228 229 #> [30619] 264 267 273 276 284 287 300 302 306 315 349 350 365 374 378 397 405 427 #> [30637] 428 430 433 439 449 450 500 519 524 527 538 547 554 593 605 628 631 645 #> [30655] 649 661 663 680 688 707 723 725 739 741 756 762 769 773 775   0   6   7 #> [30673]  11  13  16  20  26  30  32  67  76  93 100 109 111 128 131 140 142 143 #> [30691] 193 198 203 204 231 246 250 258 263 303 304 320 322 333 341 342 349 365 #> [30709] 390 392 395 401 405 416 419 423 447 464 465 472 497 502 505 509 521 556 #> [30727] 560 597 603 626 628 631 632 641 654 659 680 694 701 723 742 753 755 756 #> [30745] 770   7  10  12  26  39  40  47  55  83  89  98 102 117 129 134 152 153 #> [30763] 169 176 188 244 277 289 325 352 354 362 367 389 409 410 417 437 456 479 #> [30781] 480 481 500 521 535 542 544 549 555 560 572 573 580 587 596 611 620 621 #> [30799] 628 645 660 661 697 703 715 719 744 752 774 783   6  12  16  27  47  51 #> [30817]  53  65  71  97  99 100 105 108 111 116 126 131 151 159 171 187 204 217 #> [30835] 223 230 249 286 291 292 306 309 312 325 327 332 336 337 339 356 379 435 #> [30853] 438 441 447 448 455 487 492 507 513 524 526 529 530 535 536 544 556 565 #> [30871] 579 597 607 608 610 616 619 630 638 654 670 675 693 715 732 750 778 788 #> [30889]   7  15  27  48  71  76  80  91  93 103 117 124 132 133 142 197 202 204 #> [30907] 212 233 235 248 250 269 270 272 317 321 325 329 333 345 360 361 365 370 #> [30925] 373 378 382 384 392 396 403 408 409 416 454 469 474 497 499 501 506 525 #> [30943] 535 552 568 569 591 593 608 609 615 627 636 637 643 657 659 665 677 680 #> [30961] 687 694 717 722 726 742 746 757 764 773 782   1  20  26  36  39  49  51 #> [30979]  55  64  68  72  76  81 100 111 145 151 162 170 173 176 178 229 242 247 #> [30997] 261 301 311 316 323 324 328 341 344 347 350 356 361 363 380 386 387 405 #> [31015] 414 431 432 439 445 459 469 476 487 493 498 505 514 519 523 528 531 535 #> [31033] 580 585 596 610 621 633 647 648 649 653 656 661 673 674 676 678 684 712 #> [31051] 715 717 723 728 735 738 756 758 778 781 785   8  10  13  25  30  38  39 #> [31069]  47  74  76  78  80  86  87  88  96 101 104 107 134 145 148 159 165 170 #> [31087] 185 191 209 235 237 243 245 279 280 284 297 298 304 306 316 332 343 347 #> [31105] 361 402 410 424 430 435 446 460 473 509 510 515 524 527 536 539 544 556 #> [31123] 564 567 577 594 620 621 622 637 646 647 668 685 688 692 700 705 711 712 #> [31141] 724 732 734 746 764   5   9  12  14  19  26  42  63  81  91  99 102 118 #> [31159] 130 132 171 188 210 220 233 235 240 261 262 294 299 304 305 312 317 324 #> [31177] 332 334 341 344 351 363 407 411 418 422 430 436 445 450 462 466 473 486 #> [31195] 487 506 509 523 533 539 541 550 553 573 582 593 595 628 636 656 680 688 #> [31213] 717 741 756 771 776 779   5   9  19  43  51  67  69  87  89 103 114 125 #> [31231] 139 153 203 216 219 223 225 231 232 275 280 285 312 323 325 348 351 358 #> [31249] 387 394 406 416 434 447 453 454 479 483 499 503 514 521 550 557 575 597 #> [31267] 617 619 626 628 646 654 656 665 682 697 703 723 728 730 747 748 769 770 #> [31285] 780 787 791   4  10  25  27  79 110 129 131 132 142 146 148 149 164 171 #> [31303] 183 229 240 243 253 256 272 279 314 315 325 349 356 359 363 364 373 390 #> [31321] 400 409 414 420 424 428 454 456 462 467 472 481 491 498 508 527 529 546 #> [31339] 557 572 579 588 597 600 632 640 647 648 652 661 671 719 733 739 753 762 #> [31357] 763 764 768 774 778 780 791   3  14  20  43  45  62  69  72  86  98 105 #> [31375] 107 118 125 134 155 161 162 178 186 191 208 215 219 230 232 233 234 249 #> [31393] 252 266 268 277 280 291 292 317 339 349 372 374 377 405 418 421 429 439 #> [31411] 440 451 455 474 482 499 508 513 518 521 531 535 539 545 581 583 588 590 #> [31429] 595 597 619 628 630 637 638 650 653 677 683 684 685 692 702 703 713 716 #> [31447] 723 724 728 735 744 748 754 759 782 786 787 793   7  32  37  42  58  66 #> [31465]  67  71  72  77  81 106 110 121 137 151 155 158 175 185 208 211 221 232 #> [31483] 247 259 261 265 290 304 308 316 321 324 329 341 343 350 360 362 371 379 #> [31501] 399 400 407 415 416 433 436 439 445 449 453 456 474 475 478 487 488 495 #> [31519] 501 505 518 521 522 529 548 560 581 609 614 620 627 637 660 668 670 682 #> [31537] 696 703 719 720 730 734 763 790   1   7  17  27  47  67  88 110 116 117 #> [31555] 143 145 172 195 203 222 224 229 263 268 270 278 287 289 296 306 307 324 #> [31573] 333 339 341 373 406 409 414 416 433 442 447 449 451 453 470 485 496 500 #> [31591] 510 522 531 534 543 553 554 555 582 584 591 600 605 613 616 618 624 627 #> [31609] 639 641 644 679 708 710 712 765 778 790 792   9  15  17  33  57  60  61 #> [31627]  80  92  95  97 101 129 134 152 153 192 196 197 204 206 214 229 238 240 #> [31645] 289 291 292 297 307 315 375 414 418 421 435 459 470 473 493 506 513 529 #> [31663] 531 532 539 546 568 578 586 587 592 604 658 678 693 705 718 728 746 782 #> [31681]  25  32  35  38  45  46  57  63  64  66  79  89 127 142 145 161 166 187 #> [31699] 199 239 243 247 249 279 286 297 323 329 353 362 369 371 378 380 393 398 #> [31717] 410 411 412 420 432 433 444 457 458 462 471 474 478 497 503 534 585 597 #> [31735] 600 601 604 612 628 638 650 666 678 684 697 716 729 736 745 755 757 768 #> [31753] 784  18  23  33  40  48  61  70  72  73  82  85  89  90 102 108 117 126 #> [31771] 141 159 160 191 193 218 222 227 237 238 239 269 271 272 284 290 293 308 #> [31789] 309 334 335 349 362 374 389 399 407 412 432 443 452 454 482 497 503 508 #> [31807] 509 513 532 566 573 575 578 591 596 613 617 626 628 643 645 675 678 689 #> [31825] 692 695 705 713 720 723 727 742 763 774   3   6  23  32  34  45  58  69 #> [31843]  86  89  99 125 129 148 161 171 175 178 191 192 195 233 244 253 265 274 #> [31861] 280 304 334 369 408 412 427 428 435 442 449 458 470 481 504 507 512 514 #> [31879] 526 548 573 574 588 589 609 623 632 637 647 661 662 667 674 683 691 695 #> [31897] 699 704 712 720 724 734 736 760 762 782 795 799 802   5  13  15  65  73 #> [31915]  79 128 137 161 168 183 193 202 205 222 225 252 264 281 298 303 312 315 #> [31933] 328 335 357 378 392 400 414 454 467 488 491 494 497 516 530 536 542 562 #> [31951] 569 625 630 631 635 640 644 650 666 672 682 684 686 695 708 709 717 730 #> [31969] 745 762 768 778 797  12  23  33  37  52  56  68  74  93 101 107 111 129 #> [31987] 130 164 171 174 208 212 213 224 236 242 266 267 283 316 323 329 333 348 #> [32005] 349 353 354 360 377 400 430 437 439 465 466 469 473 492 503 504 511 512 #> [32023] 517 542 544 560 567 569 570 579 631 634 638 641 681 683 698 709 721 723 #> [32041] 741 747 754 757 758 760 765 774 777 787 798 799   3   5   9  17  21  33 #> [32059]  54  62  88  90 113 117 122 131 140 141 150 161 171 181 195 201 202 214 #> [32077] 219 242 253 254 259 262 270 283 299 307 309 326 333 334 336 353 367 370 #> [32095] 376 388 402 406 410 413 415 421 424 436 439 440 462 465 511 513 549 558 #> [32113] 562 564 575 581 584 599 609 618 623 646 647 652 658 689 696 698 712 720 #> [32131] 732 740 742 746 747 766 792 797   0   8  19  24  39  54  58  60  89 101 #> [32149] 104 105 108 111 118 173 190 206 221 228 239 240 252 253 262 305 318 325 #> [32167] 334 335 339 342 352 364 385 407 422 431 442 455 457 461 474 477 492 493 #> [32185] 497 499 504 507 514 546 569 579 598 608 618 625 630 631 639 640 668 676 #> [32203] 681 702 713 730 747 772 774 782 786 790 797   2   9  40  41  80  83  87 #> [32221]  93 130 131 133 136 142 156 182 194 199 204 220 248 271 275 289 293 311 #> [32239] 320 322 339 345 346 352 362 377 392 448 454 470 474 478 510 519 526 536 #> [32257] 554 564 565 585 588 602 606 637 639 641 642 651 662 663 664 667 675 684 #> [32275] 695 713 737 739 744 752 770 775 782 785 789   0   2   7  71  75  89  90 #> [32293]  99 125 134 135 136 153 166 175 180 209 220 232 236 239 251 279 299 307 #> [32311] 310 316 353 374 381 392 408 419 422 437 450 457 464 504 507 528 543 544 #> [32329] 546 566 568 572 573 585 624 647 653 657 681 693 694 696 699 714 740 749 #> [32347] 776 781 787 792   7  22  23  25  46  48  67  69  70  77  80 123 128 131 #> [32365] 141 154 161 212 226 248 267 279 280 304 311 313 329 330 332 338 347 348 #> [32383] 380 384 403 417 419 420 421 432 440 453 465 473 490 492 520 533 534 537 #> [32401] 543 546 561 567 577 581 591 595 597 603 611 625 627 640 648 652 654 662 #> [32419] 664 685 689 693 702 704 705 719 747 749 774 783 793 807 808   6  18  21 #> [32437]  35  60  71  75  84  91  93 113 116 124 125 136 169 172 176 214 243 244 #> [32455] 246 253 265 273 295 309 310 315 319 328 332 351 355 361 369 371 374 383 #> [32473] 386 395 397 413 418 424 427 429 447 454 496 512 515 520 527 530 534 537 #> [32491] 542 550 575 581 595 606 610 614 617 619 680 683 689 715 731 743 756 762 #> [32509] 775 779 781 789 794 796 801 809   1   2   4  12  37  39  52  58  59  73 #> [32527]  80  92 110 112 118 124 134 139 143 149 153 156 157 176 179 223 224 237 #> [32545] 238 244 257 259 264 265 269 270 278 294 297 324 327 340 352 356 378 381 #> [32563] 389 403 406 411 412 414 418 444 445 463 471 503 531 533 537 547 562 572 #> [32581] 584 610 624 644 650 655 663 665 693 698 706 721 729 744 756 758 760 772 #> [32599] 777 783 790 792 798 803   0   8  16  27  39  51  53  57  65  70  89 109 #> [32617] 115 120 133 137 153 162 167 176 192 209 218 226 237 242 248 260 276 283 #> [32635] 308 309 321 340 348 369 370 374 378 383 388 396 402 407 409 421 429 440 #> [32653] 448 465 530 539 545 548 550 557 570 573 582 598 599 601 631 635 639 641 #> [32671] 643 644 648 656 662 675 690 691 695 703 714 718 724 736 746 770 780 781 #> [32689] 789 799 810   1   2  16  23  38  74  92  95  99 115 129 131 136 145 149 #> [32707] 155 156 165 176 204 208 216 217 218 222 238 241 259 269 286 306 326 340 #> [32725] 348 362 366 369 375 379 380 397 400 413 417 422 430 436 446 448 454 458 #> [32743] 460 462 463 469 488 492 494 501 520 522 525 528 549 556 568 569 593 598 #> [32761] 599 605 610 614 617 628 648 655 659 660 662 665 666 667 693 698 715 726 #> [32779] 738 740 746 747 772 781 790 799   1   3   4   8  13  19  22  39  46  49 #> [32797]  52  59  62  80  84  98 104 118 120 121 135 161 183 187 196 199 204 209 #> [32815] 222 226 231 235 238 239 259 271 276 285 287 291 300 307 323 327 376 381 #> [32833] 383 398 406 408 437 441 442 443 473 479 505 527 554 561 576 586 599 630 #> [32851] 633 647 652 658 668 671 675 678 692 695 709 714 720 730 736 747 765 778 #> [32869] 788  16  18  27  39  44  51  57  75  88  90  92  99 103 113 120 130 142 #> [32887] 145 152 164 170 171 214 215 235 279 286 290 299 308 313 316 340 354 363 #> [32905] 386 399 408 419 435 436 440 445 446 448 456 458 467 469 474 475 487 502 #> [32923] 514 532 545 548 559 584 592 594 599 632 638 648 649 661 664 684 688 691 #> [32941] 693 699 700 725 728 736 742 746 748 749 760 778 785 786 787 791 792 810 #> [32959]   1   2   3   8  19  28  32  46  53  55  69  79 123 124 131 142 146 164 #> [32977] 167 175 186 187 188 191 198 221 249 251 255 260 261 269 278 289 303 307 #> [32995] 308 333 335 358 361 372 382 389 420 452 462 482 498 501 512 516 531 533 #> [33013] 556 580 590 602 622 623 644 656 662 666 677 683 684 686 694 695 707 711 #> [33031] 715 724 727 745 800 801   0  13  21  24  39  43  59  82  90  91  97 100 #> [33049] 101 111 118 122 129 133 139 141 142 160 167 168 173 204 214 216 220 221 #> [33067] 225 257 267 290 305 307 315 337 339 364 379 382 387 397 415 426 427 431 #> [33085] 436 439 469 495 498 503 505 510 528 537 542 544 559 569 579 585 593 596 #> [33103] 598 606 607 613 626 648 654 700 705 736 746 750 771 772 773 785 794 802 #> [33121] 806   7  16  22  37  60  69  71  95 103 125 126 155 169 171 205 206 209 #> [33139] 241 251 265 275 280 283 287 289 292 314 315 321 324 325 362 364 372 373 #> [33157] 379 405 428 432 440 456 465 469 487 519 556 564 575 582 589 611 620 628 #> [33175] 630 651 655 664 670 671 678 680 682 687 695 700 703 719 728 734 735 761 #> [33193] 765 770 775 778 780 781 783 792 813   2   8  11  14  16  26  51  69  71 #> [33211]  72  79  90  94 102 118 123 135 136 165 169 174 181 191 195 200 239 280 #> [33229] 324 330 339 353 359 362 371 383 392 397 420 425 429 436 481 489 508 513 #> [33247] 544 546 585 591 592 610 611 625 626 634 647 656 664 671 683 686 692 701 #> [33265] 723 738 756 762 767 776 782 795 807 817   5  26  43  51  91 102 110 111 #> [33283] 112 113 114 125 132 150 158 162 166 173 181 191 202 225 228 234 235 253 #> [33301] 254 260 270 283 290 332 361 364 368 373 380 385 403 408 409 414 427 440 #> [33319] 442 449 458 463 473 490 492 501 503 506 510 512 522 533 555 577 584 593 #> [33337] 615 625 634 641 664 673 675 692 700 702 703 708 711 714 760 768 775 809 #> [33355]   2   9  10  20  23  25  39  50  51  63  64  77  81  83 102 128 144 154 #> [33373] 167 170 173 180 192 211 213 219 236 240 249 258 277 280 289 309 310 313 #> [33391] 323 342 345 353 356 363 384 392 393 397 401 414 426 435 453 481 515 563 #> [33409] 583 620 636 672 691 693 697 717 722 728 788 797 801 818  12  20  24  39 #> [33427]  43  54  55  57  64  81  92 100 103 106 119 125 127 142 147 152 164 170 #> [33445] 174 179 183 193 199 208 232 239 264 298 302 313 319 334 337 339 342 343 #> [33463] 353 357 366 379 397 410 418 420 430 431 435 439 445 449 462 464 479 502 #> [33481] 510 528 543 548 549 554 574 581 594 601 603 605 611 623 652 656 664 668 #> [33499] 669 671 681 688 713 723 732 742 746 755 759 778 784 794 807  53  58  62 #> [33517]  63  70  98 114 117 122 137 142 149 154 156 168 179 233 249 278 300 303 #> [33535] 309 319 324 332 348 352 370 375 376 388 390 409 423 444 455 458 466 485 #> [33553] 508 514 516 529 535 537 539 543 545 564 568 582 587 599 616 648 652 662 #> [33571] 672 681 695 707 708 735 749 752 777 778 782 787 796 803 812   2   7  11 #> [33589]  18  34  41  55  61  63  74  75  91  95  99 102 115 116 117 122 137 154 #> [33607] 161 166 172 187 194 212 221 227 258 266 287 312 328 359 376 396 404 413 #> [33625] 435 437 499 504 505 525 553 554 562 571 572 588 598 608 609 612 614 617 #> [33643] 633 639 645 646 649 653 672 674 677 683 689 690 698 719 723 726 739 744 #> [33661] 746 775 779 784 785 801 804 818   5   7  14  20  23  26  30  33  41  52 #> [33679]  60  78  82  93  95  97 100 109 115 122 126 134 136 139 152 156 159 160 #> [33697] 166 170 174 190 212 247 256 271 288 292 294 307 311 312 322 323 324 339 #> [33715] 344 348 357 359 373 374 392 401 410 436 438 440 441 442 446 450 458 498 #> [33733] 526 536 541 547 548 550 558 564 579 580 585 599 624 653 660 675 687 700 #> [33751] 715 716 733 736 757 764 774 793 799 814 819 822 823   0   7  16  20  28 #> [33769]  57  61  65  72 104 120 124 126 129 145 147 150 152 154 155 196 201 202 #> [33787] 209 233 234 247 248 253 263 279 291 318 331 358 361 365 385 409 416 435 #> [33805] 454 467 493 539 540 544 557 567 569 575 576 586 592 596 602 612 615 617 #> [33823] 618 632 645 647 659 660 669 672 684 686 690 703 706 708 720 722 730 732 #> [33841] 736 767 772 777 781 783 823  19  32  36  37  40  60  61  81  86  88  92 #> [33859]  99 121 126 134 136 138 139 146 152 165 174 186 194 195 202 205 207 216 #> [33877] 228 231 247 257 258 267 276 311 314 315 331 332 336 347 359 360 385 386 #> [33895] 394 396 422 461 492 494 521 559 583 587 593 601 602 609 614 628 647 652 #> [33913] 670 671 696 719 736 739 750 765 770 773 785 798   2  16  26  40  42  54 #> [33931]  72  74 102 110 133 149 162 214 220 227 234 236 246 248 249 259 296 298 #> [33949] 307 321 338 347 354 359 360 364 368 370 372 378 402 409 437 446 450 476 #> [33967] 545 551 568 582 584 606 608 609 611 646 679 680 685 697 700 703 704 725 #> [33985] 732 740 753 768 776 782 786 792   0   6  20  28  41  47  51  52  55  75 #> [34003]  86  92 102 104 106 108 115 118 145 147 158 166 177 180 183 196 212 222 #> [34021] 227 229 245 248 252 261 266 268 276 287 304 320 335 338 339 343 349 359 #> [34039] 371 386 398 415 430 431 442 455 458 476 477 479 509 514 521 535 537 550 #> [34057] 551 563 579 580 581 588 590 592 593 624 631 637 660 664 666 681 683 703 #> [34075] 706 710 778 779 807 815 822   5  15  20  34  54  69  70  73  78  83  84 #> [34093]  94 102 114 120 122 145 152 153 158 167 168 184 193 205 223 225 235 266 #> [34111] 280 283 289 290 321 344 352 357 371 378 381 383 386 408 411 416 439 441 #> [34129] 443 448 453 458 459 478 496 501 506 510 517 527 535 547 558 565 571 584 #> [34147] 601 603 605 608 637 642 644 680 687 691 714 725 734 740 746 752 753 754 #> [34165] 763 778 779 801 822 826  28  29  32  42  54  64  67  71  79  84  98 106 #> [34183] 110 117 120 121 147 164 197 198 200 207 216 246 257 265 271 276 278 280 #> [34201] 289 292 309 323 341 342 345 347 354 359 364 369 370 372 395 396 418 427 #> [34219] 432 470 480 501 524 542 554 593 598 622 630 634 640 643 653 662 689 709 #> [34237] 715 724 731 743 753 754 763 765 767 769 791 792 809 822  61  71  75  80 #> [34255]  92 103 134 142 148 150 152 163 177 205 208 229 237 240 245 252 257 261 #> [34273] 282 284 295 298 304 322 323 326 331 355 362 363 367 376 387 421 458 466 #> [34291] 492 499 506 524 534 540 546 555 559 560 583 596 615 642 644 677 678 681 #> [34309] 686 692 693 702 703 704 713 715 722 727 732 735 755 779 787 794   3  22 #> [34327]  23  24  29  50  63  71  74  80 140 150 158 186 194 206 210 242 248 251 #> [34345] 259 269 290 305 310 315 327 341 366 379 394 432 443 445 469 492 537 552 #> [34363] 581 602 604 608 619 635 650 667 671 677 717 723 725 734 747 764 765 778 #> [34381] 780 789 796 797 804 806 830 832  15  21  27  28  39  65  76  81  94 117 #> [34399] 131 132 139 143 159 175 181 185 190 204 218 219 242 274 302 306 325 338 #> [34417] 343 348 357 366 373 426 434 446 456 461 481 490 501 502 509 511 515 535 #> [34435] 546 556 568 579 612 626 628 643 644 673 677 708 710 727 733 735 764 779 #> [34453] 793 798 808 815 819   0  20  25  48  58  69  75 101 103 104 115 117 119 #> [34471] 128 129 166 191 202 207 214 218 235 243 285 288 290 295 297 302 328 329 #> [34489] 347 349 370 378 393 399 400 401 410 412 424 432 446 452 465 466 467 470 #> [34507] 473 476 479 483 485 493 494 536 549 552 556 578 580 588 600 612 614 617 #> [34525] 622 644 645 649 654 662 689 722 736 751 752 755 764 766 787 789 800 802 #> [34543] 811 831   5   9  22  23  27  44  46  51  55  58  96  98 115 147 158 160 #> [34561] 176 181 186 203 208 241 244 247 262 271 283 286 301 314 324 341 353 356 #> [34579] 373 380 402 418 445 458 464 466 467 471 514 523 526 548 558 563 579 624 #> [34597] 630 631 635 637 669 672 682 683 686 689 703 706 708 711 715 730 734 750 #> [34615] 776 784 806  10  24  42  46  51  60  72  75  87 112 115 116 122 145 158 #> [34633] 160 167 193 197 201 204 211 229 304 308 310 320 325 344 346 351 360 386 #> [34651] 388 412 424 429 435 438 478 490 500 506 513 515 520 524 532 547 548 569 #> [34669] 590 594 596 610 615 626 639 659 670 673 679 692 693 704 712 714 729 762 #> [34687] 764 776 778 783 791 793 803 809 812 813 814 819 837  13  18  23  24  43 #> [34705]  45  51  57  60  61  91  93 135 141 152 155 159 180 191 222 236 243 260 #> [34723] 263 268 274 275 282 293 369 374 382 396 415 419 451 454 461 500 514 524 #> [34741] 549 550 552 554 565 568 570 576 595 601 606 623 634 645 657 658 665 691 #> [34759] 695 698 706 722 727 738 742 745 760 763 783 786 812  14  26  27  30  38 #> [34777]  57  61  70  93 107 108 113 116 120 135 143 161 162 187 203 228 233 236 #> [34795] 247 249 270 272 277 287 299 302 307 320 325 331 340 344 349 368 380 382 #> [34813] 391 443 445 449 450 464 475 485 489 492 515 520 522 533 538 540 541 547 #> [34831] 573 582 585 586 591 596 631 636 638 639 641 643 645 662 676 679 689 690 #> [34849] 692 702 741 744 750 762 767 771 781 785 790 798 800 806 807 831 836   0 #> [34867]   1   4   5  18  19  24  33  42  75  87  88  96 118 120 121 125 151 154 #> [34885] 160 178 182 192 194 208 213 215 223 224 235 239 242 248 253 261 264 277 #> [34903] 279 280 287 303 329 334 336 341 346 364 376 393 420 426 427 437 448 449 #> [34921] 457 502 505 506 516 523 544 549 555 571 595 602 603 607 617 624 646 649 #> [34939] 662 665 675 682 700 702 727 734 740 741 751 762 774 800 811 813 827  16 #> [34957]  18  36  51  54  68  71  79  83 102 106 122 131 134 160 164 166 179 180 #> [34975] 183 192 214 225 230 247 250 254 270 272 284 295 302 315 317 327 328 330 #> [34993] 336 347 349 361 370 372 373 376 387 428 429 443 485 489 507 510 512 518 #> [35011] 528 537 603 608 612 623 666 670 671 683 690 711 713 714 725 733 745 753 #> [35029] 763 765 791 809 810 831   5  14  20  22  23  30  33  45  61  82 114 135 #> [35047] 141 150 160 170 173 180 197 219 223 226 246 252 255 260 302 334 337 350 #> [35065] 365 385 394 397 409 421 422 437 473 475 483 487 488 493 499 516 519 529 #> [35083] 544 550 556 561 574 575 578 583 600 602 609 618 636 644 645 659 684 686 #> [35101] 693 694 732 739 740 742 752 756 759 763 774 785 788 789 803 805 808 837 #> [35119]  11  34  44  55  60  65  77  83  88  99 103 109 126 169 171 185 187 194 #> [35137] 199 200 220 238 250 254 266 276 289 294 300 304 312 331 334 349 380 398 #> [35155] 400 424 425 426 447 448 455 456 457 459 467 476 505 506 517 520 530 534 #> [35173] 547 570 583 616 621 623 624 634 644 656 663 665 684 706 707 711 717 728 #> [35191] 731 732 750 752 754 756 757 760 764 765 772 781 788 804 810 823   6  16 #> [35209]  24  26  63  75  76  80  83  85 103 133 147 176 177 191 192 219 221 225 #> [35227] 226 266 285 303 313 315 323 327 328 331 333 336 350 362 367 373 378 387 #> [35245] 400 409 414 422 432 440 449 457 465 468 494 506 517 519 523 525 532 549 #> [35263] 556 565 570 583 605 613 646 659 662 675 679 715 722 730 737 741 757 758 #> [35281] 770 785 793 795 802 823 838 842 843   8  10  14  25  42  81  84 100 101 #> [35299] 128 129 135 142 143 144 154 160 174 177 182 183 184 220 239 244 251 305 #> [35317] 310 318 322 347 356 360 363 366 378 379 380 389 408 433 435 444 447 457 #> [35335] 460 464 472 475 481 486 489 523 526 529 532 537 544 554 577 585 586 589 #> [35353] 596 598 618 620 638 639 649 654 668 692 694 700 709 723 734 754 766 808 #> [35371] 818 825 830   7   9  14  18  37  39  40  53  71  74  85  98 106 114 141 #> [35389] 147 165 168 179 189 195 197 203 208 211 217 255 263 317 327 329 348 355 #> [35407] 380 381 394 398 403 406 407 412 413 420 425 427 453 454 476 488 489 494 #> [35425] 520 524 531 552 554 560 573 578 588 590 612 617 618 632 659 660 661 691 #> [35443] 695 705 707 721 732 742 747 749 751 763 770 790 811 813   9  11  17  19 #> [35461]  20  25  31  33  46  53  75  86  87  89  94 103 113 125 133 151 160 175 #> [35479] 177 215 219 230 238 244 285 292 314 315 316 327 342 353 357 367 376 377 #> [35497] 385 393 410 415 427 453 464 476 482 492 494 495 506 507 508 517 541 545 #> [35515] 554 569 580 587 593 606 612 620 630 641 656 657 666 669 671 677 685 696 #> [35533] 719 734 740 762 765 772 773 804 811 812 815 817 833 841 845   5  23  31 #> [35551]  34  39  42  46  49  51  53  63  70  82 112 123 127 147 150 165 183 185 #> [35569] 200 205 219 225 233 251 257 278 281 284 309 318 330 339 351 370 377 384 #> [35587] 386 396 397 411 433 443 461 467 469 509 526 552 561 566 575 578 583 589 #> [35605] 593 614 622 623 625 637 649 675 693 700 701 719 723 724 731 747 757 785 #> [35623] 809 812 823 839 842 844   8  12  16  24  45  47  53  54  60  68  76  90 #> [35641]  95  99 100 102 103 122 123 126 143 145 156 160 166 168 189 191 192 215 #> [35659] 217 219 234 245 247 252 264 267 280 295 303 317 321 347 360 363 372 387 #> [35677] 388 393 396 397 421 422 430 436 445 453 455 468 478 494 519 545 553 575 #> [35695] 576 592 612 614 617 619 623 628 652 655 677 678 681 694 704 707 708 710 #> [35713] 724 729 744 745 750 753 778 786 788 792 813 825   4   8  34  57  66  71 #> [35731]  76  77  78 115 134 148 151 162 174 186 204 209 213 219 252 255 277 309 #> [35749] 314 321 325 333 350 359 360 371 375 380 406 412 415 428 447 448 449 453 #> [35767] 457 470 504 514 519 540 557 573 574 582 589 599 613 627 635 648 657 662 #> [35785] 665 674 675 677 687 708 712 741 742 773 788 791 792 804 812 822 829 841 #> [35803] 844  26  43  51  68  83 104 106 118 119 155 156 205 214 225 226 227 232 #> [35821] 246 251 254 258 268 269 273 278 279 282 297 298 299 303 313 322 323 325 #> [35839] 345 346 347 350 360 361 381 393 399 420 436 437 438 449 457 467 469 473 #> [35857] 487 488 492 493 527 532 534 544 550 570 598 601 619 638 674 695 711 713 #> [35875] 715 727 730 734 750 772 810 820 825 826 837 839 843 845  13  14  21  37 #> [35893]  39  52  65  69  72  94  98 116 131 158 160 162 165 192 193 213 215 234 #> [35911] 248 261 265 270 281 295 305 310 321 335 343 349 356 358 368 379 392 422 #> [35929] 432 434 439 485 493 503 504 510 516 528 539 545 547 573 585 612 657 667 #> [35947] 671 678 684 699 704 706 712 720 765 771 810 811 813 821 825 831 845   6 #> [35965]  16  34  44  48  50  90  92  96 104 120 128 161 221 253 256 257 268 270 #> [35983] 271 277 278 281 301 320 323 324 329 339 351 356 360 362 375 380 392 407 #> [36001] 410 413 416 418 429 437 441 452 454 455 456 488 496 498 513 516 523 544 #> [36019] 548 562 571 572 591 594 597 610 626 633 638 659 664 670 678 681 697 722 #> [36037] 742 743 747 751 771 774 777 787 804 806 815 820 845 848 849   5  10  11 #> [36055]  12  18  22  30  69  91  97 130 132 141 143 162 166 167 175 177 178 179 #> [36073] 195 207 208 238 256 270 272 274 276 299 306 327 350 359 362 363 382 386 #> [36091] 388 391 436 457 458 461 463 478 483 489 494 500 502 504 514 517 519 531 #> [36109] 532 542 549 550 558 565 566 612 613 616 622 628 636 640 675 676 693 700 #> [36127] 706 723 737 759 767 768 775 780 782 786 790 802 813 814 823 825 826 831 #> [36145] 841 845  25  32  38  47  62  63  73  80  83  93  96  97 101 104 107 122 #> [36163] 133 143 164 165 174 178 209 214 221 222 223 225 237 255 260 265 281 285 #> [36181] 299 326 327 341 362 364 382 391 402 405 418 424 431 453 454 461 473 492 #> [36199] 496 516 517 521 538 547 571 584 600 622 627 629 641 642 644 653 661 673 #> [36217] 681 684 700 709 735 738 767 769 771 774 776 779 780 785 792 796 816 832 #> [36235] 837 850   1   3   8  27  42  47  66  69  78  92  98 115 121 151 152 159 #> [36253] 160 161 164 197 223 228 229 230 232 233 238 247 254 256 257 260 262 275 #> [36271] 291 297 323 324 361 372 373 432 443 453 470 480 487 526 545 563 567 581 #> [36289] 584 586 600 604 610 624 642 657 671 674 678 691 692 697 701 703 706 713 #> [36307] 748 758 765 766 782 795 804 807 821 822 829  23  26  32  34  40  55  69 #> [36325]  74  89  91  98 116 122 123 134 139 164 168 170 199 206 243 247 250 273 #> [36343] 274 282 290 303 305 306 325 327 339 350 361 365 370 375 381 384 395 423 #> [36361] 436 443 452 459 461 462 479 480 488 494 504 523 529 545 574 580 583 585 #> [36379] 589 614 640 647 663 670 687 692 694 696 704 734 742 750 762 766 767 771 #> [36397] 772 777 801 810 814 816 820 833 837 839 842 857   7  15  23  24  30  41 #> [36415]  48  62  65  71  76  85  88 108 118 127 135 144 154 158 163 171 176 196 #> [36433] 216 241 250 271 289 307 308 316 319 324 326 328 333 338 347 350 354 367 #> [36451] 370 376 384 398 399 405 416 422 436 441 442 444 450 453 477 479 502 510 #> [36469] 514 516 521 524 534 543 550 572 575 626 642 653 655 660 662 673 678 700 #> [36487] 718 719 720 723 727 729 735 737 749 750 751 772 774 790 792 794 800 818 #> [36505] 830 841 846 847 851   8  21  39  45  69  73  95  96 128 141 147 169 178 #> [36523] 179 184 196 200 231 235 259 260 262 265 279 282 307 315 318 348 350 361 #> [36541] 388 401 407 419 457 460 469 478 513 535 536 544 575 579 591 609 623 629 #> [36559] 646 652 661 672 681 687 705 735 749 753 756 774 776 791 795 799 817 821 #> [36577] 856   5  28  29  42  55  66  69  73  74  93 101 112 117 119 120 122 133 #> [36595] 146 163 171 182 189 210 214 215 226 227 238 257 260 264 266 267 271 284 #> [36613] 291 303 305 311 334 335 344 346 385 391 403 413 422 437 442 458 461 464 #> [36631] 477 489 497 500 501 509 511 516 518 522 530 582 591 594 600 601 602 614 #> [36649] 634 644 647 663 665 668 678 681 686 704 711 720 734 749 750 755 756 775 #> [36667] 778 779 785 821 830  13  36  43  47  51  64  75  80  94 102 103 118 121 #> [36685] 128 132 133 141 175 178 182 199 202 212 214 216 219 225 230 232 244 276 #> [36703] 285 295 300 313 315 331 338 344 362 371 398 400 404 418 421 432 442 443 #> [36721] 450 455 458 494 498 502 504 507 514 539 544 546 549 558 564 566 571 606 #> [36739] 609 612 621 624 630 650 657 668 687 691 699 715 726 727 732 734 737 741 #> [36757] 745 746 762 768 773 788 792 817 822 853 855 856  13  17  19  28  56  68 #> [36775]  76  77 124 136 143 147 157 160 163 165 169 176 183 195 207 215 240 242 #> [36793] 245 255 256 267 272 273 282 292 307 309 313 317 319 322 333 338 339 341 #> [36811] 345 364 368 381 388 428 435 437 441 444 446 475 482 495 542 546 550 563 #> [36829] 568 570 573 575 588 595 596 614 623 626 630 641 661 665 667 688 690 698 #> [36847] 724 753 764 765 766 789 795 800 801 806 813 818 821 829 835 841 860 861 #> [36865]   3  15  16  17  20  38  58  60  61  81  84  88  96 102 118 122 128 150 #> [36883] 153 167 169 172 191 192 193 199 205 208 228 240 242 249 275 286 305 323 #> [36901] 325 336 349 360 386 391 393 399 410 414 429 432 438 442 448 449 456 462 #> [36919] 464 477 483 512 542 546 551 552 556 572 577 583 595 608 611 620 635 639 #> [36937] 655 670 678 681 702 726 732 740 743 750 761 762 763 794 795 808 813 823 #> [36955] 831 840 842 844 851 855   9  20  45  59  69  73  87 102 108 111 113 114 #> [36973] 116 136 146 159 161 168 174 176 177 189 190 195 198 212 214 216 230 255 #> [36991] 262 265 268 269 274 275 286 325 364 375 378 384 402 412 426 433 452 469 #> [37009] 481 528 530 533 537 540 543 548 594 597 615 620 636 642 664 669 674 678 #> [37027] 683 689 696 702 704 722 745 764 776 777 784 801 818 821 823 830 841   4 #> [37045]   5   7  11  19  37  42  45  56  79 138 147 168 170 179 193 216 231 236 #> [37063] 238 254 269 279 283 288 294 297 298 299 309 312 326 327 356 372 384 388 #> [37081] 389 436 465 490 499 513 541 543 555 564 585 588 592 606 632 649 652 659 #> [37099] 670 674 683 688 699 706 715 718 719 729 738 739 743 746 765 766 782 792 #> [37117] 805 808 817 824 842 856  27  45  50  55  58  62  82 100 133 146 160 164 #> [37135] 179 195 200 234 244 256 261 264 267 304 349 354 366 376 389 398 422 438 #> [37153] 450 464 465 470 479 486 520 522 526 535 566 573 574 591 601 613 614 619 #> [37171] 627 639 642 659 674 683 686 696 705 706 708 711 719 722 729 738 749 757 #> [37189] 770 771 781 783 818 830 839 852 853 862 863   1  14  49  67  85  86  99 #> [37207] 109 112 114 137 144 152 154 156 165 172 188 194 207 216 229 245 246 247 #> [37225] 248 250 254 270 271 277 281 308 315 334 346 349 365 366 368 369 375 377 #> [37243] 385 395 405 406 407 409 433 452 461 474 487 501 506 508 514 518 524 528 #> [37261] 539 545 549 564 565 575 581 584 599 626 628 635 639 645 646 657 674 677 #> [37279] 681 686 691 697 705 715 729 732 733 740 752 758 783 785 787 788 792 794 #> [37297] 801 821 846 852 854 857   7  12  27  33  61  80 129 133 136 162 191 192 #> [37315] 211 214 234 239 266 268 271 282 293 299 308 322 332 343 354 361 363 366 #> [37333] 368 369 391 394 399 402 403 421 422 427 438 451 455 465 474 478 479 483 #> [37351] 488 489 490 492 497 498 506 510 514 532 543 551 566 567 569 573 606 621 #> [37369] 624 664 673 679 689 690 699 719 722 729 735 745 750 775 776 781 787 816 #> [37387] 818 822 824 835 836 861 863 866  12  20  22  29  38  39  43  44  47  61 #> [37405]  86 106 117 123 128 135 145 159 162 167 179 197 199 201 209 217 218 220 #> [37423] 233 247 248 253 258 271 277 319 348 362 369 371 375 381 408 418 421 462 #> [37441] 464 470 474 485 490 498 507 515 522 525 527 529 542 546 549 558 560 568 #> [37459] 585 609 610 615 616 623 641 668 689 697 701 706 732 741 749 768 818 832 #> [37477] 846 848  12  13  20  32  38  42  49  52  59  65  71  77  84  85 114 117 #> [37495] 126 128 150 152 169 170 171 191 227 234 240 259 260 261 275 276 286 289 #> [37513] 293 303 304 306 312 319 321 322 336 348 356 362 368 377 380 388 394 407 #> [37531] 498 506 511 513 516 519 543 548 552 561 566 569 587 600 639 640 646 678 #> [37549] 679 692 710 722 742 756 763 768 774 780 788 796 815 839 846 849 850 851 #> [37567] 854 858 865 870  27  32  41  54  69  75  78  91  95  97 118 140 142 172 #> [37585] 173 174 177 178 182 203 212 219 222 225 232 237 240 250 253 258 277 286 #> [37603] 287 293 302 311 315 338 345 359 365 371 383 386 417 419 441 476 493 501 #> [37621] 502 520 530 531 555 563 593 601 602 622 641 645 649 652 664 685 690 701 #> [37639] 702 710 713 725 738 740 742 749 753 768 769 776 782 783 791 793 831 837 #> [37657] 866 867   3  18  20  24  47  54  63  88 115 136 137 145 151 160 185 223 #> [37675] 231 238 249 251 268 280 291 333 349 350 351 353 374 376 384 393 394 403 #> [37693] 407 429 430 458 465 466 468 472 476 495 499 512 554 559 566 570 577 581 #> [37711] 590 627 640 649 659 664 669 672 687 690 696 707 719 722 733 735 767 780 #> [37729] 787 796 807 808 811 817 834 839 844 847 854 863   0   6  10  32  46  49 #> [37747]  64  94 108 112 115 118 119 136 143 161 162 187 195 197 199 203 209 228 #> [37765] 235 256 272 281 304 309 311 316 324 328 344 346 349 354 371 373 374 380 #> [37783] 390 395 402 403 422 423 428 431 436 473 474 491 502 514 545 555 563 567 #> [37801] 577 579 593 596 599 607 614 620 639 653 662 663 681 715 728 734 755 772 #> [37819] 776 780 782 791 809 821 826 834 839 842 861   4  15  24  40  41  46  50 #> [37837]  54  68  80  86  87  92  94  97 108 122 123 134 137 140 159 164 168 219 #> [37855] 237 247 256 258 286 302 304 316 340 344 366 374 387 403 404 436 460 467 #> [37873] 473 484 508 522 532 549 563 568 575 578 581 590 598 600 610 613 619 637 #> [37891] 646 654 657 661 662 670 673 740 756 757 760 785 803 813 817 820 826 830 #> [37909] 846 847 855 864 866 871  11  12  16  24  29  32  52  60  86  95 100 109 #> [37927] 118 119 125 130 133 150 168 179 189 195 208 246 253 254 255 260 273 291 #> [37945] 294 298 313 315 326 331 336 339 342 387 400 404 418 426 443 465 467 468 #> [37963] 484 487 496 510 516 521 524 539 551 557 565 568 570 577 584 588 589 625 #> [37981] 629 634 638 649 681 684 702 707 721 730 733 762 769 770 784 800 817 821 #> [37999] 824 841 843 844 848 862   7  19  36  50  66  67  75  81  86  92  95 120 #> [38017] 126 129 132 153 164 166 178 193 203 225 227 248 250 284 287 297 298 331 #> [38035] 335 345 349 367 374 400 422 433 443 448 474 497 514 543 552 556 570 571 #> [38053] 579 583 584 587 589 609 613 623 629 632 637 638 654 656 681 686 702 709 #> [38071] 713 728 736 740 751 759 760 767 779 797 806 813 825 836 853 864 866 872 #> [38089] 874   6  18  34  55  66  89 116 134 141 143 155 166 171 192 205 229 231 #> [38107] 246 255 261 275 277 286 287 302 310 316 326 335 339 340 363 377 378 384 #> [38125] 385 386 392 396 406 409 420 424 436 441 466 467 480 486 489 492 500 510 #> [38143] 523 531 559 569 574 577 602 604 606 608 609 620 651 656 660 669 676 679 #> [38161] 691 696 699 702 719 735 748 758 763 787 790 791 803 806 814 823 848 862 #> [38179] 869 874   8  21  24  33  81  89  92  97 107 109 113 130 135 137 139 143 #> [38197] 159 171 175 192 201 217 221 238 243 247 253 267 268 291 294 321 334 357 #> [38215] 377 380 399 413 415 421 434 454 455 457 472 477 478 493 504 524 528 540 #> [38233] 593 599 605 614 625 633 642 650 660 662 672 674 684 688 709 712 718 723 #> [38251] 741 743 746 762 818 831 840 847 857  92 106 121 128 140 156 165 170 175 #> [38269] 189 192 208 213 217 221 227 228 248 250 260 264 274 278 291 315 316 323 #> [38287] 329 358 361 373 392 401 402 407 412 426 431 444 448 450 461 465 483 488 #> [38305] 529 530 539 541 548 627 642 652 659 683 691 700 717 732 733 736 747 750 #> [38323] 751 753 771 776 787 800 808 811 813 822 825 829 832 836 862 864 879   0 #> [38341]  11  12  39  43  48  64  89  91 108 165 173 177 188 206 223 254 259 263 #> [38359] 265 272 286 288 291 301 308 314 339 351 355 361 377 386 393 397 404 416 #> [38377] 429 434 437 438 448 468 502 509 516 543 544 554 561 580 613 633 654 661 #> [38395] 662 667 678 681 685 701 729 733 737 738 749 757 761 766 799 826 832 838 #> [38413] 839 858 868 869 874   2  17  23  41  46  61  77  91  96  97 121 129 142 #> [38431] 164 174 184 199 203 215 237 240 248 272 287 309 311 331 338 346 347 370 #> [38449] 388 400 405 426 432 439 467 478 486 489 493 494 509 516 520 533 536 540 #> [38467] 542 556 566 590 593 595 596 604 608 616 617 636 640 652 662 674 688 696 #> [38485] 700 704 721 729 741 746 747 755 769 774 780 804 808 817 818 832 867  10 #> [38503]  35  58  63  78  79  81  82  85 121 122 127 134 140 143 167 177 189 191 #> [38521] 204 216 239 248 250 255 256 284 304 313 314 345 347 349 358 359 368 371 #> [38539] 403 405 406 414 455 511 515 517 521 532 539 546 549 552 561 586 589 597 #> [38557] 607 609 613 614 625 633 641 644 645 656 664 668 669 677 678 684 685 701 #> [38575] 713 736 754 766 776 783 802 803 813 823 849 859 867   2   6  10  14  17 #> [38593]  29  36  39  46  58  64  68  90 104 122 127 134 138 186 192 200 215 226 #> [38611] 233 235 237 270 284 294 313 320 337 350 370 372 378 389 391 403 404 407 #> [38629] 411 416 417 429 437 438 441 450 464 472 486 507 526 534 544 561 576 590 #> [38647] 602 609 619 637 641 642 650 663 670 674 690 693 694 696 740 743 802 805 #> [38665] 818 823 830 834 845 855 861  23  41  43  48  58  67  78  86  94 109 119 #> [38683] 120 125 143 146 153 165 169 170 190 225 231 243 246 250 256 262 264 278 #> [38701] 279 280 284 288 291 294 295 298 302 303 304 306 316 336 343 357 373 374 #> [38719] 390 402 423 430 457 460 486 488 520 523 533 545 546 572 573 574 575 588 #> [38737] 589 590 592 618 649 684 686 698 707 722 739 746 748 755 765 773 774 789 #> [38755] 804 810 812 817 825 849 868 877   3  12  21  43  65  69  72  94 112 115 #> [38773] 127 128 141 148 156 159 170 182 193 194 212 219 232 233 237 256 259 261 #> [38791] 283 302 313 322 331 337 357 365 370 371 373 385 389 390 409 411 432 439 #> [38809] 454 459 472 479 485 487 509 515 529 544 546 548 568 575 580 582 598 603 #> [38827] 605 616 631 646 657 658 661 662 665 667 681 684 686 691 704 725 736 743 #> [38845] 752 770 779 787 819 862 883  15  28  31  34  46  48  52  75  83  90  95 #> [38863] 109 118 121 140 143 156 166 168 185 203 210 223 237 239 240 242 243 268 #> [38881] 271 276 292 293 311 323 329 330 333 349 360 391 401 403 428 444 448 449 #> [38899] 461 475 488 506 521 525 533 534 540 546 563 565 577 584 586 591 592 623 #> [38917] 637 651 662 689 701 711 747 754 762 765 768 778 784 785 804 813 819 839 #> [38935] 883  16  23  32  37  47  52  55  85  97 114 129 171 172 190 197 200 208 #> [38953] 212 228 239 246 248 258 289 290 294 310 327 339 344 347 355 360 372 373 #> [38971] 376 387 395 402 403 410 425 430 440 462 479 486 531 535 553 563 586 594 #> [38989] 607 609 628 631 633 644 675 678 694 710 730 731 735 739 751 781 784 795 #> [39007] 805 810 812 813 817 821 827 828 843 850   0  13  15  16  25  26  39  49 #> [39025]  65  69  73  79  87  94  95  99 100 105 106 125 131 133 153 154 160 164 #> [39043] 173 174 175 176 177 188 189 211 214 215 216 220 223 226 252 254 259 260 #> [39061] 262 265 281 288 299 304 309 327 330 332 344 359 375 382 386 399 410 458 #> [39079] 475 495 496 512 524 530 538 548 555 556 567 569 577 579 602 603 606 617 #> [39097] 628 633 647 659 664 672 674 676 683 685 686 687 706 734 738 748 758 762 #> [39115] 765 770 774 782 784 788 789 801 824 826 829 851 859 863 869 871   1   2 #> [39133]  10  11  18  19  20  39  62  66  81  86  88  92  97 106 107 116 132 140 #> [39151] 144 151 165 169 194 198 212 230 235 236 239 245 251 258 263 279 282 286 #> [39169] 292 298 322 325 330 355 362 385 389 406 420 434 448 457 459 462 490 496 #> [39187] 518 532 534 554 572 580 586 637 649 653 657 679 690 715 720 733 748 752 #> [39205] 778 780 783 784 804 806 813 815 819 838 842 854  33  61  72  81  90 103 #> [39223] 113 120 140 152 167 173 180 182 193 204 215 226 237 238 249 259 271 284 #> [39241] 287 288 293 305 316 326 335 352 367 378 381 389 409 410 414 424 433 445 #> [39259] 455 459 465 472 489 492 499 530 532 545 551 553 555 568 578 591 607 615 #> [39277] 620 622 632 645 658 680 688 691 697 700 707 710 720 724 729 738 744 750 #> [39295] 761 763 790 821 822 830 833 836 839 852 862 874 876 885  14  18  27  45 #> [39313]  47  48  50  52  55  69  70  72  75  99 108 109 120 132 147 150 172 183 #> [39331] 189 198 218 226 230 240 245 272 275 295 307 308 312 315 323 324 349 359 #> [39349] 360 363 376 397 401 425 450 458 479 499 504 509 513 515 522 526 543 589 #> [39367] 591 601 642 654 663 676 709 714 724 731 734 735 777 786 790 799 800 803 #> [39385] 823 853 855 857 862 871   7  13  20  33  35  46  53  65  70  74  75  76 #> [39403]  91 103 110 118 127 131 133 135 157 166 168 172 178 181 186 244 246 255 #> [39421] 257 272 274 281 286 296 315 331 336 339 349 359 364 365 369 382 383 388 #> [39439] 390 391 393 442 443 447 451 464 468 478 491 493 500 503 514 517 522 525 #> [39457] 531 543 545 549 551 581 590 595 598 604 642 661 679 693 702 749 754 786 #> [39475] 811 817 878 883  14  29  31  35  38  46  48  56 106 107 120 121 133 140 #> [39493] 143 153 155 158 165 186 188 192 225 228 232 235 246 261 263 281 288 292 #> [39511] 302 310 311 313 324 338 346 353 356 357 359 371 406 424 430 438 473 500 #> [39529] 506 507 509 514 518 527 531 535 539 542 557 567 586 594 595 596 608 627 #> [39547] 653 672 679 681 682 685 692 699 709 710 731 752 770 772 774 801 811 812 #> [39565] 815 816 823 826 879   1   8  21  22  35  53  70  71  73  88 120 138 141 #> [39583] 146 152 168 174 181 186 189 204 209 212 213 215 216 229 246 257 258 260 #> [39601] 264 286 293 298 306 318 319 326 328 332 333 337 347 353 373 419 425 426 #> [39619] 443 449 458 459 461 466 470 482 485 500 504 508 518 547 578 589 608 615 #> [39637] 628 632 637 641 642 679 681 689 734 738 749 795 811 830 831 843 847 848 #> [39655] 856 857 858 868 876 879   1  12  26  54  90 123 135 146 149 155 171 173 #> [39673] 186 194 195 214 231 236 238 260 261 265 274 291 294 300 329 341 346 352 #> [39691] 381 387 388 396 399 400 402 404 410 427 429 436 438 440 447 490 493 514 #> [39709] 518 523 544 549 562 563 581 596 683 685 690 697 698 707 716 736 747 751 #> [39727] 757 761 762 764 828 841 842 844 846 848 860 877   4  13  27  29  40  41 #> [39745]  45  49  61  90  96 100 123 133 141 150 159 170 188 189 193 196 200 205 #> [39763] 214 222 230 249 262 272 274 321 329 339 344 348 372 382 385 394 397 398 #> [39781] 402 405 411 416 420 425 442 453 468 478 522 544 550 554 564 573 574 584 #> [39799] 592 602 608 613 624 626 636 650 679 686 688 698 702 707 710 749 762 764 #> [39817] 791 798 799 824 830 832 835 865 878 882 885  13  43  53  54  58  67  73 #> [39835] 164 174 175 182 196 211 238 251 257 274 278 280 312 318 333 336 346 353 #> [39853] 365 369 371 387 389 391 392 398 404 405 416 421 425 442 474 477 494 498 #> [39871] 505 509 516 526 532 537 555 559 561 564 566 584 613 615 624 629 651 665 #> [39889] 692 712 728 741 744 745 748 757 763 782 788 789 790 791 794 803 807 809 #> [39907] 824 843 874 875 886 895   9  22  39  45  53  62  70 143 147 160 188 197 #> [39925] 201 219 221 226 234 235 261 267 269 276 281 314 317 321 323 329 333 348 #> [39943] 355 368 372 379 386 400 424 426 434 446 448 449 453 454 483 505 506 522 #> [39961] 525 589 595 604 606 611 634 656 674 694 697 700 701 703 714 723 728 744 #> [39979] 749 771 785 789 796 809 814 821 835 837 838 858 862 865 866 869 871 885 #> [39997] 886 894 897   6   7   9  19  38  50  54  64  91  94 101 104 108 109 111 #> [40015] 116 158 179 182 202 206 214 225 230 233 236 240 253 257 268 280 302 321 #> [40033] 325 338 354 357 363 382 392 398 411 415 420 421 431 437 438 486 498 504 #> [40051] 508 513 515 523 548 568 583 587 596 613 615 622 634 646 649 657 664 682 #> [40069] 697 700 705 718 746 764 766 776 782 790 795 814 835 847 856 867 880 891 #> [40087] 893   4   6   7  14  24  40  41  60  67  69  71  84  93 121 129 138 145 #> [40105] 147 155 159 169 171 185 191 197 217 231 235 239 258 272 284 295 302 308 #> [40123] 339 361 369 372 382 394 395 401 413 430 435 437 440 451 453 455 460 490 #> [40141] 498 499 501 502 503 512 515 522 538 554 583 589 600 603 632 634 639 662 #> [40159] 671 674 697 704 709 710 716 726 729 762 764 765 775 800 803 809 832 835 #> [40177] 840 847 860 868 889 900   2  14  23  30  49  51  70  74  92  96 118 125 #> [40195] 135 138 141 147 158 168 169 172 181 184 194 196 203 211 221 226 252 256 #> [40213] 257 265 267 268 269 283 286 289 298 320 322 323 324 356 361 367 375 382 #> [40231] 398 409 411 419 432 448 463 494 505 518 521 523 527 529 577 580 581 589 #> [40249] 602 621 624 651 658 677 682 686 701 707 720 746 750 758 761 764 767 796 #> [40267] 797 814 819 824 825 844 849 865 885  14  22  35  53  58  75  77  78  95 #> [40285]  98 101 114 128 139 153 169 182 187 204 205 220 221 232 241 258 272 275 #> [40303] 287 296 299 325 331 346 356 360 364 366 368 419 425 433 444 448 463 468 #> [40321] 473 483 486 510 520 534 538 540 559 560 575 578 579 596 599 638 639 646 #> [40339] 654 673 677 685 688 694 703 704 705 743 753 754 764 775 783 789 797 805 #> [40357] 811 816 837 843 846 852 853 856 860 864 888  25  33  39  56  63  68  84 #> [40375]  86 142 149 153 168 183 185 186 209 249 254 257 265 291 298 311 326 330 #> [40393] 335 350 382 395 406 407 410 420 423 432 437 446 447 461 466 472 482 493 #> [40411] 497 498 501 505 516 519 520 533 580 597 600 624 631 655 661 675 681 682 #> [40429] 688 695 698 703 708 716 766 768 779 782 822 838 839 858 861 882 896 901 #> [40447]   2  16  25  33  37  43  50  70  83  92 105 115 117 130 136 148 171 186 #> [40465] 194 196 198 201 205 236 249 255 289 317 321 329 334 341 357 366 379 385 #> [40483] 392 393 398 402 412 413 424 433 434 443 445 447 459 462 475 496 507 528 #> [40501] 529 533 549 550 554 557 577 580 586 587 598 620 622 624 626 627 645 663 #> [40519] 671 678 705 722 724 729 735 737 746 758 771 796 807 813 826 828 851 859 #> [40537] 878 889 900 903  14  38  39  44  47  67  85  96  98  99 115 127 139 145 #> [40555] 154 157 159 169 216 217 219 222 227 229 253 257 260 277 278 282 291 293 #> [40573] 295 302 306 323 335 336 366 377 417 428 435 454 462 471 479 480 484 491 #> [40591] 502 508 527 528 539 564 573 576 587 590 626 633 635 643 656 690 716 745 #> [40609] 757 764 766 785 790 794 811 816 818 820 826 837 856 858 862 869 871 877 #> [40627] 892 895 899 900 903  27  49  55  56  64  70 109 150 183 192 194 208 213 #> [40645] 237 245 267 268 269 272 273 313 316 339 344 367 371 400 413 421 425 437 #> [40663] 464 465 472 477 483 488 533 543 553 555 557 561 577 584 598 607 616 617 #> [40681] 621 623 625 635 638 681 684 692 694 739 746 751 763 765 790 792 793 797 #> [40699] 816 832 849 853 860 866 890 896  48  67  75  84  85  93 102 111 118 124 #> [40717] 147 154 171 177 205 224 232 265 269 276 279 297 316 331 347 366 387 398 #> [40735] 401 425 436 442 447 455 464 482 491 492 493 494 500 515 527 529 540 543 #> [40753] 545 553 581 586 631 641 674 676 684 690 694 700 711 723 756 763 785 800 #> [40771] 802 811 815 818 826 832 842 854 855 899  16  20  21  23  27  31  49  62 #> [40789]  94 107 115 119 130 136 137 144 156 169 175 187 203 204 205 212 218 222 #> [40807] 240 245 268 269 285 289 296 297 341 349 358 363 369 383 417 433 475 482 #> [40825] 483 493 498 508 514 515 518 541 547 554 570 571 581 594 612 614 628 631 #> [40843] 632 633 636 646 650 671 678 682 719 725 732 741 759 790 802 808 818 865 #> [40861] 875 879 880 885  10  12  34  45  47  62  70  95 103 112 131 175 176 182 #> [40879] 188 204 217 233 245 253 258 276 288 299 305 342 348 365 392 400 404 456 #> [40897] 463 469 489 491 493 499 505 506 513 521 527 529 560 566 582 586 597 601 #> [40915] 603 604 618 636 637 643 645 664 666 670 673 685 690 695 700 705 714 716 #> [40933] 741 742 749 751 764 773 776 804 810 817 820 825 838 839 851 863 865 871 #> [40951] 873 875 878 887 899 901   1   9  11  15  18  31  40  55  56  67  69  87 #> [40969]  91 100 109 116 134 140 143 144 150 179 187 202 219 225 234 239 263 264 #> [40987] 274 283 317 324 329 332 333 337 346 348 360 377 381 404 407 420 428 433 #> [41005] 436 444 451 456 459 467 478 494 496 502 503 506 515 517 523 528 546 554 #> [41023] 585 600 608 618 619 626 632 635 652 668 671 690 735 737 775 790 791 794 #> [41041] 798 808 833 834 835 836 841 851 852 860 868 873 883 907 908  14  20  21 #> [41059]  26  32  37  39  40  41  46  61  67  74  79  85 100 109 117 152 155 163 #> [41077] 185 194 196 204 213 229 238 261 268 274 279 309 327 329 348 350 352 357 #> [41095] 408 409 414 421 436 441 445 451 460 477 494 508 513 514 536 537 562 563 #> [41113] 571 575 588 592 619 623 630 636 637 638 640 652 657 661 664 666 675 676 #> [41131] 684 685 691 709 712 724 777 779 794 804 807 822 824 832 833 835 841 842 #> [41149] 843 860 861 864 869 872 885 894 896 899 900 902 905   3   6  11  12  16 #> [41167]  18  21  32  87 130 135 143 146 154 170 191 199 201 209 221 248 267 277 #> [41185] 284 292 295 305 308 313 318 330 334 335 339 353 358 374 380 390 394 399 #> [41203] 407 415 435 438 496 497 526 540 578 582 589 612 614 619 643 653 666 668 #> [41221] 679 683 687 705 736 744 755 762 765 767 771 773 784 788 801 816 822 832 #> [41239] 850 859 861 874 880 895 899 900 904 905   0  10  14  15  18  25  27  42 #> [41257]  47  52  73  78  82  93 110 112 132 138 143 146 149 152 154 170 195 196 #> [41275] 199 200 217 224 227 228 231 233 259 277 286 294 298 299 304 305 310 345 #> [41293] 346 348 356 380 395 399 418 434 435 455 461 463 464 477 478 480 490 501 #> [41311] 532 533 534 544 547 549 557 579 600 644 650 653 689 693 710 722 729 730 #> [41329] 737 739 740 749 751 784 789 801 822 839 844 861 862 886 888 890 895   0 #> [41347]   6  26  35  40  71  79  90 102 118 123 133 159 173 181 185 188 194 195 #> [41365] 199 206 212 214 217 230 231 235 252 273 290 298 304 335 343 349 364 376 #> [41383] 384 390 391 392 413 425 429 438 454 465 478 482 500 520 541 556 586 589 #> [41401] 606 617 634 647 665 692 698 723 724 728 746 768 772 778 816 820 839 850 #> [41419] 852 854 855 875 881 883 888 889 895 902   2  12  20  33  34  36  52  55 #> [41437]  60  61  97 115 117 127 131 134 136 157 162 164 165 189 203 213 216 218 #> [41455] 220 227 234 243 252 269 287 292 300 303 310 314 329 332 337 351 360 364 #> [41473] 389 407 411 416 417 422 442 444 452 455 461 469 470 473 481 496 502 506 #> [41491] 507 511 515 522 533 546 547 558 559 561 566 581 582 608 614 625 629 630 #> [41509] 644 655 662 665 672 681 692 713 717 733 736 747 760 761 765 780 791 792 #> [41527] 801 809 825 847 848 866 868 877 880 886 899 909 911   0   3   7  15  60 #> [41545]  69  76  81 117 123 130 131 135 150 156 207 215 224 225 238 240 284 311 #> [41563] 312 331 332 338 360 365 368 392 397 409 442 449 453 459 461 466 468 476 #> [41581] 488 496 502 546 553 561 577 588 592 616 635 647 653 667 670 674 687 694 #> [41599] 751 760 770 785 786 788 804 815 823 825 845 847 851 862 865 891 913 914 #> [41617]  23  56  58  69  87  96 111 118 129 142 143 150 163 167 206 212 215 227 #> [41635] 244 256 274 279 301 303 304 323 326 334 343 353 363 367 387 397 406 420 #> [41653] 424 425 431 443 449 452 468 479 494 499 501 502 507 517 535 537 538 552 #> [41671] 558 563 564 574 575 581 584 586 627 628 629 650 653 654 667 673 677 685 #> [41689] 704 706 712 717 727 736 739 747 753 760 765 767 769 807 812 824 844 860 #> [41707] 883 895 906 909  18  27  34  40  96 103 108 119 128 146 156 159 175 176 #> [41725] 187 202 207 215 223 237 244 247 249 259 269 308 318 319 347 353 365 384 #> [41743] 392 399 441 444 458 478 488 509 513 530 539 548 554 562 576 605 619 635 #> [41761] 641 668 678 679 682 704 710 714 718 733 750 754 774 783 786 791 798 799 #> [41779] 802 803 840 847 855 864 880 883 896 900 901 908 910   8  24  25  26  31 #> [41797]  33  34  42  52  55  74  82  84  96 116 131 138 139 147 152 159 165 178 #> [41815] 182 189 223 230 231 251 259 261 280 286 290 295 310 318 322 323 327 340 #> [41833] 349 353 373 389 417 436 452 459 471 484 485 491 504 516 526 542 548 552 #> [41851] 557 560 566 569 596 611 627 635 653 667 699 727 731 749 768 773 775 792 #> [41869] 798 806 808 826 832 837 844 856 862 888 919   1   5   8  13  15  22  31 #> [41887]  63  67  82  85  89  96 117 119 120 131 147 156 169 170 171 176 188 200 #> [41905] 214 218 222 238 246 258 308 317 337 340 342 349 351 352 353 364 368 386 #> [41923] 390 398 420 424 440 448 450 456 458 489 507 510 513 521 526 532 538 549 #> [41941] 571 577 591 612 615 630 635 642 650 653 657 685 705 707 716 728 730 732 #> [41959] 733 753 762 764 770 773 774 798 799 814 820 825 831 838 843 849 868 888 #> [41977] 893 900 903  16  25  31  32  42  51  63 108 113 120 152 156 158 161 170 #> [41995] 174 179 188 195 198 205 234 251 259 260 261 283 312 313 317 333 334 340 #> [42013] 351 365 367 369 371 372 382 396 399 405 410 430 437 448 449 457 474 485 #> [42031] 489 492 507 527 536 545 566 567 577 594 595 604 609 612 618 626 629 652 #> [42049] 666 669 694 696 698 700 704 715 737 744 755 764 773 796 799 805 846 847 #> [42067] 849 860 862 873 883 893 910 920   1   6  10  15  36  47  59  61  67  88 #> [42085] 110 114 135 136 143 146 161 165 171 184 186 201 212 220 222 225 233 238 #> [42103] 241 247 251 263 272 278 291 304 319 326 340 344 358 396 400 414 422 436 #> [42121] 440 442 469 471 482 505 517 538 580 588 591 593 599 608 615 619 681 684 #> [42139] 699 706 742 753 755 766 768 799 803 805 807 811 816 824 829 835 846 847 #> [42157] 855 859 865 867 875 878 879 882 887 898   4  20  31  35  42  46  47  52 #> [42175]  61  63  68 107 108 127 133 135 147 175 186 191 206 208 221 229 242 251 #> [42193] 261 268 270 277 280 281 288 292 299 313 314 319 337 345 350 356 358 373 #> [42211] 379 391 398 409 415 421 443 460 479 481 484 509 513 522 535 544 560 561 #> [42229] 591 610 613 624 639 647 654 655 656 661 679 691 692 715 724 752 768 787 #> [42247] 812 830 837 839 841 864 868 876 888 892 897 909  12  21  23  63  68  73 #> [42265]  91  96 114 115 120 121 124 127 162 178 188 203 206 207 212 213 215 218 #> [42283] 225 265 267 301 315 338 356 365 379 381 382 383 414 416 430 434 445 452 #> [42301] 464 480 483 522 526 533 550 569 575 576 580 594 604 619 625 632 643 648 #> [42319] 649 650 658 668 672 674 700 704 707 711 712 721 729 736 741 753 754 755 #> [42337] 763 775 788 797 800 801 806 819 823 832 833 836 837 854 857 885 888 918 #> [42355]  11  14  17  47  64  67  97 118 121 130 161 176 177 179 194 196 198 202 #> [42373] 219 221 242 251 276 277 278 281 288 292 304 323 341 345 346 347 348 351 #> [42391] 352 356 380 389 391 400 413 420 421 431 446 448 455 486 508 548 579 580 #> [42409] 595 613 614 615 626 642 648 696 706 724 731 751 754 764 767 778 779 787 #> [42427] 788 789 797 818 827 829 839 848 853 862 868 883 886 916   7  26  33  35 #> [42445]  37  40  50  89  90 100 120 128 138 150 158 160 163 177 226 227 230 239 #> [42463] 252 257 264 269 279 286 295 306 353 430 434 445 452 475 478 526 533 537 #> [42481] 560 564 588 593 598 636 642 652 657 672 674 677 686 687 691 705 728 734 #> [42499] 747 754 758 776 791 792 801 804 805 806 817 853 866 874 886 888 891 892 #> [42517] 895 902 915 926   0   1   2   4  20  27  37  43  46  60  78  79  97 120 #> [42535] 123 141 147 171 172 174 199 235 238 258 266 275 307 311 325 329 333 340 #> [42553] 344 355 363 368 374 379 380 382 415 418 455 500 542 547 552 562 570 571 #> [42571] 574 581 591 592 599 600 602 608 614 620 641 649 669 676 688 702 704 718 #> [42589] 726 735 741 759 790 795 796 797 805 815 819 821 826 833 834 835 858 903 #> [42607] 917   0   8  10  30  39  51  66  77  83  86  87  95  97 116 122 126 129 #> [42625] 144 146 149 166 167 178 188 238 255 257 258 270 273 296 308 314 321 325 #> [42643] 331 334 335 370 378 379 388 396 414 431 432 460 466 472 485 492 494 530 #> [42661] 538 545 571 579 589 600 601 621 628 629 633 636 644 647 649 659 661 684 #> [42679] 685 752 768 777 778 780 781 833 839 846 854 862 875 879 891 906 912 928 #> [42697]   7  33  43  70  79  94 108 118 168 171 179 182 185 187 196 198 202 235 #> [42715] 237 238 274 299 324 330 331 337 357 363 369 372 373 382 385 397 424 435 #> [42733] 449 453 464 468 489 497 507 517 519 534 552 576 581 588 609 621 627 635 #> [42751] 643 652 661 675 677 687 692 731 738 740 748 753 761 765 768 782 785 814 #> [42769] 817 821 828 831 850 880 885 892 921 926  15  17  18  20  46  86  92 104 #> [42787] 105 132 139 153 166 170 198 220 222 225 229 238 253 270 272 278 296 309 #> [42805] 314 327 335 337 339 344 392 394 403 415 416 418 428 431 436 437 448 455 #> [42823] 460 462 467 468 479 493 501 503 504 511 536 562 564 572 600 631 632 633 #> [42841] 634 638 643 662 673 686 688 710 715 719 720 732 749 752 762 777 785 797 #> [42859] 828 847 870 871 872 889 898 907 908 924   9  15  20  30  31  39  43  47 #> [42877]  50  58  59  75  79  84  96 102 106 109 112 124 127 142 144 148 179 183 #> [42895] 185 188 190 199 216 236 243 244 252 260 268 279 305 310 315 324 371 374 #> [42913] 383 391 394 397 406 410 421 428 437 440 456 464 466 478 512 521 528 542 #> [42931] 546 549 554 562 574 577 585 588 592 600 609 610 633 648 650 658 667 671 #> [42949] 680 704 705 714 715 722 732 741 755 815 827 829 882 892 904 909 915 917 #> [42967] 924   3   7  12  14  55  57 107 110 111 127 154 161 165 173 184 188 197 #> [42985] 203 215 249 251 274 283 334 338 346 348 367 370 384 409 430 446 447 454 #> [43003] 457 460 473 486 496 524 527 529 530 538 544 584 590 608 611 617 625 627 #> [43021] 647 651 656 658 688 694 705 709 730 734 747 770 774 788 803 806 819 845 #> [43039] 856 877 881 882 887 892 920 921 922   0  16  25  30  43  48  54  57  73 #> [43057]  74  81  92  93  94 108 129 131 139 171 176 184 201 210 213 214 218 222 #> [43075] 232 247 270 282 295 324 331 335 346 354 370 384 403 410 416 419 430 434 #> [43093] 443 452 456 479 487 490 505 506 507 509 518 520 524 536 545 555 562 565 #> [43111] 566 576 620 623 633 638 644 646 649 655 658 663 666 673 698 703 707 732 #> [43129] 735 742 756 777 803 809 810 821 822 828 829 838 840 854 859 863 872 888 #> [43147] 895 911 917 922   1   4  33  36  48  51  62  65  73 105 108 125 135 147 #> [43165] 148 150 151 173 177 195 199 205 208 210 213 215 234 241 246 260 261 268 #> [43183] 272 309 310 311 319 320 323 330 337 357 371 397 403 404 408 410 414 428 #> [43201] 429 444 448 482 485 492 506 519 526 535 550 553 561 569 632 639 671 675 #> [43219] 677 678 680 691 694 709 712 713 721 740 751 765 772 778 786 807 815 817 #> [43237] 831 846 849 854 876 900 907 913 931   8  13  19  29  40  43  51  55  60 #> [43255]  64  65 100 104 133 138 144 149 202 216 231 242 255 257 259 270 272 277 #> [43273] 284 310 311 323 338 355 357 358 363 391 404 418 420 432 433 437 446 468 #> [43291] 517 540 551 578 585 589 600 601 603 613 627 648 658 686 713 737 764 778 #> [43309] 779 786 799 804 814 838 860 861 864 876 884 886 892 899 908 910 920 933 #> [43327]   2  10  16  22  41  69  73 104 107 119 142 151 156 169 193 195 204 217 #> [43345] 218 272 277 278 294 320 326 330 338 348 358 387 393 400 413 453 454 461 #> [43363] 466 477 483 489 513 524 528 551 552 553 565 569 588 605 607 619 624 632 #> [43381] 635 636 650 656 664 668 677 690 724 727 731 733 746 755 762 775 777 785 #> [43399] 786 792 814 822 823 831 849 853 854 857 863 864 867 880 887 929 930  12 #> [43417]  14  22  31  58  63  74  77  79  82  89  99 113 121 129 134 144 151 156 #> [43435] 159 168 201 206 212 213 218 220 221 225 227 239 243 254 269 272 280 296 #> [43453] 310 311 334 338 346 348 363 375 378 385 390 406 427 428 432 474 476 481 #> [43471] 499 511 521 535 559 568 584 595 599 611 617 619 636 651 657 673 693 710 #> [43489] 726 730 736 767 791 806 815 819 823 827 846 848 863 890 916  18  37  38 #> [43507]  48  54  75  99 107 132 135 156 167 172 177 185 188 200 213 220 241 252 #> [43525] 259 280 287 305 313 321 330 331 333 374 381 387 391 399 420 431 435 439 #> [43543] 440 455 483 501 509 511 519 520 534 554 556 560 574 578 596 608 611 613 #> [43561] 653 656 677 685 707 708 714 726 732 740 745 762 763 778 779 791 801 817 #> [43579] 819 827 844 871 880 887 888 893 905 906 907 909 910 919 930 934 937   0 #> [43597]  21  36  39  49  50  57  63  69  79 111 120 127 129 146 159 171 175 178 #> [43615] 181 185 206 211 242 243 246 258 259 262 266 279 285 300 306 309 320 338 #> [43633] 374 383 387 389 427 457 461 473 480 483 490 496 501 503 508 516 526 559 #> [43651] 575 581 603 621 625 647 659 664 665 678 679 696 708 719 724 726 745 777 #> [43669] 779 780 793 794 801 807 808 819 822 841 846 859 860 865 876 880 891 924 #> [43687] 926 927 938   2  12  25  45  66  76  77  79 111 121 139 140 161 163 179 #> [43705] 200 209 219 239 255 261 269 275 285 287 296 301 332 336 337 338 342 358 #> [43723] 361 370 371 373 381 409 414 417 444 453 462 464 492 504 520 523 531 541 #> [43741] 548 555 563 568 602 605 617 619 632 644 667 674 679 689 694 697 706 712 #> [43759] 724 737 752 758 762 792 798 804 808 811 827 841 858 870 871 872 873 879 #> [43777] 880 895 921 939  11  13  17  37  48  56  58  85  97 118 137 142 149 150 #> [43795] 161 181 189 204 210 220 224 232 253 259 261 262 266 269 270 297 317 320 #> [43813] 339 351 354 373 376 384 385 388 415 421 434 444 448 453 470 482 490 499 #> [43831] 529 536 538 550 552 555 558 560 577 590 591 596 633 642 644 656 660 661 #> [43849] 667 719 722 728 736 741 744 756 776 803 804 819 820 831 840 867 883 886 #> [43867] 902 918 928 929 930 931 938   8   9  22  32  49  55  70 100 109 116 118 #> [43885] 127 155 161 171 180 197 204 214 219 227 229 237 246 270 284 295 297 320 #> [43903] 327 335 343 346 360 375 378 392 400 402 410 415 417 422 437 439 440 445 #> [43921] 453 468 472 477 493 503 511 524 536 541 546 570 575 589 604 617 620 625 #> [43939] 631 641 642 664 696 697 715 729 731 734 740 743 745 748 763 764 774 778 #> [43957] 779 787 788 805 824 826 831 838 849 851 852 856 862 881 885 907 938   0 #> [43975]  12  15  36  37  65  76  78  95 130 133 134 139 145 147 179 182 189 196 #> [43993] 198 204 212 219 224 225 226 231 232 249 251 261 280 286 287 292 297 308 #> [44011] 322 324 338 340 345 348 353 360 381 391 394 399 421 423 429 444 460 481 #> [44029] 489 497 504 506 531 569 618 628 644 649 653 664 688 711 712 713 715 732 #> [44047] 750 763 782 791 804 816 820 828 829 835 852 868 873 875 876 904 909 911 #> [44065] 916 936   4  57  66  67  83 128 132 177 184 196 206 222 227 230 231 233 #> [44083] 237 248 252 258 266 268 270 285 308 319 323 334 345 354 369 371 390 396 #> [44101] 407 408 421 441 445 450 476 485 488 500 506 527 533 536 554 566 568 584 #> [44119] 592 595 621 627 670 680 681 683 689 706 708 711 717 726 728 738 744 748 #> [44137] 755 764 765 766 791 795 803 806 812 818 820 831 833 838 843 856 862 865 #> [44155] 875 876 894 899 912 913 915 917 920 926 938   9  12  14  20  26  30  37 #> [44173]  39  57  58  61  64  72  76  98 100 109 119 133 136 137 138 148 175 176 #> [44191] 178 182 212 216 251 254 262 264 269 292 300 302 315 324 325 336 340 359 #> [44209] 373 392 412 422 424 432 433 452 457 459 473 474 495 501 508 509 516 533 #> [44227] 535 540 550 569 613 640 651 655 671 684 698 724 727 729 739 747 768 775 #> [44245] 777 789 790 807 816 821 828 868 870 885 906 909 913 923 929 934  10  19 #> [44263]  23  27  29  51  52  58  65  76  83  99 108 121 132 139 149 155 158 166 #> [44281] 180 184 185 189 198 200 212 221 228 244 247 262 267 273 297 306 314 318 #> [44299] 319 335 350 356 362 376 380 401 402 406 434 435 442 467 473 478 494 500 #> [44317] 507 517 521 526 528 529 530 543 551 561 580 598 606 611 619 623 627 631 #> [44335] 645 650 654 669 679 681 682 701 707 717 721 727 742 754 757 763 775 785 #> [44353] 817 828 840 845 850 852 853 855 856 874 877 883 886 889 904 907 919 930 #> [44371] 941   4   9  30  45  49  54  56  63  89  94 110 121 123 162 169 195 199 #> [44389] 207 217 247 257 258 294 297 318 329 333 349 359 370 380 392 394 424 433 #> [44407] 437 442 450 458 473 487 492 493 496 509 520 559 563 571 578 581 588 589 #> [44425] 608 622 625 627 638 644 648 653 662 666 695 696 697 719 724 732 751 762 #> [44443] 765 772 781 789 805 806 809 825 872 875 876 877 881 893 894 911 915 923 #> [44461] 926 933 935 945   1  15  50  56  58  60  62  66  67  70  82 113 117 131 #> [44479] 137 142 151 168 175 182 188 193 202 217 249 259 275 278 282 293 299 314 #> [44497] 315 328 330 335 336 352 355 378 384 389 397 400 404 408 420 445 449 469 #> [44515] 471 474 478 483 494 532 533 542 547 575 585 609 613 626 637 652 655 660 #> [44533] 662 666 689 695 702 704 712 714 743 779 799 802 815 833 840 841 849 857 #> [44551] 860 864 870 875 887 889 900 902 918 935   7  33  40  42  67  68  73  78 #> [44569]  79  89 108 121 132 138 145 146 150 153 154 166 167 174 175 180 204 225 #> [44587] 232 233 241 254 258 264 268 281 308 320 322 350 351 365 421 436 504 508 #> [44605] 543 544 546 565 574 591 592 593 611 612 620 622 636 637 651 654 669 675 #> [44623] 683 690 693 694 728 735 740 749 753 758 762 767 783 793 852 853 858 892 #> [44641] 895 900 943   4  12  19  20  32  35  36  37  38  43  48  73  74 100 107 #> [44659] 143 161 165 168 169 173 177 201 207 209 224 242 244 251 264 266 325 334 #> [44677] 339 343 385 394 409 412 419 426 427 432 453 475 492 525 541 543 561 563 #> [44695] 572 589 597 598 599 605 640 643 652 661 662 679 680 695 711 712 716 718 #> [44713] 721 725 728 733 735 745 755 756 761 764 766 782 792 794 818 823 825 842 #> [44731] 845 859 861 866 872 873 876 879 889 891 906 926 929 932  13  30  39  50 #> [44749]  55  63  66  71 102 118 140 163 171 174 177 208 210 217 218 242 246 262 #> [44767] 263 266 275 277 287 292 295 306 320 323 340 343 348 359 363 393 404 433 #> [44785] 442 443 445 454 472 476 490 492 504 511 517 522 526 527 539 541 547 551 #> [44803] 568 573 576 590 603 622 634 649 663 669 685 693 696 702 705 716 721 723 #> [44821] 731 733 778 782 786 787 795 830 831 844 846 855 876 883 887 888 893 901 #> [44839] 905 938 943  12  18  19  24  29  36  47  53  55  68  69  70  79  94  96 #> [44857] 110 128 146 150 155 167 168 185 188 233 272 276 278 283 288 340 349 351 #> [44875] 354 356 379 409 414 416 424 433 435 442 453 454 467 476 480 482 495 497 #> [44893] 499 512 530 537 540 547 555 557 558 562 563 574 589 594 607 626 653 665 #> [44911] 678 684 688 689 690 696 697 699 700 721 729 734 752 761 782 784 793 800 #> [44929] 809 816 829 844 861 862 867 873 886 900 905 906 918 923 942 949 951   4 #> [44947]   8  25  34  35  50  51  63  94 101 102 107 110 125 126 130 134 143 153 #> [44965] 155 163 172 176 188 210 225 242 262 281 290 297 299 305 307 314 316 334 #> [44983] 356 374 386 389 416 420 429 432 433 434 446 455 457 471 485 510 517 522 #> [45001] 540 555 565 589 590 599 600 625 630 636 638 643 649 665 685 714 726 731 #> [45019] 734 752 771 774 782 798 801 815 822 832 839 848 850 882 883 885 890 895 #> [45037] 921 932 937 940 943  15  32  33  39  65 117 138 152 153 155 176 178 179 #> [45055] 185 222 227 228 240 245 265 274 280 281 282 303 318 336 343 360 387 422 #> [45073] 428 438 454 455 457 458 463 467 475 501 520 539 548 563 570 572 575 579 #> [45091] 591 592 594 610 642 656 671 683 687 688 692 704 705 706 718 740 743 749 #> [45109] 759 777 779 787 807 818 824 835 836 840 849 850 869 876 888 890 898 913 #> [45127] 917 921 936 940 945 946  21  31  40  47  53  93 115 127 178 183 194 221 #> [45145] 240 252 256 272 283 290 295 300 305 307 319 336 361 368 390 392 398 408 #> [45163] 413 425 432 433 434 435 436 444 463 469 475 478 499 522 523 527 532 543 #> [45181] 579 580 590 591 596 601 606 610 644 649 670 674 695 696 702 751 794 799 #> [45199] 817 824 834 845 854 863 874 878 880 894 901 913 915 919 936 943   1   2 #> [45217]   9  41  48  54  61  67  82  86  87 104 118 137 141 162 173 175 182 184 #> [45235] 215 220 221 223 235 243 253 257 260 263 269 280 303 306 315 318 345 368 #> [45253] 389 401 404 410 414 418 420 429 443 447 451 458 472 478 484 486 487 494 #> [45271] 502 509 518 521 522 525 558 565 567 572 577 578 601 614 623 626 640 643 #> [45289] 656 657 662 681 686 736 753 754 757 771 773 784 787 788 802 817 826 851 #> [45307] 852 855 860 874 875 877 882 893 896 910 921 928 947   0  15  43  49  60 #> [45325]  67  74  80  90 140 167 196 200 208 220 221 244 294 297 301 317 328 368 #> [45343] 375 392 397 402 405 415 420 441 446 459 463 469 473 476 485 501 509 513 #> [45361] 525 541 547 549 558 569 581 597 603 604 608 613 623 642 643 646 648 650 #> [45379] 667 669 673 710 712 713 719 731 785 786 797 799 839 866 867 870 874 887 #> [45397] 893 894 907 909 911 920 926 929 942 950 953   0   6  10  16  23  38  41 #> [45415]  44  63  80 103 115 132 134 148 172 175 181 209 213 221 222 243 244 259 #> [45433] 263 329 335 345 351 352 396 417 433 437 438 443 457 459 460 469 484 491 #> [45451] 493 503 507 509 517 530 535 552 569 587 590 606 610 616 627 659 693 701 #> [45469] 722 727 737 739 745 752 773 779 787 797 807 815 827 832 839 846 860 868 #> [45487] 871 874 885 889 909 924 929 930 934 939 941 949 953 954   8  18  25  44 #> [45505]  49  65  81  91 148 154 179 191 207 208 222 223 228 236 259 266 268 289 #> [45523] 312 316 337 340 360 365 382 384 390 413 423 427 439 450 456 460 477 485 #> [45541] 504 516 524 527 528 537 561 566 575 586 606 616 620 622 628 638 650 660 #> [45559] 664 677 684 687 690 696 698 702 716 718 720 723 732 758 777 778 785 788 #> [45577] 810 816 834 843 848 859 863 882 893 905 909 916 926 928 951 954 956   7 #> [45595]  15  22  38  48  53  68  73  74  91 120 123 128 129 132 163 191 193 198 #> [45613] 203 225 230 231 244 256 267 277 282 295 299 304 306 324 370 392 393 399 #> [45631] 409 417 421 436 440 475 476 489 500 503 530 533 559 562 564 580 593 604 #> [45649] 608 609 625 633 644 664 677 682 724 725 731 735 751 762 763 766 785 791 #> [45667] 792 805 808 810 815 833 856 875 888 895 896 906 908 952 954   0  35  40 #> [45685]  43  53  62  86  99 118 122 126 137 138 147 165 180 181 189 201 203 226 #> [45703] 234 267 284 288 289 293 300 304 307 308 316 330 331 339 344 389 403 410 #> [45721] 433 437 461 490 513 519 522 531 548 565 578 602 614 616 630 634 672 694 #> [45739] 713 723 724 737 741 742 745 748 780 794 812 815 825 831 837 850 854 870 #> [45757] 875 880 892 894 953 958   7  10  13  21  44  45  48  49  73  77 100 132 #> [45775] 154 157 163 164 168 178 184 189 190 197 212 227 232 235 236 245 249 254 #> [45793] 259 287 290 304 310 312 317 326 343 357 368 371 382 386 387 399 438 439 #> [45811] 446 449 453 455 456 461 473 475 489 496 529 537 540 581 592 597 601 603 #> [45829] 612 625 631 634 652 666 669 672 684 685 705 741 750 755 758 760 776 787 #> [45847] 828 852 864 867 872 879 908 909 915 936 939 951 953 955 956 962   2   3 #> [45865]   4  24  58  63  75  76  91  96  98 101 118 121 125 135 143 148 153 173 #> [45883] 175 189 190 231 243 249 250 257 269 277 278 316 340 345 349 353 361 365 #> [45901] 373 392 404 412 417 437 455 467 469 474 478 479 487 491 498 523 525 559 #> [45919] 560 563 564 582 583 610 640 641 673 678 685 687 699 700 702 704 716 750 #> [45937] 753 759 761 765 785 790 804 824 834 848 856 887 915 923 924 931 934 944 #> [45955] 948 950 962   1   3  10  18  21  38  41  52  79  82  83  89  91  99 117 #> [45973] 127 131 157 166 170 181 209 211 220 226 234 291 295 299 320 346 373 380 #> [45991] 381 384 388 393 396 415 416 431 438 439 442 458 464 466 472 477 481 498 #> [46009] 501 518 521 523 536 559 573 582 585 594 607 619 625 634 635 658 661 662 #> [46027] 665 685 687 689 697 708 713 720 721 733 741 746 773 778 779 780 804 859 #> [46045] 866 877 887 905 921 926 937 942 944  30  39  42  49  66  79  82  94 105 #> [46063] 106 111 113 122 139 141 143 150 154 164 167 182 185 206 216 232 256 258 #> [46081] 264 284 285 305 307 312 316 322 333 345 351 362 363 389 403 447 460 475 #> [46099] 505 516 518 532 534 543 553 556 576 600 602 605 614 619 624 630 654 682 #> [46117] 686 698 702 746 748 751 759 782 784 792 802 806 808 821 846 850 856 858 #> [46135] 871 899 907 945 948 954   6  46  49  76  90 114 116 148 170 192 198 202 #> [46153] 214 217 222 229 238 248 261 266 272 291 310 337 341 372 381 388 391 408 #> [46171] 426 442 489 503 518 529 530 556 580 585 619 633 634 646 656 672 674 697 #> [46189] 701 703 715 716 722 733 741 743 746 773 778 781 784 794 804 809 819 824 #> [46207] 826 829 833 841 852 859 882 886 897 913 916 949 959   3   4   5   7  10 #> [46225]  23  36  55  76  79  84  94  96 128 137 163 166 169 175 197 198 204 207 #> [46243] 226 229 250 265 267 284 290 292 300 318 319 329 332 333 373 381 392 408 #> [46261] 414 417 420 439 446 454 468 478 482 501 516 534 591 600 609 611 612 618 #> [46279] 632 645 647 658 674 677 689 698 699 706 707 745 750 765 766 783 788 790 #> [46297] 802 817 822 823 832 833 838 844 855 860 861 862 865 882 897 899 913 928 #> [46315] 931 936 937 960   6  36  50  64  72 100 113 126 134 143 144 166 168 181 #> [46333] 184 210 212 224 236 239 241 247 268 275 283 284 289 298 299 302 314 323 #> [46351] 324 341 343 348 355 356 365 370 374 375 378 397 398 408 465 501 526 529 #> [46369] 544 552 558 569 581 596 621 633 643 647 679 691 696 698 702 711 719 727 #> [46387] 731 752 769 778 784 812 818 819 823 837 838 842 852 862 870 875 877 882 #> [46405] 890 913 918 922 927 930 942 956   2  20  26  44  46  52  59  74  79  98 #> [46423] 112 113 119 123 149 163 164 188 206 215 222 236 240 251 277 298 311 312 #> [46441] 364 380 390 400 411 416 420 427 440 446 452 456 457 468 474 479 480 496 #> [46459] 498 517 520 522 543 547 550 555 580 593 601 606 620 622 628 632 635 640 #> [46477] 653 671 672 700 707 712 721 731 737 748 760 766 768 771 772 777 782 798 #> [46495] 808 835 836 851 852 861 862 863 885 896 898 905 910 913 914 916 925 937 #> [46513] 939 961   1   2  47  53  68  71  73  85  86  94  95 114 127 143 152 158 #> [46531] 163 183 186 204 239 260 263 267 269 292 301 319 327 339 341 343 349 350 #> [46549] 354 375 419 425 429 442 459 470 490 501 505 508 512 528 560 562 583 600 #> [46567] 602 614 625 628 639 644 658 679 694 703 709 717 723 728 733 741 748 758 #> [46585] 779 786 818 829 859 869 884 914 918 923 925 955 966   0  18  25  27  28 #> [46603]  33  40  48  60  71  73  76  78  79  82  86  95 107 117 119 126 130 132 #> [46621] 148 173 178 182 185 186 195 219 232 244 261 263 310 316 318 325 339 346 #> [46639] 355 361 363 375 384 397 414 424 426 434 437 443 445 450 457 463 466 470 #> [46657] 480 495 497 499 500 538 552 571 572 586 590 610 620 621 624 626 635 675 #> [46675] 698 700 725 735 744 754 770 781 784 802 808 823 829 834 840 842 845 846 #> [46693] 859 861 883 884 897 901 905 907 922 924 935 941 943 944 967   2   4   9 #> [46711]  35  60  62  63  69  76  96  99 100 101 107 130 132 162 174 185 201 203 #> [46729] 209 214 240 255 263 264 266 268 272 274 276 277 284 293 296 307 320 361 #> [46747] 372 373 389 393 394 439 447 473 497 505 527 528 532 537 539 556 561 573 #> [46765] 579 592 607 608 610 619 630 640 660 666 699 700 707 708 712 736 737 749 #> [46783] 750 759 760 762 778 780 788 789 805 807 808 821 826 830 845 867 881 891 #> [46801] 906 940 959   5  13  18  60  66  71  75  84  88  95 104 116 127 137 150 #> [46819] 174 186 192 214 224 225 230 233 241 258 265 282 296 300 308 317 318 330 #> [46837] 336 340 353 370 382 384 402 404 407 418 442 445 463 484 503 512 521 534 #> [46855] 538 539 560 562 570 577 582 587 592 634 640 645 649 689 691 711 722 726 #> [46873] 758 771 776 785 786 791 814 824 830 841 848 852 857 860 861 885 891 911 #> [46891] 926 927 946 951 955 960 961 963 965 966   7  10  36  63  64  88  90  96 #> [46909]  97 112 126 129 131 136 153 154 191 192 197 209 211 216 228 239 268 283 #> [46927] 288 292 295 296 298 302 328 350 351 352 367 373 377 385 396 428 434 438 #> [46945] 439 464 466 472 501 503 508 513 519 522 532 536 553 563 572 577 578 582 #> [46963] 593 604 607 615 622 623 628 639 641 675 695 697 700 710 713 733 734 741 #> [46981] 752 754 782 792 806 829 852 857 873 892 895 906 916 922 928 941 967  32 #> [46999]  40  42  59  60  62  71  75  97  99 114 129 130 137 149 177 194 215 236 #> [47017] 258 265 267 271 273 274 275 284 293 329 336 347 390 396 397 400 405 417 #> [47035] 418 427 457 476 481 482 491 503 521 528 552 557 563 569 581 583 601 608 #> [47053] 613 644 664 679 681 682 685 696 698 700 708 733 740 769 774 779 781 793 #> [47071] 810 823 824 826 829 844 846 848 861 874 880 895 936 950 966 968   3   4 #> [47089]  25  27  47  65  69  76  95  96  98 100 103 107 113 120 123 125 129 130 #> [47107] 133 140 141 177 202 216 218 219 258 273 276 290 301 320 335 339 340 356 #> [47125] 366 367 372 377 385 396 476 482 498 514 524 529 534 538 544 545 546 549 #> [47143] 551 556 572 576 578 585 586 595 599 600 606 634 637 638 639 651 656 678 #> [47161] 686 690 708 712 716 733 736 744 761 762 770 773 775 785 806 813 826 844 #> [47179] 845 852 854 872 890 891 897 898 907 922 927 933 934 953 957 967   4  10 #> [47197]  15  34  39  58  69  73  80  95  98 110 111 117 122 123 128 130 142 144 #> [47215] 148 156 167 172 208 231 241 248 250 268 269 287 288 309 314 319 338 352 #> [47233] 353 354 364 366 368 377 381 387 402 410 416 434 450 465 479 485 489 493 #> [47251] 500 502 504 511 513 526 542 590 593 605 652 655 673 677 681 682 689 692 #> [47269] 693 696 708 715 724 726 753 758 759 770 772 773 805 807 816 820 831 838 #> [47287] 863 866 874 882 887 898 908 913 915 922 943 950 962   0  19  20  29  45 #> [47305]  48  51  53  58  74  82 103 130 137 138 142 155 162 169 170 180 192 193 #> [47323] 207 217 224 227 228 231 244 254 261 269 308 323 324 342 347 349 392 407 #> [47341] 408 415 418 420 435 452 458 471 497 500 502 509 534 539 544 547 553 565 #> [47359] 570 606 613 615 622 653 682 687 688 694 713 716 717 718 725 728 732 743 #> [47377] 768 774 796 809 815 816 826 829 831 834 838 849 863 869 873 884 892 896 #> [47395] 913 914 925 944 945 950 957 962 969 976   2   7  12  21  22  25  32  51 #> [47413]  84  93 100 102 115 116 127 129 142 145 150 156 171 178 180 183 186 197 #> [47431] 212 214 236 248 250 263 272 274 281 286 291 297 310 321 330 334 361 368 #> [47449] 369 381 396 412 428 443 457 466 479 489 499 502 508 512 524 527 547 574 #> [47467] 579 591 593 602 603 607 615 622 656 658 682 689 702 713 715 719 724 734 #> [47485] 752 754 756 759 766 774 798 821 829 839 849 851 857 870 875 891 897 902 #> [47503] 906 915 927 946 949 951 965 967 972 979   6  16  37  64  71  72  75  76 #> [47521] 133 155 160 168 170 184 187 194 202 206 217 218 219 225 228 231 234 239 #> [47539] 240 245 248 255 265 267 282 286 305 306 331 336 338 343 354 359 363 379 #> [47557] 384 408 414 434 436 449 461 462 465 467 477 480 489 493 545 550 559 567 #> [47575] 573 575 612 615 618 619 622 626 647 649 687 691 710 716 719 724 736 737 #> [47593] 745 760 793 797 808 809 815 830 834 846 854 861 877 885 887 899 904 912 #> [47611] 934 938 962 965 966 974   0   4  10  37  45  46  62  67  74  75  95  96 #> [47629]  97 100 103 110 134 147 154 165 171 180 188 190 197 202 220 237 245 251 #> [47647] 262 269 273 285 298 311 323 345 369 372 374 378 379 386 393 401 412 446 #> [47665] 449 451 454 468 483 491 504 518 550 565 574 578 593 601 615 631 655 662 #> [47683] 665 671 675 701 715 728 734 742 748 749 759 761 771 774 796 800 807 814 #> [47701] 818 829 840 864 867 869 872 912 913 918 931 936 939 943 961 966 972   4 #> [47719]  11  20  31  37  38  40  41  42  52  53  62  63  69  81  96  99 103 109 #> [47737] 112 124 135 148 155 164 165 181 198 202 209 212 220 222 225 228 232 261 #> [47755] 277 282 292 302 306 323 328 336 337 344 348 369 388 391 395 399 409 419 #> [47773] 422 427 433 448 452 458 459 467 479 481 482 489 493 498 504 549 575 585 #> [47791] 613 620 622 651 658 665 680 681 687 695 696 697 704 719 720 723 726 733 #> [47809] 736 765 778 782 803 812 831 836 846 866 867 877 895 928 947 964 965 969 #> [47827] 971 981  15  21  22  37  56  59  75  81  94 104 107 116 133 134 137 150 #> [47845] 152 155 181 183 198 239 241 252 253 254 257 260 274 281 284 298 308 316 #> [47863] 322 347 349 378 379 386 391 405 408 416 427 433 447 461 478 482 486 493 #> [47881] 511 536 539 541 543 544 552 558 587 602 620 630 644 647 663 667 678 700 #> [47899] 701 717 720 721 735 736 743 749 758 775 778 797 831 838 861 869 877 884 #> [47917] 889 893 894 914 922 933 954 978   5  20  23  27  41  42  48  54  62  69 #> [47935]  77 112 114 118 126 143 147 152 165 179 188 191 192 201 205 223 229 238 #> [47953] 241 243 244 249 253 261 287 302 308 309 320 323 327 329 341 344 365 371 #> [47971] 383 411 415 422 430 436 444 505 515 528 543 548 551 559 572 584 600 603 #> [47989] 607 616 628 646 652 659 676 680 684 695 700 703 714 717 729 731 745 750 #> [48007] 759 767 773 786 790 793 798 820 829 840 843 857 886 904 911 930 937 950 #> [48025] 958 963 968 972 974 981  12  24  33  34  36  39  41  62  69 102 115 119 #> [48043] 132 142 165 195 200 202 210 255 270 282 305 307 313 321 325 326 346 373 #> [48061] 395 401 461 507 524 526 532 545 551 553 563 566 569 571 575 580 583 601 #> [48079] 620 633 638 650 664 666 693 698 712 730 736 738 740 742 745 752 773 804 #> [48097] 820 835 839 849 851 870 897 903 908 926 947 965   7  14  16  24  28  42 #> [48115]  59  60  61  65  68  73  79  95  96 107 113 117 120 123 125 126 140 160 #> [48133] 161 162 169 177 187 188 195 202 207 221 234 247 262 266 284 292 295 300 #> [48151] 314 326 352 356 370 390 400 417 420 424 434 446 459 463 506 535 538 553 #> [48169] 556 564 582 583 606 607 608 609 614 620 632 639 651 653 728 751 770 778 #> [48187] 794 819 822 823 825 827 839 841 845 852 862 864 866 874 906 910 924 928 #> [48205] 929 935 955 961  26  48  50  52  57  78  79  91  92  99 108 116 130 136 #> [48223] 148 155 163 189 199 215 227 231 235 241 267 282 288 295 298 301 317 320 #> [48241] 322 324 326 328 337 346 354 361 383 404 407 413 425 450 457 461 464 498 #> [48259] 528 530 540 549 552 554 570 583 592 601 604 605 613 620 630 635 639 654 #> [48277] 667 673 690 708 734 766 777 780 793 834 838 845 847 854 862 863 873 874 #> [48295] 879 884 920 950 952 962 975 978 980   5  10  27  62  76  77  91  99 100 #> [48313] 103 121 123 126 130 151 179 186 193 194 216 231 252 253 255 257 258 266 #> [48331] 269 271 290 306 327 332 345 346 353 374 386 390 396 403 417 419 440 445 #> [48349] 455 460 463 469 485 488 491 508 525 560 581 583 600 612 618 624 630 639 #> [48367] 643 645 662 678 701 708 710 715 745 746 752 753 758 770 771 775 779 791 #> [48385] 792 797 798 803 812 813 819 845 852 877 878 883 885 896 900 927 964 969 #> [48403] 973 988  10  11  23  28  30  35  36  41  43  44  46  49  74  79  85  91 #> [48421] 108 115 120 142 160 161 163 174 184 240 255 290 292 301 315 320 323 324 #> [48439] 339 341 344 351 352 356 370 376 387 406 440 446 451 481 502 514 515 537 #> [48457] 540 547 555 594 598 603 616 643 645 653 661 667 676 678 679 723 752 763 #> [48475] 770 776 786 800 802 821 867 882 893 898 909 922 936 938 953 956 966 977 #> [48493] 988   0   2  26  44  47  93  96 109 125 131 138 148 154 158 165 175 178 #> [48511] 223 233 237 246 253 279 281 293 301 311 325 327 352 357 359 377 378 382 #> [48529] 383 404 405 412 420 425 463 465 470 478 484 488 494 495 504 507 539 548 #> [48547] 571 572 578 579 582 583 585 602 603 605 606 611 614 624 626 627 628 632 #> [48565] 634 638 649 651 666 669 677 684 685 686 691 697 704 705 724 727 736 741 #> [48583] 744 747 749 773 774 780 782 788 810 813 819 830 847 852 854 859 880 883 #> [48601] 888 895 901 906 907 919 929 934 936 958 961 962 968 969 984  11  16  45 #> [48619]  50  70  77  78  83  88  91 111 126 133 135 139 148 152 177 178 188 204 #> [48637] 249 258 267 277 282 288 292 293 297 298 300 302 304 306 311 315 316 318 #> [48655] 339 341 353 380 383 411 424 425 444 458 474 489 491 504 515 516 525 612 #> [48673] 613 616 626 632 636 647 654 707 734 738 741 745 750 754 767 770 776 791 #> [48691] 801 815 820 831 833 846 856 872 877 883 903 908 913 924 935 937 949 974 #> [48709]  15  16  44  47  54  67  73  74  79  85  87 101 112 115 117 118 119 122 #> [48727] 126 130 163 167 198 201 214 215 226 228 233 242 256 266 277 279 289 298 #> [48745] 310 324 330 338 396 404 422 429 443 472 487 489 495 496 519 532 537 548 #> [48763] 555 563 597 612 615 625 636 643 645 649 663 667 673 689 692 695 703 708 #> [48781] 719 728 745 747 757 771 778 783 784 794 801 805 810 832 836 840 843 851 #> [48799] 868 874 875 877 879 885 889 897 902 936 946 950 951 956 971 978 988   3 #> [48817]  11  12  28  37  44  73  79  83  89  95 125 127 131 135 142 151 153 171 #> [48835] 186 187 202 206 211 240 242 246 254 262 267 273 296 308 313 314 318 322 #> [48853] 333 341 347 362 375 379 386 395 406 408 412 429 431 439 455 492 493 497 #> [48871] 511 518 522 534 541 556 577 583 593 603 607 620 621 622 624 627 634 637 #> [48889] 655 666 673 677 681 686 708 710 718 719 725 726 734 762 769 777 778 788 #> [48907] 792 794 801 810 824 830 833 835 837 839 843 848 875 886 887 904 908 914 #> [48925] 915 917 935 940 941 949 960 968 970 972 985 988 992   1   2  10  13  18 #> [48943]  23  24  28  35  40  62  66  72  82  84 102 103 106 110 129 140 141 143 #> [48961] 145 153 224 255 271 279 289 299 310 329 336 345 348 371 381 432 446 450 #> [48979] 457 465 474 479 484 485 489 492 495 496 514 516 522 528 539 556 563 567 #> [48997] 583 590 593 600 608 609 611 638 652 653 670 672 692 705 737 749 755 775 #> [49015] 790 805 821 823 827 836 841 854 858 867 894 916 921 936 945 950 955 963 #> [49033] 968 969 973 986   4  10  25  54  71  81  83  89 118 120 132 133 138 140 #> [49051] 154 172 189 202 226 229 236 252 260 274 278 287 317 354 355 374 377 392 #> [49069] 393 408 411 419 422 423 425 453 456 459 465 482 490 492 500 503 514 528 #> [49087] 529 533 552 562 566 600 605 625 634 645 648 649 654 661 671 681 682 685 #> [49105] 689 696 701 706 714 722 727 733 751 760 782 807 814 828 829 831 844 849 #> [49123] 860 868 871 876 896 899 903 918 925 930 936 959 965 966 968 970 971 975 #> [49141] 978 990  15  17  31  42  53  62  63  71  84  87  91  95  96 117 118 120 #> [49159] 128 137 138 145 161 163 195 198 205 211 214 220 221 230 231 245 253 277 #> [49177] 295 296 326 335 344 349 352 353 365 374 378 392 398 404 429 466 471 473 #> [49195] 477 488 489 493 514 520 528 535 548 564 566 568 575 582 596 611 668 681 #> [49213] 682 685 704 706 716 719 729 736 746 773 778 804 805 812 854 855 874 876 #> [49231] 882 885 903 910 931 933 940 946 981 983  14  20  22  29  35  49  66  98 #> [49249] 109 127 156 159 165 167 182 188 206 215 229 245 252 256 258 259 262 284 #> [49267] 289 297 302 314 343 374 401 405 410 415 444 455 470 492 494 495 498 511 #> [49285] 514 517 519 521 526 542 558 562 567 571 592 593 602 611 622 624 628 641 #> [49303] 646 663 670 699 700 704 714 716 718 721 722 743 754 765 780 788 791 796 #> [49321] 801 816 818 824 842 863 866 884 891 892 896 898 901 907 920 929 955 962 #> [49339] 964 965 984 994  15  17  18  31  51  56  71  72  77  80  93  94 173 175 #> [49357] 177 190 192 195 216 229 248 273 275 283 301 336 338 343 356 362 368 372 #> [49375] 374 378 388 400 433 434 453 455 465 475 481 501 514 539 545 546 554 557 #> [49393] 574 579 612 617 621 623 630 631 633 638 652 660 684 689 700 704 710 720 #> [49411] 726 758 761 764 768 769 783 785 835 838 857 860 865 869 892 897 905 912 #> [49429] 914 928 937 939 946 947 962 972 974 979 980 981 983 987 991 #>  #> [[5]] #>     [1]     0     1     2     3     4     5     6     7     8     9    10    11 #>    [13]    12    13    14    15    16    17    18    19    20    21    22    23 #>    [25]    24    25    26    27    28    29    30    31    32    33    34    35 #>    [37]    36    37    38    39    40    41    42    43    44    45    46    47 #>    [49]    48    49    50    51    52    53    54    55    56    57    58    59 #>    [61]    60    61    62    63    64    65    66    67    68    69    70    71 #>    [73]    72    73    74    75    76    77    78    79    80    81    82    83 #>    [85]    84    85    86    87    88    89    90    91    92    93    94    95 #>    [97]    96    97    98    99   100   101   102   103   104   105   106   107 #>   [109]   108   109   110   111   112   113   114   115   116   117   118   119 #>   [121]   120   121   122   123   124   125   126   127   128   129   130   131 #>   [133]   132   133   134   135   136   137   138   139   140   141   142   143 #>   [145]   144   145   146   147   148   149   150   151   152   153   154   155 #>   [157]   156   157   158   159   160   161   162   163   164   165   166   167 #>   [169]   168   169   170   171   172   173   174   175   176   177   178   179 #>   [181]   180   181   182   183   184   185   186   187   188   189   190   191 #>   [193]   192   193   194   195   196   197   198   199   200   201   202   203 #>   [205]   204   205   206   207   208   209   210   211   212   213   214   215 #>   [217]   216   217   218   219   220   221   222   223   224   225   226   227 #>   [229]   228   229   230   231   232   233   234   235   236   237   238   239 #>   [241]   240   241   242   243   244   245   246   247   248   249   250   251 #>   [253]   252   253   254   255   256   257   258   259   260   261   262   263 #>   [265]   264   265   266   267   268   269   270   271   272   273   274   275 #>   [277]   276   277   278   279   280   281   282   283   284   285   286   287 #>   [289]   288   289   290   291   292   293   294   295   296   297   298   299 #>   [301]   300   301   302   303   304   305   306   307   308   309   310   311 #>   [313]   312   313   314   315   316   317   318   319   320   321   322   323 #>   [325]   324   325   326   327   328   329   330   331   332   333   334   335 #>   [337]   336   337   338   339   340   341   342   343   344   345   346   347 #>   [349]   348   349   350   351   352   353   354   355   356   357   358   359 #>   [361]   360   361   362   363   364   365   366   367   368   369   370   371 #>   [373]   372   373   374   375   376   377   378   379   380   381   382   383 #>   [385]   384   385   386   387   388   389   390   391   392   393   394   395 #>   [397]   396   397   398   399   400   401   402   403   404   405   406   407 #>   [409]   408   409   410   411   412   413   414   415   416   417   418   419 #>   [421]   420   421   422   423   424   425   426   427   428   429   430   431 #>   [433]   432   433   434   435   436   437   438   439   440   441   442   443 #>   [445]   444   445   446   447   448   449   450   451   452   453   454   455 #>   [457]   456   457   458   459   460   461   462   463   464   465   466   467 #>   [469]   468   469   470   471   472   473   474   475   476   477   478   479 #>   [481]   480   481   482   483   484   485   486   487   488   489   490   491 #>   [493]   492   493   494   495   496   497   498   499   500   501   502   503 #>   [505]   504   505   506   507   508   509   510   511   512   513   514   515 #>   [517]   516   517   518   519   520   521   522   523   524   525   526   527 #>   [529]   528   529   530   531   532   533   534   535   536   537   538   539 #>   [541]   540   541   542   543   544   545   546   547   548   549   550   551 #>   [553]   552   553   554   555   556   557   558   559   560   561   562   563 #>   [565]   564   565   566   567   568   569   570   571   572   573   574   575 #>   [577]   576   577   578   579   580   581   582   583   584   585   586   587 #>   [589]   588   589   590   591   592   593   594   595   596   597   598   599 #>   [601]   600   601   602   603   604   605   606   607   608   609   610   611 #>   [613]   612   613   614   615   616   617   618   619   620   621   622   623 #>   [625]   624   625   626   627   628   629   630   631   632   633   634   635 #>   [637]   636   637   638   639   640   641   642   643   644   645   646   647 #>   [649]   648   649   650   651   652   653   654   655   656   657   658   659 #>   [661]   660   661   662   663   664   665   666   667   668   669   670   671 #>   [673]   672   673   674   675   676   677   678   679   680   681   682   683 #>   [685]   684   685   686   687   688   689   690   691   692   693   694   695 #>   [697]   696   697   698   699   700   701   702   703   704   705   706   707 #>   [709]   708   709   710   711   712   713   714   715   716   717   718   719 #>   [721]   720   721   722   723   724   725   726   727   728   729   730   731 #>   [733]   732   733   734   735   736   737   738   739   740   741   742   743 #>   [745]   744   745   746   747   748   749   750   751   752   753   754   755 #>   [757]   756   757   758   759   760   761   762   763   764   765   766   767 #>   [769]   768   769   770   771   772   773   774   775   776   777   778   779 #>   [781]   780   781   782   783   784   785   786   787   788   789   790   791 #>   [793]   792   793   794   795   796   797   798   799   800   801   802   803 #>   [805]   804   805   806   807   808   809   810   811   812   813   814   815 #>   [817]   816   817   818   819   820   821   822   823   824   825   826   827 #>   [829]   828   829   830   831   832   833   834   835   836   837   838   839 #>   [841]   840   841   842   843   844   845   846   847   848   849   850   851 #>   [853]   852   853   854   855   856   857   858   859   860   861   862   863 #>   [865]   864   865   866   867   868   869   870   871   872   873   874   875 #>   [877]   876   877   878   879   880   881   882   883   884   885   886   887 #>   [889]   888   889   890   891   892   893   894   895   896   897   898   899 #>   [901]   900   901   902   903   904   905   906   907   908   909   910   911 #>   [913]   912   913   914   915   916   917   918   919   920   921   922   923 #>   [925]   924   925   926   927   928   929   930   931   932   933   934   935 #>   [937]   936   937   938   939   940   941   942   943   944   945   946   947 #>   [949]   948   949   950   951   952   953   954   955   956   957   958   959 #>   [961]   960   961   962   963   964   965   966   967   968   969   970   971 #>   [973]   972   973   974   975   976   977   978   979   980   981   982   983 #>   [985]   984   985   986   987   988   989   990   991   992   993   994   995 #>   [997]   996   997   998   999  1000  1001  1002  1003  1004  1005  1006  1007 #>  [1009]  1008  1009  1010  1011  1012  1013  1014  1015  1016  1017  1018  1019 #>  [1021]  1020  1021  1022  1023  1024  1025  1026  1027  1028  1029  1030  1031 #>  [1033]  1032  1033  1034  1035  1036  1037  1038  1039  1040  1041  1042  1043 #>  [1045]  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053  1054  1055 #>  [1057]  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066  1067 #>  [1069]  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 #>  [1081]  1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091 #>  [1093]  1092  1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103 #>  [1105]  1104  1105  1106  1107  1108  1109  1110  1111  1112  1113  1114  1115 #>  [1117]  1116  1117  1118  1119  1120  1121  1122  1123  1124  1125  1126  1127 #>  [1129]  1128  1129  1130  1131  1132  1133  1134  1135  1136  1137  1138  1139 #>  [1141]  1140  1141  1142  1143  1144  1145  1146  1147  1148  1149  1150  1151 #>  [1153]  1152  1153  1154  1155  1156  1157  1158  1159  1160  1161  1162  1163 #>  [1165]  1164  1165  1166  1167  1168  1169  1170  1171  1172  1173  1174  1175 #>  [1177]  1176  1177  1178  1179  1180  1181  1182  1183  1184  1185  1186  1187 #>  [1189]  1188  1189  1190  1191  1192  1193  1194  1195  1196  1197  1198  1199 #>  [1201]  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209  1210  1211 #>  [1213]  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222  1223 #>  [1225]  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 #>  [1237]  1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247 #>  [1249]  1248  1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259 #>  [1261]  1260  1261  1262  1263  1264  1265  1266  1267  1268  1269  1270  1271 #>  [1273]  1272  1273  1274  1275  1276  1277  1278  1279  1280  1281  1282  1283 #>  [1285]  1284  1285  1286  1287  1288  1289  1290  1291  1292  1293  1294  1295 #>  [1297]  1296  1297  1298  1299  1300  1301  1302  1303  1304  1305  1306  1307 #>  [1309]  1308  1309  1310  1311  1312  1313  1314  1315  1316  1317  1318  1319 #>  [1321]  1320  1321  1322  1323  1324  1325  1326  1327  1328  1329  1330  1331 #>  [1333]  1332  1333  1334  1335  1336  1337  1338  1339  1340  1341  1342  1343 #>  [1345]  1344  1345  1346  1347  1348  1349  1350  1351  1352  1353  1354  1355 #>  [1357]  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365  1366  1367 #>  [1369]  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378  1379 #>  [1381]  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 #>  [1393]  1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403 #>  [1405]  1404  1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415 #>  [1417]  1416  1417  1418  1419  1420  1421  1422  1423  1424  1425  1426  1427 #>  [1429]  1428  1429  1430  1431  1432  1433  1434  1435  1436  1437  1438  1439 #>  [1441]  1440  1441  1442  1443  1444  1445  1446  1447  1448  1449  1450  1451 #>  [1453]  1452  1453  1454  1455  1456  1457  1458  1459  1460  1461  1462  1463 #>  [1465]  1464  1465  1466  1467  1468  1469  1470  1471  1472  1473  1474  1475 #>  [1477]  1476  1477  1478  1479  1480  1481  1482  1483  1484  1485  1486  1487 #>  [1489]  1488  1489  1490  1491  1492  1493  1494  1495  1496  1497  1498  1499 #>  [1501]  1500  1501  1502  1503  1504  1505  1506  1507  1508  1509  1510  1511 #>  [1513]  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521  1522  1523 #>  [1525]  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534  1535 #>  [1537]  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 #>  [1549]  1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559 #>  [1561]  1560  1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571 #>  [1573]  1572  1573  1574  1575  1576  1577  1578  1579  1580  1581  1582  1583 #>  [1585]  1584  1585  1586  1587  1588  1589  1590  1591  1592  1593  1594  1595 #>  [1597]  1596  1597  1598  1599  1600  1601  1602  1603  1604  1605  1606  1607 #>  [1609]  1608  1609  1610  1611  1612  1613  1614  1615  1616  1617  1618  1619 #>  [1621]  1620  1621  1622  1623  1624  1625  1626  1627  1628  1629  1630  1631 #>  [1633]  1632  1633  1634  1635  1636  1637  1638  1639  1640  1641  1642  1643 #>  [1645]  1644  1645  1646  1647  1648  1649  1650  1651  1652  1653  1654  1655 #>  [1657]  1656  1657  1658  1659  1660  1661  1662  1663  1664  1665  1666  1667 #>  [1669]  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677  1678  1679 #>  [1681]  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690  1691 #>  [1693]  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 #>  [1705]  1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715 #>  [1717]  1716  1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727 #>  [1729]  1728  1729  1730  1731  1732  1733  1734  1735  1736  1737  1738  1739 #>  [1741]  1740  1741  1742  1743  1744  1745  1746  1747  1748  1749  1750  1751 #>  [1753]  1752  1753  1754  1755  1756  1757  1758  1759  1760  1761  1762  1763 #>  [1765]  1764  1765  1766  1767  1768  1769  1770  1771  1772  1773  1774  1775 #>  [1777]  1776  1777  1778  1779  1780  1781  1782  1783  1784  1785  1786  1787 #>  [1789]  1788  1789  1790  1791  1792  1793  1794  1795  1796  1797  1798  1799 #>  [1801]  1800  1801  1802  1803  1804  1805  1806  1807  1808  1809  1810  1811 #>  [1813]  1812  1813  1814  1815  1816  1817  1818  1819  1820  1821  1822  1823 #>  [1825]  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833  1834  1835 #>  [1837]  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846  1847 #>  [1849]  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 #>  [1861]  1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871 #>  [1873]  1872  1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883 #>  [1885]  1884  1885  1886  1887  1888  1889  1890  1891  1892  1893  1894  1895 #>  [1897]  1896  1897  1898  1899  1900  1901  1902  1903  1904  1905  1906  1907 #>  [1909]  1908  1909  1910  1911  1912  1913  1914  1915  1916  1917  1918  1919 #>  [1921]  1920  1921  1922  1923  1924  1925  1926  1927  1928  1929  1930  1931 #>  [1933]  1932  1933  1934  1935  1936  1937  1938  1939  1940  1941  1942  1943 #>  [1945]  1944  1945  1946  1947  1948  1949  1950  1951  1952  1953  1954  1955 #>  [1957]  1956  1957  1958  1959  1960  1961  1962  1963  1964  1965  1966  1967 #>  [1969]  1968  1969  1970  1971  1972  1973  1974  1975  1976  1977  1978  1979 #>  [1981]  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989  1990  1991 #>  [1993]  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002  2003 #>  [2005]  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 #>  [2017]  2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027 #>  [2029]  2028  2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039 #>  [2041]  2040  2041  2042  2043  2044  2045  2046  2047  2048  2049  2050  2051 #>  [2053]  2052  2053  2054  2055  2056  2057  2058  2059  2060  2061  2062  2063 #>  [2065]  2064  2065  2066  2067  2068  2069  2070  2071  2072  2073  2074  2075 #>  [2077]  2076  2077  2078  2079  2080  2081  2082  2083  2084  2085  2086  2087 #>  [2089]  2088  2089  2090  2091  2092  2093  2094  2095  2096  2097  2098  2099 #>  [2101]  2100  2101  2102  2103  2104  2105  2106  2107  2108  2109  2110  2111 #>  [2113]  2112  2113  2114  2115  2116  2117  2118  2119  2120  2121  2122  2123 #>  [2125]  2124  2125  2126  2127  2128  2129  2130  2131  2132  2133  2134  2135 #>  [2137]  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145  2146  2147 #>  [2149]  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158  2159 #>  [2161]  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 #>  [2173]  2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183 #>  [2185]  2184  2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195 #>  [2197]  2196  2197  2198  2199  2200  2201  2202  2203  2204  2205  2206  2207 #>  [2209]  2208  2209  2210  2211  2212  2213  2214  2215  2216  2217  2218  2219 #>  [2221]  2220  2221  2222  2223  2224  2225  2226  2227  2228  2229  2230  2231 #>  [2233]  2232  2233  2234  2235  2236  2237  2238  2239  2240  2241  2242  2243 #>  [2245]  2244  2245  2246  2247  2248  2249  2250  2251  2252  2253  2254  2255 #>  [2257]  2256  2257  2258  2259  2260  2261  2262  2263  2264  2265  2266  2267 #>  [2269]  2268  2269  2270  2271  2272  2273  2274  2275  2276  2277  2278  2279 #>  [2281]  2280  2281  2282  2283  2284  2285  2286  2287  2288  2289  2290  2291 #>  [2293]  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301  2302  2303 #>  [2305]  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314  2315 #>  [2317]  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 #>  [2329]  2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339 #>  [2341]  2340  2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351 #>  [2353]  2352  2353  2354  2355  2356  2357  2358  2359  2360  2361  2362  2363 #>  [2365]  2364  2365  2366  2367  2368  2369  2370  2371  2372  2373  2374  2375 #>  [2377]  2376  2377  2378  2379  2380  2381  2382  2383  2384  2385  2386  2387 #>  [2389]  2388  2389  2390  2391  2392  2393  2394  2395  2396  2397  2398  2399 #>  [2401]  2400  2401  2402  2403  2404  2405  2406  2407  2408  2409  2410  2411 #>  [2413]  2412  2413  2414  2415  2416  2417  2418  2419  2420  2421  2422  2423 #>  [2425]  2424  2425  2426  2427  2428  2429  2430  2431  2432  2433  2434  2435 #>  [2437]  2436  2437  2438  2439  2440  2441  2442  2443  2444  2445  2446  2447 #>  [2449]  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457  2458  2459 #>  [2461]  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470  2471 #>  [2473]  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 #>  [2485]  2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495 #>  [2497]  2496  2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507 #>  [2509]  2508  2509  2510  2511  2512  2513  2514  2515  2516  2517  2518  2519 #>  [2521]  2520  2521  2522  2523  2524  2525  2526  2527  2528  2529  2530  2531 #>  [2533]  2532  2533  2534  2535  2536  2537  2538  2539  2540  2541  2542  2543 #>  [2545]  2544  2545  2546  2547  2548  2549  2550  2551  2552  2553  2554  2555 #>  [2557]  2556  2557  2558  2559  2560  2561  2562  2563  2564  2565  2566  2567 #>  [2569]  2568  2569  2570  2571  2572  2573  2574  2575  2576  2577  2578  2579 #>  [2581]  2580  2581  2582  2583  2584  2585  2586  2587  2588  2589  2590  2591 #>  [2593]  2592  2593  2594  2595  2596  2597  2598  2599  2600  2601  2602  2603 #>  [2605]  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613  2614  2615 #>  [2617]  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626  2627 #>  [2629]  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 #>  [2641]  2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651 #>  [2653]  2652  2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663 #>  [2665]  2664  2665  2666  2667  2668  2669  2670  2671  2672  2673  2674  2675 #>  [2677]  2676  2677  2678  2679  2680  2681  2682  2683  2684  2685  2686  2687 #>  [2689]  2688  2689  2690  2691  2692  2693  2694  2695  2696  2697  2698  2699 #>  [2701]  2700  2701  2702  2703  2704  2705  2706  2707  2708  2709  2710  2711 #>  [2713]  2712  2713  2714  2715  2716  2717  2718  2719  2720  2721  2722  2723 #>  [2725]  2724  2725  2726  2727  2728  2729  2730  2731  2732  2733  2734  2735 #>  [2737]  2736  2737  2738  2739  2740  2741  2742  2743  2744  2745  2746  2747 #>  [2749]  2748  2749  2750  2751  2752  2753  2754  2755  2756  2757  2758  2759 #>  [2761]  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769  2770  2771 #>  [2773]  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782  2783 #>  [2785]  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 #>  [2797]  2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807 #>  [2809]  2808  2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819 #>  [2821]  2820  2821  2822  2823  2824  2825  2826  2827  2828  2829  2830  2831 #>  [2833]  2832  2833  2834  2835  2836  2837  2838  2839  2840  2841  2842  2843 #>  [2845]  2844  2845  2846  2847  2848  2849  2850  2851  2852  2853  2854  2855 #>  [2857]  2856  2857  2858  2859  2860  2861  2862  2863  2864  2865  2866  2867 #>  [2869]  2868  2869  2870  2871  2872  2873  2874  2875  2876  2877  2878  2879 #>  [2881]  2880  2881  2882  2883  2884  2885  2886  2887  2888  2889  2890  2891 #>  [2893]  2892  2893  2894  2895  2896  2897  2898  2899  2900  2901  2902  2903 #>  [2905]  2904  2905  2906  2907  2908  2909  2910  2911  2912  2913  2914  2915 #>  [2917]  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925  2926  2927 #>  [2929]  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938  2939 #>  [2941]  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 #>  [2953]  2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963 #>  [2965]  2964  2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975 #>  [2977]  2976  2977  2978  2979  2980  2981  2982  2983  2984  2985  2986  2987 #>  [2989]  2988  2989  2990  2991  2992  2993  2994  2995  2996  2997  2998  2999 #>  [3001]  3000  3001  3002  3003  3004  3005  3006  3007  3008  3009  3010  3011 #>  [3013]  3012  3013  3014  3015  3016  3017  3018  3019  3020  3021  3022  3023 #>  [3025]  3024  3025  3026  3027  3028  3029  3030  3031  3032  3033  3034  3035 #>  [3037]  3036  3037  3038  3039  3040  3041  3042  3043  3044  3045  3046  3047 #>  [3049]  3048  3049  3050  3051  3052  3053  3054  3055  3056  3057  3058  3059 #>  [3061]  3060  3061  3062  3063  3064  3065  3066  3067  3068  3069  3070  3071 #>  [3073]  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081  3082  3083 #>  [3085]  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094  3095 #>  [3097]  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 #>  [3109]  3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119 #>  [3121]  3120  3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131 #>  [3133]  3132  3133  3134  3135  3136  3137  3138  3139  3140  3141  3142  3143 #>  [3145]  3144  3145  3146  3147  3148  3149  3150  3151  3152  3153  3154  3155 #>  [3157]  3156  3157  3158  3159  3160  3161  3162  3163  3164  3165  3166  3167 #>  [3169]  3168  3169  3170  3171  3172  3173  3174  3175  3176  3177  3178  3179 #>  [3181]  3180  3181  3182  3183  3184  3185  3186  3187  3188  3189  3190  3191 #>  [3193]  3192  3193  3194  3195  3196  3197  3198  3199  3200  3201  3202  3203 #>  [3205]  3204  3205  3206  3207  3208  3209  3210  3211  3212  3213  3214  3215 #>  [3217]  3216  3217  3218  3219  3220  3221  3222  3223  3224  3225  3226  3227 #>  [3229]  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237  3238  3239 #>  [3241]  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250  3251 #>  [3253]  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 #>  [3265]  3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275 #>  [3277]  3276  3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287 #>  [3289]  3288  3289  3290  3291  3292  3293  3294  3295  3296  3297  3298  3299 #>  [3301]  3300  3301  3302  3303  3304  3305  3306  3307  3308  3309  3310  3311 #>  [3313]  3312  3313  3314  3315  3316  3317  3318  3319  3320  3321  3322  3323 #>  [3325]  3324  3325  3326  3327  3328  3329  3330  3331  3332  3333  3334  3335 #>  [3337]  3336  3337  3338  3339  3340  3341  3342  3343  3344  3345  3346  3347 #>  [3349]  3348  3349  3350  3351  3352  3353  3354  3355  3356  3357  3358  3359 #>  [3361]  3360  3361  3362  3363  3364  3365  3366  3367  3368  3369  3370  3371 #>  [3373]  3372  3373  3374  3375  3376  3377  3378  3379  3380  3381  3382  3383 #>  [3385]  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393  3394  3395 #>  [3397]  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406  3407 #>  [3409]  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 #>  [3421]  3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431 #>  [3433]  3432  3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443 #>  [3445]  3444  3445  3446  3447  3448  3449  3450  3451  3452  3453  3454  3455 #>  [3457]  3456  3457  3458  3459  3460  3461  3462  3463  3464  3465  3466  3467 #>  [3469]  3468  3469  3470  3471  3472  3473  3474  3475  3476  3477  3478  3479 #>  [3481]  3480  3481  3482  3483  3484  3485  3486  3487  3488  3489  3490  3491 #>  [3493]  3492  3493  3494  3495  3496  3497  3498  3499  3500  3501  3502  3503 #>  [3505]  3504  3505  3506  3507  3508  3509  3510  3511  3512  3513  3514  3515 #>  [3517]  3516  3517  3518  3519  3520  3521  3522  3523  3524  3525  3526  3527 #>  [3529]  3528  3529  3530  3531  3532  3533  3534  3535  3536  3537  3538  3539 #>  [3541]  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549  3550  3551 #>  [3553]  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562  3563 #>  [3565]  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 #>  [3577]  3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587 #>  [3589]  3588  3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599 #>  [3601]  3600  3601  3602  3603  3604  3605  3606  3607  3608  3609  3610  3611 #>  [3613]  3612  3613  3614  3615  3616  3617  3618  3619  3620  3621  3622  3623 #>  [3625]  3624  3625  3626  3627  3628  3629  3630  3631  3632  3633  3634  3635 #>  [3637]  3636  3637  3638  3639  3640  3641  3642  3643  3644  3645  3646  3647 #>  [3649]  3648  3649  3650  3651  3652  3653  3654  3655  3656  3657  3658  3659 #>  [3661]  3660  3661  3662  3663  3664  3665  3666  3667  3668  3669  3670  3671 #>  [3673]  3672  3673  3674  3675  3676  3677  3678  3679  3680  3681  3682  3683 #>  [3685]  3684  3685  3686  3687  3688  3689  3690  3691  3692  3693  3694  3695 #>  [3697]  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705  3706  3707 #>  [3709]  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718  3719 #>  [3721]  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 #>  [3733]  3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743 #>  [3745]  3744  3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755 #>  [3757]  3756  3757  3758  3759  3760  3761  3762  3763  3764  3765  3766  3767 #>  [3769]  3768  3769  3770  3771  3772  3773  3774  3775  3776  3777  3778  3779 #>  [3781]  3780  3781  3782  3783  3784  3785  3786  3787  3788  3789  3790  3791 #>  [3793]  3792  3793  3794  3795  3796  3797  3798  3799  3800  3801  3802  3803 #>  [3805]  3804  3805  3806  3807  3808  3809  3810  3811  3812  3813  3814  3815 #>  [3817]  3816  3817  3818  3819  3820  3821  3822  3823  3824  3825  3826  3827 #>  [3829]  3828  3829  3830  3831  3832  3833  3834  3835  3836  3837  3838  3839 #>  [3841]  3840  3841  3842  3843  3844  3845  3846  3847  3848  3849  3850  3851 #>  [3853]  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861  3862  3863 #>  [3865]  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874  3875 #>  [3877]  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 #>  [3889]  3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899 #>  [3901]  3900  3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911 #>  [3913]  3912  3913  3914  3915  3916  3917  3918  3919  3920  3921  3922  3923 #>  [3925]  3924  3925  3926  3927  3928  3929  3930  3931  3932  3933  3934  3935 #>  [3937]  3936  3937  3938  3939  3940  3941  3942  3943  3944  3945  3946  3947 #>  [3949]  3948  3949  3950  3951  3952  3953  3954  3955  3956  3957  3958  3959 #>  [3961]  3960  3961  3962  3963  3964  3965  3966  3967  3968  3969  3970  3971 #>  [3973]  3972  3973  3974  3975  3976  3977  3978  3979  3980  3981  3982  3983 #>  [3985]  3984  3985  3986  3987  3988  3989  3990  3991  3992  3993  3994  3995 #>  [3997]  3996  3997  3998  3999  4000  4001  4002  4003  4004  4005  4006  4007 #>  [4009]  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017  4018  4019 #>  [4021]  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030  4031 #>  [4033]  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 #>  [4045]  4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055 #>  [4057]  4056  4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067 #>  [4069]  4068  4069  4070  4071  4072  4073  4074  4075  4076  4077  4078  4079 #>  [4081]  4080  4081  4082  4083  4084  4085  4086  4087  4088  4089  4090  4091 #>  [4093]  4092  4093  4094  4095  4096  4097  4098  4099  4100  4101  4102  4103 #>  [4105]  4104  4105  4106  4107  4108  4109  4110  4111  4112  4113  4114  4115 #>  [4117]  4116  4117  4118  4119  4120  4121  4122  4123  4124  4125  4126  4127 #>  [4129]  4128  4129  4130  4131  4132  4133  4134  4135  4136  4137  4138  4139 #>  [4141]  4140  4141  4142  4143  4144  4145  4146  4147  4148  4149  4150  4151 #>  [4153]  4152  4153  4154  4155  4156  4157  4158  4159  4160  4161  4162  4163 #>  [4165]  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173  4174  4175 #>  [4177]  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186  4187 #>  [4189]  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 #>  [4201]  4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211 #>  [4213]  4212  4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223 #>  [4225]  4224  4225  4226  4227  4228  4229  4230  4231  4232  4233  4234  4235 #>  [4237]  4236  4237  4238  4239  4240  4241  4242  4243  4244  4245  4246  4247 #>  [4249]  4248  4249  4250  4251  4252  4253  4254  4255  4256  4257  4258  4259 #>  [4261]  4260  4261  4262  4263  4264  4265  4266  4267  4268  4269  4270  4271 #>  [4273]  4272  4273  4274  4275  4276  4277  4278  4279  4280  4281  4282  4283 #>  [4285]  4284  4285  4286  4287  4288  4289  4290  4291  4292  4293  4294  4295 #>  [4297]  4296  4297  4298  4299  4300  4301  4302  4303  4304  4305  4306  4307 #>  [4309]  4308  4309  4310  4311  4312  4313  4314  4315  4316  4317  4318  4319 #>  [4321]  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329  4330  4331 #>  [4333]  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342  4343 #>  [4345]  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 #>  [4357]  4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367 #>  [4369]  4368  4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379 #>  [4381]  4380  4381  4382  4383  4384  4385  4386  4387  4388  4389  4390  4391 #>  [4393]  4392  4393  4394  4395  4396  4397  4398  4399  4400  4401  4402  4403 #>  [4405]  4404  4405  4406  4407  4408  4409  4410  4411  4412  4413  4414  4415 #>  [4417]  4416  4417  4418  4419  4420  4421  4422  4423  4424  4425  4426  4427 #>  [4429]  4428  4429  4430  4431  4432  4433  4434  4435  4436  4437  4438  4439 #>  [4441]  4440  4441  4442  4443  4444  4445  4446  4447  4448  4449  4450  4451 #>  [4453]  4452  4453  4454  4455  4456  4457  4458  4459  4460  4461  4462  4463 #>  [4465]  4464  4465  4466  4467  4468  4469  4470  4471  4472  4473  4474  4475 #>  [4477]  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485  4486  4487 #>  [4489]  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498  4499 #>  [4501]  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 #>  [4513]  4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523 #>  [4525]  4524  4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535 #>  [4537]  4536  4537  4538  4539  4540  4541  4542  4543  4544  4545  4546  4547 #>  [4549]  4548  4549  4550  4551  4552  4553  4554  4555  4556  4557  4558  4559 #>  [4561]  4560  4561  4562  4563  4564  4565  4566  4567  4568  4569  4570  4571 #>  [4573]  4572  4573  4574  4575  4576  4577  4578  4579  4580  4581  4582  4583 #>  [4585]  4584  4585  4586  4587  4588  4589  4590  4591  4592  4593  4594  4595 #>  [4597]  4596  4597  4598  4599  4600  4601  4602  4603  4604  4605  4606  4607 #>  [4609]  4608  4609  4610  4611  4612  4613  4614  4615  4616  4617  4618  4619 #>  [4621]  4620  4621  4622  4623  4624  4625  4626  4627  4628  4629  4630  4631 #>  [4633]  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641  4642  4643 #>  [4645]  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654  4655 #>  [4657]  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 #>  [4669]  4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679 #>  [4681]  4680  4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691 #>  [4693]  4692  4693  4694  4695  4696  4697  4698  4699  4700  4701  4702  4703 #>  [4705]  4704  4705  4706  4707  4708  4709  4710  4711  4712  4713  4714  4715 #>  [4717]  4716  4717  4718  4719  4720  4721  4722  4723  4724  4725  4726  4727 #>  [4729]  4728  4729  4730  4731  4732  4733  4734  4735  4736  4737  4738  4739 #>  [4741]  4740  4741  4742  4743  4744  4745  4746  4747  4748  4749  4750  4751 #>  [4753]  4752  4753  4754  4755  4756  4757  4758  4759  4760  4761  4762  4763 #>  [4765]  4764  4765  4766  4767  4768  4769  4770  4771  4772  4773  4774  4775 #>  [4777]  4776  4777  4778  4779  4780  4781  4782  4783  4784  4785  4786  4787 #>  [4789]  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797  4798  4799 #>  [4801]  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810  4811 #>  [4813]  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 #>  [4825]  4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835 #>  [4837]  4836  4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847 #>  [4849]  4848  4849  4850  4851  4852  4853  4854  4855  4856  4857  4858  4859 #>  [4861]  4860  4861  4862  4863  4864  4865  4866  4867  4868  4869  4870  4871 #>  [4873]  4872  4873  4874  4875  4876  4877  4878  4879  4880  4881  4882  4883 #>  [4885]  4884  4885  4886  4887  4888  4889  4890  4891  4892  4893  4894  4895 #>  [4897]  4896  4897  4898  4899  4900  4901  4902  4903  4904  4905  4906  4907 #>  [4909]  4908  4909  4910  4911  4912  4913  4914  4915  4916  4917  4918  4919 #>  [4921]  4920  4921  4922  4923  4924  4925  4926  4927  4928  4929  4930  4931 #>  [4933]  4932  4933  4934  4935  4936  4937  4938  4939  4940  4941  4942  4943 #>  [4945]  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953  4954  4955 #>  [4957]  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966  4967 #>  [4969]  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 #>  [4981]  4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991 #>  [4993]  4992  4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003 #>  [5005]  5004  5005  5006  5007  5008  5009  5010  5011  5012  5013  5014  5015 #>  [5017]  5016  5017  5018  5019  5020  5021  5022  5023  5024  5025  5026  5027 #>  [5029]  5028  5029  5030  5031  5032  5033  5034  5035  5036  5037  5038  5039 #>  [5041]  5040  5041  5042  5043  5044  5045  5046  5047  5048  5049  5050  5051 #>  [5053]  5052  5053  5054  5055  5056  5057  5058  5059  5060  5061  5062  5063 #>  [5065]  5064  5065  5066  5067  5068  5069  5070  5071  5072  5073  5074  5075 #>  [5077]  5076  5077  5078  5079  5080  5081  5082  5083  5084  5085  5086  5087 #>  [5089]  5088  5089  5090  5091  5092  5093  5094  5095  5096  5097  5098  5099 #>  [5101]  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109  5110  5111 #>  [5113]  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122  5123 #>  [5125]  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 #>  [5137]  5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147 #>  [5149]  5148  5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159 #>  [5161]  5160  5161  5162  5163  5164  5165  5166  5167  5168  5169  5170  5171 #>  [5173]  5172  5173  5174  5175  5176  5177  5178  5179  5180  5181  5182  5183 #>  [5185]  5184  5185  5186  5187  5188  5189  5190  5191  5192  5193  5194  5195 #>  [5197]  5196  5197  5198  5199  5200  5201  5202  5203  5204  5205  5206  5207 #>  [5209]  5208  5209  5210  5211  5212  5213  5214  5215  5216  5217  5218  5219 #>  [5221]  5220  5221  5222  5223  5224  5225  5226  5227  5228  5229  5230  5231 #>  [5233]  5232  5233  5234  5235  5236  5237  5238  5239  5240  5241  5242  5243 #>  [5245]  5244  5245  5246  5247  5248  5249  5250  5251  5252  5253  5254  5255 #>  [5257]  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265  5266  5267 #>  [5269]  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278  5279 #>  [5281]  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 #>  [5293]  5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303 #>  [5305]  5304  5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315 #>  [5317]  5316  5317  5318  5319  5320  5321  5322  5323  5324  5325  5326  5327 #>  [5329]  5328  5329  5330  5331  5332  5333  5334  5335  5336  5337  5338  5339 #>  [5341]  5340  5341  5342  5343  5344  5345  5346  5347  5348  5349  5350  5351 #>  [5353]  5352  5353  5354  5355  5356  5357  5358  5359  5360  5361  5362  5363 #>  [5365]  5364  5365  5366  5367  5368  5369  5370  5371  5372  5373  5374  5375 #>  [5377]  5376  5377  5378  5379  5380  5381  5382  5383  5384  5385  5386  5387 #>  [5389]  5388  5389  5390  5391  5392  5393  5394  5395  5396  5397  5398  5399 #>  [5401]  5400  5401  5402  5403  5404  5405  5406  5407  5408  5409  5410  5411 #>  [5413]  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421  5422  5423 #>  [5425]  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434  5435 #>  [5437]  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 #>  [5449]  5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459 #>  [5461]  5460  5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471 #>  [5473]  5472  5473  5474  5475  5476  5477  5478  5479  5480  5481  5482  5483 #>  [5485]  5484  5485  5486  5487  5488  5489  5490  5491  5492  5493  5494  5495 #>  [5497]  5496  5497  5498  5499  5500  5501  5502  5503  5504  5505  5506  5507 #>  [5509]  5508  5509  5510  5511  5512  5513  5514  5515  5516  5517  5518  5519 #>  [5521]  5520  5521  5522  5523  5524  5525  5526  5527  5528  5529  5530  5531 #>  [5533]  5532  5533  5534  5535  5536  5537  5538  5539  5540  5541  5542  5543 #>  [5545]  5544  5545  5546  5547  5548  5549  5550  5551  5552  5553  5554  5555 #>  [5557]  5556  5557  5558  5559  5560  5561  5562  5563  5564  5565  5566  5567 #>  [5569]  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577  5578  5579 #>  [5581]  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590  5591 #>  [5593]  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 #>  [5605]  5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615 #>  [5617]  5616  5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627 #>  [5629]  5628  5629  5630  5631  5632  5633  5634  5635  5636  5637  5638  5639 #>  [5641]  5640  5641  5642  5643  5644  5645  5646  5647  5648  5649  5650  5651 #>  [5653]  5652  5653  5654  5655  5656  5657  5658  5659  5660  5661  5662  5663 #>  [5665]  5664  5665  5666  5667  5668  5669  5670  5671  5672  5673  5674  5675 #>  [5677]  5676  5677  5678  5679  5680  5681  5682  5683  5684  5685  5686  5687 #>  [5689]  5688  5689  5690  5691  5692  5693  5694  5695  5696  5697  5698  5699 #>  [5701]  5700  5701  5702  5703  5704  5705  5706  5707  5708  5709  5710  5711 #>  [5713]  5712  5713  5714  5715  5716  5717  5718  5719  5720  5721  5722  5723 #>  [5725]  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733  5734  5735 #>  [5737]  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746  5747 #>  [5749]  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 #>  [5761]  5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771 #>  [5773]  5772  5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783 #>  [5785]  5784  5785  5786  5787  5788  5789  5790  5791  5792  5793  5794  5795 #>  [5797]  5796  5797  5798  5799  5800  5801  5802  5803  5804  5805  5806  5807 #>  [5809]  5808  5809  5810  5811  5812  5813  5814  5815  5816  5817  5818  5819 #>  [5821]  5820  5821  5822  5823  5824  5825  5826  5827  5828  5829  5830  5831 #>  [5833]  5832  5833  5834  5835  5836  5837  5838  5839  5840  5841  5842  5843 #>  [5845]  5844  5845  5846  5847  5848  5849  5850  5851  5852  5853  5854  5855 #>  [5857]  5856  5857  5858  5859  5860  5861  5862  5863  5864  5865  5866  5867 #>  [5869]  5868  5869  5870  5871  5872  5873  5874  5875  5876  5877  5878  5879 #>  [5881]  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889  5890  5891 #>  [5893]  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902  5903 #>  [5905]  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 #>  [5917]  5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927 #>  [5929]  5928  5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939 #>  [5941]  5940  5941  5942  5943  5944  5945  5946  5947  5948  5949  5950  5951 #>  [5953]  5952  5953  5954  5955  5956  5957  5958  5959  5960  5961  5962  5963 #>  [5965]  5964  5965  5966  5967  5968  5969  5970  5971  5972  5973  5974  5975 #>  [5977]  5976  5977  5978  5979  5980  5981  5982  5983  5984  5985  5986  5987 #>  [5989]  5988  5989  5990  5991  5992  5993  5994  5995  5996  5997  5998  5999 #>  [6001]  6000  6001  6002  6003  6004  6005  6006  6007  6008  6009  6010  6011 #>  [6013]  6012  6013  6014  6015  6016  6017  6018  6019  6020  6021  6022  6023 #>  [6025]  6024  6025  6026  6027  6028  6029  6030  6031  6032  6033  6034  6035 #>  [6037]  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045  6046  6047 #>  [6049]  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058  6059 #>  [6061]  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 #>  [6073]  6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083 #>  [6085]  6084  6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095 #>  [6097]  6096  6097  6098  6099  6100  6101  6102  6103  6104  6105  6106  6107 #>  [6109]  6108  6109  6110  6111  6112  6113  6114  6115  6116  6117  6118  6119 #>  [6121]  6120  6121  6122  6123  6124  6125  6126  6127  6128  6129  6130  6131 #>  [6133]  6132  6133  6134  6135  6136  6137  6138  6139  6140  6141  6142  6143 #>  [6145]  6144  6145  6146  6147  6148  6149  6150  6151  6152  6153  6154  6155 #>  [6157]  6156  6157  6158  6159  6160  6161  6162  6163  6164  6165  6166  6167 #>  [6169]  6168  6169  6170  6171  6172  6173  6174  6175  6176  6177  6178  6179 #>  [6181]  6180  6181  6182  6183  6184  6185  6186  6187  6188  6189  6190  6191 #>  [6193]  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201  6202  6203 #>  [6205]  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214  6215 #>  [6217]  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 #>  [6229]  6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239 #>  [6241]  6240  6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251 #>  [6253]  6252  6253  6254  6255  6256  6257  6258  6259  6260  6261  6262  6263 #>  [6265]  6264  6265  6266  6267  6268  6269  6270  6271  6272  6273  6274  6275 #>  [6277]  6276  6277  6278  6279  6280  6281  6282  6283  6284  6285  6286  6287 #>  [6289]  6288  6289  6290  6291  6292  6293  6294  6295  6296  6297  6298  6299 #>  [6301]  6300  6301  6302  6303  6304  6305  6306  6307  6308  6309  6310  6311 #>  [6313]  6312  6313  6314  6315  6316  6317  6318  6319  6320  6321  6322  6323 #>  [6325]  6324  6325  6326  6327  6328  6329  6330  6331  6332  6333  6334  6335 #>  [6337]  6336  6337  6338  6339  6340  6341  6342  6343  6344  6345  6346  6347 #>  [6349]  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357  6358  6359 #>  [6361]  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370  6371 #>  [6373]  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 #>  [6385]  6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395 #>  [6397]  6396  6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407 #>  [6409]  6408  6409  6410  6411  6412  6413  6414  6415  6416  6417  6418  6419 #>  [6421]  6420  6421  6422  6423  6424  6425  6426  6427  6428  6429  6430  6431 #>  [6433]  6432  6433  6434  6435  6436  6437  6438  6439  6440  6441  6442  6443 #>  [6445]  6444  6445  6446  6447  6448  6449  6450  6451  6452  6453  6454  6455 #>  [6457]  6456  6457  6458  6459  6460  6461  6462  6463  6464  6465  6466  6467 #>  [6469]  6468  6469  6470  6471  6472  6473  6474  6475  6476  6477  6478  6479 #>  [6481]  6480  6481  6482  6483  6484  6485  6486  6487  6488  6489  6490  6491 #>  [6493]  6492  6493  6494  6495  6496  6497  6498  6499  6500  6501  6502  6503 #>  [6505]  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513  6514  6515 #>  [6517]  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526  6527 #>  [6529]  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 #>  [6541]  6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551 #>  [6553]  6552  6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563 #>  [6565]  6564  6565  6566  6567  6568  6569  6570  6571  6572  6573  6574  6575 #>  [6577]  6576  6577  6578  6579  6580  6581  6582  6583  6584  6585  6586  6587 #>  [6589]  6588  6589  6590  6591  6592  6593  6594  6595  6596  6597  6598  6599 #>  [6601]  6600  6601  6602  6603  6604  6605  6606  6607  6608  6609  6610  6611 #>  [6613]  6612  6613  6614  6615  6616  6617  6618  6619  6620  6621  6622  6623 #>  [6625]  6624  6625  6626  6627  6628  6629  6630  6631  6632  6633  6634  6635 #>  [6637]  6636  6637  6638  6639  6640  6641  6642  6643  6644  6645  6646  6647 #>  [6649]  6648  6649  6650  6651  6652  6653  6654  6655  6656  6657  6658  6659 #>  [6661]  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669  6670  6671 #>  [6673]  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682  6683 #>  [6685]  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 #>  [6697]  6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707 #>  [6709]  6708  6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719 #>  [6721]  6720  6721  6722  6723  6724  6725  6726  6727  6728  6729  6730  6731 #>  [6733]  6732  6733  6734  6735  6736  6737  6738  6739  6740  6741  6742  6743 #>  [6745]  6744  6745  6746  6747  6748  6749  6750  6751  6752  6753  6754  6755 #>  [6757]  6756  6757  6758  6759  6760  6761  6762  6763  6764  6765  6766  6767 #>  [6769]  6768  6769  6770  6771  6772  6773  6774  6775  6776  6777  6778  6779 #>  [6781]  6780  6781  6782  6783  6784  6785  6786  6787  6788  6789  6790  6791 #>  [6793]  6792  6793  6794  6795  6796  6797  6798  6799  6800  6801  6802  6803 #>  [6805]  6804  6805  6806  6807  6808  6809  6810  6811  6812  6813  6814  6815 #>  [6817]  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825  6826  6827 #>  [6829]  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838  6839 #>  [6841]  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 #>  [6853]  6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863 #>  [6865]  6864  6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875 #>  [6877]  6876  6877  6878  6879  6880  6881  6882  6883  6884  6885  6886  6887 #>  [6889]  6888  6889  6890  6891  6892  6893  6894  6895  6896  6897  6898  6899 #>  [6901]  6900  6901  6902  6903  6904  6905  6906  6907  6908  6909  6910  6911 #>  [6913]  6912  6913  6914  6915  6916  6917  6918  6919  6920  6921  6922  6923 #>  [6925]  6924  6925  6926  6927  6928  6929  6930  6931  6932  6933  6934  6935 #>  [6937]  6936  6937  6938  6939  6940  6941  6942  6943  6944  6945  6946  6947 #>  [6949]  6948  6949  6950  6951  6952  6953  6954  6955  6956  6957  6958  6959 #>  [6961]  6960  6961  6962  6963  6964  6965  6966  6967  6968  6969  6970  6971 #>  [6973]  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981  6982  6983 #>  [6985]  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994  6995 #>  [6997]  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 #>  [7009]  7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019 #>  [7021]  7020  7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031 #>  [7033]  7032  7033  7034  7035  7036  7037  7038  7039  7040  7041  7042  7043 #>  [7045]  7044  7045  7046  7047  7048  7049  7050  7051  7052  7053  7054  7055 #>  [7057]  7056  7057  7058  7059  7060  7061  7062  7063  7064  7065  7066  7067 #>  [7069]  7068  7069  7070  7071  7072  7073  7074  7075  7076  7077  7078  7079 #>  [7081]  7080  7081  7082  7083  7084  7085  7086  7087  7088  7089  7090  7091 #>  [7093]  7092  7093  7094  7095  7096  7097  7098  7099  7100  7101  7102  7103 #>  [7105]  7104  7105  7106  7107  7108  7109  7110  7111  7112  7113  7114  7115 #>  [7117]  7116  7117  7118  7119  7120  7121  7122  7123  7124  7125  7126  7127 #>  [7129]  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137  7138  7139 #>  [7141]  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150  7151 #>  [7153]  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 #>  [7165]  7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175 #>  [7177]  7176  7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187 #>  [7189]  7188  7189  7190  7191  7192  7193  7194  7195  7196  7197  7198  7199 #>  [7201]  7200  7201  7202  7203  7204  7205  7206  7207  7208  7209  7210  7211 #>  [7213]  7212  7213  7214  7215  7216  7217  7218  7219  7220  7221  7222  7223 #>  [7225]  7224  7225  7226  7227  7228  7229  7230  7231  7232  7233  7234  7235 #>  [7237]  7236  7237  7238  7239  7240  7241  7242  7243  7244  7245  7246  7247 #>  [7249]  7248  7249  7250  7251  7252  7253  7254  7255  7256  7257  7258  7259 #>  [7261]  7260  7261  7262  7263  7264  7265  7266  7267  7268  7269  7270  7271 #>  [7273]  7272  7273  7274  7275  7276  7277  7278  7279  7280  7281  7282  7283 #>  [7285]  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293  7294  7295 #>  [7297]  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306  7307 #>  [7309]  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 #>  [7321]  7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331 #>  [7333]  7332  7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343 #>  [7345]  7344  7345  7346  7347  7348  7349  7350  7351  7352  7353  7354  7355 #>  [7357]  7356  7357  7358  7359  7360  7361  7362  7363  7364  7365  7366  7367 #>  [7369]  7368  7369  7370  7371  7372  7373  7374  7375  7376  7377  7378  7379 #>  [7381]  7380  7381  7382  7383  7384  7385  7386  7387  7388  7389  7390  7391 #>  [7393]  7392  7393  7394  7395  7396  7397  7398  7399  7400  7401  7402  7403 #>  [7405]  7404  7405  7406  7407  7408  7409  7410  7411  7412  7413  7414  7415 #>  [7417]  7416  7417  7418  7419  7420  7421  7422  7423  7424  7425  7426  7427 #>  [7429]  7428  7429  7430  7431  7432  7433  7434  7435  7436  7437  7438  7439 #>  [7441]  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449  7450  7451 #>  [7453]  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462  7463 #>  [7465]  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 #>  [7477]  7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487 #>  [7489]  7488  7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499 #>  [7501]  7500  7501  7502  7503  7504  7505  7506  7507  7508  7509  7510  7511 #>  [7513]  7512  7513  7514  7515  7516  7517  7518  7519  7520  7521  7522  7523 #>  [7525]  7524  7525  7526  7527  7528  7529  7530  7531  7532  7533  7534  7535 #>  [7537]  7536  7537  7538  7539  7540  7541  7542  7543  7544  7545  7546  7547 #>  [7549]  7548  7549  7550  7551  7552  7553  7554  7555  7556  7557  7558  7559 #>  [7561]  7560  7561  7562  7563  7564  7565  7566  7567  7568  7569  7570  7571 #>  [7573]  7572  7573  7574  7575  7576  7577  7578  7579  7580  7581  7582  7583 #>  [7585]  7584  7585  7586  7587  7588  7589  7590  7591  7592  7593  7594  7595 #>  [7597]  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605  7606  7607 #>  [7609]  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618  7619 #>  [7621]  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 #>  [7633]  7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643 #>  [7645]  7644  7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655 #>  [7657]  7656  7657  7658  7659  7660  7661  7662  7663  7664  7665  7666  7667 #>  [7669]  7668  7669  7670  7671  7672  7673  7674  7675  7676  7677  7678  7679 #>  [7681]  7680  7681  7682  7683  7684  7685  7686  7687  7688  7689  7690  7691 #>  [7693]  7692  7693  7694  7695  7696  7697  7698  7699  7700  7701  7702  7703 #>  [7705]  7704  7705  7706  7707  7708  7709  7710  7711  7712  7713  7714  7715 #>  [7717]  7716  7717  7718  7719  7720  7721  7722  7723  7724  7725  7726  7727 #>  [7729]  7728  7729  7730  7731  7732  7733  7734  7735  7736  7737  7738  7739 #>  [7741]  7740  7741  7742  7743  7744  7745  7746  7747  7748  7749  7750  7751 #>  [7753]  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761  7762  7763 #>  [7765]  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774  7775 #>  [7777]  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 #>  [7789]  7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799 #>  [7801]  7800  7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811 #>  [7813]  7812  7813  7814  7815  7816  7817  7818  7819  7820  7821  7822  7823 #>  [7825]  7824  7825  7826  7827  7828  7829  7830  7831  7832  7833  7834  7835 #>  [7837]  7836  7837  7838  7839  7840  7841  7842  7843  7844  7845  7846  7847 #>  [7849]  7848  7849  7850  7851  7852  7853  7854  7855  7856  7857  7858  7859 #>  [7861]  7860  7861  7862  7863  7864  7865  7866  7867  7868  7869  7870  7871 #>  [7873]  7872  7873  7874  7875  7876  7877  7878  7879  7880  7881  7882  7883 #>  [7885]  7884  7885  7886  7887  7888  7889  7890  7891  7892  7893  7894  7895 #>  [7897]  7896  7897  7898  7899  7900  7901  7902  7903  7904  7905  7906  7907 #>  [7909]  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917  7918  7919 #>  [7921]  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930  7931 #>  [7933]  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 #>  [7945]  7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955 #>  [7957]  7956  7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967 #>  [7969]  7968  7969  7970  7971  7972  7973  7974  7975  7976  7977  7978  7979 #>  [7981]  7980  7981  7982  7983  7984  7985  7986  7987  7988  7989  7990  7991 #>  [7993]  7992  7993  7994  7995  7996  7997  7998  7999  8000  8001  8002  8003 #>  [8005]  8004  8005  8006  8007  8008  8009  8010  8011  8012  8013  8014  8015 #>  [8017]  8016  8017  8018  8019  8020  8021  8022  8023  8024  8025  8026  8027 #>  [8029]  8028  8029  8030  8031  8032  8033  8034  8035  8036  8037  8038  8039 #>  [8041]  8040  8041  8042  8043  8044  8045  8046  8047  8048  8049  8050  8051 #>  [8053]  8052  8053  8054  8055  8056  8057  8058  8059  8060  8061  8062  8063 #>  [8065]  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073  8074  8075 #>  [8077]  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086  8087 #>  [8089]  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 #>  [8101]  8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111 #>  [8113]  8112  8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123 #>  [8125]  8124  8125  8126  8127  8128  8129  8130  8131  8132  8133  8134  8135 #>  [8137]  8136  8137  8138  8139  8140  8141  8142  8143  8144  8145  8146  8147 #>  [8149]  8148  8149  8150  8151  8152  8153  8154  8155  8156  8157  8158  8159 #>  [8161]  8160  8161  8162  8163  8164  8165  8166  8167  8168  8169  8170  8171 #>  [8173]  8172  8173  8174  8175  8176  8177  8178  8179  8180  8181  8182  8183 #>  [8185]  8184  8185  8186  8187  8188  8189  8190  8191  8192  8193  8194  8195 #>  [8197]  8196  8197  8198  8199  8200  8201  8202  8203  8204  8205  8206  8207 #>  [8209]  8208  8209  8210  8211  8212  8213  8214  8215  8216  8217  8218  8219 #>  [8221]  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229  8230  8231 #>  [8233]  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242  8243 #>  [8245]  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 #>  [8257]  8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267 #>  [8269]  8268  8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279 #>  [8281]  8280  8281  8282  8283  8284  8285  8286  8287  8288  8289  8290  8291 #>  [8293]  8292  8293  8294  8295  8296  8297  8298  8299  8300  8301  8302  8303 #>  [8305]  8304  8305  8306  8307  8308  8309  8310  8311  8312  8313  8314  8315 #>  [8317]  8316  8317  8318  8319  8320  8321  8322  8323  8324  8325  8326  8327 #>  [8329]  8328  8329  8330  8331  8332  8333  8334  8335  8336  8337  8338  8339 #>  [8341]  8340  8341  8342  8343  8344  8345  8346  8347  8348  8349  8350  8351 #>  [8353]  8352  8353  8354  8355  8356  8357  8358  8359  8360  8361  8362  8363 #>  [8365]  8364  8365  8366  8367  8368  8369  8370  8371  8372  8373  8374  8375 #>  [8377]  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385  8386  8387 #>  [8389]  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398  8399 #>  [8401]  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 #>  [8413]  8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423 #>  [8425]  8424  8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435 #>  [8437]  8436  8437  8438  8439  8440  8441  8442  8443  8444  8445  8446  8447 #>  [8449]  8448  8449  8450  8451  8452  8453  8454  8455  8456  8457  8458  8459 #>  [8461]  8460  8461  8462  8463  8464  8465  8466  8467  8468  8469  8470  8471 #>  [8473]  8472  8473  8474  8475  8476  8477  8478  8479  8480  8481  8482  8483 #>  [8485]  8484  8485  8486  8487  8488  8489  8490  8491  8492  8493  8494  8495 #>  [8497]  8496  8497  8498  8499  8500  8501  8502  8503  8504  8505  8506  8507 #>  [8509]  8508  8509  8510  8511  8512  8513  8514  8515  8516  8517  8518  8519 #>  [8521]  8520  8521  8522  8523  8524  8525  8526  8527  8528  8529  8530  8531 #>  [8533]  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541  8542  8543 #>  [8545]  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554  8555 #>  [8557]  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 #>  [8569]  8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579 #>  [8581]  8580  8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591 #>  [8593]  8592  8593  8594  8595  8596  8597  8598  8599  8600  8601  8602  8603 #>  [8605]  8604  8605  8606  8607  8608  8609  8610  8611  8612  8613  8614  8615 #>  [8617]  8616  8617  8618  8619  8620  8621  8622  8623  8624  8625  8626  8627 #>  [8629]  8628  8629  8630  8631  8632  8633  8634  8635  8636  8637  8638  8639 #>  [8641]  8640  8641  8642  8643  8644  8645  8646  8647  8648  8649  8650  8651 #>  [8653]  8652  8653  8654  8655  8656  8657  8658  8659  8660  8661  8662  8663 #>  [8665]  8664  8665  8666  8667  8668  8669  8670  8671  8672  8673  8674  8675 #>  [8677]  8676  8677  8678  8679  8680  8681  8682  8683  8684  8685  8686  8687 #>  [8689]  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697  8698  8699 #>  [8701]  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710  8711 #>  [8713]  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 #>  [8725]  8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735 #>  [8737]  8736  8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747 #>  [8749]  8748  8749  8750  8751  8752  8753  8754  8755  8756  8757  8758  8759 #>  [8761]  8760  8761  8762  8763  8764  8765  8766  8767  8768  8769  8770  8771 #>  [8773]  8772  8773  8774  8775  8776  8777  8778  8779  8780  8781  8782  8783 #>  [8785]  8784  8785  8786  8787  8788  8789  8790  8791  8792  8793  8794  8795 #>  [8797]  8796  8797  8798  8799  8800  8801  8802  8803  8804  8805  8806  8807 #>  [8809]  8808  8809  8810  8811  8812  8813  8814  8815  8816  8817  8818  8819 #>  [8821]  8820  8821  8822  8823  8824  8825  8826  8827  8828  8829  8830  8831 #>  [8833]  8832  8833  8834  8835  8836  8837  8838  8839  8840  8841  8842  8843 #>  [8845]  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853  8854  8855 #>  [8857]  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866  8867 #>  [8869]  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 #>  [8881]  8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891 #>  [8893]  8892  8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903 #>  [8905]  8904  8905  8906  8907  8908  8909  8910  8911  8912  8913  8914  8915 #>  [8917]  8916  8917  8918  8919  8920  8921  8922  8923  8924  8925  8926  8927 #>  [8929]  8928  8929  8930  8931  8932  8933  8934  8935  8936  8937  8938  8939 #>  [8941]  8940  8941  8942  8943  8944  8945  8946  8947  8948  8949  8950  8951 #>  [8953]  8952  8953  8954  8955  8956  8957  8958  8959  8960  8961  8962  8963 #>  [8965]  8964  8965  8966  8967  8968  8969  8970  8971  8972  8973  8974  8975 #>  [8977]  8976  8977  8978  8979  8980  8981  8982  8983  8984  8985  8986  8987 #>  [8989]  8988  8989  8990  8991  8992  8993  8994  8995  8996  8997  8998  8999 #>  [9001]  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009  9010  9011 #>  [9013]  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022  9023 #>  [9025]  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 #>  [9037]  9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047 #>  [9049]  9048  9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059 #>  [9061]  9060  9061  9062  9063  9064  9065  9066  9067  9068  9069  9070  9071 #>  [9073]  9072  9073  9074  9075  9076  9077  9078  9079  9080  9081  9082  9083 #>  [9085]  9084  9085  9086  9087  9088  9089  9090  9091  9092  9093  9094  9095 #>  [9097]  9096  9097  9098  9099  9100  9101  9102  9103  9104  9105  9106  9107 #>  [9109]  9108  9109  9110  9111  9112  9113  9114  9115  9116  9117  9118  9119 #>  [9121]  9120  9121  9122  9123  9124  9125  9126  9127  9128  9129  9130  9131 #>  [9133]  9132  9133  9134  9135  9136  9137  9138  9139  9140  9141  9142  9143 #>  [9145]  9144  9145  9146  9147  9148  9149  9150  9151  9152  9153  9154  9155 #>  [9157]  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165  9166  9167 #>  [9169]  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178  9179 #>  [9181]  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 #>  [9193]  9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203 #>  [9205]  9204  9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215 #>  [9217]  9216  9217  9218  9219  9220  9221  9222  9223  9224  9225  9226  9227 #>  [9229]  9228  9229  9230  9231  9232  9233  9234  9235  9236  9237  9238  9239 #>  [9241]  9240  9241  9242  9243  9244  9245  9246  9247  9248  9249  9250  9251 #>  [9253]  9252  9253  9254  9255  9256  9257  9258  9259  9260  9261  9262  9263 #>  [9265]  9264  9265  9266  9267  9268  9269  9270  9271  9272  9273  9274  9275 #>  [9277]  9276  9277  9278  9279  9280  9281  9282  9283  9284  9285  9286  9287 #>  [9289]  9288  9289  9290  9291  9292  9293  9294  9295  9296  9297  9298  9299 #>  [9301]  9300  9301  9302  9303  9304  9305  9306  9307  9308  9309  9310  9311 #>  [9313]  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321  9322  9323 #>  [9325]  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334  9335 #>  [9337]  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 #>  [9349]  9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359 #>  [9361]  9360  9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371 #>  [9373]  9372  9373  9374  9375  9376  9377  9378  9379  9380  9381  9382  9383 #>  [9385]  9384  9385  9386  9387  9388  9389  9390  9391  9392  9393  9394  9395 #>  [9397]  9396  9397  9398  9399  9400  9401  9402  9403  9404  9405  9406  9407 #>  [9409]  9408  9409  9410  9411  9412  9413  9414  9415  9416  9417  9418  9419 #>  [9421]  9420  9421  9422  9423  9424  9425  9426  9427  9428  9429  9430  9431 #>  [9433]  9432  9433  9434  9435  9436  9437  9438  9439  9440  9441  9442  9443 #>  [9445]  9444  9445  9446  9447  9448  9449  9450  9451  9452  9453  9454  9455 #>  [9457]  9456  9457  9458  9459  9460  9461  9462  9463  9464  9465  9466  9467 #>  [9469]  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477  9478  9479 #>  [9481]  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490  9491 #>  [9493]  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 #>  [9505]  9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515 #>  [9517]  9516  9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527 #>  [9529]  9528  9529  9530  9531  9532  9533  9534  9535  9536  9537  9538  9539 #>  [9541]  9540  9541  9542  9543  9544  9545  9546  9547  9548  9549  9550  9551 #>  [9553]  9552  9553  9554  9555  9556  9557  9558  9559  9560  9561  9562  9563 #>  [9565]  9564  9565  9566  9567  9568  9569  9570  9571  9572  9573  9574  9575 #>  [9577]  9576  9577  9578  9579  9580  9581  9582  9583  9584  9585  9586  9587 #>  [9589]  9588  9589  9590  9591  9592  9593  9594  9595  9596  9597  9598  9599 #>  [9601]  9600  9601  9602  9603  9604  9605  9606  9607  9608  9609  9610  9611 #>  [9613]  9612  9613  9614  9615  9616  9617  9618  9619  9620  9621  9622  9623 #>  [9625]  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633  9634  9635 #>  [9637]  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646  9647 #>  [9649]  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 #>  [9661]  9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671 #>  [9673]  9672  9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683 #>  [9685]  9684  9685  9686  9687  9688  9689  9690  9691  9692  9693  9694  9695 #>  [9697]  9696  9697  9698  9699  9700  9701  9702  9703  9704  9705  9706  9707 #>  [9709]  9708  9709  9710  9711  9712  9713  9714  9715  9716  9717  9718  9719 #>  [9721]  9720  9721  9722  9723  9724  9725  9726  9727  9728  9729  9730  9731 #>  [9733]  9732  9733  9734  9735  9736  9737  9738  9739  9740  9741  9742  9743 #>  [9745]  9744  9745  9746  9747  9748  9749  9750  9751  9752  9753  9754  9755 #>  [9757]  9756  9757  9758  9759  9760  9761  9762  9763  9764  9765  9766  9767 #>  [9769]  9768  9769  9770  9771  9772  9773  9774  9775  9776  9777  9778  9779 #>  [9781]  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789  9790  9791 #>  [9793]  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802  9803 #>  [9805]  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 #>  [9817]  9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827 #>  [9829]  9828  9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839 #>  [9841]  9840  9841  9842  9843  9844  9845  9846  9847  9848  9849  9850  9851 #>  [9853]  9852  9853  9854  9855  9856  9857  9858  9859  9860  9861  9862  9863 #>  [9865]  9864  9865  9866  9867  9868  9869  9870  9871  9872  9873  9874  9875 #>  [9877]  9876  9877  9878  9879  9880  9881  9882  9883  9884  9885  9886  9887 #>  [9889]  9888  9889  9890  9891  9892  9893  9894  9895  9896  9897  9898  9899 #>  [9901]  9900  9901  9902  9903  9904  9905  9906  9907  9908  9909  9910  9911 #>  [9913]  9912  9913  9914  9915  9916  9917  9918  9919  9920  9921  9922  9923 #>  [9925]  9924  9925  9926  9927  9928  9929  9930  9931  9932  9933  9934  9935 #>  [9937]  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945  9946  9947 #>  [9949]  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958  9959 #>  [9961]  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 #>  [9973]  9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983 #>  [9985]  9984  9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995 #>  [9997]  9996  9997  9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 #> [10009] 10008 10009 10010 10011 10012 10013 10014 10015 10016 10017 10018 10019 #> [10021] 10020 10021 10022 10023 10024 10025 10026 10027 10028 10029 10030 10031 #> [10033] 10032 10033 10034 10035 10036 10037 10038 10039 10040 10041 10042 10043 #> [10045] 10044 10045 10046 10047 10048 10049 10050 10051 10052 10053 10054 10055 #> [10057] 10056 10057 10058 10059 10060 10061 10062 10063 10064 10065 10066 10067 #> [10069] 10068 10069 10070 10071 10072 10073 10074 10075 10076 10077 10078 10079 #> [10081] 10080 10081 10082 10083 10084 10085 10086 10087 10088 10089 10090 10091 #> [10093] 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 10102 10103 #> [10105] 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 10115 #> [10117] 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 #> [10129] 10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 #> [10141] 10140 10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 #> [10153] 10152 10153 10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 #> [10165] 10164 10165 10166 10167 10168 10169 10170 10171 10172 10173 10174 10175 #> [10177] 10176 10177 10178 10179 10180 10181 10182 10183 10184 10185 10186 10187 #> [10189] 10188 10189 10190 10191 10192 10193 10194 10195 10196 10197 10198 10199 #> [10201] 10200 10201 10202 10203 10204 10205 10206 10207 10208 10209 10210 10211 #> [10213] 10212 10213 10214 10215 10216 10217 10218 10219 10220 10221 10222 10223 #> [10225] 10224 10225 10226 10227 10228 10229 10230 10231 10232 10233 10234 10235 #> [10237] 10236 10237 10238 10239 10240 10241 10242 10243 10244 10245 10246 10247 #> [10249] 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 10258 10259 #> [10261] 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 10271 #> [10273] 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 #> [10285] 10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 #> [10297] 10296 10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 #> [10309] 10308 10309 10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 #> [10321] 10320 10321 10322 10323 10324 10325 10326 10327 10328 10329 10330 10331 #> [10333] 10332 10333 10334 10335 10336 10337 10338 10339 10340 10341 10342 10343 #> [10345] 10344 10345 10346 10347 10348 10349 10350 10351 10352 10353 10354 10355 #> [10357] 10356 10357 10358 10359 10360 10361 10362 10363 10364 10365 10366 10367 #> [10369] 10368 10369 10370 10371 10372 10373 10374 10375 10376 10377 10378 10379 #> [10381] 10380 10381 10382 10383 10384 10385 10386 10387 10388 10389 10390 10391 #> [10393] 10392 10393 10394 10395 10396 10397 10398 10399 10400 10401 10402 10403 #> [10405] 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 10414 10415 #> [10417] 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 10427 #> [10429] 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 #> [10441] 10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 #> [10453] 10452 10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 #> [10465] 10464 10465 10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 #> [10477] 10476 10477 10478 10479 10480 10481 10482 10483 10484 10485 10486 10487 #> [10489] 10488 10489 10490 10491 10492 10493 10494 10495 10496 10497 10498 10499 #> [10501] 10500 10501 10502 10503 10504 10505 10506 10507 10508 10509 10510 10511 #> [10513] 10512 10513 10514 10515 10516 10517 10518 10519 10520 10521 10522 10523 #> [10525] 10524 10525 10526 10527 10528 10529 10530 10531 10532 10533 10534 10535 #> [10537] 10536 10537 10538 10539 10540 10541 10542 10543 10544 10545 10546 10547 #> [10549] 10548 10549 10550 10551 10552 10553 10554 10555 10556 10557 10558 10559 #> [10561] 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 10570 10571 #> [10573] 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 10583 #> [10585] 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 #> [10597] 10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 #> [10609] 10608 10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 #> [10621] 10620 10621 10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 #> [10633] 10632 10633 10634 10635 10636 10637 10638 10639 10640 10641 10642 10643 #> [10645] 10644 10645 10646 10647 10648 10649 10650 10651 10652 10653 10654 10655 #> [10657] 10656 10657 10658 10659 10660 10661 10662 10663 10664 10665 10666 10667 #> [10669] 10668 10669 10670 10671 10672 10673 10674 10675 10676 10677 10678 10679 #> [10681] 10680 10681 10682 10683 10684 10685 10686 10687 10688 10689 10690 10691 #> [10693] 10692 10693 10694 10695 10696 10697 10698 10699 10700 10701 10702 10703 #> [10705] 10704 10705 10706 10707 10708 10709 10710 10711 10712 10713 10714 10715 #> [10717] 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 10726 10727 #> [10729] 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 10739 #> [10741] 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 #> [10753] 10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 #> [10765] 10764 10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 #> [10777] 10776 10777 10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 #> [10789] 10788 10789 10790 10791 10792 10793 10794 10795 10796 10797 10798 10799 #> [10801] 10800 10801 10802 10803 10804 10805 10806 10807 10808 10809 10810 10811 #> [10813] 10812 10813 10814 10815 10816 10817 10818 10819 10820 10821 10822 10823 #> [10825] 10824 10825 10826 10827 10828 10829 10830 10831 10832 10833 10834 10835 #> [10837] 10836 10837 10838 10839 10840 10841 10842 10843 10844 10845 10846 10847 #> [10849] 10848 10849 10850 10851 10852 10853 10854 10855 10856 10857 10858 10859 #> [10861] 10860 10861 10862 10863 10864 10865 10866 10867 10868 10869 10870 10871 #> [10873] 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 10882 10883 #> [10885] 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 10895 #> [10897] 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 #> [10909] 10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 #> [10921] 10920 10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 #> [10933] 10932 10933 10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 #> [10945] 10944 10945 10946 10947 10948 10949 10950 10951 10952 10953 10954 10955 #> [10957] 10956 10957 10958 10959 10960 10961 10962 10963 10964 10965 10966 10967 #> [10969] 10968 10969 10970 10971 10972 10973 10974 10975 10976 10977 10978 10979 #> [10981] 10980 10981 10982 10983 10984 10985 10986 10987 10988 10989 10990 10991 #> [10993] 10992 10993 10994 10995 10996 10997 10998 10999 11000 11001 11002 11003 #> [11005] 11004 11005 11006 11007 11008 11009 11010 11011 11012 11013 11014 11015 #> [11017] 11016 11017 11018 11019 11020 11021 11022 11023 11024 11025 11026 11027 #> [11029] 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 11038 11039 #> [11041] 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 11051 #> [11053] 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 #> [11065] 11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 #> [11077] 11076 11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 #> [11089] 11088 11089 11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 #> [11101] 11100 11101 11102 11103 11104 11105 11106 11107 11108 11109 11110 11111 #> [11113] 11112 11113 11114 11115 11116 11117 11118 11119 11120 11121 11122 11123 #> [11125] 11124 11125 11126 11127 11128 11129 11130 11131 11132 11133 11134 11135 #> [11137] 11136 11137 11138 11139 11140 11141 11142 11143 11144 11145 11146 11147 #> [11149] 11148 11149 11150 11151 11152 11153 11154 11155 11156 11157 11158 11159 #> [11161] 11160 11161 11162 11163 11164 11165 11166 11167 11168 11169 11170 11171 #> [11173] 11172 11173 11174 11175 11176 11177 11178 11179 11180 11181 11182 11183 #> [11185] 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 11194 11195 #> [11197] 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 11207 #> [11209] 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 #> [11221] 11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 #> [11233] 11232 11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 #> [11245] 11244 11245 11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 #> [11257] 11256 11257 11258 11259 11260 11261 11262 11263 11264 11265 11266 11267 #> [11269] 11268 11269 11270 11271 11272 11273 11274 11275 11276 11277 11278 11279 #> [11281] 11280 11281 11282 11283 11284 11285 11286 11287 11288 11289 11290 11291 #> [11293] 11292 11293 11294 11295 11296 11297 11298 11299 11300 11301 11302 11303 #> [11305] 11304 11305 11306 11307 11308 11309 11310 11311 11312 11313 11314 11315 #> [11317] 11316 11317 11318 11319 11320 11321 11322 11323 11324 11325 11326 11327 #> [11329] 11328 11329 11330 11331 11332 11333 11334 11335 11336 11337 11338 11339 #> [11341] 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 11350 11351 #> [11353] 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 11363 #> [11365] 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 #> [11377] 11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 #> [11389] 11388 11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 #> [11401] 11400 11401 11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 #> [11413] 11412 11413 11414 11415 11416 11417 11418 11419 11420 11421 11422 11423 #> [11425] 11424 11425 11426 11427 11428 11429 11430 11431 11432 11433 11434 11435 #> [11437] 11436 11437 11438 11439 11440 11441 11442 11443 11444 11445 11446 11447 #> [11449] 11448 11449 11450 11451 11452 11453 11454 11455 11456 11457 11458 11459 #> [11461] 11460 11461 11462 11463 11464 11465 11466 11467 11468 11469 11470 11471 #> [11473] 11472 11473 11474 11475 11476 11477 11478 11479 11480 11481 11482 11483 #> [11485] 11484 11485 11486 11487 11488 11489 11490 11491 11492 11493 11494 11495 #> [11497] 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 11506 11507 #> [11509] 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 11519 #> [11521] 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 #> [11533] 11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 #> [11545] 11544 11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 #> [11557] 11556 11557 11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 #> [11569] 11568 11569 11570 11571 11572 11573 11574 11575 11576 11577 11578 11579 #> [11581] 11580 11581 11582 11583 11584 11585 11586 11587 11588 11589 11590 11591 #> [11593] 11592 11593 11594 11595 11596 11597 11598 11599 11600 11601 11602 11603 #> [11605] 11604 11605 11606 11607 11608 11609 11610 11611 11612 11613 11614 11615 #> [11617] 11616 11617 11618 11619 11620 11621 11622 11623 11624 11625 11626 11627 #> [11629] 11628 11629 11630 11631 11632 11633 11634 11635 11636 11637 11638 11639 #> [11641] 11640 11641 11642 11643 11644 11645 11646 11647 11648 11649 11650 11651 #> [11653] 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 11662 11663 #> [11665] 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 11675 #> [11677] 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 #> [11689] 11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 #> [11701] 11700 11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 #> [11713] 11712 11713 11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 #> [11725] 11724 11725 11726 11727 11728 11729 11730 11731 11732 11733 11734 11735 #> [11737] 11736 11737 11738 11739 11740 11741 11742 11743 11744 11745 11746 11747 #> [11749] 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 11758 11759 #> [11761] 11760 11761 11762 11763 11764 11765 11766 11767 11768 11769 11770 11771 #> [11773] 11772 11773 11774 11775 11776 11777 11778 11779 11780 11781 11782 11783 #> [11785] 11784 11785 11786 11787 11788 11789 11790 11791 11792 11793 11794 11795 #> [11797] 11796 11797 11798 11799 11800 11801 11802 11803 11804 11805 11806 11807 #> [11809] 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 11818 11819 #> [11821] 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 11831 #> [11833] 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 #> [11845] 11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 #> [11857] 11856 11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 #> [11869] 11868 11869 11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 #> [11881] 11880 11881 11882 11883 11884 11885 11886 11887 11888 11889 11890 11891 #> [11893] 11892 11893 11894 11895 11896 11897 11898 11899 11900 11901 11902 11903 #> [11905] 11904 11905 11906 11907 11908 11909 11910 11911 11912 11913 11914 11915 #> [11917] 11916 11917 11918 11919 11920 11921 11922 11923 11924 11925 11926 11927 #> [11929] 11928 11929 11930 11931 11932 11933 11934 11935 11936 11937 11938 11939 #> [11941] 11940 11941 11942 11943 11944 11945 11946 11947 11948 11949 11950 11951 #> [11953] 11952 11953 11954 11955 11956 11957 11958 11959 11960 11961 11962 11963 #> [11965] 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 11974 11975 #> [11977] 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 11987 #> [11989] 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 #> [12001] 12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 #> [12013] 12012 12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 #> [12025] 12024 12025 12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 #> [12037] 12036 12037 12038 12039 12040 12041 12042 12043 12044 12045 12046 12047 #> [12049] 12048 12049 12050 12051 12052 12053 12054 12055 12056 12057 12058 12059 #> [12061] 12060 12061 12062 12063 12064 12065 12066 12067 12068 12069 12070 12071 #> [12073] 12072 12073 12074 12075 12076 12077 12078 12079 12080 12081 12082 12083 #> [12085] 12084 12085 12086 12087 12088 12089 12090 12091 12092 12093 12094 12095 #> [12097] 12096 12097 12098 12099 12100 12101 12102 12103 12104 12105 12106 12107 #> [12109] 12108 12109 12110 12111 12112 12113 12114 12115 12116 12117 12118 12119 #> [12121] 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 12130 12131 #> [12133] 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 12143 #> [12145] 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 #> [12157] 12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 #> [12169] 12168 12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 #> [12181] 12180 12181 12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 #> [12193] 12192 12193 12194 12195 12196 12197 12198 12199 12200 12201 12202 12203 #> [12205] 12204 12205 12206 12207 12208 12209 12210 12211 12212 12213 12214 12215 #> [12217] 12216 12217 12218 12219 12220 12221 12222 12223 12224 12225 12226 12227 #> [12229] 12228 12229 12230 12231 12232 12233 12234 12235 12236 12237 12238 12239 #> [12241] 12240 12241 12242 12243 12244 12245 12246 12247 12248 12249 12250 12251 #> [12253] 12252 12253 12254 12255 12256 12257 12258 12259 12260 12261 12262 12263 #> [12265] 12264 12265 12266 12267 12268 12269 12270 12271 12272 12273 12274 12275 #> [12277] 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 12286 12287 #> [12289] 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 12299 #> [12301] 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 #> [12313] 12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 #> [12325] 12324 12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 #> [12337] 12336 12337 12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 #> [12349] 12348 12349 12350 12351 12352 12353 12354 12355 12356 12357 12358 12359 #> [12361] 12360 12361 12362 12363 12364 12365 12366 12367 12368 12369 12370 12371 #> [12373] 12372 12373 12374 12375 12376 12377 12378 12379 12380 12381 12382 12383 #> [12385] 12384 12385 12386 12387 12388 12389 12390 12391 12392 12393 12394 12395 #> [12397] 12396 12397 12398 12399 12400 12401 12402 12403 12404 12405 12406 12407 #> [12409] 12408 12409 12410 12411 12412 12413 12414 12415 12416 12417 12418 12419 #> [12421] 12420 12421 12422 12423 12424 12425 12426 12427 12428 12429 12430 12431 #> [12433] 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 12442 12443 #> [12445] 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 12455 #> [12457] 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 #> [12469] 12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 #> [12481] 12480 12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 #> [12493] 12492 12493 12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 #> [12505] 12504 12505 12506 12507 12508 12509 12510 12511 12512 12513 12514 12515 #> [12517] 12516 12517 12518 12519 12520 12521 12522 12523 12524 12525 12526 12527 #> [12529] 12528 12529 12530 12531 12532 12533 12534 12535 12536 12537 12538 12539 #> [12541] 12540 12541 12542 12543 12544 12545 12546 12547 12548 12549 12550 12551 #> [12553] 12552 12553 12554 12555 12556 12557 12558 12559 12560 12561 12562 12563 #> [12565] 12564 12565 12566 12567 12568 12569 12570 12571 12572 12573 12574 12575 #> [12577] 12576 12577 12578 12579 12580 12581 12582 12583 12584 12585 12586 12587 #> [12589] 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 12598 12599 #> [12601] 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 12611 #> [12613] 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 #> [12625] 12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 #> [12637] 12636 12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 #> [12649] 12648 12649 12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 #> [12661] 12660 12661 12662 12663 12664 12665 12666 12667 12668 12669 12670 12671 #> [12673] 12672 12673 12674 12675 12676 12677 12678 12679 12680 12681 12682 12683 #> [12685] 12684 12685 12686 12687 12688 12689 12690 12691 12692 12693 12694 12695 #> [12697] 12696 12697 12698 12699 12700 12701 12702 12703 12704 12705 12706 12707 #> [12709] 12708 12709 12710 12711 12712 12713 12714 12715 12716 12717 12718 12719 #> [12721] 12720 12721 12722 12723 12724 12725 12726 12727 12728 12729 12730 12731 #> [12733] 12732 12733 12734 12735 12736 12737 12738 12739 12740 12741 12742 12743 #> [12745] 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 12754 12755 #> [12757] 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 12767 #> [12769] 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 #> [12781] 12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 #> [12793] 12792 12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 #> [12805] 12804 12805 12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 #> [12817] 12816 12817 12818 12819 12820 12821 12822 12823 12824 12825 12826 12827 #> [12829] 12828 12829 12830 12831 12832 12833 12834 12835 12836 12837 12838 12839 #> [12841] 12840 12841 12842 12843 12844 12845 12846 12847 12848 12849 12850 12851 #> [12853] 12852 12853 12854 12855 12856 12857 12858 12859 12860 12861 12862 12863 #> [12865] 12864 12865 12866 12867 12868 12869 12870 12871 12872 12873 12874 12875 #> [12877] 12876 12877 12878 12879 12880 12881 12882 12883 12884 12885 12886 12887 #> [12889] 12888 12889 12890 12891 12892 12893 12894 12895 12896 12897 12898 12899 #> [12901] 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 12910 12911 #> [12913] 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 12923 #> [12925] 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 #> [12937] 12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 #> [12949] 12948 12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 #> [12961] 12960 12961 12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 #> [12973] 12972 12973 12974 12975 12976 12977 12978 12979 12980 12981 12982 12983 #> [12985] 12984 12985 12986 12987 12988 12989 12990 12991 12992 12993 12994 12995 #> [12997] 12996 12997 12998 12999 13000 13001 13002 13003 13004 13005 13006 13007 #> [13009] 13008 13009 13010 13011 13012 13013 13014 13015 13016 13017 13018 13019 #> [13021] 13020 13021 13022 13023 13024 13025 13026 13027 13028 13029 13030 13031 #> [13033] 13032 13033 13034 13035 13036 13037 13038 13039 13040 13041 13042 13043 #> [13045] 13044 13045 13046 13047 13048 13049 13050 13051 13052 13053 13054 13055 #> [13057] 13056 13057 13058 13059 13060 13061 13062 13063 13064 13065 13066 13067 #> [13069] 13068 13069 13070 13071 13072 13073 13074 13075 13076 13077 13078 13079 #> [13081] 13080 13081 13082 13083 13084 13085 13086 13087 13088 13089 13090 13091 #> [13093] 13092 13093 13094 13095 13096 13097 13098 13099 13100 13101 13102 13103 #> [13105] 13104 13105 13106 13107 13108 13109 13110 13111 13112 13113 13114 13115 #> [13117] 13116 13117 13118 13119 13120 13121 13122 13123 13124 13125 13126 13127 #> [13129] 13128 13129 13130 13131 13132 13133 13134 13135 13136 13137 13138 13139 #> [13141] 13140 13141 13142 13143 13144 13145 13146 13147 13148 13149 13150 13151 #> [13153] 13152 13153 13154 13155 13156 13157 13158 13159 13160 13161 13162 13163 #> [13165] 13164 13165 13166 13167 13168 13169 13170 13171 13172 13173 13174 13175 #> [13177] 13176 13177 13178 13179 13180 13181 13182 13183 13184 13185 13186 13187 #> [13189] 13188 13189 13190 13191 13192 13193 13194 13195 13196 13197 13198 13199 #> [13201] 13200 13201 13202 13203 13204 13205 13206 13207 13208 13209 13210 13211 #> [13213] 13212 13213 13214 13215 13216 13217 13218 13219 13220 13221 13222 13223 #> [13225] 13224 13225 13226 13227 13228 13229 13230 13231 13232 13233 13234 13235 #> [13237] 13236 13237 13238 13239 13240 13241 13242 13243 13244 13245 13246 13247 #> [13249] 13248 13249 13250 13251 13252 13253 13254 13255 13256 13257 13258 13259 #> [13261] 13260 13261 13262 13263 13264 13265 13266 13267 13268 13269 13270 13271 #> [13273] 13272 13273 13274 13275 13276 13277 13278 13279 13280 13281 13282 13283 #> [13285] 13284 13285 13286 13287 13288 13289 13290 13291 13292 13293 13294 13295 #> [13297] 13296 13297 13298 13299 13300 13301 13302 13303 13304 13305 13306 13307 #> [13309] 13308 13309 13310 13311 13312 13313 13314 13315 13316 13317 13318 13319 #> [13321] 13320 13321 13322 13323 13324 13325 13326 13327 13328 13329 13330 13331 #> [13333] 13332 13333 13334 13335 13336 13337 13338 13339 13340 13341 13342 13343 #> [13345] 13344 13345 13346 13347 13348 13349 13350 13351 13352 13353 13354 13355 #> [13357] 13356 13357 13358 13359 13360 13361 13362 13363 13364 13365 13366 13367 #> [13369] 13368 13369 13370 13371 13372 13373 13374 13375 13376 13377 13378 13379 #> [13381] 13380 13381 13382 13383 13384 13385 13386 13387 13388 13389 13390 13391 #> [13393] 13392 13393 13394 13395 13396 13397 13398 13399 13400 13401 13402 13403 #> [13405] 13404 13405 13406 13407 13408 13409 13410 13411 13412 13413 13414 13415 #> [13417] 13416 13417 13418 13419 13420 13421 13422 13423 13424 13425 13426 13427 #> [13429] 13428 13429 13430 13431 13432 13433 13434 13435 13436 13437 13438 13439 #> [13441] 13440 13441 13442 13443 13444 13445 13446 13447 13448 13449 13450 13451 #> [13453] 13452 13453 13454 13455 13456 13457 13458 13459 13460 13461 13462 13463 #> [13465] 13464 13465 13466 13467 13468 13469 13470 13471 13472 13473 13474 13475 #> [13477] 13476 13477 13478 13479 13480 13481 13482 13483 13484 13485 13486 13487 #> [13489] 13488 13489 13490 13491 13492 13493 13494 13495 13496 13497 13498 13499 #> [13501] 13500 13501 13502 13503 13504 13505 13506 13507 13508 13509 13510 13511 #> [13513] 13512 13513 13514 13515 13516 13517 13518 13519 13520 13521 13522 13523 #> [13525] 13524 13525 13526 13527 13528 13529 13530 13531 13532 13533 13534 13535 #> [13537] 13536 13537 13538 13539 13540 13541 13542 13543 13544 13545 13546 13547 #> [13549] 13548 13549 13550 13551 13552 13553 13554 13555 13556 13557 13558 13559 #> [13561] 13560 13561 13562 13563 13564 13565 13566 13567 13568 13569 13570 13571 #> [13573] 13572 13573 13574 13575 13576 13577 13578 13579 13580 13581 13582 13583 #> [13585] 13584 13585 13586 13587 13588 13589 13590 13591 13592 13593 13594 13595 #> [13597] 13596 13597 13598 13599 13600 13601 13602 13603 13604 13605 13606 13607 #> [13609] 13608 13609 13610 13611 13612 13613 13614 13615 13616 13617 13618 13619 #> [13621] 13620 13621 13622 13623 13624 13625 13626 13627 13628 13629 13630 13631 #> [13633] 13632 13633 13634 13635 13636 13637 13638 13639 13640 13641 13642 13643 #> [13645] 13644 13645 13646 13647 13648 13649 13650 13651 13652 13653 13654 13655 #> [13657] 13656 13657 13658 13659 13660 13661 13662 13663 13664 13665 13666 13667 #> [13669] 13668 13669 13670 13671 13672 13673 13674 13675 13676 13677 13678 13679 #> [13681] 13680 13681 13682 13683 13684 13685 13686 13687 13688 13689 13690 13691 #> [13693] 13692 13693 13694 13695 13696 13697 13698 13699 13700 13701 13702 13703 #> [13705] 13704 13705 13706 13707 13708 13709 13710 13711 13712 13713 13714 13715 #> [13717] 13716 13717 13718 13719 13720 13721 13722 13723 13724 13725 13726 13727 #> [13729] 13728 13729 13730 13731 13732 13733 13734 13735 13736 13737 13738 13739 #> [13741] 13740 13741 13742 13743 13744 13745 13746 13747 13748 13749 13750 13751 #> [13753] 13752 13753 13754 13755 13756 13757 13758 13759 13760 13761 13762 13763 #> [13765] 13764 13765 13766 13767 13768 13769 13770 13771 13772 13773 13774 13775 #> [13777] 13776 13777 13778 13779 13780 13781 13782 13783 13784 13785 13786 13787 #> [13789] 13788 13789 13790 13791 13792 13793 13794 13795 13796 13797 13798 13799 #> [13801] 13800 13801 13802 13803 13804 13805 13806 13807 13808 13809 13810 13811 #> [13813] 13812 13813 13814 13815 13816 13817 13818 13819 13820 13821 13822 13823 #> [13825] 13824 13825 13826 13827 13828 13829 13830 13831 13832 13833 13834 13835 #> [13837] 13836 13837 13838 13839 13840 13841 13842 13843 13844 13845 13846 13847 #> [13849] 13848 13849 13850 13851 13852 13853 13854 13855 13856 13857 13858 13859 #> [13861] 13860 13861 13862 13863 13864 13865 13866 13867 13868 13869 13870 13871 #> [13873] 13872 13873 13874 13875 13876 13877 13878 13879 13880 13881 13882 13883 #> [13885] 13884 13885 13886 13887 13888 13889 13890 13891 13892 13893 13894 13895 #> [13897] 13896 13897 13898 13899 13900 13901 13902 13903 13904 13905 13906 13907 #> [13909] 13908 13909 13910 13911 13912 13913 13914 13915 13916 13917 13918 13919 #> [13921] 13920 13921 13922 13923 13924 13925 13926 13927 13928 13929 13930 13931 #> [13933] 13932 13933 13934 13935 13936 13937 13938 13939 13940 13941 13942 13943 #> [13945] 13944 13945 13946 13947 13948 13949 13950 13951 13952 13953 13954 13955 #> [13957] 13956 13957 13958 13959 13960 13961 13962 13963 13964 13965 13966 13967 #> [13969] 13968 13969 13970 13971 13972 13973 13974 13975 13976 13977 13978 13979 #> [13981] 13980 13981 13982 13983 13984 13985 13986 13987 13988 13989 13990 13991 #> [13993] 13992 13993 13994 13995 13996 13997 13998 13999 14000 14001 14002 14003 #> [14005] 14004 14005 14006 14007 14008 14009 14010 14011 14012 14013 14014 14015 #> [14017] 14016 14017 14018 14019 14020 14021 14022 14023 14024 14025 14026 14027 #> [14029] 14028 14029 14030 14031 14032 14033 14034 14035 14036 14037 14038 14039 #> [14041] 14040 14041 14042 14043 14044 14045 14046 14047 14048 14049 14050 14051 #> [14053] 14052 14053 14054 14055 14056 14057 14058 14059 14060 14061 14062 14063 #> [14065] 14064 14065 14066 14067 14068 14069 14070 14071 14072 14073 14074 14075 #> [14077] 14076 14077 14078 14079 14080 14081 14082 14083 14084 14085 14086 14087 #> [14089] 14088 14089 14090 14091 14092 14093 14094 14095 14096 14097 14098 14099 #> [14101] 14100 14101 14102 14103 14104 14105 14106 14107 14108 14109 14110 14111 #> [14113] 14112 14113 14114 14115 14116 14117 14118 14119 14120 14121 14122 14123 #> [14125] 14124 14125 14126 14127 14128 14129 14130 14131 14132 14133 14134 14135 #> [14137] 14136 14137 14138 14139 14140 14141 14142 14143 14144 14145 14146 14147 #> [14149] 14148 14149 14150 14151 14152 14153 14154 14155 14156 14157 14158 14159 #> [14161] 14160 14161 14162 14163 14164 14165 14166 14167 14168 14169 14170 14171 #> [14173] 14172 14173 14174 14175 14176 14177 14178 14179 14180 14181 14182 14183 #> [14185] 14184 14185 14186 14187 14188 14189 14190 14191 14192 14193 14194 14195 #> [14197] 14196 14197 14198 14199 14200 14201 14202 14203 14204 14205 14206 14207 #> [14209] 14208 14209 14210 14211 14212 14213 14214 14215 14216 14217 14218 14219 #> [14221] 14220 14221 14222 14223 14224 14225 14226 14227 14228 14229 14230 14231 #> [14233] 14232 14233 14234 14235 14236 14237 14238 14239 14240 14241 14242 14243 #> [14245] 14244 14245 14246 14247 14248 14249 14250 14251 14252 14253 14254 14255 #> [14257] 14256 14257 14258 14259 14260 14261 14262 14263 14264 14265 14266 14267 #> [14269] 14268 14269 14270 14271 14272 14273 14274 14275 14276 14277 14278 14279 #> [14281] 14280 14281 14282 14283 14284 14285 14286 14287 14288 14289 14290 14291 #> [14293] 14292 14293 14294 14295 14296 14297 14298 14299 14300 14301 14302 14303 #> [14305] 14304 14305 14306 14307 14308 14309 14310 14311 14312 14313 14314 14315 #> [14317] 14316 14317 14318 14319 14320 14321 14322 14323 14324 14325 14326 14327 #> [14329] 14328 14329 14330 14331 14332 14333 14334 14335 14336 14337 14338 14339 #> [14341] 14340 14341 14342 14343 14344 14345 14346 14347 14348 14349 14350 14351 #> [14353] 14352 14353 14354 14355 14356 14357 14358 14359 14360 14361 14362 14363 #> [14365] 14364 14365 14366 14367 14368 14369 14370 14371 14372 14373 14374 14375 #> [14377] 14376 14377 14378 14379 14380 14381 14382 14383 14384 14385 14386 14387 #> [14389] 14388 14389 14390 14391 14392 14393 14394 14395 14396 14397 14398 14399 #> [14401] 14400 14401 14402 14403 14404 14405 14406 14407 14408 14409 14410 14411 #> [14413] 14412 14413 14414 14415 14416 14417 14418 14419 14420 14421 14422 14423 #> [14425] 14424 14425 14426 14427 14428 14429 14430 14431 14432 14433 14434 14435 #> [14437] 14436 14437 14438 14439 14440 14441 14442 14443 14444 14445 14446 14447 #> [14449] 14448 14449 14450 14451 14452 14453 14454 14455 14456 14457 14458 14459 #> [14461] 14460 14461 14462 14463 14464 14465 14466 14467 14468 14469 14470 14471 #> [14473] 14472 14473 14474 14475 14476 14477 14478 14479 14480 14481 14482 14483 #> [14485] 14484 14485 14486 14487 14488 14489 14490 14491 14492 14493 14494 14495 #> [14497] 14496 14497 14498 14499 14500 14501 14502 14503 14504 14505 14506 14507 #> [14509] 14508 14509 14510 14511 14512 14513 14514 14515 14516 14517 14518 14519 #> [14521] 14520 14521 14522 14523 14524 14525 14526 14527 14528 14529 14530 14531 #> [14533] 14532 14533 14534 14535 14536 14537 14538 14539 14540 14541 14542 14543 #> [14545] 14544 14545 14546 14547 14548 14549 14550 14551 14552 14553 14554 14555 #> [14557] 14556 14557 14558 14559 14560 14561 14562 14563 14564 14565 14566 14567 #> [14569] 14568 14569 14570 14571 14572 14573 14574 14575 14576 14577 14578 14579 #> [14581] 14580 14581 14582 14583 14584 14585 14586 14587 14588 14589 14590 14591 #> [14593] 14592 14593 14594 14595 14596 14597 14598 14599 14600 14601 14602 14603 #> [14605] 14604 14605 14606 14607 14608 14609 14610 14611 14612 14613 14614 14615 #> [14617] 14616 14617 14618 14619 14620 14621 14622 14623 14624 14625 14626 14627 #> [14629] 14628 14629 14630 14631 14632 14633 14634 14635 14636 14637 14638 14639 #> [14641] 14640 14641 14642 14643 14644 14645 14646 14647 14648 14649 14650 14651 #> [14653] 14652 14653 14654 14655 14656 14657 14658 14659 14660 14661 14662 14663 #> [14665] 14664 14665 14666 14667 14668 14669 14670 14671 14672 14673 14674 14675 #> [14677] 14676 14677 14678 14679 14680 14681 14682 14683 14684 14685 14686 14687 #> [14689] 14688 14689 14690 14691 14692 14693 14694 14695 14696 14697 14698 14699 #> [14701] 14700 14701 14702 14703 14704 14705 14706 14707 14708 14709 14710 14711 #> [14713] 14712 14713 14714 14715 14716 14717 14718 14719 14720 14721 14722 14723 #> [14725] 14724 14725 14726 14727 14728 14729 14730 14731 14732 14733 14734 14735 #> [14737] 14736 14737 14738 14739 14740 14741 14742 14743 14744 14745 14746 14747 #> [14749] 14748 14749 14750 14751 14752 14753 14754 14755 14756 14757 14758 14759 #> [14761] 14760 14761 14762 14763 14764 14765 14766 14767 14768 14769 14770 14771 #> [14773] 14772 14773 14774 14775 14776 14777 14778 14779 14780 14781 14782 14783 #> [14785] 14784 14785 14786 14787 14788 14789 14790 14791 14792 14793 14794 14795 #> [14797] 14796 14797 14798 14799 14800 14801 14802 14803 14804 14805 14806 14807 #> [14809] 14808 14809 14810 14811 14812 14813 14814 14815 14816 14817 14818 14819 #> [14821] 14820 14821 14822 14823 14824 14825 14826 14827 14828 14829 14830 14831 #> [14833] 14832 14833 14834 14835 14836 14837 14838 14839 14840 14841 14842 14843 #> [14845] 14844 14845 14846 14847 14848 14849 14850 14851 14852 14853 14854 14855 #> [14857] 14856 14857 14858 14859 14860 14861 14862 14863 14864 14865 14866 14867 #> [14869] 14868 14869 14870 14871 14872 14873 14874 14875 14876 14877 14878 14879 #> [14881] 14880 14881 14882 14883 14884 14885 14886 14887 14888 14889 14890 14891 #> [14893] 14892 14893 14894 14895 14896 14897 14898 14899 14900 14901 14902 14903 #> [14905] 14904 14905 14906 14907 14908 14909 14910 14911 14912 14913 14914 14915 #> [14917] 14916 14917 14918 14919 14920 14921 14922 14923 14924 14925 14926 14927 #> [14929] 14928 14929 14930 14931 14932 14933 14934 14935 14936 14937 14938 14939 #> [14941] 14940 14941 14942 14943 14944 14945 14946 14947 14948 14949 14950 14951 #> [14953] 14952 14953 14954 14955 14956 14957 14958 14959 14960 14961 14962 14963 #> [14965] 14964 14965 14966 14967 14968 14969 14970 14971 14972 14973 14974 14975 #> [14977] 14976 14977 14978 14979 14980 14981 14982 14983 14984 14985 14986 14987 #> [14989] 14988 14989 14990 14991 14992 14993 14994 14995 14996 14997 14998 14999 #> [15001] 15000 15001 15002 15003 15004 15005 15006 15007 15008 15009 15010 15011 #> [15013] 15012 15013 15014 15015 15016 15017 15018 15019 15020 15021 15022 15023 #> [15025] 15024 15025 15026 15027 15028 15029 15030 15031 15032 15033 15034 15035 #> [15037] 15036 15037 15038 15039 15040 15041 15042 15043 15044 15045 15046 15047 #> [15049] 15048 15049 15050 15051 15052 15053 15054 15055 15056 15057 15058 15059 #> [15061] 15060 15061 15062 15063 15064 15065 15066 15067 15068 15069 15070 15071 #> [15073] 15072 15073 15074 15075 15076 15077 15078 15079 15080 15081 15082 15083 #> [15085] 15084 15085 15086 15087 15088 15089 15090 15091 15092 15093 15094 15095 #> [15097] 15096 15097 15098 15099 15100 15101 15102 15103 15104 15105 15106 15107 #> [15109] 15108 15109 15110 15111 15112 15113 15114 15115 15116 15117 15118 15119 #> [15121] 15120 15121 15122 15123 15124 15125 15126 15127 15128 15129 15130 15131 #> [15133] 15132 15133 15134 15135 15136 15137 15138 15139 15140 15141 15142 15143 #> [15145] 15144 15145 15146 15147 15148 15149 15150 15151 15152 15153 15154 15155 #> [15157] 15156 15157 15158 15159 15160 15161 15162 15163 15164 15165 15166 15167 #> [15169] 15168 15169 15170 15171 15172 15173 15174 15175 15176 15177 15178 15179 #> [15181] 15180 15181 15182 15183 15184 15185 15186 15187 15188 15189 15190 15191 #> [15193] 15192 15193 15194 15195 15196 15197 15198 15199 15200 15201 15202 15203 #> [15205] 15204 15205 15206 15207 15208 15209 15210 15211 15212 15213 15214 15215 #> [15217] 15216 15217 15218 15219 15220 15221 15222 15223 15224 15225 15226 15227 #> [15229] 15228 15229 15230 15231 15232 15233 15234 15235 15236 15237 15238 15239 #> [15241] 15240 15241 15242 15243 15244 15245 15246 15247 15248 15249 15250 15251 #> [15253] 15252 15253 15254 15255 15256 15257 15258 15259 15260 15261 15262 15263 #> [15265] 15264 15265 15266 15267 15268 15269 15270 15271 15272 15273 15274 15275 #> [15277] 15276 15277 15278 15279 15280 15281 15282 15283 15284 15285 15286 15287 #> [15289] 15288 15289 15290 15291 15292 15293 15294 15295 15296 15297 15298 15299 #> [15301] 15300 15301 15302 15303 15304 15305 15306 15307 15308 15309 15310 15311 #> [15313] 15312 15313 15314 15315 15316 15317 15318 15319 15320 15321 15322 15323 #> [15325] 15324 15325 15326 15327 15328 15329 15330 15331 15332 15333 15334 15335 #> [15337] 15336 15337 15338 15339 15340 15341 15342 15343 15344 15345 15346 15347 #> [15349] 15348 15349 15350 15351 15352 15353 15354 15355 15356 15357 15358 15359 #> [15361] 15360 15361 15362 15363 15364 15365 15366 15367 15368 15369 15370 15371 #> [15373] 15372 15373 15374 15375 15376 15377 15378 15379 15380 15381 15382 15383 #> [15385] 15384 15385 15386 15387 15388 15389 15390 15391 15392 15393 15394 15395 #> [15397] 15396 15397 15398 15399 15400 15401 15402 15403 15404 15405 15406 15407 #> [15409] 15408 15409 15410 15411 15412 15413 15414 15415 15416 15417 15418 15419 #> [15421] 15420 15421 15422 15423 15424 15425 15426 15427 15428 15429 15430 15431 #> [15433] 15432 15433 15434 15435 15436 15437 15438 15439 15440 15441 15442 15443 #> [15445] 15444 15445 15446 15447 15448 15449 15450 15451 15452 15453 15454 15455 #> [15457] 15456 15457 15458 15459 15460 15461 15462 15463 15464 15465 15466 15467 #> [15469] 15468 15469 15470 15471 15472 15473 15474 15475 15476 15477 15478 15479 #> [15481] 15480 15481 15482 15483 15484 15485 15486 15487 15488 15489 15490 15491 #> [15493] 15492 15493 15494 15495 15496 15497 15498 15499 15500 15501 15502 15503 #> [15505] 15504 15505 15506 15507 15508 15509 15510 15511 15512 15513 15514 15515 #> [15517] 15516 15517 15518 15519 15520 15521 15522 15523 15524 15525 15526 15527 #> [15529] 15528 15529 15530 15531 15532 15533 15534 15535 15536 15537 15538 15539 #> [15541] 15540 15541 15542 15543 15544 15545 15546 15547 15548 15549 15550 15551 #> [15553] 15552 15553 15554 15555 15556 15557 15558 15559 15560 15561 15562 15563 #> [15565] 15564 15565 15566 15567 15568 15569 15570 15571 15572 15573 15574 15575 #> [15577] 15576 15577 15578 15579 15580 15581 15582 15583 15584 15585 15586 15587 #> [15589] 15588 15589 15590 15591 15592 15593 15594 15595 15596 15597 15598 15599 #> [15601] 15600 15601 15602 15603 15604 15605 15606 15607 15608 15609 15610 15611 #> [15613] 15612 15613 15614 15615 15616 15617 15618 15619 15620 15621 15622 15623 #> [15625] 15624 15625 15626 15627 15628 15629 15630 15631 15632 15633 15634 15635 #> [15637] 15636 15637 15638 15639 15640 15641 15642 15643 15644 15645 15646 15647 #> [15649] 15648 15649 15650 15651 15652 15653 15654 15655 15656 15657 15658 15659 #> [15661] 15660 15661 15662 15663 15664 15665 15666 15667 15668 15669 15670 15671 #> [15673] 15672 15673 15674 15675 15676 15677 15678 15679 15680 15681 15682 15683 #> [15685] 15684 15685 15686 15687 15688 15689 15690 15691 15692 15693 15694 15695 #> [15697] 15696 15697 15698 15699 15700 15701 15702 15703 15704 15705 15706 15707 #> [15709] 15708 15709 15710 15711 15712 15713 15714 15715 15716 15717 15718 15719 #> [15721] 15720 15721 15722 15723 15724 15725 15726 15727 15728 15729 15730 15731 #> [15733] 15732 15733 15734 15735 15736 15737 15738 15739 15740 15741 15742 15743 #> [15745] 15744 15745 15746 15747 15748 15749 15750 15751 15752 15753 15754 15755 #> [15757] 15756 15757 15758 15759 15760 15761 15762 15763 15764 15765 15766 15767 #> [15769] 15768 15769 15770 15771 15772 15773 15774 15775 15776 15777 15778 15779 #> [15781] 15780 15781 15782 15783 15784 15785 15786 15787 15788 15789 15790 15791 #> [15793] 15792 15793 15794 15795 15796 15797 15798 15799 15800 15801 15802 15803 #> [15805] 15804 15805 15806 15807 15808 15809 15810 15811 15812 15813 15814 15815 #> [15817] 15816 15817 15818 15819 15820 15821 15822 15823 15824 15825 15826 15827 #> [15829] 15828 15829 15830 15831 15832 15833 15834 15835 15836 15837 15838 15839 #> [15841] 15840 15841 15842 15843 15844 15845 15846 15847 15848 15849 15850 15851 #> [15853] 15852 15853 15854 15855 15856 15857 15858 15859 15860 15861 15862 15863 #> [15865] 15864 15865 15866 15867 15868 15869 15870 15871 15872 15873 15874 15875 #> [15877] 15876 15877 15878 15879 15880 15881 15882 15883 15884 15885 15886 15887 #> [15889] 15888 15889 15890 15891 15892 15893 15894 15895 15896 15897 15898 15899 #> [15901] 15900 15901 15902 15903 15904 15905 15906 15907 15908 15909 15910 15911 #> [15913] 15912 15913 15914 15915 15916 15917 15918 15919 15920 15921 15922 15923 #> [15925] 15924 15925 15926 15927 15928 15929 15930 15931 15932 15933 15934 15935 #> [15937] 15936 15937 15938 15939 15940 15941 15942 15943 15944 15945 15946 15947 #> [15949] 15948 15949 15950 15951 15952 15953 15954 15955 15956 15957 15958 15959 #> [15961] 15960 15961 15962 15963 15964 15965 15966 15967 15968 15969 15970 15971 #> [15973] 15972 15973 15974 15975 15976 15977 15978 15979 15980 15981 15982 15983 #> [15985] 15984 15985 15986 15987 15988 15989 15990 15991 15992 15993 15994 15995 #> [15997] 15996 15997 15998 15999 16000 16001 16002 16003 16004 16005 16006 16007 #> [16009] 16008 16009 16010 16011 16012 16013 16014 16015 16016 16017 16018 16019 #> [16021] 16020 16021 16022 16023 16024 16025 16026 16027 16028 16029 16030 16031 #> [16033] 16032 16033 16034 16035 16036 16037 16038 16039 16040 16041 16042 16043 #> [16045] 16044 16045 16046 16047 16048 16049 16050 16051 16052 16053 16054 16055 #> [16057] 16056 16057 16058 16059 16060 16061 16062 16063 16064 16065 16066 16067 #> [16069] 16068 16069 16070 16071 16072 16073 16074 16075 16076 16077 16078 16079 #> [16081] 16080 16081 16082 16083 16084 16085 16086 16087 16088 16089 16090 16091 #> [16093] 16092 16093 16094 16095 16096 16097 16098 16099 16100 16101 16102 16103 #> [16105] 16104 16105 16106 16107 16108 16109 16110 16111 16112 16113 16114 16115 #> [16117] 16116 16117 16118 16119 16120 16121 16122 16123 16124 16125 16126 16127 #> [16129] 16128 16129 16130 16131 16132 16133 16134 16135 16136 16137 16138 16139 #> [16141] 16140 16141 16142 16143 16144 16145 16146 16147 16148 16149 16150 16151 #> [16153] 16152 16153 16154 16155 16156 16157 16158 16159 16160 16161 16162 16163 #> [16165] 16164 16165 16166 16167 16168 16169 16170 16171 16172 16173 16174 16175 #> [16177] 16176 16177 16178 16179 16180 16181 16182 16183 16184 16185 16186 16187 #> [16189] 16188 16189 16190 16191 16192 16193 16194 16195 16196 16197 16198 16199 #> [16201] 16200 16201 16202 16203 16204 16205 16206 16207 16208 16209 16210 16211 #> [16213] 16212 16213 16214 16215 16216 16217 16218 16219 16220 16221 16222 16223 #> [16225] 16224 16225 16226 16227 16228 16229 16230 16231 16232 16233 16234 16235 #> [16237] 16236 16237 16238 16239 16240 16241 16242 16243 16244 16245 16246 16247 #> [16249] 16248 16249 16250 16251 16252 16253 16254 16255 16256 16257 16258 16259 #> [16261] 16260 16261 16262 16263 16264 16265 16266 16267 16268 16269 16270 16271 #> [16273] 16272 16273 16274 16275 16276 16277 16278 16279 16280 16281 16282 16283 #> [16285] 16284 16285 16286 16287 16288 16289 16290 16291 16292 16293 16294 16295 #> [16297] 16296 16297 16298 16299 16300 16301 16302 16303 16304 16305 16306 16307 #> [16309] 16308 16309 16310 16311 16312 16313 16314 16315 16316 16317 16318 16319 #> [16321] 16320 16321 16322 16323 16324 16325 16326 16327 16328 16329 16330 16331 #> [16333] 16332 16333 16334 16335 16336 16337 16338 16339 16340 16341 16342 16343 #> [16345] 16344 16345 16346 16347 16348 16349 16350 16351 16352 16353 16354 16355 #> [16357] 16356 16357 16358 16359 16360 16361 16362 16363 16364 16365 16366 16367 #> [16369] 16368 16369 16370 16371 16372 16373 16374 16375 16376 16377 16378 16379 #> [16381] 16380 16381 16382 16383 16384 16385 16386 16387 16388 16389 16390 16391 #> [16393] 16392 16393 16394 16395 16396 16397 16398 16399 16400 16401 16402 16403 #> [16405] 16404 16405 16406 16407 16408 16409 16410 16411 16412 16413 16414 16415 #> [16417] 16416 16417 16418 16419 16420 16421 16422 16423 16424 16425 16426 16427 #> [16429] 16428 16429 16430 16431 16432 16433 16434 16435 16436 16437 16438 16439 #> [16441] 16440 16441 16442 16443 16444 16445 16446 16447 16448 16449 16450 16451 #> [16453] 16452 16453 16454 16455 16456 16457 16458 16459 16460 16461 16462 16463 #> [16465] 16464 16465 16466 16467 16468 16469 16470 16471 16472 16473 16474 16475 #> [16477] 16476 16477 16478 16479 16480 16481 16482 16483 16484 16485 16486 16487 #> [16489] 16488 16489 16490 16491 16492 16493 16494 16495 16496 16497 16498 16499 #> [16501] 16500 16501 16502 16503 16504 16505 16506 16507 16508 16509 16510 16511 #> [16513] 16512 16513 16514 16515 16516 16517 16518 16519 16520 16521 16522 16523 #> [16525] 16524 16525 16526 16527 16528 16529 16530 16531 16532 16533 16534 16535 #> [16537] 16536 16537 16538 16539 16540 16541 16542 16543 16544 16545 16546 16547 #> [16549] 16548 16549 16550 16551 16552 16553 16554 16555 16556 16557 16558 16559 #> [16561] 16560 16561 16562 16563 16564 16565 16566 16567 16568 16569 16570 16571 #> [16573] 16572 16573 16574 16575 16576 16577 16578 16579 16580 16581 16582 16583 #> [16585] 16584 16585 16586 16587 16588 16589 16590 16591 16592 16593 16594 16595 #> [16597] 16596 16597 16598 16599 16600 16601 16602 16603 16604 16605 16606 16607 #> [16609] 16608 16609 16610 16611 16612 16613 16614 16615 16616 16617 16618 16619 #> [16621] 16620 16621 16622 16623 16624 16625 16626 16627 16628 16629 16630 16631 #> [16633] 16632 16633 16634 16635 16636 16637 16638 16639 16640 16641 16642 16643 #> [16645] 16644 16645 16646 16647 16648 16649 16650 16651 16652 16653 16654 16655 #> [16657] 16656 16657 16658 16659 16660 16661 16662 16663 16664 16665 16666 16667 #> [16669] 16668 16669 16670 16671 16672 16673 16674 16675 16676 16677 16678 16679 #> [16681] 16680 16681 16682 16683 16684 16685 16686 16687 16688 16689 16690 16691 #> [16693] 16692 16693 16694 16695 16696 16697 16698 16699 16700 16701 16702 16703 #> [16705] 16704 16705 16706 16707 16708 16709 16710 16711 16712 16713 16714 16715 #> [16717] 16716 16717 16718 16719 16720 16721 16722 16723 16724 16725 16726 16727 #> [16729] 16728 16729 16730 16731 16732 16733 16734 16735 16736 16737 16738 16739 #> [16741] 16740 16741 16742 16743 16744 16745 16746 16747 16748 16749 16750 16751 #> [16753] 16752 16753 16754 16755 16756 16757 16758 16759 16760 16761 16762 16763 #> [16765] 16764 16765 16766 16767 16768 16769 16770 16771 16772 16773 16774 16775 #> [16777] 16776 16777 16778 16779 16780 16781 16782 16783 16784 16785 16786 16787 #> [16789] 16788 16789 16790 16791 16792 16793 16794 16795 16796 16797 16798 16799 #> [16801] 16800 16801 16802 16803 16804 16805 16806 16807 16808 16809 16810 16811 #> [16813] 16812 16813 16814 16815 16816 16817 16818 16819 16820 16821 16822 16823 #> [16825] 16824 16825 16826 16827 16828 16829 16830 16831 16832 16833 16834 16835 #> [16837] 16836 16837 16838 16839 16840 16841 16842 16843 16844 16845 16846 16847 #> [16849] 16848 16849 16850 16851 16852 16853 16854 16855 16856 16857 16858 16859 #> [16861] 16860 16861 16862 16863 16864 16865 16866 16867 16868 16869 16870 16871 #> [16873] 16872 16873 16874 16875 16876 16877 16878 16879 16880 16881 16882 16883 #> [16885] 16884 16885 16886 16887 16888 16889 16890 16891 16892 16893 16894 16895 #> [16897] 16896 16897 16898 16899 16900 16901 16902 16903 16904 16905 16906 16907 #> [16909] 16908 16909 16910 16911 16912 16913 16914 16915 16916 16917 16918 16919 #> [16921] 16920 16921 16922 16923 16924 16925 16926 16927 16928 16929 16930 16931 #> [16933] 16932 16933 16934 16935 16936 16937 16938 16939 16940 16941 16942 16943 #> [16945] 16944 16945 16946 16947 16948 16949 16950 16951 16952 16953 16954 16955 #> [16957] 16956 16957 16958 16959 16960 16961 16962 16963 16964 16965 16966 16967 #> [16969] 16968 16969 16970 16971 16972 16973 16974 16975 16976 16977 16978 16979 #> [16981] 16980 16981 16982 16983 16984 16985 16986 16987 16988 16989 16990 16991 #> [16993] 16992 16993 16994 16995 16996 16997 16998 16999 17000 17001 17002 17003 #> [17005] 17004 17005 17006 17007 17008 17009 17010 17011 17012 17013 17014 17015 #> [17017] 17016 17017 17018 17019 17020 17021 17022 17023 17024 17025 17026 17027 #> [17029] 17028 17029 17030 17031 17032 17033 17034 17035 17036 17037 17038 17039 #> [17041] 17040 17041 17042 17043 17044 17045 17046 17047 17048 17049 17050 17051 #> [17053] 17052 17053 17054 17055 17056 17057 17058 17059 17060 17061 17062 17063 #> [17065] 17064 17065 17066 17067 17068 17069 17070 17071 17072 17073 17074 17075 #> [17077] 17076 17077 17078 17079 17080 17081 17082 17083 17084 17085 17086 17087 #> [17089] 17088 17089 17090 17091 17092 17093 17094 17095 17096 17097 17098 17099 #> [17101] 17100 17101 17102 17103 17104 17105 17106 17107 17108 17109 17110 17111 #> [17113] 17112 17113 17114 17115 17116 17117 17118 17119 17120 17121 17122 17123 #> [17125] 17124 17125 17126 17127 17128 17129 17130 17131 17132 17133 17134 17135 #> [17137] 17136 17137 17138 17139 17140 17141 17142 17143 17144 17145 17146 17147 #> [17149] 17148 17149 17150 17151 17152 17153 17154 17155 17156 17157 17158 17159 #> [17161] 17160 17161 17162 17163 17164 17165 17166 17167 17168 17169 17170 17171 #> [17173] 17172 17173 17174 17175 17176 17177 17178 17179 17180 17181 17182 17183 #> [17185] 17184 17185 17186 17187 17188 17189 17190 17191 17192 17193 17194 17195 #> [17197] 17196 17197 17198 17199 17200 17201 17202 17203 17204 17205 17206 17207 #> [17209] 17208 17209 17210 17211 17212 17213 17214 17215 17216 17217 17218 17219 #> [17221] 17220 17221 17222 17223 17224 17225 17226 17227 17228 17229 17230 17231 #> [17233] 17232 17233 17234 17235 17236 17237 17238 17239 17240 17241 17242 17243 #> [17245] 17244 17245 17246 17247 17248 17249 17250 17251 17252 17253 17254 17255 #> [17257] 17256 17257 17258 17259 17260 17261 17262 17263 17264 17265 17266 17267 #> [17269] 17268 17269 17270 17271 17272 17273 17274 17275 17276 17277 17278 17279 #> [17281] 17280 17281 17282 17283 17284 17285 17286 17287 17288 17289 17290 17291 #> [17293] 17292 17293 17294 17295 17296 17297 17298 17299 17300 17301 17302 17303 #> [17305] 17304 17305 17306 17307 17308 17309 17310 17311 17312 17313 17314 17315 #> [17317] 17316 17317 17318 17319 17320 17321 17322 17323 17324 17325 17326 17327 #> [17329] 17328 17329 17330 17331 17332 17333 17334 17335 17336 17337 17338 17339 #> [17341] 17340 17341 17342 17343 17344 17345 17346 17347 17348 17349 17350 17351 #> [17353] 17352 17353 17354 17355 17356 17357 17358 17359 17360 17361 17362 17363 #> [17365] 17364 17365 17366 17367 17368 17369 17370 17371 17372 17373 17374 17375 #> [17377] 17376 17377 17378 17379 17380 17381 17382 17383 17384 17385 17386 17387 #> [17389] 17388 17389 17390 17391 17392 17393 17394 17395 17396 17397 17398 17399 #> [17401] 17400 17401 17402 17403 17404 17405 17406 17407 17408 17409 17410 17411 #> [17413] 17412 17413 17414 17415 17416 17417 17418 17419 17420 17421 17422 17423 #> [17425] 17424 17425 17426 17427 17428 17429 17430 17431 17432 17433 17434 17435 #> [17437] 17436 17437 17438 17439 17440 17441 17442 17443 17444 17445 17446 17447 #> [17449] 17448 17449 17450 17451 17452 17453 17454 17455 17456 17457 17458 17459 #> [17461] 17460 17461 17462 17463 17464 17465 17466 17467 17468 17469 17470 17471 #> [17473] 17472 17473 17474 17475 17476 17477 17478 17479 17480 17481 17482 17483 #> [17485] 17484 17485 17486 17487 17488 17489 17490 17491 17492 17493 17494 17495 #> [17497] 17496 17497 17498 17499 17500 17501 17502 17503 17504 17505 17506 17507 #> [17509] 17508 17509 17510 17511 17512 17513 17514 17515 17516 17517 17518 17519 #> [17521] 17520 17521 17522 17523 17524 17525 17526 17527 17528 17529 17530 17531 #> [17533] 17532 17533 17534 17535 17536 17537 17538 17539 17540 17541 17542 17543 #> [17545] 17544 17545 17546 17547 17548 17549 17550 17551 17552 17553 17554 17555 #> [17557] 17556 17557 17558 17559 17560 17561 17562 17563 17564 17565 17566 17567 #> [17569] 17568 17569 17570 17571 17572 17573 17574 17575 17576 17577 17578 17579 #> [17581] 17580 17581 17582 17583 17584 17585 17586 17587 17588 17589 17590 17591 #> [17593] 17592 17593 17594 17595 17596 17597 17598 17599 17600 17601 17602 17603 #> [17605] 17604 17605 17606 17607 17608 17609 17610 17611 17612 17613 17614 17615 #> [17617] 17616 17617 17618 17619 17620 17621 17622 17623 17624 17625 17626 17627 #> [17629] 17628 17629 17630 17631 17632 17633 17634 17635 17636 17637 17638 17639 #> [17641] 17640 17641 17642 17643 17644 17645 17646 17647 17648 17649 17650 17651 #> [17653] 17652 17653 17654 17655 17656 17657 17658 17659 17660 17661 17662 17663 #> [17665] 17664 17665 17666 17667 17668 17669 17670 17671 17672 17673 17674 17675 #> [17677] 17676 17677 17678 17679 17680 17681 17682 17683 17684 17685 17686 17687 #> [17689] 17688 17689 17690 17691 17692 17693 17694 17695 17696 17697 17698 17699 #> [17701] 17700 17701 17702 17703 17704 17705 17706 17707 17708 17709 17710 17711 #> [17713] 17712 17713 17714 17715 17716 17717 17718 17719 17720 17721 17722 17723 #> [17725] 17724 17725 17726 17727 17728 17729 17730 17731 17732 17733 17734 17735 #> [17737] 17736 17737 17738 17739 17740 17741 17742 17743 17744 17745 17746 17747 #> [17749] 17748 17749 17750 17751 17752 17753 17754 17755 17756 17757 17758 17759 #> [17761] 17760 17761 17762 17763 17764 17765 17766 17767 17768 17769 17770 17771 #> [17773] 17772 17773 17774 17775 17776 17777 17778 17779 17780 17781 17782 17783 #> [17785] 17784 17785 17786 17787 17788 17789 17790 17791 17792 17793 17794 17795 #> [17797] 17796 17797 17798 17799 17800 17801 17802 17803 17804 17805 17806 17807 #> [17809] 17808 17809 17810 17811 17812 17813 17814 17815 17816 17817 17818 17819 #> [17821] 17820 17821 17822 17823 17824 17825 17826 17827 17828 17829 17830 17831 #> [17833] 17832 17833 17834 17835 17836 17837 17838 17839 17840 17841 17842 17843 #> [17845] 17844 17845 17846 17847 17848 17849 17850 17851 17852 17853 17854 17855 #> [17857] 17856 17857 17858 17859 17860 17861 17862 17863 17864 17865 17866 17867 #> [17869] 17868 17869 17870 17871 17872 17873 17874 17875 17876 17877 17878 17879 #> [17881] 17880 17881 17882 17883 17884 17885 17886 17887 17888 17889 17890 17891 #> [17893] 17892 17893 17894 17895 17896 17897 17898 17899 17900 17901 17902 17903 #> [17905] 17904 17905 17906 17907 17908 17909 17910 17911 17912 17913 17914 17915 #> [17917] 17916 17917 17918 17919 17920 17921 17922 17923 17924 17925 17926 17927 #> [17929] 17928 17929 17930 17931 17932 17933 17934 17935 17936 17937 17938 17939 #> [17941] 17940 17941 17942 17943 17944 17945 17946 17947 17948 17949 17950 17951 #> [17953] 17952 17953 17954 17955 17956 17957 17958 17959 17960 17961 17962 17963 #> [17965] 17964 17965 17966 17967 17968 17969 17970 17971 17972 17973 17974 17975 #> [17977] 17976 17977 17978 17979 17980 17981 17982 17983 17984 17985 17986 17987 #> [17989] 17988 17989 17990 17991 17992 17993 17994 17995 17996 17997 17998 17999 #> [18001] 18000 18001 18002 18003 18004 18005 18006 18007 18008 18009 18010 18011 #> [18013] 18012 18013 18014 18015 18016 18017 18018 18019 18020 18021 18022 18023 #> [18025] 18024 18025 18026 18027 18028 18029 18030 18031 18032 18033 18034 18035 #> [18037] 18036 18037 18038 18039 18040 18041 18042 18043 18044 18045 18046 18047 #> [18049] 18048 18049 18050 18051 18052 18053 18054 18055 18056 18057 18058 18059 #> [18061] 18060 18061 18062 18063 18064 18065 18066 18067 18068 18069 18070 18071 #> [18073] 18072 18073 18074 18075 18076 18077 18078 18079 18080 18081 18082 18083 #> [18085] 18084 18085 18086 18087 18088 18089 18090 18091 18092 18093 18094 18095 #> [18097] 18096 18097 18098 18099 18100 18101 18102 18103 18104 18105 18106 18107 #> [18109] 18108 18109 18110 18111 18112 18113 18114 18115 18116 18117 18118 18119 #> [18121] 18120 18121 18122 18123 18124 18125 18126 18127 18128 18129 18130 18131 #> [18133] 18132 18133 18134 18135 18136 18137 18138 18139 18140 18141 18142 18143 #> [18145] 18144 18145 18146 18147 18148 18149 18150 18151 18152 18153 18154 18155 #> [18157] 18156 18157 18158 18159 18160 18161 18162 18163 18164 18165 18166 18167 #> [18169] 18168 18169 18170 18171 18172 18173 18174 18175 18176 18177 18178 18179 #> [18181] 18180 18181 18182 18183 18184 18185 18186 18187 18188 18189 18190 18191 #> [18193] 18192 18193 18194 18195 18196 18197 18198 18199 18200 18201 18202 18203 #> [18205] 18204 18205 18206 18207 18208 18209 18210 18211 18212 18213 18214 18215 #> [18217] 18216 18217 18218 18219 18220 18221 18222 18223 18224 18225 18226 18227 #> [18229] 18228 18229 18230 18231 18232 18233 18234 18235 18236 18237 18238 18239 #> [18241] 18240 18241 18242 18243 18244 18245 18246 18247 18248 18249 18250 18251 #> [18253] 18252 18253 18254 18255 18256 18257 18258 18259 18260 18261 18262 18263 #> [18265] 18264 18265 18266 18267 18268 18269 18270 18271 18272 18273 18274 18275 #> [18277] 18276 18277 18278 18279 18280 18281 18282 18283 18284 18285 18286 18287 #> [18289] 18288 18289 18290 18291 18292 18293 18294 18295 18296 18297 18298 18299 #> [18301] 18300 18301 18302 18303 18304 18305 18306 18307 18308 18309 18310 18311 #> [18313] 18312 18313 18314 18315 18316 18317 18318 18319 18320 18321 18322 18323 #> [18325] 18324 18325 18326 18327 18328 18329 18330 18331 18332 18333 18334 18335 #> [18337] 18336 18337 18338 18339 18340 18341 18342 18343 18344 18345 18346 18347 #> [18349] 18348 18349 18350 18351 18352 18353 18354 18355 18356 18357 18358 18359 #> [18361] 18360 18361 18362 18363 18364 18365 18366 18367 18368 18369 18370 18371 #> [18373] 18372 18373 18374 18375 18376 18377 18378 18379 18380 18381 18382 18383 #> [18385] 18384 18385 18386 18387 18388 18389 18390 18391 18392 18393 18394 18395 #> [18397] 18396 18397 18398 18399 18400 18401 18402 18403 18404 18405 18406 18407 #> [18409] 18408 18409 18410 18411 18412 18413 18414 18415 18416 18417 18418 18419 #> [18421] 18420 18421 18422 18423 18424 18425 18426 18427 18428 18429 18430 18431 #> [18433] 18432 18433 18434 18435 18436 18437 18438 18439 18440 18441 18442 18443 #> [18445] 18444 18445 18446 18447 18448 18449 18450 18451 18452 18453 18454 18455 #> [18457] 18456 18457 18458 18459 18460 18461 18462 18463 18464 18465 18466 18467 #> [18469] 18468 18469 18470 18471 18472 18473 18474 18475 18476 18477 18478 18479 #> [18481] 18480 18481 18482 18483 18484 18485 18486 18487 18488 18489 18490 18491 #> [18493] 18492 18493 18494 18495 18496 18497 18498 18499 18500 18501 18502 18503 #> [18505] 18504 18505 18506 18507 18508 18509 18510 18511 18512 18513 18514 18515 #> [18517] 18516 18517 18518 18519 18520 18521 18522 18523 18524 18525 18526 18527 #> [18529] 18528 18529 18530 18531 18532 18533 18534 18535 18536 18537 18538 18539 #> [18541] 18540 18541 18542 18543 18544 18545 18546 18547 18548 18549 18550 18551 #> [18553] 18552 18553 18554 18555 18556 18557 18558 18559 18560 18561 18562 18563 #> [18565] 18564 18565 18566 18567 18568 18569 18570 18571 18572 18573 18574 18575 #> [18577] 18576 18577 18578 18579 18580 18581 18582 18583 18584 18585 18586 18587 #> [18589] 18588 18589 18590 18591 18592 18593 18594 18595 18596 18597 18598 18599 #> [18601] 18600 18601 18602 18603 18604 18605 18606 18607 18608 18609 18610 18611 #> [18613] 18612 18613 18614 18615 18616 18617 18618 18619 18620 18621 18622 18623 #> [18625] 18624 18625 18626 18627 18628 18629 18630 18631 18632 18633 18634 18635 #> [18637] 18636 18637 18638 18639 18640 18641 18642 18643 18644 18645 18646 18647 #> [18649] 18648 18649 18650 18651 18652 18653 18654 18655 18656 18657 18658 18659 #> [18661] 18660 18661 18662 18663 18664 18665 18666 18667 18668 18669 18670 18671 #> [18673] 18672 18673 18674 18675 18676 18677 18678 18679 18680 18681 18682 18683 #> [18685] 18684 18685 18686 18687 18688 18689 18690 18691 18692 18693 18694 18695 #> [18697] 18696 18697 18698 18699 18700 18701 18702 18703 18704 18705 18706 18707 #> [18709] 18708 18709 18710 18711 18712 18713 18714 18715 18716 18717 18718 18719 #> [18721] 18720 18721 18722 18723 18724 18725 18726 18727 18728 18729 18730 18731 #> [18733] 18732 18733 18734 18735 18736 18737 18738 18739 18740 18741 18742 18743 #> [18745] 18744 18745 18746 18747 18748 18749 18750 18751 18752 18753 18754 18755 #> [18757] 18756 18757 18758 18759 18760 18761 18762 18763 18764 18765 18766 18767 #> [18769] 18768 18769 18770 18771 18772 18773 18774 18775 18776 18777 18778 18779 #> [18781] 18780 18781 18782 18783 18784 18785 18786 18787 18788 18789 18790 18791 #> [18793] 18792 18793 18794 18795 18796 18797 18798 18799 18800 18801 18802 18803 #> [18805] 18804 18805 18806 18807 18808 18809 18810 18811 18812 18813 18814 18815 #> [18817] 18816 18817 18818 18819 18820 18821 18822 18823 18824 18825 18826 18827 #> [18829] 18828 18829 18830 18831 18832 18833 18834 18835 18836 18837 18838 18839 #> [18841] 18840 18841 18842 18843 18844 18845 18846 18847 18848 18849 18850 18851 #> [18853] 18852 18853 18854 18855 18856 18857 18858 18859 18860 18861 18862 18863 #> [18865] 18864 18865 18866 18867 18868 18869 18870 18871 18872 18873 18874 18875 #> [18877] 18876 18877 18878 18879 18880 18881 18882 18883 18884 18885 18886 18887 #> [18889] 18888 18889 18890 18891 18892 18893 18894 18895 18896 18897 18898 18899 #> [18901] 18900 18901 18902 18903 18904 18905 18906 18907 18908 18909 18910 18911 #> [18913] 18912 18913 18914 18915 18916 18917 18918 18919 18920 18921 18922 18923 #> [18925] 18924 18925 18926 18927 18928 18929 18930 18931 18932 18933 18934 18935 #> [18937] 18936 18937 18938 18939 18940 18941 18942 18943 18944 18945 18946 18947 #> [18949] 18948 18949 18950 18951 18952 18953 18954 18955 18956 18957 18958 18959 #> [18961] 18960 18961 18962 18963 18964 18965 18966 18967 18968 18969 18970 18971 #> [18973] 18972 18973 18974 18975 18976 18977 18978 18979 18980 18981 18982 18983 #> [18985] 18984 18985 18986 18987 18988 18989 18990 18991 18992 18993 18994 18995 #> [18997] 18996 18997 18998 18999 19000 19001 19002 19003 19004 19005 19006 19007 #> [19009] 19008 19009 19010 19011 19012 19013 19014 19015 19016 19017 19018 19019 #> [19021] 19020 19021 19022 19023 19024 19025 19026 19027 19028 19029 19030 19031 #> [19033] 19032 19033 19034 19035 19036 19037 19038 19039 19040 19041 19042 19043 #> [19045] 19044 19045 19046 19047 19048 19049 19050 19051 19052 19053 19054 19055 #> [19057] 19056 19057 19058 19059 19060 19061 19062 19063 19064 19065 19066 19067 #> [19069] 19068 19069 19070 19071 19072 19073 19074 19075 19076 19077 19078 19079 #> [19081] 19080 19081 19082 19083 19084 19085 19086 19087 19088 19089 19090 19091 #> [19093] 19092 19093 19094 19095 19096 19097 19098 19099 19100 19101 19102 19103 #> [19105] 19104 19105 19106 19107 19108 19109 19110 19111 19112 19113 19114 19115 #> [19117] 19116 19117 19118 19119 19120 19121 19122 19123 19124 19125 19126 19127 #> [19129] 19128 19129 19130 19131 19132 19133 19134 19135 19136 19137 19138 19139 #> [19141] 19140 19141 19142 19143 19144 19145 19146 19147 19148 19149 19150 19151 #> [19153] 19152 19153 19154 19155 19156 19157 19158 19159 19160 19161 19162 19163 #> [19165] 19164 19165 19166 19167 19168 19169 19170 19171 19172 19173 19174 19175 #> [19177] 19176 19177 19178 19179 19180 19181 19182 19183 19184 19185 19186 19187 #> [19189] 19188 19189 19190 19191 19192 19193 19194 19195 19196 19197 19198 19199 #> [19201] 19200 19201 19202 19203 19204 19205 19206 19207 19208 19209 19210 19211 #> [19213] 19212 19213 19214 19215 19216 19217 19218 19219 19220 19221 19222 19223 #> [19225] 19224 19225 19226 19227 19228 19229 19230 19231 19232 19233 19234 19235 #> [19237] 19236 19237 19238 19239 19240 19241 19242 19243 19244 19245 19246 19247 #> [19249] 19248 19249 19250 19251 19252 19253 19254 19255 19256 19257 19258 19259 #> [19261] 19260 19261 19262 19263 19264 19265 19266 19267 19268 19269 19270 19271 #> [19273] 19272 19273 19274 19275 19276 19277 19278 19279 19280 19281 19282 19283 #> [19285] 19284 19285 19286 19287 19288 19289 19290 19291 19292 19293 19294 19295 #> [19297] 19296 19297 19298 19299 19300 19301 19302 19303 19304 19305 19306 19307 #> [19309] 19308 19309 19310 19311 19312 19313 19314 19315 19316 19317 19318 19319 #> [19321] 19320 19321 19322 19323 19324 19325 19326 19327 19328 19329 19330 19331 #> [19333] 19332 19333 19334 19335 19336 19337 19338 19339 19340 19341 19342 19343 #> [19345] 19344 19345 19346 19347 19348 19349 19350 19351 19352 19353 19354 19355 #> [19357] 19356 19357 19358 19359 19360 19361 19362 19363 19364 19365 19366 19367 #> [19369] 19368 19369 19370 19371 19372 19373 19374 19375 19376 19377 19378 19379 #> [19381] 19380 19381 19382 19383 19384 19385 19386 19387 19388 19389 19390 19391 #> [19393] 19392 19393 19394 19395 19396 19397 19398 19399 19400 19401 19402 19403 #> [19405] 19404 19405 19406 19407 19408 19409 19410 19411 19412 19413 19414 19415 #> [19417] 19416 19417 19418 19419 19420 19421 19422 19423 19424 19425 19426 19427 #> [19429] 19428 19429 19430 19431 19432 19433 19434 19435 19436 19437 19438 19439 #> [19441] 19440 19441 19442 19443 19444 19445 19446 19447 19448 19449 19450 19451 #> [19453] 19452 19453 19454 19455 19456 19457 19458 19459 19460 19461 19462 19463 #> [19465] 19464 19465 19466 19467 19468 19469 19470 19471 19472 19473 19474 19475 #> [19477] 19476 19477 19478 19479 19480 19481 19482 19483 19484 19485 19486 19487 #> [19489] 19488 19489 19490 19491 19492 19493 19494 19495 19496 19497 19498 19499 #> [19501] 19500 19501 19502 19503 19504 19505 19506 19507 19508 19509 19510 19511 #> [19513] 19512 19513 19514 19515 19516 19517 19518 19519 19520 19521 19522 19523 #> [19525] 19524 19525 19526 19527 19528 19529 19530 19531 19532 19533 19534 19535 #> [19537] 19536 19537 19538 19539 19540 19541 19542 19543 19544 19545 19546 19547 #> [19549] 19548 19549 19550 19551 19552 19553 19554 19555 19556 19557 19558 19559 #> [19561] 19560 19561 19562 19563 19564 19565 19566 19567 19568 19569 19570 19571 #> [19573] 19572 19573 19574 19575 19576 19577 19578 19579 19580 19581 19582 19583 #> [19585] 19584 19585 19586 19587 19588 19589 19590 19591 19592 19593 19594 19595 #> [19597] 19596 19597 19598 19599 19600 19601 19602 19603 19604 19605 19606 19607 #> [19609] 19608 19609 19610 19611 19612 19613 19614 19615 19616 19617 19618 19619 #> [19621] 19620 19621 19622 19623 19624 19625 19626 19627 19628 19629 19630 19631 #> [19633] 19632 19633 19634 19635 19636 19637 19638 19639 19640 19641 19642 19643 #> [19645] 19644 19645 19646 19647 19648 19649 19650 19651 19652 19653 19654 19655 #> [19657] 19656 19657 19658 19659 19660 19661 19662 19663 19664 19665 19666 19667 #> [19669] 19668 19669 19670 19671 19672 19673 19674 19675 19676 19677 19678 19679 #> [19681] 19680 19681 19682 19683 19684 19685 19686 19687 19688 19689 19690 19691 #> [19693] 19692 19693 19694 19695 19696 19697 19698 19699 19700 19701 19702 19703 #> [19705] 19704 19705 19706 19707 19708 19709 19710 19711 19712 19713 19714 19715 #> [19717] 19716 19717 19718 19719 19720 19721 19722 19723 19724 19725 19726 19727 #> [19729] 19728 19729 19730 19731 19732 19733 19734 19735 19736 19737 19738 19739 #> [19741] 19740 19741 19742 19743 19744 19745 19746 19747 19748 19749 19750 19751 #> [19753] 19752 19753 19754 19755 19756 19757 19758 19759 19760 19761 19762 19763 #> [19765] 19764 19765 19766 19767 19768 19769 19770 19771 19772 19773 19774 19775 #> [19777] 19776 19777 19778 19779 19780 19781 19782 19783 19784 19785 19786 19787 #> [19789] 19788 19789 19790 19791 19792 19793 19794 19795 19796 19797 19798 19799 #> [19801] 19800 19801 19802 19803 19804 19805 19806 19807 19808 19809 19810 19811 #> [19813] 19812 19813 19814 19815 19816 19817 19818 19819 19820 19821 19822 19823 #> [19825] 19824 19825 19826 19827 19828 19829 19830 19831 19832 19833 19834 19835 #> [19837] 19836 19837 19838 19839 19840 19841 19842 19843 19844 19845 19846 19847 #> [19849] 19848 19849 19850 19851 19852 19853 19854 19855 19856 19857 19858 19859 #> [19861] 19860 19861 19862 19863 19864 19865 19866 19867 19868 19869 19870 19871 #> [19873] 19872 19873 19874 19875 19876 19877 19878 19879 19880 19881 19882 19883 #> [19885] 19884 19885 19886 19887 19888 19889 19890 19891 19892 19893 19894 19895 #> [19897] 19896 19897 19898 19899 19900 19901 19902 19903 19904 19905 19906 19907 #> [19909] 19908 19909 19910 19911 19912 19913 19914 19915 19916 19917 19918 19919 #> [19921] 19920 19921 19922 19923 19924 19925 19926 19927 19928 19929 19930 19931 #> [19933] 19932 19933 19934 19935 19936 19937 19938 19939 19940 19941 19942 19943 #> [19945] 19944 19945 19946 19947 19948 19949 19950 19951 19952 19953 19954 19955 #> [19957] 19956 19957 19958 19959 19960 19961 19962 19963 19964 19965 19966 19967 #> [19969] 19968 19969 19970 19971 19972 19973 19974 19975 19976 19977 19978 19979 #> [19981] 19980 19981 19982 19983 19984 19985 19986 19987 19988 19989 19990 19991 #> [19993] 19992 19993 19994 19995 19996 19997 19998 19999 20000 20001 20002 20003 #> [20005] 20004 20005 20006 20007 20008 20009 20010 20011 20012 20013 20014 20015 #> [20017] 20016 20017 20018 20019 20020 20021 20022 20023 20024 20025 20026 20027 #> [20029] 20028 20029 20030 20031 20032 20033 20034 20035 20036 20037 20038 20039 #> [20041] 20040 20041 20042 20043 20044 20045 20046 20047 20048 20049 20050 20051 #> [20053] 20052 20053 20054 20055 20056 20057 20058 20059 20060 20061 20062 20063 #> [20065] 20064 20065 20066 20067 20068 20069 20070 20071 20072 20073 20074 20075 #> [20077] 20076 20077 20078 20079 20080 20081 20082 20083 20084 20085 20086 20087 #> [20089] 20088 20089 20090 20091 20092 20093 20094 20095 20096 20097 20098 20099 #> [20101] 20100 20101 20102 20103 20104 20105 20106 20107 20108 20109 20110 20111 #> [20113] 20112 20113 20114 20115 20116 20117 20118 20119 20120 20121 20122 20123 #> [20125] 20124 20125 20126 20127 20128 20129 20130 20131 20132 20133 20134 20135 #> [20137] 20136 20137 20138 20139 20140 20141 20142 20143 20144 20145 20146 20147 #> [20149] 20148 20149 20150 20151 20152 20153 20154 20155 20156 20157 20158 20159 #> [20161] 20160 20161 20162 20163 20164 20165 20166 20167 20168 20169 20170 20171 #> [20173] 20172 20173 20174 20175 20176 20177 20178 20179 20180 20181 20182 20183 #> [20185] 20184 20185 20186 20187 20188 20189 20190 20191 20192 20193 20194 20195 #> [20197] 20196 20197 20198 20199 20200 20201 20202 20203 20204 20205 20206 20207 #> [20209] 20208 20209 20210 20211 20212 20213 20214 20215 20216 20217 20218 20219 #> [20221] 20220 20221 20222 20223 20224 20225 20226 20227 20228 20229 20230 20231 #> [20233] 20232 20233 20234 20235 20236 20237 20238 20239 20240 20241 20242 20243 #> [20245] 20244 20245 20246 20247 20248 20249 20250 20251 20252 20253 20254 20255 #> [20257] 20256 20257 20258 20259 20260 20261 20262 20263 20264 20265 20266 20267 #> [20269] 20268 20269 20270 20271 20272 20273 20274 20275 20276 20277 20278 20279 #> [20281] 20280 20281 20282 20283 20284 20285 20286 20287 20288 20289 20290 20291 #> [20293] 20292 20293 20294 20295 20296 20297 20298 20299 20300 20301 20302 20303 #> [20305] 20304 20305 20306 20307 20308 20309 20310 20311 20312 20313 20314 20315 #> [20317] 20316 20317 20318 20319 20320 20321 20322 20323 20324 20325 20326 20327 #> [20329] 20328 20329 20330 20331 20332 20333 20334 20335 20336 20337 20338 20339 #> [20341] 20340 20341 20342 20343 20344 20345 20346 20347 20348 20349 20350 20351 #> [20353] 20352 20353 20354 20355 20356 20357 20358 20359 20360 20361 20362 20363 #> [20365] 20364 20365 20366 20367 20368 20369 20370 20371 20372 20373 20374 20375 #> [20377] 20376 20377 20378 20379 20380 20381 20382 20383 20384 20385 20386 20387 #> [20389] 20388 20389 20390 20391 20392 20393 20394 20395 20396 20397 20398 20399 #> [20401] 20400 20401 20402 20403 20404 20405 20406 20407 20408 20409 20410 20411 #> [20413] 20412 20413 20414 20415 20416 20417 20418 20419 20420 20421 20422 20423 #> [20425] 20424 20425 20426 20427 20428 20429 20430 20431 20432 20433 20434 20435 #> [20437] 20436 20437 20438 20439 20440 20441 20442 20443 20444 20445 20446 20447 #> [20449] 20448 20449 20450 20451 20452 20453 20454 20455 20456 20457 20458 20459 #> [20461] 20460 20461 20462 20463 20464 20465 20466 20467 20468 20469 20470 20471 #> [20473] 20472 20473 20474 20475 20476 20477 20478 20479 20480 20481 20482 20483 #> [20485] 20484 20485 20486 20487 20488 20489 20490 20491 20492 20493 20494 20495 #> [20497] 20496 20497 20498 20499 20500 20501 20502 20503 20504 20505 20506 20507 #> [20509] 20508 20509 20510 20511 20512 20513 20514 20515 20516 20517 20518 20519 #> [20521] 20520 20521 20522 20523 20524 20525 20526 20527 20528 20529 20530 20531 #> [20533] 20532 20533 20534 20535 20536 20537 20538 20539 20540 20541 20542 20543 #> [20545] 20544 20545 20546 20547 20548 20549 20550 20551 20552 20553 20554 20555 #> [20557] 20556 20557 20558 20559 20560 20561 20562 20563 20564 20565 20566 20567 #> [20569] 20568 20569 20570 20571 20572 20573 20574 20575 20576 20577 20578 20579 #> [20581] 20580 20581 20582 20583 20584 20585 20586 20587 20588 20589 20590 20591 #> [20593] 20592 20593 20594 20595 20596 20597 20598 20599 20600 20601 20602 20603 #> [20605] 20604 20605 20606 20607 20608 20609 20610 20611 20612 20613 20614 20615 #> [20617] 20616 20617 20618 20619 20620 20621 20622 20623 20624 20625 20626 20627 #> [20629] 20628 20629 20630 20631 20632 20633 20634 20635 20636 20637 20638 20639 #> [20641] 20640 20641 20642 20643 20644 20645 20646 20647 20648 20649 20650 20651 #> [20653] 20652 20653 20654 20655 20656 20657 20658 20659 20660 20661 20662 20663 #> [20665] 20664 20665 20666 20667 20668 20669 20670 20671 20672 20673 20674 20675 #> [20677] 20676 20677 20678 20679 20680 20681 20682 20683 20684 20685 20686 20687 #> [20689] 20688 20689 20690 20691 20692 20693 20694 20695 20696 20697 20698 20699 #> [20701] 20700 20701 20702 20703 20704 20705 20706 20707 20708 20709 20710 20711 #> [20713] 20712 20713 20714 20715 20716 20717 20718 20719 20720 20721 20722 20723 #> [20725] 20724 20725 20726 20727 20728 20729 20730 20731 20732 20733 20734 20735 #> [20737] 20736 20737 20738 20739 20740 20741 20742 20743 20744 20745 20746 20747 #> [20749] 20748 20749 20750 20751 20752 20753 20754 20755 20756 20757 20758 20759 #> [20761] 20760 20761 20762 20763 20764 20765 20766 20767 20768 20769 20770 20771 #> [20773] 20772 20773 20774 20775 20776 20777 20778 20779 20780 20781 20782 20783 #> [20785] 20784 20785 20786 20787 20788 20789 20790 20791 20792 20793 20794 20795 #> [20797] 20796 20797 20798 20799 20800 20801 20802 20803 20804 20805 20806 20807 #> [20809] 20808 20809 20810 20811 20812 20813 20814 20815 20816 20817 20818 20819 #> [20821] 20820 20821 20822 20823 20824 20825 20826 20827 20828 20829 20830 20831 #> [20833] 20832 20833 20834 20835 20836 20837 20838 20839 20840 20841 20842 20843 #> [20845] 20844 20845 20846 20847 20848 20849 20850 20851 20852 20853 20854 20855 #> [20857] 20856 20857 20858 20859 20860 20861 20862 20863 20864 20865 20866 20867 #> [20869] 20868 20869 20870 20871 20872 20873 20874 20875 20876 20877 20878 20879 #> [20881] 20880 20881 20882 20883 20884 20885 20886 20887 20888 20889 20890 20891 #> [20893] 20892 20893 20894 20895 20896 20897 20898 20899 20900 20901 20902 20903 #> [20905] 20904 20905 20906 20907 20908 20909 20910 20911 20912 20913 20914 20915 #> [20917] 20916 20917 20918 20919 20920 20921 20922 20923 20924 20925 20926 20927 #> [20929] 20928 20929 20930 20931 20932 20933 20934 20935 20936 20937 20938 20939 #> [20941] 20940 20941 20942 20943 20944 20945 20946 20947 20948 20949 20950 20951 #> [20953] 20952 20953 20954 20955 20956 20957 20958 20959 20960 20961 20962 20963 #> [20965] 20964 20965 20966 20967 20968 20969 20970 20971 20972 20973 20974 20975 #> [20977] 20976 20977 20978 20979 20980 20981 20982 20983 20984 20985 20986 20987 #> [20989] 20988 20989 20990 20991 20992 20993 20994 20995 20996 20997 20998 20999 #> [21001] 21000 21001 21002 21003 21004 21005 21006 21007 21008 21009 21010 21011 #> [21013] 21012 21013 21014 21015 21016 21017 21018 21019 21020 21021 21022 21023 #> [21025] 21024 21025 21026 21027 21028 21029 21030 21031 21032 21033 21034 21035 #> [21037] 21036 21037 21038 21039 21040 21041 21042 21043 21044 21045 21046 21047 #> [21049] 21048 21049 21050 21051 21052 21053 21054 21055 21056 21057 21058 21059 #> [21061] 21060 21061 21062 21063 21064 21065 21066 21067 21068 21069 21070 21071 #> [21073] 21072 21073 21074 21075 21076 21077 21078 21079 21080 21081 21082 21083 #> [21085] 21084 21085 21086 21087 21088 21089 21090 21091 21092 21093 21094 21095 #> [21097] 21096 21097 21098 21099 21100 21101 21102 21103 21104 21105 21106 21107 #> [21109] 21108 21109 21110 21111 21112 21113 21114 21115 21116 21117 21118 21119 #> [21121] 21120 21121 21122 21123 21124 21125 21126 21127 21128 21129 21130 21131 #> [21133] 21132 21133 21134 21135 21136 21137 21138 21139 21140 21141 21142 21143 #> [21145] 21144 21145 21146 21147 21148 21149 21150 21151 21152 21153 21154 21155 #> [21157] 21156 21157 21158 21159 21160 21161 21162 21163 21164 21165 21166 21167 #> [21169] 21168 21169 21170 21171 21172 21173 21174 21175 21176 21177 21178 21179 #> [21181] 21180 21181 21182 21183 21184 21185 21186 21187 21188 21189 21190 21191 #> [21193] 21192 21193 21194 21195 21196 21197 21198 21199 21200 21201 21202 21203 #> [21205] 21204 21205 21206 21207 21208 21209 21210 21211 21212 21213 21214 21215 #> [21217] 21216 21217 21218 21219 21220 21221 21222 21223 21224 21225 21226 21227 #> [21229] 21228 21229 21230 21231 21232 21233 21234 21235 21236 21237 21238 21239 #> [21241] 21240 21241 21242 21243 21244 21245 21246 21247 21248 21249 21250 21251 #> [21253] 21252 21253 21254 21255 21256 21257 21258 21259 21260 21261 21262 21263 #> [21265] 21264 21265 21266 21267 21268 21269 21270 21271 21272 21273 21274 21275 #> [21277] 21276 21277 21278 21279 21280 21281 21282 21283 21284 21285 21286 21287 #> [21289] 21288 21289 21290 21291 21292 21293 21294 21295 21296 21297 21298 21299 #> [21301] 21300 21301 21302 21303 21304 21305 21306 21307 21308 21309 21310 21311 #> [21313] 21312 21313 21314 21315 21316 21317 21318 21319 21320 21321 21322 21323 #> [21325] 21324 21325 21326 21327 21328 21329 21330 21331 21332 21333 21334 21335 #> [21337] 21336 21337 21338 21339 21340 21341 21342 21343 21344 21345 21346 21347 #> [21349] 21348 21349 21350 21351 21352 21353 21354 21355 21356 21357 21358 21359 #> [21361] 21360 21361 21362 21363 21364 21365 21366 21367 21368 21369 21370 21371 #> [21373] 21372 21373 21374 21375 21376 21377 21378 21379 21380 21381 21382 21383 #> [21385] 21384 21385 21386 21387 21388 21389 21390 21391 21392 21393 21394 21395 #> [21397] 21396 21397 21398 21399 21400 21401 21402 21403 21404 21405 21406 21407 #> [21409] 21408 21409 21410 21411 21412 21413 21414 21415 21416 21417 21418 21419 #> [21421] 21420 21421 21422 21423 21424 21425 21426 21427 21428 21429 21430 21431 #> [21433] 21432 21433 21434 21435 21436 21437 21438 21439 21440 21441 21442 21443 #> [21445] 21444 21445 21446 21447 21448 21449 21450 21451 21452 21453 21454 21455 #> [21457] 21456 21457 21458 21459 21460 21461 21462 21463 21464 21465 21466 21467 #> [21469] 21468 21469 21470 21471 21472 21473 21474 21475 21476 21477 21478 21479 #> [21481] 21480 21481 21482 21483 21484 21485 21486 21487 21488 21489 21490 21491 #> [21493] 21492 21493 21494 21495 21496 21497 21498 21499 21500 21501 21502 21503 #> [21505] 21504 21505 21506 21507 21508 21509 21510 21511 21512 21513 21514 21515 #> [21517] 21516 21517 21518 21519 21520 21521 21522 21523 21524 21525 21526 21527 #> [21529] 21528 21529 21530 21531 21532 21533 21534 21535 21536 21537 21538 21539 #> [21541] 21540 21541 21542 21543 21544 21545 21546 21547 21548 21549 21550 21551 #> [21553] 21552 21553 21554 21555 21556 21557 21558 21559 21560 21561 21562 21563 #> [21565] 21564 21565 21566 21567 21568 21569 21570 21571 21572 21573 21574 21575 #> [21577] 21576 21577 21578 21579 21580 21581 21582 21583 21584 21585 21586 21587 #> [21589] 21588 21589 21590 21591 21592 21593 21594 21595 21596 21597 21598 21599 #> [21601] 21600 21601 21602 21603 21604 21605 21606 21607 21608 21609 21610 21611 #> [21613] 21612 21613 21614 21615 21616 21617 21618 21619 21620 21621 21622 21623 #> [21625] 21624 21625 21626 21627 21628 21629 21630 21631 21632 21633 21634 21635 #> [21637] 21636 21637 21638 21639 21640 21641 21642 21643 21644 21645 21646 21647 #> [21649] 21648 21649 21650 21651 21652 21653 21654 21655 21656 21657 21658 21659 #> [21661] 21660 21661 21662 21663 21664 21665 21666 21667 21668 21669 21670 21671 #> [21673] 21672 21673 21674 21675 21676 21677 21678 21679 21680 21681 21682 21683 #> [21685] 21684 21685 21686 21687 21688 21689 21690 21691 21692 21693 21694 21695 #> [21697] 21696 21697 21698 21699 21700 21701 21702 21703 21704 21705 21706 21707 #> [21709] 21708 21709 21710 21711 21712 21713 21714 21715 21716 21717 21718 21719 #> [21721] 21720 21721 21722 21723 21724 21725 21726 21727 21728 21729 21730 21731 #> [21733] 21732 21733 21734 21735 21736 21737 21738 21739 21740 21741 21742 21743 #> [21745] 21744 21745 21746 21747 21748 21749 21750 21751 21752 21753 21754 21755 #> [21757] 21756 21757 21758 21759 21760 21761 21762 21763 21764 21765 21766 21767 #> [21769] 21768 21769 21770 21771 21772 21773 21774 21775 21776 21777 21778 21779 #> [21781] 21780 21781 21782 21783 21784 21785 21786 21787 21788 21789 21790 21791 #> [21793] 21792 21793 21794 21795 21796 21797 21798 21799 21800 21801 21802 21803 #> [21805] 21804 21805 21806 21807 21808 21809 21810 21811 21812 21813 21814 21815 #> [21817] 21816 21817 21818 21819 21820 21821 21822 21823 21824 21825 21826 21827 #> [21829] 21828 21829 21830 21831 21832 21833 21834 21835 21836 21837 21838 21839 #> [21841] 21840 21841 21842 21843 21844 21845 21846 21847 21848 21849 21850 21851 #> [21853] 21852 21853 21854 21855 21856 21857 21858 21859 21860 21861 21862 21863 #> [21865] 21864 21865 21866 21867 21868 21869 21870 21871 21872 21873 21874 21875 #> [21877] 21876 21877 21878 21879 21880 21881 21882 21883 21884 21885 21886 21887 #> [21889] 21888 21889 21890 21891 21892 21893 21894 21895 21896 21897 21898 21899 #> [21901] 21900 21901 21902 21903 21904 21905 21906 21907 21908 21909 21910 21911 #> [21913] 21912 21913 21914 21915 21916 21917 21918 21919 21920 21921 21922 21923 #> [21925] 21924 21925 21926 21927 21928 21929 21930 21931 21932 21933 21934 21935 #> [21937] 21936 21937 21938 21939 21940 21941 21942 21943 21944 21945 21946 21947 #> [21949] 21948 21949 21950 21951 21952 21953 21954 21955 21956 21957 21958 21959 #> [21961] 21960 21961 21962 21963 21964 21965 21966 21967 21968 21969 21970 21971 #> [21973] 21972 21973 21974 21975 21976 21977 21978 21979 21980 21981 21982 21983 #> [21985] 21984 21985 21986 21987 21988 21989 21990 21991 21992 21993 21994 21995 #> [21997] 21996 21997 21998 21999 22000 22001 22002 22003 22004 22005 22006 22007 #> [22009] 22008 22009 22010 22011 22012 22013 22014 22015 22016 22017 22018 22019 #> [22021] 22020 22021 22022 22023 22024 22025 22026 22027 22028 22029 22030 22031 #> [22033] 22032 22033 22034 22035 22036 22037 22038 22039 22040 22041 22042 22043 #> [22045] 22044 22045 22046 22047 22048 22049 22050 22051 22052 22053 22054 22055 #> [22057] 22056 22057 22058 22059 22060 22061 22062 22063 22064 22065 22066 22067 #> [22069] 22068 22069 22070 22071 22072 22073 22074 22075 22076 22077 22078 22079 #> [22081] 22080 22081 22082 22083 22084 22085 22086 22087 22088 22089 22090 22091 #> [22093] 22092 22093 22094 22095 22096 22097 22098 22099 22100 22101 22102 22103 #> [22105] 22104 22105 22106 22107 22108 22109 22110 22111 22112 22113 22114 22115 #> [22117] 22116 22117 22118 22119 22120 22121 22122 22123 22124 22125 22126 22127 #> [22129] 22128 22129 22130 22131 22132 22133 22134 22135 22136 22137 22138 22139 #> [22141] 22140 22141 22142 22143 22144 22145 22146 22147 22148 22149 22150 22151 #> [22153] 22152 22153 22154 22155 22156 22157 22158 22159 22160 22161 22162 22163 #> [22165] 22164 22165 22166 22167 22168 22169 22170 22171 22172 22173 22174 22175 #> [22177] 22176 22177 22178 22179 22180 22181 22182 22183 22184 22185 22186 22187 #> [22189] 22188 22189 22190 22191 22192 22193 22194 22195 22196 22197 22198 22199 #> [22201] 22200 22201 22202 22203 22204 22205 22206 22207 22208 22209 22210 22211 #> [22213] 22212 22213 22214 22215 22216 22217 22218 22219 22220 22221 22222 22223 #> [22225] 22224 22225 22226 22227 22228 22229 22230 22231 22232 22233 22234 22235 #> [22237] 22236 22237 22238 22239 22240 22241 22242 22243 22244 22245 22246 22247 #> [22249] 22248 22249 22250 22251 22252 22253 22254 22255 22256 22257 22258 22259 #> [22261] 22260 22261 22262 22263 22264 22265 22266 22267 22268 22269 22270 22271 #> [22273] 22272 22273 22274 22275 22276 22277 22278 22279 22280 22281 22282 22283 #> [22285] 22284 22285 22286 22287 22288 22289 22290 22291 22292 22293 22294 22295 #> [22297] 22296 22297 22298 22299 22300 22301 22302 22303 22304 22305 22306 22307 #> [22309] 22308 22309 22310 22311 22312 22313 22314 22315 22316 22317 22318 22319 #> [22321] 22320 22321 22322 22323 22324 22325 22326 22327 22328 22329 22330 22331 #> [22333] 22332 22333 22334 22335 22336 22337 22338 22339 22340 22341 22342 22343 #> [22345] 22344 22345 22346 22347 22348 22349 22350 22351 22352 22353 22354 22355 #> [22357] 22356 22357 22358 22359 22360 22361 22362 22363 22364 22365 22366 22367 #> [22369] 22368 22369 22370 22371 22372 22373 22374 22375 22376 22377 22378 22379 #> [22381] 22380 22381 22382 22383 22384 22385 22386 22387 22388 22389 22390 22391 #> [22393] 22392 22393 22394 22395 22396 22397 22398 22399 22400 22401 22402 22403 #> [22405] 22404 22405 22406 22407 22408 22409 22410 22411 22412 22413 22414 22415 #> [22417] 22416 22417 22418 22419 22420 22421 22422 22423 22424 22425 22426 22427 #> [22429] 22428 22429 22430 22431 22432 22433 22434 22435 22436 22437 22438 22439 #> [22441] 22440 22441 22442 22443 22444 22445 22446 22447 22448 22449 22450 22451 #> [22453] 22452 22453 22454 22455 22456 22457 22458 22459 22460 22461 22462 22463 #> [22465] 22464 22465 22466 22467 22468 22469 22470 22471 22472 22473 22474 22475 #> [22477] 22476 22477 22478 22479 22480 22481 22482 22483 22484 22485 22486 22487 #> [22489] 22488 22489 22490 22491 22492 22493 22494 22495 22496 22497 22498 22499 #> [22501] 22500 22501 22502 22503 22504 22505 22506 22507 22508 22509 22510 22511 #> [22513] 22512 22513 22514 22515 22516 22517 22518 22519 22520 22521 22522 22523 #> [22525] 22524 22525 22526 22527 22528 22529 22530 22531 22532 22533 22534 22535 #> [22537] 22536 22537 22538 22539 22540 22541 22542 22543 22544 22545 22546 22547 #> [22549] 22548 22549 22550 22551 22552 22553 22554 22555 22556 22557 22558 22559 #> [22561] 22560 22561 22562 22563 22564 22565 22566 22567 22568 22569 22570 22571 #> [22573] 22572 22573 22574 22575 22576 22577 22578 22579 22580 22581 22582 22583 #> [22585] 22584 22585 22586 22587 22588 22589 22590 22591 22592 22593 22594 22595 #> [22597] 22596 22597 22598 22599 22600 22601 22602 22603 22604 22605 22606 22607 #> [22609] 22608 22609 22610 22611 22612 22613 22614 22615 22616 22617 22618 22619 #> [22621] 22620 22621 22622 22623 22624 22625 22626 22627 22628 22629 22630 22631 #> [22633] 22632 22633 22634 22635 22636 22637 22638 22639 22640 22641 22642 22643 #> [22645] 22644 22645 22646 22647 22648 22649 22650 22651 22652 22653 22654 22655 #> [22657] 22656 22657 22658 22659 22660 22661 22662 22663 22664 22665 22666 22667 #> [22669] 22668 22669 22670 22671 22672 22673 22674 22675 22676 22677 22678 22679 #> [22681] 22680 22681 22682 22683 22684 22685 22686 22687 22688 22689 22690 22691 #> [22693] 22692 22693 22694 22695 22696 22697 22698 22699 22700 22701 22702 22703 #> [22705] 22704 22705 22706 22707 22708 22709 22710 22711 22712 22713 22714 22715 #> [22717] 22716 22717 22718 22719 22720 22721 22722 22723 22724 22725 22726 22727 #> [22729] 22728 22729 22730 22731 22732 22733 22734 22735 22736 22737 22738 22739 #> [22741] 22740 22741 22742 22743 22744 22745 22746 22747 22748 22749 22750 22751 #> [22753] 22752 22753 22754 22755 22756 22757 22758 22759 22760 22761 22762 22763 #> [22765] 22764 22765 22766 22767 22768 22769 22770 22771 22772 22773 22774 22775 #> [22777] 22776 22777 22778 22779 22780 22781 22782 22783 22784 22785 22786 22787 #> [22789] 22788 22789 22790 22791 22792 22793 22794 22795 22796 22797 22798 22799 #> [22801] 22800 22801 22802 22803 22804 22805 22806 22807 22808 22809 22810 22811 #> [22813] 22812 22813 22814 22815 22816 22817 22818 22819 22820 22821 22822 22823 #> [22825] 22824 22825 22826 22827 22828 22829 22830 22831 22832 22833 22834 22835 #> [22837] 22836 22837 22838 22839 22840 22841 22842 22843 22844 22845 22846 22847 #> [22849] 22848 22849 22850 22851 22852 22853 22854 22855 22856 22857 22858 22859 #> [22861] 22860 22861 22862 22863 22864 22865 22866 22867 22868 22869 22870 22871 #> [22873] 22872 22873 22874 22875 22876 22877 22878 22879 22880 22881 22882 22883 #> [22885] 22884 22885 22886 22887 22888 22889 22890 22891 22892 22893 22894 22895 #> [22897] 22896 22897 22898 22899 22900 22901 22902 22903 22904 22905 22906 22907 #> [22909] 22908 22909 22910 22911 22912 22913 22914 22915 22916 22917 22918 22919 #> [22921] 22920 22921 22922 22923 22924 22925 22926 22927 22928 22929 22930 22931 #> [22933] 22932 22933 22934 22935 22936 22937 22938 22939 22940 22941 22942 22943 #> [22945] 22944 22945 22946 22947 22948 22949 22950 22951 22952 22953 22954 22955 #> [22957] 22956 22957 22958 22959 22960 22961 22962 22963 22964 22965 22966 22967 #> [22969] 22968 22969 22970 22971 22972 22973 22974 22975 22976 22977 22978 22979 #> [22981] 22980 22981 22982 22983 22984 22985 22986 22987 22988 22989 22990 22991 #> [22993] 22992 22993 22994 22995 22996 22997 22998 22999 23000 23001 23002 23003 #> [23005] 23004 23005 23006 23007 23008 23009 23010 23011 23012 23013 23014 23015 #> [23017] 23016 23017 23018 23019 23020 23021 23022 23023 23024 23025 23026 23027 #> [23029] 23028 23029 23030 23031 23032 23033 23034 23035 23036 23037 23038 23039 #> [23041] 23040 23041 23042 23043 23044 23045 23046 23047 23048 23049 23050 23051 #> [23053] 23052 23053 23054 23055 23056 23057 23058 23059 23060 23061 23062 23063 #> [23065] 23064 23065 23066 23067 23068 23069 23070 23071 23072 23073 23074 23075 #> [23077] 23076 23077 23078 23079 23080 23081 23082 23083 23084 23085 23086 23087 #> [23089] 23088 23089 23090 23091 23092 23093 23094 23095 23096 23097 23098 23099 #> [23101] 23100 23101 23102 23103 23104 23105 23106 23107 23108 23109 23110 23111 #> [23113] 23112 23113 23114 23115 23116 23117 23118 23119 23120 23121 23122 23123 #> [23125] 23124 23125 23126 23127 23128 23129 23130 23131 23132 23133 23134 23135 #> [23137] 23136 23137 23138 23139 23140 23141 23142 23143 23144 23145 23146 23147 #> [23149] 23148 23149 23150 23151 23152 23153 23154 23155 23156 23157 23158 23159 #> [23161] 23160 23161 23162 23163 23164 23165 23166 23167 23168 23169 23170 23171 #> [23173] 23172 23173 23174 23175 23176 23177 23178 23179 23180 23181 23182 23183 #> [23185] 23184 23185 23186 23187 23188 23189 23190 23191 23192 23193 23194 23195 #> [23197] 23196 23197 23198 23199 23200 23201 23202 23203 23204 23205 23206 23207 #> [23209] 23208 23209 23210 23211 23212 23213 23214 23215 23216 23217 23218 23219 #> [23221] 23220 23221 23222 23223 23224 23225 23226 23227 23228 23229 23230 23231 #> [23233] 23232 23233 23234 23235 23236 23237 23238 23239 23240 23241 23242 23243 #> [23245] 23244 23245 23246 23247 23248 23249 23250 23251 23252 23253 23254 23255 #> [23257] 23256 23257 23258 23259 23260 23261 23262 23263 23264 23265 23266 23267 #> [23269] 23268 23269 23270 23271 23272 23273 23274 23275 23276 23277 23278 23279 #> [23281] 23280 23281 23282 23283 23284 23285 23286 23287 23288 23289 23290 23291 #> [23293] 23292 23293 23294 23295 23296 23297 23298 23299 23300 23301 23302 23303 #> [23305] 23304 23305 23306 23307 23308 23309 23310 23311 23312 23313 23314 23315 #> [23317] 23316 23317 23318 23319 23320 23321 23322 23323 23324 23325 23326 23327 #> [23329] 23328 23329 23330 23331 23332 23333 23334 23335 23336 23337 23338 23339 #> [23341] 23340 23341 23342 23343 23344 23345 23346 23347 23348 23349 23350 23351 #> [23353] 23352 23353 23354 23355 23356 23357 23358 23359 23360 23361 23362 23363 #> [23365] 23364 23365 23366 23367 23368 23369 23370 23371 23372 23373 23374 23375 #> [23377] 23376 23377 23378 23379 23380 23381 23382 23383 23384 23385 23386 23387 #> [23389] 23388 23389 23390 23391 23392 23393 23394 23395 23396 23397 23398 23399 #> [23401] 23400 23401 23402 23403 23404 23405 23406 23407 23408 23409 23410 23411 #> [23413] 23412 23413 23414 23415 23416 23417 23418 23419 23420 23421 23422 23423 #> [23425] 23424 23425 23426 23427 23428 23429 23430 23431 23432 23433 23434 23435 #> [23437] 23436 23437 23438 23439 23440 23441 23442 23443 23444 23445 23446 23447 #> [23449] 23448 23449 23450 23451 23452 23453 23454 23455 23456 23457 23458 23459 #> [23461] 23460 23461 23462 23463 23464 23465 23466 23467 23468 23469 23470 23471 #> [23473] 23472 23473 23474 23475 23476 23477 23478 23479 23480 23481 23482 23483 #> [23485] 23484 23485 23486 23487 23488 23489 23490 23491 23492 23493 23494 23495 #> [23497] 23496 23497 23498 23499 23500 23501 23502 23503 23504 23505 23506 23507 #> [23509] 23508 23509 23510 23511 23512 23513 23514 23515 23516 23517 23518 23519 #> [23521] 23520 23521 23522 23523 23524 23525 23526 23527 23528 23529 23530 23531 #> [23533] 23532 23533 23534 23535 23536 23537 23538 23539 23540 23541 23542 23543 #> [23545] 23544 23545 23546 23547 23548 23549 23550 23551 23552 23553 23554 23555 #> [23557] 23556 23557 23558 23559 23560 23561 23562 23563 23564 23565 23566 23567 #> [23569] 23568 23569 23570 23571 23572 23573 23574 23575 23576 23577 23578 23579 #> [23581] 23580 23581 23582 23583 23584 23585 23586 23587 23588 23589 23590 23591 #> [23593] 23592 23593 23594 23595 23596 23597 23598 23599 23600 23601 23602 23603 #> [23605] 23604 23605 23606 23607 23608 23609 23610 23611 23612 23613 23614 23615 #> [23617] 23616 23617 23618 23619 23620 23621 23622 23623 23624 23625 23626 23627 #> [23629] 23628 23629 23630 23631 23632 23633 23634 23635 23636 23637 23638 23639 #> [23641] 23640 23641 23642 23643 23644 23645 23646 23647 23648 23649 23650 23651 #> [23653] 23652 23653 23654 23655 23656 23657 23658 23659 23660 23661 23662 23663 #> [23665] 23664 23665 23666 23667 23668 23669 23670 23671 23672 23673 23674 23675 #> [23677] 23676 23677 23678 23679 23680 23681 23682 23683 23684 23685 23686 23687 #> [23689] 23688 23689 23690 23691 23692 23693 23694 23695 23696 23697 23698 23699 #> [23701] 23700 23701 23702 23703 23704 23705 23706 23707 23708 23709 23710 23711 #> [23713] 23712 23713 23714 23715 23716 23717 23718 23719 23720 23721 23722 23723 #> [23725] 23724 23725 23726 23727 23728 23729 23730 23731 23732 23733 23734 23735 #> [23737] 23736 23737 23738 23739 23740 23741 23742 23743 23744 23745 23746 23747 #> [23749] 23748 23749 23750 23751 23752 23753 23754 23755 23756 23757 23758 23759 #> [23761] 23760 23761 23762 23763 23764 23765 23766 23767 23768 23769 23770 23771 #> [23773] 23772 23773 23774 23775 23776 23777 23778 23779 23780 23781 23782 23783 #> [23785] 23784 23785 23786 23787 23788 23789 23790 23791 23792 23793 23794 23795 #> [23797] 23796 23797 23798 23799 23800 23801 23802 23803 23804 23805 23806 23807 #> [23809] 23808 23809 23810 23811 23812 23813 23814 23815 23816 23817 23818 23819 #> [23821] 23820 23821 23822 23823 23824 23825 23826 23827 23828 23829 23830 23831 #> [23833] 23832 23833 23834 23835 23836 23837 23838 23839 23840 23841 23842 23843 #> [23845] 23844 23845 23846 23847 23848 23849 23850 23851 23852 23853 23854 23855 #> [23857] 23856 23857 23858 23859 23860 23861 23862 23863 23864 23865 23866 23867 #> [23869] 23868 23869 23870 23871 23872 23873 23874 23875 23876 23877 23878 23879 #> [23881] 23880 23881 23882 23883 23884 23885 23886 23887 23888 23889 23890 23891 #> [23893] 23892 23893 23894 23895 23896 23897 23898 23899 23900 23901 23902 23903 #> [23905] 23904 23905 23906 23907 23908 23909 23910 23911 23912 23913 23914 23915 #> [23917] 23916 23917 23918 23919 23920 23921 23922 23923 23924 23925 23926 23927 #> [23929] 23928 23929 23930 23931 23932 23933 23934 23935 23936 23937 23938 23939 #> [23941] 23940 23941 23942 23943 23944 23945 23946 23947 23948 23949 23950 23951 #> [23953] 23952 23953 23954 23955 23956 23957 23958 23959 23960 23961 23962 23963 #> [23965] 23964 23965 23966 23967 23968 23969 23970 23971 23972 23973 23974 23975 #> [23977] 23976 23977 23978 23979 23980 23981 23982 23983 23984 23985 23986 23987 #> [23989] 23988 23989 23990 23991 23992 23993 23994 23995 23996 23997 23998 23999 #> [24001] 24000 24001 24002 24003 24004 24005 24006 24007 24008 24009 24010 24011 #> [24013] 24012 24013 24014 24015 24016 24017 24018 24019 24020 24021 24022 24023 #> [24025] 24024 24025 24026 24027 24028 24029 24030 24031 24032 24033 24034 24035 #> [24037] 24036 24037 24038 24039 24040 24041 24042 24043 24044 24045 24046 24047 #> [24049] 24048 24049 24050 24051 24052 24053 24054 24055 24056 24057 24058 24059 #> [24061] 24060 24061 24062 24063 24064 24065 24066 24067 24068 24069 24070 24071 #> [24073] 24072 24073 24074 24075 24076 24077 24078 24079 24080 24081 24082 24083 #> [24085] 24084 24085 24086 24087 24088 24089 24090 24091 24092 24093 24094 24095 #> [24097] 24096 24097 24098 24099 24100 24101 24102 24103 24104 24105 24106 24107 #> [24109] 24108 24109 24110 24111 24112 24113 24114 24115 24116 24117 24118 24119 #> [24121] 24120 24121 24122 24123 24124 24125 24126 24127 24128 24129 24130 24131 #> [24133] 24132 24133 24134 24135 24136 24137 24138 24139 24140 24141 24142 24143 #> [24145] 24144 24145 24146 24147 24148 24149 24150 24151 24152 24153 24154 24155 #> [24157] 24156 24157 24158 24159 24160 24161 24162 24163 24164 24165 24166 24167 #> [24169] 24168 24169 24170 24171 24172 24173 24174 24175 24176 24177 24178 24179 #> [24181] 24180 24181 24182 24183 24184 24185 24186 24187 24188 24189 24190 24191 #> [24193] 24192 24193 24194 24195 24196 24197 24198 24199 24200 24201 24202 24203 #> [24205] 24204 24205 24206 24207 24208 24209 24210 24211 24212 24213 24214 24215 #> [24217] 24216 24217 24218 24219 24220 24221 24222 24223 24224 24225 24226 24227 #> [24229] 24228 24229 24230 24231 24232 24233 24234 24235 24236 24237 24238 24239 #> [24241] 24240 24241 24242 24243 24244 24245 24246 24247 24248 24249 24250 24251 #> [24253] 24252 24253 24254 24255 24256 24257 24258 24259 24260 24261 24262 24263 #> [24265] 24264 24265 24266 24267 24268 24269 24270 24271 24272 24273 24274 24275 #> [24277] 24276 24277 24278 24279 24280 24281 24282 24283 24284 24285 24286 24287 #> [24289] 24288 24289 24290 24291 24292 24293 24294 24295 24296 24297 24298 24299 #> [24301] 24300 24301 24302 24303 24304 24305 24306 24307 24308 24309 24310 24311 #> [24313] 24312 24313 24314 24315 24316 24317 24318 24319 24320 24321 24322 24323 #> [24325] 24324 24325 24326 24327 24328 24329 24330 24331 24332 24333 24334 24335 #> [24337] 24336 24337 24338 24339 24340 24341 24342 24343 24344 24345 24346 24347 #> [24349] 24348 24349 24350 24351 24352 24353 24354 24355 24356 24357 24358 24359 #> [24361] 24360 24361 24362 24363 24364 24365 24366 24367 24368 24369 24370 24371 #> [24373] 24372 24373 24374 24375 24376 24377 24378 24379 24380 24381 24382 24383 #> [24385] 24384 24385 24386 24387 24388 24389 24390 24391 24392 24393 24394 24395 #> [24397] 24396 24397 24398 24399 24400 24401 24402 24403 24404 24405 24406 24407 #> [24409] 24408 24409 24410 24411 24412 24413 24414 24415 24416 24417 24418 24419 #> [24421] 24420 24421 24422 24423 24424 24425 24426 24427 24428 24429 24430 24431 #> [24433] 24432 24433 24434 24435 24436 24437 24438 24439 24440 24441 24442 24443 #> [24445] 24444 24445 24446 24447 24448 24449 24450 24451 24452 24453 24454 24455 #> [24457] 24456 24457 24458 24459 24460 24461 24462 24463 24464 24465 24466 24467 #> [24469] 24468 24469 24470 24471 24472 24473 24474 24475 24476 24477 24478 24479 #> [24481] 24480 24481 24482 24483 24484 24485 24486 24487 24488 24489 24490 24491 #> [24493] 24492 24493 24494 24495 24496 24497 24498 24499 24500 24501 24502 24503 #> [24505] 24504 24505 24506 24507 24508 24509 24510 24511 24512 24513 24514 24515 #> [24517] 24516 24517 24518 24519 24520 24521 24522 24523 24524 24525 24526 24527 #> [24529] 24528 24529 24530 24531 24532 24533 24534 24535 24536 24537 24538 24539 #> [24541] 24540 24541 24542 24543 24544 24545 24546 24547 24548 24549 24550 24551 #> [24553] 24552 24553 24554 24555 24556 24557 24558 24559 24560 24561 24562 24563 #> [24565] 24564 24565 24566 24567 24568 24569 24570 24571 24572 24573 24574 24575 #> [24577] 24576 24577 24578 24579 24580 24581 24582 24583 24584 24585 24586 24587 #> [24589] 24588 24589 24590 24591 24592 24593 24594 24595 24596 24597 24598 24599 #> [24601] 24600 24601 24602 24603 24604 24605 24606 24607 24608 24609 24610 24611 #> [24613] 24612 24613 24614 24615 24616 24617 24618 24619 24620 24621 24622 24623 #> [24625] 24624 24625 24626 24627 24628 24629 24630 24631 24632 24633 24634 24635 #> [24637] 24636 24637 24638 24639 24640 24641 24642 24643 24644 24645 24646 24647 #> [24649] 24648 24649 24650 24651 24652 24653 24654 24655 24656 24657 24658 24659 #> [24661] 24660 24661 24662 24663 24664 24665 24666 24667 24668 24669 24670 24671 #> [24673] 24672 24673 24674 24675 24676 24677 24678 24679 24680 24681 24682 24683 #> [24685] 24684 24685 24686 24687 24688 24689 24690 24691 24692 24693 24694 24695 #> [24697] 24696 24697 24698 24699 24700 24701 24702 24703 24704 24705 24706 24707 #> [24709] 24708 24709 24710 24711 24712 24713 24714 24715 24716 24717 24718 24719 #> [24721] 24720 24721 24722 24723 24724 24725 24726 24727 24728 24729 24730 24731 #> [24733] 24732 24733 24734 24735 24736 24737 24738 24739 24740 24741 24742 24743 #> [24745] 24744 24745 24746 24747 24748 24749 24750 24751 24752 24753 24754 24755 #> [24757] 24756 24757 24758 24759 24760 24761 24762 24763 24764 24765 24766 24767 #> [24769] 24768 24769 24770 24771 24772 24773 24774 24775 24776 24777 24778 24779 #> [24781] 24780 24781 24782 24783 24784 24785 24786 24787 24788 24789 24790 24791 #> [24793] 24792 24793 24794 24795 24796 24797 24798 24799 24800 24801 24802 24803 #> [24805] 24804 24805 24806 24807 24808 24809 24810 24811 24812 24813 24814 24815 #> [24817] 24816 24817 24818 24819 24820 24821 24822 24823 24824 24825 24826 24827 #> [24829] 24828 24829 24830 24831 24832 24833 24834 24835 24836 24837 24838 24839 #> [24841] 24840 24841 24842 24843 24844 24845 24846 24847 24848 24849 24850 24851 #> [24853] 24852 24853 24854 24855 24856 24857 24858 24859 24860 24861 24862 24863 #> [24865] 24864 24865 24866 24867 24868 24869 24870 24871 24872 24873 24874 24875 #> [24877] 24876 24877 24878 24879 24880 24881 24882 24883 24884 24885 24886 24887 #> [24889] 24888 24889 24890 24891 24892 24893 24894 24895 24896 24897 24898 24899 #> [24901] 24900 24901 24902 24903 24904 24905 24906 24907 24908 24909 24910 24911 #> [24913] 24912 24913 24914 24915 24916 24917 24918 24919 24920 24921 24922 24923 #> [24925] 24924 24925 24926 24927 24928 24929 24930 24931 24932 24933 24934 24935 #> [24937] 24936 24937 24938 24939 24940 24941 24942 24943 24944 24945 24946 24947 #> [24949] 24948 24949 24950 24951 24952 24953 24954 24955 24956 24957 24958 24959 #> [24961] 24960 24961 24962 24963 24964 24965 24966 24967 24968 24969 24970 24971 #> [24973] 24972 24973 24974 24975 24976 24977 24978 24979 24980 24981 24982 24983 #> [24985] 24984 24985 24986 24987 24988 24989 24990 24991 24992 24993 24994 24995 #> [24997] 24996 24997 24998 24999 25000 25001 25002 25003 25004 25005 25006 25007 #> [25009] 25008 25009 25010 25011 25012 25013 25014 25015 25016 25017 25018 25019 #> [25021] 25020 25021 25022 25023 25024 25025 25026 25027 25028 25029 25030 25031 #> [25033] 25032 25033 25034 25035 25036 25037 25038 25039 25040 25041 25042 25043 #> [25045] 25044 25045 25046 25047 25048 25049 25050 25051 25052 25053 25054 25055 #> [25057] 25056 25057 25058 25059 25060 25061 25062 25063 25064 25065 25066 25067 #> [25069] 25068 25069 25070 25071 25072 25073 25074 25075 25076 25077 25078 25079 #> [25081] 25080 25081 25082 25083 25084 25085 25086 25087 25088 25089 25090 25091 #> [25093] 25092 25093 25094 25095 25096 25097 25098 25099 25100 25101 25102 25103 #> [25105] 25104 25105 25106 25107 25108 25109 25110 25111 25112 25113 25114 25115 #> [25117] 25116 25117 25118 25119 25120 25121 25122 25123 25124 25125 25126 25127 #> [25129] 25128 25129 25130 25131 25132 25133 25134 25135 25136 25137 25138 25139 #> [25141] 25140 25141 25142 25143 25144 25145 25146 25147 25148 25149 25150 25151 #> [25153] 25152 25153 25154 25155 25156 25157 25158 25159 25160 25161 25162 25163 #> [25165] 25164 25165 25166 25167 25168 25169 25170 25171 25172 25173 25174 25175 #> [25177] 25176 25177 25178 25179 25180 25181 25182 25183 25184 25185 25186 25187 #> [25189] 25188 25189 25190 25191 25192 25193 25194 25195 25196 25197 25198 25199 #> [25201] 25200 25201 25202 25203 25204 25205 25206 25207 25208 25209 25210 25211 #> [25213] 25212 25213 25214 25215 25216 25217 25218 25219 25220 25221 25222 25223 #> [25225] 25224 25225 25226 25227 25228 25229 25230 25231 25232 25233 25234 25235 #> [25237] 25236 25237 25238 25239 25240 25241 25242 25243 25244 25245 25246 25247 #> [25249] 25248 25249 25250 25251 25252 25253 25254 25255 25256 25257 25258 25259 #> [25261] 25260 25261 25262 25263 25264 25265 25266 25267 25268 25269 25270 25271 #> [25273] 25272 25273 25274 25275 25276 25277 25278 25279 25280 25281 25282 25283 #> [25285] 25284 25285 25286 25287 25288 25289 25290 25291 25292 25293 25294 25295 #> [25297] 25296 25297 25298 25299 25300 25301 25302 25303 25304 25305 25306 25307 #> [25309] 25308 25309 25310 25311 25312 25313 25314 25315 25316 25317 25318 25319 #> [25321] 25320 25321 25322 25323 25324 25325 25326 25327 25328 25329 25330 25331 #> [25333] 25332 25333 25334 25335 25336 25337 25338 25339 25340 25341 25342 25343 #> [25345] 25344 25345 25346 25347 25348 25349 25350 25351 25352 25353 25354 25355 #> [25357] 25356 25357 25358 25359 25360 25361 25362 25363 25364 25365 25366 25367 #> [25369] 25368 25369 25370 25371 25372 25373 25374 25375 25376 25377 25378 25379 #> [25381] 25380 25381 25382 25383 25384 25385 25386 25387 25388 25389 25390 25391 #> [25393] 25392 25393 25394 25395 25396 25397 25398 25399 25400 25401 25402 25403 #> [25405] 25404 25405 25406 25407 25408 25409 25410 25411 25412 25413 25414 25415 #> [25417] 25416 25417 25418 25419 25420 25421 25422 25423 25424 25425 25426 25427 #> [25429] 25428 25429 25430 25431 25432 25433 25434 25435 25436 25437 25438 25439 #> [25441] 25440 25441 25442 25443 25444 25445 25446 25447 25448 25449 25450 25451 #> [25453] 25452 25453 25454 25455 25456 25457 25458 25459 25460 25461 25462 25463 #> [25465] 25464 25465 25466 25467 25468 25469 25470 25471 25472 25473 25474 25475 #> [25477] 25476 25477 25478 25479 25480 25481 25482 25483 25484 25485 25486 25487 #> [25489] 25488 25489 25490 25491 25492 25493 25494 25495 25496 25497 25498 25499 #> [25501] 25500 25501 25502 25503 25504 25505 25506 25507 25508 25509 25510 25511 #> [25513] 25512 25513 25514 25515 25516 25517 25518 25519 25520 25521 25522 25523 #> [25525] 25524 25525 25526 25527 25528 25529 25530 25531 25532 25533 25534 25535 #> [25537] 25536 25537 25538 25539 25540 25541 25542 25543 25544 25545 25546 25547 #> [25549] 25548 25549 25550 25551 25552 25553 25554 25555 25556 25557 25558 25559 #> [25561] 25560 25561 25562 25563 25564 25565 25566 25567 25568 25569 25570 25571 #> [25573] 25572 25573 25574 25575 25576 25577 25578 25579 25580 25581 25582 25583 #> [25585] 25584 25585 25586 25587 25588 25589 25590 25591 25592 25593 25594 25595 #> [25597] 25596 25597 25598 25599 25600 25601 25602 25603 25604 25605 25606 25607 #> [25609] 25608 25609 25610 25611 25612 25613 25614 25615 25616 25617 25618 25619 #> [25621] 25620 25621 25622 25623 25624 25625 25626 25627 25628 25629 25630 25631 #> [25633] 25632 25633 25634 25635 25636 25637 25638 25639 25640 25641 25642 25643 #> [25645] 25644 25645 25646 25647 25648 25649 25650 25651 25652 25653 25654 25655 #> [25657] 25656 25657 25658 25659 25660 25661 25662 25663 25664 25665 25666 25667 #> [25669] 25668 25669 25670 25671 25672 25673 25674 25675 25676 25677 25678 25679 #> [25681] 25680 25681 25682 25683 25684 25685 25686 25687 25688 25689 25690 25691 #> [25693] 25692 25693 25694 25695 25696 25697 25698 25699 25700 25701 25702 25703 #> [25705] 25704 25705 25706 25707 25708 25709 25710 25711 25712 25713 25714 25715 #> [25717] 25716 25717 25718 25719 25720 25721 25722 25723 25724 25725 25726 25727 #> [25729] 25728 25729 25730 25731 25732 25733 25734 25735 25736 25737 25738 25739 #> [25741] 25740 25741 25742 25743 25744 25745 25746 25747 25748 25749 25750 25751 #> [25753] 25752 25753 25754 25755 25756 25757 25758 25759 25760 25761 25762 25763 #> [25765] 25764 25765 25766 25767 25768 25769 25770 25771 25772 25773 25774 25775 #> [25777] 25776 25777 25778 25779 25780 25781 25782 25783 25784 25785 25786 25787 #> [25789] 25788 25789 25790 25791 25792 25793 25794 25795 25796 25797 25798 25799 #> [25801] 25800 25801 25802 25803 25804 25805 25806 25807 25808 25809 25810 25811 #> [25813] 25812 25813 25814 25815 25816 25817 25818 25819 25820 25821 25822 25823 #> [25825] 25824 25825 25826 25827 25828 25829 25830 25831 25832 25833 25834 25835 #> [25837] 25836 25837 25838 25839 25840 25841 25842 25843 25844 25845 25846 25847 #> [25849] 25848 25849 25850 25851 25852 25853 25854 25855 25856 25857 25858 25859 #> [25861] 25860 25861 25862 25863 25864 25865 25866 25867 25868 25869 25870 25871 #> [25873] 25872 25873 25874 25875 25876 25877 25878 25879 25880 25881 25882 25883 #> [25885] 25884 25885 25886 25887 25888 25889 25890 25891 25892 25893 25894 25895 #> [25897] 25896 25897 25898 25899 25900 25901 25902 25903 25904 25905 25906 25907 #> [25909] 25908 25909 25910 25911 25912 25913 25914 25915 25916 25917 25918 25919 #> [25921] 25920 25921 25922 25923 25924 25925 25926 25927 25928 25929 25930 25931 #> [25933] 25932 25933 25934 25935 25936 25937 25938 25939 25940 25941 25942 25943 #> [25945] 25944 25945 25946 25947 25948 25949 25950 25951 25952 25953 25954 25955 #> [25957] 25956 25957 25958 25959 25960 25961 25962 25963 25964 25965 25966 25967 #> [25969] 25968 25969 25970 25971 25972 25973 25974 25975 25976 25977 25978 25979 #> [25981] 25980 25981 25982 25983 25984 25985 25986 25987 25988 25989 25990 25991 #> [25993] 25992 25993 25994 25995 25996 25997 25998 25999 26000 26001 26002 26003 #> [26005] 26004 26005 26006 26007 26008 26009 26010 26011 26012 26013 26014 26015 #> [26017] 26016 26017 26018 26019 26020 26021 26022 26023 26024 26025 26026 26027 #> [26029] 26028 26029 26030 26031 26032 26033 26034 26035 26036 26037 26038 26039 #> [26041] 26040 26041 26042 26043 26044 26045 26046 26047 26048 26049 26050 26051 #> [26053] 26052 26053 26054 26055 26056 26057 26058 26059 26060 26061 26062 26063 #> [26065] 26064 26065 26066 26067 26068 26069 26070 26071 26072 26073 26074 26075 #> [26077] 26076 26077 26078 26079 26080 26081 26082 26083 26084 26085 26086 26087 #> [26089] 26088 26089 26090 26091 26092 26093 26094 26095 26096 26097 26098 26099 #> [26101] 26100 26101 26102 26103 26104 26105 26106 26107 26108 26109 26110 26111 #> [26113] 26112 26113 26114 26115 26116 26117 26118 26119 26120 26121 26122 26123 #> [26125] 26124 26125 26126 26127 26128 26129 26130 26131 26132 26133 26134 26135 #> [26137] 26136 26137 26138 26139 26140 26141 26142 26143 26144 26145 26146 26147 #> [26149] 26148 26149 26150 26151 26152 26153 26154 26155 26156 26157 26158 26159 #> [26161] 26160 26161 26162 26163 26164 26165 26166 26167 26168 26169 26170 26171 #> [26173] 26172 26173 26174 26175 26176 26177 26178 26179 26180 26181 26182 26183 #> [26185] 26184 26185 26186 26187 26188 26189 26190 26191 26192 26193 26194 26195 #> [26197] 26196 26197 26198 26199 26200 26201 26202 26203 26204 26205 26206 26207 #> [26209] 26208 26209 26210 26211 26212 26213 26214 26215 26216 26217 26218 26219 #> [26221] 26220 26221 26222 26223 26224 26225 26226 26227 26228 26229 26230 26231 #> [26233] 26232 26233 26234 26235 26236 26237 26238 26239 26240 26241 26242 26243 #> [26245] 26244 26245 26246 26247 26248 26249 26250 26251 26252 26253 26254 26255 #> [26257] 26256 26257 26258 26259 26260 26261 26262 26263 26264 26265 26266 26267 #> [26269] 26268 26269 26270 26271 26272 26273 26274 26275 26276 26277 26278 26279 #> [26281] 26280 26281 26282 26283 26284 26285 26286 26287 26288 26289 26290 26291 #> [26293] 26292 26293 26294 26295 26296 26297 26298 26299 26300 26301 26302 26303 #> [26305] 26304 26305 26306 26307 26308 26309 26310 26311 26312 26313 26314 26315 #> [26317] 26316 26317 26318 26319 26320 26321 26322 26323 26324 26325 26326 26327 #> [26329] 26328 26329 26330 26331 26332 26333 26334 26335 26336 26337 26338 26339 #> [26341] 26340 26341 26342 26343 26344 26345 26346 26347 26348 26349 26350 26351 #> [26353] 26352 26353 26354 26355 26356 26357 26358 26359 26360 26361 26362 26363 #> [26365] 26364 26365 26366 26367 26368 26369 26370 26371 26372 26373 26374 26375 #> [26377] 26376 26377 26378 26379 26380 26381 26382 26383 26384 26385 26386 26387 #> [26389] 26388 26389 26390 26391 26392 26393 26394 26395 26396 26397 26398 26399 #> [26401] 26400 26401 26402 26403 26404 26405 26406 26407 26408 26409 26410 26411 #> [26413] 26412 26413 26414 26415 26416 26417 26418 26419 26420 26421 26422 26423 #> [26425] 26424 26425 26426 26427 26428 26429 26430 26431 26432 26433 26434 26435 #> [26437] 26436 26437 26438 26439 26440 26441 26442 26443 26444 26445 26446 26447 #> [26449] 26448 26449 26450 26451 26452 26453 26454 26455 26456 26457 26458 26459 #> [26461] 26460 26461 26462 26463 26464 26465 26466 26467 26468 26469 26470 26471 #> [26473] 26472 26473 26474 26475 26476 26477 26478 26479 26480 26481 26482 26483 #> [26485] 26484 26485 26486 26487 26488 26489 26490 26491 26492 26493 26494 26495 #> [26497] 26496 26497 26498 26499 26500 26501 26502 26503 26504 26505 26506 26507 #> [26509] 26508 26509 26510 26511 26512 26513 26514 26515 26516 26517 26518 26519 #> [26521] 26520 26521 26522 26523 26524 26525 26526 26527 26528 26529 26530 26531 #> [26533] 26532 26533 26534 26535 26536 26537 26538 26539 26540 26541 26542 26543 #> [26545] 26544 26545 26546 26547 26548 26549 26550 26551 26552 26553 26554 26555 #> [26557] 26556 26557 26558 26559 26560 26561 26562 26563 26564 26565 26566 26567 #> [26569] 26568 26569 26570 26571 26572 26573 26574 26575 26576 26577 26578 26579 #> [26581] 26580 26581 26582 26583 26584 26585 26586 26587 26588 26589 26590 26591 #> [26593] 26592 26593 26594 26595 26596 26597 26598 26599 26600 26601 26602 26603 #> [26605] 26604 26605 26606 26607 26608 26609 26610 26611 26612 26613 26614 26615 #> [26617] 26616 26617 26618 26619 26620 26621 26622 26623 26624 26625 26626 26627 #> [26629] 26628 26629 26630 26631 26632 26633 26634 26635 26636 26637 26638 26639 #> [26641] 26640 26641 26642 26643 26644 26645 26646 26647 26648 26649 26650 26651 #> [26653] 26652 26653 26654 26655 26656 26657 26658 26659 26660 26661 26662 26663 #> [26665] 26664 26665 26666 26667 26668 26669 26670 26671 26672 26673 26674 26675 #> [26677] 26676 26677 26678 26679 26680 26681 26682 26683 26684 26685 26686 26687 #> [26689] 26688 26689 26690 26691 26692 26693 26694 26695 26696 26697 26698 26699 #> [26701] 26700 26701 26702 26703 26704 26705 26706 26707 26708 26709 26710 26711 #> [26713] 26712 26713 26714 26715 26716 26717 26718 26719 26720 26721 26722 26723 #> [26725] 26724 26725 26726 26727 26728 26729 26730 26731 26732 26733 26734 26735 #> [26737] 26736 26737 26738 26739 26740 26741 26742 26743 26744 26745 26746 26747 #> [26749] 26748 26749 26750 26751 26752 26753 26754 26755 26756 26757 26758 26759 #> [26761] 26760 26761 26762 26763 26764 26765 26766 26767 26768 26769 26770 26771 #> [26773] 26772 26773 26774 26775 26776 26777 26778 26779 26780 26781 26782 26783 #> [26785] 26784 26785 26786 26787 26788 26789 26790 26791 26792 26793 26794 26795 #> [26797] 26796 26797 26798 26799 26800 26801 26802 26803 26804 26805 26806 26807 #> [26809] 26808 26809 26810 26811 26812 26813 26814 26815 26816 26817 26818 26819 #> [26821] 26820 26821 26822 26823 26824 26825 26826 26827 26828 26829 26830 26831 #> [26833] 26832 26833 26834 26835 26836 26837 26838 26839 26840 26841 26842 26843 #> [26845] 26844 26845 26846 26847 26848 26849 26850 26851 26852 26853 26854 26855 #> [26857] 26856 26857 26858 26859 26860 26861 26862 26863 26864 26865 26866 26867 #> [26869] 26868 26869 26870 26871 26872 26873 26874 26875 26876 26877 26878 26879 #> [26881] 26880 26881 26882 26883 26884 26885 26886 26887 26888 26889 26890 26891 #> [26893] 26892 26893 26894 26895 26896 26897 26898 26899 26900 26901 26902 26903 #> [26905] 26904 26905 26906 26907 26908 26909 26910 26911 26912 26913 26914 26915 #> [26917] 26916 26917 26918 26919 26920 26921 26922 26923 26924 26925 26926 26927 #> [26929] 26928 26929 26930 26931 26932 26933 26934 26935 26936 26937 26938 26939 #> [26941] 26940 26941 26942 26943 26944 26945 26946 26947 26948 26949 26950 26951 #> [26953] 26952 26953 26954 26955 26956 26957 26958 26959 26960 26961 26962 26963 #> [26965] 26964 26965 26966 26967 26968 26969 26970 26971 26972 26973 26974 26975 #> [26977] 26976 26977 26978 26979 26980 26981 26982 26983 26984 26985 26986 26987 #> [26989] 26988 26989 26990 26991 26992 26993 26994 26995 26996 26997 26998 26999 #> [27001] 27000 27001 27002 27003 27004 27005 27006 27007 27008 27009 27010 27011 #> [27013] 27012 27013 27014 27015 27016 27017 27018 27019 27020 27021 27022 27023 #> [27025] 27024 27025 27026 27027 27028 27029 27030 27031 27032 27033 27034 27035 #> [27037] 27036 27037 27038 27039 27040 27041 27042 27043 27044 27045 27046 27047 #> [27049] 27048 27049 27050 27051 27052 27053 27054 27055 27056 27057 27058 27059 #> [27061] 27060 27061 27062 27063 27064 27065 27066 27067 27068 27069 27070 27071 #> [27073] 27072 27073 27074 27075 27076 27077 27078 27079 27080 27081 27082 27083 #> [27085] 27084 27085 27086 27087 27088 27089 27090 27091 27092 27093 27094 27095 #> [27097] 27096 27097 27098 27099 27100 27101 27102 27103 27104 27105 27106 27107 #> [27109] 27108 27109 27110 27111 27112 27113 27114 27115 27116 27117 27118 27119 #> [27121] 27120 27121 27122 27123 27124 27125 27126 27127 27128 27129 27130 27131 #> [27133] 27132 27133 27134 27135 27136 27137 27138 27139 27140 27141 27142 27143 #> [27145] 27144 27145 27146 27147 27148 27149 27150 27151 27152 27153 27154 27155 #> [27157] 27156 27157 27158 27159 27160 27161 27162 27163 27164 27165 27166 27167 #> [27169] 27168 27169 27170 27171 27172 27173 27174 27175 27176 27177 27178 27179 #> [27181] 27180 27181 27182 27183 27184 27185 27186 27187 27188 27189 27190 27191 #> [27193] 27192 27193 27194 27195 27196 27197 27198 27199 27200 27201 27202 27203 #> [27205] 27204 27205 27206 27207 27208 27209 27210 27211 27212 27213 27214 27215 #> [27217] 27216 27217 27218 27219 27220 27221 27222 27223 27224 27225 27226 27227 #> [27229] 27228 27229 27230 27231 27232 27233 27234 27235 27236 27237 27238 27239 #> [27241] 27240 27241 27242 27243 27244 27245 27246 27247 27248 27249 27250 27251 #> [27253] 27252 27253 27254 27255 27256 27257 27258 27259 27260 27261 27262 27263 #> [27265] 27264 27265 27266 27267 27268 27269 27270 27271 27272 27273 27274 27275 #> [27277] 27276 27277 27278 27279 27280 27281 27282 27283 27284 27285 27286 27287 #> [27289] 27288 27289 27290 27291 27292 27293 27294 27295 27296 27297 27298 27299 #> [27301] 27300 27301 27302 27303 27304 27305 27306 27307 27308 27309 27310 27311 #> [27313] 27312 27313 27314 27315 27316 27317 27318 27319 27320 27321 27322 27323 #> [27325] 27324 27325 27326 27327 27328 27329 27330 27331 27332 27333 27334 27335 #> [27337] 27336 27337 27338 27339 27340 27341 27342 27343 27344 27345 27346 27347 #> [27349] 27348 27349 27350 27351 27352 27353 27354 27355 27356 27357 27358 27359 #> [27361] 27360 27361 27362 27363 27364 27365 27366 27367 27368 27369 27370 27371 #> [27373] 27372 27373 27374 27375 27376 27377 27378 27379 27380 27381 27382 27383 #> [27385] 27384 27385 27386 27387 27388 27389 27390 27391 27392 27393 27394 27395 #> [27397] 27396 27397 27398 27399 27400 27401 27402 27403 27404 27405 27406 27407 #> [27409] 27408 27409 27410 27411 27412 27413 27414 27415 27416 27417 27418 27419 #> [27421] 27420 27421 27422 27423 27424 27425 27426 27427 27428 27429 27430 27431 #> [27433] 27432 27433 27434 27435 27436 27437 27438 27439 27440 27441 27442 27443 #> [27445] 27444 27445 27446 27447 27448 27449 27450 27451 27452 27453 27454 27455 #> [27457] 27456 27457 27458 27459 27460 27461 27462 27463 27464 27465 27466 27467 #> [27469] 27468 27469 27470 27471 27472 27473 27474 27475 27476 27477 27478 27479 #> [27481] 27480 27481 27482 27483 27484 27485 27486 27487 27488 27489 27490 27491 #> [27493] 27492 27493 27494 27495 27496 27497 27498 27499 27500 27501 27502 27503 #> [27505] 27504 27505 27506 27507 27508 27509 27510 27511 27512 27513 27514 27515 #> [27517] 27516 27517 27518 27519 27520 27521 27522 27523 27524 27525 27526 27527 #> [27529] 27528 27529 27530 27531 27532 27533 27534 27535 27536 27537 27538 27539 #> [27541] 27540 27541 27542 27543 27544 27545 27546 27547 27548 27549 27550 27551 #> [27553] 27552 27553 27554 27555 27556 27557 27558 27559 27560 27561 27562 27563 #> [27565] 27564 27565 27566 27567 27568 27569 27570 27571 27572 27573 27574 27575 #> [27577] 27576 27577 27578 27579 27580 27581 27582 27583 27584 27585 27586 27587 #> [27589] 27588 27589 27590 27591 27592 27593 27594 27595 27596 27597 27598 27599 #> [27601] 27600 27601 27602 27603 27604 27605 27606 27607 27608 27609 27610 27611 #> [27613] 27612 27613 27614 27615 27616 27617 27618 27619 27620 27621 27622 27623 #> [27625] 27624 27625 27626 27627 27628 27629 27630 27631 27632 27633 27634 27635 #> [27637] 27636 27637 27638 27639 27640 27641 27642 27643 27644 27645 27646 27647 #> [27649] 27648 27649 27650 27651 27652 27653 27654 27655 27656 27657 27658 27659 #> [27661] 27660 27661 27662 27663 27664 27665 27666 27667 27668 27669 27670 27671 #> [27673] 27672 27673 27674 27675 27676 27677 27678 27679 27680 27681 27682 27683 #> [27685] 27684 27685 27686 27687 27688 27689 27690 27691 27692 27693 27694 27695 #> [27697] 27696 27697 27698 27699 27700 27701 27702 27703 27704 27705 27706 27707 #> [27709] 27708 27709 27710 27711 27712 27713 27714 27715 27716 27717 27718 27719 #> [27721] 27720 27721 27722 27723 27724 27725 27726 27727 27728 27729 27730 27731 #> [27733] 27732 27733 27734 27735 27736 27737 27738 27739 27740 27741 27742 27743 #> [27745] 27744 27745 27746 27747 27748 27749 27750 27751 27752 27753 27754 27755 #> [27757] 27756 27757 27758 27759 27760 27761 27762 27763 27764 27765 27766 27767 #> [27769] 27768 27769 27770 27771 27772 27773 27774 27775 27776 27777 27778 27779 #> [27781] 27780 27781 27782 27783 27784 27785 27786 27787 27788 27789 27790 27791 #> [27793] 27792 27793 27794 27795 27796 27797 27798 27799 27800 27801 27802 27803 #> [27805] 27804 27805 27806 27807 27808 27809 27810 27811 27812 27813 27814 27815 #> [27817] 27816 27817 27818 27819 27820 27821 27822 27823 27824 27825 27826 27827 #> [27829] 27828 27829 27830 27831 27832 27833 27834 27835 27836 27837 27838 27839 #> [27841] 27840 27841 27842 27843 27844 27845 27846 27847 27848 27849 27850 27851 #> [27853] 27852 27853 27854 27855 27856 27857 27858 27859 27860 27861 27862 27863 #> [27865] 27864 27865 27866 27867 27868 27869 27870 27871 27872 27873 27874 27875 #> [27877] 27876 27877 27878 27879 27880 27881 27882 27883 27884 27885 27886 27887 #> [27889] 27888 27889 27890 27891 27892 27893 27894 27895 27896 27897 27898 27899 #> [27901] 27900 27901 27902 27903 27904 27905 27906 27907 27908 27909 27910 27911 #> [27913] 27912 27913 27914 27915 27916 27917 27918 27919 27920 27921 27922 27923 #> [27925] 27924 27925 27926 27927 27928 27929 27930 27931 27932 27933 27934 27935 #> [27937] 27936 27937 27938 27939 27940 27941 27942 27943 27944 27945 27946 27947 #> [27949] 27948 27949 27950 27951 27952 27953 27954 27955 27956 27957 27958 27959 #> [27961] 27960 27961 27962 27963 27964 27965 27966 27967 27968 27969 27970 27971 #> [27973] 27972 27973 27974 27975 27976 27977 27978 27979 27980 27981 27982 27983 #> [27985] 27984 27985 27986 27987 27988 27989 27990 27991 27992 27993 27994 27995 #> [27997] 27996 27997 27998 27999 28000 28001 28002 28003 28004 28005 28006 28007 #> [28009] 28008 28009 28010 28011 28012 28013 28014 28015 28016 28017 28018 28019 #> [28021] 28020 28021 28022 28023 28024 28025 28026 28027 28028 28029 28030 28031 #> [28033] 28032 28033 28034 28035 28036 28037 28038 28039 28040 28041 28042 28043 #> [28045] 28044 28045 28046 28047 28048 28049 28050 28051 28052 28053 28054 28055 #> [28057] 28056 28057 28058 28059 28060 28061 28062 28063 28064 28065 28066 28067 #> [28069] 28068 28069 28070 28071 28072 28073 28074 28075 28076 28077 28078 28079 #> [28081] 28080 28081 28082 28083 28084 28085 28086 28087 28088 28089 28090 28091 #> [28093] 28092 28093 28094 28095 28096 28097 28098 28099 28100 28101 28102 28103 #> [28105] 28104 28105 28106 28107 28108 28109 28110 28111 28112 28113 28114 28115 #> [28117] 28116 28117 28118 28119 28120 28121 28122 28123 28124 28125 28126 28127 #> [28129] 28128 28129 28130 28131 28132 28133 28134 28135 28136 28137 28138 28139 #> [28141] 28140 28141 28142 28143 28144 28145 28146 28147 28148 28149 28150 28151 #> [28153] 28152 28153 28154 28155 28156 28157 28158 28159 28160 28161 28162 28163 #> [28165] 28164 28165 28166 28167 28168 28169 28170 28171 28172 28173 28174 28175 #> [28177] 28176 28177 28178 28179 28180 28181 28182 28183 28184 28185 28186 28187 #> [28189] 28188 28189 28190 28191 28192 28193 28194 28195 28196 28197 28198 28199 #> [28201] 28200 28201 28202 28203 28204 28205 28206 28207 28208 28209 28210 28211 #> [28213] 28212 28213 28214 28215 28216 28217 28218 28219 28220 28221 28222 28223 #> [28225] 28224 28225 28226 28227 28228 28229 28230 28231 28232 28233 28234 28235 #> [28237] 28236 28237 28238 28239 28240 28241 28242 28243 28244 28245 28246 28247 #> [28249] 28248 28249 28250 28251 28252 28253 28254 28255 28256 28257 28258 28259 #> [28261] 28260 28261 28262 28263 28264 28265 28266 28267 28268 28269 28270 28271 #> [28273] 28272 28273 28274 28275 28276 28277 28278 28279 28280 28281 28282 28283 #> [28285] 28284 28285 28286 28287 28288 28289 28290 28291 28292 28293 28294 28295 #> [28297] 28296 28297 28298 28299 28300 28301 28302 28303 28304 28305 28306 28307 #> [28309] 28308 28309 28310 28311 28312 28313 28314 28315 28316 28317 28318 28319 #> [28321] 28320 28321 28322 28323 28324 28325 28326 28327 28328 28329 28330 28331 #> [28333] 28332 28333 28334 28335 28336 28337 28338 28339 28340 28341 28342 28343 #> [28345] 28344 28345 28346 28347 28348 28349 28350 28351 28352 28353 28354 28355 #> [28357] 28356 28357 28358 28359 28360 28361 28362 28363 28364 28365 28366 28367 #> [28369] 28368 28369 28370 28371 28372 28373 28374 28375 28376 28377 28378 28379 #> [28381] 28380 28381 28382 28383 28384 28385 28386 28387 28388 28389 28390 28391 #> [28393] 28392 28393 28394 28395 28396 28397 28398 28399 28400 28401 28402 28403 #> [28405] 28404 28405 28406 28407 28408 28409 28410 28411 28412 28413 28414 28415 #> [28417] 28416 28417 28418 28419 28420 28421 28422 28423 28424 28425 28426 28427 #> [28429] 28428 28429 28430 28431 28432 28433 28434 28435 28436 28437 28438 28439 #> [28441] 28440 28441 28442 28443 28444 28445 28446 28447 28448 28449 28450 28451 #> [28453] 28452 28453 28454 28455 28456 28457 28458 28459 28460 28461 28462 28463 #> [28465] 28464 28465 28466 28467 28468 28469 28470 28471 28472 28473 28474 28475 #> [28477] 28476 28477 28478 28479 28480 28481 28482 28483 28484 28485 28486 28487 #> [28489] 28488 28489 28490 28491 28492 28493 28494 28495 28496 28497 28498 28499 #> [28501] 28500 28501 28502 28503 28504 28505 28506 28507 28508 28509 28510 28511 #> [28513] 28512 28513 28514 28515 28516 28517 28518 28519 28520 28521 28522 28523 #> [28525] 28524 28525 28526 28527 28528 28529 28530 28531 28532 28533 28534 28535 #> [28537] 28536 28537 28538 28539 28540 28541 28542 28543 28544 28545 28546 28547 #> [28549] 28548 28549 28550 28551 28552 28553 28554 28555 28556 28557 28558 28559 #> [28561] 28560 28561 28562 28563 28564 28565 28566 28567 28568 28569 28570 28571 #> [28573] 28572 28573 28574 28575 28576 28577 28578 28579 28580 28581 28582 28583 #> [28585] 28584 28585 28586 28587 28588 28589 28590 28591 28592 28593 28594 28595 #> [28597] 28596 28597 28598 28599 28600 28601 28602 28603 28604 28605 28606 28607 #> [28609] 28608 28609 28610 28611 28612 28613 28614 28615 28616 28617 28618 28619 #> [28621] 28620 28621 28622 28623 28624 28625 28626 28627 28628 28629 28630 28631 #> [28633] 28632 28633 28634 28635 28636 28637 28638 28639 28640 28641 28642 28643 #> [28645] 28644 28645 28646 28647 28648 28649 28650 28651 28652 28653 28654 28655 #> [28657] 28656 28657 28658 28659 28660 28661 28662 28663 28664 28665 28666 28667 #> [28669] 28668 28669 28670 28671 28672 28673 28674 28675 28676 28677 28678 28679 #> [28681] 28680 28681 28682 28683 28684 28685 28686 28687 28688 28689 28690 28691 #> [28693] 28692 28693 28694 28695 28696 28697 28698 28699 28700 28701 28702 28703 #> [28705] 28704 28705 28706 28707 28708 28709 28710 28711 28712 28713 28714 28715 #> [28717] 28716 28717 28718 28719 28720 28721 28722 28723 28724 28725 28726 28727 #> [28729] 28728 28729 28730 28731 28732 28733 28734 28735 28736 28737 28738 28739 #> [28741] 28740 28741 28742 28743 28744 28745 28746 28747 28748 28749 28750 28751 #> [28753] 28752 28753 28754 28755 28756 28757 28758 28759 28760 28761 28762 28763 #> [28765] 28764 28765 28766 28767 28768 28769 28770 28771 28772 28773 28774 28775 #> [28777] 28776 28777 28778 28779 28780 28781 28782 28783 28784 28785 28786 28787 #> [28789] 28788 28789 28790 28791 28792 28793 28794 28795 28796 28797 28798 28799 #> [28801] 28800 28801 28802 28803 28804 28805 28806 28807 28808 28809 28810 28811 #> [28813] 28812 28813 28814 28815 28816 28817 28818 28819 28820 28821 28822 28823 #> [28825] 28824 28825 28826 28827 28828 28829 28830 28831 28832 28833 28834 28835 #> [28837] 28836 28837 28838 28839 28840 28841 28842 28843 28844 28845 28846 28847 #> [28849] 28848 28849 28850 28851 28852 28853 28854 28855 28856 28857 28858 28859 #> [28861] 28860 28861 28862 28863 28864 28865 28866 28867 28868 28869 28870 28871 #> [28873] 28872 28873 28874 28875 28876 28877 28878 28879 28880 28881 28882 28883 #> [28885] 28884 28885 28886 28887 28888 28889 28890 28891 28892 28893 28894 28895 #> [28897] 28896 28897 28898 28899 28900 28901 28902 28903 28904 28905 28906 28907 #> [28909] 28908 28909 28910 28911 28912 28913 28914 28915 28916 28917 28918 28919 #> [28921] 28920 28921 28922 28923 28924 28925 28926 28927 28928 28929 28930 28931 #> [28933] 28932 28933 28934 28935 28936 28937 28938 28939 28940 28941 28942 28943 #> [28945] 28944 28945 28946 28947 28948 28949 28950 28951 28952 28953 28954 28955 #> [28957] 28956 28957 28958 28959 28960 28961 28962 28963 28964 28965 28966 28967 #> [28969] 28968 28969 28970 28971 28972 28973 28974 28975 28976 28977 28978 28979 #> [28981] 28980 28981 28982 28983 28984 28985 28986 28987 28988 28989 28990 28991 #> [28993] 28992 28993 28994 28995 28996 28997 28998 28999 29000 29001 29002 29003 #> [29005] 29004 29005 29006 29007 29008 29009 29010 29011 29012 29013 29014 29015 #> [29017] 29016 29017 29018 29019 29020 29021 29022 29023 29024 29025 29026 29027 #> [29029] 29028 29029 29030 29031 29032 29033 29034 29035 29036 29037 29038 29039 #> [29041] 29040 29041 29042 29043 29044 29045 29046 29047 29048 29049 29050 29051 #> [29053] 29052 29053 29054 29055 29056 29057 29058 29059 29060 29061 29062 29063 #> [29065] 29064 29065 29066 29067 29068 29069 29070 29071 29072 29073 29074 29075 #> [29077] 29076 29077 29078 29079 29080 29081 29082 29083 29084 29085 29086 29087 #> [29089] 29088 29089 29090 29091 29092 29093 29094 29095 29096 29097 29098 29099 #> [29101] 29100 29101 29102 29103 29104 29105 29106 29107 29108 29109 29110 29111 #> [29113] 29112 29113 29114 29115 29116 29117 29118 29119 29120 29121 29122 29123 #> [29125] 29124 29125 29126 29127 29128 29129 29130 29131 29132 29133 29134 29135 #> [29137] 29136 29137 29138 29139 29140 29141 29142 29143 29144 29145 29146 29147 #> [29149] 29148 29149 29150 29151 29152 29153 29154 29155 29156 29157 29158 29159 #> [29161] 29160 29161 29162 29163 29164 29165 29166 29167 29168 29169 29170 29171 #> [29173] 29172 29173 29174 29175 29176 29177 29178 29179 29180 29181 29182 29183 #> [29185] 29184 29185 29186 29187 29188 29189 29190 29191 29192 29193 29194 29195 #> [29197] 29196 29197 29198 29199 29200 29201 29202 29203 29204 29205 29206 29207 #> [29209] 29208 29209 29210 29211 29212 29213 29214 29215 29216 29217 29218 29219 #> [29221] 29220 29221 29222 29223 29224 29225 29226 29227 29228 29229 29230 29231 #> [29233] 29232 29233 29234 29235 29236 29237 29238 29239 29240 29241 29242 29243 #> [29245] 29244 29245 29246 29247 29248 29249 29250 29251 29252 29253 29254 29255 #> [29257] 29256 29257 29258 29259 29260 29261 29262 29263 29264 29265 29266 29267 #> [29269] 29268 29269 29270 29271 29272 29273 29274 29275 29276 29277 29278 29279 #> [29281] 29280 29281 29282 29283 29284 29285 29286 29287 29288 29289 29290 29291 #> [29293] 29292 29293 29294 29295 29296 29297 29298 29299 29300 29301 29302 29303 #> [29305] 29304 29305 29306 29307 29308 29309 29310 29311 29312 29313 29314 29315 #> [29317] 29316 29317 29318 29319 29320 29321 29322 29323 29324 29325 29326 29327 #> [29329] 29328 29329 29330 29331 29332 29333 29334 29335 29336 29337 29338 29339 #> [29341] 29340 29341 29342 29343 29344 29345 29346 29347 29348 29349 29350 29351 #> [29353] 29352 29353 29354 29355 29356 29357 29358 29359 29360 29361 29362 29363 #> [29365] 29364 29365 29366 29367 29368 29369 29370 29371 29372 29373 29374 29375 #> [29377] 29376 29377 29378 29379 29380 29381 29382 29383 29384 29385 29386 29387 #> [29389] 29388 29389 29390 29391 29392 29393 29394 29395 29396 29397 29398 29399 #> [29401] 29400 29401 29402 29403 29404 29405 29406 29407 29408 29409 29410 29411 #> [29413] 29412 29413 29414 29415 29416 29417 29418 29419 29420 29421 29422 29423 #> [29425] 29424 29425 29426 29427 29428 29429 29430 29431 29432 29433 29434 29435 #> [29437] 29436 29437 29438 29439 29440 29441 29442 29443 29444 29445 29446 29447 #> [29449] 29448 29449 29450 29451 29452 29453 29454 29455 29456 29457 29458 29459 #> [29461] 29460 29461 29462 29463 29464 29465 29466 29467 29468 29469 29470 29471 #> [29473] 29472 29473 29474 29475 29476 29477 29478 29479 29480 29481 29482 29483 #> [29485] 29484 29485 29486 29487 29488 29489 29490 29491 29492 29493 29494 29495 #> [29497] 29496 29497 29498 29499 29500 29501 29502 29503 29504 29505 29506 29507 #> [29509] 29508 29509 29510 29511 29512 29513 29514 29515 29516 29517 29518 29519 #> [29521] 29520 29521 29522 29523 29524 29525 29526 29527 29528 29529 29530 29531 #> [29533] 29532 29533 29534 29535 29536 29537 29538 29539 29540 29541 29542 29543 #> [29545] 29544 29545 29546 29547 29548 29549 29550 29551 29552 29553 29554 29555 #> [29557] 29556 29557 29558 29559 29560 29561 29562 29563 29564 29565 29566 29567 #> [29569] 29568 29569 29570 29571 29572 29573 29574 29575 29576 29577 29578 29579 #> [29581] 29580 29581 29582 29583 29584 29585 29586 29587 29588 29589 29590 29591 #> [29593] 29592 29593 29594 29595 29596 29597 29598 29599 29600 29601 29602 29603 #> [29605] 29604 29605 29606 29607 29608 29609 29610 29611 29612 29613 29614 29615 #> [29617] 29616 29617 29618 29619 29620 29621 29622 29623 29624 29625 29626 29627 #> [29629] 29628 29629 29630 29631 29632 29633 29634 29635 29636 29637 29638 29639 #> [29641] 29640 29641 29642 29643 29644 29645 29646 29647 29648 29649 29650 29651 #> [29653] 29652 29653 29654 29655 29656 29657 29658 29659 29660 29661 29662 29663 #> [29665] 29664 29665 29666 29667 29668 29669 29670 29671 29672 29673 29674 29675 #> [29677] 29676 29677 29678 29679 29680 29681 29682 29683 29684 29685 29686 29687 #> [29689] 29688 29689 29690 29691 29692 29693 29694 29695 29696 29697 29698 29699 #> [29701] 29700 29701 29702 29703 29704 29705 29706 29707 29708 29709 29710 29711 #> [29713] 29712 29713 29714 29715 29716 29717 29718 29719 29720 29721 29722 29723 #> [29725] 29724 29725 29726 29727 29728 29729 29730 29731 29732 29733 29734 29735 #> [29737] 29736 29737 29738 29739 29740 29741 29742 29743 29744 29745 29746 29747 #> [29749] 29748 29749 29750 29751 29752 29753 29754 29755 29756 29757 29758 29759 #> [29761] 29760 29761 29762 29763 29764 29765 29766 29767 29768 29769 29770 29771 #> [29773] 29772 29773 29774 29775 29776 29777 29778 29779 29780 29781 29782 29783 #> [29785] 29784 29785 29786 29787 29788 29789 29790 29791 29792 29793 29794 29795 #> [29797] 29796 29797 29798 29799 29800 29801 29802 29803 29804 29805 29806 29807 #> [29809] 29808 29809 29810 29811 29812 29813 29814 29815 29816 29817 29818 29819 #> [29821] 29820 29821 29822 29823 29824 29825 29826 29827 29828 29829 29830 29831 #> [29833] 29832 29833 29834 29835 29836 29837 29838 29839 29840 29841 29842 29843 #> [29845] 29844 29845 29846 29847 29848 29849 29850 29851 29852 29853 29854 29855 #> [29857] 29856 29857 29858 29859 29860 29861 29862 29863 29864 29865 29866 29867 #> [29869] 29868 29869 29870 29871 29872 29873 29874 29875 29876 29877 29878 29879 #> [29881] 29880 29881 29882 29883 29884 29885 29886 29887 29888 29889 29890 29891 #> [29893] 29892 29893 29894 29895 29896 29897 29898 29899 29900 29901 29902 29903 #> [29905] 29904 29905 29906 29907 29908 29909 29910 29911 29912 29913 29914 29915 #> [29917] 29916 29917 29918 29919 29920 29921 29922 29923 29924 29925 29926 29927 #> [29929] 29928 29929 29930 29931 29932 29933 29934 29935 29936 29937 29938 29939 #> [29941] 29940 29941 29942 29943 29944 29945 29946 29947 29948 29949 29950 29951 #> [29953] 29952 29953 29954 29955 29956 29957 29958 29959 29960 29961 29962 29963 #> [29965] 29964 29965 29966 29967 29968 29969 29970 29971 29972 29973 29974 29975 #> [29977] 29976 29977 29978 29979 29980 29981 29982 29983 29984 29985 29986 29987 #> [29989] 29988 29989 29990 29991 29992 29993 29994 29995 29996 29997 29998 29999 #> [30001] 30000 30001 30002 30003 30004 30005 30006 30007 30008 30009 30010 30011 #> [30013] 30012 30013 30014 30015 30016 30017 30018 30019 30020 30021 30022 30023 #> [30025] 30024 30025 30026 30027 30028 30029 30030 30031 30032 30033 30034 30035 #> [30037] 30036 30037 30038 30039 30040 30041 30042 30043 30044 30045 30046 30047 #> [30049] 30048 30049 30050 30051 30052 30053 30054 30055 30056 30057 30058 30059 #> [30061] 30060 30061 30062 30063 30064 30065 30066 30067 30068 30069 30070 30071 #> [30073] 30072 30073 30074 30075 30076 30077 30078 30079 30080 30081 30082 30083 #> [30085] 30084 30085 30086 30087 30088 30089 30090 30091 30092 30093 30094 30095 #> [30097] 30096 30097 30098 30099 30100 30101 30102 30103 30104 30105 30106 30107 #> [30109] 30108 30109 30110 30111 30112 30113 30114 30115 30116 30117 30118 30119 #> [30121] 30120 30121 30122 30123 30124 30125 30126 30127 30128 30129 30130 30131 #> [30133] 30132 30133 30134 30135 30136 30137 30138 30139 30140 30141 30142 30143 #> [30145] 30144 30145 30146 30147 30148 30149 30150 30151 30152 30153 30154 30155 #> [30157] 30156 30157 30158 30159 30160 30161 30162 30163 30164 30165 30166 30167 #> [30169] 30168 30169 30170 30171 30172 30173 30174 30175 30176 30177 30178 30179 #> [30181] 30180 30181 30182 30183 30184 30185 30186 30187 30188 30189 30190 30191 #> [30193] 30192 30193 30194 30195 30196 30197 30198 30199 30200 30201 30202 30203 #> [30205] 30204 30205 30206 30207 30208 30209 30210 30211 30212 30213 30214 30215 #> [30217] 30216 30217 30218 30219 30220 30221 30222 30223 30224 30225 30226 30227 #> [30229] 30228 30229 30230 30231 30232 30233 30234 30235 30236 30237 30238 30239 #> [30241] 30240 30241 30242 30243 30244 30245 30246 30247 30248 30249 30250 30251 #> [30253] 30252 30253 30254 30255 30256 30257 30258 30259 30260 30261 30262 30263 #> [30265] 30264 30265 30266 30267 30268 30269 30270 30271 30272 30273 30274 30275 #> [30277] 30276 30277 30278 30279 30280 30281 30282 30283 30284 30285 30286 30287 #> [30289] 30288 30289 30290 30291 30292 30293 30294 30295 30296 30297 30298 30299 #> [30301] 30300 30301 30302 30303 30304 30305 30306 30307 30308 30309 30310 30311 #> [30313] 30312 30313 30314 30315 30316 30317 30318 30319 30320 30321 30322 30323 #> [30325] 30324 30325 30326 30327 30328 30329 30330 30331 30332 30333 30334 30335 #> [30337] 30336 30337 30338 30339 30340 30341 30342 30343 30344 30345 30346 30347 #> [30349] 30348 30349 30350 30351 30352 30353 30354 30355 30356 30357 30358 30359 #> [30361] 30360 30361 30362 30363 30364 30365 30366 30367 30368 30369 30370 30371 #> [30373] 30372 30373 30374 30375 30376 30377 30378 30379 30380 30381 30382 30383 #> [30385] 30384 30385 30386 30387 30388 30389 30390 30391 30392 30393 30394 30395 #> [30397] 30396 30397 30398 30399 30400 30401 30402 30403 30404 30405 30406 30407 #> [30409] 30408 30409 30410 30411 30412 30413 30414 30415 30416 30417 30418 30419 #> [30421] 30420 30421 30422 30423 30424 30425 30426 30427 30428 30429 30430 30431 #> [30433] 30432 30433 30434 30435 30436 30437 30438 30439 30440 30441 30442 30443 #> [30445] 30444 30445 30446 30447 30448 30449 30450 30451 30452 30453 30454 30455 #> [30457] 30456 30457 30458 30459 30460 30461 30462 30463 30464 30465 30466 30467 #> [30469] 30468 30469 30470 30471 30472 30473 30474 30475 30476 30477 30478 30479 #> [30481] 30480 30481 30482 30483 30484 30485 30486 30487 30488 30489 30490 30491 #> [30493] 30492 30493 30494 30495 30496 30497 30498 30499 30500 30501 30502 30503 #> [30505] 30504 30505 30506 30507 30508 30509 30510 30511 30512 30513 30514 30515 #> [30517] 30516 30517 30518 30519 30520 30521 30522 30523 30524 30525 30526 30527 #> [30529] 30528 30529 30530 30531 30532 30533 30534 30535 30536 30537 30538 30539 #> [30541] 30540 30541 30542 30543 30544 30545 30546 30547 30548 30549 30550 30551 #> [30553] 30552 30553 30554 30555 30556 30557 30558 30559 30560 30561 30562 30563 #> [30565] 30564 30565 30566 30567 30568 30569 30570 30571 30572 30573 30574 30575 #> [30577] 30576 30577 30578 30579 30580 30581 30582 30583 30584 30585 30586 30587 #> [30589] 30588 30589 30590 30591 30592 30593 30594 30595 30596 30597 30598 30599 #> [30601] 30600 30601 30602 30603 30604 30605 30606 30607 30608 30609 30610 30611 #> [30613] 30612 30613 30614 30615 30616 30617 30618 30619 30620 30621 30622 30623 #> [30625] 30624 30625 30626 30627 30628 30629 30630 30631 30632 30633 30634 30635 #> [30637] 30636 30637 30638 30639 30640 30641 30642 30643 30644 30645 30646 30647 #> [30649] 30648 30649 30650 30651 30652 30653 30654 30655 30656 30657 30658 30659 #> [30661] 30660 30661 30662 30663 30664 30665 30666 30667 30668 30669 30670 30671 #> [30673] 30672 30673 30674 30675 30676 30677 30678 30679 30680 30681 30682 30683 #> [30685] 30684 30685 30686 30687 30688 30689 30690 30691 30692 30693 30694 30695 #> [30697] 30696 30697 30698 30699 30700 30701 30702 30703 30704 30705 30706 30707 #> [30709] 30708 30709 30710 30711 30712 30713 30714 30715 30716 30717 30718 30719 #> [30721] 30720 30721 30722 30723 30724 30725 30726 30727 30728 30729 30730 30731 #> [30733] 30732 30733 30734 30735 30736 30737 30738 30739 30740 30741 30742 30743 #> [30745] 30744 30745 30746 30747 30748 30749 30750 30751 30752 30753 30754 30755 #> [30757] 30756 30757 30758 30759 30760 30761 30762 30763 30764 30765 30766 30767 #> [30769] 30768 30769 30770 30771 30772 30773 30774 30775 30776 30777 30778 30779 #> [30781] 30780 30781 30782 30783 30784 30785 30786 30787 30788 30789 30790 30791 #> [30793] 30792 30793 30794 30795 30796 30797 30798 30799 30800 30801 30802 30803 #> [30805] 30804 30805 30806 30807 30808 30809 30810 30811 30812 30813 30814 30815 #> [30817] 30816 30817 30818 30819 30820 30821 30822 30823 30824 30825 30826 30827 #> [30829] 30828 30829 30830 30831 30832 30833 30834 30835 30836 30837 30838 30839 #> [30841] 30840 30841 30842 30843 30844 30845 30846 30847 30848 30849 30850 30851 #> [30853] 30852 30853 30854 30855 30856 30857 30858 30859 30860 30861 30862 30863 #> [30865] 30864 30865 30866 30867 30868 30869 30870 30871 30872 30873 30874 30875 #> [30877] 30876 30877 30878 30879 30880 30881 30882 30883 30884 30885 30886 30887 #> [30889] 30888 30889 30890 30891 30892 30893 30894 30895 30896 30897 30898 30899 #> [30901] 30900 30901 30902 30903 30904 30905 30906 30907 30908 30909 30910 30911 #> [30913] 30912 30913 30914 30915 30916 30917 30918 30919 30920 30921 30922 30923 #> [30925] 30924 30925 30926 30927 30928 30929 30930 30931 30932 30933 30934 30935 #> [30937] 30936 30937 30938 30939 30940 30941 30942 30943 30944 30945 30946 30947 #> [30949] 30948 30949 30950 30951 30952 30953 30954 30955 30956 30957 30958 30959 #> [30961] 30960 30961 30962 30963 30964 30965 30966 30967 30968 30969 30970 30971 #> [30973] 30972 30973 30974 30975 30976 30977 30978 30979 30980 30981 30982 30983 #> [30985] 30984 30985 30986 30987 30988 30989 30990 30991 30992 30993 30994 30995 #> [30997] 30996 30997 30998 30999 31000 31001 31002 31003 31004 31005 31006 31007 #> [31009] 31008 31009 31010 31011 31012 31013 31014 31015 31016 31017 31018 31019 #> [31021] 31020 31021 31022 31023 31024 31025 31026 31027 31028 31029 31030 31031 #> [31033] 31032 31033 31034 31035 31036 31037 31038 31039 31040 31041 31042 31043 #> [31045] 31044 31045 31046 31047 31048 31049 31050 31051 31052 31053 31054 31055 #> [31057] 31056 31057 31058 31059 31060 31061 31062 31063 31064 31065 31066 31067 #> [31069] 31068 31069 31070 31071 31072 31073 31074 31075 31076 31077 31078 31079 #> [31081] 31080 31081 31082 31083 31084 31085 31086 31087 31088 31089 31090 31091 #> [31093] 31092 31093 31094 31095 31096 31097 31098 31099 31100 31101 31102 31103 #> [31105] 31104 31105 31106 31107 31108 31109 31110 31111 31112 31113 31114 31115 #> [31117] 31116 31117 31118 31119 31120 31121 31122 31123 31124 31125 31126 31127 #> [31129] 31128 31129 31130 31131 31132 31133 31134 31135 31136 31137 31138 31139 #> [31141] 31140 31141 31142 31143 31144 31145 31146 31147 31148 31149 31150 31151 #> [31153] 31152 31153 31154 31155 31156 31157 31158 31159 31160 31161 31162 31163 #> [31165] 31164 31165 31166 31167 31168 31169 31170 31171 31172 31173 31174 31175 #> [31177] 31176 31177 31178 31179 31180 31181 31182 31183 31184 31185 31186 31187 #> [31189] 31188 31189 31190 31191 31192 31193 31194 31195 31196 31197 31198 31199 #> [31201] 31200 31201 31202 31203 31204 31205 31206 31207 31208 31209 31210 31211 #> [31213] 31212 31213 31214 31215 31216 31217 31218 31219 31220 31221 31222 31223 #> [31225] 31224 31225 31226 31227 31228 31229 31230 31231 31232 31233 31234 31235 #> [31237] 31236 31237 31238 31239 31240 31241 31242 31243 31244 31245 31246 31247 #> [31249] 31248 31249 31250 31251 31252 31253 31254 31255 31256 31257 31258 31259 #> [31261] 31260 31261 31262 31263 31264 31265 31266 31267 31268 31269 31270 31271 #> [31273] 31272 31273 31274 31275 31276 31277 31278 31279 31280 31281 31282 31283 #> [31285] 31284 31285 31286 31287 31288 31289 31290 31291 31292 31293 31294 31295 #> [31297] 31296 31297 31298 31299 31300 31301 31302 31303 31304 31305 31306 31307 #> [31309] 31308 31309 31310 31311 31312 31313 31314 31315 31316 31317 31318 31319 #> [31321] 31320 31321 31322 31323 31324 31325 31326 31327 31328 31329 31330 31331 #> [31333] 31332 31333 31334 31335 31336 31337 31338 31339 31340 31341 31342 31343 #> [31345] 31344 31345 31346 31347 31348 31349 31350 31351 31352 31353 31354 31355 #> [31357] 31356 31357 31358 31359 31360 31361 31362 31363 31364 31365 31366 31367 #> [31369] 31368 31369 31370 31371 31372 31373 31374 31375 31376 31377 31378 31379 #> [31381] 31380 31381 31382 31383 31384 31385 31386 31387 31388 31389 31390 31391 #> [31393] 31392 31393 31394 31395 31396 31397 31398 31399 31400 31401 31402 31403 #> [31405] 31404 31405 31406 31407 31408 31409 31410 31411 31412 31413 31414 31415 #> [31417] 31416 31417 31418 31419 31420 31421 31422 31423 31424 31425 31426 31427 #> [31429] 31428 31429 31430 31431 31432 31433 31434 31435 31436 31437 31438 31439 #> [31441] 31440 31441 31442 31443 31444 31445 31446 31447 31448 31449 31450 31451 #> [31453] 31452 31453 31454 31455 31456 31457 31458 31459 31460 31461 31462 31463 #> [31465] 31464 31465 31466 31467 31468 31469 31470 31471 31472 31473 31474 31475 #> [31477] 31476 31477 31478 31479 31480 31481 31482 31483 31484 31485 31486 31487 #> [31489] 31488 31489 31490 31491 31492 31493 31494 31495 31496 31497 31498 31499 #> [31501] 31500 31501 31502 31503 31504 31505 31506 31507 31508 31509 31510 31511 #> [31513] 31512 31513 31514 31515 31516 31517 31518 31519 31520 31521 31522 31523 #> [31525] 31524 31525 31526 31527 31528 31529 31530 31531 31532 31533 31534 31535 #> [31537] 31536 31537 31538 31539 31540 31541 31542 31543 31544 31545 31546 31547 #> [31549] 31548 31549 31550 31551 31552 31553 31554 31555 31556 31557 31558 31559 #> [31561] 31560 31561 31562 31563 31564 31565 31566 31567 31568 31569 31570 31571 #> [31573] 31572 31573 31574 31575 31576 31577 31578 31579 31580 31581 31582 31583 #> [31585] 31584 31585 31586 31587 31588 31589 31590 31591 31592 31593 31594 31595 #> [31597] 31596 31597 31598 31599 31600 31601 31602 31603 31604 31605 31606 31607 #> [31609] 31608 31609 31610 31611 31612 31613 31614 31615 31616 31617 31618 31619 #> [31621] 31620 31621 31622 31623 31624 31625 31626 31627 31628 31629 31630 31631 #> [31633] 31632 31633 31634 31635 31636 31637 31638 31639 31640 31641 31642 31643 #> [31645] 31644 31645 31646 31647 31648 31649 31650 31651 31652 31653 31654 31655 #> [31657] 31656 31657 31658 31659 31660 31661 31662 31663 31664 31665 31666 31667 #> [31669] 31668 31669 31670 31671 31672 31673 31674 31675 31676 31677 31678 31679 #> [31681] 31680 31681 31682 31683 31684 31685 31686 31687 31688 31689 31690 31691 #> [31693] 31692 31693 31694 31695 31696 31697 31698 31699 31700 31701 31702 31703 #> [31705] 31704 31705 31706 31707 31708 31709 31710 31711 31712 31713 31714 31715 #> [31717] 31716 31717 31718 31719 31720 31721 31722 31723 31724 31725 31726 31727 #> [31729] 31728 31729 31730 31731 31732 31733 31734 31735 31736 31737 31738 31739 #> [31741] 31740 31741 31742 31743 31744 31745 31746 31747 31748 31749 31750 31751 #> [31753] 31752 31753 31754 31755 31756 31757 31758 31759 31760 31761 31762 31763 #> [31765] 31764 31765 31766 31767 31768 31769 31770 31771 31772 31773 31774 31775 #> [31777] 31776 31777 31778 31779 31780 31781 31782 31783 31784 31785 31786 31787 #> [31789] 31788 31789 31790 31791 31792 31793 31794 31795 31796 31797 31798 31799 #> [31801] 31800 31801 31802 31803 31804 31805 31806 31807 31808 31809 31810 31811 #> [31813] 31812 31813 31814 31815 31816 31817 31818 31819 31820 31821 31822 31823 #> [31825] 31824 31825 31826 31827 31828 31829 31830 31831 31832 31833 31834 31835 #> [31837] 31836 31837 31838 31839 31840 31841 31842 31843 31844 31845 31846 31847 #> [31849] 31848 31849 31850 31851 31852 31853 31854 31855 31856 31857 31858 31859 #> [31861] 31860 31861 31862 31863 31864 31865 31866 31867 31868 31869 31870 31871 #> [31873] 31872 31873 31874 31875 31876 31877 31878 31879 31880 31881 31882 31883 #> [31885] 31884 31885 31886 31887 31888 31889 31890 31891 31892 31893 31894 31895 #> [31897] 31896 31897 31898 31899 31900 31901 31902 31903 31904 31905 31906 31907 #> [31909] 31908 31909 31910 31911 31912 31913 31914 31915 31916 31917 31918 31919 #> [31921] 31920 31921 31922 31923 31924 31925 31926 31927 31928 31929 31930 31931 #> [31933] 31932 31933 31934 31935 31936 31937 31938 31939 31940 31941 31942 31943 #> [31945] 31944 31945 31946 31947 31948 31949 31950 31951 31952 31953 31954 31955 #> [31957] 31956 31957 31958 31959 31960 31961 31962 31963 31964 31965 31966 31967 #> [31969] 31968 31969 31970 31971 31972 31973 31974 31975 31976 31977 31978 31979 #> [31981] 31980 31981 31982 31983 31984 31985 31986 31987 31988 31989 31990 31991 #> [31993] 31992 31993 31994 31995 31996 31997 31998 31999 32000 32001 32002 32003 #> [32005] 32004 32005 32006 32007 32008 32009 32010 32011 32012 32013 32014 32015 #> [32017] 32016 32017 32018 32019 32020 32021 32022 32023 32024 32025 32026 32027 #> [32029] 32028 32029 32030 32031 32032 32033 32034 32035 32036 32037 32038 32039 #> [32041] 32040 32041 32042 32043 32044 32045 32046 32047 32048 32049 32050 32051 #> [32053] 32052 32053 32054 32055 32056 32057 32058 32059 32060 32061 32062 32063 #> [32065] 32064 32065 32066 32067 32068 32069 32070 32071 32072 32073 32074 32075 #> [32077] 32076 32077 32078 32079 32080 32081 32082 32083 32084 32085 32086 32087 #> [32089] 32088 32089 32090 32091 32092 32093 32094 32095 32096 32097 32098 32099 #> [32101] 32100 32101 32102 32103 32104 32105 32106 32107 32108 32109 32110 32111 #> [32113] 32112 32113 32114 32115 32116 32117 32118 32119 32120 32121 32122 32123 #> [32125] 32124 32125 32126 32127 32128 32129 32130 32131 32132 32133 32134 32135 #> [32137] 32136 32137 32138 32139 32140 32141 32142 32143 32144 32145 32146 32147 #> [32149] 32148 32149 32150 32151 32152 32153 32154 32155 32156 32157 32158 32159 #> [32161] 32160 32161 32162 32163 32164 32165 32166 32167 32168 32169 32170 32171 #> [32173] 32172 32173 32174 32175 32176 32177 32178 32179 32180 32181 32182 32183 #> [32185] 32184 32185 32186 32187 32188 32189 32190 32191 32192 32193 32194 32195 #> [32197] 32196 32197 32198 32199 32200 32201 32202 32203 32204 32205 32206 32207 #> [32209] 32208 32209 32210 32211 32212 32213 32214 32215 32216 32217 32218 32219 #> [32221] 32220 32221 32222 32223 32224 32225 32226 32227 32228 32229 32230 32231 #> [32233] 32232 32233 32234 32235 32236 32237 32238 32239 32240 32241 32242 32243 #> [32245] 32244 32245 32246 32247 32248 32249 32250 32251 32252 32253 32254 32255 #> [32257] 32256 32257 32258 32259 32260 32261 32262 32263 32264 32265 32266 32267 #> [32269] 32268 32269 32270 32271 32272 32273 32274 32275 32276 32277 32278 32279 #> [32281] 32280 32281 32282 32283 32284 32285 32286 32287 32288 32289 32290 32291 #> [32293] 32292 32293 32294 32295 32296 32297 32298 32299 32300 32301 32302 32303 #> [32305] 32304 32305 32306 32307 32308 32309 32310 32311 32312 32313 32314 32315 #> [32317] 32316 32317 32318 32319 32320 32321 32322 32323 32324 32325 32326 32327 #> [32329] 32328 32329 32330 32331 32332 32333 32334 32335 32336 32337 32338 32339 #> [32341] 32340 32341 32342 32343 32344 32345 32346 32347 32348 32349 32350 32351 #> [32353] 32352 32353 32354 32355 32356 32357 32358 32359 32360 32361 32362 32363 #> [32365] 32364 32365 32366 32367 32368 32369 32370 32371 32372 32373 32374 32375 #> [32377] 32376 32377 32378 32379 32380 32381 32382 32383 32384 32385 32386 32387 #> [32389] 32388 32389 32390 32391 32392 32393 32394 32395 32396 32397 32398 32399 #> [32401] 32400 32401 32402 32403 32404 32405 32406 32407 32408 32409 32410 32411 #> [32413] 32412 32413 32414 32415 32416 32417 32418 32419 32420 32421 32422 32423 #> [32425] 32424 32425 32426 32427 32428 32429 32430 32431 32432 32433 32434 32435 #> [32437] 32436 32437 32438 32439 32440 32441 32442 32443 32444 32445 32446 32447 #> [32449] 32448 32449 32450 32451 32452 32453 32454 32455 32456 32457 32458 32459 #> [32461] 32460 32461 32462 32463 32464 32465 32466 32467 32468 32469 32470 32471 #> [32473] 32472 32473 32474 32475 32476 32477 32478 32479 32480 32481 32482 32483 #> [32485] 32484 32485 32486 32487 32488 32489 32490 32491 32492 32493 32494 32495 #> [32497] 32496 32497 32498 32499 32500 32501 32502 32503 32504 32505 32506 32507 #> [32509] 32508 32509 32510 32511 32512 32513 32514 32515 32516 32517 32518 32519 #> [32521] 32520 32521 32522 32523 32524 32525 32526 32527 32528 32529 32530 32531 #> [32533] 32532 32533 32534 32535 32536 32537 32538 32539 32540 32541 32542 32543 #> [32545] 32544 32545 32546 32547 32548 32549 32550 32551 32552 32553 32554 32555 #> [32557] 32556 32557 32558 32559 32560 32561 32562 32563 32564 32565 32566 32567 #> [32569] 32568 32569 32570 32571 32572 32573 32574 32575 32576 32577 32578 32579 #> [32581] 32580 32581 32582 32583 32584 32585 32586 32587 32588 32589 32590 32591 #> [32593] 32592 32593 32594 32595 32596 32597 32598 32599 32600 32601 32602 32603 #> [32605] 32604 32605 32606 32607 32608 32609 32610 32611 32612 32613 32614 32615 #> [32617] 32616 32617 32618 32619 32620 32621 32622 32623 32624 32625 32626 32627 #> [32629] 32628 32629 32630 32631 32632 32633 32634 32635 32636 32637 32638 32639 #> [32641] 32640 32641 32642 32643 32644 32645 32646 32647 32648 32649 32650 32651 #> [32653] 32652 32653 32654 32655 32656 32657 32658 32659 32660 32661 32662 32663 #> [32665] 32664 32665 32666 32667 32668 32669 32670 32671 32672 32673 32674 32675 #> [32677] 32676 32677 32678 32679 32680 32681 32682 32683 32684 32685 32686 32687 #> [32689] 32688 32689 32690 32691 32692 32693 32694 32695 32696 32697 32698 32699 #> [32701] 32700 32701 32702 32703 32704 32705 32706 32707 32708 32709 32710 32711 #> [32713] 32712 32713 32714 32715 32716 32717 32718 32719 32720 32721 32722 32723 #> [32725] 32724 32725 32726 32727 32728 32729 32730 32731 32732 32733 32734 32735 #> [32737] 32736 32737 32738 32739 32740 32741 32742 32743 32744 32745 32746 32747 #> [32749] 32748 32749 32750 32751 32752 32753 32754 32755 32756 32757 32758 32759 #> [32761] 32760 32761 32762 32763 32764 32765 32766 32767 32768 32769 32770 32771 #> [32773] 32772 32773 32774 32775 32776 32777 32778 32779 32780 32781 32782 32783 #> [32785] 32784 32785 32786 32787 32788 32789 32790 32791 32792 32793 32794 32795 #> [32797] 32796 32797 32798 32799 32800 32801 32802 32803 32804 32805 32806 32807 #> [32809] 32808 32809 32810 32811 32812 32813 32814 32815 32816 32817 32818 32819 #> [32821] 32820 32821 32822 32823 32824 32825 32826 32827 32828 32829 32830 32831 #> [32833] 32832 32833 32834 32835 32836 32837 32838 32839 32840 32841 32842 32843 #> [32845] 32844 32845 32846 32847 32848 32849 32850 32851 32852 32853 32854 32855 #> [32857] 32856 32857 32858 32859 32860 32861 32862 32863 32864 32865 32866 32867 #> [32869] 32868 32869 32870 32871 32872 32873 32874 32875 32876 32877 32878 32879 #> [32881] 32880 32881 32882 32883 32884 32885 32886 32887 32888 32889 32890 32891 #> [32893] 32892 32893 32894 32895 32896 32897 32898 32899 32900 32901 32902 32903 #> [32905] 32904 32905 32906 32907 32908 32909 32910 32911 32912 32913 32914 32915 #> [32917] 32916 32917 32918 32919 32920 32921 32922 32923 32924 32925 32926 32927 #> [32929] 32928 32929 32930 32931 32932 32933 32934 32935 32936 32937 32938 32939 #> [32941] 32940 32941 32942 32943 32944 32945 32946 32947 32948 32949 32950 32951 #> [32953] 32952 32953 32954 32955 32956 32957 32958 32959 32960 32961 32962 32963 #> [32965] 32964 32965 32966 32967 32968 32969 32970 32971 32972 32973 32974 32975 #> [32977] 32976 32977 32978 32979 32980 32981 32982 32983 32984 32985 32986 32987 #> [32989] 32988 32989 32990 32991 32992 32993 32994 32995 32996 32997 32998 32999 #> [33001] 33000 33001 33002 33003 33004 33005 33006 33007 33008 33009 33010 33011 #> [33013] 33012 33013 33014 33015 33016 33017 33018 33019 33020 33021 33022 33023 #> [33025] 33024 33025 33026 33027 33028 33029 33030 33031 33032 33033 33034 33035 #> [33037] 33036 33037 33038 33039 33040 33041 33042 33043 33044 33045 33046 33047 #> [33049] 33048 33049 33050 33051 33052 33053 33054 33055 33056 33057 33058 33059 #> [33061] 33060 33061 33062 33063 33064 33065 33066 33067 33068 33069 33070 33071 #> [33073] 33072 33073 33074 33075 33076 33077 33078 33079 33080 33081 33082 33083 #> [33085] 33084 33085 33086 33087 33088 33089 33090 33091 33092 33093 33094 33095 #> [33097] 33096 33097 33098 33099 33100 33101 33102 33103 33104 33105 33106 33107 #> [33109] 33108 33109 33110 33111 33112 33113 33114 33115 33116 33117 33118 33119 #> [33121] 33120 33121 33122 33123 33124 33125 33126 33127 33128 33129 33130 33131 #> [33133] 33132 33133 33134 33135 33136 33137 33138 33139 33140 33141 33142 33143 #> [33145] 33144 33145 33146 33147 33148 33149 33150 33151 33152 33153 33154 33155 #> [33157] 33156 33157 33158 33159 33160 33161 33162 33163 33164 33165 33166 33167 #> [33169] 33168 33169 33170 33171 33172 33173 33174 33175 33176 33177 33178 33179 #> [33181] 33180 33181 33182 33183 33184 33185 33186 33187 33188 33189 33190 33191 #> [33193] 33192 33193 33194 33195 33196 33197 33198 33199 33200 33201 33202 33203 #> [33205] 33204 33205 33206 33207 33208 33209 33210 33211 33212 33213 33214 33215 #> [33217] 33216 33217 33218 33219 33220 33221 33222 33223 33224 33225 33226 33227 #> [33229] 33228 33229 33230 33231 33232 33233 33234 33235 33236 33237 33238 33239 #> [33241] 33240 33241 33242 33243 33244 33245 33246 33247 33248 33249 33250 33251 #> [33253] 33252 33253 33254 33255 33256 33257 33258 33259 33260 33261 33262 33263 #> [33265] 33264 33265 33266 33267 33268 33269 33270 33271 33272 33273 33274 33275 #> [33277] 33276 33277 33278 33279 33280 33281 33282 33283 33284 33285 33286 33287 #> [33289] 33288 33289 33290 33291 33292 33293 33294 33295 33296 33297 33298 33299 #> [33301] 33300 33301 33302 33303 33304 33305 33306 33307 33308 33309 33310 33311 #> [33313] 33312 33313 33314 33315 33316 33317 33318 33319 33320 33321 33322 33323 #> [33325] 33324 33325 33326 33327 33328 33329 33330 33331 33332 33333 33334 33335 #> [33337] 33336 33337 33338 33339 33340 33341 33342 33343 33344 33345 33346 33347 #> [33349] 33348 33349 33350 33351 33352 33353 33354 33355 33356 33357 33358 33359 #> [33361] 33360 33361 33362 33363 33364 33365 33366 33367 33368 33369 33370 33371 #> [33373] 33372 33373 33374 33375 33376 33377 33378 33379 33380 33381 33382 33383 #> [33385] 33384 33385 33386 33387 33388 33389 33390 33391 33392 33393 33394 33395 #> [33397] 33396 33397 33398 33399 33400 33401 33402 33403 33404 33405 33406 33407 #> [33409] 33408 33409 33410 33411 33412 33413 33414 33415 33416 33417 33418 33419 #> [33421] 33420 33421 33422 33423 33424 33425 33426 33427 33428 33429 33430 33431 #> [33433] 33432 33433 33434 33435 33436 33437 33438 33439 33440 33441 33442 33443 #> [33445] 33444 33445 33446 33447 33448 33449 33450 33451 33452 33453 33454 33455 #> [33457] 33456 33457 33458 33459 33460 33461 33462 33463 33464 33465 33466 33467 #> [33469] 33468 33469 33470 33471 33472 33473 33474 33475 33476 33477 33478 33479 #> [33481] 33480 33481 33482 33483 33484 33485 33486 33487 33488 33489 33490 33491 #> [33493] 33492 33493 33494 33495 33496 33497 33498 33499 33500 33501 33502 33503 #> [33505] 33504 33505 33506 33507 33508 33509 33510 33511 33512 33513 33514 33515 #> [33517] 33516 33517 33518 33519 33520 33521 33522 33523 33524 33525 33526 33527 #> [33529] 33528 33529 33530 33531 33532 33533 33534 33535 33536 33537 33538 33539 #> [33541] 33540 33541 33542 33543 33544 33545 33546 33547 33548 33549 33550 33551 #> [33553] 33552 33553 33554 33555 33556 33557 33558 33559 33560 33561 33562 33563 #> [33565] 33564 33565 33566 33567 33568 33569 33570 33571 33572 33573 33574 33575 #> [33577] 33576 33577 33578 33579 33580 33581 33582 33583 33584 33585 33586 33587 #> [33589] 33588 33589 33590 33591 33592 33593 33594 33595 33596 33597 33598 33599 #> [33601] 33600 33601 33602 33603 33604 33605 33606 33607 33608 33609 33610 33611 #> [33613] 33612 33613 33614 33615 33616 33617 33618 33619 33620 33621 33622 33623 #> [33625] 33624 33625 33626 33627 33628 33629 33630 33631 33632 33633 33634 33635 #> [33637] 33636 33637 33638 33639 33640 33641 33642 33643 33644 33645 33646 33647 #> [33649] 33648 33649 33650 33651 33652 33653 33654 33655 33656 33657 33658 33659 #> [33661] 33660 33661 33662 33663 33664 33665 33666 33667 33668 33669 33670 33671 #> [33673] 33672 33673 33674 33675 33676 33677 33678 33679 33680 33681 33682 33683 #> [33685] 33684 33685 33686 33687 33688 33689 33690 33691 33692 33693 33694 33695 #> [33697] 33696 33697 33698 33699 33700 33701 33702 33703 33704 33705 33706 33707 #> [33709] 33708 33709 33710 33711 33712 33713 33714 33715 33716 33717 33718 33719 #> [33721] 33720 33721 33722 33723 33724 33725 33726 33727 33728 33729 33730 33731 #> [33733] 33732 33733 33734 33735 33736 33737 33738 33739 33740 33741 33742 33743 #> [33745] 33744 33745 33746 33747 33748 33749 33750 33751 33752 33753 33754 33755 #> [33757] 33756 33757 33758 33759 33760 33761 33762 33763 33764 33765 33766 33767 #> [33769] 33768 33769 33770 33771 33772 33773 33774 33775 33776 33777 33778 33779 #> [33781] 33780 33781 33782 33783 33784 33785 33786 33787 33788 33789 33790 33791 #> [33793] 33792 33793 33794 33795 33796 33797 33798 33799 33800 33801 33802 33803 #> [33805] 33804 33805 33806 33807 33808 33809 33810 33811 33812 33813 33814 33815 #> [33817] 33816 33817 33818 33819 33820 33821 33822 33823 33824 33825 33826 33827 #> [33829] 33828 33829 33830 33831 33832 33833 33834 33835 33836 33837 33838 33839 #> [33841] 33840 33841 33842 33843 33844 33845 33846 33847 33848 33849 33850 33851 #> [33853] 33852 33853 33854 33855 33856 33857 33858 33859 33860 33861 33862 33863 #> [33865] 33864 33865 33866 33867 33868 33869 33870 33871 33872 33873 33874 33875 #> [33877] 33876 33877 33878 33879 33880 33881 33882 33883 33884 33885 33886 33887 #> [33889] 33888 33889 33890 33891 33892 33893 33894 33895 33896 33897 33898 33899 #> [33901] 33900 33901 33902 33903 33904 33905 33906 33907 33908 33909 33910 33911 #> [33913] 33912 33913 33914 33915 33916 33917 33918 33919 33920 33921 33922 33923 #> [33925] 33924 33925 33926 33927 33928 33929 33930 33931 33932 33933 33934 33935 #> [33937] 33936 33937 33938 33939 33940 33941 33942 33943 33944 33945 33946 33947 #> [33949] 33948 33949 33950 33951 33952 33953 33954 33955 33956 33957 33958 33959 #> [33961] 33960 33961 33962 33963 33964 33965 33966 33967 33968 33969 33970 33971 #> [33973] 33972 33973 33974 33975 33976 33977 33978 33979 33980 33981 33982 33983 #> [33985] 33984 33985 33986 33987 33988 33989 33990 33991 33992 33993 33994 33995 #> [33997] 33996 33997 33998 33999 34000 34001 34002 34003 34004 34005 34006 34007 #> [34009] 34008 34009 34010 34011 34012 34013 34014 34015 34016 34017 34018 34019 #> [34021] 34020 34021 34022 34023 34024 34025 34026 34027 34028 34029 34030 34031 #> [34033] 34032 34033 34034 34035 34036 34037 34038 34039 34040 34041 34042 34043 #> [34045] 34044 34045 34046 34047 34048 34049 34050 34051 34052 34053 34054 34055 #> [34057] 34056 34057 34058 34059 34060 34061 34062 34063 34064 34065 34066 34067 #> [34069] 34068 34069 34070 34071 34072 34073 34074 34075 34076 34077 34078 34079 #> [34081] 34080 34081 34082 34083 34084 34085 34086 34087 34088 34089 34090 34091 #> [34093] 34092 34093 34094 34095 34096 34097 34098 34099 34100 34101 34102 34103 #> [34105] 34104 34105 34106 34107 34108 34109 34110 34111 34112 34113 34114 34115 #> [34117] 34116 34117 34118 34119 34120 34121 34122 34123 34124 34125 34126 34127 #> [34129] 34128 34129 34130 34131 34132 34133 34134 34135 34136 34137 34138 34139 #> [34141] 34140 34141 34142 34143 34144 34145 34146 34147 34148 34149 34150 34151 #> [34153] 34152 34153 34154 34155 34156 34157 34158 34159 34160 34161 34162 34163 #> [34165] 34164 34165 34166 34167 34168 34169 34170 34171 34172 34173 34174 34175 #> [34177] 34176 34177 34178 34179 34180 34181 34182 34183 34184 34185 34186 34187 #> [34189] 34188 34189 34190 34191 34192 34193 34194 34195 34196 34197 34198 34199 #> [34201] 34200 34201 34202 34203 34204 34205 34206 34207 34208 34209 34210 34211 #> [34213] 34212 34213 34214 34215 34216 34217 34218 34219 34220 34221 34222 34223 #> [34225] 34224 34225 34226 34227 34228 34229 34230 34231 34232 34233 34234 34235 #> [34237] 34236 34237 34238 34239 34240 34241 34242 34243 34244 34245 34246 34247 #> [34249] 34248 34249 34250 34251 34252 34253 34254 34255 34256 34257 34258 34259 #> [34261] 34260 34261 34262 34263 34264 34265 34266 34267 34268 34269 34270 34271 #> [34273] 34272 34273 34274 34275 34276 34277 34278 34279 34280 34281 34282 34283 #> [34285] 34284 34285 34286 34287 34288 34289 34290 34291 34292 34293 34294 34295 #> [34297] 34296 34297 34298 34299 34300 34301 34302 34303 34304 34305 34306 34307 #> [34309] 34308 34309 34310 34311 34312 34313 34314 34315 34316 34317 34318 34319 #> [34321] 34320 34321 34322 34323 34324 34325 34326 34327 34328 34329 34330 34331 #> [34333] 34332 34333 34334 34335 34336 34337 34338 34339 34340 34341 34342 34343 #> [34345] 34344 34345 34346 34347 34348 34349 34350 34351 34352 34353 34354 34355 #> [34357] 34356 34357 34358 34359 34360 34361 34362 34363 34364 34365 34366 34367 #> [34369] 34368 34369 34370 34371 34372 34373 34374 34375 34376 34377 34378 34379 #> [34381] 34380 34381 34382 34383 34384 34385 34386 34387 34388 34389 34390 34391 #> [34393] 34392 34393 34394 34395 34396 34397 34398 34399 34400 34401 34402 34403 #> [34405] 34404 34405 34406 34407 34408 34409 34410 34411 34412 34413 34414 34415 #> [34417] 34416 34417 34418 34419 34420 34421 34422 34423 34424 34425 34426 34427 #> [34429] 34428 34429 34430 34431 34432 34433 34434 34435 34436 34437 34438 34439 #> [34441] 34440 34441 34442 34443 34444 34445 34446 34447 34448 34449 34450 34451 #> [34453] 34452 34453 34454 34455 34456 34457 34458 34459 34460 34461 34462 34463 #> [34465] 34464 34465 34466 34467 34468 34469 34470 34471 34472 34473 34474 34475 #> [34477] 34476 34477 34478 34479 34480 34481 34482 34483 34484 34485 34486 34487 #> [34489] 34488 34489 34490 34491 34492 34493 34494 34495 34496 34497 34498 34499 #> [34501] 34500 34501 34502 34503 34504 34505 34506 34507 34508 34509 34510 34511 #> [34513] 34512 34513 34514 34515 34516 34517 34518 34519 34520 34521 34522 34523 #> [34525] 34524 34525 34526 34527 34528 34529 34530 34531 34532 34533 34534 34535 #> [34537] 34536 34537 34538 34539 34540 34541 34542 34543 34544 34545 34546 34547 #> [34549] 34548 34549 34550 34551 34552 34553 34554 34555 34556 34557 34558 34559 #> [34561] 34560 34561 34562 34563 34564 34565 34566 34567 34568 34569 34570 34571 #> [34573] 34572 34573 34574 34575 34576 34577 34578 34579 34580 34581 34582 34583 #> [34585] 34584 34585 34586 34587 34588 34589 34590 34591 34592 34593 34594 34595 #> [34597] 34596 34597 34598 34599 34600 34601 34602 34603 34604 34605 34606 34607 #> [34609] 34608 34609 34610 34611 34612 34613 34614 34615 34616 34617 34618 34619 #> [34621] 34620 34621 34622 34623 34624 34625 34626 34627 34628 34629 34630 34631 #> [34633] 34632 34633 34634 34635 34636 34637 34638 34639 34640 34641 34642 34643 #> [34645] 34644 34645 34646 34647 34648 34649 34650 34651 34652 34653 34654 34655 #> [34657] 34656 34657 34658 34659 34660 34661 34662 34663 34664 34665 34666 34667 #> [34669] 34668 34669 34670 34671 34672 34673 34674 34675 34676 34677 34678 34679 #> [34681] 34680 34681 34682 34683 34684 34685 34686 34687 34688 34689 34690 34691 #> [34693] 34692 34693 34694 34695 34696 34697 34698 34699 34700 34701 34702 34703 #> [34705] 34704 34705 34706 34707 34708 34709 34710 34711 34712 34713 34714 34715 #> [34717] 34716 34717 34718 34719 34720 34721 34722 34723 34724 34725 34726 34727 #> [34729] 34728 34729 34730 34731 34732 34733 34734 34735 34736 34737 34738 34739 #> [34741] 34740 34741 34742 34743 34744 34745 34746 34747 34748 34749 34750 34751 #> [34753] 34752 34753 34754 34755 34756 34757 34758 34759 34760 34761 34762 34763 #> [34765] 34764 34765 34766 34767 34768 34769 34770 34771 34772 34773 34774 34775 #> [34777] 34776 34777 34778 34779 34780 34781 34782 34783 34784 34785 34786 34787 #> [34789] 34788 34789 34790 34791 34792 34793 34794 34795 34796 34797 34798 34799 #> [34801] 34800 34801 34802 34803 34804 34805 34806 34807 34808 34809 34810 34811 #> [34813] 34812 34813 34814 34815 34816 34817 34818 34819 34820 34821 34822 34823 #> [34825] 34824 34825 34826 34827 34828 34829 34830 34831 34832 34833 34834 34835 #> [34837] 34836 34837 34838 34839 34840 34841 34842 34843 34844 34845 34846 34847 #> [34849] 34848 34849 34850 34851 34852 34853 34854 34855 34856 34857 34858 34859 #> [34861] 34860 34861 34862 34863 34864 34865 34866 34867 34868 34869 34870 34871 #> [34873] 34872 34873 34874 34875 34876 34877 34878 34879 34880 34881 34882 34883 #> [34885] 34884 34885 34886 34887 34888 34889 34890 34891 34892 34893 34894 34895 #> [34897] 34896 34897 34898 34899 34900 34901 34902 34903 34904 34905 34906 34907 #> [34909] 34908 34909 34910 34911 34912 34913 34914 34915 34916 34917 34918 34919 #> [34921] 34920 34921 34922 34923 34924 34925 34926 34927 34928 34929 34930 34931 #> [34933] 34932 34933 34934 34935 34936 34937 34938 34939 34940 34941 34942 34943 #> [34945] 34944 34945 34946 34947 34948 34949 34950 34951 34952 34953 34954 34955 #> [34957] 34956 34957 34958 34959 34960 34961 34962 34963 34964 34965 34966 34967 #> [34969] 34968 34969 34970 34971 34972 34973 34974 34975 34976 34977 34978 34979 #> [34981] 34980 34981 34982 34983 34984 34985 34986 34987 34988 34989 34990 34991 #> [34993] 34992 34993 34994 34995 34996 34997 34998 34999 35000 35001 35002 35003 #> [35005] 35004 35005 35006 35007 35008 35009 35010 35011 35012 35013 35014 35015 #> [35017] 35016 35017 35018 35019 35020 35021 35022 35023 35024 35025 35026 35027 #> [35029] 35028 35029 35030 35031 35032 35033 35034 35035 35036 35037 35038 35039 #> [35041] 35040 35041 35042 35043 35044 35045 35046 35047 35048 35049 35050 35051 #> [35053] 35052 35053 35054 35055 35056 35057 35058 35059 35060 35061 35062 35063 #> [35065] 35064 35065 35066 35067 35068 35069 35070 35071 35072 35073 35074 35075 #> [35077] 35076 35077 35078 35079 35080 35081 35082 35083 35084 35085 35086 35087 #> [35089] 35088 35089 35090 35091 35092 35093 35094 35095 35096 35097 35098 35099 #> [35101] 35100 35101 35102 35103 35104 35105 35106 35107 35108 35109 35110 35111 #> [35113] 35112 35113 35114 35115 35116 35117 35118 35119 35120 35121 35122 35123 #> [35125] 35124 35125 35126 35127 35128 35129 35130 35131 35132 35133 35134 35135 #> [35137] 35136 35137 35138 35139 35140 35141 35142 35143 35144 35145 35146 35147 #> [35149] 35148 35149 35150 35151 35152 35153 35154 35155 35156 35157 35158 35159 #> [35161] 35160 35161 35162 35163 35164 35165 35166 35167 35168 35169 35170 35171 #> [35173] 35172 35173 35174 35175 35176 35177 35178 35179 35180 35181 35182 35183 #> [35185] 35184 35185 35186 35187 35188 35189 35190 35191 35192 35193 35194 35195 #> [35197] 35196 35197 35198 35199 35200 35201 35202 35203 35204 35205 35206 35207 #> [35209] 35208 35209 35210 35211 35212 35213 35214 35215 35216 35217 35218 35219 #> [35221] 35220 35221 35222 35223 35224 35225 35226 35227 35228 35229 35230 35231 #> [35233] 35232 35233 35234 35235 35236 35237 35238 35239 35240 35241 35242 35243 #> [35245] 35244 35245 35246 35247 35248 35249 35250 35251 35252 35253 35254 35255 #> [35257] 35256 35257 35258 35259 35260 35261 35262 35263 35264 35265 35266 35267 #> [35269] 35268 35269 35270 35271 35272 35273 35274 35275 35276 35277 35278 35279 #> [35281] 35280 35281 35282 35283 35284 35285 35286 35287 35288 35289 35290 35291 #> [35293] 35292 35293 35294 35295 35296 35297 35298 35299 35300 35301 35302 35303 #> [35305] 35304 35305 35306 35307 35308 35309 35310 35311 35312 35313 35314 35315 #> [35317] 35316 35317 35318 35319 35320 35321 35322 35323 35324 35325 35326 35327 #> [35329] 35328 35329 35330 35331 35332 35333 35334 35335 35336 35337 35338 35339 #> [35341] 35340 35341 35342 35343 35344 35345 35346 35347 35348 35349 35350 35351 #> [35353] 35352 35353 35354 35355 35356 35357 35358 35359 35360 35361 35362 35363 #> [35365] 35364 35365 35366 35367 35368 35369 35370 35371 35372 35373 35374 35375 #> [35377] 35376 35377 35378 35379 35380 35381 35382 35383 35384 35385 35386 35387 #> [35389] 35388 35389 35390 35391 35392 35393 35394 35395 35396 35397 35398 35399 #> [35401] 35400 35401 35402 35403 35404 35405 35406 35407 35408 35409 35410 35411 #> [35413] 35412 35413 35414 35415 35416 35417 35418 35419 35420 35421 35422 35423 #> [35425] 35424 35425 35426 35427 35428 35429 35430 35431 35432 35433 35434 35435 #> [35437] 35436 35437 35438 35439 35440 35441 35442 35443 35444 35445 35446 35447 #> [35449] 35448 35449 35450 35451 35452 35453 35454 35455 35456 35457 35458 35459 #> [35461] 35460 35461 35462 35463 35464 35465 35466 35467 35468 35469 35470 35471 #> [35473] 35472 35473 35474 35475 35476 35477 35478 35479 35480 35481 35482 35483 #> [35485] 35484 35485 35486 35487 35488 35489 35490 35491 35492 35493 35494 35495 #> [35497] 35496 35497 35498 35499 35500 35501 35502 35503 35504 35505 35506 35507 #> [35509] 35508 35509 35510 35511 35512 35513 35514 35515 35516 35517 35518 35519 #> [35521] 35520 35521 35522 35523 35524 35525 35526 35527 35528 35529 35530 35531 #> [35533] 35532 35533 35534 35535 35536 35537 35538 35539 35540 35541 35542 35543 #> [35545] 35544 35545 35546 35547 35548 35549 35550 35551 35552 35553 35554 35555 #> [35557] 35556 35557 35558 35559 35560 35561 35562 35563 35564 35565 35566 35567 #> [35569] 35568 35569 35570 35571 35572 35573 35574 35575 35576 35577 35578 35579 #> [35581] 35580 35581 35582 35583 35584 35585 35586 35587 35588 35589 35590 35591 #> [35593] 35592 35593 35594 35595 35596 35597 35598 35599 35600 35601 35602 35603 #> [35605] 35604 35605 35606 35607 35608 35609 35610 35611 35612 35613 35614 35615 #> [35617] 35616 35617 35618 35619 35620 35621 35622 35623 35624 35625 35626 35627 #> [35629] 35628 35629 35630 35631 35632 35633 35634 35635 35636 35637 35638 35639 #> [35641] 35640 35641 35642 35643 35644 35645 35646 35647 35648 35649 35650 35651 #> [35653] 35652 35653 35654 35655 35656 35657 35658 35659 35660 35661 35662 35663 #> [35665] 35664 35665 35666 35667 35668 35669 35670 35671 35672 35673 35674 35675 #> [35677] 35676 35677 35678 35679 35680 35681 35682 35683 35684 35685 35686 35687 #> [35689] 35688 35689 35690 35691 35692 35693 35694 35695 35696 35697 35698 35699 #> [35701] 35700 35701 35702 35703 35704 35705 35706 35707 35708 35709 35710 35711 #> [35713] 35712 35713 35714 35715 35716 35717 35718 35719 35720 35721 35722 35723 #> [35725] 35724 35725 35726 35727 35728 35729 35730 35731 35732 35733 35734 35735 #> [35737] 35736 35737 35738 35739 35740 35741 35742 35743 35744 35745 35746 35747 #> [35749] 35748 35749 35750 35751 35752 35753 35754 35755 35756 35757 35758 35759 #> [35761] 35760 35761 35762 35763 35764 35765 35766 35767 35768 35769 35770 35771 #> [35773] 35772 35773 35774 35775 35776 35777 35778 35779 35780 35781 35782 35783 #> [35785] 35784 35785 35786 35787 35788 35789 35790 35791 35792 35793 35794 35795 #> [35797] 35796 35797 35798 35799 35800 35801 35802 35803 35804 35805 35806 35807 #> [35809] 35808 35809 35810 35811 35812 35813 35814 35815 35816 35817 35818 35819 #> [35821] 35820 35821 35822 35823 35824 35825 35826 35827 35828 35829 35830 35831 #> [35833] 35832 35833 35834 35835 35836 35837 35838 35839 35840 35841 35842 35843 #> [35845] 35844 35845 35846 35847 35848 35849 35850 35851 35852 35853 35854 35855 #> [35857] 35856 35857 35858 35859 35860 35861 35862 35863 35864 35865 35866 35867 #> [35869] 35868 35869 35870 35871 35872 35873 35874 35875 35876 35877 35878 35879 #> [35881] 35880 35881 35882 35883 35884 35885 35886 35887 35888 35889 35890 35891 #> [35893] 35892 35893 35894 35895 35896 35897 35898 35899 35900 35901 35902 35903 #> [35905] 35904 35905 35906 35907 35908 35909 35910 35911 35912 35913 35914 35915 #> [35917] 35916 35917 35918 35919 35920 35921 35922 35923 35924 35925 35926 35927 #> [35929] 35928 35929 35930 35931 35932 35933 35934 35935 35936 35937 35938 35939 #> [35941] 35940 35941 35942 35943 35944 35945 35946 35947 35948 35949 35950 35951 #> [35953] 35952 35953 35954 35955 35956 35957 35958 35959 35960 35961 35962 35963 #> [35965] 35964 35965 35966 35967 35968 35969 35970 35971 35972 35973 35974 35975 #> [35977] 35976 35977 35978 35979 35980 35981 35982 35983 35984 35985 35986 35987 #> [35989] 35988 35989 35990 35991 35992 35993 35994 35995 35996 35997 35998 35999 #> [36001] 36000 36001 36002 36003 36004 36005 36006 36007 36008 36009 36010 36011 #> [36013] 36012 36013 36014 36015 36016 36017 36018 36019 36020 36021 36022 36023 #> [36025] 36024 36025 36026 36027 36028 36029 36030 36031 36032 36033 36034 36035 #> [36037] 36036 36037 36038 36039 36040 36041 36042 36043 36044 36045 36046 36047 #> [36049] 36048 36049 36050 36051 36052 36053 36054 36055 36056 36057 36058 36059 #> [36061] 36060 36061 36062 36063 36064 36065 36066 36067 36068 36069 36070 36071 #> [36073] 36072 36073 36074 36075 36076 36077 36078 36079 36080 36081 36082 36083 #> [36085] 36084 36085 36086 36087 36088 36089 36090 36091 36092 36093 36094 36095 #> [36097] 36096 36097 36098 36099 36100 36101 36102 36103 36104 36105 36106 36107 #> [36109] 36108 36109 36110 36111 36112 36113 36114 36115 36116 36117 36118 36119 #> [36121] 36120 36121 36122 36123 36124 36125 36126 36127 36128 36129 36130 36131 #> [36133] 36132 36133 36134 36135 36136 36137 36138 36139 36140 36141 36142 36143 #> [36145] 36144 36145 36146 36147 36148 36149 36150 36151 36152 36153 36154 36155 #> [36157] 36156 36157 36158 36159 36160 36161 36162 36163 36164 36165 36166 36167 #> [36169] 36168 36169 36170 36171 36172 36173 36174 36175 36176 36177 36178 36179 #> [36181] 36180 36181 36182 36183 36184 36185 36186 36187 36188 36189 36190 36191 #> [36193] 36192 36193 36194 36195 36196 36197 36198 36199 36200 36201 36202 36203 #> [36205] 36204 36205 36206 36207 36208 36209 36210 36211 36212 36213 36214 36215 #> [36217] 36216 36217 36218 36219 36220 36221 36222 36223 36224 36225 36226 36227 #> [36229] 36228 36229 36230 36231 36232 36233 36234 36235 36236 36237 36238 36239 #> [36241] 36240 36241 36242 36243 36244 36245 36246 36247 36248 36249 36250 36251 #> [36253] 36252 36253 36254 36255 36256 36257 36258 36259 36260 36261 36262 36263 #> [36265] 36264 36265 36266 36267 36268 36269 36270 36271 36272 36273 36274 36275 #> [36277] 36276 36277 36278 36279 36280 36281 36282 36283 36284 36285 36286 36287 #> [36289] 36288 36289 36290 36291 36292 36293 36294 36295 36296 36297 36298 36299 #> [36301] 36300 36301 36302 36303 36304 36305 36306 36307 36308 36309 36310 36311 #> [36313] 36312 36313 36314 36315 36316 36317 36318 36319 36320 36321 36322 36323 #> [36325] 36324 36325 36326 36327 36328 36329 36330 36331 36332 36333 36334 36335 #> [36337] 36336 36337 36338 36339 36340 36341 36342 36343 36344 36345 36346 36347 #> [36349] 36348 36349 36350 36351 36352 36353 36354 36355 36356 36357 36358 36359 #> [36361] 36360 36361 36362 36363 36364 36365 36366 36367 36368 36369 36370 36371 #> [36373] 36372 36373 36374 36375 36376 36377 36378 36379 36380 36381 36382 36383 #> [36385] 36384 36385 36386 36387 36388 36389 36390 36391 36392 36393 36394 36395 #> [36397] 36396 36397 36398 36399 36400 36401 36402 36403 36404 36405 36406 36407 #> [36409] 36408 36409 36410 36411 36412 36413 36414 36415 36416 36417 36418 36419 #> [36421] 36420 36421 36422 36423 36424 36425 36426 36427 36428 36429 36430 36431 #> [36433] 36432 36433 36434 36435 36436 36437 36438 36439 36440 36441 36442 36443 #> [36445] 36444 36445 36446 36447 36448 36449 36450 36451 36452 36453 36454 36455 #> [36457] 36456 36457 36458 36459 36460 36461 36462 36463 36464 36465 36466 36467 #> [36469] 36468 36469 36470 36471 36472 36473 36474 36475 36476 36477 36478 36479 #> [36481] 36480 36481 36482 36483 36484 36485 36486 36487 36488 36489 36490 36491 #> [36493] 36492 36493 36494 36495 36496 36497 36498 36499 36500 36501 36502 36503 #> [36505] 36504 36505 36506 36507 36508 36509 36510 36511 36512 36513 36514 36515 #> [36517] 36516 36517 36518 36519 36520 36521 36522 36523 36524 36525 36526 36527 #> [36529] 36528 36529 36530 36531 36532 36533 36534 36535 36536 36537 36538 36539 #> [36541] 36540 36541 36542 36543 36544 36545 36546 36547 36548 36549 36550 36551 #> [36553] 36552 36553 36554 36555 36556 36557 36558 36559 36560 36561 36562 36563 #> [36565] 36564 36565 36566 36567 36568 36569 36570 36571 36572 36573 36574 36575 #> [36577] 36576 36577 36578 36579 36580 36581 36582 36583 36584 36585 36586 36587 #> [36589] 36588 36589 36590 36591 36592 36593 36594 36595 36596 36597 36598 36599 #> [36601] 36600 36601 36602 36603 36604 36605 36606 36607 36608 36609 36610 36611 #> [36613] 36612 36613 36614 36615 36616 36617 36618 36619 36620 36621 36622 36623 #> [36625] 36624 36625 36626 36627 36628 36629 36630 36631 36632 36633 36634 36635 #> [36637] 36636 36637 36638 36639 36640 36641 36642 36643 36644 36645 36646 36647 #> [36649] 36648 36649 36650 36651 36652 36653 36654 36655 36656 36657 36658 36659 #> [36661] 36660 36661 36662 36663 36664 36665 36666 36667 36668 36669 36670 36671 #> [36673] 36672 36673 36674 36675 36676 36677 36678 36679 36680 36681 36682 36683 #> [36685] 36684 36685 36686 36687 36688 36689 36690 36691 36692 36693 36694 36695 #> [36697] 36696 36697 36698 36699 36700 36701 36702 36703 36704 36705 36706 36707 #> [36709] 36708 36709 36710 36711 36712 36713 36714 36715 36716 36717 36718 36719 #> [36721] 36720 36721 36722 36723 36724 36725 36726 36727 36728 36729 36730 36731 #> [36733] 36732 36733 36734 36735 36736 36737 36738 36739 36740 36741 36742 36743 #> [36745] 36744 36745 36746 36747 36748 36749 36750 36751 36752 36753 36754 36755 #> [36757] 36756 36757 36758 36759 36760 36761 36762 36763 36764 36765 36766 36767 #> [36769] 36768 36769 36770 36771 36772 36773 36774 36775 36776 36777 36778 36779 #> [36781] 36780 36781 36782 36783 36784 36785 36786 36787 36788 36789 36790 36791 #> [36793] 36792 36793 36794 36795 36796 36797 36798 36799 36800 36801 36802 36803 #> [36805] 36804 36805 36806 36807 36808 36809 36810 36811 36812 36813 36814 36815 #> [36817] 36816 36817 36818 36819 36820 36821 36822 36823 36824 36825 36826 36827 #> [36829] 36828 36829 36830 36831 36832 36833 36834 36835 36836 36837 36838 36839 #> [36841] 36840 36841 36842 36843 36844 36845 36846 36847 36848 36849 36850 36851 #> [36853] 36852 36853 36854 36855 36856 36857 36858 36859 36860 36861 36862 36863 #> [36865] 36864 36865 36866 36867 36868 36869 36870 36871 36872 36873 36874 36875 #> [36877] 36876 36877 36878 36879 36880 36881 36882 36883 36884 36885 36886 36887 #> [36889] 36888 36889 36890 36891 36892 36893 36894 36895 36896 36897 36898 36899 #> [36901] 36900 36901 36902 36903 36904 36905 36906 36907 36908 36909 36910 36911 #> [36913] 36912 36913 36914 36915 36916 36917 36918 36919 36920 36921 36922 36923 #> [36925] 36924 36925 36926 36927 36928 36929 36930 36931 36932 36933 36934 36935 #> [36937] 36936 36937 36938 36939 36940 36941 36942 36943 36944 36945 36946 36947 #> [36949] 36948 36949 36950 36951 36952 36953 36954 36955 36956 36957 36958 36959 #> [36961] 36960 36961 36962 36963 36964 36965 36966 36967 36968 36969 36970 36971 #> [36973] 36972 36973 36974 36975 36976 36977 36978 36979 36980 36981 36982 36983 #> [36985] 36984 36985 36986 36987 36988 36989 36990 36991 36992 36993 36994 36995 #> [36997] 36996 36997 36998 36999 37000 37001 37002 37003 37004 37005 37006 37007 #> [37009] 37008 37009 37010 37011 37012 37013 37014 37015 37016 37017 37018 37019 #> [37021] 37020 37021 37022 37023 37024 37025 37026 37027 37028 37029 37030 37031 #> [37033] 37032 37033 37034 37035 37036 37037 37038 37039 37040 37041 37042 37043 #> [37045] 37044 37045 37046 37047 37048 37049 37050 37051 37052 37053 37054 37055 #> [37057] 37056 37057 37058 37059 37060 37061 37062 37063 37064 37065 37066 37067 #> [37069] 37068 37069 37070 37071 37072 37073 37074 37075 37076 37077 37078 37079 #> [37081] 37080 37081 37082 37083 37084 37085 37086 37087 37088 37089 37090 37091 #> [37093] 37092 37093 37094 37095 37096 37097 37098 37099 37100 37101 37102 37103 #> [37105] 37104 37105 37106 37107 37108 37109 37110 37111 37112 37113 37114 37115 #> [37117] 37116 37117 37118 37119 37120 37121 37122 37123 37124 37125 37126 37127 #> [37129] 37128 37129 37130 37131 37132 37133 37134 37135 37136 37137 37138 37139 #> [37141] 37140 37141 37142 37143 37144 37145 37146 37147 37148 37149 37150 37151 #> [37153] 37152 37153 37154 37155 37156 37157 37158 37159 37160 37161 37162 37163 #> [37165] 37164 37165 37166 37167 37168 37169 37170 37171 37172 37173 37174 37175 #> [37177] 37176 37177 37178 37179 37180 37181 37182 37183 37184 37185 37186 37187 #> [37189] 37188 37189 37190 37191 37192 37193 37194 37195 37196 37197 37198 37199 #> [37201] 37200 37201 37202 37203 37204 37205 37206 37207 37208 37209 37210 37211 #> [37213] 37212 37213 37214 37215 37216 37217 37218 37219 37220 37221 37222 37223 #> [37225] 37224 37225 37226 37227 37228 37229 37230 37231 37232 37233 37234 37235 #> [37237] 37236 37237 37238 37239 37240 37241 37242 37243 37244 37245 37246 37247 #> [37249] 37248 37249 37250 37251 37252 37253 37254 37255 37256 37257 37258 37259 #> [37261] 37260 37261 37262 37263 37264 37265 37266 37267 37268 37269 37270 37271 #> [37273] 37272 37273 37274 37275 37276 37277 37278 37279 37280 37281 37282 37283 #> [37285] 37284 37285 37286 37287 37288 37289 37290 37291 37292 37293 37294 37295 #> [37297] 37296 37297 37298 37299 37300 37301 37302 37303 37304 37305 37306 37307 #> [37309] 37308 37309 37310 37311 37312 37313 37314 37315 37316 37317 37318 37319 #> [37321] 37320 37321 37322 37323 37324 37325 37326 37327 37328 37329 37330 37331 #> [37333] 37332 37333 37334 37335 37336 37337 37338 37339 37340 37341 37342 37343 #> [37345] 37344 37345 37346 37347 37348 37349 37350 37351 37352 37353 37354 37355 #> [37357] 37356 37357 37358 37359 37360 37361 37362 37363 37364 37365 37366 37367 #> [37369] 37368 37369 37370 37371 37372 37373 37374 37375 37376 37377 37378 37379 #> [37381] 37380 37381 37382 37383 37384 37385 37386 37387 37388 37389 37390 37391 #> [37393] 37392 37393 37394 37395 37396 37397 37398 37399 37400 37401 37402 37403 #> [37405] 37404 37405 37406 37407 37408 37409 37410 37411 37412 37413 37414 37415 #> [37417] 37416 37417 37418 37419 37420 37421 37422 37423 37424 37425 37426 37427 #> [37429] 37428 37429 37430 37431 37432 37433 37434 37435 37436 37437 37438 37439 #> [37441] 37440 37441 37442 37443 37444 37445 37446 37447 37448 37449 37450 37451 #> [37453] 37452 37453 37454 37455 37456 37457 37458 37459 37460 37461 37462 37463 #> [37465] 37464 37465 37466 37467 37468 37469 37470 37471 37472 37473 37474 37475 #> [37477] 37476 37477 37478 37479 37480 37481 37482 37483 37484 37485 37486 37487 #> [37489] 37488 37489 37490 37491 37492 37493 37494 37495 37496 37497 37498 37499 #> [37501] 37500 37501 37502 37503 37504 37505 37506 37507 37508 37509 37510 37511 #> [37513] 37512 37513 37514 37515 37516 37517 37518 37519 37520 37521 37522 37523 #> [37525] 37524 37525 37526 37527 37528 37529 37530 37531 37532 37533 37534 37535 #> [37537] 37536 37537 37538 37539 37540 37541 37542 37543 37544 37545 37546 37547 #> [37549] 37548 37549 37550 37551 37552 37553 37554 37555 37556 37557 37558 37559 #> [37561] 37560 37561 37562 37563 37564 37565 37566 37567 37568 37569 37570 37571 #> [37573] 37572 37573 37574 37575 37576 37577 37578 37579 37580 37581 37582 37583 #> [37585] 37584 37585 37586 37587 37588 37589 37590 37591 37592 37593 37594 37595 #> [37597] 37596 37597 37598 37599 37600 37601 37602 37603 37604 37605 37606 37607 #> [37609] 37608 37609 37610 37611 37612 37613 37614 37615 37616 37617 37618 37619 #> [37621] 37620 37621 37622 37623 37624 37625 37626 37627 37628 37629 37630 37631 #> [37633] 37632 37633 37634 37635 37636 37637 37638 37639 37640 37641 37642 37643 #> [37645] 37644 37645 37646 37647 37648 37649 37650 37651 37652 37653 37654 37655 #> [37657] 37656 37657 37658 37659 37660 37661 37662 37663 37664 37665 37666 37667 #> [37669] 37668 37669 37670 37671 37672 37673 37674 37675 37676 37677 37678 37679 #> [37681] 37680 37681 37682 37683 37684 37685 37686 37687 37688 37689 37690 37691 #> [37693] 37692 37693 37694 37695 37696 37697 37698 37699 37700 37701 37702 37703 #> [37705] 37704 37705 37706 37707 37708 37709 37710 37711 37712 37713 37714 37715 #> [37717] 37716 37717 37718 37719 37720 37721 37722 37723 37724 37725 37726 37727 #> [37729] 37728 37729 37730 37731 37732 37733 37734 37735 37736 37737 37738 37739 #> [37741] 37740 37741 37742 37743 37744 37745 37746 37747 37748 37749 37750 37751 #> [37753] 37752 37753 37754 37755 37756 37757 37758 37759 37760 37761 37762 37763 #> [37765] 37764 37765 37766 37767 37768 37769 37770 37771 37772 37773 37774 37775 #> [37777] 37776 37777 37778 37779 37780 37781 37782 37783 37784 37785 37786 37787 #> [37789] 37788 37789 37790 37791 37792 37793 37794 37795 37796 37797 37798 37799 #> [37801] 37800 37801 37802 37803 37804 37805 37806 37807 37808 37809 37810 37811 #> [37813] 37812 37813 37814 37815 37816 37817 37818 37819 37820 37821 37822 37823 #> [37825] 37824 37825 37826 37827 37828 37829 37830 37831 37832 37833 37834 37835 #> [37837] 37836 37837 37838 37839 37840 37841 37842 37843 37844 37845 37846 37847 #> [37849] 37848 37849 37850 37851 37852 37853 37854 37855 37856 37857 37858 37859 #> [37861] 37860 37861 37862 37863 37864 37865 37866 37867 37868 37869 37870 37871 #> [37873] 37872 37873 37874 37875 37876 37877 37878 37879 37880 37881 37882 37883 #> [37885] 37884 37885 37886 37887 37888 37889 37890 37891 37892 37893 37894 37895 #> [37897] 37896 37897 37898 37899 37900 37901 37902 37903 37904 37905 37906 37907 #> [37909] 37908 37909 37910 37911 37912 37913 37914 37915 37916 37917 37918 37919 #> [37921] 37920 37921 37922 37923 37924 37925 37926 37927 37928 37929 37930 37931 #> [37933] 37932 37933 37934 37935 37936 37937 37938 37939 37940 37941 37942 37943 #> [37945] 37944 37945 37946 37947 37948 37949 37950 37951 37952 37953 37954 37955 #> [37957] 37956 37957 37958 37959 37960 37961 37962 37963 37964 37965 37966 37967 #> [37969] 37968 37969 37970 37971 37972 37973 37974 37975 37976 37977 37978 37979 #> [37981] 37980 37981 37982 37983 37984 37985 37986 37987 37988 37989 37990 37991 #> [37993] 37992 37993 37994 37995 37996 37997 37998 37999 38000 38001 38002 38003 #> [38005] 38004 38005 38006 38007 38008 38009 38010 38011 38012 38013 38014 38015 #> [38017] 38016 38017 38018 38019 38020 38021 38022 38023 38024 38025 38026 38027 #> [38029] 38028 38029 38030 38031 38032 38033 38034 38035 38036 38037 38038 38039 #> [38041] 38040 38041 38042 38043 38044 38045 38046 38047 38048 38049 38050 38051 #> [38053] 38052 38053 38054 38055 38056 38057 38058 38059 38060 38061 38062 38063 #> [38065] 38064 38065 38066 38067 38068 38069 38070 38071 38072 38073 38074 38075 #> [38077] 38076 38077 38078 38079 38080 38081 38082 38083 38084 38085 38086 38087 #> [38089] 38088 38089 38090 38091 38092 38093 38094 38095 38096 38097 38098 38099 #> [38101] 38100 38101 38102 38103 38104 38105 38106 38107 38108 38109 38110 38111 #> [38113] 38112 38113 38114 38115 38116 38117 38118 38119 38120 38121 38122 38123 #> [38125] 38124 38125 38126 38127 38128 38129 38130 38131 38132 38133 38134 38135 #> [38137] 38136 38137 38138 38139 38140 38141 38142 38143 38144 38145 38146 38147 #> [38149] 38148 38149 38150 38151 38152 38153 38154 38155 38156 38157 38158 38159 #> [38161] 38160 38161 38162 38163 38164 38165 38166 38167 38168 38169 38170 38171 #> [38173] 38172 38173 38174 38175 38176 38177 38178 38179 38180 38181 38182 38183 #> [38185] 38184 38185 38186 38187 38188 38189 38190 38191 38192 38193 38194 38195 #> [38197] 38196 38197 38198 38199 38200 38201 38202 38203 38204 38205 38206 38207 #> [38209] 38208 38209 38210 38211 38212 38213 38214 38215 38216 38217 38218 38219 #> [38221] 38220 38221 38222 38223 38224 38225 38226 38227 38228 38229 38230 38231 #> [38233] 38232 38233 38234 38235 38236 38237 38238 38239 38240 38241 38242 38243 #> [38245] 38244 38245 38246 38247 38248 38249 38250 38251 38252 38253 38254 38255 #> [38257] 38256 38257 38258 38259 38260 38261 38262 38263 38264 38265 38266 38267 #> [38269] 38268 38269 38270 38271 38272 38273 38274 38275 38276 38277 38278 38279 #> [38281] 38280 38281 38282 38283 38284 38285 38286 38287 38288 38289 38290 38291 #> [38293] 38292 38293 38294 38295 38296 38297 38298 38299 38300 38301 38302 38303 #> [38305] 38304 38305 38306 38307 38308 38309 38310 38311 38312 38313 38314 38315 #> [38317] 38316 38317 38318 38319 38320 38321 38322 38323 38324 38325 38326 38327 #> [38329] 38328 38329 38330 38331 38332 38333 38334 38335 38336 38337 38338 38339 #> [38341] 38340 38341 38342 38343 38344 38345 38346 38347 38348 38349 38350 38351 #> [38353] 38352 38353 38354 38355 38356 38357 38358 38359 38360 38361 38362 38363 #> [38365] 38364 38365 38366 38367 38368 38369 38370 38371 38372 38373 38374 38375 #> [38377] 38376 38377 38378 38379 38380 38381 38382 38383 38384 38385 38386 38387 #> [38389] 38388 38389 38390 38391 38392 38393 38394 38395 38396 38397 38398 38399 #> [38401] 38400 38401 38402 38403 38404 38405 38406 38407 38408 38409 38410 38411 #> [38413] 38412 38413 38414 38415 38416 38417 38418 38419 38420 38421 38422 38423 #> [38425] 38424 38425 38426 38427 38428 38429 38430 38431 38432 38433 38434 38435 #> [38437] 38436 38437 38438 38439 38440 38441 38442 38443 38444 38445 38446 38447 #> [38449] 38448 38449 38450 38451 38452 38453 38454 38455 38456 38457 38458 38459 #> [38461] 38460 38461 38462 38463 38464 38465 38466 38467 38468 38469 38470 38471 #> [38473] 38472 38473 38474 38475 38476 38477 38478 38479 38480 38481 38482 38483 #> [38485] 38484 38485 38486 38487 38488 38489 38490 38491 38492 38493 38494 38495 #> [38497] 38496 38497 38498 38499 38500 38501 38502 38503 38504 38505 38506 38507 #> [38509] 38508 38509 38510 38511 38512 38513 38514 38515 38516 38517 38518 38519 #> [38521] 38520 38521 38522 38523 38524 38525 38526 38527 38528 38529 38530 38531 #> [38533] 38532 38533 38534 38535 38536 38537 38538 38539 38540 38541 38542 38543 #> [38545] 38544 38545 38546 38547 38548 38549 38550 38551 38552 38553 38554 38555 #> [38557] 38556 38557 38558 38559 38560 38561 38562 38563 38564 38565 38566 38567 #> [38569] 38568 38569 38570 38571 38572 38573 38574 38575 38576 38577 38578 38579 #> [38581] 38580 38581 38582 38583 38584 38585 38586 38587 38588 38589 38590 38591 #> [38593] 38592 38593 38594 38595 38596 38597 38598 38599 38600 38601 38602 38603 #> [38605] 38604 38605 38606 38607 38608 38609 38610 38611 38612 38613 38614 38615 #> [38617] 38616 38617 38618 38619 38620 38621 38622 38623 38624 38625 38626 38627 #> [38629] 38628 38629 38630 38631 38632 38633 38634 38635 38636 38637 38638 38639 #> [38641] 38640 38641 38642 38643 38644 38645 38646 38647 38648 38649 38650 38651 #> [38653] 38652 38653 38654 38655 38656 38657 38658 38659 38660 38661 38662 38663 #> [38665] 38664 38665 38666 38667 38668 38669 38670 38671 38672 38673 38674 38675 #> [38677] 38676 38677 38678 38679 38680 38681 38682 38683 38684 38685 38686 38687 #> [38689] 38688 38689 38690 38691 38692 38693 38694 38695 38696 38697 38698 38699 #> [38701] 38700 38701 38702 38703 38704 38705 38706 38707 38708 38709 38710 38711 #> [38713] 38712 38713 38714 38715 38716 38717 38718 38719 38720 38721 38722 38723 #> [38725] 38724 38725 38726 38727 38728 38729 38730 38731 38732 38733 38734 38735 #> [38737] 38736 38737 38738 38739 38740 38741 38742 38743 38744 38745 38746 38747 #> [38749] 38748 38749 38750 38751 38752 38753 38754 38755 38756 38757 38758 38759 #> [38761] 38760 38761 38762 38763 38764 38765 38766 38767 38768 38769 38770 38771 #> [38773] 38772 38773 38774 38775 38776 38777 38778 38779 38780 38781 38782 38783 #> [38785] 38784 38785 38786 38787 38788 38789 38790 38791 38792 38793 38794 38795 #> [38797] 38796 38797 38798 38799 38800 38801 38802 38803 38804 38805 38806 38807 #> [38809] 38808 38809 38810 38811 38812 38813 38814 38815 38816 38817 38818 38819 #> [38821] 38820 38821 38822 38823 38824 38825 38826 38827 38828 38829 38830 38831 #> [38833] 38832 38833 38834 38835 38836 38837 38838 38839 38840 38841 38842 38843 #> [38845] 38844 38845 38846 38847 38848 38849 38850 38851 38852 38853 38854 38855 #> [38857] 38856 38857 38858 38859 38860 38861 38862 38863 38864 38865 38866 38867 #> [38869] 38868 38869 38870 38871 38872 38873 38874 38875 38876 38877 38878 38879 #> [38881] 38880 38881 38882 38883 38884 38885 38886 38887 38888 38889 38890 38891 #> [38893] 38892 38893 38894 38895 38896 38897 38898 38899 38900 38901 38902 38903 #> [38905] 38904 38905 38906 38907 38908 38909 38910 38911 38912 38913 38914 38915 #> [38917] 38916 38917 38918 38919 38920 38921 38922 38923 38924 38925 38926 38927 #> [38929] 38928 38929 38930 38931 38932 38933 38934 38935 38936 38937 38938 38939 #> [38941] 38940 38941 38942 38943 38944 38945 38946 38947 38948 38949 38950 38951 #> [38953] 38952 38953 38954 38955 38956 38957 38958 38959 38960 38961 38962 38963 #> [38965] 38964 38965 38966 38967 38968 38969 38970 38971 38972 38973 38974 38975 #> [38977] 38976 38977 38978 38979 38980 38981 38982 38983 38984 38985 38986 38987 #> [38989] 38988 38989 38990 38991 38992 38993 38994 38995 38996 38997 38998 38999 #> [39001] 39000 39001 39002 39003 39004 39005 39006 39007 39008 39009 39010 39011 #> [39013] 39012 39013 39014 39015 39016 39017 39018 39019 39020 39021 39022 39023 #> [39025] 39024 39025 39026 39027 39028 39029 39030 39031 39032 39033 39034 39035 #> [39037] 39036 39037 39038 39039 39040 39041 39042 39043 39044 39045 39046 39047 #> [39049] 39048 39049 39050 39051 39052 39053 39054 39055 39056 39057 39058 39059 #> [39061] 39060 39061 39062 39063 39064 39065 39066 39067 39068 39069 39070 39071 #> [39073] 39072 39073 39074 39075 39076 39077 39078 39079 39080 39081 39082 39083 #> [39085] 39084 39085 39086 39087 39088 39089 39090 39091 39092 39093 39094 39095 #> [39097] 39096 39097 39098 39099 39100 39101 39102 39103 39104 39105 39106 39107 #> [39109] 39108 39109 39110 39111 39112 39113 39114 39115 39116 39117 39118 39119 #> [39121] 39120 39121 39122 39123 39124 39125 39126 39127 39128 39129 39130 39131 #> [39133] 39132 39133 39134 39135 39136 39137 39138 39139 39140 39141 39142 39143 #> [39145] 39144 39145 39146 39147 39148 39149 39150 39151 39152 39153 39154 39155 #> [39157] 39156 39157 39158 39159 39160 39161 39162 39163 39164 39165 39166 39167 #> [39169] 39168 39169 39170 39171 39172 39173 39174 39175 39176 39177 39178 39179 #> [39181] 39180 39181 39182 39183 39184 39185 39186 39187 39188 39189 39190 39191 #> [39193] 39192 39193 39194 39195 39196 39197 39198 39199 39200 39201 39202 39203 #> [39205] 39204 39205 39206 39207 39208 39209 39210 39211 39212 39213 39214 39215 #> [39217] 39216 39217 39218 39219 39220 39221 39222 39223 39224 39225 39226 39227 #> [39229] 39228 39229 39230 39231 39232 39233 39234 39235 39236 39237 39238 39239 #> [39241] 39240 39241 39242 39243 39244 39245 39246 39247 39248 39249 39250 39251 #> [39253] 39252 39253 39254 39255 39256 39257 39258 39259 39260 39261 39262 39263 #> [39265] 39264 39265 39266 39267 39268 39269 39270 39271 39272 39273 39274 39275 #> [39277] 39276 39277 39278 39279 39280 39281 39282 39283 39284 39285 39286 39287 #> [39289] 39288 39289 39290 39291 39292 39293 39294 39295 39296 39297 39298 39299 #> [39301] 39300 39301 39302 39303 39304 39305 39306 39307 39308 39309 39310 39311 #> [39313] 39312 39313 39314 39315 39316 39317 39318 39319 39320 39321 39322 39323 #> [39325] 39324 39325 39326 39327 39328 39329 39330 39331 39332 39333 39334 39335 #> [39337] 39336 39337 39338 39339 39340 39341 39342 39343 39344 39345 39346 39347 #> [39349] 39348 39349 39350 39351 39352 39353 39354 39355 39356 39357 39358 39359 #> [39361] 39360 39361 39362 39363 39364 39365 39366 39367 39368 39369 39370 39371 #> [39373] 39372 39373 39374 39375 39376 39377 39378 39379 39380 39381 39382 39383 #> [39385] 39384 39385 39386 39387 39388 39389 39390 39391 39392 39393 39394 39395 #> [39397] 39396 39397 39398 39399 39400 39401 39402 39403 39404 39405 39406 39407 #> [39409] 39408 39409 39410 39411 39412 39413 39414 39415 39416 39417 39418 39419 #> [39421] 39420 39421 39422 39423 39424 39425 39426 39427 39428 39429 39430 39431 #> [39433] 39432 39433 39434 39435 39436 39437 39438 39439 39440 39441 39442 39443 #> [39445] 39444 39445 39446 39447 39448 39449 39450 39451 39452 39453 39454 39455 #> [39457] 39456 39457 39458 39459 39460 39461 39462 39463 39464 39465 39466 39467 #> [39469] 39468 39469 39470 39471 39472 39473 39474 39475 39476 39477 39478 39479 #> [39481] 39480 39481 39482 39483 39484 39485 39486 39487 39488 39489 39490 39491 #> [39493] 39492 39493 39494 39495 39496 39497 39498 39499 39500 39501 39502 39503 #> [39505] 39504 39505 39506 39507 39508 39509 39510 39511 39512 39513 39514 39515 #> [39517] 39516 39517 39518 39519 39520 39521 39522 39523 39524 39525 39526 39527 #> [39529] 39528 39529 39530 39531 39532 39533 39534 39535 39536 39537 39538 39539 #> [39541] 39540 39541 39542 39543 39544 39545 39546 39547 39548 39549 39550 39551 #> [39553] 39552 39553 39554 39555 39556 39557 39558 39559 39560 39561 39562 39563 #> [39565] 39564 39565 39566 39567 39568 39569 39570 39571 39572 39573 39574 39575 #> [39577] 39576 39577 39578 39579 39580 39581 39582 39583 39584 39585 39586 39587 #> [39589] 39588 39589 39590 39591 39592 39593 39594 39595 39596 39597 39598 39599 #> [39601] 39600 39601 39602 39603 39604 39605 39606 39607 39608 39609 39610 39611 #> [39613] 39612 39613 39614 39615 39616 39617 39618 39619 39620 39621 39622 39623 #> [39625] 39624 39625 39626 39627 39628 39629 39630 39631 39632 39633 39634 39635 #> [39637] 39636 39637 39638 39639 39640 39641 39642 39643 39644 39645 39646 39647 #> [39649] 39648 39649 39650 39651 39652 39653 39654 39655 39656 39657 39658 39659 #> [39661] 39660 39661 39662 39663 39664 39665 39666 39667 39668 39669 39670 39671 #> [39673] 39672 39673 39674 39675 39676 39677 39678 39679 39680 39681 39682 39683 #> [39685] 39684 39685 39686 39687 39688 39689 39690 39691 39692 39693 39694 39695 #> [39697] 39696 39697 39698 39699 39700 39701 39702 39703 39704 39705 39706 39707 #> [39709] 39708 39709 39710 39711 39712 39713 39714 39715 39716 39717 39718 39719 #> [39721] 39720 39721 39722 39723 39724 39725 39726 39727 39728 39729 39730 39731 #> [39733] 39732 39733 39734 39735 39736 39737 39738 39739 39740 39741 39742 39743 #> [39745] 39744 39745 39746 39747 39748 39749 39750 39751 39752 39753 39754 39755 #> [39757] 39756 39757 39758 39759 39760 39761 39762 39763 39764 39765 39766 39767 #> [39769] 39768 39769 39770 39771 39772 39773 39774 39775 39776 39777 39778 39779 #> [39781] 39780 39781 39782 39783 39784 39785 39786 39787 39788 39789 39790 39791 #> [39793] 39792 39793 39794 39795 39796 39797 39798 39799 39800 39801 39802 39803 #> [39805] 39804 39805 39806 39807 39808 39809 39810 39811 39812 39813 39814 39815 #> [39817] 39816 39817 39818 39819 39820 39821 39822 39823 39824 39825 39826 39827 #> [39829] 39828 39829 39830 39831 39832 39833 39834 39835 39836 39837 39838 39839 #> [39841] 39840 39841 39842 39843 39844 39845 39846 39847 39848 39849 39850 39851 #> [39853] 39852 39853 39854 39855 39856 39857 39858 39859 39860 39861 39862 39863 #> [39865] 39864 39865 39866 39867 39868 39869 39870 39871 39872 39873 39874 39875 #> [39877] 39876 39877 39878 39879 39880 39881 39882 39883 39884 39885 39886 39887 #> [39889] 39888 39889 39890 39891 39892 39893 39894 39895 39896 39897 39898 39899 #> [39901] 39900 39901 39902 39903 39904 39905 39906 39907 39908 39909 39910 39911 #> [39913] 39912 39913 39914 39915 39916 39917 39918 39919 39920 39921 39922 39923 #> [39925] 39924 39925 39926 39927 39928 39929 39930 39931 39932 39933 39934 39935 #> [39937] 39936 39937 39938 39939 39940 39941 39942 39943 39944 39945 39946 39947 #> [39949] 39948 39949 39950 39951 39952 39953 39954 39955 39956 39957 39958 39959 #> [39961] 39960 39961 39962 39963 39964 39965 39966 39967 39968 39969 39970 39971 #> [39973] 39972 39973 39974 39975 39976 39977 39978 39979 39980 39981 39982 39983 #> [39985] 39984 39985 39986 39987 39988 39989 39990 39991 39992 39993 39994 39995 #> [39997] 39996 39997 39998 39999 40000 40001 40002 40003 40004 40005 40006 40007 #> [40009] 40008 40009 40010 40011 40012 40013 40014 40015 40016 40017 40018 40019 #> [40021] 40020 40021 40022 40023 40024 40025 40026 40027 40028 40029 40030 40031 #> [40033] 40032 40033 40034 40035 40036 40037 40038 40039 40040 40041 40042 40043 #> [40045] 40044 40045 40046 40047 40048 40049 40050 40051 40052 40053 40054 40055 #> [40057] 40056 40057 40058 40059 40060 40061 40062 40063 40064 40065 40066 40067 #> [40069] 40068 40069 40070 40071 40072 40073 40074 40075 40076 40077 40078 40079 #> [40081] 40080 40081 40082 40083 40084 40085 40086 40087 40088 40089 40090 40091 #> [40093] 40092 40093 40094 40095 40096 40097 40098 40099 40100 40101 40102 40103 #> [40105] 40104 40105 40106 40107 40108 40109 40110 40111 40112 40113 40114 40115 #> [40117] 40116 40117 40118 40119 40120 40121 40122 40123 40124 40125 40126 40127 #> [40129] 40128 40129 40130 40131 40132 40133 40134 40135 40136 40137 40138 40139 #> [40141] 40140 40141 40142 40143 40144 40145 40146 40147 40148 40149 40150 40151 #> [40153] 40152 40153 40154 40155 40156 40157 40158 40159 40160 40161 40162 40163 #> [40165] 40164 40165 40166 40167 40168 40169 40170 40171 40172 40173 40174 40175 #> [40177] 40176 40177 40178 40179 40180 40181 40182 40183 40184 40185 40186 40187 #> [40189] 40188 40189 40190 40191 40192 40193 40194 40195 40196 40197 40198 40199 #> [40201] 40200 40201 40202 40203 40204 40205 40206 40207 40208 40209 40210 40211 #> [40213] 40212 40213 40214 40215 40216 40217 40218 40219 40220 40221 40222 40223 #> [40225] 40224 40225 40226 40227 40228 40229 40230 40231 40232 40233 40234 40235 #> [40237] 40236 40237 40238 40239 40240 40241 40242 40243 40244 40245 40246 40247 #> [40249] 40248 40249 40250 40251 40252 40253 40254 40255 40256 40257 40258 40259 #> [40261] 40260 40261 40262 40263 40264 40265 40266 40267 40268 40269 40270 40271 #> [40273] 40272 40273 40274 40275 40276 40277 40278 40279 40280 40281 40282 40283 #> [40285] 40284 40285 40286 40287 40288 40289 40290 40291 40292 40293 40294 40295 #> [40297] 40296 40297 40298 40299 40300 40301 40302 40303 40304 40305 40306 40307 #> [40309] 40308 40309 40310 40311 40312 40313 40314 40315 40316 40317 40318 40319 #> [40321] 40320 40321 40322 40323 40324 40325 40326 40327 40328 40329 40330 40331 #> [40333] 40332 40333 40334 40335 40336 40337 40338 40339 40340 40341 40342 40343 #> [40345] 40344 40345 40346 40347 40348 40349 40350 40351 40352 40353 40354 40355 #> [40357] 40356 40357 40358 40359 40360 40361 40362 40363 40364 40365 40366 40367 #> [40369] 40368 40369 40370 40371 40372 40373 40374 40375 40376 40377 40378 40379 #> [40381] 40380 40381 40382 40383 40384 40385 40386 40387 40388 40389 40390 40391 #> [40393] 40392 40393 40394 40395 40396 40397 40398 40399 40400 40401 40402 40403 #> [40405] 40404 40405 40406 40407 40408 40409 40410 40411 40412 40413 40414 40415 #> [40417] 40416 40417 40418 40419 40420 40421 40422 40423 40424 40425 40426 40427 #> [40429] 40428 40429 40430 40431 40432 40433 40434 40435 40436 40437 40438 40439 #> [40441] 40440 40441 40442 40443 40444 40445 40446 40447 40448 40449 40450 40451 #> [40453] 40452 40453 40454 40455 40456 40457 40458 40459 40460 40461 40462 40463 #> [40465] 40464 40465 40466 40467 40468 40469 40470 40471 40472 40473 40474 40475 #> [40477] 40476 40477 40478 40479 40480 40481 40482 40483 40484 40485 40486 40487 #> [40489] 40488 40489 40490 40491 40492 40493 40494 40495 40496 40497 40498 40499 #> [40501] 40500 40501 40502 40503 40504 40505 40506 40507 40508 40509 40510 40511 #> [40513] 40512 40513 40514 40515 40516 40517 40518 40519 40520 40521 40522 40523 #> [40525] 40524 40525 40526 40527 40528 40529 40530 40531 40532 40533 40534 40535 #> [40537] 40536 40537 40538 40539 40540 40541 40542 40543 40544 40545 40546 40547 #> [40549] 40548 40549 40550 40551 40552 40553 40554 40555 40556 40557 40558 40559 #> [40561] 40560 40561 40562 40563 40564 40565 40566 40567 40568 40569 40570 40571 #> [40573] 40572 40573 40574 40575 40576 40577 40578 40579 40580 40581 40582 40583 #> [40585] 40584 40585 40586 40587 40588 40589 40590 40591 40592 40593 40594 40595 #> [40597] 40596 40597 40598 40599 40600 40601 40602 40603 40604 40605 40606 40607 #> [40609] 40608 40609 40610 40611 40612 40613 40614 40615 40616 40617 40618 40619 #> [40621] 40620 40621 40622 40623 40624 40625 40626 40627 40628 40629 40630 40631 #> [40633] 40632 40633 40634 40635 40636 40637 40638 40639 40640 40641 40642 40643 #> [40645] 40644 40645 40646 40647 40648 40649 40650 40651 40652 40653 40654 40655 #> [40657] 40656 40657 40658 40659 40660 40661 40662 40663 40664 40665 40666 40667 #> [40669] 40668 40669 40670 40671 40672 40673 40674 40675 40676 40677 40678 40679 #> [40681] 40680 40681 40682 40683 40684 40685 40686 40687 40688 40689 40690 40691 #> [40693] 40692 40693 40694 40695 40696 40697 40698 40699 40700 40701 40702 40703 #> [40705] 40704 40705 40706 40707 40708 40709 40710 40711 40712 40713 40714 40715 #> [40717] 40716 40717 40718 40719 40720 40721 40722 40723 40724 40725 40726 40727 #> [40729] 40728 40729 40730 40731 40732 40733 40734 40735 40736 40737 40738 40739 #> [40741] 40740 40741 40742 40743 40744 40745 40746 40747 40748 40749 40750 40751 #> [40753] 40752 40753 40754 40755 40756 40757 40758 40759 40760 40761 40762 40763 #> [40765] 40764 40765 40766 40767 40768 40769 40770 40771 40772 40773 40774 40775 #> [40777] 40776 40777 40778 40779 40780 40781 40782 40783 40784 40785 40786 40787 #> [40789] 40788 40789 40790 40791 40792 40793 40794 40795 40796 40797 40798 40799 #> [40801] 40800 40801 40802 40803 40804 40805 40806 40807 40808 40809 40810 40811 #> [40813] 40812 40813 40814 40815 40816 40817 40818 40819 40820 40821 40822 40823 #> [40825] 40824 40825 40826 40827 40828 40829 40830 40831 40832 40833 40834 40835 #> [40837] 40836 40837 40838 40839 40840 40841 40842 40843 40844 40845 40846 40847 #> [40849] 40848 40849 40850 40851 40852 40853 40854 40855 40856 40857 40858 40859 #> [40861] 40860 40861 40862 40863 40864 40865 40866 40867 40868 40869 40870 40871 #> [40873] 40872 40873 40874 40875 40876 40877 40878 40879 40880 40881 40882 40883 #> [40885] 40884 40885 40886 40887 40888 40889 40890 40891 40892 40893 40894 40895 #> [40897] 40896 40897 40898 40899 40900 40901 40902 40903 40904 40905 40906 40907 #> [40909] 40908 40909 40910 40911 40912 40913 40914 40915 40916 40917 40918 40919 #> [40921] 40920 40921 40922 40923 40924 40925 40926 40927 40928 40929 40930 40931 #> [40933] 40932 40933 40934 40935 40936 40937 40938 40939 40940 40941 40942 40943 #> [40945] 40944 40945 40946 40947 40948 40949 40950 40951 40952 40953 40954 40955 #> [40957] 40956 40957 40958 40959 40960 40961 40962 40963 40964 40965 40966 40967 #> [40969] 40968 40969 40970 40971 40972 40973 40974 40975 40976 40977 40978 40979 #> [40981] 40980 40981 40982 40983 40984 40985 40986 40987 40988 40989 40990 40991 #> [40993] 40992 40993 40994 40995 40996 40997 40998 40999 41000 41001 41002 41003 #> [41005] 41004 41005 41006 41007 41008 41009 41010 41011 41012 41013 41014 41015 #> [41017] 41016 41017 41018 41019 41020 41021 41022 41023 41024 41025 41026 41027 #> [41029] 41028 41029 41030 41031 41032 41033 41034 41035 41036 41037 41038 41039 #> [41041] 41040 41041 41042 41043 41044 41045 41046 41047 41048 41049 41050 41051 #> [41053] 41052 41053 41054 41055 41056 41057 41058 41059 41060 41061 41062 41063 #> [41065] 41064 41065 41066 41067 41068 41069 41070 41071 41072 41073 41074 41075 #> [41077] 41076 41077 41078 41079 41080 41081 41082 41083 41084 41085 41086 41087 #> [41089] 41088 41089 41090 41091 41092 41093 41094 41095 41096 41097 41098 41099 #> [41101] 41100 41101 41102 41103 41104 41105 41106 41107 41108 41109 41110 41111 #> [41113] 41112 41113 41114 41115 41116 41117 41118 41119 41120 41121 41122 41123 #> [41125] 41124 41125 41126 41127 41128 41129 41130 41131 41132 41133 41134 41135 #> [41137] 41136 41137 41138 41139 41140 41141 41142 41143 41144 41145 41146 41147 #> [41149] 41148 41149 41150 41151 41152 41153 41154 41155 41156 41157 41158 41159 #> [41161] 41160 41161 41162 41163 41164 41165 41166 41167 41168 41169 41170 41171 #> [41173] 41172 41173 41174 41175 41176 41177 41178 41179 41180 41181 41182 41183 #> [41185] 41184 41185 41186 41187 41188 41189 41190 41191 41192 41193 41194 41195 #> [41197] 41196 41197 41198 41199 41200 41201 41202 41203 41204 41205 41206 41207 #> [41209] 41208 41209 41210 41211 41212 41213 41214 41215 41216 41217 41218 41219 #> [41221] 41220 41221 41222 41223 41224 41225 41226 41227 41228 41229 41230 41231 #> [41233] 41232 41233 41234 41235 41236 41237 41238 41239 41240 41241 41242 41243 #> [41245] 41244 41245 41246 41247 41248 41249 41250 41251 41252 41253 41254 41255 #> [41257] 41256 41257 41258 41259 41260 41261 41262 41263 41264 41265 41266 41267 #> [41269] 41268 41269 41270 41271 41272 41273 41274 41275 41276 41277 41278 41279 #> [41281] 41280 41281 41282 41283 41284 41285 41286 41287 41288 41289 41290 41291 #> [41293] 41292 41293 41294 41295 41296 41297 41298 41299 41300 41301 41302 41303 #> [41305] 41304 41305 41306 41307 41308 41309 41310 41311 41312 41313 41314 41315 #> [41317] 41316 41317 41318 41319 41320 41321 41322 41323 41324 41325 41326 41327 #> [41329] 41328 41329 41330 41331 41332 41333 41334 41335 41336 41337 41338 41339 #> [41341] 41340 41341 41342 41343 41344 41345 41346 41347 41348 41349 41350 41351 #> [41353] 41352 41353 41354 41355 41356 41357 41358 41359 41360 41361 41362 41363 #> [41365] 41364 41365 41366 41367 41368 41369 41370 41371 41372 41373 41374 41375 #> [41377] 41376 41377 41378 41379 41380 41381 41382 41383 41384 41385 41386 41387 #> [41389] 41388 41389 41390 41391 41392 41393 41394 41395 41396 41397 41398 41399 #> [41401] 41400 41401 41402 41403 41404 41405 41406 41407 41408 41409 41410 41411 #> [41413] 41412 41413 41414 41415 41416 41417 41418 41419 41420 41421 41422 41423 #> [41425] 41424 41425 41426 41427 41428 41429 41430 41431 41432 41433 41434 41435 #> [41437] 41436 41437 41438 41439 41440 41441 41442 41443 41444 41445 41446 41447 #> [41449] 41448 41449 41450 41451 41452 41453 41454 41455 41456 41457 41458 41459 #> [41461] 41460 41461 41462 41463 41464 41465 41466 41467 41468 41469 41470 41471 #> [41473] 41472 41473 41474 41475 41476 41477 41478 41479 41480 41481 41482 41483 #> [41485] 41484 41485 41486 41487 41488 41489 41490 41491 41492 41493 41494 41495 #> [41497] 41496 41497 41498 41499 41500 41501 41502 41503 41504 41505 41506 41507 #> [41509] 41508 41509 41510 41511 41512 41513 41514 41515 41516 41517 41518 41519 #> [41521] 41520 41521 41522 41523 41524 41525 41526 41527 41528 41529 41530 41531 #> [41533] 41532 41533 41534 41535 41536 41537 41538 41539 41540 41541 41542 41543 #> [41545] 41544 41545 41546 41547 41548 41549 41550 41551 41552 41553 41554 41555 #> [41557] 41556 41557 41558 41559 41560 41561 41562 41563 41564 41565 41566 41567 #> [41569] 41568 41569 41570 41571 41572 41573 41574 41575 41576 41577 41578 41579 #> [41581] 41580 41581 41582 41583 41584 41585 41586 41587 41588 41589 41590 41591 #> [41593] 41592 41593 41594 41595 41596 41597 41598 41599 41600 41601 41602 41603 #> [41605] 41604 41605 41606 41607 41608 41609 41610 41611 41612 41613 41614 41615 #> [41617] 41616 41617 41618 41619 41620 41621 41622 41623 41624 41625 41626 41627 #> [41629] 41628 41629 41630 41631 41632 41633 41634 41635 41636 41637 41638 41639 #> [41641] 41640 41641 41642 41643 41644 41645 41646 41647 41648 41649 41650 41651 #> [41653] 41652 41653 41654 41655 41656 41657 41658 41659 41660 41661 41662 41663 #> [41665] 41664 41665 41666 41667 41668 41669 41670 41671 41672 41673 41674 41675 #> [41677] 41676 41677 41678 41679 41680 41681 41682 41683 41684 41685 41686 41687 #> [41689] 41688 41689 41690 41691 41692 41693 41694 41695 41696 41697 41698 41699 #> [41701] 41700 41701 41702 41703 41704 41705 41706 41707 41708 41709 41710 41711 #> [41713] 41712 41713 41714 41715 41716 41717 41718 41719 41720 41721 41722 41723 #> [41725] 41724 41725 41726 41727 41728 41729 41730 41731 41732 41733 41734 41735 #> [41737] 41736 41737 41738 41739 41740 41741 41742 41743 41744 41745 41746 41747 #> [41749] 41748 41749 41750 41751 41752 41753 41754 41755 41756 41757 41758 41759 #> [41761] 41760 41761 41762 41763 41764 41765 41766 41767 41768 41769 41770 41771 #> [41773] 41772 41773 41774 41775 41776 41777 41778 41779 41780 41781 41782 41783 #> [41785] 41784 41785 41786 41787 41788 41789 41790 41791 41792 41793 41794 41795 #> [41797] 41796 41797 41798 41799 41800 41801 41802 41803 41804 41805 41806 41807 #> [41809] 41808 41809 41810 41811 41812 41813 41814 41815 41816 41817 41818 41819 #> [41821] 41820 41821 41822 41823 41824 41825 41826 41827 41828 41829 41830 41831 #> [41833] 41832 41833 41834 41835 41836 41837 41838 41839 41840 41841 41842 41843 #> [41845] 41844 41845 41846 41847 41848 41849 41850 41851 41852 41853 41854 41855 #> [41857] 41856 41857 41858 41859 41860 41861 41862 41863 41864 41865 41866 41867 #> [41869] 41868 41869 41870 41871 41872 41873 41874 41875 41876 41877 41878 41879 #> [41881] 41880 41881 41882 41883 41884 41885 41886 41887 41888 41889 41890 41891 #> [41893] 41892 41893 41894 41895 41896 41897 41898 41899 41900 41901 41902 41903 #> [41905] 41904 41905 41906 41907 41908 41909 41910 41911 41912 41913 41914 41915 #> [41917] 41916 41917 41918 41919 41920 41921 41922 41923 41924 41925 41926 41927 #> [41929] 41928 41929 41930 41931 41932 41933 41934 41935 41936 41937 41938 41939 #> [41941] 41940 41941 41942 41943 41944 41945 41946 41947 41948 41949 41950 41951 #> [41953] 41952 41953 41954 41955 41956 41957 41958 41959 41960 41961 41962 41963 #> [41965] 41964 41965 41966 41967 41968 41969 41970 41971 41972 41973 41974 41975 #> [41977] 41976 41977 41978 41979 41980 41981 41982 41983 41984 41985 41986 41987 #> [41989] 41988 41989 41990 41991 41992 41993 41994 41995 41996 41997 41998 41999 #> [42001] 42000 42001 42002 42003 42004 42005 42006 42007 42008 42009 42010 42011 #> [42013] 42012 42013 42014 42015 42016 42017 42018 42019 42020 42021 42022 42023 #> [42025] 42024 42025 42026 42027 42028 42029 42030 42031 42032 42033 42034 42035 #> [42037] 42036 42037 42038 42039 42040 42041 42042 42043 42044 42045 42046 42047 #> [42049] 42048 42049 42050 42051 42052 42053 42054 42055 42056 42057 42058 42059 #> [42061] 42060 42061 42062 42063 42064 42065 42066 42067 42068 42069 42070 42071 #> [42073] 42072 42073 42074 42075 42076 42077 42078 42079 42080 42081 42082 42083 #> [42085] 42084 42085 42086 42087 42088 42089 42090 42091 42092 42093 42094 42095 #> [42097] 42096 42097 42098 42099 42100 42101 42102 42103 42104 42105 42106 42107 #> [42109] 42108 42109 42110 42111 42112 42113 42114 42115 42116 42117 42118 42119 #> [42121] 42120 42121 42122 42123 42124 42125 42126 42127 42128 42129 42130 42131 #> [42133] 42132 42133 42134 42135 42136 42137 42138 42139 42140 42141 42142 42143 #> [42145] 42144 42145 42146 42147 42148 42149 42150 42151 42152 42153 42154 42155 #> [42157] 42156 42157 42158 42159 42160 42161 42162 42163 42164 42165 42166 42167 #> [42169] 42168 42169 42170 42171 42172 42173 42174 42175 42176 42177 42178 42179 #> [42181] 42180 42181 42182 42183 42184 42185 42186 42187 42188 42189 42190 42191 #> [42193] 42192 42193 42194 42195 42196 42197 42198 42199 42200 42201 42202 42203 #> [42205] 42204 42205 42206 42207 42208 42209 42210 42211 42212 42213 42214 42215 #> [42217] 42216 42217 42218 42219 42220 42221 42222 42223 42224 42225 42226 42227 #> [42229] 42228 42229 42230 42231 42232 42233 42234 42235 42236 42237 42238 42239 #> [42241] 42240 42241 42242 42243 42244 42245 42246 42247 42248 42249 42250 42251 #> [42253] 42252 42253 42254 42255 42256 42257 42258 42259 42260 42261 42262 42263 #> [42265] 42264 42265 42266 42267 42268 42269 42270 42271 42272 42273 42274 42275 #> [42277] 42276 42277 42278 42279 42280 42281 42282 42283 42284 42285 42286 42287 #> [42289] 42288 42289 42290 42291 42292 42293 42294 42295 42296 42297 42298 42299 #> [42301] 42300 42301 42302 42303 42304 42305 42306 42307 42308 42309 42310 42311 #> [42313] 42312 42313 42314 42315 42316 42317 42318 42319 42320 42321 42322 42323 #> [42325] 42324 42325 42326 42327 42328 42329 42330 42331 42332 42333 42334 42335 #> [42337] 42336 42337 42338 42339 42340 42341 42342 42343 42344 42345 42346 42347 #> [42349] 42348 42349 42350 42351 42352 42353 42354 42355 42356 42357 42358 42359 #> [42361] 42360 42361 42362 42363 42364 42365 42366 42367 42368 42369 42370 42371 #> [42373] 42372 42373 42374 42375 42376 42377 42378 42379 42380 42381 42382 42383 #> [42385] 42384 42385 42386 42387 42388 42389 42390 42391 42392 42393 42394 42395 #> [42397] 42396 42397 42398 42399 42400 42401 42402 42403 42404 42405 42406 42407 #> [42409] 42408 42409 42410 42411 42412 42413 42414 42415 42416 42417 42418 42419 #> [42421] 42420 42421 42422 42423 42424 42425 42426 42427 42428 42429 42430 42431 #> [42433] 42432 42433 42434 42435 42436 42437 42438 42439 42440 42441 42442 42443 #> [42445] 42444 42445 42446 42447 42448 42449 42450 42451 42452 42453 42454 42455 #> [42457] 42456 42457 42458 42459 42460 42461 42462 42463 42464 42465 42466 42467 #> [42469] 42468 42469 42470 42471 42472 42473 42474 42475 42476 42477 42478 42479 #> [42481] 42480 42481 42482 42483 42484 42485 42486 42487 42488 42489 42490 42491 #> [42493] 42492 42493 42494 42495 42496 42497 42498 42499 42500 42501 42502 42503 #> [42505] 42504 42505 42506 42507 42508 42509 42510 42511 42512 42513 42514 42515 #> [42517] 42516 42517 42518 42519 42520 42521 42522 42523 42524 42525 42526 42527 #> [42529] 42528 42529 42530 42531 42532 42533 42534 42535 42536 42537 42538 42539 #> [42541] 42540 42541 42542 42543 42544 42545 42546 42547 42548 42549 42550 42551 #> [42553] 42552 42553 42554 42555 42556 42557 42558 42559 42560 42561 42562 42563 #> [42565] 42564 42565 42566 42567 42568 42569 42570 42571 42572 42573 42574 42575 #> [42577] 42576 42577 42578 42579 42580 42581 42582 42583 42584 42585 42586 42587 #> [42589] 42588 42589 42590 42591 42592 42593 42594 42595 42596 42597 42598 42599 #> [42601] 42600 42601 42602 42603 42604 42605 42606 42607 42608 42609 42610 42611 #> [42613] 42612 42613 42614 42615 42616 42617 42618 42619 42620 42621 42622 42623 #> [42625] 42624 42625 42626 42627 42628 42629 42630 42631 42632 42633 42634 42635 #> [42637] 42636 42637 42638 42639 42640 42641 42642 42643 42644 42645 42646 42647 #> [42649] 42648 42649 42650 42651 42652 42653 42654 42655 42656 42657 42658 42659 #> [42661] 42660 42661 42662 42663 42664 42665 42666 42667 42668 42669 42670 42671 #> [42673] 42672 42673 42674 42675 42676 42677 42678 42679 42680 42681 42682 42683 #> [42685] 42684 42685 42686 42687 42688 42689 42690 42691 42692 42693 42694 42695 #> [42697] 42696 42697 42698 42699 42700 42701 42702 42703 42704 42705 42706 42707 #> [42709] 42708 42709 42710 42711 42712 42713 42714 42715 42716 42717 42718 42719 #> [42721] 42720 42721 42722 42723 42724 42725 42726 42727 42728 42729 42730 42731 #> [42733] 42732 42733 42734 42735 42736 42737 42738 42739 42740 42741 42742 42743 #> [42745] 42744 42745 42746 42747 42748 42749 42750 42751 42752 42753 42754 42755 #> [42757] 42756 42757 42758 42759 42760 42761 42762 42763 42764 42765 42766 42767 #> [42769] 42768 42769 42770 42771 42772 42773 42774 42775 42776 42777 42778 42779 #> [42781] 42780 42781 42782 42783 42784 42785 42786 42787 42788 42789 42790 42791 #> [42793] 42792 42793 42794 42795 42796 42797 42798 42799 42800 42801 42802 42803 #> [42805] 42804 42805 42806 42807 42808 42809 42810 42811 42812 42813 42814 42815 #> [42817] 42816 42817 42818 42819 42820 42821 42822 42823 42824 42825 42826 42827 #> [42829] 42828 42829 42830 42831 42832 42833 42834 42835 42836 42837 42838 42839 #> [42841] 42840 42841 42842 42843 42844 42845 42846 42847 42848 42849 42850 42851 #> [42853] 42852 42853 42854 42855 42856 42857 42858 42859 42860 42861 42862 42863 #> [42865] 42864 42865 42866 42867 42868 42869 42870 42871 42872 42873 42874 42875 #> [42877] 42876 42877 42878 42879 42880 42881 42882 42883 42884 42885 42886 42887 #> [42889] 42888 42889 42890 42891 42892 42893 42894 42895 42896 42897 42898 42899 #> [42901] 42900 42901 42902 42903 42904 42905 42906 42907 42908 42909 42910 42911 #> [42913] 42912 42913 42914 42915 42916 42917 42918 42919 42920 42921 42922 42923 #> [42925] 42924 42925 42926 42927 42928 42929 42930 42931 42932 42933 42934 42935 #> [42937] 42936 42937 42938 42939 42940 42941 42942 42943 42944 42945 42946 42947 #> [42949] 42948 42949 42950 42951 42952 42953 42954 42955 42956 42957 42958 42959 #> [42961] 42960 42961 42962 42963 42964 42965 42966 42967 42968 42969 42970 42971 #> [42973] 42972 42973 42974 42975 42976 42977 42978 42979 42980 42981 42982 42983 #> [42985] 42984 42985 42986 42987 42988 42989 42990 42991 42992 42993 42994 42995 #> [42997] 42996 42997 42998 42999 43000 43001 43002 43003 43004 43005 43006 43007 #> [43009] 43008 43009 43010 43011 43012 43013 43014 43015 43016 43017 43018 43019 #> [43021] 43020 43021 43022 43023 43024 43025 43026 43027 43028 43029 43030 43031 #> [43033] 43032 43033 43034 43035 43036 43037 43038 43039 43040 43041 43042 43043 #> [43045] 43044 43045 43046 43047 43048 43049 43050 43051 43052 43053 43054 43055 #> [43057] 43056 43057 43058 43059 43060 43061 43062 43063 43064 43065 43066 43067 #> [43069] 43068 43069 43070 43071 43072 43073 43074 43075 43076 43077 43078 43079 #> [43081] 43080 43081 43082 43083 43084 43085 43086 43087 43088 43089 43090 43091 #> [43093] 43092 43093 43094 43095 43096 43097 43098 43099 43100 43101 43102 43103 #> [43105] 43104 43105 43106 43107 43108 43109 43110 43111 43112 43113 43114 43115 #> [43117] 43116 43117 43118 43119 43120 43121 43122 43123 43124 43125 43126 43127 #> [43129] 43128 43129 43130 43131 43132 43133 43134 43135 43136 43137 43138 43139 #> [43141] 43140 43141 43142 43143 43144 43145 43146 43147 43148 43149 43150 43151 #> [43153] 43152 43153 43154 43155 43156 43157 43158 43159 43160 43161 43162 43163 #> [43165] 43164 43165 43166 43167 43168 43169 43170 43171 43172 43173 43174 43175 #> [43177] 43176 43177 43178 43179 43180 43181 43182 43183 43184 43185 43186 43187 #> [43189] 43188 43189 43190 43191 43192 43193 43194 43195 43196 43197 43198 43199 #> [43201] 43200 43201 43202 43203 43204 43205 43206 43207 43208 43209 43210 43211 #> [43213] 43212 43213 43214 43215 43216 43217 43218 43219 43220 43221 43222 43223 #> [43225] 43224 43225 43226 43227 43228 43229 43230 43231 43232 43233 43234 43235 #> [43237] 43236 43237 43238 43239 43240 43241 43242 43243 43244 43245 43246 43247 #> [43249] 43248 43249 43250 43251 43252 43253 43254 43255 43256 43257 43258 43259 #> [43261] 43260 43261 43262 43263 43264 43265 43266 43267 43268 43269 43270 43271 #> [43273] 43272 43273 43274 43275 43276 43277 43278 43279 43280 43281 43282 43283 #> [43285] 43284 43285 43286 43287 43288 43289 43290 43291 43292 43293 43294 43295 #> [43297] 43296 43297 43298 43299 43300 43301 43302 43303 43304 43305 43306 43307 #> [43309] 43308 43309 43310 43311 43312 43313 43314 43315 43316 43317 43318 43319 #> [43321] 43320 43321 43322 43323 43324 43325 43326 43327 43328 43329 43330 43331 #> [43333] 43332 43333 43334 43335 43336 43337 43338 43339 43340 43341 43342 43343 #> [43345] 43344 43345 43346 43347 43348 43349 43350 43351 43352 43353 43354 43355 #> [43357] 43356 43357 43358 43359 43360 43361 43362 43363 43364 43365 43366 43367 #> [43369] 43368 43369 43370 43371 43372 43373 43374 43375 43376 43377 43378 43379 #> [43381] 43380 43381 43382 43383 43384 43385 43386 43387 43388 43389 43390 43391 #> [43393] 43392 43393 43394 43395 43396 43397 43398 43399 43400 43401 43402 43403 #> [43405] 43404 43405 43406 43407 43408 43409 43410 43411 43412 43413 43414 43415 #> [43417] 43416 43417 43418 43419 43420 43421 43422 43423 43424 43425 43426 43427 #> [43429] 43428 43429 43430 43431 43432 43433 43434 43435 43436 43437 43438 43439 #> [43441] 43440 43441 43442 43443 43444 43445 43446 43447 43448 43449 43450 43451 #> [43453] 43452 43453 43454 43455 43456 43457 43458 43459 43460 43461 43462 43463 #> [43465] 43464 43465 43466 43467 43468 43469 43470 43471 43472 43473 43474 43475 #> [43477] 43476 43477 43478 43479 43480 43481 43482 43483 43484 43485 43486 43487 #> [43489] 43488 43489 43490 43491 43492 43493 43494 43495 43496 43497 43498 43499 #> [43501] 43500 43501 43502 43503 43504 43505 43506 43507 43508 43509 43510 43511 #> [43513] 43512 43513 43514 43515 43516 43517 43518 43519 43520 43521 43522 43523 #> [43525] 43524 43525 43526 43527 43528 43529 43530 43531 43532 43533 43534 43535 #> [43537] 43536 43537 43538 43539 43540 43541 43542 43543 43544 43545 43546 43547 #> [43549] 43548 43549 43550 43551 43552 43553 43554 43555 43556 43557 43558 43559 #> [43561] 43560 43561 43562 43563 43564 43565 43566 43567 43568 43569 43570 43571 #> [43573] 43572 43573 43574 43575 43576 43577 43578 43579 43580 43581 43582 43583 #> [43585] 43584 43585 43586 43587 43588 43589 43590 43591 43592 43593 43594 43595 #> [43597] 43596 43597 43598 43599 43600 43601 43602 43603 43604 43605 43606 43607 #> [43609] 43608 43609 43610 43611 43612 43613 43614 43615 43616 43617 43618 43619 #> [43621] 43620 43621 43622 43623 43624 43625 43626 43627 43628 43629 43630 43631 #> [43633] 43632 43633 43634 43635 43636 43637 43638 43639 43640 43641 43642 43643 #> [43645] 43644 43645 43646 43647 43648 43649 43650 43651 43652 43653 43654 43655 #> [43657] 43656 43657 43658 43659 43660 43661 43662 43663 43664 43665 43666 43667 #> [43669] 43668 43669 43670 43671 43672 43673 43674 43675 43676 43677 43678 43679 #> [43681] 43680 43681 43682 43683 43684 43685 43686 43687 43688 43689 43690 43691 #> [43693] 43692 43693 43694 43695 43696 43697 43698 43699 43700 43701 43702 43703 #> [43705] 43704 43705 43706 43707 43708 43709 43710 43711 43712 43713 43714 43715 #> [43717] 43716 43717 43718 43719 43720 43721 43722 43723 43724 43725 43726 43727 #> [43729] 43728 43729 43730 43731 43732 43733 43734 43735 43736 43737 43738 43739 #> [43741] 43740 43741 43742 43743 43744 43745 43746 43747 43748 43749 43750 43751 #> [43753] 43752 43753 43754 43755 43756 43757 43758 43759 43760 43761 43762 43763 #> [43765] 43764 43765 43766 43767 43768 43769 43770 43771 43772 43773 43774 43775 #> [43777] 43776 43777 43778 43779 43780 43781 43782 43783 43784 43785 43786 43787 #> [43789] 43788 43789 43790 43791 43792 43793 43794 43795 43796 43797 43798 43799 #> [43801] 43800 43801 43802 43803 43804 43805 43806 43807 43808 43809 43810 43811 #> [43813] 43812 43813 43814 43815 43816 43817 43818 43819 43820 43821 43822 43823 #> [43825] 43824 43825 43826 43827 43828 43829 43830 43831 43832 43833 43834 43835 #> [43837] 43836 43837 43838 43839 43840 43841 43842 43843 43844 43845 43846 43847 #> [43849] 43848 43849 43850 43851 43852 43853 43854 43855 43856 43857 43858 43859 #> [43861] 43860 43861 43862 43863 43864 43865 43866 43867 43868 43869 43870 43871 #> [43873] 43872 43873 43874 43875 43876 43877 43878 43879 43880 43881 43882 43883 #> [43885] 43884 43885 43886 43887 43888 43889 43890 43891 43892 43893 43894 43895 #> [43897] 43896 43897 43898 43899 43900 43901 43902 43903 43904 43905 43906 43907 #> [43909] 43908 43909 43910 43911 43912 43913 43914 43915 43916 43917 43918 43919 #> [43921] 43920 43921 43922 43923 43924 43925 43926 43927 43928 43929 43930 43931 #> [43933] 43932 43933 43934 43935 43936 43937 43938 43939 43940 43941 43942 43943 #> [43945] 43944 43945 43946 43947 43948 43949 43950 43951 43952 43953 43954 43955 #> [43957] 43956 43957 43958 43959 43960 43961 43962 43963 43964 43965 43966 43967 #> [43969] 43968 43969 43970 43971 43972 43973 43974 43975 43976 43977 43978 43979 #> [43981] 43980 43981 43982 43983 43984 43985 43986 43987 43988 43989 43990 43991 #> [43993] 43992 43993 43994 43995 43996 43997 43998 43999 44000 44001 44002 44003 #> [44005] 44004 44005 44006 44007 44008 44009 44010 44011 44012 44013 44014 44015 #> [44017] 44016 44017 44018 44019 44020 44021 44022 44023 44024 44025 44026 44027 #> [44029] 44028 44029 44030 44031 44032 44033 44034 44035 44036 44037 44038 44039 #> [44041] 44040 44041 44042 44043 44044 44045 44046 44047 44048 44049 44050 44051 #> [44053] 44052 44053 44054 44055 44056 44057 44058 44059 44060 44061 44062 44063 #> [44065] 44064 44065 44066 44067 44068 44069 44070 44071 44072 44073 44074 44075 #> [44077] 44076 44077 44078 44079 44080 44081 44082 44083 44084 44085 44086 44087 #> [44089] 44088 44089 44090 44091 44092 44093 44094 44095 44096 44097 44098 44099 #> [44101] 44100 44101 44102 44103 44104 44105 44106 44107 44108 44109 44110 44111 #> [44113] 44112 44113 44114 44115 44116 44117 44118 44119 44120 44121 44122 44123 #> [44125] 44124 44125 44126 44127 44128 44129 44130 44131 44132 44133 44134 44135 #> [44137] 44136 44137 44138 44139 44140 44141 44142 44143 44144 44145 44146 44147 #> [44149] 44148 44149 44150 44151 44152 44153 44154 44155 44156 44157 44158 44159 #> [44161] 44160 44161 44162 44163 44164 44165 44166 44167 44168 44169 44170 44171 #> [44173] 44172 44173 44174 44175 44176 44177 44178 44179 44180 44181 44182 44183 #> [44185] 44184 44185 44186 44187 44188 44189 44190 44191 44192 44193 44194 44195 #> [44197] 44196 44197 44198 44199 44200 44201 44202 44203 44204 44205 44206 44207 #> [44209] 44208 44209 44210 44211 44212 44213 44214 44215 44216 44217 44218 44219 #> [44221] 44220 44221 44222 44223 44224 44225 44226 44227 44228 44229 44230 44231 #> [44233] 44232 44233 44234 44235 44236 44237 44238 44239 44240 44241 44242 44243 #> [44245] 44244 44245 44246 44247 44248 44249 44250 44251 44252 44253 44254 44255 #> [44257] 44256 44257 44258 44259 44260 44261 44262 44263 44264 44265 44266 44267 #> [44269] 44268 44269 44270 44271 44272 44273 44274 44275 44276 44277 44278 44279 #> [44281] 44280 44281 44282 44283 44284 44285 44286 44287 44288 44289 44290 44291 #> [44293] 44292 44293 44294 44295 44296 44297 44298 44299 44300 44301 44302 44303 #> [44305] 44304 44305 44306 44307 44308 44309 44310 44311 44312 44313 44314 44315 #> [44317] 44316 44317 44318 44319 44320 44321 44322 44323 44324 44325 44326 44327 #> [44329] 44328 44329 44330 44331 44332 44333 44334 44335 44336 44337 44338 44339 #> [44341] 44340 44341 44342 44343 44344 44345 44346 44347 44348 44349 44350 44351 #> [44353] 44352 44353 44354 44355 44356 44357 44358 44359 44360 44361 44362 44363 #> [44365] 44364 44365 44366 44367 44368 44369 44370 44371 44372 44373 44374 44375 #> [44377] 44376 44377 44378 44379 44380 44381 44382 44383 44384 44385 44386 44387 #> [44389] 44388 44389 44390 44391 44392 44393 44394 44395 44396 44397 44398 44399 #> [44401] 44400 44401 44402 44403 44404 44405 44406 44407 44408 44409 44410 44411 #> [44413] 44412 44413 44414 44415 44416 44417 44418 44419 44420 44421 44422 44423 #> [44425] 44424 44425 44426 44427 44428 44429 44430 44431 44432 44433 44434 44435 #> [44437] 44436 44437 44438 44439 44440 44441 44442 44443 44444 44445 44446 44447 #> [44449] 44448 44449 44450 44451 44452 44453 44454 44455 44456 44457 44458 44459 #> [44461] 44460 44461 44462 44463 44464 44465 44466 44467 44468 44469 44470 44471 #> [44473] 44472 44473 44474 44475 44476 44477 44478 44479 44480 44481 44482 44483 #> [44485] 44484 44485 44486 44487 44488 44489 44490 44491 44492 44493 44494 44495 #> [44497] 44496 44497 44498 44499 44500 44501 44502 44503 44504 44505 44506 44507 #> [44509] 44508 44509 44510 44511 44512 44513 44514 44515 44516 44517 44518 44519 #> [44521] 44520 44521 44522 44523 44524 44525 44526 44527 44528 44529 44530 44531 #> [44533] 44532 44533 44534 44535 44536 44537 44538 44539 44540 44541 44542 44543 #> [44545] 44544 44545 44546 44547 44548 44549 44550 44551 44552 44553 44554 44555 #> [44557] 44556 44557 44558 44559 44560 44561 44562 44563 44564 44565 44566 44567 #> [44569] 44568 44569 44570 44571 44572 44573 44574 44575 44576 44577 44578 44579 #> [44581] 44580 44581 44582 44583 44584 44585 44586 44587 44588 44589 44590 44591 #> [44593] 44592 44593 44594 44595 44596 44597 44598 44599 44600 44601 44602 44603 #> [44605] 44604 44605 44606 44607 44608 44609 44610 44611 44612 44613 44614 44615 #> [44617] 44616 44617 44618 44619 44620 44621 44622 44623 44624 44625 44626 44627 #> [44629] 44628 44629 44630 44631 44632 44633 44634 44635 44636 44637 44638 44639 #> [44641] 44640 44641 44642 44643 44644 44645 44646 44647 44648 44649 44650 44651 #> [44653] 44652 44653 44654 44655 44656 44657 44658 44659 44660 44661 44662 44663 #> [44665] 44664 44665 44666 44667 44668 44669 44670 44671 44672 44673 44674 44675 #> [44677] 44676 44677 44678 44679 44680 44681 44682 44683 44684 44685 44686 44687 #> [44689] 44688 44689 44690 44691 44692 44693 44694 44695 44696 44697 44698 44699 #> [44701] 44700 44701 44702 44703 44704 44705 44706 44707 44708 44709 44710 44711 #> [44713] 44712 44713 44714 44715 44716 44717 44718 44719 44720 44721 44722 44723 #> [44725] 44724 44725 44726 44727 44728 44729 44730 44731 44732 44733 44734 44735 #> [44737] 44736 44737 44738 44739 44740 44741 44742 44743 44744 44745 44746 44747 #> [44749] 44748 44749 44750 44751 44752 44753 44754 44755 44756 44757 44758 44759 #> [44761] 44760 44761 44762 44763 44764 44765 44766 44767 44768 44769 44770 44771 #> [44773] 44772 44773 44774 44775 44776 44777 44778 44779 44780 44781 44782 44783 #> [44785] 44784 44785 44786 44787 44788 44789 44790 44791 44792 44793 44794 44795 #> [44797] 44796 44797 44798 44799 44800 44801 44802 44803 44804 44805 44806 44807 #> [44809] 44808 44809 44810 44811 44812 44813 44814 44815 44816 44817 44818 44819 #> [44821] 44820 44821 44822 44823 44824 44825 44826 44827 44828 44829 44830 44831 #> [44833] 44832 44833 44834 44835 44836 44837 44838 44839 44840 44841 44842 44843 #> [44845] 44844 44845 44846 44847 44848 44849 44850 44851 44852 44853 44854 44855 #> [44857] 44856 44857 44858 44859 44860 44861 44862 44863 44864 44865 44866 44867 #> [44869] 44868 44869 44870 44871 44872 44873 44874 44875 44876 44877 44878 44879 #> [44881] 44880 44881 44882 44883 44884 44885 44886 44887 44888 44889 44890 44891 #> [44893] 44892 44893 44894 44895 44896 44897 44898 44899 44900 44901 44902 44903 #> [44905] 44904 44905 44906 44907 44908 44909 44910 44911 44912 44913 44914 44915 #> [44917] 44916 44917 44918 44919 44920 44921 44922 44923 44924 44925 44926 44927 #> [44929] 44928 44929 44930 44931 44932 44933 44934 44935 44936 44937 44938 44939 #> [44941] 44940 44941 44942 44943 44944 44945 44946 44947 44948 44949 44950 44951 #> [44953] 44952 44953 44954 44955 44956 44957 44958 44959 44960 44961 44962 44963 #> [44965] 44964 44965 44966 44967 44968 44969 44970 44971 44972 44973 44974 44975 #> [44977] 44976 44977 44978 44979 44980 44981 44982 44983 44984 44985 44986 44987 #> [44989] 44988 44989 44990 44991 44992 44993 44994 44995 44996 44997 44998 44999 #> [45001] 45000 45001 45002 45003 45004 45005 45006 45007 45008 45009 45010 45011 #> [45013] 45012 45013 45014 45015 45016 45017 45018 45019 45020 45021 45022 45023 #> [45025] 45024 45025 45026 45027 45028 45029 45030 45031 45032 45033 45034 45035 #> [45037] 45036 45037 45038 45039 45040 45041 45042 45043 45044 45045 45046 45047 #> [45049] 45048 45049 45050 45051 45052 45053 45054 45055 45056 45057 45058 45059 #> [45061] 45060 45061 45062 45063 45064 45065 45066 45067 45068 45069 45070 45071 #> [45073] 45072 45073 45074 45075 45076 45077 45078 45079 45080 45081 45082 45083 #> [45085] 45084 45085 45086 45087 45088 45089 45090 45091 45092 45093 45094 45095 #> [45097] 45096 45097 45098 45099 45100 45101 45102 45103 45104 45105 45106 45107 #> [45109] 45108 45109 45110 45111 45112 45113 45114 45115 45116 45117 45118 45119 #> [45121] 45120 45121 45122 45123 45124 45125 45126 45127 45128 45129 45130 45131 #> [45133] 45132 45133 45134 45135 45136 45137 45138 45139 45140 45141 45142 45143 #> [45145] 45144 45145 45146 45147 45148 45149 45150 45151 45152 45153 45154 45155 #> [45157] 45156 45157 45158 45159 45160 45161 45162 45163 45164 45165 45166 45167 #> [45169] 45168 45169 45170 45171 45172 45173 45174 45175 45176 45177 45178 45179 #> [45181] 45180 45181 45182 45183 45184 45185 45186 45187 45188 45189 45190 45191 #> [45193] 45192 45193 45194 45195 45196 45197 45198 45199 45200 45201 45202 45203 #> [45205] 45204 45205 45206 45207 45208 45209 45210 45211 45212 45213 45214 45215 #> [45217] 45216 45217 45218 45219 45220 45221 45222 45223 45224 45225 45226 45227 #> [45229] 45228 45229 45230 45231 45232 45233 45234 45235 45236 45237 45238 45239 #> [45241] 45240 45241 45242 45243 45244 45245 45246 45247 45248 45249 45250 45251 #> [45253] 45252 45253 45254 45255 45256 45257 45258 45259 45260 45261 45262 45263 #> [45265] 45264 45265 45266 45267 45268 45269 45270 45271 45272 45273 45274 45275 #> [45277] 45276 45277 45278 45279 45280 45281 45282 45283 45284 45285 45286 45287 #> [45289] 45288 45289 45290 45291 45292 45293 45294 45295 45296 45297 45298 45299 #> [45301] 45300 45301 45302 45303 45304 45305 45306 45307 45308 45309 45310 45311 #> [45313] 45312 45313 45314 45315 45316 45317 45318 45319 45320 45321 45322 45323 #> [45325] 45324 45325 45326 45327 45328 45329 45330 45331 45332 45333 45334 45335 #> [45337] 45336 45337 45338 45339 45340 45341 45342 45343 45344 45345 45346 45347 #> [45349] 45348 45349 45350 45351 45352 45353 45354 45355 45356 45357 45358 45359 #> [45361] 45360 45361 45362 45363 45364 45365 45366 45367 45368 45369 45370 45371 #> [45373] 45372 45373 45374 45375 45376 45377 45378 45379 45380 45381 45382 45383 #> [45385] 45384 45385 45386 45387 45388 45389 45390 45391 45392 45393 45394 45395 #> [45397] 45396 45397 45398 45399 45400 45401 45402 45403 45404 45405 45406 45407 #> [45409] 45408 45409 45410 45411 45412 45413 45414 45415 45416 45417 45418 45419 #> [45421] 45420 45421 45422 45423 45424 45425 45426 45427 45428 45429 45430 45431 #> [45433] 45432 45433 45434 45435 45436 45437 45438 45439 45440 45441 45442 45443 #> [45445] 45444 45445 45446 45447 45448 45449 45450 45451 45452 45453 45454 45455 #> [45457] 45456 45457 45458 45459 45460 45461 45462 45463 45464 45465 45466 45467 #> [45469] 45468 45469 45470 45471 45472 45473 45474 45475 45476 45477 45478 45479 #> [45481] 45480 45481 45482 45483 45484 45485 45486 45487 45488 45489 45490 45491 #> [45493] 45492 45493 45494 45495 45496 45497 45498 45499 45500 45501 45502 45503 #> [45505] 45504 45505 45506 45507 45508 45509 45510 45511 45512 45513 45514 45515 #> [45517] 45516 45517 45518 45519 45520 45521 45522 45523 45524 45525 45526 45527 #> [45529] 45528 45529 45530 45531 45532 45533 45534 45535 45536 45537 45538 45539 #> [45541] 45540 45541 45542 45543 45544 45545 45546 45547 45548 45549 45550 45551 #> [45553] 45552 45553 45554 45555 45556 45557 45558 45559 45560 45561 45562 45563 #> [45565] 45564 45565 45566 45567 45568 45569 45570 45571 45572 45573 45574 45575 #> [45577] 45576 45577 45578 45579 45580 45581 45582 45583 45584 45585 45586 45587 #> [45589] 45588 45589 45590 45591 45592 45593 45594 45595 45596 45597 45598 45599 #> [45601] 45600 45601 45602 45603 45604 45605 45606 45607 45608 45609 45610 45611 #> [45613] 45612 45613 45614 45615 45616 45617 45618 45619 45620 45621 45622 45623 #> [45625] 45624 45625 45626 45627 45628 45629 45630 45631 45632 45633 45634 45635 #> [45637] 45636 45637 45638 45639 45640 45641 45642 45643 45644 45645 45646 45647 #> [45649] 45648 45649 45650 45651 45652 45653 45654 45655 45656 45657 45658 45659 #> [45661] 45660 45661 45662 45663 45664 45665 45666 45667 45668 45669 45670 45671 #> [45673] 45672 45673 45674 45675 45676 45677 45678 45679 45680 45681 45682 45683 #> [45685] 45684 45685 45686 45687 45688 45689 45690 45691 45692 45693 45694 45695 #> [45697] 45696 45697 45698 45699 45700 45701 45702 45703 45704 45705 45706 45707 #> [45709] 45708 45709 45710 45711 45712 45713 45714 45715 45716 45717 45718 45719 #> [45721] 45720 45721 45722 45723 45724 45725 45726 45727 45728 45729 45730 45731 #> [45733] 45732 45733 45734 45735 45736 45737 45738 45739 45740 45741 45742 45743 #> [45745] 45744 45745 45746 45747 45748 45749 45750 45751 45752 45753 45754 45755 #> [45757] 45756 45757 45758 45759 45760 45761 45762 45763 45764 45765 45766 45767 #> [45769] 45768 45769 45770 45771 45772 45773 45774 45775 45776 45777 45778 45779 #> [45781] 45780 45781 45782 45783 45784 45785 45786 45787 45788 45789 45790 45791 #> [45793] 45792 45793 45794 45795 45796 45797 45798 45799 45800 45801 45802 45803 #> [45805] 45804 45805 45806 45807 45808 45809 45810 45811 45812 45813 45814 45815 #> [45817] 45816 45817 45818 45819 45820 45821 45822 45823 45824 45825 45826 45827 #> [45829] 45828 45829 45830 45831 45832 45833 45834 45835 45836 45837 45838 45839 #> [45841] 45840 45841 45842 45843 45844 45845 45846 45847 45848 45849 45850 45851 #> [45853] 45852 45853 45854 45855 45856 45857 45858 45859 45860 45861 45862 45863 #> [45865] 45864 45865 45866 45867 45868 45869 45870 45871 45872 45873 45874 45875 #> [45877] 45876 45877 45878 45879 45880 45881 45882 45883 45884 45885 45886 45887 #> [45889] 45888 45889 45890 45891 45892 45893 45894 45895 45896 45897 45898 45899 #> [45901] 45900 45901 45902 45903 45904 45905 45906 45907 45908 45909 45910 45911 #> [45913] 45912 45913 45914 45915 45916 45917 45918 45919 45920 45921 45922 45923 #> [45925] 45924 45925 45926 45927 45928 45929 45930 45931 45932 45933 45934 45935 #> [45937] 45936 45937 45938 45939 45940 45941 45942 45943 45944 45945 45946 45947 #> [45949] 45948 45949 45950 45951 45952 45953 45954 45955 45956 45957 45958 45959 #> [45961] 45960 45961 45962 45963 45964 45965 45966 45967 45968 45969 45970 45971 #> [45973] 45972 45973 45974 45975 45976 45977 45978 45979 45980 45981 45982 45983 #> [45985] 45984 45985 45986 45987 45988 45989 45990 45991 45992 45993 45994 45995 #> [45997] 45996 45997 45998 45999 46000 46001 46002 46003 46004 46005 46006 46007 #> [46009] 46008 46009 46010 46011 46012 46013 46014 46015 46016 46017 46018 46019 #> [46021] 46020 46021 46022 46023 46024 46025 46026 46027 46028 46029 46030 46031 #> [46033] 46032 46033 46034 46035 46036 46037 46038 46039 46040 46041 46042 46043 #> [46045] 46044 46045 46046 46047 46048 46049 46050 46051 46052 46053 46054 46055 #> [46057] 46056 46057 46058 46059 46060 46061 46062 46063 46064 46065 46066 46067 #> [46069] 46068 46069 46070 46071 46072 46073 46074 46075 46076 46077 46078 46079 #> [46081] 46080 46081 46082 46083 46084 46085 46086 46087 46088 46089 46090 46091 #> [46093] 46092 46093 46094 46095 46096 46097 46098 46099 46100 46101 46102 46103 #> [46105] 46104 46105 46106 46107 46108 46109 46110 46111 46112 46113 46114 46115 #> [46117] 46116 46117 46118 46119 46120 46121 46122 46123 46124 46125 46126 46127 #> [46129] 46128 46129 46130 46131 46132 46133 46134 46135 46136 46137 46138 46139 #> [46141] 46140 46141 46142 46143 46144 46145 46146 46147 46148 46149 46150 46151 #> [46153] 46152 46153 46154 46155 46156 46157 46158 46159 46160 46161 46162 46163 #> [46165] 46164 46165 46166 46167 46168 46169 46170 46171 46172 46173 46174 46175 #> [46177] 46176 46177 46178 46179 46180 46181 46182 46183 46184 46185 46186 46187 #> [46189] 46188 46189 46190 46191 46192 46193 46194 46195 46196 46197 46198 46199 #> [46201] 46200 46201 46202 46203 46204 46205 46206 46207 46208 46209 46210 46211 #> [46213] 46212 46213 46214 46215 46216 46217 46218 46219 46220 46221 46222 46223 #> [46225] 46224 46225 46226 46227 46228 46229 46230 46231 46232 46233 46234 46235 #> [46237] 46236 46237 46238 46239 46240 46241 46242 46243 46244 46245 46246 46247 #> [46249] 46248 46249 46250 46251 46252 46253 46254 46255 46256 46257 46258 46259 #> [46261] 46260 46261 46262 46263 46264 46265 46266 46267 46268 46269 46270 46271 #> [46273] 46272 46273 46274 46275 46276 46277 46278 46279 46280 46281 46282 46283 #> [46285] 46284 46285 46286 46287 46288 46289 46290 46291 46292 46293 46294 46295 #> [46297] 46296 46297 46298 46299 46300 46301 46302 46303 46304 46305 46306 46307 #> [46309] 46308 46309 46310 46311 46312 46313 46314 46315 46316 46317 46318 46319 #> [46321] 46320 46321 46322 46323 46324 46325 46326 46327 46328 46329 46330 46331 #> [46333] 46332 46333 46334 46335 46336 46337 46338 46339 46340 46341 46342 46343 #> [46345] 46344 46345 46346 46347 46348 46349 46350 46351 46352 46353 46354 46355 #> [46357] 46356 46357 46358 46359 46360 46361 46362 46363 46364 46365 46366 46367 #> [46369] 46368 46369 46370 46371 46372 46373 46374 46375 46376 46377 46378 46379 #> [46381] 46380 46381 46382 46383 46384 46385 46386 46387 46388 46389 46390 46391 #> [46393] 46392 46393 46394 46395 46396 46397 46398 46399 46400 46401 46402 46403 #> [46405] 46404 46405 46406 46407 46408 46409 46410 46411 46412 46413 46414 46415 #> [46417] 46416 46417 46418 46419 46420 46421 46422 46423 46424 46425 46426 46427 #> [46429] 46428 46429 46430 46431 46432 46433 46434 46435 46436 46437 46438 46439 #> [46441] 46440 46441 46442 46443 46444 46445 46446 46447 46448 46449 46450 46451 #> [46453] 46452 46453 46454 46455 46456 46457 46458 46459 46460 46461 46462 46463 #> [46465] 46464 46465 46466 46467 46468 46469 46470 46471 46472 46473 46474 46475 #> [46477] 46476 46477 46478 46479 46480 46481 46482 46483 46484 46485 46486 46487 #> [46489] 46488 46489 46490 46491 46492 46493 46494 46495 46496 46497 46498 46499 #> [46501] 46500 46501 46502 46503 46504 46505 46506 46507 46508 46509 46510 46511 #> [46513] 46512 46513 46514 46515 46516 46517 46518 46519 46520 46521 46522 46523 #> [46525] 46524 46525 46526 46527 46528 46529 46530 46531 46532 46533 46534 46535 #> [46537] 46536 46537 46538 46539 46540 46541 46542 46543 46544 46545 46546 46547 #> [46549] 46548 46549 46550 46551 46552 46553 46554 46555 46556 46557 46558 46559 #> [46561] 46560 46561 46562 46563 46564 46565 46566 46567 46568 46569 46570 46571 #> [46573] 46572 46573 46574 46575 46576 46577 46578 46579 46580 46581 46582 46583 #> [46585] 46584 46585 46586 46587 46588 46589 46590 46591 46592 46593 46594 46595 #> [46597] 46596 46597 46598 46599 46600 46601 46602 46603 46604 46605 46606 46607 #> [46609] 46608 46609 46610 46611 46612 46613 46614 46615 46616 46617 46618 46619 #> [46621] 46620 46621 46622 46623 46624 46625 46626 46627 46628 46629 46630 46631 #> [46633] 46632 46633 46634 46635 46636 46637 46638 46639 46640 46641 46642 46643 #> [46645] 46644 46645 46646 46647 46648 46649 46650 46651 46652 46653 46654 46655 #> [46657] 46656 46657 46658 46659 46660 46661 46662 46663 46664 46665 46666 46667 #> [46669] 46668 46669 46670 46671 46672 46673 46674 46675 46676 46677 46678 46679 #> [46681] 46680 46681 46682 46683 46684 46685 46686 46687 46688 46689 46690 46691 #> [46693] 46692 46693 46694 46695 46696 46697 46698 46699 46700 46701 46702 46703 #> [46705] 46704 46705 46706 46707 46708 46709 46710 46711 46712 46713 46714 46715 #> [46717] 46716 46717 46718 46719 46720 46721 46722 46723 46724 46725 46726 46727 #> [46729] 46728 46729 46730 46731 46732 46733 46734 46735 46736 46737 46738 46739 #> [46741] 46740 46741 46742 46743 46744 46745 46746 46747 46748 46749 46750 46751 #> [46753] 46752 46753 46754 46755 46756 46757 46758 46759 46760 46761 46762 46763 #> [46765] 46764 46765 46766 46767 46768 46769 46770 46771 46772 46773 46774 46775 #> [46777] 46776 46777 46778 46779 46780 46781 46782 46783 46784 46785 46786 46787 #> [46789] 46788 46789 46790 46791 46792 46793 46794 46795 46796 46797 46798 46799 #> [46801] 46800 46801 46802 46803 46804 46805 46806 46807 46808 46809 46810 46811 #> [46813] 46812 46813 46814 46815 46816 46817 46818 46819 46820 46821 46822 46823 #> [46825] 46824 46825 46826 46827 46828 46829 46830 46831 46832 46833 46834 46835 #> [46837] 46836 46837 46838 46839 46840 46841 46842 46843 46844 46845 46846 46847 #> [46849] 46848 46849 46850 46851 46852 46853 46854 46855 46856 46857 46858 46859 #> [46861] 46860 46861 46862 46863 46864 46865 46866 46867 46868 46869 46870 46871 #> [46873] 46872 46873 46874 46875 46876 46877 46878 46879 46880 46881 46882 46883 #> [46885] 46884 46885 46886 46887 46888 46889 46890 46891 46892 46893 46894 46895 #> [46897] 46896 46897 46898 46899 46900 46901 46902 46903 46904 46905 46906 46907 #> [46909] 46908 46909 46910 46911 46912 46913 46914 46915 46916 46917 46918 46919 #> [46921] 46920 46921 46922 46923 46924 46925 46926 46927 46928 46929 46930 46931 #> [46933] 46932 46933 46934 46935 46936 46937 46938 46939 46940 46941 46942 46943 #> [46945] 46944 46945 46946 46947 46948 46949 46950 46951 46952 46953 46954 46955 #> [46957] 46956 46957 46958 46959 46960 46961 46962 46963 46964 46965 46966 46967 #> [46969] 46968 46969 46970 46971 46972 46973 46974 46975 46976 46977 46978 46979 #> [46981] 46980 46981 46982 46983 46984 46985 46986 46987 46988 46989 46990 46991 #> [46993] 46992 46993 46994 46995 46996 46997 46998 46999 47000 47001 47002 47003 #> [47005] 47004 47005 47006 47007 47008 47009 47010 47011 47012 47013 47014 47015 #> [47017] 47016 47017 47018 47019 47020 47021 47022 47023 47024 47025 47026 47027 #> [47029] 47028 47029 47030 47031 47032 47033 47034 47035 47036 47037 47038 47039 #> [47041] 47040 47041 47042 47043 47044 47045 47046 47047 47048 47049 47050 47051 #> [47053] 47052 47053 47054 47055 47056 47057 47058 47059 47060 47061 47062 47063 #> [47065] 47064 47065 47066 47067 47068 47069 47070 47071 47072 47073 47074 47075 #> [47077] 47076 47077 47078 47079 47080 47081 47082 47083 47084 47085 47086 47087 #> [47089] 47088 47089 47090 47091 47092 47093 47094 47095 47096 47097 47098 47099 #> [47101] 47100 47101 47102 47103 47104 47105 47106 47107 47108 47109 47110 47111 #> [47113] 47112 47113 47114 47115 47116 47117 47118 47119 47120 47121 47122 47123 #> [47125] 47124 47125 47126 47127 47128 47129 47130 47131 47132 47133 47134 47135 #> [47137] 47136 47137 47138 47139 47140 47141 47142 47143 47144 47145 47146 47147 #> [47149] 47148 47149 47150 47151 47152 47153 47154 47155 47156 47157 47158 47159 #> [47161] 47160 47161 47162 47163 47164 47165 47166 47167 47168 47169 47170 47171 #> [47173] 47172 47173 47174 47175 47176 47177 47178 47179 47180 47181 47182 47183 #> [47185] 47184 47185 47186 47187 47188 47189 47190 47191 47192 47193 47194 47195 #> [47197] 47196 47197 47198 47199 47200 47201 47202 47203 47204 47205 47206 47207 #> [47209] 47208 47209 47210 47211 47212 47213 47214 47215 47216 47217 47218 47219 #> [47221] 47220 47221 47222 47223 47224 47225 47226 47227 47228 47229 47230 47231 #> [47233] 47232 47233 47234 47235 47236 47237 47238 47239 47240 47241 47242 47243 #> [47245] 47244 47245 47246 47247 47248 47249 47250 47251 47252 47253 47254 47255 #> [47257] 47256 47257 47258 47259 47260 47261 47262 47263 47264 47265 47266 47267 #> [47269] 47268 47269 47270 47271 47272 47273 47274 47275 47276 47277 47278 47279 #> [47281] 47280 47281 47282 47283 47284 47285 47286 47287 47288 47289 47290 47291 #> [47293] 47292 47293 47294 47295 47296 47297 47298 47299 47300 47301 47302 47303 #> [47305] 47304 47305 47306 47307 47308 47309 47310 47311 47312 47313 47314 47315 #> [47317] 47316 47317 47318 47319 47320 47321 47322 47323 47324 47325 47326 47327 #> [47329] 47328 47329 47330 47331 47332 47333 47334 47335 47336 47337 47338 47339 #> [47341] 47340 47341 47342 47343 47344 47345 47346 47347 47348 47349 47350 47351 #> [47353] 47352 47353 47354 47355 47356 47357 47358 47359 47360 47361 47362 47363 #> [47365] 47364 47365 47366 47367 47368 47369 47370 47371 47372 47373 47374 47375 #> [47377] 47376 47377 47378 47379 47380 47381 47382 47383 47384 47385 47386 47387 #> [47389] 47388 47389 47390 47391 47392 47393 47394 47395 47396 47397 47398 47399 #> [47401] 47400 47401 47402 47403 47404 47405 47406 47407 47408 47409 47410 47411 #> [47413] 47412 47413 47414 47415 47416 47417 47418 47419 47420 47421 47422 47423 #> [47425] 47424 47425 47426 47427 47428 47429 47430 47431 47432 47433 47434 47435 #> [47437] 47436 47437 47438 47439 47440 47441 47442 47443 47444 47445 47446 47447 #> [47449] 47448 47449 47450 47451 47452 47453 47454 47455 47456 47457 47458 47459 #> [47461] 47460 47461 47462 47463 47464 47465 47466 47467 47468 47469 47470 47471 #> [47473] 47472 47473 47474 47475 47476 47477 47478 47479 47480 47481 47482 47483 #> [47485] 47484 47485 47486 47487 47488 47489 47490 47491 47492 47493 47494 47495 #> [47497] 47496 47497 47498 47499 47500 47501 47502 47503 47504 47505 47506 47507 #> [47509] 47508 47509 47510 47511 47512 47513 47514 47515 47516 47517 47518 47519 #> [47521] 47520 47521 47522 47523 47524 47525 47526 47527 47528 47529 47530 47531 #> [47533] 47532 47533 47534 47535 47536 47537 47538 47539 47540 47541 47542 47543 #> [47545] 47544 47545 47546 47547 47548 47549 47550 47551 47552 47553 47554 47555 #> [47557] 47556 47557 47558 47559 47560 47561 47562 47563 47564 47565 47566 47567 #> [47569] 47568 47569 47570 47571 47572 47573 47574 47575 47576 47577 47578 47579 #> [47581] 47580 47581 47582 47583 47584 47585 47586 47587 47588 47589 47590 47591 #> [47593] 47592 47593 47594 47595 47596 47597 47598 47599 47600 47601 47602 47603 #> [47605] 47604 47605 47606 47607 47608 47609 47610 47611 47612 47613 47614 47615 #> [47617] 47616 47617 47618 47619 47620 47621 47622 47623 47624 47625 47626 47627 #> [47629] 47628 47629 47630 47631 47632 47633 47634 47635 47636 47637 47638 47639 #> [47641] 47640 47641 47642 47643 47644 47645 47646 47647 47648 47649 47650 47651 #> [47653] 47652 47653 47654 47655 47656 47657 47658 47659 47660 47661 47662 47663 #> [47665] 47664 47665 47666 47667 47668 47669 47670 47671 47672 47673 47674 47675 #> [47677] 47676 47677 47678 47679 47680 47681 47682 47683 47684 47685 47686 47687 #> [47689] 47688 47689 47690 47691 47692 47693 47694 47695 47696 47697 47698 47699 #> [47701] 47700 47701 47702 47703 47704 47705 47706 47707 47708 47709 47710 47711 #> [47713] 47712 47713 47714 47715 47716 47717 47718 47719 47720 47721 47722 47723 #> [47725] 47724 47725 47726 47727 47728 47729 47730 47731 47732 47733 47734 47735 #> [47737] 47736 47737 47738 47739 47740 47741 47742 47743 47744 47745 47746 47747 #> [47749] 47748 47749 47750 47751 47752 47753 47754 47755 47756 47757 47758 47759 #> [47761] 47760 47761 47762 47763 47764 47765 47766 47767 47768 47769 47770 47771 #> [47773] 47772 47773 47774 47775 47776 47777 47778 47779 47780 47781 47782 47783 #> [47785] 47784 47785 47786 47787 47788 47789 47790 47791 47792 47793 47794 47795 #> [47797] 47796 47797 47798 47799 47800 47801 47802 47803 47804 47805 47806 47807 #> [47809] 47808 47809 47810 47811 47812 47813 47814 47815 47816 47817 47818 47819 #> [47821] 47820 47821 47822 47823 47824 47825 47826 47827 47828 47829 47830 47831 #> [47833] 47832 47833 47834 47835 47836 47837 47838 47839 47840 47841 47842 47843 #> [47845] 47844 47845 47846 47847 47848 47849 47850 47851 47852 47853 47854 47855 #> [47857] 47856 47857 47858 47859 47860 47861 47862 47863 47864 47865 47866 47867 #> [47869] 47868 47869 47870 47871 47872 47873 47874 47875 47876 47877 47878 47879 #> [47881] 47880 47881 47882 47883 47884 47885 47886 47887 47888 47889 47890 47891 #> [47893] 47892 47893 47894 47895 47896 47897 47898 47899 47900 47901 47902 47903 #> [47905] 47904 47905 47906 47907 47908 47909 47910 47911 47912 47913 47914 47915 #> [47917] 47916 47917 47918 47919 47920 47921 47922 47923 47924 47925 47926 47927 #> [47929] 47928 47929 47930 47931 47932 47933 47934 47935 47936 47937 47938 47939 #> [47941] 47940 47941 47942 47943 47944 47945 47946 47947 47948 47949 47950 47951 #> [47953] 47952 47953 47954 47955 47956 47957 47958 47959 47960 47961 47962 47963 #> [47965] 47964 47965 47966 47967 47968 47969 47970 47971 47972 47973 47974 47975 #> [47977] 47976 47977 47978 47979 47980 47981 47982 47983 47984 47985 47986 47987 #> [47989] 47988 47989 47990 47991 47992 47993 47994 47995 47996 47997 47998 47999 #> [48001] 48000 48001 48002 48003 48004 48005 48006 48007 48008 48009 48010 48011 #> [48013] 48012 48013 48014 48015 48016 48017 48018 48019 48020 48021 48022 48023 #> [48025] 48024 48025 48026 48027 48028 48029 48030 48031 48032 48033 48034 48035 #> [48037] 48036 48037 48038 48039 48040 48041 48042 48043 48044 48045 48046 48047 #> [48049] 48048 48049 48050 48051 48052 48053 48054 48055 48056 48057 48058 48059 #> [48061] 48060 48061 48062 48063 48064 48065 48066 48067 48068 48069 48070 48071 #> [48073] 48072 48073 48074 48075 48076 48077 48078 48079 48080 48081 48082 48083 #> [48085] 48084 48085 48086 48087 48088 48089 48090 48091 48092 48093 48094 48095 #> [48097] 48096 48097 48098 48099 48100 48101 48102 48103 48104 48105 48106 48107 #> [48109] 48108 48109 48110 48111 48112 48113 48114 48115 48116 48117 48118 48119 #> [48121] 48120 48121 48122 48123 48124 48125 48126 48127 48128 48129 48130 48131 #> [48133] 48132 48133 48134 48135 48136 48137 48138 48139 48140 48141 48142 48143 #> [48145] 48144 48145 48146 48147 48148 48149 48150 48151 48152 48153 48154 48155 #> [48157] 48156 48157 48158 48159 48160 48161 48162 48163 48164 48165 48166 48167 #> [48169] 48168 48169 48170 48171 48172 48173 48174 48175 48176 48177 48178 48179 #> [48181] 48180 48181 48182 48183 48184 48185 48186 48187 48188 48189 48190 48191 #> [48193] 48192 48193 48194 48195 48196 48197 48198 48199 48200 48201 48202 48203 #> [48205] 48204 48205 48206 48207 48208 48209 48210 48211 48212 48213 48214 48215 #> [48217] 48216 48217 48218 48219 48220 48221 48222 48223 48224 48225 48226 48227 #> [48229] 48228 48229 48230 48231 48232 48233 48234 48235 48236 48237 48238 48239 #> [48241] 48240 48241 48242 48243 48244 48245 48246 48247 48248 48249 48250 48251 #> [48253] 48252 48253 48254 48255 48256 48257 48258 48259 48260 48261 48262 48263 #> [48265] 48264 48265 48266 48267 48268 48269 48270 48271 48272 48273 48274 48275 #> [48277] 48276 48277 48278 48279 48280 48281 48282 48283 48284 48285 48286 48287 #> [48289] 48288 48289 48290 48291 48292 48293 48294 48295 48296 48297 48298 48299 #> [48301] 48300 48301 48302 48303 48304 48305 48306 48307 48308 48309 48310 48311 #> [48313] 48312 48313 48314 48315 48316 48317 48318 48319 48320 48321 48322 48323 #> [48325] 48324 48325 48326 48327 48328 48329 48330 48331 48332 48333 48334 48335 #> [48337] 48336 48337 48338 48339 48340 48341 48342 48343 48344 48345 48346 48347 #> [48349] 48348 48349 48350 48351 48352 48353 48354 48355 48356 48357 48358 48359 #> [48361] 48360 48361 48362 48363 48364 48365 48366 48367 48368 48369 48370 48371 #> [48373] 48372 48373 48374 48375 48376 48377 48378 48379 48380 48381 48382 48383 #> [48385] 48384 48385 48386 48387 48388 48389 48390 48391 48392 48393 48394 48395 #> [48397] 48396 48397 48398 48399 48400 48401 48402 48403 48404 48405 48406 48407 #> [48409] 48408 48409 48410 48411 48412 48413 48414 48415 48416 48417 48418 48419 #> [48421] 48420 48421 48422 48423 48424 48425 48426 48427 48428 48429 48430 48431 #> [48433] 48432 48433 48434 48435 48436 48437 48438 48439 48440 48441 48442 48443 #> [48445] 48444 48445 48446 48447 48448 48449 48450 48451 48452 48453 48454 48455 #> [48457] 48456 48457 48458 48459 48460 48461 48462 48463 48464 48465 48466 48467 #> [48469] 48468 48469 48470 48471 48472 48473 48474 48475 48476 48477 48478 48479 #> [48481] 48480 48481 48482 48483 48484 48485 48486 48487 48488 48489 48490 48491 #> [48493] 48492 48493 48494 48495 48496 48497 48498 48499 48500 48501 48502 48503 #> [48505] 48504 48505 48506 48507 48508 48509 48510 48511 48512 48513 48514 48515 #> [48517] 48516 48517 48518 48519 48520 48521 48522 48523 48524 48525 48526 48527 #> [48529] 48528 48529 48530 48531 48532 48533 48534 48535 48536 48537 48538 48539 #> [48541] 48540 48541 48542 48543 48544 48545 48546 48547 48548 48549 48550 48551 #> [48553] 48552 48553 48554 48555 48556 48557 48558 48559 48560 48561 48562 48563 #> [48565] 48564 48565 48566 48567 48568 48569 48570 48571 48572 48573 48574 48575 #> [48577] 48576 48577 48578 48579 48580 48581 48582 48583 48584 48585 48586 48587 #> [48589] 48588 48589 48590 48591 48592 48593 48594 48595 48596 48597 48598 48599 #> [48601] 48600 48601 48602 48603 48604 48605 48606 48607 48608 48609 48610 48611 #> [48613] 48612 48613 48614 48615 48616 48617 48618 48619 48620 48621 48622 48623 #> [48625] 48624 48625 48626 48627 48628 48629 48630 48631 48632 48633 48634 48635 #> [48637] 48636 48637 48638 48639 48640 48641 48642 48643 48644 48645 48646 48647 #> [48649] 48648 48649 48650 48651 48652 48653 48654 48655 48656 48657 48658 48659 #> [48661] 48660 48661 48662 48663 48664 48665 48666 48667 48668 48669 48670 48671 #> [48673] 48672 48673 48674 48675 48676 48677 48678 48679 48680 48681 48682 48683 #> [48685] 48684 48685 48686 48687 48688 48689 48690 48691 48692 48693 48694 48695 #> [48697] 48696 48697 48698 48699 48700 48701 48702 48703 48704 48705 48706 48707 #> [48709] 48708 48709 48710 48711 48712 48713 48714 48715 48716 48717 48718 48719 #> [48721] 48720 48721 48722 48723 48724 48725 48726 48727 48728 48729 48730 48731 #> [48733] 48732 48733 48734 48735 48736 48737 48738 48739 48740 48741 48742 48743 #> [48745] 48744 48745 48746 48747 48748 48749 48750 48751 48752 48753 48754 48755 #> [48757] 48756 48757 48758 48759 48760 48761 48762 48763 48764 48765 48766 48767 #> [48769] 48768 48769 48770 48771 48772 48773 48774 48775 48776 48777 48778 48779 #> [48781] 48780 48781 48782 48783 48784 48785 48786 48787 48788 48789 48790 48791 #> [48793] 48792 48793 48794 48795 48796 48797 48798 48799 48800 48801 48802 48803 #> [48805] 48804 48805 48806 48807 48808 48809 48810 48811 48812 48813 48814 48815 #> [48817] 48816 48817 48818 48819 48820 48821 48822 48823 48824 48825 48826 48827 #> [48829] 48828 48829 48830 48831 48832 48833 48834 48835 48836 48837 48838 48839 #> [48841] 48840 48841 48842 48843 48844 48845 48846 48847 48848 48849 48850 48851 #> [48853] 48852 48853 48854 48855 48856 48857 48858 48859 48860 48861 48862 48863 #> [48865] 48864 48865 48866 48867 48868 48869 48870 48871 48872 48873 48874 48875 #> [48877] 48876 48877 48878 48879 48880 48881 48882 48883 48884 48885 48886 48887 #> [48889] 48888 48889 48890 48891 48892 48893 48894 48895 48896 48897 48898 48899 #> [48901] 48900 48901 48902 48903 48904 48905 48906 48907 48908 48909 48910 48911 #> [48913] 48912 48913 48914 48915 48916 48917 48918 48919 48920 48921 48922 48923 #> [48925] 48924 48925 48926 48927 48928 48929 48930 48931 48932 48933 48934 48935 #> [48937] 48936 48937 48938 48939 48940 48941 48942 48943 48944 48945 48946 48947 #> [48949] 48948 48949 48950 48951 48952 48953 48954 48955 48956 48957 48958 48959 #> [48961] 48960 48961 48962 48963 48964 48965 48966 48967 48968 48969 48970 48971 #> [48973] 48972 48973 48974 48975 48976 48977 48978 48979 48980 48981 48982 48983 #> [48985] 48984 48985 48986 48987 48988 48989 48990 48991 48992 48993 48994 48995 #> [48997] 48996 48997 48998 48999 49000 49001 49002 49003 49004 49005 49006 49007 #> [49009] 49008 49009 49010 49011 49012 49013 49014 49015 49016 49017 49018 49019 #> [49021] 49020 49021 49022 49023 49024 49025 49026 49027 49028 49029 49030 49031 #> [49033] 49032 49033 49034 49035 49036 49037 49038 49039 49040 49041 49042 49043 #> [49045] 49044 49045 49046 49047 49048 49049 49050 49051 49052 49053 49054 49055 #> [49057] 49056 49057 49058 49059 49060 49061 49062 49063 49064 49065 49066 49067 #> [49069] 49068 49069 49070 49071 49072 49073 49074 49075 49076 49077 49078 49079 #> [49081] 49080 49081 49082 49083 49084 49085 49086 49087 49088 49089 49090 49091 #> [49093] 49092 49093 49094 49095 49096 49097 49098 49099 49100 49101 49102 49103 #> [49105] 49104 49105 49106 49107 49108 49109 49110 49111 49112 49113 49114 49115 #> [49117] 49116 49117 49118 49119 49120 49121 49122 49123 49124 49125 49126 49127 #> [49129] 49128 49129 49130 49131 49132 49133 49134 49135 49136 49137 49138 49139 #> [49141] 49140 49141 49142 49143 49144 49145 49146 49147 49148 49149 49150 49151 #> [49153] 49152 49153 49154 49155 49156 49157 49158 49159 49160 49161 49162 49163 #> [49165] 49164 49165 49166 49167 49168 49169 49170 49171 49172 49173 49174 49175 #> [49177] 49176 49177 49178 49179 49180 49181 49182 49183 49184 49185 49186 49187 #> [49189] 49188 49189 49190 49191 49192 49193 49194 49195 49196 49197 49198 49199 #> [49201] 49200 49201 49202 49203 49204 49205 49206 49207 49208 49209 49210 49211 #> [49213] 49212 49213 49214 49215 49216 49217 49218 49219 49220 49221 49222 49223 #> [49225] 49224 49225 49226 49227 49228 49229 49230 49231 49232 49233 49234 49235 #> [49237] 49236 49237 49238 49239 49240 49241 49242 49243 49244 49245 49246 49247 #> [49249] 49248 49249 49250 49251 49252 49253 49254 49255 49256 49257 49258 49259 #> [49261] 49260 49261 49262 49263 49264 49265 49266 49267 49268 49269 49270 49271 #> [49273] 49272 49273 49274 49275 49276 49277 49278 49279 49280 49281 49282 49283 #> [49285] 49284 49285 49286 49287 49288 49289 49290 49291 49292 49293 49294 49295 #> [49297] 49296 49297 49298 49299 49300 49301 49302 49303 49304 49305 49306 49307 #> [49309] 49308 49309 49310 49311 49312 49313 49314 49315 49316 49317 49318 49319 #> [49321] 49320 49321 49322 49323 49324 49325 49326 49327 49328 49329 49330 49331 #> [49333] 49332 49333 49334 49335 49336 49337 49338 49339 49340 49341 49342 49343 #> [49345] 49344 49345 49346 49347 49348 49349 49350 49351 49352 49353 49354 49355 #> [49357] 49356 49357 49358 49359 49360 49361 49362 49363 49364 49365 49366 49367 #> [49369] 49368 49369 49370 49371 49372 49373 49374 49375 49376 49377 49378 49379 #> [49381] 49380 49381 49382 49383 49384 49385 49386 49387 49388 49389 49390 49391 #> [49393] 49392 49393 49394 49395 49396 49397 49398 49399 49400 49401 49402 49403 #> [49405] 49404 49405 49406 49407 49408 49409 49410 49411 49412 49413 49414 49415 #> [49417] 49416 49417 49418 49419 49420 49421 49422 49423 49424 49425 49426 49427 #> [49429] 49428 49429 49430 49431 49432 49433 49434 49435 49436 49437 49438 49439 #> [49441] 49440 49441 49442 #>  #> [[6]] #>     [1]    19    23    26    51    82   142   205   228   373   379   519   615 #>    [13]   796   824   977  1011  1043  1229  1261  2006  2066  2121  2294  2537 #>    [25]  2581  2633  2703  2937  3848  3880  4209  4408  4769  5324  5447  5667 #>    [37]  6144  6550  6630  6887  7316  7401  7447  7882  8085  9140  9899 10872 #>    [49] 12521 13203 14827 15030 15242 15499 15661 16298 16660 18477 18666 19549 #>    [61] 20542 20993 21135 21400 23364 23632 24151 24423 24697 25671 25961 26440 #>    [73] 28358 28754 28902 29206 29428 30026 30106 30669 32138 32285 32604 33036 #>    [85] 33763 33992 34457 34865 37740 38339 39016 41248 41345 41539 42520 42607 #>    [97] 43047 43595 43973 45319 45407 45681 46597 47299 47616 48493     0    60 #>   [109]    76    83    89   151   161   172   272   302   330   380   471   582 #>   [121]   644   772   797  1462  2007  2122  2353  2406  2509  3093  3209  3361 #>   [133]  3530  3613  3640  4236  4640  4735  4927  5353  5386  5791  5866  6778 #>   [145]  7598  7675  7918  8676  8851 10000 10369 11202 12037 12465 12686 12733 #>   [157] 12784 14391 14712 14768 15776 16175 16237 16602 18156 18283 18610 18784 #>   [169] 19080 20661 21828 22043 22826 24563 24834 25052 25115 25253 25395 26030 #>   [181] 26284 26640 27751 28521 30417 30971 31544 32516 32691 32786 32958 34866 #>   [193] 36236 37199 39130 39569 39660 40956 41879 42074 42521 43150 44464 45214 #>   [205] 45957 46514 48937     4     8    61    64    77   105   292   456   483 #>   [217]   625   652  1071  1146  1189  1262  1295  1571  1603  1965  2141  2538 #>   [229]  3050  3341  3495  3531  3641  3749  4177  4613  4641  4928  5696  5867 #>   [241]  5969  6475  9236  9638 10001 10921 11393 11774 12466 12522 12581 13535 #>   [253] 14028 14069 15722 15870 15993 18546 18848 19794 20596 20662 20863 21336 #>   [265] 21456 22247 22827 24152 25672 25962 29359 30271 30593 32213 32286 32517 #>   [277] 32692 32959 33201 33354 33585 33924 38417 38587 39131 40182 40446 41428 #>   [289] 42522 43326 43689 45215 45862 46412 46515 46707 47404 48494 48938     1 #>   [301]     2    24    27    29    31    78    93   152   206   212   261   323 #>   [313]   435   461   472   589   645   667   683   695   783   903   923   965 #>   [325]   978  1326  1340  1742  2295  2552  3001  3235  3280  4378  4438  4468 #>   [337]  4953  5016  5256  5480  7005  7039  7252  7317  7642  7985  8639 10093 #>   [349] 10370 10815 11394 11775 11834 12128 13160 13696 13906 15078 15777 15871 #>   [361] 16238 16901 18157 18785 19133 19734 20048 21276 22187 22248 22315 22673 #>   [373] 22828 23022 24002 24079 24153 25116 25963 26363 26641 26797 27063 27596 #>   [385] 27915 27997 28136 29061 29875 31363 31834 32052 32787 32960 34324 36237 #>   [397] 36864 37658 38762 41161 41540 42967 45863 45958 46219 47086 48815    13 #>   [409]    20    35    43    54    65   153   324   381   496   633   703   904 #>   [421]   924   938   979   995  1054  1478  1589  1604  1775  2101  2375  2957 #>   [433]  3183  3236  3301  3957  4210  4237  4263  4614  4736  4929  4978  5108 #>   [445]  5198  5229  5761  6012  6082  6204  7277  7354  7986  8405  8936  8977 #>   [457]  9098  9280  9410  9460  9502  9857 10566 10604 10727 11307 12129 12631 #>   [469] 13161 13536 13750 14070 14496 14552 15872 15933 16120 16427 16731 17588 #>   [481] 17775 20597 21212 23420 24969 25964 26087 26719 26798 27133 27835 28359 #>   [493] 28443 29138 31287 32518 32788 34867 35724 37043 37829 39738 40087 42166 #>   [505] 42523 43151 44066 44371 44643 44945 45864 46220 46708 47087 47194 47617 #>   [517] 47717 49036     6    30    36    52    72    90    95   162   284   359 #>   [529]   386   426   634   684   939  1206  1308  1550  1645  1726  1743  2067 #>   [541]  2159  2251  2465  2539  2553  2752  2775  2938  3342  3382  3440  4097 #>   [553]  4238  4293  4439  4469  4557  4642  5109  5296  6853  7318  7448  7530 #>   [565]  7572  7599  7883  7919  8086  9099  9190 10605 10728 11008 11098 12408 #>   [577] 12837 13041 13368 13434 13697 15079 15723 16299 16732 16848 17282 17533 #>   [589] 17949 18412 18849 19024 20921 21457 21650 22527 22891 23487 23633 23866 #>   [601] 24080 24217 24767 24835 25535 29588 29798 30027 30194 31145 31218 31909 #>   [613] 32053 33274 33668 34081 34544 34868 35034 35547 36051 36577 37044 41880 #>   [625] 46221 46803 47924 48303    10    21    44   136   143   213   351   457 #>   [637]   497   507   603   616   798   881   905  1388  1590  1928  2008  2048 #>   [649]  2486  2753  3119  3532  3981  4294  4558  5257  5970  6505  7040  7449 #>   [661]  7490  7600  8087  8128  9237  9281  9411  9639 10002 10094 10175 10261 #>   [673] 10691 10816 11153 11835 12083 12175 12226 12785 12886 13369 13751 15724 #>   [685] 16055 16121 16661 17950 18030 18413 18850 18977 19485 19735 22750 22829 #>   [697] 23421 23724 23939 24698 25965 26088 27220 27752 27916 29139 30594 30670 #>   [709] 30810 31835 32433 33993 35206 35963 37741 38089 38588 39999 40088 41162 #>   [721] 41346 42075 45408 46140 46318 47512     3     7    38   176   181   255 #>   [733]   303   418   462   557   727   882  1012  1129  1178  1217  1327  1341 #>   [745]  1430  1551  1776  2540  3075  3469  3692  3928  4496  4770  4804  5078 #>   [757]  5325  6013  6341  6448  6551  6592  6817  7531  7770  7802  8355  8601 #>   [769]  8852  9056  9412  9461  9640 10003 10134 10176 10262 11009 11395 11987 #>   [781] 13094 13304 14553 14593 15452 15934 16603 17345 17840 18284 18786 19425 #>   [793] 19848 20102 22044 24291 24424 24699 26224 26799 27365 27435 27836 28282 #>   [805] 29516 30028 30107 30195 30595 30671 30745 30888 31458 31545 32287 32350 #>   [817] 33121 33586 33669 33764 35373 36408 37045 37302 38004 39390 40000 40089 #>   [829] 41541 42440 42696 42968 44560 45593 45762 46222 46900 47405 48108     5 #>   [841]     9    11    41    45   100   118   144   163   177   237   247   273 #>   [853]   304   342   395   520   540   558   635   883  1147  1190  1207  1247 #>   [865]  2142  2407  2510  3026  3496  3614  3881  4178  4440  5079  5258  5387 #>   [877]  5481  6449  6818  6888  6961  7070  8168  8816 10135 10474 10513 11055 #>   [889] 11099 11396 11568 11836 12409 13305 14713 15134 15560 16176 16662 17098 #>   [901] 18478 19134 19366 20229 20285 20543 21136 21277 21337 22751 23023 23158 #>   [913] 23305 23422 25748 26864 27511 27917 28221 28360 28444 28600 29207 29722 #>   [925] 29876 31061 32139 32605 32789 32961 33202 35289 35628 35725 36238 36509 #>   [937] 38180 39570 41791 41881 42608 43245 43873 44946 45500   164   238   293 #>   [949]   408   547   617   784  1230  1309  2541  2605  2754  2873  3383  4067 #>   [961]  4098  4470  4615  4705  4737  5259  5420  6962  7134  7355  7532  7643 #>   [973]  8748  8895  9503  9766 10049 10095 10418 10651 10692 10922 11888 12367 #>   [985] 12786 13485 14344 14828 15080 15401 15612 15935 16366 16479 17346 17413 #>   [997] 18285 18479 18667 18978 20401 20598 21579 22188 22528 22752 23024 24425 #>  [1009] 24564 25254 25536 26285 27436 27667 27998 28903 29062 29429 29877 31146 #>  [1021] 31219 31619 32054 32214 33355 34545 35374 35456 36960 39912 40001 40957 #>  [1033] 42868 43874 44165 44372 45216 46709    40    66   248   274   484   548 #>  [1045]   906  1130  1208  1362  1406  1688  1727  1792  2068  2606  2840  3693 #>  [1057]  3750  4033  4523  4706  5048  5080  5569  6048  6234  6271  6593  6740 #>  [1069]  7135  7176  7278  7601  7920  8020  8853  9504 10967 11259 11484 11678 #>  [1081] 12130 12687 13204 13260 13537 13967 14968 15081 15243 15500 15613 18851 #>  [1093] 19621 19736 19849 20165 20864 20994 21401 21510 21764 22593 23025 24292 #>  [1105] 24700 24898 25673 25966 26364 26508 27064 27134 29286 30746 31062 31288 #>  [1117] 33356 34617 35290 36052 37742 38501 38589 39132 40864 41249 42076 42609 #>  [1129] 43327 44260 45409 45763 45959 46223 46901 47195 47618 48304 48404 48939 #>  [1141] 49037    12    14    17    46   145   156   207   294   305   396   403 #>  [1153]   646   728   925  1328  1668  1839  2009  2408  2439  2466  2894  3076 #>  [1165]  3324  3384  3556  3773  3958  4353  4856  5514  6083  6342  6854  7253 #>  [1177]  7491  7771  8714  8896  8978  9018  9282  9326  9505  9548 10693 11569 #>  [1189] 11732 12787 13162 13306 14227 15994 16122 16367 17019 18350 18787 19983 #>  [1201] 20166 20286 21765 21890 21970 22045 22118 22674 23026 23159 23634 24218 #>  [1213] 24293 24426 24565 24701 24836 25053 26642 27297 27366 28828 29208 29649 #>  [1225] 30672 33203 33587 35118 35457 36053 37046 37914 38340 39133 40958 41163 #>  [1237] 42354 43780 47718 48405 48615 48816    55    84   101   113   124   137 #>  [1249]   190   194   311   419   473   559   604   785   884   907   926  1148 #>  [1261]  1231  1296  2085  2160  2179  2232  2252  2409  2634  3302  3441  3497 #>  [1273]  3717  4034  4264  4409  4582  5326  5388  5421  5792  6108  6594  7071 #>  [1285]  7104  7214  7319  7602  7884  8436  8749 10136 10177 11353 12368 12887 #>  [1297] 13042 13095 13205 13968 14714 14871 15031 15402 16123 16480 17589 17951 #>  [1309] 18668 18788 19486 20167 21060 23104 23566 23635 25054 25184 25611 27135 #>  [1321] 27298 27367 28283 28522 28829 30747 30811 31147 31973 32519 33422 35629 #>  [1333] 36054 37303 37394 37478 37915 38341 38763 39661 40865 41164 41429 42258 #>  [1345] 42969 43415 43690 43974 44166 44644 44841 47406 48030 48817    67    91 #>  [1357]    96   127   188   572   583   837   852  1025  1102  1115  1280  1527 #>  [1369]  1646  1828  2049  2086  2102  2123  2680  2913  3670  3774  4295  5515 #>  [1381]  5570  6014  6109  6419  6889  7215  7573  7837  8715 10050 13206 13698 #>  [1393] 14554 15082 15995 17020 17721 17841 19487 19914 20168 21714 22046 22249 #>  [1405] 23725 23867 25255 26509 26643 27753 28523 30673 31063 31910 32790 33037 #>  [1417] 34699 35888 36671 36768 37479 39017 39391 39739 39827 41882 43246 43781 #>  [1429] 44744 45764 46804 48940    15    18    32    37    49   195   208   275 #>  [1441]   352   360   463   498   521   605   696   863   966  1026  1179  1552 #>  [1453]  1754  1793  1860  2010  2188  2653  3027  3094  3412  3498  4035  4211 #>  [1465]  4583  5230  5832  5971  6306  7216  7838  8278  8316  8979  9364  9720 #>  [1477]  9900 10419 11936 12227 13538 14228 14283 14555 15135 15353 15996 16663 #>  [1489] 17099 17534 17590 18031 18669 18852 20340 21213 21651 22957 25820 26720 #>  [1501] 26865 26984 27136 27597 27918 28524 29517 30272 31148 31364 33204 33670 #>  [1513] 34771 35035 35291 35375 35889 37200 38590 39308 39478 40090 40183 40275 #>  [1525] 40540 41055 41250 42355 42970 43416 44167 48109 49240    47    56   102 #>  [1537]   343   404   427   522   560   743   762   864  1027  1044  1072  1116 #>  [1549]  1232  1349  1591  1881  2028  2161  2276  2681  2704  2776  3002  3325 #>  [1561]  3584  3882  4379  4441  4471  5549  5636  5762  6049  6779  7533  7921 #>  [1573]  8200  8279  8487  8716  8817  8854  9593 10325 10771 10968 11437 11485 #>  [1585] 11622 12131 12632 13207 13752 14715 15778 15873 16124 16368 16664 17218 #>  [1597] 17283 19302 19622 19984 22830 23726 23940 24081 24504 25185 25396 25674 #>  [1609] 26286 26510 27065 27299 27668 29140 29287 29941 30889 31620 31911 34082 #>  [1621] 34388 36409 36865 37830 38851 39018 40959 41251 41542 41883 42077 42778 #>  [1633] 42869 43975 44465 45041 45320 45594 47196 47828 48708 49142 49342    62 #>  [1645]   209   239   420   474   590   786   813  1013  1045  1055  1161  1263 #>  [1657]  1572  1840  2087  2143  2189  2554  3303  3557  3671  4128  4265  4296 #>  [1669]  4472  4891  5110  5231  5601  5738  6205  7072  7356  7402  7534  7803 #>  [1681]  9462  9506  9721 10051 10221 10420 11570 11623 11837 11937 12369 12410 #>  [1693] 12523 12582 13096 13435 13539 15501 15662 16300 16787 17842 18547 18789 #>  [1705] 21214 21278 22529 24003 24505 24899 26031 26089 27919 28284 28525 30674 #>  [1717] 30812 32606 32693 32869 33122 33205 33765 33925 34955 35207 35630 35964 #>  [1729] 36866 37916 38935 39019 40447 40780 41165 41979 43048 43328 45410 47513 #>  [1741] 48110 48616 48709    22    87   165   196   218   405   436   464   814 #>  [1753]   865   885  1117  1233  1407  1431  1511  1755  2144  2325  2410  2777 #>  [1765]  2980  3003  3499  3959  4036  4179  5297  5389  5668  6235  6741  6890 #>  [1777]  8317  8488  8717  8980  9019  9283 10475 10772 11354 12038 12084 12228 #>  [1789] 12320 14170 14594 14969 15032 15083 15725 16481 17347 17722 17952 18091 #>  [1801] 18670 19367 19426 19550 20287 21652 21715 22753 22892 23227 23636 26287 #>  [1813] 26365 26721 27920 28830 29360 30108 30196 31546 31621 32055 35458 36769 #>  [1825] 36867 38418 38591 42356 42779 43782 49143 49343    16    28    68   166 #>  [1837]   219   240   318   448   715   908  1162  1248  1647  1794  1966  2124 #>  [1849]  2511  2874  2981  3004  3051  3533  3751  4008  4152  4671  4857  5637 #>  [1861]  6920  7492  8318  8489 10096 10476 10652 10773 12039 12940 13043 13307 #>  [1873] 13589 14392 14872 14916 15305 15614 18092 18351 19915 20544 20663 20922 #>  [1885] 21716 23567 24768 26722 26985 27999 28904 29288 31753 32434 32870 33588 #>  [1897] 34700 34869 34956 35376 36055 37659 38090 39134 39309 40960 41166 41252 #>  [1909] 41710 42780 43503 44842 45501 45960 46598 46805 48941 49344    25   114 #>  [1921]   128   256   344   421   523   528   549   685   735   763   815  1131 #>  [1933]  1191  1249  1498  1573  1947  1985  2582  2607  2958  3500  4239  4410 #>  [1945]  4825  5017  5111  5260  5354  6272  6450  6506  6819  7073  7136  7574 #>  [1957]  7644  8129  9057  9191  9813 10178 10817 11010 11624 13097 14873 15084 #>  [1969] 15244 16056 16301 16902 18352 19368 19551 19916 20469 20664 21215 21971 #>  [1981] 22047 22189 23868 24294 24506 25466 26366 26511 27837 28071 28601 29289 #>  [1993] 29878 30029 31149 31220 32140 32791 32962 33847 34870 35459 36770 37047 #>  [2005] 38005 39135 40002 43247 44261 44645 44843 47300    48    57    73    94 #>  [2017]   138   157   210   266   406   428   465   529   541   653   686   799 #>  [2029]   927  1046  1056  1218  1264  1659  1861  1882  1948  2011  2277  2841 #>  [2041]  2914  3120  3184  3256  3304  3326  3775  4068  4354  4497  4858  5143 #>  [2053]  5327  6236  6273  6714  6742  7320  7450  8130  8319  8818  8897 10326 #>  [2065] 11154 11203 11679 11733 12370 12411 12888 13098 14229 14657 15185 16538 #>  [2077] 16965 17100 17157 17535 17591 17645 19369 20288 22048 22190 23105 23802 #>  [2089] 24219 24566 24620 24970 25749 26288 26577 27137 28677 28755 29209 29518 #>  [2101] 30675 30972 31365 33357 33423 33671 33766 33994 34083 34458 35036 35460 #>  [2113] 36868 36961 37395 37480 37660 39136 39392 40781 41056 41430 42167 42524 #>  [2125] 42781 42870 44168 44646 46413 47301 47719 47925 49241    39    58   119 #>  [2137]   139   158   197   220   229   241   285   361   475   485   508   716 #>  [2149]   764   800   825   838   853   866   886   940  1118  1132  1149  1265 #>  [2161]  1329  1929  2326  2376  2959  3028  3095  3470  3694  3752  3793  5081 #>  [2173]  5169  5571  5901  5972  6206  8169  8406  8640  8855  9365  9678 10137 #>  [2185] 10263 10327 10653 10818 11680 11734 12132 12941 13370 14393 14497 15186 #>  [2197] 15726 16733 16788 16903 17646 18093 18548 19081 19488 21511 21766 21829 #>  [2209] 21891 23306 23869 24082 24507 24971 25537 25750 25967 27838 28602 29361 #>  [2221] 29799 29942 30197 32056 32435 33038 34389 35890 36510 38181 38764 39571 #>  [2233] 40782 41057 41167 42259 43596 45132 45765 45961 47407 47829    33    79 #>  [2245]   120   407   591   636   867   953   967   996  1073  1085  1133  1192 #>  [2257]  1420  1479  1499  1812  2088  2253  2278  3906  4099  4153  4442  5049 #>  [2269]  5199  5328  5550  5973  6476  6552  6743  6963  7217  7603  7729  7922 #>  [2281]  8750  9767  9814 10328 10421 11438 11625 13486 13969 14394 15085 15936 #>  [2293] 16482 17101 17647 19427 20049 20599 21972 22594 24154 25256 25675 25891 #>  [2305] 27512 27839 27921 28445 29430 30273 32351 32792 33123 34325 34546 35037 #>  [2317] 36056 37396 39572 39913 40276 41884 43329 43417 43875 45595 47408 47830 #>  [2329] 49242   106   115   129   276   286   331   409   573   736  1014  1266 #>  [2341]  1408  1463  1669  1986  2327  2411  2583  2654  2807  2875  3029  3385 #>  [2353]  3718  3776  4037  4707  4738  5572  5669  5697  6207  6451  6477  6780 #>  [2365]  6820  6891  7006  7254  7804  8088  8280  8356  8856  9327 10264 10477 #>  [2377] 11100 11260 11681 11776 11838 12133 12286 12321 13371 13699 13907 14230 #>  [2389] 14556 15561 16904 17592 17648 17843 18032 18227 18414 19025 19135 19247 #>  [2401] 19737 20995 23228 23488 23568 24508 24900 25055 25467 26578 27669 28603 #>  [2413] 28678 29063 29210 29650 29723 30030 31754 31836 31974 32352 32694 33358 #>  [2425] 33672 34326 34547 34701 35038 35548 36317 36410 38419 38671 38936 40184 #>  [2437] 40783 41616 42260 44262 45411 46224 47926 48406 48942    69   103   107 #>  [2449]   173   230   486   542   618   637   697  1180  1389  1574  1862  2682 #>  [2461]  2939  2960  3237  3327  4323  4380  5602  5638  5940  5974  6172  6274 #>  [2473]  6595  6631  6673  6821  7575  7805  7987  8201  8857  9549  9768 10265 #>  [2485] 10422 10654 11355 11486 11777 12229 13970 14029 14231 14498 15562 15727 #>  [2497] 15779 16239 16604 17021 17723 18549 19428 20545 21338 21830 22250 23160 #>  [2509] 24004 24083 25186 25676 26644 26866 26986 28072 29589 29943 32141 33039 #>  [2521] 33424 34327 34618 34702 34871 35208 35631 36411 37661 37831 37917 38182 #>  [2533] 40091 41792 44844 45865 48031 48111 48943    34    59    70    74    80 #>  [2545]   121   167   198  1134  1150  1281  1648  1899  1949  2180  2190  2254 #>  [2557]  2279  2412  2755  3077  3096  3642  4381  4616  4892  5200  5261  5355 #>  [2569]  5698  5739  6084  6307  6478  7576  7923  8233  8281  8528  8677  9769 #>  [2581]  9901 10179 11487 11682 12230 12371 12583 15033 15937 17022 17414 17649 #>  [2593] 17905 18480 20923 22119 23106 23727 24427 24567 24621 24901 25468 25677 #>  [2605] 25892 26723 28000 28756 29141 29879 30489 31064 31289 31680 32353 33359 #>  [2617] 34459 35292 35461 36146 39020 40367 40448 41253 41793 41980 43049 43691 #>  [2629] 44947 45502 46599 47088 47409 49038    81   159   221   231   332   397 #>  [2641]   437   592   654   698   704  1028  1151  1310  1390  1448  1553  1617 #>  [2653]  1863  1883  1900  2069  2103  2209  2354  2467  2487  2512  2705  2829 #>  [2665]  3078  3442  3643  3695  3929  4979  5639  5740  5793  5833  6015  6507 #>  [2677]  7321  7952  8320  9366 10694 11571 11778 11988 12085 12584 12633 13308 #>  [2689] 14345 15306 16905 17906 17953 18228 19136 19192 19850 20289 20341 20600 #>  [2701] 22049 23229 24220 24359 24428 25469 26441 26724 27066 28137 28446 30676 #>  [2713] 30748 30973 31150 33206 33275 33673 33926 34772 35209 35803 36318 39021 #>  [2725] 39662 41058 41347 41794 42441 44169 46414 48208 48495    53    97   108 #>  [2737]   130   232   249   574   655   705   717   826   854   887   941  1015 #>  [2749]  1086  1267  1282  1378  1464  1670  1689  1777  2029  2050  2162  2210 #>  [2761]  2328  2655  2940  3121  4180  4382  4524  4617  5356  5573  6237  6715 #>  [2773]  6822  7403  7604  7772  8021 10180 10266 11204 12788 12889 14071 14346 #>  [2785] 14395 14769 14829 15354 15780 15938 16057 16665 17102 17219 18033 18727 #>  [2797] 19738 19917 20050 20169 21767 21892 22754 23230 24295 24972 25538 26225 #>  [2809] 26512 27670 28604 29064 29211 29590 29800 30109 30813 30890 31290 31547 #>  [2821] 32607 32871 34390 34548 34773 36239 37122 37304 37570 39310 39740 40631 #>  [2833] 40784 41254 41711 42525 44263 46600 47089 47927 48305    42    71   222 #>  [2845]   295   306   438   656   668   744   888   909  1047  1103  1841  1930 #>  [2857]  2211  2730  3052  3154  3413  3672  3696  3883  4181  4672  4930  5640 #>  [2869]  6050  6145  6508  7645  7806  9284  9463  9550 10567 10819 11011 11205 #>  [2881] 11626 13540 13700 14123 14595 15615 15663 15997 16058 17474 18611 19429 #>  [2893] 20051 20470 21580 21768 22120 23027 24221 24702 24902 25678 25751 27513 #>  [2905] 27671 30198 32963 33767 33995 34170 34391 36578 36771 38852 46601 48112 #>  [2917] 48407 48818 48944    85   140   199   223   262   296   335   410   429 #>  [2929]   487   543   550   669   816   928  1363  1449  1528  1744  2030  2488 #>  [2941]  2842  2961  3238  3907  3982  4038  4297  4411  4473  4643  6173  6238 #>  [2953]  6275  6823  8131  8234  9594 10138 10923 11101 11155 12040 12585 12942 #>  [2965] 14658 15453 16483 16666 17023 17650 18229 18550 19248 19303 19552 20230 #>  [2977] 20342 22396 22458 23161 23423 23870 25257 25470 25612 27754 27922 34171 #>  [2989] 34328 36579 37397 37918 38592 39479 39741 43248 44264 44845 47302 49243 #>  [3001]    63   233   250   362   439   466   488   718  1087  1152  1409  1421 #>  [3013]  1465  1671  1756  1901  2377  2608  2683  2778  2895  2962  3155  3257 #>  [3025]  3501  3644  4009  4100  4324  4644  4826  4931  5144  5329  5574  5603 #>  [3037]  6208  6596  6964  7007  7451  7988  8235  8561  9902 10423 11683 12231 #>  [3049] 12372 14716 14770 14917 15136 15187 15403 15939 16539 16789 17103 17158 #>  [3061] 18415 18979 19851 20170 21279 21717 22595 22831 22958 23028 23637 23941 #>  [3073] 24155 24837 26160 26513 27138 28222 30677 31065 33674 34774 35039 36057 #>  [3085] 36412 40185 42610 42871 43050 44170 44373 44745 46053 48408    88    98 #>  [3097]   160   191   200   267   336   398   422   440   530   687   754  1104 #>  [3109]  1297  1379  1842  1987  2413  2513  2756  3156  3362  4069  4182  4584 #>  [3121]  4673  4708  4805  5050  5298  5390  5448  5516  5794  5834  6110  6343 #>  [3133]  6509  6892  7493  8089  8357  9058  9858 10371 10774 10924 11206 12688 #>  [3145] 13309 13372 14072 15034 15502 17348 17651 17724 20601 21339 23231 23307 #>  [3157] 24156 24509 24973 25471 25821 26867 27067 28223 29651 30110 30490 35462 #>  [3169] 35549 38853 39480 40785 40961 41795 41885 41981 42168 42872 43418 45133 #>  [3181] 47720 49144 49345    50    75    92   263   353   387   430   551   575 #>  [3193]   688   745   801   839   980   997  1029  1283  1605  1778  1931  1950 #>  [3205]  2296  2514  2963  3005  3053  3534  3585  3884  4709  4739  5699  7008 #>  [3217]  7041  7535  7953  8641  8678  8751  9192  9859 10267 10695 12734 13310 #>  [3229] 13373 13753 13971 14596 15404 15616 16428 18286 18671 19026 19623 20727 #>  [3241] 21280 21653 22191 22251 22316 22755 23569 24005 24296 24703 25056 26645 #>  [3253] 28605 28905 29290 29652 30596 30678 31459 31681 31837 32964 33848 34172 #>  [3265] 36147 36319 37481 37571 37743 37919 38937 41059 41168 41982 43876 44647 #>  [3277] 45042 46997 47410   189   287   312   345   363   817   998  1057  1219 #>  [3289]  1234  1512  1618  2012  2255  2280  2297  2329  2440  2757  2779  2808 #>  [3301]  2941  3122  3185  4154  4674  4827  4932  5201  5262  5449  6111  6382 #>  [3313]  6553  6632  7074  7137  7452  8642  8718  9551  9641 10268 10873 11938 #>  [3325] 12890 14232 14284 15503 16540 16790 16849 17024 17104 18230 18790 18914 #>  [3337] 19430 19852 20924 21281 21340 21831 22317 23365 23570 24084 24297 25258 #>  [3349] 26987 27514 29362 30111 31622 31755 31975 32057 33675 34872 35040 35463 #>  [3361] 37305 38183 39216 39393 40368 40449 41431 41796 42442 42697 43152 44561 #>  [3373] 45043 46602 48032   109   125   154   242   325   354   411   509   593 #>  [3385]   855  1048  1342  1410  1864  2013  2191  2233  2515  2809  2896  3123 #>  [3397]  3258  3558  3673  3777  3930  4070  5763  6146  6893  7138  7177  7404 #>  [3409]  7773  8202  8282  8981  9642 10729 11102 12412 14659 14874 15035 16429 #>  [3421] 17284 17844 18551 19853 20231 20665 21216 23162 24622 27515 27598 30031 #>  [3433] 31838 33589 34084 35119 35550 35726 35965 36320 38091 38854 40866 41432 #>  [3445] 41712 41797 44948 47197 48033   116   131   168   174   251   257   288 #>  [3457]   388   467   489   552   729   737   954  1030  1163  1330  1432  1843 #>  [3469]  1902  2758  3124  3210  3343  3674  3778  3815  4010  4071  4101  4155 #>  [3481]  4266  4675  5051  5263  5299  5795  5941  6112  6383  6855  7494  7536 #>  [3493]  8490  8562  8602  8679  8937  9815  9860 10052 10606 11572 11735 11889 #>  [3505] 11939 12322 12789 12943 14124 14171 14233 14970 15036 15307 16059 16430 #>  [3517] 16850 17105 17349 18034 18853 18915 19249 19489 19553 19739 21137 21718 #>  [3529] 24974 25613 25822 26725 26988 27139 27672 27840 28073 29142 29212 29880 #>  [3541] 31682 32436 38502 39394 39481 39573 40277 41348 42169 42443 44648 44949 #>  [3553] 45682 46710 48409 48945 49244   110   126   169   178   224   364   490 #>  [3565]   553   910  1135  1284  1391  1422  1500  1554  2051  2843  2942  3259 #>  [3577]  3615  3794  4740  5232  5422  5700  5796  6051  6085  6209  6276  7139 #>  [3589]  7178  7774  8437  8563  9367  9552 10004 10269 10568 10820 11989 12176 #>  [3601] 13099 13311 14172 14234 14499 14717 15355 15874 17220 17593 18231 19193 #>  [3613] 19554 20402 20728 22959 24157 24510 25117 26226 26289 26367 26726 27140 #>  [3625] 29944 30974 33849 34957 36672 38006 38593 41433 42078 43153 43597 43976 #>  [3637] 44649 44846 46225 46319 46902 48034 48410   132   243   499   619   626 #>  [3649]   638   840  1074  1088  1119  1555  1575  1795  1903  2810  2876  2982 #>  [3661]  3697  4039  4102  4710  6633  6674  7140  7179  7775  8407  9141 10053 #>  [3673] 10730 11261 11397 11779 12287 12689 12838 12993 13590 14125 15454 15781 #>  [3685] 15940 16369 16791 17845 19137 19304 20052 20925 21769 22530 24623 27841 #>  [3697] 28989 31460 31976 32520 33124 33850 35377 35891 37048 38938 40450 41060 #>  [3709] 42444 42526 43504 43783 43977 44171 44650 47514 47619 47721 47831 48819 #>  [3721]   365   510   606   699   856   868   889  1016  1058  1411  1450  1829 #>  [3733]  1844  2281  2555  2915  3502  3559  3849  3908  3931  4040  5300  5450 #>  [3745]  5670  5701  6016  6174  6597  6856  7954  8170  8783 10607 10821 11207 #>  [3757] 11522 12586 13208 14073 14126 14173 14285 14500 15137 15563 15941 16302 #>  [3769] 16431 16605 17159 17536 18728 19555 20471 21512 22121 22756 23366 23638 #>  [3781] 23871 23942 24085 24429 25397 26161 26800 29291 29881 31066 31683 32695 #>  [3793] 34775 36148 36869 37398 37482 39482 40003 40541 43505 44651 45412 45596 #>  [3805] 45962 47722   179   182   319   333   355   389   607   647   787   802 #>  [3817]   841   911   999  1235  1364  1705  1728  1757  1967  2104  2256  2964 #>  [3829]  3079  3816  4072  4103  4267  4355  4741  4933  5052  5301  5482  5641 #>  [3841]  6175  6554  6824  7009  7605  8603  8982  9238  9722 10329 11890 12041 #>  [3853] 12177 12467 13312 13754 14174 14396 14660 14771 15405 15617 15942 16060 #>  [3865] 16125 16177 16432 16792 16851 17106 17475 17725 17907 17954 18481 20290 #>  [3877] 20729 21719 21893 22192 23308 23367 23489 23803 25823 26868 30418 30749 #>  [3889] 30975 31067 32142 32521 32608 32793 32872 33040 33360 33425 34392 35378 #>  [3901] 35551 35892 36511 37399 38342 38594 39022 39137 39914 40369 40542 41061 #>  [3913] 42611 42873 43598 44172 44746 45044 46054 47198 48035    86   201   500 #>  [3925]   531   719   738   746   929  1120  1285  1451  1556  1576  1904  2192 #>  [3937]  2516  2556  2684  2844  3157  3414  3817  4443  5145  5902  6675  7042 #>  [3949]  7405  7606  8236  8321  8491  8529  8784  8858  9464 10181 10822 12134 #>  [3961] 12288 12413 12944 13209 13591 13908 14175 14286 14446 15728 16303 16370 #>  [3973] 16966 17107 19305 19985 20730 21138 21513 22252 22397 22675 22757 23107 #>  [3985] 23804 24430 24903 27923 29213 29292 29431 30331 30491 30597 30750 31756 #>  [3997] 32215 33851 33927 35379 36321 37832 39742 40092 40962 41062 41349 41713 #>  [4009] 42445 43249 44562 45134 45683 46603 46998 47723 48946   111   146   234 #>  [4021]   258   297   441   491   532   700   857  1343  1501  1513  2014  2145 #>  [4033]  2257  2414  3097  3186  3281  3386  3535  3818  4104  4212  4559  4676 #>  [4045]  4893  5170  5302  5642  5671  5797  5868  5903  5942  6555  7141  8564 #>  [4057]  8604  9193  9553 10097 10372 10696 11012 11208 11736 11839 12790 13044 #>  [4069] 13374 13436 14397 14557 14661 14830 15664 16484 19370 20343 21061 22253 #>  [4081] 23639 24624 26227 26442 27141 27924 29143 29653 29882 32216 33590 33676 #>  [4093] 33996 36413 37572 37833 38420 38672 39743 40093 41063 43330 45217 45413 #>  [4105] 45963 47724 47928 48036 48411   104   192   211   511   942  1031  1136 #>  [4117]  1153  1331  1350  2212  2330  2378  2415  2706  2877  3054  3387  3586 #>  [4129]  3698  3819  4771  5171  5330  5604  5764  5798  5835  6176  6965 10098 #>  [4141] 10182 10222 11209 11356 11523 11627 12524 14287 16240 16906 17955 18232 #>  [4153] 18287 19918 19986 20472 20926 21581 22254 23232 23571 23805 24511 24625 #>  [4165] 24904 25057 25968 27068 27300 27673 28361 29065 30332 31151 31461 33928 #>  [4177] 34173 34619 34873 35293 35552 36240 36580 37049 37483 41255 41798 41983 #>  [4189] 42170 44563 46055 46999 47725 47929 48113 49145   117   147   202   214 #>  [4201]   298   431   858   943   981  1236  1286  2070  2635  2759  2983  3503 #>  [4213]  3587  3779  4129  4156  4383  4474  4525  4560  4742  4806  4859  4934 #>  [4225]  5357  5575  5643  6052  8283  8565  8643  8819  9368  9554 10099 10731 #>  [4237] 11013 12468 12587 13375 14176 14501 15245 15406 15564 16304 16606 17108 #>  [4249] 18672 18791 19082 20927 20996 21894 22255 22318 22676 24905 25824 26727 #>  [4261] 27142 27842 29654 30333 31221 31366 33041 33276 33426 34703 35804 36673 #>  [4273] 37400 38343 38673 38765 39828 40451 42527 42698 42874 43051 43250 44652 #>  [4285] 45321 45684 48412   122   183   476   533   544   608   620   747   869 #>  [4297]   944   955  1032  1049  1105  2089  2193  2213  2489  2557  2609  2656 #>  [4309]  3415  3850  4711  4743  4828  5233  6086  6781  6894  7043  7075  7255 #>  [4321]  7495  8203  8492  8680  8983  9239  9595  9679 10608 11210 12178 14447 #>  [4333] 14772 14971 15246 15455 16241 16541 17109 17594 17956 18035 18980 20546 #>  [4345] 20928 21895 21973 22960 23108 23309 23424 24298 25319 26579 26728 28074 #>  [4357] 28757 29214 29363 29591 30032 32873 34549 35120 35966 37401 40543 45414 #>  [4369] 45503 45766 46415 48413 48496 48710 48820    99   112   123   148   184 #>  [4381]   346   366   390   670   755   773  1209  1433  1480  1905  1968  1988 #>  [4393]  2214  2258  2379  2584  2984  3536  3588  4041  4130  4935  5082  5303 #>  [4405]  5672  5765  6017  6147  6556  7142  7607  7955  8022  8438  8785  9369 #>  [4417] 10005 10054 10270 10569 10823 11156 11524 11891 12588 12690 13541 13701 #>  [4429] 14074 15188 15998 16305 16852 17025 17350 17652 18416 18792 19194 20929 #>  [4441] 21402 21458 21974 23310 23490 23640 25058 25320 26514 27221 31367 31684 #>  [4453] 31839 34704 35041 35632 36512 36962 37050 37123 39311 39744 39915 40867 #>  [4465] 43692 44374 45767 47303 47620 48617   133   170   320   492   774   818 #>  [4477]   870  1033  1050  1193  1298  1392  1434  1706  1932  2234  2542  2558 #>  [4489]  3080  4240  4561  4645  5304  5451  5741  5869  6344  6598  6782  6966 #>  [4501]  7577  7924  8090  8204  8493  8605  9370  9596 11892 12791 12945 12994 #>  [4513] 13261 14127 17846 18482 18552 18854 19195 20473 21720 21975 22122 23425 #>  [4525] 24006 25614 26869 27143 27301 29519 30199 31685 32354 32794 32965 34550 #>  [4537] 34620 35464 35553 37744 37834 38421 38595 38855 39395 39483 41064 42171 #>  [4549] 42528 42782 46141 46416 47621 48414   225   244   252   326   412   468 #>  [4561]   706   912  1250  1557  1796  1813  1845  1884  2181  2215  2298  2707 #>  [4573]  2878  3363  3616  4042  4157  5904  5943  6895  7218  7730  8439  9507 #>  [4585]  9597 10874 11262 11398 11684 12323 12589 13100 14030 14347 14875 15247 #>  [4597] 16667 16734 16967 17537 17957 18036 18158 18673 19919 22832 23368 23728 #>  [4609] 25118 25539 25679 25969 26515 26729 28447 29592 30033 30751 30814 31068 #>  [4621] 31548 33997 35633 36149 36241 36674 37402 37662 38939 39312 40544 40868 #>  [4633] 41256 42079 42172 42357 42875 44847 45135 46516 47090 48497 48711   141 #>  [4645]   180   449   501   803   890  1412  1529  1592  1619  1814  1906  1969 #>  [4657]  2416  2468  3030  3055  3388  3443  3589  3719  3820  3932  3960  3983 #>  [4669]  4158  4829  5172  5331  5358  6557  6676  6967  7496  7807  8023  9059 #>  [4681]  9555 10139 10424 10697 10732 11157 12232 12792 14128 16433 16668 16793 #>  [4693] 16853 17653 18094 19306 19624 20053 21139 21514 22050 22319 22459 22531 #>  [4705] 23029 23943 24007 24299 26162 26290 27302 29432 29945 30034 30200 30334 #>  [4717] 30891 31757 32355 34460 35967 36414 38344 38674 38856 39313 39484 40706 #>  [4729] 43052 43154 43506 43784 44653 45218 45597 45768 46604 47304 47930 48209 #>  [4741]   134   804  1034  1423  1989  2299  2490  2811  2985  3098  3389  3560 #>  [4753]  3645  3699  7010  7219  7357  7578  7808  9598  9723 10006 10140 13592 #>  [4765] 13972 14348 14718 15037 15943 16242 16371 16794 16854 17847 18553 20865 #>  [4777] 20930 21062 21654 22532 22758 24300 24626 24838 25059 25752 26163 26368 #>  [4789] 26516 26580 27437 27599 29066 30335 30492 30976 32795 35554 37201 37484 #>  [4801] 37745 39023 39745 40186 40632 40786 43599 43877 44375 45322 45504 45769 #>  [4813] 46056 46142 48415 49245   135   185   203   264   277   307   413   502 #>  [4825]   512   584   730  1393  1620  1951  2125  2216  2331  2610  2897  3031 #>  [4837]  3444  3617  4159  4618  4646  4936  5018  5083  5423  5517  5605  5673 #>  [4849]  6345  6479  7011  7076  7105  7180  7453  7989  8284  8530  8859  9100 #>  [4861]  9556  9816 10425 12086 13045 13542 14662 15038 15138 15248 16061 16542 #>  [4873] 17026 17221 17285 18159 18729 19740 19854 20403 21341 21582 22398 23491 #>  [4885] 23872 24008 24222 25398 26443 27674 27755 28075 29215 30598 33361 34329 #>  [4897] 35968 37124 37835 38007 39314 40004 40452 42446 42876 43600 44466 44747 #>  [4909] 44950 46320 48210 48618   149   186   215   299   321   627  1000  1164 #>  [4921]  1194  1344  1481  1502  1621  1707  1797  1815  1830  2355  2417  3081 #>  [4933]  3211  3260  3471  3537  4183  4562  4744  4772  4807  4860  4894  5084 #>  [4945]  5305  5424  5452  5518  5576  6210  6346  6857  7990  8237  8408  9861 #>  [4957] 10609 11103 11573 13046 13210 13313 15875 16178 16669 16735 17222 18288 #>  [4969] 19083 19371 20103 20474 21140 22533 22961 23873 24627 24975 27069 27222 #>  [4981] 27925 28679 28831 28906 29364 29801 30815 30977 31222 32609 32874 33207 #>  [4993] 33277 33362 33998 34551 34621 34705 34958 35555 35805 36675 40187 41984 #>  [5005] 42612 43155 43251 44265 44951 47305 47411 49346   150   193   289   300 #>  [5017]   391   432   503   561   765   945   968  1195  1210  1237  1394  1831 #>  [5029]  1907  2217  2259  2300  2441  2469  3187  3305  3618  3646  3753  4131 #>  [5041]  4268  4677  4861  5112  5146  5173  5391  6308  6510  6896  7279  7454 #>  [5053]  7646  7776  7885  7956  8531  8681  8820  8938  9020  9101  9194  9285 #>  [5065] 10775 11056 11574 11893 12414 12634 12995 13376 13593 14558 14597 14719 #>  [5077] 15618 16243 16543 18674 19250 19490 19855 20291 21141 21282 21342 22759 #>  [5089] 23944 24223 25615 26090 27144 27516 27600 28526 28758 29293 29655 30274 #>  [5101] 31977 32522 32796 33677 33999 35893 37485 37920 38857 38940 39315 41257 #>  [5113] 41434 41799 42173 44266 45964 46417 47726 48211   155   268   278   327 #>  [5125]   374   469   513   534   562   639   707   891   982  1059  1351  1365 #>  [5137]  1466  1690  1798  2235  2282  2380  3675  3700  5606  5702  5799  6113 #>  [5149]  6309  6420  6858  6968  7839  8358  8719  9021  9060  9286  9643  9954 #>  [5161] 10100 10969 11211 12087 12635 13909 14502 14720 14876 15189 15356 15876 #>  [5173] 17027 18916 19372 19987 20292 21343 21896 23426 23806 24009 24086 24628 #>  [5185] 24769 25259 25472 25753 27145 27601 27843 28001 28362 28448 28759 29067 #>  [5197] 29294 30201 30336 30599 30816 32610 32966 33513 35380 35465 35556 35634 #>  [5209] 39396 39574 39829 39916 40278 44848 45136 45598 45685 46517 47306 47727 #>  [5221] 49146   204   226   253   290   399   423   563   576   842   913  1017 #>  [5233]  1366  1413  1799  1846  2163  2236  2260  2418  2470  2657  2708  3416 #>  [5245]  3590  3720  3851  3885  6421  6452  6634  7106  7143  7925  8205  8644 #>  [5257]  8682  8720  8898  9287  9413  9724 10373 10570 10776 10824 11263 11399 #>  [5269] 12793 13101 13487 14129 14831 15039 15357 15456 15504 16907 17028 17110 #>  [5281] 17726 17958 18037 18095 20171 20293 20404 20802 20997 21515 22320 22596 #>  [5293] 23311 23492 23572 24087 24360 25321 26032 26091 26164 26581 27438 28002 #>  [5305] 29724 32058 32143 33427 33929 34085 34174 34959 35635 37573 37663 37836 #>  [5317] 39663 39830 40005 43053 43507 44376 45219 47931 48712 49039   187   328 #>  [5329]   564   827   914   983  1001  1181  1196  1287  1352  1577  2126  2164 #>  [5341]  2760  2898  3006  3125  3212  3306  3721  3821  3961  4325  4475  4745 #>  [5353]  5019  5053  5085  5359  5836  6347  7537  8359  8721  8939  9061  9770 #>  [5365] 10007 10426 10655 10825 10925 11212 12042 12469 13802 14177 14598 15358 #>  [5377] 16968 17029 17286 17476 18483 19373 20731 21142 22962 23427 23493 24010 #>  [5389] 24224 26517 27146 27223 27517 28606 28907 30752 30978 32967 33428 33591 #>  [5401] 34000 34552 35121 36322 36581 37125 38092 38941 39316 40633 40963 41435 #>  [5413] 41800 42971 43252 43878 44748 44849 46226   171   216   313   322   493 #>  [5425]   524   594   657   969  1182  1660  1708  2127  2356  2419  2471  2559 #>  [5437]  2585  2965  3538  3780  3822  4526  4773  4830  5837  6114  6211  6635 #>  [5449]  7044  7280  8532  8722  8786  9195  9414 11104 12324 12691 13488 13594 #>  [5461] 14075 14235 14349 14773 15359 16607 16670 16736 17477 18793 20602 20803 #>  [5473] 20998 21459 21770 22123 22677 23030 23729 24011 24431 24906 25260 25322 #>  [5485] 25399 26444 28832 29725 30202 31978 36772 37051 39485 40370 40634 40964 #>  [5497] 41617 43785 44377 44467 47832 49347   175   245   259   337   356   477 #>  [5509]  1165  1353  1482  1606  1885  2128  2261  2357  2685  2709  2780  2916 #>  [5521]  2943  3539  3561  3754  4132  4384  4585  5332  5425  5870  6087  6148 #>  [5533]  6212  6744  6825  7608  7840  8752  9102 10008 10101 10183 11057 11685 #>  [5545] 12179 12525 12794 12891 13262 13702 13973 15190 15505 15619 15999 16485 #>  [5557] 16544 16737 16855 18038 20866 21283 21976 22678 22893 24301 24361 24629 #>  [5569] 25119 25754 26033 26369 26801 27303 27368 30035 30493 30600 31623 31686 #>  [5581] 32611 32875 33429 33768 34706 34776 35727 42972 43054 43601 44067 44173 #>  [5593] 48212   217   279   308   400   442   504   577   648   720   739   871 #>  [5605]  1121  1137  1367  1514  1530  1607  1672  1800  1816  2105  2472  2560 #>  [5617]  2731  3445  3984  4774  4831  4980  6480  7077  7777  7886  7926  8132 #>  [5629]  8238  8606  8683  8723  8787  8984  9415 10009 10374 10970 11308 11990 #>  [5641] 12043 12590 12636 13047 13595 14599 15506 16306 17727 17776 17908 18353 #>  [5653] 18917 19856 20405 21832 22963 23233 24630 24770 29216 31462 31840 32144 #>  [5665] 32523 33514 34461 34553 36870 37126 38503 38596 38675 39831 40279 41618 #>  [5677] 42877 43419 43786 44174 44267 44468 45866 47199 47307   235   478   494 #>  [5689]   578   701   721   872  1288  1503  1729  2332  2442  2845  3344  3562 #>  [5701]  3722  3886  3933  4241  4862  4981  5264  5453  6422  6558  7731  9062 #>  [5713]  9371 10141 10826 11439 11525 11737 12088 12233 12692 13437 14031 14721 #>  [5725] 15040 15191 15308 16307 16545 16969 17030 17287 18233 19625 19920 19988 #>  [5737] 20054 20666 20732 21897 22597 24704 25261 25473 25616 25755 25825 26034 #>  [5749] 26165 26802 26989 28990 29365 29593 30112 32524 32797 33042 36963 37486 #>  [5761] 42080 42878 46418 47000 47833 48114   227   269   756  1311  1345  1515 #>  [5773]  2106  2420  2491  2658  2686  3328  3390  3701  4184  4242  5905  6826 #>  [5785]  6969  7358  9142 10102 10375 11058 11105 11488 11686 12135 12234 12839 #>  [5797] 13211 14032 14398 14832 15620 15828 17288 17415 19084 19138 19921 20867 #>  [5809] 21063 22124 22193 22833 23234 23312 23807 24012 24302 24976 25187 26518 #>  [5821] 26646 28003 28908 31624 32145 32437 33125 33678 33852 34622 34707 35122 #>  [5833] 35636 36871 37921 40094 41436 41543 42529 43253 44469 45323 46605 46711 #>  [5845] 46806 47001 48115   280   314   338   495   658   731   740   946   970 #>  [5857]  1002  1075  1312  1673  1847  1865  1886  2071  2194  2218  2381  2443 #>  [5869]  2636  2659  2781  2846  3056  3563  4527  5577  5800  6088  6423  6745 #>  [5881]  7579  7609  9022  9103 10926 11264 11894 11940 12637 13163 13703 14076 #>  [5893] 14130 16179 16308 16546 17160 17351 17478 17654 18039 18096 18675 19251 #>  [5905] 19922 20344 21898 22051 24303 25400 26092 26291 26647 27518 29295 30275 #>  [5917] 30601 31625 31758 33592 33769 33853 34250 34708 34777 35042 36872 37306 #>  [5929] 37403 38422 39217 39746 41065 41437 42081 42174 44175 45220 48116   246 #>  [5941]   270   347   514   525   788   805   873   947  1368  1516  1558  1608 #>  [5953]  1709  1779  1817  1970  2333  2382  2444  2586  2660  2687  2830  2944 #>  [5965]  2966  3158  3417  3647  4326  4528  4563  4678  4954  5086  5454  5944 #>  [5977]  6177  7281  7647  7957  8607  8645  8860  9372  9817  9903 10427 10827 #>  [5989] 11400 11489 11628 12136 12996 13212 13314 13704 14399 15407 15944 16062 #>  [6001] 16434 16795 16908 17161 17289 18730 18918 19139 19374 20055 20667 20931 #>  [6013] 20999 21516 21977 23641 23874 24977 26370 27439 27756 28138 29217 29433 #>  [6025] 29946 31368 32059 32798 33515 36150 36415 37127 39138 39917 40787 40869 #>  [6037] 43156 44470 45686 46712 47002 47622 47728 47932 48037 48306 48947 49147 #>  [6049]   236   334   505   671   806   828   915   956  1003  1138  1197  1369 #>  [6061]  1435  1559  1622  1661  2052  2165  3007  3159  3213  3307  3591  3702 #>  [6073]  3723  3823  4775  5020  5087  5578  5838  6511  6599  6783  7282  7538 #>  [6085]  7610  7841  8091  8239  8646  8985  9508  9557  9818  9904 10142 10428 #>  [6097] 10777 11059 11106 11629 12137 12526 13438 13489 14833 15139 15621 15665 #>  [6109] 16435 16486 18040 18919 19375 19626 20104 20733 20804 20932 22194 22321 #>  [6121] 24839 24978 25120 25188 27070 28076 28224 28527 31152 31687 33363 33516 #>  [6133] 33593 34330 35210 35557 36151 37664 38504 40371 41886 41985 42175 42261 #>  [6145] 43420 43602 44378 44749 44952 45415 45867 46713 46903 47729 49148   301 #>  [6157]   315   367   515   649  1076  1238  1268  1578  1674  1691  1832  2782 #>  [6169]  3008  3099  3239  3261  3795  4011  4133  4298  4327  4385  4412  4746 #>  [6181]  4776  5054  5674  5975  6018  6089  6277  6453  7676  7842  8057  8133 #>  [6193]  8608  9023  9063  9644  9819  9955 10223 11687 12180 12735 14178 14834 #>  [6205] 15360 15408 16000 16063 16436 16608 16970 17031 17479 17595 17909 19085 #>  [6217] 19989 20868 21978 22894 23494 24158 24631 25189 26035 26228 26519 26582 #>  [6229] 26648 26803 28607 28680 30203 30979 31688 33364 33430 34175 36676 37746 #>  [6241] 38345 38597 40006 40635 42358 43254 44176 46321 46904 47515   348   375 #>  [6253]   382   392   535   585   659   775   859   984  1154  1183  1198  1251 #>  [6265]  1517  1649  1908  2383  2710  2879  3240  3308  3446  3504  3703  3985 #>  [6277]  4269  5113  5360  6600  6827  7012  7220  7677  8092  8171  8240  9196 #>  [6289]  9771 10010 10184 10656 10778 11490 12044 12693 13439 13596 14179 17959 #>  [6301] 19086 19680 20805 20933 21460 22460 23642 24225 24512 25323 27757 28225 #>  [6313] 28681 29947 30204 30494 30817 31912 32612 33770 34393 35123 35894 36416 #>  [6325] 37487 38766 39024 39397 43157 43255 43978 44268 45045 45505 47091 48117 #>  [6337]   281   316   383   450   458   579   672   807   892   930  1211  1346 #>  [6349]  1483  1531  2031  2587  2761  2783  2831  3262  3505  3592  4356  4529 #>  [6361]  4679  4832  4895  5088  5361  5579  5675  5871  5906  6512  6677  6784 #>  [6373]  6828  6970  8024  8494  8986  9599  9772  9956 10143 10271 10779 11014 #>  [6385] 11895 12089 12415 13490 13755 13803 13852 14131 14350 14400 14600 15192 #>  [6397] 15249 15565 15666 16064 16244 16372 16738 17655 17777 18354 18554 18612 #>  [6409] 19307 19857 20056 20547 21403 21583 21899 22322 22598 22834 22895 23031 #>  [6421] 23163 24907 28139 28226 28528 29802 31463 31689 35728 36242 36582 38008 #>  [6433] 38093 39139 42613 43693 44068 44471 44750 46057 46807 48948 49246   339 #>  [6445]   414   565   708   741   874   985  1122  1623  1745  1909  2107  2334 #>  [6457]  2421  2611  2732  2762  3032  3345  3391  3648  4299  4619  4712  5265 #>  [6469]  5703  5839  5976  6278  6454  7144  7611  7843  7958  8285  8440  8609 #>  [6481]  8861  8987  9104  9240 10103 11107 11213 12591 12638 13377 13910 14033 #>  [6493] 14077 14972 16309 16909 16971 17416 17480 17910 17960 18234 18484 18731 #>  [6505] 18794 18855 19196 19923 19990 20057 20294 20548 20869 22679 23164 23313 #>  [6517] 24840 25190 25540 26520 26870 27758 28077 29144 30113 30679 31223 31464 #>  [6529] 31549 32356 34176 37202 38009 38676 39832 40095 40545 40707 40965 41066 #>  [6541] 41887 42082 42359 44069 44472 44564 45221 45324 47623 48713   254   265 #>  [6553]   340   368   376   384   451   586   808   875   948  1018  1106  1166 #>  [6565]  1199  1332  1746  1818  1933  1990  2384  2917  3619  3676  3755  3909 #>  [6577]  4270  4300  5089  5455  6559  6785  6971  7887  8441  8724  8862  9905 #>  [6589] 10011 10610 11780 12235 12592 13378 13491 13853 14722 15945 16126 16373 #>  [6601] 16547 17032 18485 18676 18795 19308 20105 20295 20734 21284 21584 22461 #>  [6613] 22599 24362 26990 27224 29145 29726 29883 30036 30980 31979 34960 35637 #>  [6625] 35806 36773 37837 38598 40372 42176 42262 44565 44850 45599 46518 48118 #>  [6637]   260   282   369   452   536   673   860   893   986  1107  1313  1347 #>  [6649]  1609  1730  2090  2543  2661  2847  3009  3082  3263  3649  3962  4476 #>  [6661]  4747  4777  5644  5977  6115  6424  6859  7145  7181  7256  7283  8566 #>  [6673]  8684  8899  8988  9197  9328 10012 10055 10330 10514 10571 10698 11991 #>  [6685] 12373 12639 12736 12946 15667 15782 15829 16180 16609 16739 17352 17417 #>  [6697] 17481 17596 17656 18289 18920 19027 19741 19858 19924 20106 20668 22760 #>  [6709] 24568 24632 25541 25756 25970 26036 26445 26804 27225 29218 29366 31224 #>  [6721] 31369 31841 32357 32968 33126 33208 34086 34462 35895 36058 36243 36323 #>  [6733] 36513 36583 36964 37574 38767 39025 39317 40096 40966 41544 41619 43331 #>  [6745] 43603 44851 46714 47092 47200 47730 47933 48038   291   309   370   545 #>  [6757]   566   621   722   789   894   916  1089  1123  1167  1436  1848  2108 #>  [6769]  2561  2588  2733  3241  4012  4213  4586  4748  4982  5483  5645  5704 #>  [6781]  6746  7284  7406  7497  7539  7612  7678  8058  8134  8442  8567  9105 #>  [6793]  9288  9416  9725 10144 10733 10875 11526 12045 12947 13102 13164 13492 #>  [6805] 15457 16181 16310 16856 17033 17961 18290 18613 18856 19028 19376 19556 #>  [6817] 20603 20806 20934 21000 22600 23165 24226 24569 24771 24979 26292 27602 #>  [6829] 28909 29434 30419 31759 32358 32613 33517 34087 34778 35558 39318 39398 #>  [6841] 39575 39918 40188 40453 40636 40870 42699 43879 44473 44852 48619   271 #>  [6853]   283   317   554   567   595   628   809  1051  1252  1484  1624  1731 #>  [6865]  2129  2219  2301  2711  2986  3057  3214  4301  4983  5362  5676  5872 #>  [6877]  6019  6425  6560  6716  7078  7407  8025  8533  8610  9289  9558  9680 #>  [6889] 10185 10611 12374 12640 12795 13165 14236 14503 14918 15041 15250 15566 #>  [6901] 18235 18555 18857 20107 20549 21064 21461 21585 21979 22896 23109 23945 #>  [6913] 25971 27926 28608 29656 30602 30818 30892 31465 32288 32438 33127 33209 #>  [6925] 34177 34251 34331 34961 35381 35729 36417 37488 39576 40097 41350 44751 #>  [6937] 46519 46606 46808 47003 47516 49040 49149 49348   310   459  1060  1108 #>  [6949]  1220  1299  1437  1732  1910  2072  2445  2612  2637  2848  3392  3447 #>  [6961]  3852  3910  4134  4302  4357  4564  4749  5801  5907  6053  6678  6829 #>  [6973]  6921  7013  7107  7257  7285  7540  8172  8495  9373  9906 11108 11309 #>  [6985] 11527 13263 13974 14078 14288 14401 17353 17597 18677 18921 19140 20108 #>  [6997] 21285 22897 23808 24013 24304 25401 26037 26093 26371 27759 27844 28682 #>  [7009] 30114 30981 31370 31466 31760 33210 33771 33930 34623 35896 38768 39218 #>  [7021] 39319 44177 46322 47517 48949 49349   329   385   401   415   443   479 #>  [7033]   568   609   674   723   895  1168  1184  1370  1414  1934  1991  2053 #>  [7045]  2422  2849  3724  3756  4105  4243  4833  4896  5147  5306  5392  5551 #>  [7057]  5607  5742  5802  7108  7648  8026  8286  8821  8863  9024  9064 11688 #>  [7069] 11896 12840 13440 13543 13650 13756 14180 14973 15086 18417 19029 19859 #>  [7081] 22052 23235 25474 25680 26521 26871 27147 27845 30337 31761 31913 32525 #>  [7093] 34088 36152 36514 36584 36965 39026 39577 39833 41258 42263 43055 43158 #>  [7105] 43332 44566 44654 45600 45770 46520 46607 47201 48119 48714 48821   377 #>  [7117]   660   675   732   748   931  1077  1314  1395  2195  2967  3058  3160 #>  [7129]  3188  3364  3540  3620  3677  3704  4073  4680  5266  5363  6054  6090 #>  [7141]  6747  6830  6860  7809  8647  8989  9290  9417  9726 10272 10515 10876 #>  [7153] 10927 11015 11265 11840 12325 12948 13264 13854 14034 15042 15087 16182 #>  [7165] 16548 16610 16671 17111 17482 17538 17962 18796 19087 20735 21462 21900 #>  [7177] 22125 22835 22964 23110 24363 24570 24841 25121 25191 26649 26730 27440 #>  [7189] 28449 29296 30338 31069 31980 32696 33594 33931 34332 35382 36324 36585 #>  [7201] 39399 40189 41067 41801 43056 43421 44655 45325 45601 46419 47308 47624 #>  [7213] 48416 48715   371   622   629   724   776   819   843  1371  1452  1733 #>  [7225]  1780  1952  2130  2446  2968  3100  3564  3934  4498  4713  4984  6636 #>  [7237]  6717  6972  7182  7679  8287  8648  8940  9065  9291  9374 10186 10331 #>  [7249] 11575 11992 12090 13213 13315 13757 16065 16245 16311 16611 19030 19309 #>  [7261] 19681 22323 22399 22462 22898 23369 23428 23495 24088 24305 26446 26991 #>  [7273] 27226 27441 27519 27603 28450 28910 29727 29803 30205 30420 32289 32439 #>  [7285] 32876 33595 34001 34252 34463 34624 34874 35211 35466 36677 37575 38010 #>  [7297] 38858 39320 39400 40280 40708 42879 43508 45868 46809 47004 47518 47625 #>  [7309] 47834   357   516   546   766   932   971  1052  1372  1625  1675  1758 #>  [7321]  1887  1935  2073  2302  2688  2850  2987  3126  3309  3757  4444  4499 #>  [7333]  4587  4863  5552  5840  5873  6055  6091  6897  7221  7286  8288  8534 #>  [7345]  8568  8788  9329  9820 10056 10376 10516 10734 11941 13214 13493 14079 #>  [7357] 14237 14289 14663 14774 16183 16487 16740 16972 18355 18418 18981 19557 #>  [7369] 19925 20058 20109 22324 22680 23166 24227 25475 26372 26650 27520 27846 #>  [7381] 30603 30680 30893 30982 31070 34394 35212 35638 35730 36418 36774 39401 #>  [7393] 41545 43694 43979 44178 44269 45869 46143 46227 46608 46715 47093 47519 #>  [7405] 48307   341   349   378   506   587   844  1289  1504  1532  1849  1992 #>  [7417]  2220  2237  2492  2613  2763  3310  3506  3935  3963  4013  4185  4358 #>  [7429]  4500  4955  5202  5677  6481  6898  6922  7844  7959  8173  9066  9375 #>  [7441]  9681 11491 12236 12416 12737 12949 13103 15140 15507 16127 17483 18797 #>  [7453] 18858 20345 21344 22463 23496 24014 25826 26166 26229 26293 28991 29068 #>  [7465] 29367 31467 32359 33365 35124 35731 36775 37489 38423 40281 42614 43422 #>  [7477] 43695 45771 47934 48308 48620 49350   444   757   790  1061  1124  1169 #>  [7489]  1239  1610  1747  1781  1833  1850  1866  2335  2423  2517  2734  2851 #>  [7501]  3127  3887  4271  5174  7408  7455  8753  8789  9067  9957 10699 10928 #>  [7513] 11528 11781 11841 12375 13048 13379 13705 14559 15409 15946 17162 17911 #>  [7525] 18097 18236 19031 19860 20059 22965 23111 23730 24015 24089 25060 25972 #>  [7537] 26038 26230 27675 27760 27847 27927 29297 31071 33679 34089 35732 36244 #>  [7549] 37576 38505 38677 40282 41259 42530 43980 44567 46609 48213 48621   358 #>  [7561]   372   402   453   480   829  1035  1155  1315  1626  1650  1759  1911 #>  [7573]  2131  2146  2424  2493  2614  2712  2918  3215  3365  3448  3725  3758 #>  [7585]  4135  4303  4897  5021  5234  5393  5484  5608  5874  6679  6861  6973 #>  [7597]  7146  8206  8443  8611  8790  9330  9376  9821 10517 10657 10700 10828 #>  [7609] 11529 11576 12138 12237 12289 12470 12892 13166 13911 13975 14080 14181 #>  [7621] 14919 15309 15729 15877 16374 16549 17290 17848 17963 18098 18237 18356 #>  [7633] 18859 19252 19310 20406 21463 21586 22126 22836 23314 24090 24364 24513 #>  [7645] 26167 26373 27304 28004 28140 29804 31291 31690 31914 32969 33211 34178 #>  [7657] 34962 37052 38506 39027 41068 41351 42531 42700 42880 43423 43604 43696 #>  [7669] 44568 44853 45965 46058 46228 46420 46610 48120 48214 48417 48716 48822 #>  [7681]   393   537   596   777   830  1090  1373  1912  1936  2544  2615  2638 #>  [7693]  3264  3282  3472  3781  3796  4328  5267  5364  5456  6213  6426  6899 #>  [7705]  7109  7359  7498  8496  8990  9465  9682 10145 11440 12417 12738 13912 #>  [7717] 14402 15947 16066 16184 16612 17163 17657 18419 19141 19197 19253 20296 #>  [7729] 21065 21217 21345 22325 23370 23643 24365 25324 25681 25757 26094 26168 #>  [7741] 27848 29219 29520 29594 30037 30206 30894 31072 31626 32217 32360 32526 #>  [7753] 32799 34253 34333 35213 36153 36678 37307 37838 45326 45416 47202 49351 #>  [7765]   350   454   481   569   709   896  1062  1139  1269  1467  1676  1867 #>  [7777]  1913  2147  2221  2238  2425  2616  2735  2969  3366  3565  3797  3853 #>  [7789]  4244  4620  4864  5519  5803  6482  6601  6900  7045  7613  8444  9025 #>  [7801]  9068  9198  9727 10829 11993 12238 12418 13706 14664 15730 17484 17539 #>  [7813] 18556 18614 18982 19198 20060 20110 20172 20232 20346 20669 21001 21218 #>  [7825] 21655 22127 22326 22966 23032 23236 25973 26930 27676 27761 27928 28683 #>  [7837] 29805 30115 30276 30983 31153 31468 33366 33431 33854 34395 35294 36873 #>  [7849] 38011 38184 38507 39140 39219 41546 43057 45506 47731 47835 49041   433 #>  [7861]   460   538   555   623   630   725   758   876  1078  1560  1782  1971 #>  [7873]  2385  2447  2988  3161  3283  3566  4043  4413  4588  4621  5268  5520 #>  [7885]  5908  6561  7046  7287  7409  7888  8535  8822 10224 11060 12419 12527 #>  [7897] 15141 16550 16672 17354 18291 20407 20670 23731 24228 24908 25192 25542 #>  [7909] 25682 26447 31762 33043 33680 35043 35559 37128 38508 41260 41802 41888 #>  [7921] 43424 44474 45222 45966 46059 46611 47309 48950   526   676   742   897 #>  [7933]   972  1156  1185  1221  1533  1662  1734  1748  1972  2148  2358  2639 #>  [7945]  2689  3473  3541  3759  4014  4386  4445  4681  4778  4808  4985  5307 #>  [7957]  5743  5875  6020  6718  6831  6923  7288  7580  8360  9773 10377 10929 #>  [7969] 10971 12376 12420 12471 13104 13316 13976 14081 15043 15142 15310 15508 #>  [7981] 15948 16067 16437 16488 18292 19142 19682 20550 20870 21286 21833 22195 #>  [7993] 23429 23875 23946 25122 26095 26583 26731 27148 27442 28529 28992 29435 #>  [8005] 30753 32218 33367 34090 34963 35125 35214 35807 36154 38859 40454 42615 #>  [8017] 44070 44270 45967 48622 48823 49042   424   759   917  1091  1253  1270 #>  [8029]  1316  1333  1710  2015  2166  2784  2880  3189  3216  3311  3367  3507 #>  [8041]  3593  3782  4647  4714  4750  4865  4956  5055  5909  6116  6310  6348 #>  [8053]  6427  6455  6483  7110  7410  7499  8027  8093  9907 10429 11158 11441 #>  [8065] 11782 12694 12950 13317 13494 13707 14290 14504 14877 15668 16068 16246 #>  [8077] 17034 17291 17598 17778 18160 18798 19088 19742 20551 21002 21980 22400 #>  [8089] 22464 24842 25543 26294 26732 27443 27677 29146 29436 29948 30207 32440 #>  [8101] 32800 34091 34179 35295 36874 37490 40098 40373 40709 41803 42881 46229 #>  [8113] 46810 47412 48951 49150   425   445   597   845  1170  1380  1468  1505 #>  [8125]  1888  2303  2386  2494  2518  2662  2764  2899  3128  3418  3474  3888 #>  [8137]  4160  4898  4986  5090  5269  5333  5457  5485  5804  7014  7778  8569 #>  [8149]  8612  9199  9241  9683  9822 10013 10378 10735 11214 11310 12739 13318 #>  [8161] 13913 15509 15622 15669 16247 16312 16613 17035 17223 17292 17728 20475 #>  [8173] 21219 22128 23167 25402 26448 28141 28684 29657 30604 31763 35215 35383 #>  [8185] 36419 37203 37491 38509 38942 40546 40710 41069 41889 43787 46521 48418 #>  [8197] 48717   394   517   580   640   661   820   898   949  1036  1334  1396 #>  [8209]  1627  1760  1973  2032  2091  2304  3010  3393  4329  4501  4589  4779 #>  [8221]  4866  5056  5203  5646  5805  5910  6239  6456  7360  8497  8823  9559 #>  [8233]  9684  9823 11783 12046 12239 12290 12593 13441 13544 14238 14878 15510 #>  [8245] 16069 16128 16796 16857 17779 17912 18732 19254 20671 20807 21346 22129 #>  [8257] 23876 24980 25123 25683 26651 27369 27849 30277 31073 31371 31842 33855 #>  [8269] 34002 35467 37204 37404 37839 37922 38012 38678 39141 40374 42616 42783 #>  [8281] 45223 45687 46522 46612   416   570   650  1200  1438  1579  1677  1692 #>  [8293]  1868  1937  1974  2033  2336  2519  2663  2736  3594  3889  4074  4106 #>  [8305]  4214  4477  4502  4530  4622  4957  4987  5114  5744  5841  6562  6862 #>  [8317]  7047  7960  8289  8445  8754  8791  9331  9509  9908 10014 10332 11942 #>  [8329] 12796 13977 14835 14879 15878 16614 18557 19683 20173 20672 21003 21143 #>  [8341] 21721 22837 23315 24159 24633 26169 26295 27850 28911 29658 31074 31225 #>  [8353] 32219 34625 34875 35468 36966 37840 39028 40967 41169 41620 42617 45224 #>  [8365] 48718 49151   446   710   933  1004  1079  2387  2426  2832  3986  4503 #>  [8377]  5235  5365  5766  5945  6021  6240  6513  6974  9143  9200  9774  9824 #>  [8389]  9862 10187 10972 11530 11630 11689 12181 12472 12594 12997 13380 15143 #>  [8401] 15193 15670 15949 16313 17112 17658 17964 19089 19926 20111 21144 22681 #>  [8413] 23033 23644 23809 24514 25124 25827 25893 26522 27370 27521 28363 29368 #>  [8425] 29659 30495 31075 31550 32060 32877 33856 34876 35126 36420 36875 37665 #>  [8437] 39142 39578 42083 46811 46905 48623   417   434   470   482   518   877 #>  [8449]   918   987  1335  1354  1453  1485  1534  1628  1761  1993  2196  2359 #>  [8461]  2812  3419  3449  3595  3726  3987  4044  4136  4272  5308  5394  5580 #>  [8473]  5678  5767  5911  5946  5978  6022  6241  6279  6514  6786  7322  7361 #>  [8485]  7680  7732  7991  8028  8361  8498  9069  9645  9685  9863 10333 10478 #>  [8497] 10572 10877 11061 11311 12091 12139 12421 12528 12595 12841 13495 13804 #>  [8509] 15044 15830 16858 17729 17965 18678 18799 19032 19199 19311 19743 20112 #>  [8521] 20736 21587 21834 22256 23497 23645 24705 25325 26931 28993 29298 30754 #>  [8533] 31226 31691 31764 31843 32146 32290 32614 35469 36325 38094 38185 38346 #>  [8545] 41890 42447 43425 44379 44569 45968 48824 49043   662  1561  1629  2495 #>  [8557]  2640  2852  3420  3727  4137  4330  4387  4623  4682  4867  4937  5022 #>  [8569]  5057  5334  5876  6748  7183  7323  7614  8362  8725  8991  9600  9825 #>  [8581] 10057 10334 10379 11312 11442 11738 11784 13049 14665 14974 15088 15410 #>  [8593] 17036 17418 17659 18161 18733 20113 20347 22053 22327 22601 23237 24909 #>  [8605] 25193 26449 26733 27678 28005 28451 29299 29369 29521 30339 30421 31765 #>  [8617] 32061 32291 32878 33044 33212 35639 35969 38599 38860 39220 39664 39747 #>  [8629] 41352 42448 45327 46144 46906   455   598   677   749   778   846   899 #>  [8641]   957  1140  1186  1240  1711  2016  2182  2262  2283  2881  2919  3346 #>  [8653]  3890  3964  4683  5270  5366  5877  6637  6901  7111  8499  9201  9418 #>  [8665] 10058 10273 10612 10973 11062 11159 11357 11842 12182 13914 14560 14601 #>  [8677] 18420 19431 20408 21220 21722 22196 23034 23646 25758 27679 28078 28364 #>  [8689] 30895 31154 32441 33045 33278 33596 34709 36059 36326 37577 38347 38424 #>  [8701] 39402 40007 40968 42264 45507 45602 45870 45969 48215 48309 48419 48624 #>  [8713] 49152   447   624   678   726   760   779  1317  1355  1374  1381  1611 #>  [8725]  1762  2520  2664  2737  3190  3394  4414  4504  4751  4780  6023  6638 #>  [8737]  7779  8094  8290  8613  8864  9026  9202  9909  9958 10015 11266 11358 #>  [8749] 11943 12641 13167 13215 13545 13978 14035 14082 16314 16615 17419 18293 #>  [8761] 19143 19558 20061 20604 20935 21517 21588 22838 24091 24843 25684 25828 #>  [8773] 27762 30208 31627 32527 32697 32879 33432 33857 34003 34254 35970 36245 #>  [8785] 37841 38013 38186 38259 39143 40190 40455 42784 43058 48216   689   821 #>  [8797]   950  1092  1241  1612  1889  2305  2448  3011  3217  3312  3347  4186 #>  [8809]  4359  4565  4684  4752  4834  5175  5271  5309  5486  5521  5609  7222 #>  [8821]  7889  8755  9242  9466 10104 11063 11443 11690 12377 12695 12797 14083 #>  [8833] 15311 15671 16185 16315 17660 18162 18421 19861 20348 21004 21066 21347 #>  [8845] 23238 24515 25125 25326 26170 28006 28142 28530 29300 29728 30038 30681 #>  [8857] 30896 31981 32220 32442 33681 34710 34779 36155 36586 40099 40711 41261 #>  [8869] 43059 45137 47413 48498 49352   663   847  1053  1271  1439  1580  1735 #>  [8881]  1763  1890  1914  2239  2360  2473  2589  2970  3059  3129  3284  3508 #>  [8893]  3621  4809  5679  5745  5912  6563  6787  7079  7456  7733  7810  7845 #>  [8905]  7927  8095  8500  8900  8992  9027  9601 10225 10736 11160 11215 11944 #>  [8917] 11994 12326 12422 12473 13050 13105 13216 13381 13442 13855 15411 15672 #>  [8929] 15731 15879 16673 17355 17420 17913 18041 18357 18615 18800 18922 19491 #>  [8941] 20297 20737 20808 21901 22328 25327 27227 27371 27604 27680 27929 28285 #>  [8953] 29595 30116 30340 30422 33213 34092 34396 35470 35897 36679 37747 37842 #>  [8965] 38679 38769 39029 40008 40788 42701 43060 44380 44854 44953 46060 46230 #>  [8977] 46523 47836 49353   581   702   750   861  1005  1141  1171  1222  1593 #>  [8989]  1613  1975  2034  2149  2617  2641  2945  3101  3242  3395  3567  3678 #>  [9001]  4215  4245  5272  5979  6311  7362  7457  7734  8059  8941 10105 11577 #>  [9013] 13651 14723 14836 15089 15251 16186 17540 17780 18801 19684 19991 20114 #>  [9025] 20673 20936 21287 21771 21902 25544 26039 26096 27149 29147 30117 30496 #>  [9037] 31628 32698 33128 33597 33682 35640 36515 37578 37923 38014 38861 39030 #>  [9049] 40283 40871 42618 43981 46524 46613 46812 47094 47203 47626 48121 48825 #>  [9061] 49153   610   641   831   973  1063  1109  1469  1693  1749  1851  2284 #>  [9073]  2388  2562  2765  3012  3313  3450  3568  3760  3988  4045  4624  4988 #>  [9085]  5335  6280  6902  7184  7541  8029  8096  8241  8322  8446  9144  9377 #>  [9097] 10518 11216 11578 11739 11785 11897 12291 12327 13597 14602 15831 17421 #>  [9109] 18042 18099 19744 20298 20871 20937 21067 22054 22197 22329 22401 22602 #>  [9121] 22899 23877 24844 25328 27605 27851 28007 28994 29220 29370 30278 30341 #>  [9133] 31076 34554 34877 35971 36156 36516 36876 38425 39748 40191 40547 41621 #>  [9145] 41714 41804 41891 42265 42882 44855 45871 46231 46716 46907 47095 47627 #>  [9157] 47732 48122 48499 49154   527   810  1272  1694  1869  1891  1994  2074 #>  [9169]  2197  2361  2785  3542  3798  4015  4046  4075  4304  5336  5610  5680 #>  [9181]  5947  6312  6602  6924  7112  7681  8614  8865 10430 10780 11016 11531 #>  [9193] 12092 13265 13443 13496 14724 16674 16859 18163 18294 19090 19377 19627 #>  [9205] 21772 22761 23239 23430 24306 24634 25061 25403 26523 27763 28365 28531 #>  [9217] 28760 29148 29806 30279 30342 30819 31629 33046 33683 36060 36157 37579 #>  [9229] 37843 38187 38426 38943 39144 41438 42360 42532 42619 43788 46908 47005 #>  [9241] 47628   588   611   664   767  1223  1273  1318  1535  1678  1764  2075 #>  [9253]  3130  3348  3509  3891  3936  4076  4625  4781  4868  4899  5426  5581 #>  [9265]  5806  6313  6515  6639  6680  7080  7223  7411  7581  7846  8649  8824 #>  [9277]  9292 10878 10974 11161 11217 11401 11786 12696 12798 13805 14239 14666 #>  [9289] 14837 14920 17037 17293 18043 18100 18358 18422 18802 19144 19200 19432 #>  [9301] 19492 19862 20174 20349 21221 21518 21589 21656 23035 23732 23810 24432 #>  [9313] 24516 24772 25759 25829 26040 26992 27228 28143 28833 29596 30118 30755 #>  [9325] 31372 32801 33518 34180 34555 35384 35898 36246 36327 40284 40548 44179 #>  [9337] 45872 46421 47096 47204 49247   539   751   791  1019  1080  1187  1375 #>  [9349]  1695  1801  1915  2017  2306  2337  2427  2642  2665  2946  3265  3396 #>  [9361]  3510  3728  3854  3892  4077  4161  4246  4388  4415  4505  4782  5980 #>  [9373]  6149  6564  6603  6681  6788  7081  7185  8323  8363  8756  9910  9959 #>  [9385] 10226 10737 11691 12140 12642 13051 13806 14403 15880 15950 16001 16070 #>  [9397] 16187 17781 18044 18101 18616 18734 18803 18923 19255 19312 19559 20476 #>  [9409] 20605 21068 23112 23168 23573 24981 25194 25545 25685 25830 25974 27852 #>  [9421] 29949 30605 30820 31155 31844 32292 32699 32880 33598 33858 35127 35641 #>  [9433] 37205 39031 39321 40549 43426 43509 44271 45688 45970 46717 47006 47733 #>  [9445] 48217 48310   571   690   711   792   988  1594  1712  1802  2167  2389 #>  [9457]  2786  2853  3218  3824  3855  4416  5023  5487  5647  6484  7048  7992 #>  [9469]  8060  9145  9419 10106 10431 10738 11109 11162 11740 12893 12951 13106 #>  [9481] 13266 13758 14667 15623 15881 16071 16616 16797 16910 16973 17485 17782 #>  [9493] 18164 18486 18679 18735 20175 22534 22839 23574 25329 25476 25975 26296 #>  [9505] 26872 27229 29301 30682 30821 30984 33047 33433 33684 35296 35642 37129 #>  [9517] 37924 39032 39749 40969 41070 42449 43256 43880 44180 44656 45772 46323 #>  [9529] 46718 47097 47414 47629 48311   556   599   631   679   691   712   768 #>  [9541]   848   878  1319  1397  1630  1938  2338  2813  3162  3397  3596  4446 #>  [9553]  4506  4715  4753  4783  4835  4958  4989  5024  5337  6640  6863  7363 #>  [9565]  7993  8242  8570  9070  9560  9646 10016 10519 11267 11359 11741 11787 #>  [9577] 12240 12378 13217 13807 14240 14404 14668 15567 15673 16551 16741 16798 #>  [9589] 16974 17294 17914 19795 20350 20409 22130 22198 22465 27681 29729 31077 #>  [9601] 31630 31982 32147 33048 34464 35297 36158 36587 40009 40285 44954 45873 #>  [9613] 46719 48719   600   769   822   832   989  1006  1172  1320  1454  1663 #>  [9625]  1765  1852  2428  2563  2590  2618  2690  3033  3329  3543  3622  3650 #>  [9637]  4273  5204  5488  5582  6024  6056  6485  6864  7324  8650  8993  9243 #>  [9649]  9510  9864 11402 11742 12047 12842 12998 13444 14132 15783 16248 16911 #>  [9661] 17038 17224 17486 17849 18295 18487 19091 20115 20233 21222 21348 21657 #>  [9673] 21981 22466 22900 25195 25477 26041 26450 28761 29302 30209 30280 30756 #>  [9685] 31156 31766 33214 33279 33368 33599 33932 34004 34093 34964 35643 36680 #>  [9697] 36877 36967 40712 41353 42883 44752 44955 47415 48039 48952   601   713 #>  [9709]   780   793   862  1142  1300  1470  1536  1595  1783  2092  2787  3060 #>  [9721]  3102  3219  4187  4478  5176  5427  5522  6057  6117  6565  6682  7049 #>  [9733]  7412  8726  9244  9378  9467 10380 12379 12843 12894 13979 14241 14405 #>  [9745] 14921 15090 16249 16617 16675 17661 19560 20606 20872 21145 21404 21464 #>  [9757] 21519 22330 22967 23316 23371 23647 26652 27305 27764 28532 30210 30897 #>  [9769] 31227 32881 33129 33434 34255 34465 35128 35216 35471 35644 36681 39221 #>  [9781] 39403 40872 41715 45417 47098 47310 47630 47734 48312 48953   602   612 #>  [9793]   714   794   958  1037  1064  1157  1916  1953  2035  2390  2619  3398 #>  [9805]  3475  3705  3729  3761  3799  3825  3911  3937  4247  5367  5681  6641 #>  [9817]  6749  7015  7258  7682  7735  7890  7928  8097  8536  9602 10059 10432 #>  [9829] 11268 11579 11843 13107 13218 13915 14291 15091 16072 16552 16676 17422 #>  [9841] 17599 18296 18736 19628 19863 20607 21288 22331 23169 23317 23498 25330 #>  [9853] 25976 26042 27853 28079 28227 29437 30039 30281 30497 31078 32148 32802 #>  [9865] 33772 34005 34466 35808 35972 36159 38600 40010 42785 43257 43333 45225 #>  [9877] 46813 47837   613   632   665   692   752   919  1081  1212  1301  1455 #>  [9889]  1562  1596  1631  1766  1784  1954  2285  2496  2564  3163  3285  3800 #>  [9901]  3938  3965  4216  4248  4331  4626  4959  5025  5553  5648  6150  6349 #>  [9913]  6566  6975  7113  7224  7325  7364  7413  7542  8030  8098  8364  8866 #>  [9925]  9146  9511  9561  9960 10060 10107 10381 10520 11163 11403 12697 12740 #>  [9937] 12799 13382 13546 13598 13916 13980 14603 14975 15144 16375 16742 18488 #>  [9949] 18558 19864 23318 23733 25196 26171 26805 27150 27522 27854 28286 28762 #>  [9961] 28912 28995 29371 30343 30822 31373 32149 39033 40456 42786 43159 46061 #>  [9973]   614   934   990  1065  1173  1242  1456  1563  1581  1664  1713  2036 #>  [9985]  2240  3034  3061  3191  3476  3893  3912  4332  4447  5091  5948  5981 #>  [9997]  6314  6832  7050  7186  7847  7929  7994  8901  9512  9826 10274 10433 #> [10009] 10879 11218 11692 12380 13445 13856 13917 14182 14976 16002 16860 17164 #> [10021] 17225 17600 18297 18617 19201 19313 19865 20234 21069 21590 22901 23811 #> [10033] 25478 26451 27151 28287 28533 28913 29221 29730 29884 30282 31469 33435 #> [10045] 34006 34181 34965 35385 35809 37405 38260 39034 39145 39486 42884 46062 #> [10057] 48954   666   833  1125  1143  1290  1356  1382  1486  1696  1834  1892 #> [10069]  1976  2449  2474  3164  3569  3597  3826  4217  4417  4531  4590  4716 #> [10081]  4869  5273  5489  5705  6315  7289  7326  7414  7780  8409  8501  8615 #> [10093]  9513 10188 10658 12381 13052 13319 13857 14084 17541 17601 17915 18559 #> [10105] 19202 19745 20116 20809 21520 22762 23734 25126 25331 25686 25760 26231 #> [10117] 26374 26653 27523 27765 28080 28228 28609 28914 29303 29597 31079 31374 #> [10129] 31983 34780 36160 38188 39146 39487 40789 42177 42973 43334 43510 44657 #> [10141] 44956 46614 46720 47099 47838 48123   642   781   811   849   879   991 #> [10153]  1007  1201  1321  1487  1564  1582  1785  1995  2054  2362  2497  2713 #> [10165]  2766  2989  3131  3511  3544  4479  5177  5310  5428  6025  6516  6642 #> [10177]  6976  8135  8651  8994  9106  9514  9911 10227 10382 10613 11313 12183 #> [10189] 12895 12952 12999 13547 14505 14604 15092 16250 16553 16743 18165 18238 #> [10201] 18804 19314 19866 20235 20410 20674 20810 22332 22763 24366 25197 25977 #> [10213] 26524 30040 30211 30283 30823 31767 32150 34007 34781 36421 36968 37748 #> [10225] 37844 38348 39322 40011 41716 41986 42178 42702 43061 43160 44272 44570 #> [10237] 48218 48420   643   693   733  1243  1819  1853  2198  2666  2691  2920 #> [10249]  3083  3266  3762  4627  5583  5842  6604  7500  7683  7736  7781  8031 #> [10261]  8061  8099  8136  8867  8995  9293  9420 10108 10521 10701 10781 10930 #> [10273] 11064 11444 12093 12241 13219 13320 13548 14085 14133 14242 14292 14605 #> [10285] 14725 14880 14922 15832 15951 16316 16861 17850 18860 19315 19493 21405 #> [10297] 22968 23319 24307 24982 26232 26654 27444 27766 28008 30344 30498 30683 #> [10309] 32615 33685 35129 37206 37925 38189 38680 38862 39323 40012 40637 40970 #> [10321] 41071 42885 43881 44181 47735 48500 49248   680   834  1038  1082  1093 #> [10333]  1174  1415  1457  1488  1518  1537  1697  1803  1917  2076  2475  2565 #> [10345]  2692  2971  3512  3913  3939  4016  4107  4418  5490  6118  7114  7543 #> [10357]  7615  7737  9071  9421  9686  9961 10335 11788 12242 12741 13321 13808 #> [10369] 13981 14134 14448 15093 15412 16251 17295 17356 17783 18618 19629 20351 #> [10381] 21289 22131 22199 22603 23372 23648 24367 24433 24635 25404 25546 26172 #> [10393] 26297 28534 28834 29598 30041 30119 30499 31292 31470 31551 32528 33280 #> [10405] 33933 34182 39404 41262 42084 42974 44381 44856 44957 47205 47631 48955 #> [10417]   835   959  1158  1458  1639  1665  2093  2339  2947  3286  3399  3421 #> [10429]  3477  3598  3827  4047  4419  4900  5026  5148  5236  6026  6151  6350 #> [10441]  6605  7225  7327  7684  7738  8365  8410  8616  8825  8902  9687  9865 #> [10453] 10434 10880 10975 11269 11360 11789 12953 13809 13858 14086 16489 17602 #> [10465] 19256 19561 19796 20873 21982 23320 25405 27372 27445 28452 30120 30500 #> [10477] 30684 30824 30985 31984 32151 33049 33281 36969 40013 40713 41622 42975 #> [10489] 43605 43697 46063 47206 48625   651   694  1126  1254  1322  1416  1640 #> [10501]  1750  1767  2077  2150  2263  2429  2498  2738  2921  3330  3801  3940 #> [10513]  3966  4108  4218  5395  5913  5949  6977  7365  7782  8137  8685  8757 #> [10525]  9072  9603 10275 10435 10830 11110 11445 11492 11532 12141 12954 13168 #> [10537] 13859 14087 14135 14775 15361 15511 16003 16129 16490 17226 17423 18045 #> [10549] 18560 19630 20062 20411 23431 23649 23735 23878 25127 26525 28685 29304 #> [10561] 29599 30345 32529 33282 34626 35560 36588 37207 37749 38770 40873 41263 #> [10573] 42886 46422 46909 47736 47935 48720   681   960  1094  1489  1506  1698 #> [10585]  1714  1804  1977  2037  2476  2566  2739  2854  3513  3730  3856  3941 #> [10597]  4109  4591  4901  5237  5429  5649  5950  7290  7366  7616  7649  7848 #> [10609]  7891  7930  7961  8447  8502  8758  9468  9647  9728 10479 10976 11361 #> [10621] 12048 14136 14183 14406 14561 14923 15194 15252 15568 15732 15952 17487 #> [10633] 17784 17851 20675 21349 21835 24571 25547 25617 26043 26452 28453 28835 #> [10645] 30121 30346 30501 32062 32443 32882 33283 34782 35472 36970 38190 39222 #> [10657] 41987 43427 44475 46064 46324 46423 47100 48124   682   974  1020  1244 #> [10669]  1291  1471  1519  1715  1736  1854  2521  2855  3220  3243  3545  4110 #> [10681]  4420  5178  5396  5878  5914  6517  6750  6925  7291  7458  7685  7811 #> [10693]  7849  7995  8174  8366  8448  8652  8868  8903 10109 10146 10228 10276 #> [10705] 10522 10614 11404 12184 13053 13108 13267 14776 14924 15413 16491 16744 #> [10717] 17424 17662 18102 18489 18805 19092 19992 20938 21223 21350 21521 22902 #> [10729] 25332 25406 26233 26655 28081 28229 28915 29438 31228 33284 33519 34094 #> [10741] 35044 35386 36971 37208 37492 38944 40286 42085 42266 46145 46525 47007 #> [10753] 47936   823  1039  1066  1376  1459  1614  1632  1641  2286  2922  4048 #> [10765]  4219  4421  4480  4592  4810  5027  5274  5706  6316  6486  6518  6789 #> [10777]  7016  7082  7686  8503  8904  9515 10110 11631 11995 12292 12529 13054 #> [10789] 13383 13497 13860 14036 14777 15145 15569 17966 19093 19746 20299 20738 #> [10801] 21658 21836 21983 22535 22682 23036 23170 24517 24636 24706 26298 26873 #> [10813] 27767 28230 28288 28366 29522 29731 32616 32700 33600 33686 34008 34467 #> [10825] 34556 34627 35733 36247 37666 37750 38771 40457 40550 40790 41439 42267 #> [10837] 45138 45418 47416 48040 48421 48721   961  1067  1255  1996  2567  2693 #> [10849]  2900  2990  3062  3267  3400  3451  3731  4333  4811  5092  5205  5238 #> [10861]  5523  5611  5650  5843  5982  6119  6242  6457  6643  6751  7259  7617 #> [10873]  7850  8175  8243  8324  8571  9107  9203 10017 10480 11111 11446 12185 #> [10885] 13169 13759 14037 14606 14977 15045 15146 15784 16618 16862 18806 20939 #> [10897] 21522 22200 22333 22402 22683 23432 24160 26299 26806 27230 27306 27606 #> [10909] 30502 30825 31552 32444 33601 34628 34783 35899 36328 36972 38095 39147 #> [10921] 40014 40971 41805 42620 43882 46146 46814 47417 47839 48219   734   975 #> [10933]  1159  1175  1256  2055  2132  2545  2620  2643  2882  3165  3331  4532 #> [10945]  4593  5179  5206  5368  6243  6351  6458  6978  7083  7292  8062  8100 #> [10957]  8207  8537  8759  8792  9422  9688 10061 10147 10277 10481 10523 10831 #> [10969] 10977 12800 13055 14243 15046 15253 15733 15785 16745 17488 18423 18561 #> [10981] 19033 19203 19562 19631 19797 19993 20477 22903 23812 25618 25831 28289 #> [10993] 30757 30898 31553 31768 32063 33520 33602 34183 34397 34468 36589 37406 #> [11005] 37493 40458 41072 41440 41547 41892 44476 45046 45971 46615 47207 48125 #> [11017] 48722 49155   782   880   900  1095  1565  1751  1768  1820  1918  1939 #> [11029]  2078  2363  2450  2767  2972  3063  3914  3967  4305  4507  4938  5115 #> [11041]  5149  6178  6214  7017  7293  7415  7459  8208  8727 10018 10436 10931 #> [11053] 11112 11314 11533 11844 13498 13708 15254 15362 15570 16376 16975 17227 #> [11065] 17489 17852 17916 18166 19257 19563 19994 20352 20608 21290 22132 23037 #> [11077] 23879 24161 24773 25333 25548 25894 26526 27071 28082 28144 31157 31375 #> [11089] 32152 32530 32803 33050 33215 34009 34878 35810 36422 36682 36878 37580 #> [11101] 37751 37926 38863 39405 40192 40714 41354 41623 42361 42703 43789 43883 #> [11113] 44753 45226 45689 45874 47937 48723 49044 49156   850   920   962  1008 #> [11125]  1096  1110  1870  1919  1997  2109  2264  2307  2364  2430  2568  2591 #> [11137]  2814  2991  3132  3221  3452  4111  4220  4754  5239  5768  6120  6606 #> [11149]  7460  7501  7650  7892  7931  8367  9379  9516 10062 10881 11790 12643 #> [11161] 14137 14184 14506 15094 15414 15571 16317 17663 17785 17967 18103 18167 #> [11173] 18424 18924 19094 20609 21005 21659 21723 22334 23575 26097 26234 27072 #> [11185] 27152 28686 28763 33436 34469 35811 36590 37752 37927 38681 40791 41717 #> [11197] 41893 43335 44182 46424 46616 48041 48724   753   761   770  1160  1257 #> [11209]  1357  1538  1679  1699  1835  2133  2499  2546  2592  2644  2815  2923 #> [11221]  3570  3599  3828  3857  4221  4389  4533  4685  5554  5612  5769  5879 #> [11233]  6281  6865  7115  7147  7739  7851  8138  9380  9729  9866 10702 10882 #> [11245] 11017 11065 12382 12423 12742 13000 13322 13599 14038 14449 14507 16252 #> [11257] 17730 18168 19927 19995 20412 20811 22133 22969 23576 24229 24910 25198 #> [11269] 26235 26300 27524 27607 28290 28367 28454 32617 32804 32883 33773 34095 #> [11281] 34184 34784 34879 35973 36591 38015 38682 39223 39324 39488 39579 41894 #> [11293] 41988 42268 42450 42533 43606 45603 47101 48126 48422 49045 49157   901 #> [11305]  1176  1323  1716  2645  2856  3035  3453  3783  4360  4390  4990  5338 #> [11317]  5555  5707  5807  6926  6979  7544  7687  8209  8411  8942  9204  9562 #> [11329]  9604 10229 10278 10703 10978 11113 12142 12293 12530 12955 13861 14244 #> [11341] 14669 16188 18680 18983 19433 19564 19747 21146 21406 22055 22257 23038 #> [11353] 23321 24572 24774 24911 24983 26301 26584 28687 28916 29950 30347 31471 #> [11365] 32805 33859 34185 34880 36248 36683 38261 38427 38510 38864 39489 40100 #> [11377] 42269 42362 43428 43698 44273 44382 44571 45875 48313  1472  1539  1583 #> [11389]  2018  2056  2340  2391  2522  2833  2924  3478  3600  3732  3763  4991 #> [11401]  5093  5116  5240  6027  6282  6607  7148  7688  7852  7893  9245  9332 #> [11413] 10111 10279 10573 10932 11018 11066 11270 12743 12956 13499 14351 14562 #> [11425] 15255 16073 16130 16189 16438 16492 16799 16912 17113 17664 18359 18425 #> [11437] 19095 19145 19204 20353 20413 21147 22764 23171 23433 24637 25262 25334 #> [11449] 26874 26932 26993 27231 28145 29807 32064 33051 33521 33603 33687 34096 #> [11461] 34629 34966 35645 36161 36329 36592 36879 37845 38511 38601 42621 45690 #> [11473] 46065 47208 48725   771   795   851   992  1021  1068  1097  1213  1336 #> [11485]  1398  1440  1597  1633  1651  1717  2038  2168  2199  2740  3829  4306 #> [11497]  4628  5028  5094  5397  5613  5682  6317  6644  6683  6790  7689  8905 #> [11509]  8996  9517  9962 10189 10230 10615 11743 11898 12424 13109 13323 13810 #> [11521] 13862 14352 14881 14978 15674 15833 17039 17490 18737 19146 20063 20478 #> [11533] 20676 20739 22604 23240 23577 24016 24368 24775 24912 25263 25761 26585 #> [11545] 27373 27855 28535 28610 28996 29305 29885 30042 32361 32970 33216 35561 #> [11557] 35646 36330 37407 37846 39665 39750 41355 41548 42534 44383 45604 46425 #> [11569] 47102 47209 48127 48314  1098  1144  1224  1348  1540  1566  1955  2057 #> [11581]  2183  2451  2593  2646  2741  3166  3192  3368  3764  4138  4448  4648 #> [11593]  4939  5458  5708  5880  6028  6215  6283  6866  8686  9073  9147  9205 #> [11605]  9730 10231 10574 10659 11219 11271 11791 12186 12243 12294 12328 12383 #> [11617] 13652 13811 14039 15095 15882 16004 16619 18046 18104 19258 19565 20117 #> [11629] 20354 20479 21148 21407 21465 22134 22765 22970 23947 24162 25407 26236 #> [11641] 28146 29439 30423 30899 32445 32531 32971 33774 36776 40715 42270 42887 #> [11653] 47737   963  1099  1225  1358  1383  1541  1567  1634  1752  1805  2039 #> [11665]  2151  2200  2547  2742  2857  2992  3268  3349  3369  3706  3784  3894 #> [11677]  3915  4649  4717  4755  6684  6927  7367  7618  8368  8412  8728  8906 #> [11689]  9108 10482 10524 12425 12896 13110 13268 14040 14088 14450 14670 14838 #> [11701] 14979 15147 16074 16377 16554 16913 17357 17491 17968 18047 18490 19378 #> [11713] 19494 19566 20176 20236 20414 21523 22403 22684 23241 23880 23948 25408 #> [11725] 25762 26173 26527 26656 27232 27307 27374 27930 29440 29732 30606 31229 #> [11737] 31376 31845 32293 32446 33130 33285 33437 34881 35473 37928 38683 39035 #> [11749] 40193 43161 44958 45876 47103 48128 48501 48826   812   836   902   921 #> [11761]   935  1274  1441  1680  2058  2152  2169  2452  2569  2768  3133  3401 #> [11773]  3546  3830  3916  5029  5117  5556  6058  6092  6384  6645  6752  6791 #> [11785]  7368  7502  7582  7853  7962  8826  9381 10019 11534 11845 12049 13863 #> [11797] 14293 14726 14980 15256 15624 15834 17040 17114 17165 18048 18738 20064 #> [11809] 20355 20874 21466 22971 23172 23242 24017 24369 24434 24913 24984 25895 #> [11821] 26933 27233 27682 27856 28291 29441 30826 31769 33131 33688 33775 33860 #> [11833] 35130 35647 37494 38016 42622 44959 45691 46325 46617 46910 47938 48129 #> [11845] 48315 48626 48726   936  1009  1022  1145  1302  2094  2153  2222  2308 #> [11857]  2594  2667  2883  2901  2925  3036  3193  3269  3402  3707  3785  3942 #> [11869]  4017  4422  4650  5030  5150  5180  5398  5491  5915  5951  6352  6428 #> [11881]  6487  6719  6833  7226  7294  7651  8139  8325  8793  9074  9148  9775 #> [11893]  9912 10660 11220 12187 12295 12329 12844 13111 13220 13864 16005 17358 #> [11905] 17731 20480 20610 21724 22536 22605 23499 24518 24707 25062 25687 26994 #> [11917] 27608 28764 29222 30122 30212 30607 31692 33438 35562 36423 38512 38602 #> [11929] 38772 39406 40551 41441 42179 42271 42888 42976 43607 43884 45139 45972 #> [11941] 46526 46815 47418 48827 49249  1040  1303  1821  1920  2110  2309  2392 #> [11953]  2595  2714  2743  3134  3222  3350  3370  3651  4049  4188  4534  4651 #> [11965]  4784  4812  5492  5524  5709  6519  6720  7416  7996  8101  8210  8369 #> [11977]  8687  9731  9867 10020 10112 10190 11221 11405 11535 12050 12330 12474 #> [11989] 13056 13112 13384 14607 15734 16075 17603 18049 18807 18925 20356 20481 #> [12001] 20611 24230 24519 27683 29886 30043 30685 31915 32362 33369 34470 35298 #> [12013] 35974 36517 36684 36880 37408 37495 38262 38773 40287 41718 42451 44071 #> [12025] 44857 45605 46232 47210 49158   937   993  1069  1202  1520  1893  2201 #> [12037]  2570  2715  2973  3037  3403  3623  3679  4078  4361  4391  4992  5151 #> [12049]  5275  5399  6385  6685  7149  8102  8140  8176  8572  8869  9109  9246 #> [12061]  9423  9827 10113 10437 11164 11315 11846 11996 12698 12897 13113 13269 #> [12073] 13446 14089 14451 14882 14981 15195 15835 16493 17732 18926 19259 20357 #> [12085] 20812 21070 21224 21524 21660 21984 22685 24845 24914 24985 26375 26453 #> [12097] 26734 26807 26995 27684 28536 29660 30424 30758 31293 31631 31846 31985 #> [12109] 32701 33052 33776 34471 35299 37308 38017 38428 38945 40101 41624 42623 #> [12121] 43062 43429 43608 45606 46911 47008 47104 47419 48956   951   976  1203 #> [12133]  1417  1424  1542  1718  2040  2453  2621  2647  2668  2788  2993  3514 #> [12145]  3680  3708  4189  4222  4362  5369  5808  6353  7369  8063  8291  8370 #> [12157]  8943  9563 10483 10616 10933 11632 12143 13600 13760 14090 14185 14671 #> [12169] 15257 15312 15415 15735 16318 19205 19260 19996 20415 20612 21408 21773 #> [12181] 21837 23650 24018 24092 24435 25128 26376 26808 27857 28009 28537 29661 #> [12193] 29951 30213 31158 31986 32221 32884 36061 37929 38191 40459 40792 41170 #> [12205] 41549 42363 43982 44960 46618 46721 47009 47105 47211 47311 48220 48316 #> [12217] 48727  1010  1023  1275  1292  1490  1921  2041  2223  2393  2596  3038 #> [12229]  3351  3371  3547  3802  4050  4594  5525  5770  5881  7503  7812  8141 #> [12241]  8326  8413  8573  8794 10021 10191 10782 11114 11633 12244 13114 13709 #> [12253] 13982 15258 15313 15363 17296 18105 18739 19034 20177 20300 20940 24776 #> [12265] 26377 26875 27234 27308 28917 28997 29069 29523 30044 30686 30827 31294 #> [12277] 32065 32222 32363 32702 32972 34398 34967 35900 39036 39407 40874 41442 #> [12289] 41550 41806 41895 43063 44477 45973 46912 48502 48828  1111  1245  1584 #> [12301]  1681  1737  1822  1836  2265  3332  3422  3652  3858  3895  4535  4566 #> [12313]  4718  5430  5526  5916  6179  6284  6792  6928  7116  7260  7740  7894 #> [12325]  8244  8760  9247  9333  9648  9963 12744 13653 14186 14294 14727 15096 #> [12337] 15883 16863 18169 18491 19379 19567 20178 21149 21591 21661 22686 22766 #> [12349] 23500 24163 25129 25832 28455 29149 29223 30348 30425 30900 31159 31295 #> [12361] 33286 34399 36062 36685 38018 39148 39325 41264 42787 43511 44072 44274 #> [12373] 44572 45419 45607 45773 46619 46722 48042 49046   922   952  1083  1521 #> [12385]  1642  1769  2019  2079  2341  2597  2622  2816  3167  3404  3624  3653 #> [12397]  3786  3989  4079  4536  4960  5058  5118  5493  5557  6059  6608  6980 #> [12409]  7690  8032  8538  8688  8795  9564 10575 10617 10661 10739 11067 11493 #> [12421] 11536 12144 12331 12644 12898 13710 15148 15196 15512 15786 16253 18619 #> [12433] 19096 21006 21409 22201 23373 25199 25264 26044 26657 27931 28918 30045 #> [12445] 30608 30901 32223 32618 33053 33934 35217 35474 36162 36593 36686 37130 #> [12457] 37309 37930 39037 39408 39490 39751 41356 42180 43258 43983 44183 47106 #> [12469] 47520 47840 48627 49047  1024  1041  1442  1543  1585  1682  1719  1786 #> [12481]  2111  2571  2623  2926  3287  3314  3625  4162  4686  4756  4940  4961 #> [12493]  5059  5746  5771  6060  6216  6285  6354  8033  8177  8245  8292  9732 #> [12505]  9868 11899 13170 14728 15259 16494 20416 20552 20677 20875 21291 21662 #> [12517] 21985 22537 23322 24370 25978 26045 26237 26454 26735 27073 27309 27932 #> [12529] 28538 29887 30759 31080 31377 31632 32294 32532 33689 33861 34256 34968 #> [12541] 35734 36331 37847 38096 38513 38603 40972 41443 43430 43984 44961 45420 #> [12553] 46326 47632 47841   994  1100  1112  1399  1460  1635  1683  2042  2310 #> [12565]  2598  2694  2884  2927  3013  3515  3990  4508  4629  4719  5494  5809 #> [12577]  6093  6121  6386  6429  6753  6793  7150  7261  7504  7691  7783  8064 #> [12589]  8142  8827  9206  9382  9964 10114 10280 11165 11494 11580 11792 12296 #> [12601] 12332 12426 12475 12957 13812 13918 14138 14407 14778 15836 17297 18927 #> [12613] 19568 19748 19928 20482 20613 21838 22687 25409 25479 29224 29733 30214 #> [12625] 32295 32806 33217 34711 34785 35045 35300 36424 37409 38192 39409 39666 #> [12637] 40194 41171 41551 42086 42181 43162 43512 45877 47738 48628 48829   964 #> [12649]  1226  1258  1700  1770  1978  2112  2170  2394  2789  3039  3244  3372 #> [12661]  3516  3968  3991  4509  4785  5207  5810  5917  6609  7187  7370  7505 #> [12673]  8065  8143  8178  8828  8944  9649  9913 10618 10832 12188 12384 12531 #> [12685] 12801 13115 13983 14139 14187 15047 15097 15149 15953 16254 16976 17786 #> [12697] 18426 18984 19097 19798 20237 20301 21150 21525 22056 22335 22538 22767 #> [12709] 23173 23578 25688 26098 27153 28010 28688 29662 32224 32296 32447 32703 #> [12721] 33218 33690 33862 36777 36973 37310 37667 37753 40460 40793 41444 42087 #> [12733] 44184 46913 48221  1188  1384  1568  1598  1652  1806  1823  1940  2020 #> [12745]  2342  2858  3084  3194  3288  3479  3517  3917  3943  4163  4249  4392 #> [12757]  4537  4595  4870  4902  5031  5495  6122  6686  6721  6754  6929  7461 #> [12769]  8729  8796  8870  9424  9518  9914 10281 10525 10833 11019 11272 11945 #> [12781] 12958 15260 15954 17166 17787 17853 17917 19632 21592 22258 22606 23323 #> [12793] 23434 25063 26302 27685 28011 28292 28919 28998 30503 31472 31916 32619 #> [12805] 33522 33604 37209 37668 37848 38193 40794 43790 44185 44478 45227 45692 #> [12817] 46233 46816 47010 47312 47842 49159  1084  1214  1337  1385  1425  1473 #> [12829]  1491  1998  2202  2395  2454  2523  2648  2948  3085  3135  3270  3480 #> [12841]  3548  3626  3654  4423  4596  4962  5095  5152  5584  5614  6355  6903 #> [12853]  7328  7462  7854  7932  8829  9425  9733  9869 10526 10619 11020 11115 #> [12865] 11744 12385 12427 12802 12899 13171 13654 13813 13865 14245 15098 15364 #> [12877] 15837 16378 16977 17542 17788 19098 19495 19749 19867 20118 20358 21903 #> [12889] 21986 22539 23881 24915 25763 27310 28539 28920 30284 33863 37053 38604 #> [12901] 39580 40102 40195 41265 41807 42452 43259 44186 44573 45047 45693 47313 #> [12913] 48503 49048 49160  1113  1204  1227  1246  1359  1443  1492  1653  1922 #> [12925]  1999  2311  2365  2396  2695  2716  2817  3136  3195  3681  3733  4190 #> [12937]  4510  4786  5032  5241  5811  5844  6286  6318  6520  6646  7018  7295 #> [12949]  7692  7855  8945  9734 10232 10783 10883 10934 11362 13324 13984 14041 #> [12961] 14188 15099 15416 15572 16076 16190 16379 16746 17115 17425 18170 19380 #> [12973] 19434 19868 20179 20813 22688 23039 23174 24371 25335 27375 28540 29808 #> [12985] 30349 30609 31230 32533 33054 33691 33864 34400 36332 38194 40288 40552 #> [12997] 41808 42788 43064 43699 43985 44275 46066 48629  1042  1544  1569  1807 #> [13009]  1855  2000  2184  2312  2669  2859  3064  3196  3245  3454  3601  3918 #> [13021]  4080  4112  4363  4511  4993  5208  6430  6567  6981  7963  8246  8504 #> [13033]  8907  9565  9965 10383 10438 10704 11068 12333 12476 12745 12845 13549 #> [13045] 14246 14883 15458 15675 16077 16255 16914 17041 17492 17789 18427 19633 #> [13057] 20483 20678 21151 21987 22057 22467 22540 24019 25764 27525 28293 29306 #> [13069] 29442 30687 32066 34334 37581 37849 38263 38514 38865 39149 39224 39491 #> [13081] 40973 43700 44754 45328 47107 48130 48957 49049  1070  1101  1127  1400 #> [13093]  1426  1507  1522  2001  2095  2287  2500  2524  2717  2790  3168  4191 #> [13105]  4687  4720  4787  4903  5209  5527  5558  5983  6356  6867  7019  7188 #> [13117]  7693  8103  8730  9028  9075  9149  9469  9519 10063 10336 10527 10662 #> [13129] 10834 12051 12900 13057 13221 13550 14884 14925 15150 15314 15573 15736 #> [13141] 16380 16495 16555 16620 17493 18808 20302 20941 24436 24846 25765 27311 #> [13153] 28456 29809 31770 32067 32364 33055 34712 35046 35387 36063 36518 36687 #> [13165] 38097 38774 39581 39752 40196 42535 45228 46067 47108 48958  1338  1418 #> [13177]  2059  2113  2624  2744  3014  3859  4307  4334  5339  5496  6029  6061 #> [13189]  6180  6431  6868  7652  7694  8247  8946  9776  9828 10663 11069 11166 #> [13201] 11847 11946 12189 12334 12532 12846 13447 14189 14353 14982 16191 17604 #> [13213] 18681 20119 20614 20679 21467 22336 23813 23949 24638 26174 28611 28836 #> [13225] 29952 30426 30688 30902 31296 31693 32225 32885 32973 33056 33439 33523 #> [13237] 34257 35301 37582 38429 40375 41625 42889 43336 43791 44479 47212 47314 #> [13249] 47420 48043 48423 48830  1177  1276  1360  1444  1824  2080  2241  2455 #> [13261]  2625  2696  2885  3169  3197  3481  3627  5153  5651  5747  5772  6387 #> [13273]  6647  6930  8248  8293  8505  9520 11021 11793 12052 12245 12335 12477 #> [13285] 12533 12847 13814 14672 15151 15261 15459 16256 16439 16747 17359 17543 #> [13297] 20680 20740 21593 21904 22058 22468 22541 22768 22972 23040 23579 24020 #> [13309] 28921 29953 30689 31554 32534 34401 34786 35302 35648 36064 36163 36778 #> [13321] 37754 38098 38195 38515 38684 38866 39492 39919 40974 41172 41266 41626 #> [13333] 42088 44658 44962 45878 46068 46327 46527 47939 48959  1304  1401  1427 #> [13345]  2114  2134  2242  2266  2572  2718  2928  2949  3289  3734  3803  3831 #> [13357]  4274  4481  4941  5431  5683  5918  6030  6244  6521  6648  7051  8449 #> [13369]  8574  9150  9294  9426  9829 10439 10784 10884 12145 13711 13919 13985 #> [13381] 15048 17733 18106 18360 19147 19435 19799 20065 21526 21839 22259 22542 #> [13393] 22689 22904 26455 26528 26934 27376 28083 28294 29070 29150 29524 29954 #> [13405] 33370 35303 36425 37210 39150 40795 40975 42624 42890 43260 43431 46328 #> [13417] 47213  1114  1128  1305  1377  1386  1545  1894  2203  2366  2670  2902 #> [13429]  3860  3919  4018  4942  5181  5773  6319  6522  8104  8689  8871  9566 #> [13441]  9735  9777 10022 10192 10440 10576 10785 10835 11363 11634 12803 13448 #> [13453] 14190 14779 15460 15676 16319 16496 17042 17167 18171 19099 19800 19997 #> [13465] 20942 21351 21725 22607 22840 24093 24520 24573 24777 26658 27446 28012 #> [13477] 28295 28689 29372 29443 30504 30986 31081 31555 31694 32704 32886 33777 #> [13489] 34010 34097 34630 35649 37410 37669 40103 40553 43986 44574 47421 48960 #> [13501] 49161  1277  1293  1720  1771  1837  1871  2135  2313  2599  2791  3290 #> [13513]  3423  3549  3628  3944  4567  4688  5033  5497  5845  5952  6245  7227 #> [13525]  7653  7813  7933  8414  8797  9383  9689 10064 10148 10282 10337 10664 #> [13537] 11364 11745 12297 13058 15152 15461 18107 18861 19206 20238 21527 22260 #> [13549] 22543 22608 23580 24021 24231 24986 26809 27526 27768 28368 28999 30215 #> [13561] 31297 32974 33865 36594 36974 37131 38685 39582 39667 41173 41267 41719 #> [13573] 42089 42625 43609 44575 44858  1215  1228  1474  1643  1941  1956  2136 #> [13585]  2243  2456  2818  3571  3861  3992  4113  5276  5953  6755  7695  8034 #> [13597]  9778  9915 10115 10384 10577 10836 11273 11406 11947 15315 16192 16381 #> [13609] 17168 17605 18239 19685 19750 20615 21225 21905 22404 25265 28147 28369 #> [13621] 28612 28922 29663 29888 33440 33778 34011 34186 34557 35218 35388 35563 #> [13633] 36519 36779 37054 39326 39920 40104 40197 40716 41809 41896 42182 42536 #> [13645] 43163 43987 45694 47633 47940  1339  1957  2115  2314  2525  2697  2834 #> [13657]  2886  3065  3832  3920  4051  4192  4393  4449  4721  5432  5615  5710 #> [13669]  6152  6181  6357  6834  7189  7784  7964  9110  9151  9470 10149 10441 #> [13681] 10786 11581 11746 11900 12094 12699 12848 13500 14780 14839 14926 15417 #> [13693] 15462 15574 17665 17790 18562 21352 24022 24987 26586 28765 29225 30285 #> [13705] 30427 30610 31082 31298 31847 34258 35735 38775 40461 42891 43164 44187 #> [13717] 45421 45508 45879 46147 46620 47214 47739 48222 48504 48630  1259  1278 #> [13729]  1402  1523  1654  2043  2081  2244  2267  2315  2477  2526  2769  2792 #> [13741]  3170  3333  3787  3945  4114  4139  4450  4652  4813  4994  5210  5370 #> [13753]  5585  6217  6246  7329  7545  8506  8908  9690  9779 10023 10150 11222 #> [13765] 11447 11635 12428 12596 13325 13920 13986 14191 14508 14673 15197 15677 #> [13777] 16621 16748 17544 17606 17854 18240 18428 19100 19261 19869 19998 20359 #> [13789] 20417 20814 21152 21468 22135 23243 24437 24708 25336 26099 27312 27858 #> [13801] 28148 28613 30286 30428 30505 31299 32535 32705 33524 33935 39668 40376 #> [13813] 41268 42626 43261 43792 44276 46426 47011  1324  1493  1524  1546  1636 #> [13825]  2137  2527  2719  2835  3198  3455  3682  3735  3804  4164  4193  4275 #> [13837]  4335  4512  4836  5060  5400  5652  5812  5984  6320  6388  6568  7296 #> [13849]  7696  7741  7895  8450  9207  9295  9830  9916 10233 11116 11448 11948 #> [13861] 11997 12429 12645 13501 13601 13866 14091 14452 14563 15513 15625 16193 #> [13873] 16915 16978 17298 17426 17545 17734 17791 17855 18429 18682 19999 20815 #> [13885] 21410 21469 21663 21774 22337 23041 23244 24778 25549 25896 27527 29307 #> [13897] 30429 32068 33287 33779 34259 34335 35047 35564 36881 37496 37931 39327 #> [13909] 39753 40638 40976 41552 41627 42453 43165 43793 44576 44859 46069 46817 #> [13921] 47422 47843  1279  1306  1445  2096  2268  2343  2600  2671  2860  3199 #> [13933]  3405  3833  4482  4814  5586  6062  6358  6722  6756  7742  8327  8690 #> [13945]  9296 10385 10528 12246 13059 13385 13815 14092 14408 14453 15100 15153 #> [13957] 15884 15955 16078 16800 17494 18241 19035 20000 21470 21594 22338 23324 #> [13969] 23736 24232 25550 25689 25833 26659 29000 30350 30828 30987 31473 34882 #> [13981] 35475 35736 36249 37670 39151 43166 43337 43432 44480 48317 48831  1205 #> [13993]  1494  1547  1599  1701  1808  1958  2288  2478  2501  2626  2745  2929 #> [14005]  3015  3040  3137  3655  3834  4194  4250  4451  4963  5211  5242  6247 #> [14017]  7619  7654  7856  8105  8211  8249  8415  8451  8761  8872  8947  9297 #> [14029]  9427  9966 10386 10620 10705 10935 10979 11636 11794 11998 12146 12478 #> [14041] 13116 13270 13602 14608 14885 14983 15049 15262 16006 16079 16131 16194 #> [14053] 16801 16979 17169 17735 18862 19751 19870 20001 20553 21840 22059 22339 #> [14065] 24233 24574 25337 26238 27074 27154 27235 28614 30430 30760 31633 32887 #> [14077] 33441 33692 33780 33866 34098 34260 34713 36250 37211 37497 39225 39583 #> [14089] 41073 41269 41810 41989 45048 46528 47844 47941 48631  1216  1475  1721 #> [14101]  1787  1809  2097  2204  2431  2649  2698  3016  3066  3223  3315  3736 #> [14113]  3862  4195  4223  4364  4837  5119  5371  5528  5711  5919  6063  6321 #> [14125]  6488  6569  6794  6869  7583  7997  8691  9428 10065 10787 10936 11999 #> [14137] 12959 13001 13271 13551 13816 14093 15838 16497 16556 17427 19036 19436 #> [14149] 20418 21153 21226 21471 22060 22405 22609 22905 23113 23325 23374 23737 #> [14161] 25200 25410 25979 27933 29071 29373 29664 30046 30761 31231 31634 32297 #> [14173] 32536 32620 34099 36882 38019 38686 39038 39493 40289 40377 42789 44577 #> [14185] 44963 45049 45880 46914 48832 48961  1294  1428  1872  1959  2154  2245 #> [14197]  2289  2720  2819  3456  3656  3863  4276  4452  4630  5096  5277  5401 #> [14209]  5684  5813  5954  6248  6359  6489  6931  7297  7998  8507  8731  8909 #> [14221]  9298 10024 10151 10387 11316 11693 12190 12247 12646 13117 13272 13603 #> [14233] 14042 14247 14295 14354 14509 15263 16382 18683 18740 18863 19207 19496 #> [14245] 19929 20484 20943 21071 22610 24023 24916 24988 25201 25338 25480 26100 #> [14257] 26876 26935 29734 29889 30506 32365 33371 33525 33605 33781 34883 35304 #> [14269] 36426 37212 39039 40554 40717 41174 41270 42977 44578 45509 45774 46070 #> [14281] 46915 47634 48505 49050  1525  1666  1702  1923  2044  2344  3457  3864 #> [14293]  4196  4365  4943  5120  5587  5955  6218  6687  7262  7546  7814  8452 #> [14305]  8873  8997  9152  9334  9917  9967 10152 11117 11274 11637 12095 12191 #> [14317] 12248 12336 12901 13222 13987 14355 14886 14984 16498 17360 17607 18050 #> [14329] 19497 20303 20419 21292 23245 23651 23950 24709 25130 28149 29001 29890 #> [14341] 30123 31378 31474 32706 33132 33782 34714 35812 38099 39494 39669 40105 #> [14353] 41074 43885 44277 44860 44964 45050 47315 47521 47740 47845 48223  1260 #> [14365]  1361  1403  1429  1508  1586  1655  1722  1738  1873  1979  2002  2060 #> [14377]  2138  2548  2820  2861  2903  3138  3271  4366  4568  4631  5182  5340 #> [14389]  5559  5846  6031  6523  7655  7999  8539  8653 10529 10578 11365 11537 #> [14401] 12298 13386 13817 14887 15514 16916 19316 21528 21841 22136 22469 23114 #> [14413] 23175 23501 23882 24164 24308 24639 25131 27155 27769 30216 30507 32226 #> [14425] 32537 32707 33526 33693 35650 35813 37213 38264 38776 38867 40796 41553 #> [14437] 41720 41897 41990 43338 43433 43513 47215 47423 49250  1307  1587  1772 #> [14449]  1942  2061  2171  2367  2479  2502  2601  2672  2950  2994  3139  3657 #> [14461]  3683  3805  3969  4569  4838  5433  5712  5814  6219  6249  6360  6389 #> [14473]  7020  7298  7743  8250  8453  8732  8874  8948  9208  9384  9605  9780 #> [14485] 10283 10442 10579 10706 11070 11538 11795 13326 13818 14140 14248 14781 #> [14497] 15154 16195 17792 18361 18563 18985 19498 19752 20304 20616 21227 21472 #> [14509] 21529 21595 23115 23246 23652 23814 24438 24917 25619 26529 28457 29891 #> [14521] 30124 32538 36780 39410 40555 41445 45775 45974  1325  1656  1684  1723 #> [14533]  1739  1874  1895  1943  2246  2345  2746  2793  2821  3572  3602  3970 #> [14545]  4722  4904  4944  4964  5183  5372  5713  6032  6094  6490  6649  7117 #> [14557]  8212  8575  8617  9335  9521  9567  9650 10025 10443 10530 10580 10788 #> [14569] 11449 12147 12192 12299 12534 12902 13118 13921 14729 15264 16383 16980 #> [14581] 17299 17495 18051 18620 20120 20305 21228 21842 22690 22906 23375 23738 #> [14593] 24575 25620 25690 28370 28458 28837 28923 29151 29444 30217 30431 31475 #> [14605] 33288 34012 34100 34336 34558 34631 35901 36427 39495 40015 40198 41991 #> [14617] 42454 44278 46529 48506  1461  1570  1924  2185  2316  2346  2627  2822 #> [14629]  3246  3629  3658  4308  4788  4839  4905  5373  5815  6033  6390  6757 #> [14641]  6870  7052  7584  8000  9209  9248 10066 10116 10581 10885 11223 11848 #> [14653] 11901 12053 12148 13119 13604 14043 14296 14454 14927 15101 15155 15198 #> [14665] 15678 16320 16981 17116 17918 18108 20002 21906 22470 23247 23815 24234 #> [14677] 24779 25834 28459 29525 29955 30829 31083 31771 33694 34402 34715 36251 #> [14689] 36975 37411 37850 38196 38777 39754 40106 40556 41357 41721 41811 43434 #> [14701] 43610 49251  1526  1600  2247  2602  2673  2770  3067  3272  3482  3573 #> [14713]  4081  4336  4394  4689  4723  5212  5498  7021  7463  7697  8371  8540 #> [14725]  9429  9918 10886 11022 11167 11849 12746 13327 13605 14249 15050 15839 #> [14737] 16557 16677 17228 17361 17666 17856 18298 18621 18741 22544 24372 24780 #> [14749] 25202 25835 27313 27859 29072 29810 30218 30351 30508 31772 33057 33695 #> [14761] 34559 34632 34884 34969 35048 35305 35476 35651 35902 36252 36781 37132 #> [14773] 37671 39040 39921 42455 47522 48131 48424  2116  2205  2674  2862  3017 #> [14785]  3140  3171  3835  4082  4140  4337  5097  5588  5985  6064  6322  6932 #> [14797]  6982  7506  7744  7785  7815  8179  8454  8576  9919  9968 11949 12249 #> [14809] 14192 14356 15316 15365 15787 16007 16749 19317 19381 19801 21229 23376 #> [14821] 23739 24989 25132 25203 25836 25897 26530 26996 27770 29445 29665 30125 #> [14833] 30219 30287 31379 31695 31848 31917 32069 32366 32807 33606 34787 35975 #> [14845] 36253 36976 37755 41992 42090 42364 42978 43701 43794 43886 44659 48132 #> [14857] 48425 49162  1419  1615  1740  1896  1960  2172  2206  2397  2480  3086 #> [14869]  3103  3273  3788  4052  4115  4513  4538  5774  6361  6391  6570  6758 #> [14881]  6871  6933  7371  8654  8949  9249  9606 10531 10837 11694 11747 12000 #> [14893] 12054 12804 12903 13223 13502 13761 14193 14357 15156 15679 17117 18109 #> [14905] 18242 18299 18564 18684 18809 19686 21072 22471 23435 24640 25133 25837 #> [14917] 26046 26531 27156 28766 29308 29811 30988 31380 32621 33289 33936 34788 #> [14929] 35737 35903 36065 37311 37412 37756 41446 42272 44384 45229 46723 47316 #> [14941] 48133  1404  1875  1925  2224  2368  2930  3041  3709  4019  4116  4197 #> [14953]  4367  4653  4690  4840  5402  5816  5847  6123  6362  6610  6934  7330 #> [14965]  7547  8001  8213  8294 11450 13387 14782 15157 15265 15515 15575 15788 #> [14977] 16802 16917 16982 17229 17428 17793 17919 18243 19382 19687 19802 21154 #> [14989] 22340 24165 25204 26810 27609 28013 28541 29152 29309 30220 34261 36428 #> [15001] 36595 36782 41075 41628 42456 43702 44755 44965 45608 45776 46234 46427 #> [15013] 46530 48224 48426 48728 49163  1387  1405  1753  2155  2186  2771  3483 #> [15025]  3574  3789  3971  4053  4165  4309  5061  5243  5403  5616  6363  6491 #> [15037]  6524  7372  7507  7698 10284 10444 10740 12386 12535 12747 13606 14730 #> [15049] 14985 15366 16008 16196 16257 16321 16864 17118 17496 18430 19569 19803 #> [15061] 19930 22261 22341 22691 23740 23883 25339 25411 25481 28084 28371 29002 #> [15073] 29892 31300 31987 32888 32975 33442 34187 34970 36164 36254 36333 37133 #> [15085] 37851 38020 38430 39041 39834 41447 45777 46071 46428 47741  1446  1476 #> [15097]  2398  2528  2721  2931  3104  3291  3373  3710  3737  4277  4539  4965 #> [15109]  5184  5617  6525  7373  7548  7620  9870 10445 10621 11407 13120 13328 #> [15121] 13867 13988 14840 15051 15576 16132 16197 16258 16918 17043 18431 19634 #> [15133] 20681 21293 22406 24235 24710 25205 26378 26532 27157 28150 28296 29735 #> [15145] 30221 31084 32708 33219 33867 35389 35565 35904 36165 36783 37214 38265 #> [15157] 38349 38687 39152 39496 41448 41812 42091 42979 44660 45695 47635 47742 #> [15169] 47942 48044 48507 49252  1447  1477  1657  1788  1810  1926  1961  2772 #> [15181]  2904  3806  3993  4278  4424  4453  4540  4654  4691  4945  5121  5848 #> [15193]  6095  6182  6571  6688  8251  8416  9210  9299  9607 10532 11118 12479 #> [15205] 13060 13388 13712 15317 15463 15956 16009 16322 16384 17044 17119 17230 #> [15217] 17362 17429 17667 17736 18052 18864 19037 19148 19688 20617 20741 21411 #> [15229] 21596 21843 22611 22769 23326 24373 25838 26175 28014 28085 28767 28838 #> [15241] 29736 31696 32298 33290 33607 33696 34013 34472 34971 35652 36066 38021 #> [15253] 38100 38868 39411 42627 42790 44279 44579 45975 46235 46329  2098  2117 #> [15265]  2225  2347  2699  2747  2887  3292  3352  3374  3603  3659  3836  4279 #> [15277]  4395  4724  4815  5278  5341  5434  6250  6526  6723  7417  7464  7508 #> [15289]  8252  8910  9211  9608 10622 11850 12480 13121 13389 13713 13762 14297 #> [15301] 14358 14510 14783 15102 15199 15840 18565 18622 19262 19635 20121 21073 #> [15313] 21530 22407 22612 22841 23042 23502 23884 25340 25412 26047 26736 26997 #> [15325] 27314 27377 27686 27771 28086 28297 30509 32622 32976 33058 33372 34101 #> [15337] 34633 36067 36883 37413 38516 39226 41629 42628 43514 44580 44861 45329 #> [15349] 46072 47216 48729 49253  1789  2021  2348  2675  3994  4425  4906  5459 #> [15361]  5499  5685  5920  6983  7465  7699  7934  8328  8455  8830  8911  9076 #> [15373]  9250  9430  9831  9920 10533 10623 11275 11408 11495 12250 12481 12700 #> [15385] 13449 13503 13868 14141 14455 14609 14674 14784 15200 15367 16558 17231 #> [15397] 18053 18492 18685 18742 19038 19208 19804 19871 20618 21074 21353 21473 #> [15409] 23116 23248 24918 27236 28372 28615 29073 29446 30222 31918 33059 33527 #> [15421] 34102 35390 35653 36334 36977 37055 37852 37932 38869 39412 39584 40199 #> [15433] 40378 42704 43435 44481 44661 44862 45778 46330 47523  1495  1509  2022 #> [15445]  2290  2794  2974  3458  3684  3946  4368  5122  5185  5213  6432  7118 #> [15457]  7374  7509  7786  8066  8144  8329  8372  9029  9111  9691  9736  9781 #> [15469]  9832 10446 10741 11582 11796 12748 12849 13273 13989 14044 14094 14785 #> [15481] 16080 17668 18300 18566 18865 19209 19753 20682 21075 21294 22472 23043 #> [15493] 23377 23503 23816 24439 24576 24847 25551 26176 27315 27610 28298 29153 #> [15505] 29447 29956 30047 30352 30762 32448 33133 33220 35131 36520 36784 36884 #> [15517] 37498 38688 39153 40107 40200 40290 40557 40797 41898 43339 44385 44662 #> [15529] 46236 47317 48134  1496  1658  2399  2650  3224  3274  3353  3807  4054 #> [15541]  4083  4570  5279  5404  5618  6096  6872  8180  9112  9300  9336  9522 #> [15553]  9737 10484 10582 11366 12597 13061 14142 15052 15266 15577 15841 16133 #> [15565] 16622 16750 17300 20360 20485 20742 20816 21597 22061 22202 23044 26048 #> [15577] 28542 29310 29448 30353 30989 31085 32889 33373 33443 33697 35049 36335 #> [15589] 37056 37499 38266 38689 38778 39755 41175 41271 41899 41993 42791 45976 #> [15601] 46148 47318 47524  1497  1510  1685  1856  1980  2269  2503  2863  3042 #> [15613]  3225  3424  3518  3896  4020  4338  4871  4966  5986  7375  7418  7585 #> [15625]  7745  8950  9523 10026 10534 10624 10838 11451 11638 11748 11950 14610 #> [15637] 15418 16983 17430 17608 17669 17969 18110 18986 19570 19931 20944 21474 #> [15649] 21598 21775 24166 24374 26303 27237 27611 27772 28373 28924 29074 29226 #> [15661] 30354 30830 31160 31301 31849 31988 32070 32890 33134 35132 36429 36596 #> [15673] 37500 38101 38197 38946 39670 40108 40462 40718 41900 42092 42537 42705 #> [15685] 43065 43611 43887 44756 47424 47636 48833  1548  1637  1644  1686  1773 #> [15697]  1811  1876  1944  2270  2291  2432  2676  2773  2932  3172  3484  3738 #> [15709]  4084  4117  4339  4571  5062  7228  8295  9030  9077  9921 10193 10285 #> [15721] 10485 11023 11071 11224 11851 11951 12001 12149 12536 13002 13390 13922 #> [15733] 14095 14611 15737 16623 17363 17609 17970 18301 19932 20817 21155 21531 #> [15745] 22842 23817 24024 24309 24711 25266 25691 25766 25898 25980 28374 29003 #> [15757] 29227 29812 31556 32449 33608 36885 37215 37583 38947 39328 39413 40201 #> [15769] 42538 43515 44966 45422 47217 49051  1601  1638  1703  2173  2226  2573 #> [15781]  2933  4141  4514  5435  5500  5619  5817  6153  6364  6689  6904  6984 #> [15793]  7053  7816  8181  8875  9153  9782 11317 11852 11952 12850 13990 14731 #> [15805] 15201 15267 15626 15680 16081 17546 17794 18567 19210 20486 20683 22613 #> [15817] 22843 25206 27773 28460 28925 29311 29666 29957 30288 30355 30432 30990 #> [15829] 32153 33060 33291 33374 35050 37584 38350 39042 39227 39671 41358 42980 #> [15841] 43167 44663 45230 45881 46621 49354  1549  1825  2023  2045  2099  2174 #> [15853]  2864  2888  2951  3173  3316  3354  3425  3485  3972  4198  4251  4340 #> [15865]  4396  4597  4872  4907  4967  4995  5214  6392  6724  7331  8067  8296 #> [15877]  8456  8733  9651  9738  9871 10486 10937 11276 11318 11639 13607 13869 #> [15889] 16385 17431 18172 19039 20003 20066 21007 22137 22545 22614 22770 23653 #> [15901] 24577 24712 24990 25064 25839 26101 26304 27158 27238 28375 28461 28690 #> [15913] 29154 30510 31989 33221 33444 33698 33868 35306 35738 36166 36978 37585 #> [15925] 38431 39043 39585 39835 41994 42539 44581 44757 46724 46818 48427  1790 #> [15937]  1857  2082  2156  2271  2317  2529  3043  3334  3947  4085  4118  4757 #> [15949]  5063  5501  5714  5775  5956  6251  6287  7419  7586  7746  8618  8692 #> [15961]  8831  9568  9609  9783 10234 10388 10938 11024 11640 12096 12150 12904 #> [15973] 13062 13224 13608 16751 17120 19211 19383 20004 21907 22546 22907 23654 #> [15985] 24236 24310 24641 25134 25552 25767 26998 27378 28151 29600 29667 31476 #> [15997] 31850 32299 32977 34403 35477 36068 36688 38198 38267 39044 39836 40798 #> [16009] 40875 41722 42183 43612 44188 44482 44582 45231 45423 45882 46237 48508 #> [16021] 49355  1588  1616  1858  1877  1962  1981  2003  2248  2504  2530  2995 #> [16033]  3105  3335  3459  4055  4341  5882  6527  6650  7299  7656  9251  9301 #> [16045]  9431  9692  9833  9922 10583 10665 11409 11496 11539 11797 11902 13003 #> [16057] 13172 13450 13991 14888 15268 15318 15842 16323 19040 19212 19499 20743 #> [16069] 21908 22262 22973 24781 25482 25553 25768 25840 26102 26305 27316 29526 #> [16081] 30763 30991 32450 32539 32623 32709 34560 35219 36430 36785 36979 39045 #> [16093] 40876 41723 41901 42365 43066 44189 44967 45051  1724  1791  2100  2272 #> [16105]  2369  2505  3141  3293  3375  3685  3865  4119  4454  4841  6611  6651 #> [16117]  6835  7054  7466  8145  8998  9923 10742 11583 12387 12482 13004 13609 #> [16129] 14298 14928 16082 16386 16440 16559 17737 17857 18987 19437 20122 20361 #> [16141] 20876 20945 21354 21532 24311 26660 27075 27934 29155 30126 34014 34262 #> [16153] 35220 35307 35478 36069 36980 37586 38351 38517 39046 40719 42366 42457 #> [16165] 43168 43516 44073 44664 44758 47012 47109 48135 48632 49356  1602  1982 #> [16177]  2024  2227  2506  2651  2795  2823  2865  3068  3426  4166  4598  4789 #> [16189]  6393  6572  7510  8106  8373  8832  8876  9969 10584 11903 12002 12193 #> [16201] 12483 13063 13819 13870 14732 15202 15578 16624 17670 18743 18810 19041 #> [16213] 19101 19571 20123 20362 20877 20946 21008 21230 21664 22263 22408 22908 #> [16225] 22974 23117 23249 25899 26306 26456 27687 27935 28231 29228 30433 30992 #> [16237] 31381 31851 34885 36070 36167 36521 36689 37587 38022 39414 41813 42273 #> [16249] 42629 43613 44190 45052 45140 45779 46622 47425 48509 48633  1945  2249 #> [16261]  2722  2836  3406  3604  3739  3897  4086  4369  4908  4968  5034  5405 #> [16273]  5436  6183  6459  6725  7022  7151  7817  8068  8253  8798  8877  9031 #> [16285]  9569  9784 10487 11277 11904 11953 12430 12749 12960 13552 14359 15269 #> [16297] 15419 15885 17045 17432 19318 20878 23655 24782 24919 25981 27528 28015 #> [16309] 28839 30611 32540 33445 33528 34972 35391 36071 36522 37057 37134 37414 #> [16321] 37933 40016 40977 41995 42367 42706 42892 43703 43988 45053 45510 47943 #> [16333] 48318  2025  2175  2457  2677  2905  2934  3142  3247  3317  3427  3660 #> [16345]  3808  3866  3973  4167  4199  4599  4873  5280  5311  5342  6220  6528 #> [16357]  7152  7376  7467  7700  8619  8912  9032  9302  9652  9834 10117 10286 #> [16369] 10625 11319 11853 12251 13504 13763 13992 14511 14675 15053 15579 16803 #> [16381] 17121 17795 19500 19805 20124 20180 20420 21909 22264 22409 22771 23250 #> [16393] 23581 26049 26239 27239 27688 29004 29601 32300 33375 34015 34716 34973 #> [16405] 35051 39228 43888 44280 44583 45696 47319 47426 47637  1878  2062  2318 #> [16417]  2481  2866  3200  3974  4632  5154  5186  5921  5957  6065  6154  7084 #> [16429]  8297  8330  9078  9785  9970 11497 12252 12750 13820 13923 14456 15054 #> [16441] 15738 15789 15886 16984 18362 18988 19149 21076 21295 22342 22975 23885 #> [16453] 24578 24848 26811 27936 29005 32071 33222 33292 34404 34561 39415 39586 #> [16465] 40202 41359 43614 43795 45424 45697 45977 46331 47743 47846  1687  1983 #> [16477]  2026  2458  2482  2574  2952  3428  3686  4342  4946  5244  5987  6492 #> [16489]  7468  7587  8107  8417 10287 10338 10626 11072 11168 11584 12055 12905 #> [16501] 13005 14409 14733 15957 16134 16919 16985 17547 17671 17971 18686 18928 #> [16513] 20684 21776 21844 22547 22909 23118 27860 28016 28299 29737 30048 32227 #> [16525] 34886 35308 36597 36690 37588 38779 39229 39837 40017 40291 40877 41814 #> [16537] 42707 43989 44191 44483 45232 46073 46623 49254  1667  1725  1897  2063 #> [16549]  2083  2228  2628  2723  3174  3519  3948  4021  4120  5064  5281  6034 #> [16561]  6323  6394  6690  7818  8108  8254  8331  8374  8418  8508  8577  9033 #> [16573]  9079 10339 11954 13714 14096 14250 14299 15681 15887 16324 17796 18173 #> [16585] 19263 21777 23656 26533 27529 27861 29006 29527 30434 31302 31919 32808 #> [16597] 33446 34016 34974 35309 35566 36786 39329 40379 40639 42893 45141 46531 #> [16609] 47427 47847  1859  1879  1898  2292  2748  2867  4455  4909  5282  5715 #> [16621]  5988  6252  7511  7857  7965  9786 10288 10340 10585 11025 11641 11749 #> [16633] 12003 12056 12537 12598 13006 13505 13553 15516 16325 16441 17548 17672 #> [16645] 18054 18111 18493 19501 19689 21077 22772 23504 26103 26534 26587 26737 #> [16657] 28087 30049 34103 35310 36523 38432 40203 42093 42981 43067 44074 44281 #> [16669] 45233 45780 46332 47525 48428  1704  2483  3336  3765  3975  5155  5374 #> [16681]  5776  5818  5883  6184  6460  6529  6612  8214  8999  9154  9610  9693 #> [16693] 10153 11026 11119 11169 11642 11854 11955 12300 12647 13610 13924 14360 #> [16705] 14457 14612 16198 17673 18302 19213 19264 19636 19933 20818 21296 21355 #> [16717] 21726 21845 23886 26104 26661 27240 27689 29813 30612 31086 31477 34405 #> [16729] 35133 35567 37672 38870 40109 40380 41076 41360 42708 42894 43517 43615 #> [16741] 44282 44863 45054 46074 46624 46725  1741  2027  2084  2229  2273  2459 #> [16753]  2868  3018  3143  3294  3376  3460  4168  4252  4280  4343  4600  4725 #> [16765]  4816  4910  5283  5502  5620  5748  7153  8146  8578  8693  8734  8762 #> [16777]  9000  9471  9924 10389 10447 11585 11798 12151 12194 12805 13173 13993 #> [16789] 14676 14986 16326 16560 18244 18363 18929 18989 19690 21009 22138 22343 #> [16801] 22773 24375 24849 24991 25341 25413 26050 26535 26738 27690 27774 28616 #> [16813] 29374 30127 30356 31382 32978 33869 34337 34562 35739 38605 39416 39497 #> [16825] 39587 39672 40381 40463 42094 42184 46532 46625 46819 47428 48319 48834 #> [16837]  1774  1880  2230  2370  2796  2837  2869  3106  3144  3318  3575  5123 #> [16849]  5503  5589  5777  5958  6288  6613  6795  6836  8375  8509  8913  9155 #> [16861]  9385  9787 10627 10666 10707 11410 12253 12538 12751 12906 13391 13611 #> [16873] 13655 13871 14045 14300 14512 14889 15790 16327 16986 17674 18364 18432 #> [16885] 18494 19384 19572 20363 21010 22774 23505 23657 24094 24237 24312 24642 #> [16897] 24783 26588 26812 29075 29738 30831 31697 32809 32979 33609 34789 35134 #> [16909] 37757 40292 40799 40978 41724 42709 47526 48136 48835  1826  2004  2797 #> [16921]  3630  3837  3921  4087  4426  5187  5437  6035  6614  7263  7332  7701 #> [16933]  8147  8579  9925 10289 10667 11170 11411 11540 11586 12337 12539 12701 #> [16945] 12752 12806 13122 14143 14251 14564 14929 15055 15791 15888 16499 16625 #> [16957] 17301 18433 20239 20879 20947 21475 22265 22615 22910 23436 23582 24238 #> [16969] 24920 25841 26240 26999 27862 28543 30764 31161 32980 37216 38352 39047 #> [16981] 39498 39756 39922 40878 41361 41902 41996 42274 42630 42895 42982 43518 #> [16993] 44484 44864 44968 46429 47638 47944 48137 48634 49255  1927  2870  3275 #> [17005]  3429  3486  3631  4601  4842  5343  5460  5560  5884  6493  7085  7264 #> [17017]  7657  7747  8109  9034 10390 10535 10668 10839 11027 11073 11412 11695 #> [17029] 12004 12097 13274 13612 13872 15580 16865 16920 17610 17858 18434 19265 #> [17041] 20421 20487 21727 24025 24167 25267 27241 27775 28300 28462 29229 30128 #> [17053] 30357 35392 35654 36598 36981 37934 38268 38518 39048 39330 39588 39757 #> [17065] 41449 41815 43796 43990 44283 45698 45781 45883 48225 49052  1827  2176 #> [17077]  2433  2531  2575  2603  2953  3790  4169  4224  4253  4344  5035  6289 #> [17089]  6573  6935  7055  7858  7935  8002  8069  9337  9386  9835 10290 10391 #> [17101] 10488 11171 12195 12431 12753 14046 14361 14458 14677 15581 16500 16561 #> [17113] 16678 17170 17364 17675 18245 18930 19150 19319 19872 20306 21156 22911 #> [17125] 24440 24992 25268 26105 26177 26307 28088 28926 30223 32154 33699 34406 #> [17137] 36982 38690 38948 42896 45782 45884 47639 49357  1838  2177  2349  2400 #> [17149]  2629  2724  3487  3687  4281  4874  4947  5284  5989  6759  7819  8763 #> [17161]  9788 10194 10291 10628 11028 11587 12196 12648 13007 13064 13451 13506 #> [17173] 15627 15682 16987 17122 17302 17549 17972 18931 19266 19385 19637 20619 #> [17185] 21412 21599 22062 23887 25269 25692 26308 26457 27076 27530 28089 28232 #> [17197] 29739 31087 31383 31773 31852 32981 33223 33293 34473 34717 35221 35655 #> [17209] 36886 37312 37501 38519 40110 41176 42185 45511 45609 46916 47945  2532 #> [17221]  2749  2824  3107  3520  3661  3711  3740  3809  3867  3898  5344  5778 #> [17233]  6185  6324  7333  7621  7748  7966  8003  8035  8419  8799  9653 10708 #> [17245] 11120 11172 11696 12484 13008 13507 14252 14301 14786 15683 15889 16442 #> [17257] 16626 16804 17797 18495 19754 20819 22266 22473 22548 23327 23951 24441 #> [17269] 24784 25414 25693 26241 26589 29449 29528 31635 31853 32624 33376 34887 #> [17281] 34975 35222 35656 35905 36887 37313 38102 38199 38269 38606 39499 40640 #> [17293] 46149 46820 46917 47320 47946 49358  2157  2207  2401  2434  2484  2549 #> [17305]  3201  3355  3488  3632  3712  4056  4170  4282  4397  4692  4790  4996 #> [17317]  5036  5215  5529  5561  5716  6461  7229  7967  8541  8655  9387  9611 #> [17329] 10154 10195 10235 10448 10536 10629 11452 11541 11643 11855 12485 12649 #> [17341] 12754 13009 13821 14410 15582 16135 16328 16562 17232 18246 18623 20181 #> [17353] 21078 21665 22410 23378 24993 25621 26458 27863 28017 28544 28927 29375 #> [17365] 30690 31774 31920 33447 34104 34634 35906 36888 37058 38023 38780 39230 #> [17377] 39758 43340 44485 45610 47321 48320  2139  2319  2435  2798  3019  3145 #> [17389]  3430  3713  3995  5406  5530  5653  5717  6652  6691  6726  7469  8004 #> [17401]  8182  8694  9113  9252  9338  9836 10067 10196 10669 10789 11278 11905 #> [17413] 12057 12540 13065 13554 16387 17611 18247 18568 18811 20307 20554 20620 #> [17425] 22844 25270 25694 25842 26662 27242 28463 29007 29230 29529 32228 33610 #> [17437] 33870 34338 34888 35135 37217 38781 39154 39673 40204 40464 40641 41077 #> [17449] 41362 42368 45142 47013 47527 48321  1963  1984  2118  2485  2550  3175 #> [17461]  3276  3766  3976  4057  4310  4370  4541  4693  5188  5922  6097  6186 #> [17473]  6253  6365  6760  6936  7658  7859  8542  8735  9001  9524 10790 11856 #> [17485] 12961 13066 13392 13764 14362 14930 15890 16010 16329 17233 17550 17612 #> [17497] 17973 19214 21533 21728 22474 22616 23379 24713 25695 25769 25843 27243 #> [17509] 27612 28464 29893 31557 31854 32072 33224 33871 35393 36072 36787 36983 #> [17521] 37135 37758 37935 39674 41272 41363 41997 43169 43341 44386 46626 48045 #> [17533] 48138 49164 49359  2350  2371  2460  2799  2838  3248  3550  3605  3741 #> [17545]  4121  4142  4456  4483  5156  5285  6036  6098  6873  7470  8036  8255 #> [17557]  8543  8580  8764  8833  9872 10236 10887 11453 12807 13452 13656 13925 #> [17569] 14302 15319 15628 17920 18569 19102 19438 19638 19755 19806 20182 20240 #> [17581] 20744 21011 22692 23583 24095 24521 24850 25207 25342 25844 26178 26459 #> [17593] 27531 28090 28376 28545 28768 29740 30224 30511 31636 32810 33783 34017 #> [17605] 36431 36524 39759 39838 40205 40465 41078 41273 42369 42710 43991 44075 #> [17617] 45330  1946  2064  2372  2678  3087  3489  3742  3838  3868  3899  4058 #> [17629]  4143  4171  4542  4911  5686  6574  6653  7420  7787  9253 10292 11857 #> [17641] 12851 13329 13453 13508 13555 13657 13873 14931 15517 15684 15891 16388 #> [17653] 17497 17974 18112 18174 18624 18866 19439 19807 20125 20308 21157 21356 #> [17665] 22203 23437 24313 25982 26590 27532 27613 28018 28091 28691 29231 29530 #> [17677] 30289 30903 31637 34188 34635 35052 35394 36255 37415 37759 38949 39923 #> [17689] 40111 42983 43889 45783 46238 46918 47429 47640  1964  2119  2178  2274 #> [17701]  2652  2750  3069  3146  3176  3295  3337  3377  3714  3810  3839  4572 #> [17713]  4791  4875  5065  5286  5312  6124  7023  8037  8376  8457  8951  9114 #> [17725]  9525 10489 10537 10670 11644 11799 13010 13225 13874 13926 16136 16199 #> [17737] 17551 17975 18867 19215 20488 20685 20820 21846 22617 24522 25271 25343 #> [17749] 26051 26106 26379 26536 27000 27864 28692 29531 30050 30435 30691 32982 #> [17761] 34189 36984 39155 39331 40466 41998 42370 42711 42792 43992 44284 45611 #> [17773] 46150 46239 47744 47848 48730 49165  2187  2461  2576  2954  3108  3147 #> [17785]  3226  3378  3431  3490  3949  4345  4398  4457  4515  5098  6066  6187 #> [17797]  6221  6530  7154  8656  8695  9115 10490 11121 11645 12152 12197 12254 #> [17809] 12486 14194 14411 14678 14787 15320 15464 15518 16083 18248 21012 22845 #> [17821] 23251 26591 27447 27614 28546 29008 29741 30290 31698 32229 32811 33448 #> [17833] 35136 36336 36691 36889 37416 37760 38433 41177 41274 41364 42540 42897 #> [17845] 43170 44387 48226  2046  2320  2700  2889  3407  3521  3869  4311  4843 #> [17857]  4912  5375  5923  6254  6395  6874  6985  7896  8458  9156  9472  9570 #> [17869]  9926 10027 10630 10840 11800 12005 12255 12599 13275 13765 13927 15465 #> [17881] 16137 16443 16921 17234 17798 18812 19151 20005 20067 20364 21079 21357 #> [17893] 22912 23506 23584 23952 24579 25135 26309 26592 27077 27937 28092 29450 #> [17905] 29668 30129 33225 34190 35137 35568 36525 37136 38607 38950 39760 41275 #> [17917] 41903 43519 43704 44285 45331 48046  2005  2047  2231  2462  2533  2630 #> [17929]  2701  2996  3109  3432  3633  3662  3996  4225  4516  4602  5504  5621 #> [17941]  6366  6396  7300  7512  8110  8620  8800  9157  9212  9432  9526 10118 #> [17953] 10293 10538 10743 11122 11801 13011 13226 13393 13766 14303 14363 14565 #> [17965] 15519 15583 16922 17303 18249 18625 19103 21013 21297 22063 22913 23380 #> [17977] 24442 24523 24851 25554 25983 26877 27001 27533 27615 27691 30225 30436 #> [17989] 32073 33784 34636 37417 38200 39924 40467 41178 42095 43068 43436 44665 #> [18001] 45699 46726 47947 48731  2140  2436  2725  2975  3249  3461  3634  3997 #> [18013]  4022  4059  4200  5037  5157  5718  5779  6125  6255  7471  8148  9473 #> [18025]  9612 10791 11320 11588 11697 13227 14097 14841 15103 17046 19573 19639 #> [18037] 21534 23119 24852 25415 25845 25900 26179 26663 26878 27159 29894 30904 #> [18049] 31921 32074 33294 33785 33872 34474 36692 40018 40979 41725 42371 42712 #> [18061] 43262 44486 46151 47110 47528 47641 47745 48047 48139 48836 49053  2065 #> [18073]  2208  2890  2906  3020  3044  3070  3296  3606  4399  4655  5189  5719 #> [18085]  6256  6290  6837  6937  7702  8459  9339 11413 11858 12755 13509 14304 #> [18097] 14788 15368 16389 18570 18744 18932 19691 20068 20183 21158 21358 23252 #> [18109] 23658 24524 24994 27776 28093 28617 30512 30613 30692 31232 31558 34563 #> [18121] 34790 35395 37589 37761 38024 38434 38871 40206 40800 41450 42275 42984 #> [18133] 45612 45700 46727  2321  2577  2631  3045  3071  3227  3297  3491  3870 #> [18145]  4283  4427  4458  4573  4817  5190  5531  6575  6761  6986  7421  7549 #> [18157]  7788  7860  7936  8005  8038  8914  9654  9971 10155 10631 10744 11173 #> [18169] 11646 12098 12487 12962 14513 17433 17976 18250 19440 19574 20184 20686 #> [18181] 22775 23045 23507 23659 24314 24995 26813 27938 28618 29451 29742 30693 #> [18193] 30832 30905 31638 32230 32710 32812 33061 34407 34637 35740 38520 39231 #> [18205] 39589 40293 40801 40879 41079 43342 43797 43890 43993 44584 46240 46533 #> [18217] 48635  2120  2351  2726  2751  2800  2825  3021  3433  3462  3663  3871 #> [18229]  4226  4543  4633  4844  5099  5287  5313  6654  6796  6938  7422  8149 #> [18241]  8183  8215  8332  8510  8544  9080  9158  9433  9571  9789  9837 10068 #> [18253] 10294 10392 10939 11225 11698 11750 12058 12432 13330 13822 15270 15369 #> [18265] 15843 16866 18251 19267 19441 20069 20422 20948 21847 21910 22914 24443 #> [18277] 25555 25984 26380 27078 27777 28301 29376 29602 31922 33135 33873 34105 #> [18289] 34263 35569 35814 36890 38103 39761 40294 40468 40720 40802 41999 43171 #> [18301] 47948 49166  2158  2551  2578  3072  3088  3250  3356  3434  3900  3922 #> [18313]  4201  4346  4845  5314  5438  5590  5924  5990  6291  7265  7861  8657 #> [18325]  9340  9474  9790  9927 10069 10841 11174 11226 11367 12153 13123 13556 #> [18337] 14789 15158 17613 17676 17738 18813 18868 18990 19042 20423 21014 21159 #> [18349] 22344 22693 24026 25622 25846 26052 26593 27534 27616 29452 31639 32155 #> [18361] 33136 34339 36337 38353 40019 41365 41630 42186 42276 43437 43616 44076 #> [18373] 46075 46430 47529 48837 49256  2437  2826  2976  2997  3046  3357  3463 #> [18385]  3551  4726  4997  5158  5849  6367  8511  9341  9388  9527 10028 10745 #> [18397] 11498 11542 11751 12059 12702 12756 13331 13994 14047 14566 14842 15629 #> [18409] 16330 16390 16627 17123 17677 18435 19216 19640 19808 20621 20880 21298 #> [18421] 21359 21988 22411 23818 23953 24376 24525 25272 27002 27448 28840 29453 #> [18433] 29958 30051 33874 34191 34475 36073 36788 37218 41554 41726 42277 44388 #> [18445] 44666 45512 46241 47322 48140  2250  2322  2402  2534  2774  3073  3177 #> [18457]  3228  3950  4202  4371  4634  4727  5505  5720  5850  6292  6325  6397 #> [18469]  7513  7897  8070  8460  8658  8834  9434  9613  9873 10539 12488 13124 #> [18481] 13875 14305 14932 14987 15271 16501 17859 18869 19442 20949 21360 21911 #> [18493] 22976 23253 23741 24377 25136 26814 26879 28019 28693 30291 31384 31478 #> [18505] 31990 32711 33449 34264 34564 34889 35396 36074 36891 37936 38270 38951 #> [18517] 40642 42187 43172 44759 45332 45513 47218  2293  2323  2935  3298  3688 #> [18529]  3951  4347  4400  5124  5159  5780  6762  7622  8184  8216  8333  8696 #> [18541]  8736  9303  9475  9528 10746 10792 11454 11956 12256 12808 13332 13876 #> [18553] 14306 14613 14890 15520 15739 15844 16011 16138 16679 16805 18055 19443 #> [18565] 19575 20821 21600 22139 22618 23508 24444 25065 25696 26739 28094 28377 #> [18577] 29669 29743 29895 29959 30052 30358 31088 32301 32625 32813 33137 33786 #> [18589] 35741 36168 37418 37762 39590 40382 41179 43705 44667 45425 45978 46728 #> [18601] 46919 47746  2535  3435  3607  3923  4172  4574  4694  4758  5345  5506 #> [18613]  5991  6126  7230  7334  7377  7937  8071  8334  8420  8461  8835  9213 #> [18625]  9614  9874 11175 11957 12060 12489 13228 14614 15321 15420 15584 15630 #> [18637] 15740 16628 17365 17739 18175 18252 18571 18933 19268 20489 20622 20745 #> [18649] 23328 24921 25208 25344 26460 30292 30359 31162 34340 36599 38872 43069 #> [18661] 43173 43798 44760 44969 46333 48048  2275  2324  2632  2907  3022  3202 #> [18673]  3277  3299  4348  4401  4544  4635  4913  5100  5461  7119  7266  7301 #> [18685]  7423  7820  8150  9035  9435 10237 11029 11647 11752 12154 12433 12963 #> [18697] 13067 13767 15892 17124 17304 17434 18176 18436 20241 21160 22267 22412 #> [18709] 23046 23438 23888 24027 24239 25345 26936 27003 28152 28694 31479 33377 #> [18721] 34638 35397 37314 39049 39839 40207 43617 45979 46920 48838 49167  2352 #> [18733]  2536  2936  3148  3522  3576  3635  4203  4603  4728  4846  4998  5038 #> [18745]  5376  6368  6615  7335  8072  8256  9389  9972 10070 10888 11648 11802 #> [18757] 12099 12155 12388 12852 12964 13229 13768 14195 14307 14843 16391 16923 #> [18769] 17171 20006 20242 20309 21989 22345 22475 23660 24096 24445 24580 24785 #> [18781] 25137 28841 29232 29377 29603 30226 30293 30906 31991 32367 33611 33700 #> [18793] 34018 36693 36985 37590 38782 38952 39156 39591 40803 41366 41631 42096 #> [18805] 42278 43438 43994 44192 44286 45784 46334 47430 47747  2403  2463  3110 #> [18817]  3952  3998  4173  4402  4759  4914  5039  5101  6099  6257  6398  7155 #> [18829]  7267  7659  7789  8377  8462  8545  9116  9254  9739  9875  9928 10156 #> [18841] 10632 10940 11699 11859 11958 12907 13394 13454 14196 14308 14459 14734 #> [18853] 15585 15845 17172 17678 18991 19104 19217 19692 21161 21729 22346 22694 #> [18865] 25483 25697 25901 26053 28302 29814 31992 33378 34890 35742 35907 38271 #> [18877] 39592 40643 41080 41451 42279 43070 43174 43439 43520 45426  2404  2977 #> [18889]  3023  3089  3111  3203  3664  3840  4060  4088  4656  4792  4999  5040 #> [18901]  5216  5245  5407  5439  5507  5925  6067  6188  6293  7086  7336  7378 #> [18913]  7749  8039  8151  8512  9304  9791 10842 11959 13068 13455 13557 13995 #> [18925] 14615 14735 15203 15685 16012 16680 16806 17235 17435 17498 18113 18177 #> [18937] 18814 20490 20746 22915 24240 24446 24714 24786 24996 25416 25484 25556 #> [18949] 25847 26107 26664 27449 27778 27939 28378 28465 30294 31640 32075 32451 #> [18961] 32891 33062 33937 34476 34976 35815 36169 36600 36694 36986 37315 39050 #> [18973] 39675 39762 40020 41367 41904 43071 43891 46152 46729 46821 47431 48732 #> [18985] 49168  2373  2579  2871  2955  3251  4349  4915  6258  6616  6655  6692 #> [18997]  6905  7087  7623  7703  8836  9214  9838 10197 10449 12100 12600 12908 #> [19009] 13174 13456 13928 14098 14253 14514 14679 15159 15741 16084 16392 17125 #> [19021] 17366 18303 18365 19934 21476 21601 21848 21912 22268 22695 23047 23439 #> [19033] 23889 24168 24447 24581 24997 25698 25985 26537 26594 26815 29960 31385 #> [19045] 32892 34891 35479 35657 35908 36601 36789 38435 38608 39051 39232 39593 #> [19057] 41555 41632 41727 42280 42985 43175 45234 46431 47014 48227 48733 49257 #> [19069]  2405  2507  2827  3178  3319  3492  3811  4227  4284  4312  4695  4793 #> [19081]  5315  5462  5532  5851  6494  6727  6875  7472  8217  8421  8659  9615 #> [19093]  9694  9929 10540 10633 10889 11279 11543 11960 12257 12650 12809 13510 #> [19105] 14616 15421 15521 15631 15686 16331 16393 16988 17236 18870 19873 20070 #> [19117] 20310 21477 22269 22476 22696 23440 23509 23585 25346 26310 26461 26538 #> [19129] 26595 28695 29815 31233 32712 33063 33875 34192 36432 36695 36987 37059 #> [19141] 37219 38521 39052 39594 40558 41452 42898 43263 44193 46076 46921 47111 #> [19153] 48322 49360  2374  2438  2679  4794  4969  5377  5654  6189  6906  7750 #> [19165]  7821  8621  9342  9390 10119 10941 11700 12757 12909 13125 13230 15893 #> [19177] 16139 17305 18572 19444 20424 21849 22477 23120 23329 24315 25066 25347 #> [19189] 26462 27244 27779 29076 30833 32713 35398 35658 37419 38201 38272 40112 #> [19201] 40559 40880 41276 41368 43343 44389 44487 44761 46153 47323 47530  3112 #> [19213]  3179  3436  3689  3953  4174  4403  4459  4484  5066  5533  5562  6100 #> [19225]  6127  6259  6294  6576  6763  6987  7088  7156  7424  8152  8335  8765 #> [19237]  9081  9255  9839 10157 10450 10747 10843 10890 13069 13558 13715 13996 #> [19249] 14933 15522 16085 16394 16502 17679 17740 17977 19043 19269 19445 21666 #> [19261] 21850 22478 22619 23381 24028 24448 24787 24998 25067 25623 26463 27160 #> [19273] 27535 28769 31775 32626 32714 34408 34477 37420 39332 40804 41453 41905 #> [19285] 42281 43072 43344 43440 44762 47112 47531  2464  3149  4313  5992  6222 #> [19297]  6462  6577  7624  7704  7968  9305  9655  9740 10120 10198 10238 10634 #> [19309] 10748 11030 11753 12651 12910 13457 13823 14567 15370 15792 17367 18687 #> [19321] 19152 19693 20365 20425 20687 20747 20822 22140 22479 22846 23586 24715 #> [19333] 25986 26242 28696 31234 31386 32076 33379 34409 35053 35223 35480 35570 #> [19345] 35659 35743 36696 37591 37853 38783 39925 40560 40980 42372 43706 43892 #> [19357] 43995 46627 47113 47532  2508  3636  3901  4089  4254  4314  4428  4604 #> [19369]  4916  5885  6578  6838  7190  7231  7379  7473  7625  8336  9391  9436 #> [19381] 10071 10341 11906 12853 13126 13175 13276 14568 14891 15104 15272 15742 #> [19393] 15958 16989 17237 17921 18496 18688 18934 19270 19446 19756 19809 20126 #> [19405] 20366 21851 22064 22347 22549 22620 23048 23587 24582 26311 27079 27161 #> [19417] 29156 29312 30130 31163 32231 32302 33064 33938 35138 35311 37421 39053 #> [19429] 40295 41454 42097 42793 43441 43521 43799 45235 45333 45980 47642 47748 #> [19441] 49169  2998  3150  3665  3791  3872  4760  4970  5440  5655  5886  6155 #> [19453]  6369  7157  7380  7751  8697  9215  9392  9792  9930 10158 10891 10942 #> [19465] 11074 11860 12434 13231 13559 14460 14617 15273 16086 16200 16332 16563 #> [19477] 17680 19320 20688 20881 21299 21778 21913 22550 23742 24169 24853 25068 #> [19489] 25624 26180 28233 29157 29454 30614 31480 32156 32983 33065 33612 35224 #> [19501] 35976 36170 38202 38273 39926 40208 40296 41180 42188 42373 43442 44287 #> [19513] 45143 45236 45334 45427 48141 49170  2801  3151  3873  4122  4204  4228 #> [19525]  4404  4605  4795  5246  5463  5852  6101  6156  6579  7056  7120  7474 #> [19537]  7969  8378  8463  8878  9159  9393  9973 10199 10342 10709 10892 11280 #> [19549] 11455 11961 12389 12703 12854 13395 13613 13716 14844 15160 15422 15793 #> [19561] 15959 17047 18056 20243 20367 20950 21015 22977 25209 25417 25987 27780 #> [19573] 28020 28928 29009 30513 31559 31776 31923 32715 32814 34019 34718 36171 #> [19585] 37592 39763 40561 40805 41906 42098 42794 43073 44077 45055 45428 45514 #> [19597] 46154 46432 47749  2802  2839  2891  2908  3874  4144  5687  6876  7381 #> [19609]  7705  7822  9476 10239 10980 11499 12061 12338 14618 15586 15794 17048 #> [19621] 18573 19044 19502 21162 21852 22065 22978 23382 24922 25699 26054 26108 #> [19633] 26539 26596 27162 29158 30514 30834 31235 32541 34106 34892 35054 36172 #> [19645] 36256 37673 38354 38873 39054 41728 41816 45237 45515 47949 48510  2803 #> [19657]  2999  4545  4606  4876  5000  5217  5591  5819  5959  6128  6433  6580 #> [19669]  7191  7382  8185  8422  8581 10072 10200 10844 10943 11649 12911 14364 #> [19681] 14790 14934 15322 15632 16564 16629 17049 17306 17552 17681 17860 19271 #> [19693] 19874 22141 22776 22847 23510 24316 24449 24643 25625 25770 25902 26181 #> [19705] 26464 28770 28842 29077 30227 31560 31993 32542 34893 40721 41277 41556 #> [19717] 43800 43996 44668 46335 46822 47324 48962  2909  3180  3690  3743  4229 #> [19729]  4315  4696  4761  4818  5125  5622  6190  6797  6839  7158  7192  7383 #> [19741]  8337  8379  8952  9117  9216 10159 10541 11589 12704 12855 15587 15687 #> [19753] 15743 15846 16013 16681 16867 16924 17238 18366 19641 19810 19935 20426 #> [19765] 21730 22551 22777 23330 25771 25903 25988 26597 26740 26937 28095 28466 #> [19777] 29078 29961 30615 31236 31924 33066 33295 34107 34977 35225 35571 35816 #> [19789] 36173 36697 37593 38025 38691 39500 40021 40981 41557 42099 42282 42795 #> [19801] 43443 43997 44585 44970 45613 46823 47533 47750  2978  3047  3181  3229 #> [19813]  3744  4023  4350  4429  4485  4546  5160  5378  5960  6102  6129  6399 #> [19825]  6656  6693  7024  7790  8915  8953  9036  9616  9695  9741 10121 10201 #> [19837] 10393 10542 11123 12601 12912 13127 14569 15161 15588 15633 16140 18304 #> [19849] 18437 19875 20244 20823 21602 21779 23254 23588 24097 24241 25069 25989 #> [19861] 26880 27080 27536 27617 28547 29604 29670 30515 32368 32627 32815 35055 #> [19873] 35226 35817 36602 38609 39055 39233 39333 39927 40209 42458 43998 45701 #> [19885] 45981 46242 48734 49054  2580  2604  2727  2804  3977  4255  4285  4316 #> [19897]  4430  4847  5001  5126  5247  5316  5721  6068  6463  6531  6694  6728 #> [19909]  6840  6877  6939  7193  7302  7384  7514  8766  9876 10343 10394 10793 #> [19921] 10845 11176 11227 11544 11803 12339 13824 14099 14309 17682 18745 19218 #> [19933] 19272 19386 19811 20491 21231 21535 21914 23661 23743 24317 25700 26109 #> [19945] 28548 28619 28771 28843 29159 30131 30228 31777 33613 33939 34020 35818 #> [19957] 36603 37502 38026 38274 40562 41278 41455 41633 42459 43444 43893 44078 #> [19969] 45056 45785 47325 48228  3090  3204  4024  4061  4460  5441  5464  5592 #> [19981]  5993  6157  6532  6581  6695  6907  7025  7159  7232  7898  8040  9617 #> [19993] 11368 11701 12758 13560 13769 13877 14144 14515 14680 14791 15323 15634 #> [20005] 16201 16395 17307 17614 17683 17978 18114 19642 19694 19812 20185 20427 #> [20017] 20492 20689 20824 21361 21603 23049 24788 25070 25210 25273 26881 27081 #> [20029] 29671 29962 30437 30516 30616 32157 33296 33876 34791 36257 36892 37763 #> [20041] 38275 38953 39501 41279 44288 45057 45516 46922 47326 47534 47751 48735 #> [20053]  2728  2805  3091  3464  4025  4486  4517  5408  5994  6326  6657  6764 #> [20065]  7233  7337  7706  7970  8464  8546 10202 10395 10635 10794 11228 11321 #> [20077] 11702 11861 12198 12340 13333 15204 16141 16990 17173 18935 19321 19757 #> [20089] 19876 20825 21413 21604 23050 23441 23890 24242 24854 25348 26110 26312 #> [20101] 27245 28772 29605 30617 30993 31303 31561 31641 34021 34265 34639 36258 #> [20113] 37220 38104 39595 40563 41081 42189 42796 43894 46155 46243 47950 49055 #> [20125] 49258 49361  2702  2729  3000  3048  3113  3577  3902  4729  4796  4819 #> [20137]  5534  5722  5781  6191  6295  6533  6658  6940  8153  8660  8737  9082 #> [20149] 10029 10295 10636 10710 11862 13012 13232 13825 14681 14792 15423 15466 #> [20161] 15523 16503 17615 18305 19503 19576 19877 20311 21414 21915 22066 22621 #> [20173] 22979 23121 23744 24999 25274 25557 25701 26313 26381 27618 27940 29378 #> [20185] 29816 30835 31387 34978 35481 36259 36698 36988 39157 39334 39764 40022 #> [20197] 41369 41817 42460 44079 45614 46824 49171  3114  3182  3205  3230  3320 #> [20209]  3523  3745  3875  3903  4697  7823  7899  8698  8954 10344 10749 11863 #> [20221] 12913 13013 14310 14365 15056 16504 16565 17616 18438 18815 19695 20245 #> [20233] 21667 21990 22697 22980 24789 26816 28234 28773 28929 29455 30694 31237 #> [20245] 32816 33877 36526 37060 37674 38105 38692 39676 40113 41280 41370 41818 #> [20257] 43264 43999 44080 45615 45885 47219 47327 47535 48229 48323 49172  3231 #> [20269]  3524  3637  3812  4461  4547  5248  5346  5623  5723  6495  6696  6908 #> [20281]  6988  7626  7824  7971  8338  9572  9656  9742 10981 11031 11804 14254 #> [20293] 15205 15467 16444 17050 17436 17553 17979 18057 18178 18689 19696 20368 #> [20305] 21080 21668 21853 22067 22413 23383 23891 24243 24855 25558 27692 28467 #> [20317] 28774 29010 30053 31238 31388 31481 32303 33450 35819 36260 36699 37594 #> [20329] 38784 39502 40297 40722 43074 43801 44000 44586 45786 46077 46628 47752 #> [20341]  2806  2910  3074  3206  3232  3358  3379  3525  3924  4145  4286  4487 #> [20353]  4636  5067  5624  5820  6400  6697  7089  7425  7752  8186  8547  8767 #> [20365]  8801  9118  9343  9696  9793 10073 11703 11907 11962 12341 12490 12652 #> [20377] 12914 13233 13770 13929 14366 14736 15206 15635 15894 16868 17617 18179 #> [20389] 18936 19219 19936 20186 20428 21916 22142 22204 23589 23819 24170 25559 #> [20401] 25904 26243 26741 27537 28844 30907 31164 31389 31855 33529 33787 34792 #> [20413] 35572 36261 37422 38610 38785 40023 40881 41281 42100 44081 44587 44865 #> [20425] 46825 48511 48736  2872  2892  3465  3746  3767  4090  4317  4431  4575 #> [20437]  4657  4917  5041  5127  5465  5688  5887  5995  6192  7515  7550  8073 #> [20449]  8218  8465  9083  9160  9437 10671 11281 11500 11590 12602 13334 13396 #> [20461] 13658 14100 14145 15162 15424 15636 15795 16445 16807 16869 17126 18180 #> [20473] 18626 18871 21415 22205 23176 24526 24644 24790 25000 25275 25349 25990 #> [20485] 26540 27004 27246 28549 30132 31390 33297 33788 33940 35660 35909 37137 #> [20497] 37316 37503 39928 40982 41456 42000 43176 45702 45982 47536 48142  2893 #> [20509]  3115  3252  3408  3578  3608  4205  4372  5161  5191  5656  6729  6989 #> [20521]  7303  7426  7862  8548  8699  9438  9697  9877 10240 10396 11032 11591 #> [20533] 12342 13511 15207 16259 16446 16630 17741 19577 20246 21163 21416 21917 #> [20545] 21991 22206 22916 23662 26938 29744 30517 30908 31089 31165 32817 32893 #> [20557] 33298 34108 34478 34894 36527 37764 38611 39158 39503 39929 40114 41371 #> [20569] 42541 42713 45238 45787 48230  3152  3338  3747  4373  4548  4576  4877 #> [20581]  4918  5192  5535  5593  5724  5749  6327  8187  8219  9698 10586 10795 #> [20593] 11704 11805 11908 12199 12258 12435 13717 13826 14461 14845 15425 16447 #> [20605] 17499 17742 18115 18306 18872 19153 20748 21536 21605 21992 22207 22480 #> [20617] 23745 24527 24583 25001 25560 25772 26465 26598 28550 28775 29233 31994 #> [20629] 32304 33380 33941 34719 34793 37061 39159 39677 40024 40469 42899 45517 #> [20641] 45788 46336 46433 47015 47432 49056  2828  2911  3253  3380  3579  3638 #> [20653]  3876  3999  4230  4919  5379  5725  5782  5926  6069  6103  7121  7194 #> [20665]  7304  7338  7627  7660  8466  9037  9084  9217  9439  9477 10672 11177 #> [20677] 12965 13335 14619 15163 15371 15468 15688 15847 16014 16448 16505 16752 #> [20689] 17051 19387 19578 20071 21606 21780 22481 22552 22778 22848 23590 24029 #> [20701] 24171 24318 25138 25626 26111 26244 27163 27619 27941 28845 29011 31090 #> [20713] 31778 32543 32628 34266 36174 37595 37854 38436 38612 38786 38874 39234 #> [20725] 40644 41729 42714 43895 44082 47643 48512  2912  3049  3092  3116  3437 #> [20737]  3552  4062  4405  4730  4920  5409  5466  5563  5594  6193  6464  7339 #> [20749]  7427  7661  8006  8738  9119  9256  9743  9974 10846 11322 11592 12856 #> [20761] 13458 13827 16087 16925 17743 18367 18439 19322 20555 20749 21731 22068 #> [20773] 22208 22779 22849 23511 24791 24856 25627 25848 26182 27781 27865 28153 #> [20785] 29532 29896 30518 31642 31779 32544 32716 32818 35139 35482 36075 36262 #> [20797] 36604 37062 37675 38203 39235 39678 39840 41082 41558 41907 42101 42542 #> [20809] 42631 42715 42797 46156 47951  3153  3207  3409  3553  3925  4000  4256 #> [20821]  4518  5002  5288  5821  6434  6534  6582  6659  6841  7516  8298 12390 #> [20833] 12603 12857 14101 14255 14620 16808 17861 18937 19643 21081 21478 21669 #> [20845] 26112 26314 26599 27538 29963 31699 31780 32158 32305 32819 33226 33451 #> [20857] 34895 35312 37317 38522 38875 38954 39160 40115 40983 42461 43445 43707 #> [20869] 46337 46534 46923 47537 47849  3526  4026  4488  4577  4658  4731  5128 #> [20881]  5218  5442  5961  6158  6465  6765  6909  6990  7057  7791  8549  9573 #> [20893]  9618  9794 10587 10796 11282 11369 11963 12062 12156 12200 12541 12810 #> [20905] 13176 14311 15324 15426 15524 16142 17799 17862 18574 18627 19323 20312 #> [20917] 20493 21670 24172 24528 24645 24923 25211 25561 25991 26742 27539 28379 #> [20929] 28468 29079 30360 31166 31304 31643 32159 33381 34267 36790 36893 37504 #> [20941] 37596 38437 38876 39335 40025 40806 41559 45058 45144 46434 46730 47538 #> [20953] 48429 48839  3359  3466  3493  3666  3841  3877  4091  4878  4971  5129 #> [20965]  5219  5689  6037  6260  6466  6535  6941  7707  7825  7972  8041  8111 #> [20977]  8661  9619  9744 10030 10637 11229 11964 13128 13878 13930 14892 15208 #> [20989] 15637 16333 16396 17052 17684 18307 18628 18690 19273 19324 19644 20187 #> [21001] 21016 21607 21732 23051 23892 25139 26466 27005 27782 28846 29456 29817 #> [21013] 30054 30133 32717 33138 34565 36433 40298 42102 43177 43522 44588 46338 #> [21025] 46826 47220 47850 47952 48231  2979  3467  4001  4351  4659  5220  5657 #> [21037]  5853  6130  6536  6583  7753  7900  8257  8299  9657  9699 10750 11501 #> [21049] 12436 12915 13177 13277 14737 15744 15895 16202 16449 17618 17980 18497 #> [21061] 18938 19154 20072 20826 21082 21164 21300 21993 23177 23663 23746 24173 #> [21073] 24584 24716 25276 25485 25562 27450 27693 28154 28620 29234 29818 29964 #> [21085] 30994 31995 32077 32629 34341 34410 34896 36791 36894 38877 42190 42374 #> [21097] 43265 43618 44669 44763 44971 48737 48840  2956  3024  3254  3321  3339 #> [21109]  3438  3468  3667  4879  5130  5193  5380  5467  5690  5750  6070  6194 #> [21121]  6223  6370  6537  6766  7160  7662  9038  9574 10296 10543 10588 10673 #> [21133] 11033 11230 11456 13014 13070 13178 13614 14738 16334 16682 17981 18116 #> [21145] 18181 18308 18629 19274 19758 20007 20369 20623 20750 21017 21479 22209 #> [21157] 22348 23384 23512 24244 24529 25212 25277 25418 26665 28847 29379 29897 #> [21169] 30055 30519 31091 31305 31700 32452 34479 34720 36338 38204 38693 38878 #> [21181] 41457 42900 43446 43619 45239 45429 45886 47953  3025  3278  3494  3580 #> [21193]  4231  5289  5564  5751  5996  6224  6698  7475  7901  8339  8837  9120 #> [21205]  9795  9931 10589 10944 11124 11178 12491 12604 14048 14312 15325 16088 #> [21217] 16260 16335 16631 17619 18939 19388 19447 19504 20073 20624 20951 21083 #> [21229] 21232 22270 22349 23052 23513 23893 24098 24378 25905 26541 28303 28380 #> [21241] 28469 28621 30229 30520 30765 31856 32453 32545 34566 35313 35483 36700 #> [21253] 37138 39417 41634 41730 42901 44289 44670 45335 45430 45616 46629 47328 #> [21265] 47954  3322  3527  4549  5381  5468  5658  5927  6660  6730  7122  7234 #> [21277]  7863  8220  8700  9121  9745 10297 10451 10638 10982 12301 12437 12966 #> [21289] 13771 15525 16015 16809 17982 18182 18309 18746 18940 19155 19448 20952 #> [21301] 21165 22271 22622 23122 24174 24717 25628 28776 30056 31092 34022 34268 #> [21313] 35661 36792 37221 39161 39336 40645 40807 40882 45059 45789 47539 47644 #> [21325] 49173 49259  3117  3581  3715  4063  4257  4287  4550  4660  4921  5131 #> [21337]  5162  5928  6991  7161  7517  8467  8622  9122  9478  9796 10031 10074 #> [21349] 10847 11075 11179 11593 11806 12063 12101 12438 12542 12916 13129 13931 #> [21361] 14412 14935 14988 15427 15589 15960 17127 18253 18630 19759 19937 20127 #> [21373] 21084 21994 22780 24245 25002 25849 27247 29160 30521 30695 32454 33942 #> [21385] 34193 35056 35820 37222 37937 38106 38694 38955 39418 39504 39596 41908 #> [21397] 43178 43620 43896 44764 48513 48841  3118  3208  3768  3813  3878  4551 #> [21409]  4607  4661  4762  4880  5042  5102  5469  6401  6699  6767  6942  6992 #> [21421]  7708  8042  8074  8258  8380  8468  8582  8739  9123  9161  9479  9620 #> [21433]  9658  9700 10797 10983 11125 12705 13397 14516 14621 14793 14936 15469 #> [21445] 16203 16810 16926 19697 20751 21781 21854 23385 23514 24175 24246 24924 #> [21457] 26315 26817 27317 27942 28155 28235 28551 28930 29672 29745 30057 30522 #> [21469] 30995 31482 31701 33701 33789 33878 34567 34794 34979 35662 36263 36339 #> [21481] 37223 37423 37855 38205 41731 42103 43075 44290 44390 46339 48143  3233 #> [21493]  3340  3360  3528  3954  4002  4027  4123  4352  4489  5068  6159  6538 #> [21505]  6584  7162  7902  8259  9085  9162 10298 10798 11650 12259 12302 12439 #> [21517] 13398 13997 14146 15274 15896 15961 16811 17685 17800 18368 19105 19505 #> [21529] 20128 20247 20827 21085 21480 21995 22143 22414 22781 23442 23515 24450 #> [21541] 24585 25140 26183 27164 28236 28622 28848 29161 30909 32232 32369 32630 #> [21553] 33790 33943 34023 34342 34897 35910 37224 37424 38027 38276 38438 38523 #> [21565] 38956 41181 44083 46157 47221 47433 47540 49362  3554  3609  3639  4318 #> [21577]  4432  5317  5382  6071  6496  7235  7268  7428  8740  8955  9257 10345 #> [21589] 10984 11457 12543 13234 14570 14846 14893 15962 16336 16450 16683 17686 #> [21601] 17801 18058 18183 19106 20556 21362 22698 23123 23954 24530 24646 24718 #> [21613] 25702 25773 27451 27620 27943 29080 30438 30836 31391 31702 32984 33382 #> [21625] 33530 33944 34795 36895 37676 39236 39765 40383 40470 41732 42986 44001 #> [21637] 44488 45790 45887 47955 48636  3300  3926  4146  4258  4490  5410  5536 #> [21649]  5595  5625  6798  8112  8188  8340  8768  8956  9746 10299 10639 12006 #> [21661] 12492 12706 12858 12917 13659 14622 15105 16204 16506 17239 17922 18691 #> [21673] 19275 19506 19698 19760 20008 20557 20752 21233 21782 21918 22482 25141 #> [21685] 25629 26818 27783 27866 28931 30361 30696 30910 34980 35140 36340 36434 #> [21697] 37225 37597 38028 38277 38524 38695 45888 46244 47222 47434  3410  3769 #> [21709]  3792  4763  5888  5997  6467  6661  6768  6993  7090  7709  7903  8662 #> [21721]  9163 10397 11323 11807 12759 13561 13718 14413 14571 17308 17744 18059 #> [21733] 18816 20429 20494 21608 22069 22415 23124 23255 24099 24247 25213 26245 #> [21745] 27452 27540 30362 32306 32985 33139 34343 35314 35573 35821 37677 39162 #> [21757] 39841 41819 42001 42104 42191 42375 42987 44002 44194 44671 46435 47645 #> [21769]  3234  3279  3582  3904  3955  4092  4462  5003  5194  5347  5508  5752 #> [21781]  6195  6662  7091  7269  7476  7710  8300  8341  8879  8916  9164  9218 #> [21793]  9878 11126 11458 11651 12544 12605 13615 13719 13879 14256 14847 15209 #> [21805] 16205 16684 17554 17687 18184 18310 18440 19220 20370 20558 21417 21609 #> [21817] 21783 23443 24319 25003 25419 25486 25992 26382 27453 29673 29898 29965 #> [21829] 30295 31392 31925 32160 34024 34269 35057 35663 35744 39056 40210 41372 #> [21841] 41458 42462 42902 43523 44084 45145 47851 48324 49057 49260  3610  4147 #> [21853]  4206  4374  5103  5163  5221  5470  5998  6038  6072  6402  6799  7195 #> [21865]  7236  7270  7429  8189  8838  9002  9621  9659  9879  9975 10160 10203 #> [21877] 10241 10300 10398 10945 11180 11283 12064 12440 12760 13015 13720 13772 #> [21889] 13880 14257 14313 14414 15848 16206 16397 16632 17368 17437 17923 18254 #> [21901] 18575 18747 19107 19221 20009 20371 21018 21086 21996 23664 23747 26467 #> [21913] 27006 27082 28304 28849 29235 29746 31306 31857 32078 32161 32455 33299 #> [21925] 33791 34898 35977 37425 37598 37938 38206 40026 40564 40883 42798 43802 #> [21937] 45240 47852 47956 48325 48514 49174  3381  4028  4064  4259  4491  4848 #> [21949]  5318  5348  5726  6073  6160  6800  7305  7518  7826  9124 10452 10544 #> [21961] 10799 11808 12545 12653 12761 12859 13660 13828 14147 14258 16633 17240 #> [21973] 18441 19761 21087 21481 21997 23053 24379 24531 25850 26468 27784 29606 #> [21985] 30058 30134 30523 32079 33300 34981 35141 35822 36264 37063 37226 37939 #> [21997] 38355 39057 40384 43447 44195 44589 45791 47329 47853 48842  3255  3323 #> [22009]  3555  4003  5822  5854  7477  7938  8769  9258  9575  9747  9932 11809 #> [22021] 11965 12493 13661 13881 14367 14623 14989 15372 16089 17688 18692 19507 #> [22033] 19762 20690 20882 21166 22699 23178 23820 24719 24925 25774 26055 26246 #> [22045] 27083 28305 28623 28697 29162 29380 29966 32986 35058 35399 35745 36175 #> [22057] 36793 36989 37940 38107 38525 39419 40471 42632 43266 43708 46731 47541 #> [22069] 48049 48326 48430 48963  3583  3691  3716  3814  4319  4406  4881  5004 #> [22081]  5222  5319  5537  5753  5962  6468  6700  8113  8880  9259  9306  9748 #> [22093]  9933 10346 10711 11324 11594 11810 11864 12303 12391 12441 12606 13278 #> [22105] 13512 16143 17863 18693 18941 18992 19508 19579 19699 19763 20953 21418 #> [22117] 23125 23516 23665 25214 25775 25906 27454 27785 28306 31307 33702 35978 #> [22129] 36076 36265 36794 37139 37765 37856 38526 38696 38787 40211 41635 45146 #> [22141] 45617 46078 48738 49261  3411  3668  3842  3905  4407  5069  5132  5195 #> [22153]  5889  5999  6131  6539  7123  8154  8260  8469  8917  9219  9307  9394 #> [22165] 10075 10301 10545 11076 11181 11325 11545 12494 14794 15745 16566 16685 #> [22177] 17241 17309 19325 19580 20495 20954 21167 22350 22782 22850 23256 26666 #> [22189] 26882 27379 27694 28021 29533 32546 33067 33879 34194 34270 35574 35979 #> [22201] 36266 36605 39420 39597 39842 40027 40212 40385 40565 42463 42633 43267 #> [22213] 44391 45241 45889 47854 48327  3843  4463  4797  5070  5249  5290  5471 #> [22225]  5596  6104  6371  6435  7939  7973  8221  8301 10347 10491 10751 10893 #> [22237] 10985 11370 12707 13071 13399 13459 13662 13721 13829 13882 14259 14848 #> [22249] 15326 15470 15746 15897 16812 18311 18694 21019 21733 22070 23257 24100 #> [22261] 24176 25563 26667 28777 29313 29607 30697 33383 33614 33880 35823 37426 #> [22273] 37599 37857 38957 39163 39598 40116 40299 40884 41909 42543 42634 43621 #> [22285] 44085 44392 44590 46079 46827 47016 47114 48328 48637 49262  3529  4320 #> [22297]  4519  4552  4578  4608  4698  5133  5320  5565  5890  6225  6261  6436 #> [22309]  6994  7385  7430  7519  7974  8261  9165  9440 10546 10712 11231 11284 #> [22321] 11502 12007 13562 15210 15327 15373 15526 15638 15963 16016 16927 17128 #> [22333] 17174 17310 17369 18312 18993 19449 19938 21088 21168 21301 21734 21855 #> [22345] 22700 22783 24926 25630 25851 25907 26383 26600 27007 28624 28698 28932 #> [22357] 29747 31483 32080 32547 32718 32820 33945 34344 36528 37505 38356 38788 #> [22369] 39058 39237 41282 41733 41820 42002 43268 43524 43622 43803 44489 45431 #> [22381] 45518 45792 49263  3770  3879  4260  4849  5005  5349  5538  5855  5891 #> [22393]  6540  6801  8190 11034 11285 11459 11546 11865 13072 13279 14197 14462 #> [22405] 14517 14624 14739 14795 15328 15471 15527 15964 16398 16507 16813 16870 #> [22417] 17053 17129 17802 19108 19156 19222 19581 19764 20188 20430 20753 21089 #> [22429] 21234 21784 22784 22981 24248 25908 26743 27248 27380 28778 29819 32631 #> [22441] 32987 33301 34721 35059 36176 36267 36529 36606 37506 37941 38278 39059 #> [22453] 39599 39679 40566 42003 42903 43179 45242 46535 47855 49058  3439  4124 #> [22465]  4492  4820  5856  6161  6731  7026  7386  7754  7940  7975  8583  8623 #> [22477]  8957  9308 10032 10076 10122 10242 10848 11414 11595 12495 12546 13235 #> [22489] 13460 15590 16017 16144 18942 19645 19878 20828 21856 22982 23126 23821 #> [22501] 24030 25071 25487 25703 25993 26184 28699 30996 31167 31484 32988 34025 #> [22513] 34271 34899 35911 37140 37507 38108 38789 39505 39680 39930 41083 41821 #> [22525] 42004 42192 43180 43709 43804 44003 46158 46630 47330 47753 47957  4093 #> [22537]  4375  4662  5071  5963  6000  6663  6701  6943  7027  7340  8007  8191 #> [22549]  8550  8770  9749 10547 10946 11652 11754 11866 12008 12392 12654 13280 #> [22561] 15528 16018 17175 17370 17500 17689 17803 17983 19879 20754 20883 21090 #> [22573] 21785 23179 23591 23822 24320 24451 27695 28850 29081 29967 31168 32081 #> [22585] 32162 34568 36268 36530 36990 38697 39060 39766 43623 43805 44196 44291 #> [22597] 44765 44972 47646 48144 48843 49264  3611  4288  4579  4882  5043  5134 #> [22609]  5223  5350  6262  6842  7124  7387  8584  8741  8958  9529 10077 10123 #> [22621] 11755 12496 12967 14198 14740 14937 16090 16145 17176 17438 18442 18576 #> [22633] 18631 18695 18873 20884 22144 23666 25350 25488 25852 25909 26384 26939 #> [22645] 27084 28470 28700 29314 29899 30698 31562 33792 34722 35400 38357 39164 #> [22657] 39506 40984 42105 44766 45243 45432 46536 46631 46732 47435  3669  4029 #> [22669]  4464  4553  4663  5135  5164  6437  7520  7628  8839  8959  9039  9125 #> [22681]  9701 10348 10674 10800 11035 11326 11653 11756 12655 12762 12860 13179 #> [22693] 14102 14314 14415 14625 14796 15275 15796 16814 17054 17130 17311 17984 #> [22705] 18117 18943 19509 20625 21786 21857 22145 22483 22553 22623 23667 24249 #> [22717] 24792 25351 25489 25631 25776 26113 26385 27008 28851 28933 29748 30618 #> [22729] 31926 32548 33452 34900 35664 36607 37141 38279 38698 39600 40985 42464 #> [22741] 44197 44591 44672 46080 46733  3748  3771  4065  4520  4948  5006  5072 #> [22753]  5104  5291  6296  6664  6702  7028  7163  7196  7864  8381  8742  8881 #> [22765]  9166  9395  9660 11415 12343 13336 13998 14315 14368 15529 15639 16261 #> [22777] 17177 18696 18817 18874 19700 20010 21091 21787 21998 22146 22851 25004 #> [22789] 25777 26247 27696 28552 28852 28934 29749 31485 31858 32456 32549 33140 #> [22801] 34195 35912 36177 36531 36991 38358 39061 39681 40213 40386 40723 42283 #> [22813] 45060 46245 46828 47017 47542  4030  4289  4732  5073  5443  5929  5964 #> [22825]  6074  6438  7125  7478  7551  7711  8114  8382  8423  8470  8624  9167 #> [22837] 10243 10492 11036 12102 12442 13130 14316 14416 14990 15640 16871 17439 #> [22849] 18118 18443 20372 20626 21999 22554 23517 24586 25352 25490 26114 26744 #> [22861] 27381 27621 28307 29820 31393 31996 33615 34026 34109 35142 35227 36608 #> [22873] 37318 42544 43624 43806 44086 44673 44767 45519 46159 46734 48145 48329 #> [22885] 48739  3612  4207  4521  4699  4798  4850  4883  4922  4972  5007  5136 #> [22897]  5783  5892  6703  7552  8663  8960  9126  9976 10548 12708 12811 12861 #> [22909] 13131 13513 14797 15374 15747 15898 16207 16262 17242 18444 20496 21419 #> [22921] 21919 22272 22416 22624 23180 23258 23894 24177 24927 25005 25278 25491 #> [22933] 26056 26601 27867 28625 29608 29968 30439 30524 30619 31997 32370 33068 #> [22945] 33881 35665 36609 36795 37142 38207 39931 40214 40646 41182 42284 44292 #> [22957] 45618 45703 46246 46537 47018 47543 48232 48638 48844  3844  4664  4764 #> [22969]  5008  5250  5411  5727  5784  5857  6263  6617  6769  6802  7029  7092 #> [22981]  7341  7755  8424  8918  9168 10161 10302 10399 10453 10493 10590 10894 #> [22993] 11077 12862 13337 13400 13830 13883 14682 14741 15472 16091 16815 17055 #> [23005] 17924 18498 18875 19276 19582 19813 20313 20627 21363 24031 25279 26819 #> [23017] 27541 29236 31394 31563 34027 34723 35824 35980 36992 37319 37678 38208 #> [23029] 38879 40028 40215 40647 40808 41084 42193 42904 43181 44087 44592 45520 #> [23041] 46340 46735 46924 47223  3845  4208  4433  4821  4851  5351  5472  5659 #> [23053]  5785  6704  7588  9622 10303 10454 10640 10675 11867 12009 13236 13932 #> [23065] 16019 16146 16686 17131 17178 17745 18818 19450 19814 20129 20628 21169 #> [23077] 21420 22417 24101 24452 24532 24720 25006 25215 25564 25853 27009 27542 #> [23089] 29082 29674 29821 30059 30135 30440 30911 31781 32550 32719 32989 34345 #> [23101] 35825 36993 37064 39932 40216 40648 40724 40809 41459 41734 42465 43448 #> [23113] 43710 43807 44198 45244 45890 46538 47224 47331 47647 48330  4031  4148 #> [23125]  4700  5321  6001  6878  7058  7237  7388  7479  7712  7756  7792  8771 #> [23137]  8919  9086  9220  9840  9934 10849 11547 11868 12157 13180 13401 13461 #> [23149] 13514 14683 14991 15164 15473 16208 16567 16928 17056 17501 17746 17864 #> [23161] 19157 19326 20130 21020 21482 21920 22701 23748 25142 28779 29822 30060 #> [23173] 30912 31564 32082 32551 33302 34796 34982 35913 35981 36077 37227 38613 #> [23185] 42194 42635 42799 43076 43269 43808 43897 44088 48050  3846  4004  4066 #> [23197]  4125  4493  4765  5412  5754  5823  5965  6196  6226  6264  6497  6803 #> [23209]  7238  8155  8585  9169  9576  9797 10124 10304 10591 11460 11503 12968 #> [23221] 13338 14199 14849 14894 16209 16991 17312 17371 17620 17985 18369 18819 #> [23233] 19389 20314 21235 22785 25420 25565 25704 25778 26883 26940 28156 29237 #> [23245] 29381 29534 31782 32233 32821 33703 34196 34569 35982 36435 36610 37228 #> [23257] 37320 37427 38880 39238 47019 48331 48964  4032  4094  4232  4376  4852 #> [23269]  5473  5824  6075  6498  6910  7941  7976  8115  8262  8625  8802  9260 #> [23281]  9344  9441  9841 11078 11504 12065 12103 12304 12344 12393 13132 13933 #> [23293] 14049 14518 15106 15591 16337 16687 17179 18820 18876 19158 19277 20497 #> [23305] 20559 20829 21537 22000 22484 22983 24321 25492 25994 27165 27249 27622 #> [23317] 27697 27868 28308 29315 29457 30363 30913 31308 31783 34797 34983 36078 #> [23329] 36796 37766 38359 38439 39337 39421 39767 40117 40300 40649 42106 42800 #> [23341] 43182 43270 43345 43449 44866 45147 46160 46736 47436  3772  4149  4973 #> [23353]  5074  5322  5597  5728  5893  7093  7480  7553  7589  7865  8701  9040 #> [23365]  9880 10078 11079 11232 11286 11371 11869 12010 12918 13133 14200 15276 #> [23377] 15641 16020 16147 16929 17313 17986 18060 18313 18499 18748 19223 19880 #> [23389] 21921 22210 22418 22984 23592 23955 24032 24647 24793 25007 25143 25353 #> [23401] 27786 28157 29163 30620 32457 35826 36341 36797 37942 40650 41373 42636 #> [23413] 44293 47020 47115 47648 48845 49363  4005  4126  4321  4465  4554  5323 #> [23425]  5691  5729  5930  7389  7904  8772  9442 10162 10455 11080 12104 12345 #> [23437] 12709 12969 14463 14626 14742 14798 15375 17555 17804 19646 20131 20373 #> [23449] 21021 23054 23444 24453 24533 25008 25144 25566 25910 25995 26057 26469 #> [23461] 26941 27010 28381 28471 31859 34411 34724 36079 36342 36994 38280 39422 #> [23473] 39682 39768 39843 40986 41085 41636 42716 42988 45061 46737 47021 47437 #> [23485] 47856 49059  3978  4175  4494  5009  5137  5165  6403  6732  6944  7590 #> [23497]  7827  9480  9530  9798 10850 11327 11461 12011 12260 12710 12763 12863 #> [23509] 14260 14317 14992 15211 15748 16148 16451 16816 16992 18061 18577 20011 #> [23521] 20248 20629 21170 21302 22071 22485 23749 24102 26386 26602 27011 27166 #> [23533] 27250 27455 27944 28096 29238 29316 31239 32234 33141 34725 36269 36896 #> [23545] 36995 37508 38109 39338 40301 42545 43711 44490 44768 46341 47022 49364 #> [23557]  4150  4233  4665  5044  6039  6404  6439  6945  7197  7239  7521  7866 #> [23569]  8263  8342  8773  9661  9842 10986 11127 11287 12012 12443 12547 13462 #> [23581] 13616 14148 14318 15749 17057 17372 19510 19881 20249 20431 22211 23445 #> [23593] 25354 27456 27698 28553 28935 29675 30136 30621 32632 32822 33882 34028 #> [23605] 34197 35143 36080 36701 37509 38881 39933 40725 40885 42376 44867 46738 #> [23617] 47116  3847  3956  4006  4609  4666  5626  6372  6541  6585  7271  7629 #> [23629]  8383  8471  8626  8664  8882  9345 10163 10549 10676 11081 12764 13073 #> [23641] 13515 13563 13934 14519 14938 15212 16399 16568 16634 17058 17690 19159 #> [23653] 19511 22147 22486 22555 23895 24587 27167 29012 29317 29750 29823 30766 #> [23665] 31395 33384 34798 34901 35746 35983 37229 37428 37600 38110 40567 41183 #> [23677] 41283 42195 42377 43271 43346 44769 45619 45891 46436 46739 47754 48639 #> [23689] 48740 49175  3979  4095  4701  4799  5138  6040  6076  6770  6911  7126 #> [23701]  7198  7793  7905  8075  8551  9261  9309  9481  9623 10204 10305 10752 #> [23713] 10801 11233 12158 12201 13663 15428 15530 16569 16688 17059 17691 17865 #> [23725] 18062 19701 20189 20250 21022 21092 22556 25009 26884 28158 29239 29609 #> [23737] 31565 32552 32990 33531 34198 35575 35827 35984 38281 38699 39844 40568 #> [23749] 42107 42378 42801 43347 44491 44868 45892 49060  3927  5196  5755  5894 #> [23761]  5931  6227  6405  6618  6995  7127  7306  7591  8803  9531  9935 10164 #> [23773] 10641 12105 12159 12607 12656 12711 13516 14572 14627 15899 16338 17373 #> [23785] 18314 18500 18994 19583 20315 20374 21093 21171 21788 22212 23446 24648 #> [23797] 25567 26316 26542 27168 27382 27787 28159 29013 29824 30525 31093 31309 #> [23809] 31703 32307 32371 32894 33793 34902 35828 36532 37065 38700 39165 40726 #> [23821] 41086 41637 42466 42905 43625 48515 48741 48965  4007  4234  4800  5197 #> [23833]  5292  5509  5539  6373  6946  6996  7630  8076  9127  9170  9221 10165 #> [23845] 10349 10456 10550 11128 12202 12765 12812 13339 13517 13935 13999 14895 #> [23857] 14939 15797 16339 17805 17987 18255 19390 19584 20074 21094 21236 21735 #> [23869] 22419 23055 23386 24033 25854 26668 26820 27085 27699 28936 29240 29969 #> [23881] 31094 31240 31396 31860 32372 33142 33227 33385 34110 34199 34903 35666 #> [23893] 37679 38701 39845 40029 41822 42196 43450 43525 44004 45062 45245  4434 #> [23905]  4853  4974  5166  5224  5413  5510  5566  6733  6804  8384  8552  9087 #> [23917]  9881 10457 11462 11654 12548 12657 13664 14000 14319 14628 15376 15474 #> [23929] 16092 17747 19327 19765 20075 20498 21789 21922 24454 24928 25072 26317 #> [23941] 27383 28382 29458 30364 31927 35576 35914 35985 36178 37230 37767 39062 #> [23953] 39423 39507 39934 42197 42379 44593 44973 45063 47438 47857 48516  3980 #> [23965]  4290  4435  5414  5627  6265  6843  7390  8156  8302  8472  9750  9977 #> [23977] 10079 10306 10350 10895 11288 11372 11705 11909 12549 12813 13518 14001 #> [23989] 14369 15689 16400 18063 18370 18697 19391 20076 21923 22557 22985 24455 #> [24001] 24534 25216 25421 26115 26318 26387 29825 34272 34726 35829 36343 36533 #> [24013] 36798 37321 39166 40569 43077 44492 45064 45620 46829 47544 47755 48051 #> [24025] 48233 48640  4151  4261  4555  4801  4884  4949  5139  5383  5444  5932 #> [24037]  6162  6228  6705  7977  8077  8222  8385  9346  9662  9936 10205 10551 #> [24049] 10947 10987 11416 12305 13281 13340 13564 13773 14573 14993 15377 15475 #> [24061] 15849 15965 16149 16635 16993 17132 17866 17925 18578 18698 19702 20691 #> [24073] 21237 21364 21671 22986 23823 24794 24929 25632 25911 25996 26185 26470 #> [24085] 26821 27012 27869 29083 29164 29676 29970 31998 32083 32633 33143 33303 #> [24097] 34111 34570 37066 38790 40217 40987 42005 42989 44869 45148 46342 46925 #> [24109] 49365  4096  4466  4495  4766  5010  5140  5293  5384  5540  5786  6041 #> [24121]  6077  6132  6197  6469  6844  6947  7867  8386  9310  9937 10458 11548 #> [24133] 11757 11811 12444 12970 13016 13282 13665 13774 14320 14940 15642 15750 #> [24145] 15798 15966 16508 17180 17374 17440 18877 20830 22001 22072 22702 22786 #> [24157] 23447 24456 24721 24795 25145 26116 26248 27623 27870 29165 30622 31095 #> [24169] 31784 34273 34984 35577 36611 38029 38527 38614 38702 39239 40118 41184 #> [24181] 41560 43272 43898 45704 46081 46247 46343 46740 47023 47858 48146 49265 #> [24193]  4127  4436  5225  5628  5787  6198  6734  7030  7713  8008  8702  8883 #> [24205] 10244 11596 11910 11966 13017 13134 13237 14149 14464 14574 15107 15531 #> [24217] 16093 16210 16452 16509 16570 17060 17621 17867 18995 21172 21790 24857 #> [24229] 26543 26885 28237 29382 29677 29751 30137 30365 31241 32823 34480 35228 #> [24241] 35484 36179 36702 40810 43626 43712 44089 46082 47649  4176  4802  5415 #> [24253]  6266  6499  6586  7631  8425  8627  8665  8804  9171  9882  9978 10307 #> [24265] 10753 11082 11463 11911 11967 12550 12712 13402 14417 14896 15329 15378 #> [24277] 15476 15967 16340 16753 16817 17133 18501 18821 18996 19224 20190 21538 #> [24289] 22625 23259 23824 25010 26388 26471 27318 30441 30837 31704 32720 32895 #> [24301] 34571 36897 36996 37510 37601 37858 38111 38360 39167 39424 39601 40218 #> [24313] 41284 41823 42467 44005 47439 47545  4291  4556  4580  5011  5629  5660 #> [24325]  5933  6105  6163  6229  6845  6912  7199  7431  8264  8473  9577  9799 #> [24337] 10080 10206 10351 10677 11464 13722 14575 15592 15690 16571 16930 17314 #> [24349] 17375 18502 19109 19451 19512 19647 20560 24034 25355 25779 26886 26942 #> [24361] 28022 28554 30061 30442 30623 31566 32824 33144 33616 34029 34799 34904 #> [24373] 37602 38030 38112 38440 39240 40302 41460 43526 43713 44006 44770 45793 #> [24385] 47225 47958 49061  4581  4610  4975  6042  6133  6199  6587  6771  7663 #> [24397]  8192  8553  8884  9347  9663 10033 10245 10459 10713 11289 12551 12814 #> [24409] 13565 13723 14050 14629 14684 15477 15643 16994 17061 17243 17502 17868 #> [24421] 18256 18749 20012 21095 21238 21483 21672 22073 23448 23593 23825 24250 #> [24433] 24858 25073 25493 25705 25912 26472 26603 26669 27788 28097 29318 29535 #> [24445] 30138 33704 34481 37067 38361 38703 39063 39241 39508 40886 42198 42380 #> [24457] 44870 45705 46926 47226 48234 48641  4637  4702  4976  5075  5445  5474 #> [24469]  5858  6134  6200  6470  6772  6846  6879  7059  7240  7432  7714  7757 #> [24481]  7978  8885  9222  9751  9883  9979 10494 10642 11373 11417 11505 11655 #> [24493] 12497 12815 13018 15277 15691 16401 16754 16818 17134 17806 17869 18064 #> [24505] 18579 18632 18878 19452 20630 21539 22626 24457 25146 25280 25568 27945 #> [24517] 29826 30767 31567 31644 32235 32991 33145 33386 34112 34200 35144 36436 #> [24529] 37511 38958 40219 40472 40811 45521 45706 46344 48742 48966 49266  4235 #> [24541]  4292  4322  5141  5730  6267  6374  6406  7060  7128  7391  7481  7522 #> [24553]  7592  7828  8265  8343  8666  9172  9348  9443  9482  9884 10081 10754 #> [24565] 10851 11418 11465 11597 12261 12816 13135 13617 14002 16021 16453 16636 #> [24577] 16995 17622 18185 19392 20755 21096 21610 21673 22273 23896 24930 25074 #> [24589] 25780 25913 26544 26943 27624 29166 29241 30443 31486 31785 32896 33069 #> [24601] 33304 34113 34346 34482 36344 38959 41374 41824 44974 45149 45794 46248 #> [24613] 47117 48332 48431  4262  4377  4437  4667  5541  6135  6619  7392  7632 #> [24625]  7664  8193  8586  8667  9003  9980 10400 11506 12013 12106 12445 13019 #> [24637] 13074 13238 13403 13724 14003 14150 14630 14799 16572 16819 16931 17244 #> [24649] 18257 18822 19939 20692 20756 21365 22703 22852 23594 24649 25494 25633 #> [24661] 25997 26186 26249 27789 28160 28309 28701 28937 29242 29383 29459 29536 #> [24673] 29752 29827 30838 31397 31645 32825 33794 36270 36612 37680 37943 38209 #> [24685] 38282 38362 38704 39683 40387 40570 42108 45983 46161 47440  4522  4638 #> [24697]  4668  4733  4767  4950  5226  5511  5825  6706  6913  7129  7164  7868 #> [24709]  8303  8920  9483  9800  9981 11129 11328 11419 11870 12971 14004 16932 #> [24721] 17315 18879 20077 20191 20831 21173 21421 21611 21924 22627 22704 23181 #> [24733] 25914 26389 26670 29014 29243 30062 30366 30839 31398 31646 33146 33705 #> [24745] 34201 35485 36799 38882 39168 39509 41185 41461 42199 42381 44007 44199 #> [24757] 44771 46249 46539 46927 47756 48147 48432 48642  4639  4768  5542  6164 #> [24769]  7433  7942  8194  9173  9311  9396 11037 11234 13020 13404 13463 13618 #> [24781] 13884 14631 14800 15108 16341 16454 17441 18065 18119 18633 19110 19328 #> [24793] 19703 20757 21422 21791 22274 22420 23956 26887 27457 27700 27790 28702 #> [24805] 29828 31786 32236 34727 37322 37512 37603 38883 39242 39602 40571 44493 #> [24817] 45707 46741 47024 48517 48643  4669  4703  4734  4885  5012  5294  5731 #> [24829]  5756  5788  7554  7829  8223  8805  8961  9752 10552 11598 11656 12608 #> [24841] 12972 13405 13464 14201 14576 15429 15692 15968 16637 17503 18315 18823 #> [24853] 19882 20693 23127 23518 23595 24588 25781 26473 26822 27625 28161 28703 #> [24865] 29167 30230 31169 32553 33706 35145 37068 37944 38210 38615 38705 38960 #> [24877] 39684 41285 43348 44393 45336  4467  4923  5045  5416  5630  5661  6043 #> [24889]  6165  6375  7200  8078  8587  8703  9128 10308 10460 10948 11812 12552 #> [24901] 13136 13181 13936 14465 14632 15213 15593 16689 17692 18580 18880 18944 #> [24913] 19045 19393 19453 20499 21303 22002 22487 23387 23449 23519 23750 24103 #> [24925] 24458 26888 27384 28162 30139 30367 30444 32458 34274 34483 34985 35667 #> [24937] 35915 36703 38706 39339 40119 40572 41186 41825 42468 43078 43899 44772 #> [24949] 45150 45621 45984 46928 48148 48235 49176  5385  5692  5826  5934  6002 #> [24961]  6328  6620  7165  7241  8474  8668  8840  9129  9444 11235 11549 11706 #> [24973] 12553 12658 12864 13075 13239 13341 13666 14685 15594 15693 16690 18186 #> [24985] 18371 18503 20832 21925 23450 23596 23897 23957 25147 25706 26187 27458 #> [24997] 27626 28238 28310 28383 28472 31568 33946 39425 40303 40812 42637 42802 #> [25009] 43451 43714 46742 46830 46929 48846 49177  4611  4951  5512  6440  6805 #> [25021]  7242  7342  7830  8774  9312  9702  9938 10166 11236 11657 12014 12107 #> [25033] 12919 14321 14520 14994 17748 17926 18634 19329 19394 20833 21097 22488 #> [25045] 23451 23898 25356 27169 27627 28853 29537 29900 31096 31647 31705 32554 #> [25057] 34484 35830 36271 37069 38031 40727 40813 43809 43900 44008 44294 44394 #> [25069] 44975 45337 47441 48644 49267  5567  5732  5859  6665  6806  7201  7393 #> [25081]  7555  7758  8475  8554  8704  8886  9041  9088  9703 11038 11130 13021 #> [25093] 15165 15278 15751 16820 16996 17376 17442 17556 17807 18881 19225 19278 #> [25105] 19648 19766 19883 20500 21304 21484 22213 22853 22917 24251 24322 24535 #> [25117] 24722 24859 25915 26823 29084 30526 31097 31928 33453 33947 34275 35831 #> [25129] 37070 37945 38032 38707 39169 39603 40220 40388 41286 41375 46345 46437 #> [25141] 46930 47650 47859 48236 48645 48743  5251  5543  5789  6003  6542  6847 #> [25153]  6914  7094  7394  7434  7523  7665  7831  8266  8426  8806  8962  9262 #> [25165]  9484 10461 10592 12817 13519 14151 14941 14995 15478 15694 16872 16933 #> [25177] 17557 17693 18316 18581 20078 25707 25782 25998 26117 26319 27013 27701 #> [25189] 29244 31170 32084 32308 32897 34800 35832 36081 36180 37071 37323 39064 #> [25201] 40304 40887 41287 42200 42717 44494 44976 45622 45985 46346 48967  5105 #> [25213]  5475  6004  6230  6441  6621  6948  7095  7243  7666  7794  8387  8628 #> [25225]  8743  8807  9042  9397  9664  9704 10125 10495 10755 10988 11182 11599 #> [25237] 12015 12160 12498 13283 13619 14418 14743 16573 16755 16997 17927 18504 #> [25249] 18882 18997 19330 19585 20079 20561 21858 22148 24178 25011 25634 28239 #> [25261] 28780 29015 29085 29829 30624 32826 33532 35146 36704 39685 41462 43627 #> [25273] 44200 45151 45708 46250 46831 48149 48646  4612  5568  5860  5966  6078 #> [25285]  6166  6376  6588  6880  6949  7307  7715  8304  8427  9532  9753 10553 #> [25297] 10989 11374 11466 11813 11912 14850 15695 15799 15969 16150 16455 18120 #> [25309] 18582 19331 19649 21485 22214 22987 23056 23182 23597 24104 24723 24796 #> [25321] 25422 25569 26390 27014 27871 28704 30140 30368 30997 34572 35986 38363 #> [25333] 41638 42285 43715 45338 46540 47118 48237 48433 48518 49366  5252  5476 #> [25345]  5757  6297  6329  6997  7031  7869  8267  8629  9174  9939 11507 11550 #> [25357] 11913 12766 14152 14202 14419 14466 15279 15696 16022 16263 16638 18187 #> [25369] 18372 18998 19513 19940 20885 21612 22003 22275 23057 23598 23668 23826 #> [25381] 24179 26250 27015 27791 27872 29086 29319 30063 30625 33454 34412 34485 #> [25393] 34801 34986 35060 37604 37859 38113 38708 38791 39510 40030 40120 40573 #> [25405] 44201 46347 46931 47757 47959 48647 49268  4886  5046  5106  5227  5693 #> [25417]  5895  5935  6005  6881  7556  8268  8513  9223  9485  9885 10034 10126 #> [25429] 10852 11083 11183 11290 11707 11968 12016 12203 12554 12865 13520 14153 #> [25441] 14370 14897 15214 15697 16639 16756 17623 18258 19704 21098 21174 21540 #> [25453] 21674 21736 21859 21926 22149 22276 22988 23260 24035 24105 24180 25423 #> [25465] 26188 28626 28854 29016 29320 29384 30699 31929 32992 33533 34905 35229 #> [25477] 35668 35833 36345 36613 37513 38709 41463 41639 45065 45246  4822  5662 #> [25489]  6407  6773  7244  8887  9175 10035 11131 11375 12262 12555 13076 13240 #> [25501] 13775 13831 14103 14633 16151 16264 17181 17870 18635 18750 18883 18945 #> [25513] 19514 20013 20080 20251 20758 21792 22004 22705 25217 25495 26320 26391 #> [25525] 26745 27251 27543 28163 28627 30700 31098 31171 31487 31861 32373 34030 #> [25537] 34276 34640 35147 37143 37514 37768 37860 38528 38710 39065 41288 41376 #> [25549] 41640 42109 42382 45623 45709 45795 48648  4803  4924  5253  5733  6167 #> [25561]  6543  7435  7667  8009  8116  9578  9665 10207 10756 10949 11329 11658 #> [25573] 12446 13137 13406 13667 13776 13885 14051 14203 14420 15109 15330 16094 #> [25585] 16402 17504 17871 18317 18445 19395 20955 21541 22918 23183 23331 23520 #> [25597] 23599 25148 26058 27170 28384 28628 29830 30527 31172 32163 33070 34347 #> [25609] 35315 35916 36346 36614 36898 39243 40888 41187 41289 42906 43527 44977 #> [25621] 45152 46083 47546 48052  4704  5734  5936  6136  6408  6807  7759  7870 #> [25633]  8010  8921  9089  9754 10127 10678 11237 11291 11467 11969 12659 12866 #> [25645] 13668 14005 14261 14322 14467 15110 15280 17377 17443 17988 18318 18946 #> [25657] 19705 19815 20192 20375 20956 21305 23669 24036 24252 25149 25281 25999 #> [25669] 26604 28023 29245 30626 30840 31099 31569 32721 34413 36082 36347 37515 #> [25681] 38711 39604 40574 42469 43628 44295 44773 45247 45624 47547 47758 48333 #> [25693] 48649  4670  4823  4854  5013  5076  5295  5544  5861  6044  6106  6137 #> [25705]  6622  7032  8428  8514  8922  9224  9313  9624 10802 11292 11871 12263 #> [25717] 13077 13465 14323 14942 15698 15900 16510 17444 18751 20132 20501 21023 #> [25729] 21239 21366 22074 22489 22787 23521 23600 23827 24106 24253 24797 25282 #> [25741] 26605 27946 28024 28705 28938 29321 30064 30445 31570 31648 32085 32309 #> [25753] 32827 32993 33071 33707 33948 34802 36437 36534 36800 39340 42546 44978 #> [25765] 45153 45710 46084 46743 48053  4855  4887  6168  6623  6848  7130  8011 #> [25777]  8157  8555  9043  9314  9982 10352 10643 12499 13182 13886 13937 14204 #> [25789] 14686 14996 15215 15532 16691 17135 17505 17928 17989 19454 19706 20502 #> [25801] 21793 22215 22351 22421 25012 25075 25357 25708 27171 29678 29831 29901 #> [25813] 30446 31488 31787 32634 32898 32994 34641 36438 37231 37324 38364 39341 #> [25825] 40121 41188 41735 41910 42638 44009 44090 44594 45711 46832 47332 47860 #> [25837] 47960 48847  4925  5477  5513  5545  5896  6298  6998  7061  7524  7716 #> [25849]  9263  9579 10167 11293 11508 11659 11814 12066 12556 12713 12973 13078 #> [25861] 15644 15752 16342 17506 18188 18505 18824 20886 21675 22075 22352 23058 #> [25873] 23958 24254 24931 26059 27628 28385 28629 28706 28781 29087 29902 30231 #> [25885] 30841 31788 32086 32459 32635 33387 33534 34202 35578 35747 36801 37072 #> [25897] 37769 38441 39066 41087 42803 43183 43629 47227 47961  4888  4977  5694 #> [25909]  5790  6624  6707  7395  7557  7717  7943  8705  9004 10168 10353 10496 #> [25921] 11914 12017 13620 13832 14468 14521 15111 15430 17182 18319 21175 21794 #> [25933] 22277 22854 23670 23959 24107 24181 24650 24724 25358 26000 27702 28164 #> [25945] 28240 29168 29903 30141 32310 32460 33388 34348 34642 35316 35917 38114 #> [25957] 38961 39511 41290 41464 41826 42907 43184 43273 43452 45796 46162 46632 #> [25969] 47442 48744 48968  4889  5047  5107  5142  5446  5663  5827  6169  6299 #> [25981]  7166  7343  7718  7944  8305  9398 10497 10990 11660 13566 13669 13938 #> [25993] 14744 16343 18259 18320 18583 18636 18752 19586 20957 21795 21927 22422 #> [26005] 22919 23671 24725 25635 27172 27385 27459 27544 27947 28025 29088 29538 #> [26017] 30369 30998 32237 32374 33708 33883 36615 37605 37770 38442 38884 39512 #> [26029] 40389 41561 42547 43185 43274 43453 46438 47651 48519 48650  4824  4890 #> [26041]  5014  5631  5695  6079  6138  7719  7795  8344  8588  8669  9315  9533 #> [26053]  9755 10679 11132 12108 12920 13284 13342 13621 13777 15379 15431 15970 #> [26065] 16757 16873 16934 16998 17245 17445 17558 18884 19515 20133 20503 21024 #> [26077] 21306 21613 21796 25150 25636 25783 26824 28026 28782 29679 29832 29971 #> [26089] 30842 31173 31242 31930 33617 33709 35148 37073 37516 39342 39846 41562 #> [26101] 42006 45522 45797 46085 46439  5015  5167  5228  6377  7202  7344  7796 #> [26113]  7979  8841  9044  9349  9486 10309 10714 12067 12264 12557 12609 12660 #> [26125] 12767 13343 13887 14006 14634 14898 16403 16574 17749 19650 19767 20134 #> [26137] 20432 21240 21614 22005 23899 23960 24037 24323 24651 26545 28939 29017 #> [26149] 29089 29680 32375 32899 33389 33455 35230 35834 36705 36802 37946 38529 #> [26161] 38616 38792 39513 40651 41189 42007 42201 43528 48054 48848  4926  5632 #> [26173]  5735  5862  6139  6300  6471  6808  6950  7096  7482  7720  7760  7797 #> [26185]  8670  9264  9625 10082 11184 11872 12161 13939 14943 15901 16511 17246 #> [26197] 17378 18753 18825 19587 20433 21241 21797 22150 22216 22706 22989 23522 #> [26209] 23672 23751 24459 26889 28555 29090 29322 30232 31310 33147 33884 34573 #> [26221] 35486 35748 38365 38530 39935 41465 42202 42639 42804 44296 44495 44979 #> [26233] 46348 47228 48150 48849 49269  5478  5897  6006  6301  6330  6666  6735 #> [26245]  7062  7203  7396  7558  8429  8842  9045  9801  9886 10036 10208 11330 #> [26257] 11815 12768 13833 14205 15331 15595 15699 16692 17624 18446 19046 19396 #> [26269] 19941 20504 21099 24182 24255 24589 24932 25855 26321 26944 27016 27629 #> [26281] 28165 29539 30142 30627 31311 31649 31931 32461 33072 33148 33885 34349 #> [26293] 34987 35231 35487 36535 36706 37232 37606 37947 38283 39343 39426 42286 #> [26305] 42908 44202 44496 45248 48434 48651  4952  5417  5967  6007  6045  6409 #> [26317]  6544  6849  9626 12068 13622 16456 16575 16758 18637 19160 19651 21367 #> [26329] 21542 22628 22788 23128 26671 27252 27948 28166 28630 29904 30999 31100 #> [26341] 31489 31999 32311 32900 35488 36439 37771 37861 38115 38284 38712 39244 #> [26353] 40652 40728 44980 45523 45712 45893 46086 46633 47861 48652  5168  6331 #> [26365]  6625  6736  7345  7559  7945  8043  8744  9046  9887  9940  9983 10169 #> [26377] 11376 12204 12769 13138 13834 17247 17507 18260 18506 18638 19161 20081 #> [26389] 20316 20376 20759 21176 22423 23184 23601 23900 24460 25283 25916 26606 #> [26401] 26746 27086 27386 27703 27949 28473 28855 29323 30914 31174 31399 34988 #> [26413] 35401 35669 36803 39936 40473 40988 41911 42008 43810 45339 45798 46833 #> [26425] 48238 49062  5254  5352  5479  5546  6332  6410  6442  7798  7832  7871 #> [26437]  8079  8388  8706  8963  9047  9666  9941 11758 12867 13022 13407 13466 #> [26449] 13835 15166 15800 17062 17990 18121 18947 19226 20135 20317 21177 22424 #> [26461] 22558 23828 23901 24256 25784 26001 26945 28167 28783 28856 32164 33795 #> [26473] 35317 35579 36536 39605 39847 41190 41736 41827 44297 44395 45066 45249 #> [26485] 46251 46634 46834 48653 48850  6500  6545  6850  7346  8306  8775  9130 #> [26497]  9445  9705  9802  9843 10401 10498 10757 11039 11185 11238 11708 12770 #> [26509] 13023 13623 13940 14745 14899 16457 16874 17183 17872 18122 19516 19652 #> [26521] 19768 21928 22425 23185 24038 24183 24933 26118 26322 26607 27017 27387 #> [26533] 28386 32462 33456 33535 36440 36804 37429 37517 39606 41737 42110 42203 #> [26545] 43186 44091 44298 45154 46252 46541 47229  5077  5418  6443  6472  6951 #> [26557]  6999  7097  7245  7308  7525  7560  7761  8389  8589  9176  9580 10083 #> [26569] 10354 10593 10680 11331 12205 12265 12661 13024 14421 15216 15533 15902 #> [26581] 16023 16095 16152 17063 17873 18261 18639 19653 20760 20887 22707 23059 #> [26593] 23261 24108 25570 25709 25785 26251 26323 26474 27460 27950 28027 28387 #> [26605] 28556 28857 29018 29833 30370 30701 32238 34031 34643 34803 35987 38617 #> [26617] 40221 43187 43349 43630 43811 43901 44595 44774 45986 46744 47119 47962 #> [26629] 48239 48435  5255  5633  5828  5863  6667  6915  8345  8476  8843  9316 #> [26641] 10681 10853 11186 12018 12447 13025 13241 13408 14577 14851 15057 15596 #> [26653] 16404 16935 17064 17808 18373 18507 19332 20014 20434 20834 21307 23186 #> [26665] 23673 24536 27388 28557 28707 29834 29972 30915 31490 32636 33149 33949 #> [26677] 34114 35670 35749 35918 37518 38211 39769 39937 40031 40474 42640 43529 #> [26689] 47443 48055  5829  6626  6668  6809  7063  7309  7347  7526  8515  8964 #> [26701]  9706  9844 10128 10758 12266 12306 12394 12868 14371 14635 14944 16153 #> [26713] 17248 17446 17694 17750 18699 19942 20318 20761 21676 21860 23674 25076 #> [26725] 25786 26119 26392 26890 27018 27087 30143 30702 32239 33710 34277 35318 #> [26737] 35835 36805 37325 37519 38793 39170 40222 41828 44010 44596 46087 47862 #> [26749] 48240 48851  5547  6546  6810  7561  7593  7980  8158  8590  8923  9005 #> [26761]  9707  9756  9845 11420 11709 13567 13888 14578 14900 14997 15534 16211 #> [26773] 16265 16759 17809 18754 19588 20694 20762 21737 22789 22920 23675 24324 #> [26785] 24461 25710 27545 28474 28558 29091 29324 29540 29835 30296 31000 31243 #> [26797] 31706 32000 32828 33390 33711 34203 34278 35232 35836 35988 36272 36899 #> [26809] 38285 38885 39344 39938 40223 40575 41641 41829 42383 43188 43275 44092 #> [26821] 44775 46349 47333 47652 47759 47963 48436  6589  6669  7762  7872  7981 #> [26833]  8117  8516  9048  9888 10246 10991 11040 11710 12395 13624 14372 15281 #> [26845] 15850 16821 17508 17695 17751 19816 20562 21100 21423 21677 22006 22353 #> [26857] 22708 23829 24462 25711 26672 27019 28388 28475 28559 30233 31001 31175 #> [26869] 31491 31571 32555 33150 33228 33536 33712 34574 35989 36273 36441 37772 #> [26881] 39345 39514 40224 40989 42718 42909 43079 44011 44203 45625 46350 47334 #> [26893] 48241 48437 48745  5664  5898  5968  6008  6046  6708  7204  7348  7436 #> [26905]  8224  8307  8390  9006  9846 10037 10402 11332 11468 11711 12448 12921 #> [26917] 13344 13409 14579 14801 14998 15380 16344 16822 16999 17379 17559 17874 #> [26929] 18066 19162 19517 21101 22151 22217 22790 23752 24109 24652 24798 25424 #> [26941] 26608 28168 28476 29610 29681 29973 30768 30843 30916 31244 31312 32165 #> [26953] 33151 34414 34644 34804 35750 35837 36348 36900 36997 39171 40032 40305 #> [26965] 42548 42641 44204 44674 46635 48056 48520  5736  5758  6009  6811  7098 #> [26977]  7167  7205  7349  7527  7873  8012  8844  9049  9131 10355 11377 12610 #> [26989] 13285 13467 13625 14262 14522 15597 15801 16875 17810 19589 20136 20631 #> [27001] 20763 21102 22278 23060 23830 24184 26747 27088 27630 27951 29541 32087 #> [27013] 32722 34279 36181 36442 37074 37948 38116 39245 39607 40390 41642 42111 #> [27025] 43350 45799 48057 48151 48242 49178  6140  6302  6627  7437  7528  7763 #> [27037]  7982  8346  8477  8517  8591  8808  9050  9446  9757  9889 10554 10896 #> [27049] 11712 12974 14206 14263 15535 16212 16760 17000 17136 17316 17752 18508 #> [27061] 18700 19047 19163 20435 20888 20958 21929 22279 22629 23961 25425 25496 #> [27073] 27319 27389 28389 29246 30297 30844 32556 32829 34350 34989 35233 35402 #> [27085] 35489 36083 36182 36349 37075 38962 39067 41088 41830 42805 43902 46542 #> [27097] 47964 48334 48521  5598  5634  6201  8347  8809  9007  9890 10209 10499 #> [27109] 10803 11333 11469 12500 12771 12922 13242 13468 14324 14469 14802 14852 #> [27121] 14945 15332 15479 15851 16266 16576 17317 18189 18640 19333 21178 22076 #> [27133] 23061 24257 24799 26546 26891 27704 30065 30298 31002 31932 32463 33618 #> [27145] 34486 34990 35234 36443 37773 39608 44497 45340 46932 47760 48243  5419 #> [27157]  5830  5864  5937  6303  6333  6851  7099  7131  7438  7562  7906  7983 #> [27169]  8195  9225  9667 10555 10715 11133 12267 12501 13026 13243 13345 14007 #> [27181] 14999 15700 18321 19048 19164 19455 19943 20252 20959 21368 22007 22354 #> [27193] 23062 23602 24463 24726 25637 27873 28477 28631 29385 30528 30917 31492 #> [27205] 31707 32001 32376 34487 34906 35403 35990 38286 38886 39686 39770 39939 #> [27217] 40475 40990 41089 41466 42549 44396 45433 46253 47025 47965 48969  5599 #> [27229]  6107  6170  6444  6709  7064  7100  7168  7563  8391  8707  8924  9090 #> [27241]  9226  9350  9534  9627  9668  9803 10129 10500 11041 11713 12449 12714 #> [27253] 14580 14946 15536 16024 16458 16876 17380 19654 19769 19944 20193 20632 #> [27265] 20960 21678 22077 22559 23129 23388 23962 24110 24325 25013 25917 26060 #> [27277] 27320 27461 28169 28241 29247 30144 30529 32377 33229 34991 35580 38887 #> [27289] 39068 39172 40391 41191 42719 43189 43351 43530 44498 45713 46835 47444 #> [27301] 48746  5600  5938  6445  6501  7564  7946  7984  8269  8671  8965  9227 #> [27313]  9847 10682 10897 11378 11714 11759 11816 12019 12109 12346 12611 13346 #> [27325] 13670 13725 13941 14901 17753 18123 18322 18374 18755 19945 20436 21179 #> [27337] 21543 21615 22490 22921 23523 24934 28170 33796 33886 34280 34805 35149 #> [27349] 35235 36707 37949 38033 38443 38794 39427 40306 40729 41563 42642 42720 #> [27361] 43080 43531 45714 47548  6141  7000  7065  9177  9317  9708 10898 11600 #> [27373] 11970 12307 13726 14636 15381 15903 16693 16877 18323 18701 18885 19590 #> [27385] 19770 20961 21486 21861 22560 23332 24258 24326 24727 25856 25918 26189 #> [27397] 26825 27705 29611 30845 31101 31176 32378 32464 33305 33537 33887 37326 #> [27409] 39069 39609 40991 41467 41564 43716 46254 48335  5665  5939  6446  6812 #> [27421]  7874  7947  8013  8745  9132  9351  9487 10556 12069 12662 12772 13139 #> [27433] 13469 13727 14104 14422 14470 15217 16154 16512 16936 17875 17991 20764 #> [27445] 20835 21308 21544 21862 23063 24653 24860 26475 26748 27390 27462 27792 #> [27457] 27874 28171 28858 29248 30066 30234 30703 30918 31572 32002 32088 32995 #> [27469] 35236 35751 36444 36806 37681 38888 39610 39848 39940 40992 42009 42550 #> [27481] 43532 44397 46088 46255 48852  5635  6171  6268  6334  6411  7066  7101 #> [27493]  7875  8014  8392  8888  9008  9228  9265  9447 10501 10644 11084 11187 #> [27505] 11715 11760 11915 12347 12663 13671 14052 14637 14687 14803 15000 15645 #> [27517] 16878 17065 17249 19655 20437 21738 23963 24728 25712 25857 26609 27089 #> [27529] 27952 28098 28311 29542 29905 30530 31177 31789 31862 32089 32166 33457 #> [27541] 34907 35061 35150 36616 37233 38212 40476 41192 41643 42010 42643 42990 #> [27553] 43454 44093 44675 44981 47445  5548  6335  6916  7397  8044  8159  8196 #> [27565]  8308  8393  9133  9266 10170 10502 10854 12348 12502 12773 13286 15537 #> [27577] 16025 16879 17066 17509 17754 17811 18509 19771 19817 19884 20695 21616 #> [27589] 22426 22491 22561 22990 23130 23187 23753 27631 27953 29612 30299 30447 #> [27601] 31790 31933 32167 32996 34032 35919 36617 38034 38117 39246 40392 40576 #> [27613] 41193 41377 42644 42806 43081 43903 44299 44499 45434 47120 49179  5666 #> [27625]  5759  6336  6378  6670  7439  7565  7594  7721  7764  7948  8630  9178 #> [27637]  9581  9891  9942 10247 10403 10594 10759 11239 11916 11971 12268 13889 #> [27649] 14373 15753 15802 16694 17184 17812 18124 18510 18826 18948 19227 19518 #> [27661] 19656 19772 21424 22152 22355 23902 23964 25014 25359 25638 27546 29169 #> [27673] 30846 32090 33888 34908 34992 35237 36901 37520 37950 38713 39428 39849 #> [27685] 40577 43717 44205 44500 45067 45155 46836 47026 47549 47761 48970 49367 #> [27697]  5737  6337  6813  6882  6952  7169  7722  8394  8430  8592  8845  9399 #> [27709]  9448 10683 10760 11085 13287 13410 13942 14688 15538 15701 16459 17185 #> [27721] 19228 19397 19773 20438 20563 21025 21930 22855 23262 24039 25015 25360 #> [27733] 25497 26393 27090 28028 28859 29460 30300 30847 33073 33458 35062 38618 #> [27745] 38795 39611 40993 41468 41912 42204 42721 42807 43190 43718 45524 46163 #> [27757] 47762 48244  6080  6142  6671  7310  7949  8270  8593  8631  9352  9488 #> [27769]  9984 10684 10716 10950 11294 11470 11509 11873 11972 12110 12503 13521 #> [27781] 13943 14207 14804 14947 15112 15382 15432 15702 16026 16155 16345 17510 #> [27793] 17625 17929 17992 18324 18999 20962 21242 22078 23263 23524 23603 24111 #> [27805] 24327 24729 25218 26324 26394 26826 27020 27091 29386 30301 32379 33950 #> [27817] 34033 34415 36445 36708 36807 37607 38444 39515 40033 41565 42287 42991 #> [27829] 43276 43352 43455 43631 43719 44012 47230 47550 48747 49368  5899  6917 #> [27841]  6953  7311  7765  9229  9353 10310 10951 11379 11973 12450 12975 13244 #> [27853] 14008 14154 16460 17001 17560 17696 18584 19000 20015 20564 21026 21243 #> [27865] 22008 22218 22709 23676 25016 25426 25639 27021 30067 30302 30848 31400 #> [27877] 31573 32168 32240 33074 33230 33459 33713 34034 35581 35991 36350 36808 #> [27889] 37951 38118 38366 38963 39429 39771 40122 40653 41194 42808 43812 44676 #> [27901] 45715 46543 46636 47121 48438 48654  6547  6918  7633  7723  8197  8478 #> [27913]  9051  9230 10404 10595 10804 10855 11471 11917 12070 12162 12869 13140 #> [27925] 13778 13890 14746 15113 15703 15754 15803 16213 16640 17067 17186 17381 #> [27937] 17447 17626 17813 19111 20194 21180 22492 24537 25017 25284 27391 28784 #> [27949] 29543 29753 32557 32637 32723 32901 34806 37862 38119 41831 41913 42011 #> [27961] 42112 42551 44013 44206 44776 44871 45525 45894 46837 47122  5760  5831 #> [27973]  6081  6231  6473  6954  8080  8225  8348  8925  9354  9804 10248 10899 #> [27985] 11551 12163 12396 12818 13288 13522 13626 14105 14471 14523 15218 17068 #> [27997] 17187 17448 17511 18262 19334 19519 19818 20439 20889 24328 25018 26325 #> [28009] 26610 27173 27463 27875 28312 29092 29249 29387 30704 31003 31178 31493 #> [28021] 31574 34204 34351 34575 34909 36183 36809 39687 40477 40814 42384 46164 #> [28033] 46351 46544 47966 48439 48655 48853  5865  6010  6379  6412  6474  6548 #> [28045]  6590  6672  7001  7272  8926  8966  9179  9535 10557 11295 11874 12504 #> [28057] 13523 13627 13728 15219 16823 16880 18827 19279 21679 21931 23264 24590 #> [28069] 24730 25919 26827 28390 28860 29461 29836 30235 30448 30705 32169 33391 #> [28081] 33460 34205 35490 37952 40889 41914 43720 47335  6304  6413  7566  8045 #> [28093]  8198  8309  8479  8632 10130 10249 10685 11240 11601 11761 14581 14747 #> [28105] 15220 15282 17250 17993 19335 20082 20505 21027 21617 21863 22493 22710 #> [28117] 23188 26002 26673 27092 28099 28861 29250 30371 30449 31102 31494 33461 #> [28129] 34035 34416 35920 37327 38714 41378 41644 43904 44677 44777 45068 45800 #> [28141] 46352 46545 47551 49270 49369  6011  6305  6338  6549  7170  7312  7398 #> [28153]  7634  7766  7907  8015  8349  8518  8633  8846  9355  9805 10038 10717 #> [28165] 12020 12206 12451 12819 13027 13470 13568 13891 14325 15283 15804 15852 #> [28177] 17069 17188 17994 18067 18190 18447 19165 19280 19946 21545 22079 23131 #> [28189] 23333 23965 25219 26252 26326 27392 27464 28172 29613 31004 31179 33714 #> [28201] 34115 34645 34807 36618 36709 37774 37863 38964 39070 39772 40654 42113 #> [28213] 42552 42809 45716 47763 47967 48440 49180  6737  6774  6883  6955  7033 #> [28225]  8016  8556  8672  8927  9806  9985 10210 10356 10952 11510 11552 12207 #> [28237] 12269 13836 14009 15383 15480 16937 17070 17189 18068 18263 18375 19049 #> [28249] 19657 20137 21028 21181 21309 21932 22791 23525 23754 25498 25787 26476 #> [28261] 27093 27393 27876 28100 28313 28391 28560 29093 29682 30919 32241 33392 #> [28273] 34206 35838 36810 37608 38035 38531 41291 42205 42385 44014 44094 45250 #> [28285] 45435 45895 46089 47653 48336 48971  5900  6502  7313  7668  7908  8226 #> [28297]  8594  9091  9267 10211 10558 10761 10856 10900 11134 11421 11661 12208 #> [28309] 12397 12452 12820 13729 15333 15853 15904 16938 17814 20083 20253 21680 #> [28321] 21798 23265 23452 25361 26190 26327 27174 27465 27547 29974 30531 32242 #> [28333] 34646 34910 35839 36619 37234 37775 38445 39516 39688 39850 40307 40994 #> [28345] 41292 42386 42992 43082 43456 43905 45987 46637 48058 48245 48337  6143 #> [28357]  6710  7567  7635  7767  8081  9986 10084 10901 11716 12308 15598 16027 #> [28369] 17190 17251 17382 21182 21799 21933 22856 23604 23755 23903 24112 24935 #> [28381] 25151 26003 26946 27253 28478 28561 29683 30450 31005 31103 32380 33889 #> [28393] 33951 34207 34488 34993 35319 35671 35840 36446 38446 38532 38965 39612 #> [28405] 40730 41738 42387 47027 47336 47863 48854  6738  7067  7246  7440  7595 #> [28417]  7909  8595  8967  9709 10762 10857 10902 11042 11422 13245 13289 13569 #> [28429] 13672 13944 14010 14106 14326 15539 15755 17930 17995 19001 19336 20254 #> [28441] 23389 23756 24185 24464 25220 25571 25858 26611 27175 27254 27877 28392 #> [28453] 28708 30451 31245 32003 32381 32638 32724 33538 33715 34417 35404 36537 #> [28465] 37430 37521 39773 39941 40890 40995 41090 41293 42388 42993 43353 43457 #> [28477] 44015 44778 46353 47764 48972  6047  6814  6884  8395  8928  9180  9356 #> [28489] 10903 11188 11918 11974 12021 12774 13028 13411 13730 14638 15114 15756 #> [28501] 16156 16267 16346 16761 16824 18069 18325 18376 18448 19050 19229 19658 #> [28513] 20633 21103 21546 21800 22153 22219 22280 22356 22494 25019 25285 25362 #> [28525] 26477 27022 28393 29544 29684 30628 30706 31313 31401 31791 32004 34036 #> [28537] 34489 34808 34994 35151 35921 36902 37144 37235 37682 37776 38036 38533 #> [28549] 38889 39346 39430 40815 41379 41832 41915 44398 44872 45896 46546 47337 #> [28561] 47864 49181  6380  6775  7132  7171  7206  8017  8046  8431  9536  9848 #> [28573]  9987 10212 10405 11043 11189 12309 12349 12923 14423 15284 15805 18070 #> [28585] 18377 18756 19591 20377 22080 22991 23390 24113 24380 25859 27394 27878 #> [28597] 30372 30629 31006 31495 35063 35238 35752 35841 36084 36351 36447 36538 #> [28609] 37683 38619 40393 41091 42206 44300 44597 46547 46933  6232  6414  6885 #> [28621]  7002  7034  7273  7833  8227  8480  8519  8810  9537  9807  9988 10763 #> [28633] 11423 11662 11975 12209 12270 12350 12821 12870 13628 13673 14011 14107 #> [28645] 14264 15221 15540 15905 16695 17449 18585 19002 19051 19166 20195 21801 #> [28657] 22009 22220 23677 23904 24861 26120 26395 26947 27466 27632 28242 29094 #> [28669] 29906 31180 31246 32465 34647 35582 35992 37684 38367 41469 41916 42012 #> [28681] 42389 43813 44598 44873 45436 46090 46934 48441  6269  6503  6739  6919 #> [28693]  7035  7669  7724  7876 10085 10213 10858 11717 12111 14524 14853 14948 #> [28705] 16028 16513 17450 18191 18702 19230 19337 19659 20765 21104 21183 21310 #> [28717] 22081 23605 24329 25427 27023 28394 30769 32170 32243 32558 33539 34116 #> [28729] 39247 39689 41092 41917 42390 44501 45437 46935 47231 48152 48442 48522 #> [28741] 49182  6202  6711  7036  7441  7834  7910  7950  8271  8673  8929  9009 #> [28753]  9268  9318  9943 10357 10503 10805 11044 11135 11553 12164 12310 12453 #> [28765] 13570 13779 15167 15481 15646 16214 17071 17137 17931 19052 19167 19774 #> [28777] 22154 22281 22495 24862 25572 26547 27395 27633 28029 28785 31708 32005 #> [28789] 32091 32312 33231 33393 33462 34576 35491 37685 39517 39613 39851 41195 #> [28801] 41645 41739 41833 41918 42470 44016 45897 46838 47232 48338 48656 49183 #> [28813]  6233  6415  7003  7350  7725  8396  8596  8746  9092  9989 10086 10311 #> [28825] 10504 10859 10953 11241 11919 12454 12715 12871 13029 13290 14108 14265 #> [28837] 14424 15001 15334 16268 16577 17002 17561 18192 18264 19398 20440 20506 #> [28849] 21311 21618 22082 22562 23064 23905 26061 26478 26548 26612 28101 28562 #> [28861] 29251 30770 32006 32902 33952 34208 36448 37145 37328 37777 40034 43083 #> [28873] 43814 44095 44874 46548 47233 47552 48246 49063  6203  6339  6416  6852 #> [28885]  7172  9269  9357 10992 11242 11602 12455 12664 13471 14053 14327 14425 #> [28897] 14689 15482 15704 18378 20378 21739 22792 23189 23453 23757 24114 24800 #> [28909] 25499 25640 26749 28030 28563 28940 29754 29837 30236 32466 34281 35405 #> [28921] 38368 38966 39173 39942 42553 43277 44502 46354 46638 49064  6381  6417 #> [28933]  6628  6815  7274  7636  7726  8047  8310  8397  8930  8968 10214 10312 #> [28945] 10505 10806 10993 11190 11380 11718 12071 12112 12210 12271 12665 14639 #> [28957] 15058 15222 15854 15906 16215 16461 16939 17815 19456 19947 20196 21244 #> [28969] 22496 22711 23065 23334 23606 26191 27094 27321 27793 28243 29388 30303 #> [28981] 30849 31007 31314 32559 33394 34577 35320 35922 35993 37076 37522 39518 #> [28993] 40225 40308 41294 42207 42288 42391 44301 44875 44982 46355 47123 48153 #> [29005] 48443 49370  6270  6712  7068  7568  8432 10087 10462 10506 11045 11243 #> [29017] 12558 12872 12924 13141 13524 13571 14426 14640 16881 17138 19775 21369 #> [29029] 21425 21681 22010 22497 23132 23190 25428 26004 26396 28173 29095 29462 #> [29041] 29614 30452 31934 33463 33716 34117 34418 35492 38213 38715 38796 39519 #> [29053] 40035 40478 41093 42722 43191 43278 45801 48523  6340  6956  7351  7483 #> [29065]  7529  8018  8048  8931  9400 10215 10358 10904 11554 12165 12612 13572 #> [29077] 14854 15002 15705 17318 17512 18326 19948 20696 20963 21682 21934 22712 #> [29089] 24115 26121 26892 27467 27706 27954 29019 29907 31247 32997 33797 35923 #> [29101] 38287 38534 40816 41196 42114 42208 43279 43354 43721  7442  7637  7835 #> [29113]  8049  8350  8520  8969  9849 10994 11046 11511 12559 14208 14427 14748 #> [29125] 15757 16029 16096 16696 17996 18379 18449 18511 18641 18757 19457 19520 #> [29137] 20084 20319 20565 21105 21370 23066 23758 26122 27396 27707 28709 29325 #> [29149] 29545 31315 33232 33619 33717 33890 33953 34037 34209 35753 36085 37609 #> [29161] 38535 39071 39347 39431 39520 44207 44399 44779 47553 48524  6418  6504 #> [29173]  6713  6776  7207  7443  7484  8118  8398  9319 10313 10406 11244 11424 #> [29185] 11603 12716 13837 14374 15003 15384 15971 16157 16514 16940 18450 19338 #> [29197] 19885 20138 20634 23191 23454 23759 24040 24731 25573 25641 26123 27176 #> [29209] 27548 28031 29463 29615 30304 30920 31496 32007 33891 33954 34648 35321 #> [29221] 35672 35754 35842 35994 36903 38890 38967 39348 40309 40996 41470 41566 #> [29233] 43906 44017 45069 45526  6447  6957  8082  8119  8311  8708  8889  9231 #> [29245]  9489  9628  9892 10764 11296 12166 12717 12976 13573 13731 14328 14525 #> [29257] 15285 15385 15433 15806 16216 16462 17319 17451 17997 18125 20507 20635 #> [29269] 21029 21426 21683 21802 22357 22630 22713 22857 23335 23526 25788 27095 #> [29281] 27794 27955 28032 28710 30921 31008 31104 32467 32998 33306 33798 34995 #> [29293] 35843 36274 36352 36539 37329 38288 38369 40123 40226 43722 45156 45898 #> [29305] 46639 46745 47446 48247  6777  7444  7877  8351  8709  8847  9990 10359 #> [29317] 11334 11472 12211 12272 12613 12666 12925 14155 14266 14526 14902 15115 #> [29329] 15434 15599 15907 16578 16697 16762 17320 17876 17998 20255 21935 22083 #> [29341] 22793 23831 23966 24863 25020 25221 26674 28033 29838 30145 30771 31497 #> [29353] 31709 31792 32244 32725 33152 33233 34282 35239 35995 36086 36184 36710 #> [29365] 37431 37523 39174 44302 46091 48855 49371  6629  7102  7352  8120  9052 #> [29377]  9270  9538 10314 11136 11191 11512 11817 12614 12718 13079 13142 13183 #> [29389] 13525 13945 14472 15286 15435 15541 16405 19168 19521 20197 20836 22155 #> [29401] 22282 22427 23455 24041 25152 25429 26750 26828 28479 29326 29546 29755 #> [29413] 29908 30237 31009 31181 31316 32903 33395 34283 35322 35673 36087 37330 #> [29425] 38120 39349 40036 40817 41646 42554 42723 43280 43458 44780 46092 46640 #> [29437] 47554  7208  7353  7768  8121  8811  9232  9808  9991 10407 10860 10995 #> [29449] 11245 11381 11513 11663 12560 12615 13246 13291 14582 14641 14903 15335 #> [29461] 16347 16579 18126 18949 19522 20766 21427 21684 22011 23266 25077 25222 #> [29473] 27708 27795 28564 29252 29464 30068 30373 31317 32171 33075 33153 33307 #> [29485] 33955 34210 34911 36185 36811 36998 39432 40310 41380 41471 41919 46440 #> [29497] 47234  6591  7399  7911  8521  8970  9271  9401  9449  9669  9944 11137 #> [29509] 12561 13629 14209 14473 14527 14904 15287 15542 15807 16217 16348 17191 #> [29521] 17321 17816 21685 21864 22084 22631 22794 22858 23267 23967 24654 26192 #> [29533] 27634 27796 29547 30069 30630 30707 30922 33799 35064 36353 37236 37610 #> [29545] 38797 39433 39852 40891 41567 41740 42013 42289 44599 45527 45899 46356 #> [29557] 47968 49184  7037  7173  7275  7596  8083  8160  8848  9992 10645 10718 #> [29569] 10996 11818 12456 13347 13838 14267 15758 15855 15908 17192 17452 18380 #> [29581] 18886 19592 21030 22714 22795 22922 23133 24186 24465 25713 26397 27096 #> [29593] 27255 28941 29096 29548 29839 32726 33464 34352 34419 35323 37146 37237 #> [29605] 37331 37864 40311 40479 40578 40731 47124 47235  6816  7912  8122  8228 #> [29617]  8597 10507 10954 10997 11425 11875 12072 12212 12616 12667 12873 12977 #> [29629] 13080 13892 14012 14642 14690 15004 15909 16030 16097 17193 18127 18586 #> [29641] 18828 19707 22358 24466 25153 25430 26398 28480 28565 29756 29840 30772 #> [29653] 32092 34284 35240 35493 36449 38037 39248 40227 40655 41647 42014 42994 #> [29665] 46936 47125  6958  7103  7209  7247  8161  8522  9233  9629 10646 11426 #> [29677] 11762 11920 13184 13412 13630 13674 13946 14013 14156 14949 15168 15543 #> [29689] 15706 15759 16158 17513 18758 19523 19660 19819 20890 21740 22156 22221 #> [29701] 23134 23391 23607 25154 26675 27709 28314 28566 29020 29465 33308 33956 #> [29713] 34809 35924 36812 37238 37332 37524 38536 39943 40312 41568 41920 42555 #> [29725] 45157 45251 45341 45802 47236 47447 49372  6959  8019  8481  9670  9893 #> [29737] 10408 10596 11514 12398 12562 12668 12978 13247 14054 14375 14749 15005 #> [29749] 15288 16698 16882 17003 17252 17383 17627 18327 19053 19661 20767 22498 #> [29761] 23678 26613 26676 26751 26948 27024 28395 29466 29975 30070 31710 31863 #> [29773] 32468 32639 32727 34211 34728 37239 37333 37432 39434 39853 40124 40818 #> [29785] 42015 42724 44096 47448 47654 47765  6960  7133  7210  7638  7913  9181 #> [29797]  9450 12617 13675 13947 14750 16159 16641 16699 16763 17139 17877 18071 #> [29809] 18759 18887 19169 19281 19949 20566 20768 21487 22992 23832 23906 23968 #> [29821] 24381 25500 27025 27468 28396 28862 29327 29389 30305 30923 32093 32640 #> [29833] 33540 33957 34212 34490 34996 35583 36354 36450 38447 38620 38798 42645 #> [29845] 42995 43084 43723 44400 45626 46357 46839 48154 48444  6886  7038  7314 #> [29857]  7485  7670  7799  7878  7951  8162  8272  8523  8776  8812  9320  9490 #> [29869]  9539  9671 10905 11192 12113 12399 12563 12775 12926 13732 13948 14157 #> [29881] 14268 14474 14691 15169 15386 16031 16218 17194 17322 18950 19339 20085 #> [29893] 20198 20320 20441 20508 22157 22499 22632 22859 23268 23392 23833 24655 #> [29905] 25714 26328 26752 27177 27322 27469 28034 28102 29841 31498 31711 32469 #> [29917] 33234 34038 34118 35755 36711 37433 37611 37778 38537 38799 39521 39854 #> [29929] 40656 42016 42910 43192 43724 44097 45803 47969 48973  7248  8273  8890 #> [29941]  8932  9093  9134 10039 10315 10409 10765 11246 12167 12351 12618 12669 #> [29953] 12927 13081 15116 15483 16032 16098 16580 17453 17562 19399 19950 20199 #> [29965] 20256 20509 21184 21312 21488 22158 23336 25286 27323 27397 28711 28863 #> [29977] 29170 29616 30374 31402 32999 33154 33958 34213 34997 35674 36275 37077 #> [29989] 38621 38968 39774 39944 40125 42017 42725 46165 46746 47126 47655 49373 #> [30001]  7249  7800  8050  8933  9451  9758 10250 10463 11719 12114 12979 13185 #> [30013] 13413 13839 13893 15223 15600 15808 15972 17253 17384 17878 18451 18512 #> [30025] 18642 18829 19951 20510 20636 20964 21619 22222 22796 23067 23608 24656 #> [30037] 25501 26753 26829 28315 28786 29021 30924 31318 31575 33155 33309 33718 #> [30049] 34420 34578 34998 35241 36276 37779 38289 38716 38800 38969 39614 41834 #> [30061] 42209 42726 43725 43815 44208 45900 45988 46256 46747 46937 48059  7569 #> [30073]  8051  8399  9321  9710  9945 10686 10766 10955 11335 11664 11876 11921 #> [30085] 12564 12619 12670 13733 13894 14805 15760 15809 17072 17323 17514 17999 #> [30097] 18951 19003 21106 21313 22563 22860 22923 26399 27256 27470 28174 28864 #> [30109] 29467 29549 30071 30631 31403 31793 32313 32470 32641 33719 34729 37686 #> [30121] 37780 37865 38038 38717 41197 42556 42911 43533 43632 44983 46358 47656 #> [30133] 48339 49065 49185 49271 49374  7004  8123  8482  9182  9491 10040 10360 #> [30145] 10508 10998 11193 11427 11720 12073 12213 13348 14014 14210 15707 16160 #> [30157] 17004 17563 18000 19524 19952 20637 21547 22633 24467 24591 25223 25287 #> [30169] 27097 27178 27257 27710 28244 29022 30146 30238 31650 32728 33541 35756 #> [30181] 35996 36355 36999 37240 37434 39072 40228 43459 43907 45342 46359 46549 #> [30193] 46641 48856  7445  7486  7639  8400  8598  9809 10719 10807 11555 13143 #> [30205] 13840 14055 15059 15761 15973 16099 16406 16463 16825 17385 17628 18381 #> [30217] 18888 19231 19400 19593 19708 20016 20769 21107 21185 21314 21489 22993 #> [30229] 23456 25078 27711 27956 29328 29550 30453 32094 32830 33542 33620 34285 #> [30241] 34912 34999 35494 36451 37147 37687 38970 39350 41381 43816 44303 48445 #> [30253]  7446  7727  8163  8634  8813  9272  9492 10647 11428 12115 12671 12874 #> [30265] 13676 13895 14211 14329 17073 17629 18265 18587 18703 19401 20257 20379 #> [30277] 20511 20567 20697 20965 22223 23457 23760 23969 25021 25079 25224 27324 #> [30289] 27797 28245 29757 30532 31404 32008 32245 35495 35584 37241 37525 38121 #> [30301] 38214 38370 40579 40997 46938 47127 47237 48525 49066  7174  7400  8777 #> [30313]  9135 10361 12022 13082 13526 13631 13734 13780 14583 14855 15224 15974 #> [30325] 17386 17932 18072 18128 18704 20086 20200 20258 20442 20770 21548 22564 #> [30337] 23192 23834 24259 24382 24592 24864 26124 26754 27549 30632 30925 31712 #> [30349] 31935 32560 32642 33959 34119 34491 35242 35324 37000 38122 38622 39249 #> [30361] 42646 43460 43908 44503 46360 47657 47865 48526 49186 49375  7069  7211 #> [30373]  7671  7769  8052  8635  9273  9493 10362 11138 11247 11819 12168 12311 #> [30385] 12672 13186 13349 15006 15336 16269 16941 18001 18513 18830 19054 22159 #> [30397] 22634 23679 23907 25022 25502 25860 26193 27258 27398 27957 28035 28175 #> [30409] 28481 29097 30850 31499 32729 33076 33156 33465 34353 35325 35925 39945 #> [30421] 40480 42210 42290 42557 42647 44876 47555 47658 47866 48857  7315  7640 #> [30433]  7836  8053  8312  8433  8483  8814  8891  9010  9183  9759 10410 10861 #> [30445] 12352 12673 13677 14806 14856 15387 15975 16270 17387 18952 19170 19594 #> [30457] 19776 21031 21108 23337 23527 23835 23908 24468 24593 24732 26549 27026 #> [30469] 27325 28316 28942 31010 31713 32382 32730 33310 34579 34810 35152 35326 #> [30481] 35406 35757 35997 37526 37781 38215 41198 41295 42392 42558 44304 44401 #> [30493] 45989 46441 48657  7212  7250  7672  7914  8352  8557  9358 11297 11382 #> [30505] 11922 12457 12620 12674 13187 13350 13735 13781 14428 15436 16942 17515 #> [30517] 17697 17755 17879 18193 18382 18705 19171 19525 19953 20443 21620 21936 #> [30529] 22359 22635 23528 24469 24801 24865 25080 26614 27179 27259 27550 28482 #> [30541] 30454 32314 32561 32831 34120 35407 35844 36356 36813 37435 39250 39690 #> [30553] 40998 42291 43534 43726 44018 45990 46166 46257 47238 47449 48974  7175 #> [30565]  7213  7251  7915  8124  8710  9053  9452  9630 11139 11336 11665 12400 #> [30577] 13574 14056 15544 16943 17698 18002 19055 19954 20259 20321 21186 21245 #> [30589] 22283 22500 24260 24470 24733 25642 26125 26615 27958 28943 29468 30926 #> [30601] 33000 33077 34730 34811 36088 36186 39073 39435 39775 40037 40126 40229 #> [30613] 40394 42018 42292 42559 42727 45528 45804 46840 48527  7916  8401  8484 #> [30625]  8711  9402  9453  9894 10088 10316 10956 11140 11194 13414 13632 14109 #> [30637] 14376 14905 15060 15388 16464 17699 18953 19004 20512 21246 23135 23458 #> [30649] 24042 24116 26062 26830 27959 28317 29390 32471 32643 32832 33235 34121 #> [30661] 37612 39436 40819 42293 42912 43633 47970 48248 48528 48658  7276  7487 #> [30673]  8125  8353  8402 11473 12621 13248 13415 13678 16515 17700 18073 21247 #> [30685] 21621 22428 22797 24538 24657 24866 26677 27326 28397 30927 32383 33396 #> [30697] 35585 36357 36452 37001 37078 37688 38123 41382 41741 42996 43085 43817 #> [30709] 44504 45529 45991 46642 46841 47556  7570  7597  8164  8403  9359  9631 #> [30721]  9760  9850 10041 10559 10687 11383 11923 11976 12023 12875 14269 15708 #> [30733] 15910 16349 16516 17195 17388 18129 18194 20380 20771 21937 22160 22284 #> [30745] 23068 23193 24117 25023 25155 25789 25920 26678 29976 32172 33311 33800 #> [30757] 33892 35065 35496 36620 37242 38124 38801 39175 39776 40481 42728 43461 #> [30769] 43818 44678 46939 47128  7488  7571  7641  7917  8229  8313  9454  9672 #> [30781] 10411 10808 10906 11337 11384 11666 11877 12312 12565 14692 18130 18383 #> [30793] 18643 19112 20698 21109 21187 21428 22161 22501 22715 22994 23393 25363 #> [30805] 27027 27798 28176 28567 28865 29469 29758 31011 32472 32904 33893 34039 #> [30817] 34122 34649 35586 36089 36904 37613 38125 38371 39074 39946 41921 44984 #> [30829] 45805 47659 47867 48340 48858  7728  7801  8054  8314  8815  8892  9540 #> [30841] 10999 11298 11385 12169 12928 13292 13472 13575 14475 14643 14751 15117 #> [30853] 15225 16161 17701 19056 21490 21622 21686 21938 22162 22360 22429 23761 #> [30865] 25574 27471 27879 27960 28036 28866 29470 29842 30533 31012 31248 33078 #> [30877] 34286 35000 35243 35675 37866 37953 38971 39691 39855 40732 41648 43355 #> [30889] 43535 43634 45070 45806 47239 48446  8524  8674  9455  9851 10767 10907 #> [30901] 10957 11086 11556 11878 14377 15118 15484 16407 16581 17074 17389 19057 #> [30913] 19172 19662 20966 22085 23680 24118 24261 24330 24734 25921 29098 32095 #> [30925] 32644 33543 34650 35676 36090 36540 36814 37079 37527 38448 39437 39692 #> [30937] 42648 43819 45992 46167 47766 49376  7489  7673  8404  8485  8778  9360 #> [30949]  9711 10317 10597 10958 11087 11474 11820 14950 15389 15545 16700 16826 #> [30961] 17324 17756 18644 19820 20139 20322 20381 21110 21188 21371 21865 22502 #> [30973] 22716 23459 23529 23681 23762 24187 24383 24539 25081 25225 25643 26400 #> [30985] 26479 26949 27551 28037 28632 29023 29843 30773 31794 32562 33001 35327 #> [30997] 37080 37148 38623 38802 39176 39251 39856 41472 41835 42393 43635 44505 #> [31009] 44985 45252 45717 46093 46748  8165  8779  9184 10089 10598 11000 12116 #> [31021] 13030 13188 13293 13351 13633 14693 15061 15390 16100 16764 16883 17325 #> [31033] 17516 18266 18706 19340 19402 19955 20382 21032 21189 21491 22285 22717 #> [31045] 24936 25024 25790 25922 26401 26755 27028 27098 27552 28318 28867 29685 #> [31057] 30708 31319 33544 37782 38718 38803 39438 41199 41383 41922 43462 44098 #> [31069] 45158 45530 46442 47028 48155 48341  7879  8166  8230  8599  9054  9234 #> [31081]  9274  9494  9852 10131 10251 10768 11047 11141 11195 13189 13896 14807 #> [31093] 14906 15007 15119 15226 15709 16350 16517 16642 16827 17254 18074 18514 #> [31105] 18588 19663 21623 21866 22086 22430 22995 23269 23460 23682 23763 24043 #> [31117] 24119 25156 26756 27553 27799 28246 28633 28944 29253 29471 29759 34812 #> [31129] 36091 36187 36621 36905 37334 38624 38891 39439 39857 41384 42211 42394 #> [31141] 42913 43281 43536 44019 46168 47767 47868  8167  8274  9185  9582  9993 #> [31153] 10042 10769 10908 11088 11248 11475 11557 12719 13736 14110 14270 14429 #> [31165] 14694 15062 15810 16033 16271 16828 17630 18195 18384 19282 20513 21492 #> [31177] 22636 22718 23194 23909 24802 25503 25861 26005 26329 27472 28177 28634 #> [31189] 28712 29099 29551 30147 30239 30709 30928 31936 32246 32315 33236 33397 #> [31201] 33720 35926 35998 38126 38290 39858 40038 40482 40892 41385 41569 41742 #> [31213] 42810 43909 44209 44402 45159 45343 45627 45901 46258 47338 49067 49187 #> [31225]  8275  8354  8434  9055  9136  9456  9541  9632 10909 11338 12214 12822 #> [31237] 13190 13782 13841 14057 14476 15811 16582 17075 17196 17326 17564 17702 #> [31249] 18328 18385 19058 19526 20140 20772 23069 23609 23764 24188 24262 26831 #> [31261] 26893 30534 31714 33398 34492 34913 35497 35677 35845 36906 37689 38372 #> [31273] 39440 40483 43356 44781 45628 45993 46749 47660 49068  7880  8636  9457 #> [31285]  9495  9853  9994 10363 10720 10862 11476 11515 11667 11721 12401 12622 #> [31297] 12823 12980 14015 14158 14330 14644 16701 17880 18707 19059 20260 20323 #> [31309] 20444 20891 22361 23836 25715 26006 26194 27260 27554 27800 28038 28178 #> [31321] 28945 29472 29760 29844 31249 33894 34354 35066 35408 37335 37528 37690 #> [31333] 39777 40127 41200 42811 42914 44020 44403 44679 46750  7674  8055  8525 #> [31345]  9995 11558 11604 11977 12623 12720 13679 13737 13842 14378 14430 15008 #> [31357] 15391 15710 15911 16272 19403 20017 20261 20638 21803 22286 22431 23970 #> [31369] 24803 25364 26480 26616 26679 28039 28179 28713 29977 30710 32473 34214 #> [31381] 36358 37243 37783 38972 40128 40395 41296 47768 48060 48859  8056  8558 #> [31393]  8971  9186 10509 10721 12117 12505 12981 13249 13352 13416 13783 14431 #> [31405] 14528 15063 15120 16034 16162 16219 16518 17517 17703 18267 18329 18452 #> [31417] 18645 18708 18831 19060 20262 20892 21372 22996 24044 24937 25923 26126 #> [31429] 26253 26950 27880 29909 30072 30929 32645 33621 33895 34215 34731 35587 #> [31441] 35678 38127 39693 42019 42115 42649 44099 45438 45994 46940 47029 47129 #> [31453] 47450 48342 48748  8315  8526  9403  9810  9946 10464 10560 10722 10863 #> [31465] 10910 12675 13417 13680 13738 14159 15289 16408 16643 17005 17140 17518 #> [31477] 18268 18709 18954 19173 19232 19341 20141 20639 22503 22637 22924 23610 #> [31489] 23683 24263 24804 25575 25716 26195 26550 27099 29100 30633 32474 32731 #> [31501] 33079 33237 33399 33466 35067 35588 35679 38373 39351 39778 41570 41649 #> [31513] 42729 42915 43193 44506 45344 46361 46643 47030  8126  8559  8637  8780 #> [31525]  8972  9094 10318 11299 11605 11821 11879 12776 12824 13294 13739 14212 #> [31537] 14271 14432 15227 15856 16884 16944 18760 18955 19886 21624 21687 22362 #> [31549] 22719 22861 23910 24658 24735 25431 26127 26254 29329 31715 32833 34040 #> [31561] 35153 35409 36453 36712 37149 39779 39859 40039 40230 40484 40733 41923 #> [31573] 42212 45160 46362 49188  8231  8781  9361  9583 10132 10599 10864 11386 #> [31585] 11822 11924 12074 12273 12313 12402 12721 12876 15857 15912 16945 17390 #> [31597] 17454 17631 17933 18196 18515 18832 22363 22504 23911 24331 25862 26832 #> [31609] 27473 27712 29330 29686 31500 31795 32905 34493 35846 36454 36907 37336 #> [31621] 38216 39075 39694 41201 41297 41743 42020 43537 44021 45629 45807 47769 #> [31633]  7881  8893  9011  9458  9542  9584  9854 10252 10364 10600 10911 11048 #> [31645] 11606 12403 12825 14016 14529 16101 16273 17141 17391 17934 18453 20967 #> [31657] 21248 22364 23765 24120 24189 25365 25576 25717 26951 27399 27555 28103 #> [31669] 28247 29171 29331 29687 29845 30306 31320 31501 31937 32009 32732 34494 #> [31681] 35154 35244 36713 37954 38039 38449 39695 39947 40657 40893 42116 42395 #> [31693] 43357 43910 44507 46443 47031 48156 49377  8127  8276  8600  8638  8712 #> [31705]  9362  9947 11559 13144 15064 15290 15437 17006 18131 18833 19005 19061 #> [31717] 19664 19709 20568 20893 21429 22087 24121 24867 25082 25924 26894 28946 #> [31729] 29024 29552 29688 30711 33400 33721 34495 36541 38291 38892 39352 40129 #> [31741] 40734 44305 45253 47661 48061 49272  8084  8232  8486  9012  9712  9895 #> [31753] 10465 11429 12075 14111 14530 14857 16885 17007 17076 18132 19404 19887 #> [31765] 20383 20514 22638 23766 23971 24540 24938 25925 26330 26402 26680 26952 #> [31777] 27881 28787 29025 29254 29332 29761 30240 31105 32096 32646 33960 34580 #> [31789] 36188 37002 37337 37784 38292 38719 38973 39696 39780 40485 43911 44306 #> [31801] 45345 46842 47240  8277  8435  9013  9095  9585  9896 11249 11430 11607 #> [31813] 11668 12118 13083 13634 13740 14695 14808 15170 16102 17197 17255 17881 #> [31825] 19821 20142 20201 20445 21373 21493 21549 24045 24332 24659 26063 26617 #> [31837] 27327 28248 28398 28788 30241 30930 32384 32563 33312 35410 36622 37338 #> [31849] 37691 37785 37867 38538 38625 38893 38974 42812 43086 43194 45718 46094 #> [31861] 48343  9811  9948 11049 11560 12353 13527 13949 15171 15392 17704 17757 #> [31873] 18075 18197 19888 20018 20202 20569 23195 23270 23394 24660 27261 28040 #> [31885] 29762 29846 29978 30073 33622 36714 37868 37955 38374 38626 39697 39860 #> [31897] 40894 40999 43195 43282 44508 44782 45254 45902 46843 48249 48529 48749 #> [31909] 49189  8973  9633 10216 10809 10912 11431 11561 11669 11722 11763 11925 #> [31921] 12024 12404 12458 13528 13897 14213 14696 14809 15291 15438 15546 15647 #> [31933] 15762 15858 16409 16946 17142 17632 18516 20773 20837 21249 22012 22639 #> [31945] 23767 25288 25791 27029 27400 29553 30634 30712 31013 31405 33157 36189 #> [31957] 36455 37244 38450 38539 39781 39861 42021 45346 47032 47869 48530 49273 #> [31969]  8199  9137  9404 10913 10959 11250 11764 11978 12566 12982 14272 14477 #> [31981] 14697 14752 14858 18133 18198 18386 19006 19527 19665 19710 20838 21111 #> [31993] 22640 23136 23684 25504 25926 27030 27100 27180 27262 27713 27961 28714 #> [32005] 28789 28947 29763 29910 31250 31576 32097 32564 32834 35411 35758 37245 #> [32017] 38128 38540 39177 39522 40396 41650 42916 43463 44307 48447 48860  9275 #> [32029] 10253 10412 10561 10810 11050 11339 11477 11723 11926 14859 16163 16465 #> [32041] 16519 17008 17327 17519 18199 19777 19956 20143 22997 23338 23611 23685 #> [32053] 25718 27181 27635 28041 28104 29979 31182 31502 31796 32173 32647 35412 #> [32065] 35999 36542 37246 37529 37692 38293 38627 40397 41000 41202 41473 44100 #> [32077] 46844 47339 48250  8782  9405  9812  9897 10319 10562 12215 12826 13843 #> [32089] 13950 14058 14531 14810 16410 17077 17143 17328 17817 19595 19666 20263 #> [32101] 20894 20968 21494 22432 22505 23137 23912 24471 25025 25226 25644 26681 #> [32113] 27263 29255 29333 30931 31864 32316 32835 32906 33313 34123 35328 37436 #> [32125] 41094 43196 44101 44509 45161 46169 46259 46363 47340 47557 47870 48861 #> [32137] 49069  9014  9761  9996 10171 10914 11608 12314 12354 12827 12877 12929 #> [32149] 13635 13784 14532 15009 15065 15812 16947 17392 18200 18517 18956 19062 #> [32161] 21625 22641 23196 23530 23612 24661 24939 25505 26481 26618 26833 26895 #> [32173] 27636 27882 27962 28319 28399 29689 30074 30375 30535 30774 30932 31321 #> [32185] 31577 32648 33314 33545 33801 33961 35068 35245 37247 38129 38804 39252 #> [32197] 40231 41095 41571 42213 42997 43727 44680 44877 45630 47770 11765 12119 #> [32209] 13636 13785 14433 14478 14645 16765 17565 17882 18957 19405 19458 19711 #> [32221] 21033 23271 23395 24122 25157 26064 26331 26896 28635 29172 29256 30536 #> [32233] 30775 31106 31716 32098 33467 33722 34496 35498 36000 36908 38975 39076 #> [32245] 39253 39698 40398 42022 42917 43087 43197 43912 45255 45719 47241 49274 #> [32257]  9187  9406  9673 10043 10960 11001 11432 13031 14860 15010 15228 15648 #> [32269] 15913 16411 16644 16886 17009 17329 17758 18589 18889 18958 19113 19889 #> [32281] 21741 22506 23461 23972 24662 24868 26682 26757 27801 28790 29764 31183 #> [32293] 31717 32565 34124 35589 38628 38805 39782 40040 40232 41474 46444 47971 #> [32305] 48659 49070  8747  9276  9855 10044 11766 12216 12506 13353 13418 13637 #> [32317] 13786 14434 15011 15292 15439 15859 17144 18134 18201 18269 18761 19114 #> [32329] 19283 19778 19890 20144 20203 22287 22433 22862 23686 24190 24663 25863 #> [32341] 27182 29026 31718 31797 31865 32566 34497 34651 35413 35759 37003 38294 #> [32353] 40486 44210 44681 45903 47451 47662 48531 48862  8560  8675  9096  9586 #> [32365] 10090 10510 11002 11089 11979 12076 12624 12722 14331 14379 14951 15229 #> [32377] 15711 16103 16887 17198 19822 20019 20145 21190 25227 25506 25577 26007 #> [32389] 26758 26953 27714 27883 28249 28483 29334 30537 32099 32475 32733 33623 #> [32401] 35414 36001 36623 38217 40130 40487 40658 41386 42396 43358 45162 45531 #> [32413] 48251  9188  9496  9762 10045 10172 10365 10865 11142 11823 12120 12355 #> [32425] 12507 12625 12777 13419 13473 13681 14646 15649 16829 19528 19957 20384 #> [32437] 20699 21315 21550 23531 24333 24664 25792 26332 26482 26619 27031 27328 #> [32449] 27637 28948 29391 31014 31322 31578 31651 31938 32567 33315 33401 35246 #> [32461] 36909 38541 39254 41096 42117 42294 42650 43198 43728 44878 45256 46260 #> [32473] 46644 47558  9543  9634  9674  9997 10466 11196 11724 11824 11880 12930 #> [32485] 13191 13951 14584 14952 15121 15172 15337 16412 16702 17520 17759 17818 #> [32497] 18387 18710 19596 20385 21250 21316 21688 22863 23532 23687 24472 24594 #> [32509] 24940 25228 26333 26403 26620 27715 28791 31503 32100 33080 34041 34732 #> [32521] 35499 35760 38218 40041 41203 42214 42560 42813 43820 43913 45347 45995 #> [32533] 47341 47972 49275  8894  9015  9138  9949 10254 10467 11003 11387 11433 #> [32545] 11478 12025 12356 14380 14953 15293 15763 15914 16104 16220 16766 16948 #> [32557] 17455 20020 20324 21034 22163 26954 27401 27556 27716 28568 29101 30148 #> [32569] 30713 30933 31251 31504 31579 33802 34125 36002 36456 38375 38629 39783 #> [32581] 39862 41475 42295 42814 43088 44879 44986 45996 46445 47242 47871  8527 #> [32593]  9016  9277  9322 10413 10723 11004 11340 11562 11767 12315 12405 12676 #> [32605] 12828 13420 13576 13787 14698 16105 18076 18202 20774 20895 21867 22365 #> [32617] 22507 22565 22720 24384 24805 25289 26955 27329 28484 28715 29690 30455 #> [32629] 30776 32385 32734 37614 38630 40580 40820 41476 41836 43729 43914 45439 #> [32641] 45631 45904 46261 47033 48157 48344  9713 10217 10255 10366 10961 11143 #> [32653] 11825 12508 13084 13844 14533 14647 15547 15976 16035 18135 18454 18518 #> [32665] 18590 18762 18890 21035 21430 22088 22508 23688 25719 26128 26334 26956 #> [32677] 28320 29554 30075 30456 31184 31406 31652 32476 32568 33468 34216 34581 #> [32689] 36003 36190 36715 37437 37956 41298 42561 42815 43283 45257 46845 47034 #> [32701] 47342  8849  9714  9998 10866 11144 11927 12567 14059 14160 15548 16520 #> [32713] 16888 17078 17521 19007 19667 19958 20087 20515 21036 21317 24595 25864 #> [32725] 26683 28105 28868 29392 29980 30242 30714 32317 32386 32907 34733 36543 #> [32737] 37615 39615 40233 40313 43089 44682 46550 47771 48345 49071  9950 10320 #> [32749] 11051 11090 11670 12357 14699 14811 14954 15066 15650 15977 16221 16274 #> [32761] 18003 18330 18519 18591 20021 21431 22366 22721 22925 23339 23396 23533 #> [32773] 23689 23973 26065 28792 30149 31323 31719 32387 33002 33238 33469 34914 #> [32785] 35415 35847 38130 39178 39784 40042 40399 41001 41651 41924 42397 43284 #> [32797] 43538 44510 44987 45258 45348 46262 46446 47343 48158 48532  9407 10648 #> [32809] 11341 11725 12026 12459 12568 12931 14534 14861 15012 15230 15813 16036 #> [32821] 16645 17010 17705 18203 18331 20146 21374 22864 22998 23768 25507 25793 #> [32833] 27032 27717 28949 29173 29473 29765 30150 31407 31653 32101 32388 32649 #> [32845] 34287 35069 35680 36716 37339 37438 38219 39863 40043 40659 41097 42215 #> [32857] 42398 42918 43821 44022 44102 44600 45632  8713  9017  9497  9587 10218 #> [32869] 10563 10770 11091 11881 12170 13145 13192 14112 14753 15294 15393 15814 #> [32881] 16164 16413 17760 18834 20839 21037 21432 21626 21868 21939 22164 24541 #> [32893] 24596 24736 25645 28180 28485 28569 28716 28869 29911 31185 32174 32318 #> [32905] 32735 33896 35070 35247 35681 35927 36457 36624 37150 37340 37786 38040 #> [32917] 41477 42118 43915 44211 45071 47772 47973 48750 49072  9189  9408  9498 #> [32929]  9588 10724 11251 11516 11980 12626 12878 12932 13032 13085 13788 13845 #> [32941] 14955 17199 17393 17456 18455 20386 20700 20896 21495 21551 22224 23138 #> [32953] 23197 23690 24191 25432 25865 25927 26008 26129 26483 26551 27402 27963 #> [32965] 28321 29102 30715 33546 36359 37787 38720 40400 44023 45532 49073  9589 #> [32977]  9763 11145 11197 11252 11517 11726 12217 12509 12569 13193 13295 13529 #> [32989] 15231 15394 15651 17883 18004 18592 18646 19459 19668 20088 20204 21038 #> [33001] 21552 21804 21869 21940 22225 22722 24046 24123 25508 27330 28106 28950 #> [33013] 29393 29766 31107 31324 32102 32477 34498 34652 35155 36191 38131 39255 #> [33025] 39523 39948 40488 41652 41925 42730 44212 44404 44880 46645 48159 48660 #> [33037]  8850  8934  8974  9323 10468 10601 11092 11479 11768 12027 12218 14332 #> [33049] 14435 15764 15915 16037 17330 17457 18136 18388 18520 19174 19891 20516 #> [33061] 20570 20775 21870 22288 23340 25646 26130 28570 29027 29103 29847 33239 #> [33073] 35156 35416 38976 39353 39616 39785 39864 40314 40660 40735 41387 41653 #> [33085] 45163 46551 48252 48533 48661 49074  9590  9635  9951 10962 11342 12219 #> [33097] 12274 12778 13577 13638 14333 14381 14479 14535 15173 15485 16351 18389 #> [33109] 18835 19597 20325 21251 22642 23070 23837 24473 25158 25366 27331 27403 #> [33121] 27638 28717 28951 33081 33402 34421 34915 35157 37004 37957 38295 38451 #> [33133] 39617 39949 44683 46170 46646  8935  8975  9363 10963 11480 11826 12275 #> [33145] 12570 13250 13421 15295 15652 15765 16521 17331 18204 18959 20022 20640 #> [33157] 22566 24192 26404 26621 27332 27404 27802 27884 28718 29335 29394 30635 #> [33169] 31866 32478 33082 33316 34217 34916 35417 35500 37341 39699 43464 43636 #> [33181] 44684 45533 46447 47035 47773 47872  8976  9324  9591  9715 10256 10321 #> [33193] 10367 10469 11343 12510 13033 13578 13898 15122 15712 16466 16583 16949 #> [33205] 17394 17819 17884 18270 18763 19892 20326 20776 20897 21433 22289 22926 #> [33217] 23139 23272 23913 24542 25290 25433 25720 26405 26834 27557 28636 29257 #> [33229] 29395 29474 30636 31325 31867 33158 35001 35761 36815 37788 38894 40581 #> [33241] 41002 42816 42919 43199 43465 45072 46941 47452  9097  9499  9636 10046 #> [33253] 11300 11563 13251 13682 13952 14060 14273 14862 16830 16889 17256 17458 #> [33265] 17522 17820 17885 20023 20089 20147 21039 21318 23198 24806 25434 26335 #> [33277] 27885 28322 28719 29912 30457 31408 32479 32650 33240 34653 35002 36004 #> [33289] 36910 37693 38376 38631 39700 41388 43200 44024 44988 45259 46552 48751 #> [33301] 48863 49190 10173 10811 10867 10915 11518 12077 12358 12723 13146 13296 #> [33313] 13354 13639 14017 14214 16352 16703 16831 17706 17821 20205 20517 20571 #> [33325] 21040 21553 22013 22367 22798 24385 24474 24737 25647 27718 29555 30243 #> [33337] 30307 30458 30637 31108 31186 32010 32736 33470 34042 35682 37694 38721 #> [33349] 38977 39524 40131 42023 42296 42471 42998 43090 47974  9544 10322 10511 #> [33361] 12406 14018 14215 14700 14812 15916 16767 17633 19669 21941 23071 23769 #> [33373] 23838 27474 28637 29104 29258 30459 31015 32175 33083 33471 34043 36192 #> [33385] 37789 38296 40044 41654 42399 42651 42817 43539 45997 48864  9139  9278 #> [33397]  9545  9898  9952 10257 10512 11301 15232 15978 19342 19529 20387 20898 #> [33409] 21112 21252 21375 22014 22165 22509 23534 23770 24738 25026 26196 27264 #> [33421] 27719 27886 27964 28952 29105 29174 29691 29767 31016 31720 31798 32389 #> [33433] 33159 34218 34355 34499 35248 35928 36277 36717 36911 38452 38806 40234 #> [33445] 40401 42652 43285 43466 44213 44685 44989 45164 48975  9325  9500 11344 #> [33457] 11727 11981 12276 12724 12983 13789 14701 14813 15653 15713 16414 16646 #> [33469] 17011 17459 18271 18711 19530 20148 20777 20969 21627 21942 23691 25648 #> [33481] 26066 26336 28250 29692 30376 30538 30638 31505 31580 31721 35329 35590 #> [33493] 37005 37248 38041 39256 40315 40489 40821 41003 43286 44214 44405 44783 #> [33505] 44881 44990 45165 45440 45720 47774 47873 49378  9459  9592 10812 11198 #> [33517] 11728 12359 12779 13741 13953 14274 14863 14907 15440 15486 15917 16522 #> [33529] 16704 16890 18390 19008 19959 21113 21943 22290 22567 22643 23692 26835 #> [33541] 28486 28953 29175 29768 30460 30539 31252 34422 35929 38220 38377 39179 #> [33553] 39950 40490 41299 42297 42472 43091 43822 44308 44991 45166 46647 46942 #> [33565] 47243 47559 48160 49379  9235  9279  9675  9856  9953 10258 10813 11005 #> [33577] 11199 11481 11928 12121 12829 13034 13422 13474 14161 14382 14814 17332 #> [33589] 18077 20388 20518 21253 21496 21742 22015 22089 23771 25649 26406 27720 #> [33601] 28571 29556 30540 30851 31109 31654 31868 32908 33403 33472 33624 33803 #> [33613] 34654 35330 36816 40132 40582 41204 41300 42731 43540 44309 44882 45167 #> [33625] 47344  9409  9546  9716 10602 11200 11519 11929 12122 12360 13147 14061 #> [33637] 14216 14648 15067 16832 17200 18205 18647 18764 19233 19779 20519 20572 #> [33649] 22226 22510 22568 22723 23072 23772 23974 24047 24264 24386 24739 26684 #> [33661] 26957 27183 28323 28400 29475 31187 31506 32103 32737 32909 33084 33241 #> [33673] 33723 35683 35848 36092 36360 36458 37081 37790 37869 38132 39701 40736 #> [33685] 41004 41098 41837 42119 42818 44601 45168 45633 47560 47975  9547  9717 #> [33697] 10368 11093 11253 11302 11609 11827 12028 12277 12511 12571 12725 13579 #> [33709] 14275 14585 15013 15296 15338 19063 20264 20446 20520 22016 22090 22865 #> [33721] 24048 24543 25027 25083 25435 25509 25866 27101 27887 30541 30777 32011 #> [33733] 32319 32836 33625 33962 34917 35071 35849 36005 36625 36817 38378 38632 #> [33745] 40045 40133 40402 40661 42024 42819 42920 43287 43916 44406 45441 45721 #> [33757] 45905 46648  9637  9676 10219 10323 10470 11388 11520 13297 13580 13742 #> [33769] 14383 16647 17145 17395 18648 18836 18891 19780 19960 20024 21434 21689 #> [33781] 21805 21871 22368 23613 24475 24941 26759 26958 27265 27558 28042 28870 #> [33793] 29259 30852 33724 34655 35850 36912 37151 37342 38379 38633 39525 39702 #> [33805] 40046 41205 41389 45073 45442 45808 45998 46943  9718 10259 11564 11828 #> [33817] 12512 12830 14019 14334 14649 14702 15174 16584 16833 17396 17707 18137 #> [33829] 18892 19961 20778 20899 22166 22644 22866 23693 24387 24665 26067 26552 #> [33841] 27033 27266 27333 29557 30244 30639 31017 31409 31507 32012 32104 33085 #> [33853] 33473 34126 35930 38453 38807 43541 43917 45534 45809 45999 46263 46751 #> [33865] 46944 48865 10688 11982 12831 13035 14020 14062 14162 14703 15233 15339 #> [33877] 15860 17822 18005 18765 20025 20900 20970 21191 21497 22017 22369 22569 #> [33889] 23535 23773 24265 25028 26131 26337 26407 26760 27102 27888 28251 28487 #> [33901] 28720 29558 31410 32105 32390 32651 32910 33160 33317 33725 35249 38978 #> [33913] 39703 40134 41926 42120 42921 43542 43918 45634 46448 48346 48448  9501 #> [33925]  9764  9999 10133 10564 10649 11052 11829 12278 13148 14021 14704 14864 #> [33937] 15014 15441 15601 16106 16222 16467 16523 16648 16705 16768 17886 18006 #> [33949] 18766 19670 21041 21254 21376 23462 23614 23774 25367 25721 26408 26553 #> [33961] 28252 28871 29176 29396 29693 29981 30461 30853 32837 33726 34127 36006 #> [33973] 36459 36818 37616 38133 38634 41099 41744 44103 45349 10689 12460 12677 #> [33985] 13086 15549 15979 17823 18007 18206 19284 20265 21042 21435 21743 22227 #> [33997] 22291 22867 23273 23536 24740 25159 25368 25510 26484 26622 27184 27721 #> [34009] 28638 28721 28793 28872 29769 31581 31869 32176 32838 33318 33727 34044 #> [34021] 36460 36626 36718 36913 39441 39786 39865 40737 41478 41572 42121 44310 #> [34033] 44407 44784 44883 46000 46171 46553 46846  9677  9765 10047 10814 11146 #> [34045] 11345 15175 15918 16107 17257 18521 20026 20573 20971 21377 23839 24666 #> [34057] 26685 26836 26897 27185 27475 27559 29848 30245 31799 32839 34128 34356 #> [34069] 34813 35003 35591 36278 36361 36719 37958 38042 39442 39618 40491 41655 #> [34081] 42216 43092 44785 45260 45443 46649 47453 48752  9719 10260 10414 10868 #> [34093] 11094 11201 11565 12832 12984 13355 13581 14480 15234 15297 15442 16353 #> [34105] 16891 17201 18767 19460 20206 20972 22228 22292 24049 25867 26837 26898 #> [34117] 27034 28253 29397 31722 32569 33547 35331 36461 36819 38297 38895 40316 #> [34129] 41005 41479 41745 43201 43730 43823 44025 45169 47976 48662 49276 10091 #> [34141] 10690 11346 11389 12029 13356 13423 14276 14384 15340 15714 15919 16354 #> [34153] 16524 16834 17202 17333 18008 18593 19234 20447 20641 21319 22370 23694 #> [34165] 24667 25650 26132 26255 26485 27965 28043 28181 28572 28722 31018 31188 #> [34177] 31508 32570 32911 33474 34357 34582 34814 35684 39257 40492 41100 42298 #> [34189] 42473 43919 44104 44511 44786 46650 46847 48347 10220 10916 11254 11671 #> [34201] 11930 12572 13298 13424 15980 16275 16525 16706 16769 17397 18138 21690 #> [34213] 21944 23914 25160 27803 29559 31110 32738 32912 33728 33963 34423 34500 #> [34225] 36820 39951 40403 42400 42999 43288 44992 45350 45810 46264 46449 47663 #> [34237] 48161 48449 48976 10048 10415 10603 11347 11434 11672 11882 11931 12678 #> [34249] 12985 13425 14217 14335 14385 14754 14815 15550 15920 15981 16038 16585 #> [34261] 16770 17258 17708 17761 17887 18139 18522 19598 20027 20149 20574 20840 #> [34273] 21378 22999 23975 24050 24597 25369 27639 28182 28401 29177 29913 30246 #> [34285] 30542 30716 30854 31253 31582 32480 35158 35332 35762 39443 39704 40404 #> [34297] 40493 40738 43000 45261 46095 46752 47874 10092 10650 10917 10964 11006 #> [34309] 11147 11435 11932 12879 13475 13790 15068 15861 16276 16355 17460 18078 #> [34321] 18456 18960 19285 19531 19781 19962 20521 20901 21255 22645 23274 23463 #> [34333] 24193 24476 26486 28183 29106 29398 29560 30855 32247 32652 32739 32913 #> [34345] 34129 34918 35159 35763 36914 38043 38298 38380 38896 39180 39952 40235 #> [34357] 40317 41927 42025 42401 42820 43202 43824 47775 10471 11348 11482 11673 #> [34369] 11769 11883 14436 15487 15602 17079 17824 17888 18391 18523 19115 19175 #> [34381] 19461 19893 21256 21691 22570 23073 24051 26899 26959 28402 28573 29914 #> [34393] 30377 30640 31509 31583 31870 33319 33475 34815 34919 35250 35764 35851 #> [34405] 36915 38897 39619 39953 41573 41656 42026 42732 44512 45811 47561 47664 #> [34417] 10324 11007 11303 11610 12679 12833 13252 13640 13954 14437 14481 14865 #> [34429] 14956 15069 15341 15443 15815 16165 16950 17012 18207 18392 18524 18837 #> [34441] 18893 20448 23199 23341 23615 24869 25084 25370 25928 27804 27889 29399 #> [34453] 30543 30641 31189 32320 33729 33964 34816 36462 36720 37152 38299 38635 #> [34465] 39354 41928 44105 44408 45535 46651 47244 48253 48977 10472 11255 12986 #> [34477] 13036 13149 13426 13846 13955 14816 15921 16707 16951 17259 18457 19009 #> [34489] 19176 19286 19406 19712 19894 20150 20327 21692 22371 23397 23695 24124 #> [34501] 24388 24942 25722 25929 26133 26256 26554 26686 26960 28184 29476 29694 #> [34513] 30076 31411 31584 34734 37343 39444 40135 41006 41101 45262 47665 48450 #> [34525] 11390 11611 12279 13357 15982 16952 17709 17825 18458 19407 19599 19895 #> [34537] 20151 20841 21693 22724 22868 22927 23275 23915 24389 25868 26338 26409 #> [34549] 27267 28488 30151 31800 33003 34501 36007 36362 37006 37249 41480 41657 #> [34561] 41838 42299 42474 43093 44215 46450 47345 47776 10565 10918 11148 11612 #> [34573] 11674 13530 13683 14438 14817 16835 16892 17080 17398 17566 17826 17889 #> [34585] 18009 18208 18393 18525 19462 19963 20779 21945 23000 24334 24477 25085 #> [34597] 25291 25371 25578 25794 26339 26687 27722 27805 28639 28873 29770 31254 #> [34609] 31510 31585 32391 33404 34130 35418 35501 35685 35765 36193 36279 36463 #> [34621] 39787 39954 40136 41574 42733 43359 43731 43825 43920 44686 44884 45812 #> [34633] 49075 49380 10416 10473 11983 12123 12220 12573 13150 13194 13253 13476 #> [34645] 13684 14386 15444 15766 15983 16108 16223 17567 17710 19010 19177 19408 #> [34657] 19463 19671 19713 20266 22372 22725 22799 24668 24741 28185 28254 28723 #> [34669] 28954 30934 31255 31326 31801 31939 32248 32481 32740 33804 34735 35419 #> [34681] 36008 36194 38221 38808 39955 40583 41390 43001 43360 44787 44885 45074 #> [34693] 46265 47666 10174 11613 12030 12221 12513 12880 14113 14586 14755 15123 #> [34705] 16586 16649 16708 18594 18712 19714 19823 20328 23276 24266 25292 25869 #> [34717] 27560 28489 28640 28724 28874 28955 29400 29771 30247 30378 30856 31412 #> [34729] 32177 33548 34045 35160 35686 36009 36721 37344 38222 38542 39258 40137 #> [34741] 40739 41301 41481 42402 42562 42821 43543 44993 45075 45813 45906 48348 #> [34753] 48866 49277 49381 10965 11304 11675 11984 12514 12987 13685 13899 13956 #> [34765] 14063 15070 18459 19116 19600 20207 20329 20701 21498 21628 22293 22800 #> [34777] 23277 23537 25436 25651 25795 28186 28490 29336 29477 29772 30778 31327 #> [34789] 31511 32914 33161 34424 35161 36010 36916 40895 41007 41929 42922 43094 #> [34801] 45536 45814 46451 49076 10919 11149 12574 13087 14022 14482 14818 15124 #> [34813] 16277 16468 18961 19343 20642 21192 22434 22646 22928 23398 23464 24125 #> [34825] 24478 25930 26340 26410 26961 27103 27268 27723 28725 30544 31723 32178 #> [34837] 32321 34920 35162 35251 35333 35766 35852 36093 36544 38223 38722 39181 #> [34849] 42027 43002 43637 44216 44994 45076 45444 46452 46652 47036 47454 48254 #> [34861] 48978 11150 11349 12031 12461 12575 12726 12780 12933 12988 13791 15125 #> [34873] 15816 15984 19532 20028 20330 22167 22571 23399 23696 25029 25086 25511 #> [34885] 26555 26900 27890 28324 29401 31724 31871 32741 32915 33320 33549 33730 #> [34897] 34046 34131 34288 34583 36094 36627 36722 37695 39077 39355 39620 41746 #> [34909] 41930 44409 45077 45263 46001 47346 47777 48663 11053 12032 12316 13686 #> [34921] 13900 14064 14650 14756 16278 17146 19064 19409 20331 20449 20902 20973 #> [34933] 21320 21629 22229 22373 22726 23278 23616 24479 24544 25372 27966 28574 #> [34945] 29028 29478 29773 29849 29982 30077 30308 31019 31655 34132 35163 36363 #> [34957] 38809 39182 39259 39621 40494 41008 41575 41839 44217 45351 45445 46554 #> [34969] 47778 48162 49077 12407 12576 13254 13358 14277 14439 14536 16893 17568 #> [34981] 17762 18272 18394 19344 20332 20522 21946 22091 23200 23538 28107 28641 #> [34993] 29029 29479 30545 31111 32742 35334 36545 37870 38723 40138 41102 42217 #> [35005] 42653 42822 43003 44026 45446 45537 46096 48349 10417 11151 11614 11770 #> [35017] 12781 12881 12934 13359 13531 15235 15395 17569 19464 20029 20702 21257 #> [35029] 21379 21806 22572 23074 24545 24870 25087 25293 26134 26257 26487 27806 #> [35041] 28108 28187 28875 29030 29402 29617 29915 32179 33897 34425 34736 35592 #> [35053] 36095 36195 36364 36628 37250 38300 38898 39622 40405 41302 41482 41576 #> [35065] 43361 43638 45722 45815 47562 47875 48062 48255 11256 11305 11521 11884 #> [35077] 14387 14757 17890 18273 18649 18894 18962 19345 19824 20090 20152 20575 #> [35089] 22168 23075 23279 23617 24052 25294 25437 27269 27476 28491 28794 28876 #> [35101] 29916 31190 31328 31725 32106 32743 33004 33476 36365 36917 37439 38979 #> [35113] 39183 40495 40584 42823 43732 47563 10869 11095 11615 12033 12577 12989 #> [35125] 13477 13687 13901 13957 15071 15126 15654 16039 16279 16415 16650 16709 #> [35137] 17399 17634 18650 18895 19601 19782 21947 22018 22230 22435 23400 24126 #> [35149] 25796 26761 27334 32571 32744 33321 36096 40236 40318 40896 41303 45078 #> [35161] 45170 45352 46653 46848 48163 48350 48534 10920 11096 13958 14483 15127 #> [35173] 17081 17260 17400 18010 18526 18595 19235 21630 22092 22727 26556 26623 #> [35185] 28795 29618 30248 30717 32322 33477 34584 34817 35335 35502 36629 36918 #> [35197] 37153 37440 38636 39445 40662 40740 41304 42300 42734 42923 43733 46002 #> [35209] 46945 48256 11257 13255 13582 13688 14218 14278 14388 14587 16280 16526 #> [35221] 17935 19065 19896 20333 21043 22374 24267 24390 25512 25797 26688 27104 #> [35233] 30309 30462 30546 30718 32013 32107 32392 32653 33162 34502 35252 37082 #> [35245] 37154 37345 37696 37959 38301 39260 40663 41391 46364 47245 47564 48535 #> [35257] 48979 49078 49382 11054 12727 12935 13151 13256 13360 13689 14163 15342 #> [35269] 15551 15817 15922 16416 16527 17936 18460 18963 19011 19178 19715 20450 #> [35281] 20643 21044 21380 23539 24391 25513 26258 26411 26689 26901 27186 29619 #> [35293] 30249 31191 32014 33550 34289 34503 34585 37697 38134 39623 40406 41577 #> [35305] 42654 42924 43362 46003 46654 46946 47455 49191 10725 10966 12222 13641 #> [35317] 14819 15236 15603 15655 15862 17013 17261 17827 18395 20153 20842 21872 #> [35329] 23201 23280 24268 24871 29480 29917 31329 31940 32916 33805 34504 34586 #> [35341] 35164 35593 35853 37871 37960 38135 38454 41009 42824 44311 44886 45079 #> [35353] 45907 47565 47779 10726 10870 11097 11771 12280 12882 13478 14484 14705 #> [35365] 14820 14866 16710 16771 17523 18768 19179 19602 20030 20451 20703 21807 #> [35377] 23281 24127 24807 24943 25870 26135 26341 27105 27335 27891 28403 35253 #> [35389] 35687 37698 37961 38381 39446 39788 40319 41578 41658 42735 42825 43289 #> [35401] 43921 46266 46453 47667 12078 12171 12223 12281 12578 12627 13583 13642 #> [35413] 13792 13902 14114 14758 14957 15396 15604 15715 17524 17828 18140 19180 #> [35425] 19410 19672 19716 21694 21808 24669 24742 25088 25229 25295 25723 27405 #> [35437] 27477 27807 27892 28492 29850 30935 31020 32015 32745 32917 33086 33163 #> [35449] 34358 35594 35854 36546 37007 40897 41483 42122 44513 45171 45353 45447 #> [35461] 45908 48351 10871 11350 12361 12782 12990 13743 13793 13959 14336 14759 #> [35473] 16040 16469 16651 16772 18651 19117 19181 22019 22511 23076 24335 25579 #> [35485] 27336 28325 28877 29774 30078 30310 31586 31656 31872 32249 34219 34505 #> [35497] 35767 36280 37155 37441 39624 41484 43826 46555 46655 48536 49278 11258 #> [35509] 11306 11391 12362 13152 13847 14485 14706 14760 15767 16041 16356 16587 #> [35521] 18209 18713 19066 20903 21695 21809 21873 22647 24944 25373 25580 25931 #> [35533] 26009 27337 29403 30311 31726 32572 34587 40585 41840 42123 44514 44995 #> [35545] 47347 49192 11772 11830 11933 12462 12515 13299 14219 14440 14761 14821 #> [35557] 15488 15768 16417 16470 17711 18896 19012 19533 20523 20843 20974 21381 #> [35569] 22169 23077 23540 24392 24872 25514 25581 25724 25932 26136 26197 26762 #> [35581] 27640 29481 29561 30719 31330 35336 37699 38224 38637 38810 39261 40407 #> [35593] 40664 42655 43922 44788 45264 46004 46947 48753 11152 11616 12034 12680 #> [35605] 12936 13037 13361 13690 14337 14908 16042 16166 17082 17147 18011 18396 #> [35617] 19287 20780 21810 23342 24128 25089 25871 25933 27187 27478 28642 31112 #> [35629] 31192 31657 32016 32393 32840 33322 34506 35072 35855 36196 37791 37872 #> [35641] 39526 40320 41485 43004 43639 44218 44312 44410 45354 45816 46753 49193 #> [35653] 11483 11773 12991 14065 14115 14220 14762 14867 15128 15343 15923 16357 #> [35665] 16418 16953 17014 18769 18897 18964 20154 20576 21045 21631 21874 22869 #> [35677] 23140 24129 25161 26412 27808 28255 30936 31413 31512 31727 32180 32250 #> [35689] 32918 37251 37346 37442 37792 38044 39866 42028 43467 44219 44515 45909 #> [35701] 46454 48664 48980 12035 12079 12282 14023 14763 15129 15489 15656 16358 #> [35713] 17148 17570 18652 19534 19717 19964 20031 20091 20155 20524 20577 21114 #> [35725] 21811 22170 22801 23775 24194 24546 24945 25030 25438 25582 27724 28256 #> [35737] 29107 30152 31513 32919 34818 35073 35337 36821 38899 39078 40496 40822 #> [35749] 42475 44687 45080 45172 45635 45817 46097 49383 11351 11617 11676 12124 #> [35761] 12516 12681 12992 13195 13584 13848 14164 14338 15657 16281 16359 16528 #> [35773] 16652 18332 18397 18527 20644 21193 21554 23078 23697 24269 25162 25439 #> [35785] 26557 26902 28404 29178 29695 30379 31021 33965 34047 34507 35165 35420 #> [35797] 35503 37617 37700 41579 43468 44106 44789 44887 45355 45636 47037 47130 #> [35809] 11618 11885 12728 13362 13643 13849 14868 14909 16167 16653 16773 17635 #> [35821] 17763 18141 18274 19465 19897 21696 22375 22728 24053 24598 25230 25515 #> [35833] 26198 26763 28188 29260 29482 29983 30312 32181 34048 36464 36630 36919 #> [35845] 38225 39867 40665 41103 41305 43363 43923 45538 46005 47566 49194 11566 #> [35857] 11619 11831 11934 12682 13088 13585 14066 14486 15490 15818 16954 17712 #> [35869] 18012 18079 18898 19118 20452 21948 22171 22294 22436 22802 23079 23840 #> [35881] 24946 25652 27406 28326 28493 29261 29775 30380 31514 31728 32251 34133 #> [35893] 34656 35688 36097 36547 37347 38226 38455 39447 39789 41010 41306 41392 #> [35905] 41747 42476 42925 44313 44516 45173 45265 45910 46267 47876 48537 11392 #> [35917] 11436 12317 13903 14116 15716 15819 16774 17203 17334 17829 18142 21115 #> [35929] 21949 22172 22437 23343 23541 24670 25090 25374 25798 26690 27561 28257 #> [35941] 29851 29918 30079 30547 30779 31256 32841 33478 34049 34508 36366 36465 #> [35953] 37156 37348 38811 38980 39356 40586 41659 42218 42826 43095 45911 46455 #> [35965] 47246 47456 47780 48981 11567 11729 12318 12463 12628 13257 13479 13794 #> [35977] 15298 15344 15552 16282 16360 16471 16894 17083 18838 18899 19783 20092 #> [35989] 21046 21321 22173 22295 23141 23542 25653 25872 26413 26558 26764 26838 #> [36001] 27338 27407 27725 28643 28956 30548 30780 34220 36281 36367 38136 40587 #> [36013] 41307 42301 43640 44888 46456 46656 47567 11352 12629 13089 13363 13904 #> [36025] 14441 15015 15237 15820 16283 17204 18528 18714 18770 20208 20525 20578 #> [36037] 21555 21632 22296 24873 26199 26259 27035 27967 28405 28878 29620 30153 #> [36049] 30781 31331 31873 33242 33405 34426 35338 37008 41486 42219 43469 44027 #> [36061] 46006 47038 47781 48451 49384 13153 14764 15717 16224 16711 17461 17830 #> [36073] 18210 18398 19013 19346 21697 21744 22020 22438 23698 24336 25091 25583 #> [36085] 25799 26839 27188 27562 28044 28258 29031 29483 31414 31802 33005 35504 #> [36097] 36822 39625 40408 40741 40823 41393 42124 43203 43827 44889 46268 47039 #> [36109] 47131 47782 47877 49079 11620 11677 11730 11832 12125 12363 13532 13795 #> [36121] 13960 16284 16712 17764 17937 18333 18399 18529 18771 19466 19898 20453 #> [36133] 21047 21258 21382 22648 22729 22929 23776 24130 26903 27726 28327 28575 #> [36145] 28796 28957 29984 30250 31257 34509 35074 36098 36920 37349 38302 39956 #> [36157] 40321 40666 40824 42302 43364 43544 43641 44517 47668 11833 11886 13744 #> [36169] 14588 15130 15769 16419 16654 16955 17401 18596 18900 19718 20579 21322 #> [36181] 22297 22803 23202 24671 25031 25163 25725 27641 29562 30251 37873 37962 #> [36193] 40588 41841 42220 45266 45448 46849 48538 48982 12080 12126 12883 13090 #> [36205] 13961 14389 15345 15553 16588 18013 18143 19965 20093 20454 20844 23777 #> [36217] 23976 24393 25296 25654 25934 26624 28797 29985 30154 31587 33551 34510 #> [36229] 34819 35004 35931 37443 38812 39626 41842 42029 42656 43204 44107 44996 #> [36241] 45356 45539 47247 48352 48983 11621 12283 12630 12834 13154 13196 13644 #> [36253] 14651 15176 15554 16225 17525 18334 18597 18715 18772 19966 20455 21633 #> [36265] 21950 22021 22930 26414 26625 27106 27339 27479 28045 28328 28494 28644 #> [36277] 28726 29337 29563 31193 35339 37157 38137 38456 38638 38724 38981 40047 #> [36289] 40322 42403 43005 45267 47878 12172 12683 13038 13300 14165 14707 15445 #> [36301] 16168 16529 18014 18080 18400 19719 20094 20645 21556 21951 23699 23778 #> [36313] 24270 24947 26068 26415 27480 27727 28406 28645 29404 30155 30463 30857 #> [36325] 31022 31194 31515 32920 33164 35075 35856 36282 37252 37963 38813 43096 #> [36337] 44411 45268 45912 48754 11731 11935 12319 13301 13364 13427 13533 14339 #> [36349] 14537 14958 15016 15131 15821 16043 16361 17335 17526 18015 18598 19067 #> [36361] 19411 21116 22174 22298 22439 23142 24054 25375 26260 26691 27107 27728 #> [36373] 29776 29986 31516 31941 32746 35076 35421 35857 36011 36368 37350 38303 #> [36385] 38725 38900 40667 41580 41748 44108 48353 48539 49195 12173 12517 13428 #> [36397] 14117 15017 15718 15863 17336 17571 17636 17891 18081 18275 18653 19412 #> [36409] 19535 20209 20456 20526 21745 22299 22573 23001 23465 23779 23841 23916 #> [36421] 25032 25800 26010 26765 28046 28109 29484 30080 33243 34820 35005 35340 #> [36433] 35422 36099 36631 37351 38138 38457 39262 40898 41931 42030 42736 43365 #> [36445] 44028 45637 45818 46172 47248 47457 47568 47783 48665 48755 48984 49196 #> [36457] 11985 12036 12224 12518 12729 13197 13645 14538 14910 14959 15346 16362 #> [36469] 16589 17262 18144 18530 20904 20975 22022 23002 23203 23917 23977 24271 #> [36481] 25376 26200 26692 26904 27563 27809 28407 28646 29032 29621 32394 33323 #> [36493] 34427 34657 37083 37352 37444 39184 39705 40139 41308 43097 43642 43828 #> [36505] 44790 45723 46556 49080 12364 12579 12730 14539 14822 15299 15397 15719 #> [36517] 16836 17149 17938 18531 19014 19068 19825 20156 20580 20646 21048 22093 #> [36529] 22231 22376 26416 26488 28879 29033 29405 29485 31332 31942 37793 39448 #> [36541] 40589 40742 40899 41843 45449 45913 47040 47669 48354 48666 11887 12081 #> [36553] 13691 13796 13962 15018 15491 15985 16837 16956 17205 17765 18716 18901 #> [36565] 19069 19182 19288 19826 20267 20845 21746 23543 23918 24131 25935 30858 #> [36577] 32017 32182 32395 32747 33324 33898 34290 34359 34821 35505 35858 36197 #> [36589] 37353 38139 39263 40743 42031 42657 43205 43734 44412 44688 44791 48867 #> [36601] 48985 49081 49279 12174 12225 14340 15072 16044 16285 17263 17831 18016 #> [36613] 19827 21117 22094 23080 23544 24272 25092 25440 26766 27893 28495 28798 #> [36625] 31023 31658 32183 33806 34511 35077 35859 35932 37618 38227 38458 39449 #> [36637] 39706 40409 40744 40825 40900 42827 43924 44413 45450 47249 47569 47784 #> [36649] 47879 48868 49197 11986 12082 12365 13480 14024 14166 14911 14960 15770 #> [36661] 16590 17264 18082 19070 19183 19347 19467 19720 20210 20781 21118 21812 #> [36673] 22300 22870 23618 23919 23978 24055 24743 26693 26767 28958 31943 32748 #> [36685] 33899 34512 35254 35423 35506 35689 36100 36369 36723 38459 39868 40237 #> [36697] 40745 41011 41104 41660 42658 44314 44518 45269 48540 49280 12884 13091 #> [36709] 14442 15019 15177 15924 16713 16838 17265 18335 19236 19468 20647 20846 #> [36721] 21634 21952 22574 23003 25231 25441 25936 26417 27642 27968 28329 28576 #> [36733] 28647 28799 29262 29338 29622 31517 33087 35507 36823 37701 39079 44220 #> [36745] 44890 46657 48541 48756 48986 49281 12127 13302 13365 13429 14025 14118 #> [36757] 14540 15555 15986 16109 16286 16591 16957 17337 17402 18532 18717 19015 #> [36769] 19967 20268 21875 22023 23842 24273 24394 26011 26201 27270 27643 27969 #> [36781] 28189 29108 29263 29406 29486 30156 30313 31588 32482 34134 36012 36198 #> [36793] 37964 39080 39185 40497 41012 41206 41487 41581 43006 43643 44414 45819 #> [36805] 46457 48757 48987 12284 12366 12519 13155 13303 15178 16045 17206 17637 #> [36817] 18461 19469 19899 20782 21259 24195 24744 28190 28959 29987 30381 30720 #> [36829] 30937 31729 31803 31944 32184 36632 37354 38045 40410 41207 42737 44029 #> [36841] 44891 46658 46754 47348 48869 12684 13156 13198 13586 13963 17084 17266 #> [36853] 17713 18599 18654 19289 19603 21557 22301 22512 22649 22871 23204 23979 #> [36865] 24480 26768 27108 27970 29487 29623 30252 31024 31333 33006 33088 33731 #> [36877] 36013 36724 37355 37445 37530 39869 40048 40140 40411 40826 45914 46007 #> [36889] 46458 47132 47785 48257 49282 12285 12685 13646 13797 14119 14487 14765 #> [36901] 15020 15347 15398 15446 15492 15771 15925 16472 17085 17527 17572 18211 #> [36913] 19290 22440 23143 23205 23980 24948 25655 26202 26261 26342 26905 27729 #> [36925] 28191 28408 28496 28577 28648 28800 29919 30938 31258 31415 32185 33626 #> [36937] 34291 35078 37084 37702 39264 39357 40141 40901 41661 43470 43829 44892 #> [36949] 45174 46659 47458 12580 12731 13199 13692 14221 14390 14823 14912 15987 #> [36961] 16714 17207 18902 19291 19348 21953 22232 26769 27036 27340 28047 28192 #> [36973] 29034 29109 29264 29564 29852 30081 30642 30782 31589 34658 34737 36101 #> [36985] 36633 38140 39450 39527 39627 40746 41394 42563 44109 44315 45638 46660 #> [36997] 47250 47349 49082 13430 14488 15926 16226 16839 17267 18017 18336 18533 #> [37009] 19071 19237 19292 19413 19536 19828 21049 21383 22175 22441 24395 24745 #> [37021] 25033 25164 25801 25873 26418 26489 26559 26770 27037 28110 28193 28259 #> [37033] 28409 29696 29988 30549 30939 31518 32749 33007 33325 34135 34221 34428 #> [37045] 36634 37253 37619 40142 40412 41309 41662 42828 43545 43644 44221 45081 #> [37057] 45357 46008 46269 46365 46557 46948 49385 12464 12885 14443 14913 15238 #> [37069] 15399 16287 16715 17403 18212 18276 18655 19900 21436 21558 21635 21747 #> [37081] 22872 23144 24132 24337 24481 24599 24746 26069 26343 26490 26962 27564 #> [37093] 28578 30157 30721 32921 33479 34429 34921 36102 36466 36725 37620 37794 #> [37105] 38382 40143 40590 41013 41488 41582 41663 45270 47251 47350 47459 48452 #> [37117] 12520 13481 14541 14914 15927 16169 18018 18337 19349 19537 19784 19901 #> [37129] 19968 20527 22730 23282 24482 24672 25232 25442 27341 27408 27894 28330 #> [37141] 29179 30382 30550 31259 31730 31804 32018 32573 33089 33326 35933 39451 #> [37153] 40144 41014 42829 43645 43925 45451 45639 46173 46850 46949 47041 49083 #> [37165] 12732 12835 13798 14067 16227 17086 18277 18338 18773 19604 19721 20389 #> [37177] 20704 21559 21876 21954 22095 23545 24396 24874 26137 27409 27895 28048 #> [37189] 28111 28194 28331 28727 29407 29777 30082 30158 30464 31874 32019 32186 #> [37201] 32323 33627 35768 35934 36103 36370 36726 38228 39358 39628 40049 41844 #> [37213] 42830 43735 44030 44602 44792 45540 47252 47670 47786 48542 48667 12937 #> [37225] 13039 13200 14120 16046 17338 20334 20976 21437 21636 21698 22176 22377 #> [37237] 23283 23700 23843 23981 24056 24949 25034 25377 27565 30551 30722 31025 #> [37249] 31519 32842 33090 33628 34922 35166 39870 39957 40238 40413 40902 42125 #> [37261] 43098 46098 46558 46755 47977 13258 14708 15928 16110 16716 17268 17939 #> [37273] 18839 19184 19293 19414 20705 20905 21260 21813 21877 22650 24483 24950 #> [37285] 25297 25584 28332 28649 28801 29180 29408 29920 30940 31195 31659 33327 #> [37297] 34136 34292 34659 34923 35167 35255 35508 37254 37356 37531 38901 39528 #> [37309] 39958 40903 41015 41489 43099 43206 44031 44110 48164 13040 13157 13745 #> [37321] 14222 14542 16775 17528 18213 18339 19185 19294 20706 21261 21384 22804 #> [37333] 23206 23466 25165 25233 25298 25378 27271 27410 27566 28260 28728 30859 #> [37345] 31875 32187 32324 35006 35509 36727 37446 38639 39529 40498 41490 41664 #> [37357] 41932 42032 42738 43100 44316 45452 48063 48543 12783 12836 13092 13158 #> [37369] 13647 14068 14223 14341 15021 15348 15556 15988 16776 16840 18340 18401 #> [37381] 20157 21323 21637 22302 22442 23004 23701 24196 24673 24808 24951 25234 #> [37393] 26560 27189 27411 28960 29624 29697 30253 31334 31416 31805 33244 33552 #> [37405] 35510 37255 37874 39629 40050 40591 40827 41105 42404 43646 44222 44603 #> [37417] 46559 46950 47460 48355 13093 13431 14026 14824 15022 15557 16655 17462 #> [37429] 17638 18402 18534 19415 19785 20032 20211 20906 21748 22513 23081 23284 #> [37441] 23702 23844 26419 26771 28802 29698 30723 31113 31196 31806 34050 34430 #> [37453] 35595 36635 38383 38460 38814 39359 39530 39871 41749 42221 43101 43546 #> [37465] 44223 44415 45271 45358 45453 47351 12938 13432 15239 16111 16420 16656 #> [37477] 17208 18083 18600 19119 19902 19969 20095 20707 21050 21499 21749 22651 #> [37489] 23401 23546 24274 25035 25802 27038 27481 28112 28579 29853 29989 31114 #> [37501] 31590 32252 33091 33328 33480 34137 35007 35935 36467 37357 37965 38141 #> [37513] 40323 41933 44997 13648 13964 14543 14709 15349 16717 16777 17150 17269 #> [37525] 17404 17463 19829 20648 20783 21119 21814 22303 22378 23467 23780 25656 #> [37537] 26070 26203 27567 27810 28113 28195 32020 32108 34431 36636 37532 38543 #> [37549] 41491 42831 43471 43547 43926 44793 47253 47880 48870 49283 12939 13159 #> [37561] 13201 14342 14915 14961 15822 17270 17405 18535 19238 19538 19903 20269 #> [37573] 20335 20784 21385 22233 22379 22514 22731 23005 23703 23920 24484 24547 #> [37585] 25379 25443 25726 28049 28196 28261 28580 29699 29990 31876 32021 32483 #> [37597] 33008 33329 35008 36921 37703 39081 40145 42926 44893 46560 46851 47461 #> [37609] 13534 13587 13693 13799 13850 14167 14489 14544 14652 15350 15929 17940 #> [37621] 19120 19786 20212 21878 22096 22931 23619 24809 25299 27190 27971 28050 #> [37633] 28410 29110 29854 30860 31417 31660 31807 32109 33245 34660 36014 36548 #> [37645] 37085 37533 39360 40051 40904 41106 41750 41934 42222 43366 45359 45724 #> [37657] 46951 47254 14444 14545 15023 15179 17464 17832 17941 18019 18145 19539 #> [37669] 21560 22234 22304 22652 22805 23468 25166 25235 25874 26840 29565 31026 #> [37681] 31260 31877 32188 32922 33553 34051 34588 34738 35769 36104 36468 36728 #> [37693] 37256 37358 37795 38046 39452 39531 39707 40828 41107 47133 48453 48988 #> [37705] 49084 49198 49284 49386 13202 13482 13694 14279 15180 15300 15823 16718 #> [37717] 17087 17529 17639 17714 17833 18403 18840 19673 20270 20785 20977 24057 #> [37729] 24133 24747 26963 27272 27342 27482 28114 28197 28262 28729 28803 28961 #> [37741] 29566 29700 30159 31115 32484 33406 34432 34661 34822 37447 38544 38815 #> [37753] 39361 40052 40146 40747 40829 41016 41492 47978 48454 48668 13366 13746 #> [37765] 14280 14869 14962 15024 15301 15447 15605 15864 17892 18084 18462 18841 #> [37777] 19016 19350 19540 20786 21194 23547 23704 23982 25236 25937 26138 27568 #> [37789] 28263 30254 31945 33009 33554 34924 35079 35936 36015 36199 36469 36637 #> [37801] 37534 37966 38384 38461 39872 40414 41845 43647 44224 45541 46099 46270 #> [37813] 48669 48989 14490 15302 15493 15606 16592 16778 19295 19605 20096 20708 #> [37825] 20978 21561 21638 21699 22305 22380 22653 23082 23705 25585 25727 26626 #> [37837] 26841 27644 28264 29111 32022 34138 35168 35256 35511 36105 36200 38545 #> [37849] 39453 41017 41665 42126 42739 43290 44317 44794 44998 45454 46459 49285 #> [37861] 13259 13433 13588 14546 16170 16895 18146 18214 21120 21750 23285 24600 #> [37873] 25300 27273 27343 27483 27730 29855 29991 30314 31418 31520 35009 36638 #> [37885] 37257 39186 39532 39630 39708 40239 40830 43102 45272 46009 46100 46174 #> [37897] 47671 48871 14825 15658 16047 16112 16841 16896 17766 18020 18718 18903 #> [37909] 19470 20457 20907 21324 21700 22575 23083 23145 23207 24748 25380 26012 #> [37921] 26491 27274 27569 28650 30643 31027 32253 33165 35080 35257 35690 35770 #> [37933] 36106 37535 40415 42740 43207 43548 45725 46952 48758 49286 13483 14027 #> [37945] 14547 14589 14710 15989 16779 17767 18021 19970 20097 21815 22515 23344 #> [37957] 23402 23921 23983 24058 24134 24749 25657 25803 26772 28265 29488 30315 #> [37969] 30552 32396 32485 32750 34662 34823 35169 35424 37158 37621 38462 38726 #> [37981] 40324 40416 41395 43103 43549 43736 44416 45082 46460 49199 13367 13851 #> [37993] 14121 14445 15240 16288 16719 17209 17271 18215 18463 18536 19072 19186 #> [38005] 19239 19296 19351 19606 20528 20979 21051 21262 22024 23620 24275 28804 #> [38017] 28880 28962 30160 30724 30783 31261 31419 31521 33900 34052 36201 36470 #> [38029] 37967 38546 38902 40240 40905 41935 42927 43472 44318 45273 46010 46852 #> [38041] 47042 49287 13649 13965 14548 14653 14963 15351 15558 15824 15930 16289 #> [38053] 16421 16473 16720 17015 17406 17893 18656 19471 19674 20787 22097 22654 #> [38065] 22932 23403 25444 25804 26694 27109 27191 28051 28805 29489 29921 30553 #> [38077] 31522 31591 32751 33330 34824 36639 37159 37448 37875 39362 39454 39790 #> [38089] 39959 40147 41493 42223 42303 44795 44999 45175 45274 45726 46461 46953 #> [38101] 48872 48990 13484 13800 14224 15132 15559 15772 16593 17151 18341 18537 #> [38113] 19121 19297 19607 20033 20458 20649 20709 21052 21701 22098 23286 23345 #> [38125] 26627 26773 26842 27344 27570 28115 29992 31028 31197 34589 34925 35258 #> [38137] 35341 36016 36371 38142 38727 39709 40053 40241 41018 43737 45176 45915 #> [38149] 46011 13747 13801 14549 14590 14711 14766 15241 15448 15720 16048 16780 #> [38161] 17016 17152 17894 17942 20213 20847 20908 21263 21879 22235 22933 24810 #> [38173] 24875 25036 27039 28198 28411 29490 29567 30644 30861 31116 34222 34293 #> [38185] 34663 34739 35425 36471 37258 37968 38229 39082 43007 43104 43367 43927 #> [38197] 45542 47134 47462 48064 14491 15025 15181 15607 15865 17088 17573 18216 #> [38209] 21195 21500 22099 23006 24059 24601 24674 24876 24952 26420 27571 27811 #> [38221] 27972 28116 28581 29035 29778 30941 32752 33629 35259 37449 38903 39455 #> [38233] 39960 44689 45275 45360 45916 48356 48670 13695 14492 14550 14591 15825 #> [38245] 16049 16113 16474 17407 17574 17834 18601 18904 18965 19416 19722 20909 #> [38257] 21121 22025 23984 24135 24397 25301 25938 26071 26421 26774 29339 29701 #> [38269] 29779 29993 30862 31878 32254 33732 34590 35342 35596 36283 37160 38640 #> [38281] 39363 39873 41208 41846 41936 42304 42477 43208 43648 44319 44796 46366 #> [38293] 47255 48065 49288 13748 14168 14654 14767 15026 16290 16530 16721 18342 #> [38305] 18774 19187 20271 21196 21501 22026 22236 22306 22443 22576 23007 24197 #> [38317] 24485 24877 25237 25516 26492 26843 26906 28651 29409 30645 31117 31335 #> [38329] 32486 32843 34139 35860 37450 39533 40242 40592 40748 40906 42033 43008 #> [38341] 44111 44797 45177 45543 46756 47463 13749 13905 14281 14343 14493 14592 #> [38353] 15027 15303 16291 16422 16657 16781 17339 18602 19352 20158 20214 21502 #> [38365] 22177 22577 22732 22806 24811 24878 24953 25586 26422 26493 27345 27812 #> [38377] 28881 29410 31029 32325 32753 33092 33481 35010 35937 37009 37259 38230 #> [38389] 40499 40593 41019 42928 43368 44320 45544 46561 46757 47043 47979 48258 #> [38401] 48991 49085 49200 14655 14964 15866 16171 16228 16531 17089 17210 17465 #> [38413] 18538 19830 20848 20910 20980 21053 21386 21639 24602 25037 25381 25445 #> [38425] 25875 26423 27275 27412 29780 30465 30863 31336 31523 31661 33555 35081 #> [38437] 35343 36372 37451 38304 38816 40243 40500 40749 40907 43009 43830 44321 #> [38449] 45820 46175 46367 47135 49086 14965 15826 16423 17090 17466 17895 17943 #> [38461] 19472 19787 22934 23548 25446 25728 26072 28412 29181 30864 31946 32487 #> [38473] 32654 35170 36640 37010 37622 38305 39083 39265 41751 42659 43010 44322 #> [38485] 44894 45455 45640 46176 48259 13966 14169 14225 16722 17272 19240 19608 #> [38497] 20215 20788 21325 21438 21562 22578 23706 23845 24338 24675 25729 26204 #> [38509] 26907 31030 31420 31592 31662 32574 33010 35426 36107 37623 38143 38982 #> [38521] 39456 39534 43738 44032 45727 14226 16050 16594 16842 17273 19122 19353 #> [38533] 19417 20581 20789 20981 21387 21955 23781 24060 25093 26775 29036 30383 #> [38545] 31663 31808 32923 34664 35260 35344 35861 36108 37359 37876 38547 39187 #> [38557] 39266 39874 41310 41937 44519 45178 46101 46758 46954 48066 48759 14122 #> [38569] 14494 15028 15073 16229 16595 16782 17091 17274 19354 20098 20390 20982 #> [38581] 21640 21816 21880 22579 22655 23208 25587 25939 26776 27346 27572 27645 #> [38593] 29856 30384 31198 32397 32575 33011 33331 34825 37011 38463 38728 38904 #> [38605] 40417 40501 40668 41311 41494 42305 42478 44112 44225 44520 45641 49087 #> [38617] 15182 16843 17768 18404 18464 18539 19123 19971 20529 21563 22100 23782 #> [38629] 24339 24750 25038 25302 26262 27192 28963 29037 29702 30255 30466 31593 #> [38641] 31731 32398 32488 34294 35171 35862 36472 38641 38905 39188 40325 41312 #> [38653] 42741 43550 46102 46271 46853 47136 47352 48873 16292 16897 18465 18603 #> [38665] 19124 19188 19723 19831 19972 20034 20710 21641 21956 24198 24812 24954 #> [38677] 25039 26205 27110 27413 27813 28413 28582 29038 29491 29994 30083 30784 #> [38689] 30865 30942 31031 31421 33556 34053 34140 34433 36549 37161 38983 39535 #> [38701] 41666 42224 43209 43473 44226 45456 48165 49201 15400 16596 17275 19355 #> [38713] 20035 20530 20711 20911 21564 22656 22733 23084 23209 23846 24398 26139 #> [38725] 28882 28964 29492 29781 30467 30866 31118 31947 32255 33733 34513 36550 #> [38737] 38464 41108 42034 42832 43105 43831 43928 44113 46012 46955 47881 14282 #> [38749] 15074 15183 15608 16172 17092 17153 17467 20216 20391 20582 21264 22657 #> [38761] 23287 24603 24751 24879 25940 26561 27731 27896 28497 29340 32399 32489 #> [38773] 32576 33093 33557 34054 34360 35011 35345 37012 39875 41109 41667 42479 #> [38785] 44895 45545 45821 46759 48455 48760 15184 16293 18278 18540 19298 19541 #> [38797] 20036 20159 22101 23847 24136 24548 25876 26140 27347 27814 28965 29112 #> [38809] 29922 30646 34826 36202 39084 40148 40326 41668 41938 42127 42660 43011 #> [38821] 43832 46661 46854 47137 48166 14495 14656 15827 16230 17093 18719 20037 #> [38833] 20459 21388 22734 23783 25588 27111 27348 29493 29625 29923 30161 31119 #> [38845] 31199 31422 31664 32655 33558 33807 35938 36729 37260 37969 38306 38548 #> [38857] 39536 40594 41752 44798 45083 46760 46855 47353 47882 48544 48992 49387 #> [38869] 14966 15133 15990 16231 17154 17640 18466 18541 19073 19356 19973 20272 #> [38881] 20849 21265 21702 21817 22102 22580 22658 23707 25167 25303 26695 26964 #> [38893] 27193 27897 28652 28966 29113 29782 30162 30316 33808 34295 34827 35771 #> [38905] 37013 38231 38465 38906 40327 40750 41209 43291 44227 44896 45000 45822 #> [38917] 48260 48456 15659 15721 16114 16723 17211 17896 18022 19017 19832 20392 #> [38929] 20850 21054 23469 23922 24604 24676 26073 27414 27484 31200 33734 34828 #> [38941] 35512 37086 38307 40831 41396 43739 43929 44690 44799 45361 47883 48874 #> [38953] 14551 14870 16115 16658 19833 19904 20038 21389 21957 22873 23210 24399 #> [38965] 24486 24752 25094 25447 26206 26263 26494 26628 26777 27276 27815 28883 #> [38977] 29114 29265 29995 30084 30785 31948 32023 32490 33094 34223 36109 36824 #> [38989] 36922 37452 38466 39537 41847 42564 42929 44521 47256 49289 16051 17017 #> [39001] 17575 17715 18775 19125 19609 20160 20712 22103 23549 26141 27112 27415 #> [39013] 28052 28333 28414 29857 31594 32326 32400 33482 33559 36473 37014 37087 #> [39025] 37360 37536 38047 38385 39364 39457 40669 40751 44323 44604 44691 45179 #> [39037] 46103 46462 47884 47980 15494 15867 16475 16783 16958 17018 17944 18905 #> [39049] 18966 20273 20531 21326 22516 22935 23211 23346 23708 26074 26424 27646 #> [39061] 27816 27898 28334 29494 30317 30554 30786 30867 31120 32024 32327 33095 #> [39073] 33246 33809 34926 35082 35346 35863 36017 36551 36730 38386 38642 38817 #> [39085] 39710 39791 41313 42225 43012 44605 46368 47138 47354 47885 15495 16476 #> [39097] 16898 16959 17276 17340 17769 19610 20039 21266 21565 23008 24340 24487 #> [39109] 26207 27040 27194 27416 27485 27573 28266 28967 31423 32656 32924 33560 #> [39121] 33966 35513 35691 35939 36284 36373 37261 37796 38729 39267 39458 40752 #> [39133] 42035 42661 43106 47139 47570 48067 49388 15352 15868 16294 16724 17408 #> [39145] 17945 18967 19724 20532 20851 21390 22027 22104 22581 22659 22735 22874 #> [39157] 23784 25168 26696 26844 26908 27647 28415 28806 29568 29924 30318 31337 #> [39169] 31665 32189 32328 32401 33247 34296 34434 36731 36825 36923 37453 38549 #> [39181] 38730 38818 38907 41020 41495 41583 42930 43930 44606 47140 49389 16532 #> [39193] 16725 17277 17716 18217 18405 18604 18842 19418 19974 21197 21267 21751 #> [39205] 22444 22517 23288 23347 25448 25877 26344 28416 28807 30647 32577 33735 #> [39217] 34141 34665 34829 35172 35940 36203 39631 40832 41314 41496 42565 44522 #> [39229] 44800 44897 45362 46463 47355 47464 48457 14826 15773 16232 16726 17468 #> [39241] 17897 18085 18542 18657 18906 19725 21703 22936 24137 24605 26142 26965 #> [39253] 27041 27113 27486 28968 29341 29569 31524 31879 32657 32925 33483 33736 #> [39265] 34591 34666 36018 37015 37537 38308 38819 39085 40054 41753 41848 42405 #> [39277] 43740 45084 45728 47981 48545 48761 49202 15075 15449 15869 16844 17576 #> [39289] 17717 18218 18907 19834 19905 21818 21881 22518 22660 23009 23785 23923 #> [39301] 24341 24400 24606 25658 27277 28053 29783 30163 30385 30787 32110 32754 #> [39313] 33484 34514 34740 34927 35261 36110 36732 37262 37454 37877 38550 39459 #> [39325] 39711 40502 41315 41939 42931 45363 47141 47787 48261 15029 15076 15660 #> [39337] 15774 16116 16784 17094 18658 19074 21958 22381 23289 23470 24813 25517 #> [39349] 25659 26629 27278 27732 28199 28267 28498 29411 29996 30319 31201 31262 #> [39361] 32491 32658 33737 34055 34741 35083 35864 36111 36474 36826 39792 40503 #> [39373] 42306 43210 43833 44228 46464 47571 47672 14967 15609 16052 16424 16727 #> [39385] 17212 18467 18659 18908 19419 20217 20274 21882 22445 22736 22807 23709 #> [39397] 23848 24138 24199 24677 26495 26909 27042 28730 28969 29925 30555 33967 #> [39409] 34056 36924 37361 37970 39268 39460 43292 43369 44324 44801 47142 47982 #> [39421] 48068 15077 15610 15775 17095 18406 18720 20713 21055 21503 21566 22737 #> [39433] 23010 24488 24955 26013 28200 29182 29926 30943 34361 34515 34742 35427 #> [39445] 35597 36925 37538 38048 38551 41669 41849 42566 42742 43370 43834 45457 #> [39457] 46369 46662 47044 47886 48262 49088 15496 16053 17409 17898 18086 18605 #> [39469] 21268 21439 21959 22105 22582 23710 23849 24061 24276 24814 26014 26425 #> [39481] 26966 28583 28808 29626 30164 30320 31202 31595 33630 35692 38984 39269 #> [39493] 40670 40753 41584 43211 43371 46104 46956 47356 48069 48167 15611 16117 #> [39505] 16533 17835 18087 18776 19126 19788 22307 24200 25382 25589 27114 27349 #> [39517] 27899 30165 30648 31596 32256 32844 33485 33631 34224 34743 35347 35428 #> [39529] 35514 37704 38387 39189 39793 40149 40504 40833 41021 41754 42932 43551 #> [39541] 44114 48263 49390 15304 15450 15497 15931 16118 16363 16477 18147 18660 #> [39553] 18777 18968 19473 19975 20275 20533 20714 20790 21122 21391 22446 23212 #> [39565] 23290 23621 24815 25383 25805 26015 28268 30788 31597 33332 34297 34928 #> [39577] 37088 37624 37797 39086 39270 39876 40671 43107 43741 43835 44898 45001 #> [39589] 46465 48458 48762 17096 17278 17341 17410 20161 21960 23550 24489 24880 #> [39601] 24956 25095 27279 27973 28731 29039 29627 30725 30868 31121 32755 33012 #> [39613] 33166 34435 34516 35084 35262 36926 38049 38467 39087 41397 43552 46105 #> [39625] 46177 46761 47143 48168 48875 48993 15498 16054 16233 17469 17836 19241 #> [39637] 20715 20852 21327 22382 22447 22808 22937 23146 23348 23551 23985 24139 #> [39649] 24753 25238 25384 25590 26345 26630 27043 27195 28201 28499 28653 28732 #> [39661] 28884 29927 30386 31263 31338 32659 33810 35772 37971 39538 40505 40672 #> [39673] 41316 41850 44899 47045 49391 16119 17530 17837 18219 18606 19075 19789 #> [39685] 20534 20983 21198 21504 21752 22028 24549 25660 26562 26631 27196 27648 #> [39697] 28809 29115 29703 30468 32111 33738 34142 34592 36112 36733 37455 41497 #> [39709] 41670 43836 44900 45276 45364 46370 47887 49290 16295 16534 16597 18279 #> [39721] 18778 19242 19420 20276 21199 21328 21753 21819 22029 22237 23213 23291 #> [39733] 23986 24342 24490 24678 25385 25661 27115 27574 27900 29784 29997 32926 #> [39745] 33096 33901 34298 37705 38144 39877 40328 41498 43474 43649 44417 45642 #> [39757] 45917 46013 47572 47983 15451 16845 17213 17577 18088 18148 18468 19835 #> [39769] 20099 20218 20393 20583 20650 22383 23622 24343 24401 25096 25878 26697 #> [39781] 26845 28500 28733 29183 29570 29628 29858 30321 30726 30789 31525 32025 #> [39793] 34299 35429 37456 40329 40908 41851 42226 42480 43553 43837 45918 46562 #> [39805] 46856 48357 15991 16234 16535 16659 16785 17411 18023 18343 18407 18969 #> [39817] 19076 19243 20219 20584 20791 21200 22583 22661 22809 23011 23147 23404 #> [39829] 23850 23987 24679 24881 24957 25591 25941 26910 27044 27197 28269 29495 #> [39841] 30556 32402 32845 35085 35598 37539 38388 38552 38643 39878 40673 41499 #> [39853] 41585 42227 43212 44325 44692 45546 46762 16235 16899 16960 17899 17946 #> [39865] 18909 19976 20220 20853 21567 22738 23349 23786 24402 25942 26426 26967 #> [39877] 29184 29928 30557 31949 32112 32578 33632 36019 39712 41110 41755 42567 #> [39889] 42833 42933 43108 44901 45643 46563 46857 49089 49291 16173 17900 19299 #> [39901] 19421 21201 21642 21754 22030 22739 22875 22938 23711 24344 24550 24882 #> [39913] 25449 25592 26075 26264 26427 27417 27901 28654 29266 30558 33407 34057 #> [39925] 34593 36285 36827 37625 37798 37878 38908 38985 39713 41111 41671 43742 #> [39937] 44418 44693 44902 45085 45919 46957 47046 48070 48763 48994 16364 17155 #> [39949] 17214 17641 18024 18779 20162 20277 20651 21505 21568 22519 23851 24491 #> [39961] 24680 25040 25450 25662 26778 27418 27575 28655 29785 30085 31122 32113 #> [39973] 32257 33167 33561 33739 36734 37089 37263 39794 39879 40595 41672 42481 #> [39985] 42834 45644 45920 48169 49203 15992 16598 17642 17901 20040 21820 22584 #> [39997] 23012 23350 23712 24551 24816 24883 25097 26428 28202 30469 30869 32258 #> [40009] 34143 34744 35263 36113 37264 37972 38909 43109 43372 44607 45002 45277 #> [40021] 45729 47357 47673 16296 17578 18149 22448 24345 26632 26779 27576 28270 #> [40033] 29786 30387 30559 31809 32329 35599 36114 36735 37162 37362 37540 37706 #> [40045] 38468 39880 40909 41500 41852 42036 43110 44115 45547 48071 49090 49204 #> [40057] 15932 17579 17838 18220 18344 18408 18543 19244 19422 19836 19906 20792 #> [40069] 21202 22384 22585 22662 22939 23552 24277 25041 25169 26143 26208 26563 #> [40081] 26911 31123 32026 32403 33811 36286 37363 37799 39088 39539 42037 45278 #> [40093] 47573 48995 49292 17215 17279 17342 17947 19127 19357 20460 20793 22308 #> [40105] 23351 23713 23924 23988 24681 25663 26265 27487 28656 28810 29040 29704 #> [40117] 30388 30944 31666 32330 32756 33562 33968 34436 34745 36828 37457 37879 #> [40129] 37973 38820 39271 40055 43475 43743 44116 44802 49205 16728 17280 17412 #> [40141] 17580 18409 19128 19837 21203 22106 22385 23214 24403 27116 27974 29342 #> [40153] 30166 30470 30560 30945 31950 32027 32190 32757 33097 33812 34667 35515 #> [40165] 37364 37541 38145 39089 41853 42307 43213 43373 44033 44229 45365 45458 #> [40177] 46371 47047 48072 17156 17281 17581 19077 20221 21506 22107 23085 23787 #> [40189] 23989 24404 25042 25518 26564 27577 27649 29629 29859 32028 32660 34746 #> [40201] 35173 35264 35865 36829 37707 37974 38050 40834 42568 43931 45086 46858 #> [40213] 47358 48264 16236 17643 18025 18221 18280 18780 18910 20336 20394 20912 #> [40225] 22238 22309 22810 25451 26076 27045 27650 29116 30167 33633 34144 34929 #> [40237] 36020 36204 36736 38051 40835 41112 41940 42569 42662 44419 46663 48073 #> [40249] 48546 49293 16297 16425 16478 16961 19474 19907 20652 20913 21440 21755 #> [40261] 22520 23292 24492 24682 25239 25730 26077 26144 26565 27198 27817 28203 #> [40273] 29117 30389 30790 31339 32331 32579 33634 36021 36475 36927 38731 39190 #> [40285] 42835 44694 45087 45279 46664 46958 47144 47984 48547 16174 16365 16599 #> [40297] 17582 18222 18469 20716 21961 22031 23013 24607 25170 25731 26846 27199 #> [40309] 28970 29118 29185 30168 30791 31203 31810 31880 32332 32661 34830 35430 #> [40321] 35773 35941 36830 37163 37365 38732 39795 40596 44803 46014 46763 47574 #> [40333] 16536 19018 20585 20653 20717 20914 21392 22386 22586 22811 23086 24817 #> [40345] 25732 26209 26429 27488 28501 30169 30322 31881 33486 35086 35774 36374 #> [40357] 37164 38146 38733 39796 41673 42570 42934 43554 44608 44903 47465 47674 #> [40369] 49392 16426 16600 17343 17718 19129 20278 20794 21123 21507 22032 23623 #> [40381] 23714 23990 24346 27578 27818 28117 28335 29041 29119 29787 30086 30390 #> [40393] 31264 31811 32114 32492 33168 33813 35087 35600 35693 36476 36552 36831 #> [40405] 37265 37880 38734 38821 40330 41113 41674 42308 43650 43932 44523 45088 #> [40417] 45548 47575 47788 48074 49206 16729 16962 17583 18911 18970 20041 20535 #> [40429] 21329 22387 23405 24347 24493 25043 27350 32846 33814 34747 35694 38644 #> [40441] 40597 41756 42309 42743 43111 44804 46106 47145 16730 18026 19726 19790 #> [40453] 21124 21204 21269 21393 22239 22521 23293 23852 23925 24405 24683 26968 #> [40465] 29929 31124 32404 33333 35348 36928 37708 37800 37975 38147 38910 39090 #> [40477] 40244 40506 40674 41586 41941 42038 42935 43838 45280 46859 46959 48876 #> [40489] 16537 16601 18150 18223 19727 22876 24608 26912 29042 29705 31667 31812 #> [40501] 34517 35088 35431 35601 37881 39272 39632 40331 41210 43293 43555 44420 #> [40513] 45281 45730 46960 47146 47675 48548 16786 17470 17770 19358 20984 21394 #> [40525] 23148 24062 24140 25879 26969 27975 28417 29120 29343 29412 30087 30170 #> [40537] 30870 31340 32029 32191 33098 33740 34058 34437 34594 36553 37801 38052 #> [40549] 39091 40332 41317 42406 42663 45089 45180 46764 47466 48549 49393 16963 #> [40561] 17216 17471 17771 18661 19019 19359 20395 23014 23406 24348 26266 27046 #> [40573] 27976 29706 30171 30792 31032 33013 33741 34059 34518 35516 36375 38389 #> [40585] 38822 39191 40245 40418 40507 42128 42310 42407 44326 45181 45645 46178 #> [40597] 46466 48075 16846 17584 18971 19245 19360 19791 19977 21756 22178 23471 #> [40609] 23715 24494 25452 25519 26346 27047 28734 31424 31526 32115 32405 32493 #> [40621] 33487 34060 34362 36287 37266 37709 37882 39461 39714 40246 40754 40836 #> [40633] 41501 41675 42571 42744 43651 44421 45366 45823 46372 47048 48358 17472 #> [40645] 18027 18224 18470 18662 18721 19246 19728 19838 20718 21125 22522 23991 #> [40657] 24063 24884 25386 26970 27048 27819 27902 28204 29121 30088 31204 31598 #> [40669] 32662 33169 33563 33969 34831 35775 36641 38823 40910 41211 41502 45921 #> [40681] 46015 46860 46961 48170 48550 49207 16900 17948 18281 18722 18843 19189 #> [40693] 20222 20396 20654 23992 25880 26078 27117 27200 28336 29630 29998 30172 #> [40705] 31425 33408 33902 34300 35089 35174 35265 35602 36376 36929 38053 40056 #> [40717] 40150 45922 46564 47049 48076 48171 48265 48359 48551 48877 48996 16847 #> [40729] 16964 17473 17585 18912 21441 21883 22108 22449 24141 25733 26145 28885 #> [40741] 29496 29999 31599 32116 32580 32927 33334 33970 34145 36205 36288 37267 #> [40753] 37976 38054 38911 39797 39881 40675 41676 43013 43476 44117 47985 18089 #> [40765] 18345 18723 19020 21395 22310 23407 25734 26146 26267 26971 27201 27651 #> [40777] 28502 28657 29043 29631 29860 31033 31732 32259 32333 33099 33248 33742 #> [40789] 34832 35349 35942 36377 37090 37458 41022 42936 43294 44524 46016 46179 #> [40801] 47147 47789 48552 17531 17719 17772 18844 20100 20795 20985 21330 21569 #> [40813] 22109 22663 23553 23788 23853 23993 24552 24609 24818 24885 25664 25943 #> [40825] 27280 27820 28886 29267 31668 32847 33815 34833 35350 36289 38553 38912 #> [40837] 38986 39192 39540 40508 40755 40911 41398 41677 45549 46665 47148 17097 #> [40849] 17344 17720 18151 18346 18410 18471 19361 19611 20042 20397 22664 23087 #> [40861] 23408 23554 23854 24064 24278 24886 25387 26347 26847 27903 29632 30089 #> [40873] 30256 30793 31669 33564 33903 35517 37542 38055 40057 40509 40598 45459 #> [40885] 46861 47888 17773 17902 18411 20279 21126 22110 22179 22665 22812 23926 #> [40897] 24065 24349 26079 26633 28811 29186 30090 30561 31341 31426 31882 32260 #> [40909] 33635 34061 34519 35432 36832 37091 37977 38735 41114 41587 42129 42482 #> [40921] 42745 42937 43374 44422 18152 18472 18607 18663 19612 20854 21270 21570 #> [40933] 22033 23352 23855 24279 25944 27351 27821 28118 28205 28887 29187 31883 #> [40945] 33170 35351 35603 35776 36378 37978 38056 38554 38736 39365 39633 39961 #> [40957] 40151 40247 41212 41399 42664 43295 43933 44423 44695 44904 45003 17217 #> [40969] 17586 18153 18473 18724 19021 19475 19542 19839 20163 20223 20586 20986 #> [40981] 21757 21821 21962 22940 24406 24684 24958 26268 27733 27977 29044 29268 #> [40993] 31427 33014 34062 34668 35433 37710 37883 38469 38645 38737 39462 40599 #> [41005] 43014 43839 44805 45004 45182 45460 46666 47257 48997 17532 17587 18972 #> [41017] 19022 19362 19543 19675 20043 21205 21442 21643 22523 22877 23215 23856 #> [41029] 24495 24754 24819 25240 25453 26210 28206 28418 28584 29413 30257 30946 #> [41041] 31600 31813 32406 33249 34834 36022 36554 36642 37165 38913 39273 39366 #> [41053] 41942 42130 42228 42572 43840 44609 45090 45183 46272 47467 18225 19978 #> [41065] 20536 20587 22311 22587 23149 23353 25304 25881 26913 26972 28419 28735 #> [41077] 29344 29633 30562 31670 32928 33250 33816 34063 35695 37092 38738 38914 #> [41089] 39798 41115 41588 42573 42938 44118 44610 45091 45824 46765 46862 48266 #> [41101] 49294 18845 19908 20461 20588 21127 21206 21443 21822 22312 22388 22740 #> [41113] 23088 23555 23789 24201 24407 24887 25454 25520 25593 26566 27734 28971 #> [41125] 30649 30947 31205 32758 33100 33335 33904 34064 34225 35518 35604 37626 #> [41137] 37802 38232 38470 42131 42483 44611 45646 46467 46962 47258 47468 47676 #> [41149] 48878 48998 49295 18226 19130 19840 20655 20855 23216 24496 25882 26780 #> [41161] 26848 27419 27489 28271 28812 29634 30323 30391 31125 32929 33488 34669 #> [41173] 36023 36643 37016 38987 39541 40837 42039 42311 44905 45092 46017 48459 #> [41185] 17903 18028 18154 18608 19476 21444 23472 23790 24142 24610 24820 25806 #> [41197] 26147 26211 27904 28054 28207 28272 28503 29188 29414 29571 30000 30258 #> [41209] 31206 31428 32407 32494 34748 34930 36833 36930 38471 39463 39542 39962 #> [41221] 42040 42408 43477 44119 47149 17644 18090 18781 19131 19477 19544 19909 #> [41233] 20915 21396 21445 21823 22813 23409 23473 24755 25883 25945 27579 27735 #> [41245] 28585 29497 29707 29861 30001 30173 30794 31034 31814 33101 33817 34301 #> [41257] 34670 34835 35352 36834 37803 38472 39543 39715 40058 40333 41854 43556 #> [41269] 43841 45184 46373 49208 18029 18609 19190 19300 21056 21271 21508 21704 #> [41281] 23927 24202 25946 30174 30727 30871 31265 31342 31429 31733 32408 36024 #> [41293] 37017 38555 40419 40912 44696 45367 45825 48764 18155 19363 19478 19545 #> [41305] 22878 23217 23474 25044 25098 25171 25388 25521 27049 27420 29345 29498 #> [41317] 30471 32192 32663 32759 33102 33636 34226 35353 35866 37884 38824 39464 #> [41329] 40510 40676 42484 44327 44697 48460 17774 17839 18474 19423 19613 19910 #> [41341] 22034 22180 22450 22879 23354 23556 23716 23857 24611 25947 32117 32664 #> [41353] 32760 32848 32930 33565 33743 35777 37268 37804 38233 40334 42132 42574 #> [41365] 43478 44698 45005 47150 17904 18282 18913 19364 19546 20537 20719 20987 #> [41377] 21128 21446 22240 22666 23089 23928 23994 24066 24203 24280 25045 31343 #> [41389] 31601 31734 34520 35090 36206 36290 36644 37543 37885 40152 40420 41023 #> [41401] 41318 42575 42665 42836 42939 43296 45006 46107 46273 46565 47151 47986 #> [41413] 48360 48999 49091 20462 20796 20856 21272 22814 22880 22941 23858 24553 #> [41425] 24756 24888 25594 25948 26496 26698 27822 28119 29788 29930 31735 32665 #> [41437] 33489 33905 34146 34749 35867 36645 37166 37627 39367 40913 42666 43297 #> [41449] 45185 45282 45826 46468 47050 47677 48077 48267 18347 19614 19841 20857 #> [41461] 21571 21644 22667 22942 23015 23218 23791 25807 26849 27490 27580 28337 #> [41473] 28658 29189 29635 30175 30563 32261 33015 33818 33906 34363 34931 35091 #> [41485] 36646 37628 38148 38646 39092 39799 40248 42576 43744 45731 46108 46566 #> [41497] 47469 47889 48553 49296 18348 18664 18725 18973 19615 21129 21572 22035 #> [41509] 22241 22389 22524 23219 24204 24281 24685 25241 25522 26269 27050 27421 #> [41521] 27978 28420 30176 30728 32409 33490 34147 34932 35012 38825 39093 40153 #> [41533] 40914 43298 43652 44806 45368 45827 47470 47987 48461 48554 48879 18782 #> [41545] 18974 19842 20280 20538 20916 21758 23717 24408 24497 28972 30392 31671 #> [41557] 31736 34364 36291 38149 38473 39465 39963 40915 42041 42312 43934 45369 #> [41569] 45647 46963 48268 18349 18475 18544 19132 19479 19843 20797 21705 22668 #> [41581] 22815 24757 25046 25099 26497 27118 27979 29190 29862 30650 31602 32761 #> [41593] 33491 34148 35266 38234 38826 41757 43375 43745 44699 46109 47259 48269 #> [41605] 48555 49092 18545 19729 19979 20463 22036 24143 24554 24821 25523 25735 #> [41617] 26430 26567 32262 32495 33103 33971 34750 35519 36737 37093 37366 38150 #> [41629] 39094 39964 41400 44328 45186 45461 45550 46469 47152 47359 48172 48556 #> [41641] 19616 19792 20337 20398 20988 21331 21884 23410 26016 26781 27051 28421 #> [41653] 29415 29572 30091 30872 33104 34933 37805 38556 38988 39274 40677 43376 #> [41665] 44906 46018 46766 46964 47471 47988 48173 48880 20044 20224 20656 20858 #> [41677] 21963 23355 23718 25305 25949 27052 27281 27581 27736 28120 28208 29269 #> [41689] 29636 30092 30873 30948 32193 33637 33972 34149 34365 35013 36931 38151 #> [41701] 38474 39544 39634 39800 41024 41503 42133 42577 43015 43557 44424 45370 #> [41713] 45648 46767 47051 48174 49000 18476 18726 20225 20464 20589 21397 22390 #> [41725] 22881 23411 23557 25595 25950 26017 27905 29708 30949 31527 31884 32118 #> [41737] 33638 33907 33973 35092 36555 36738 37459 38057 38152 38557 38647 38989 #> [41749] 42042 42746 42940 44525 45649 46274 48175 49001 18783 18846 20859 21573 #> [41761] 23558 23859 23929 23995 24350 24409 24686 24758 25306 27053 28504 28736 #> [41773] 28888 28973 29191 30874 31035 32496 32581 32762 33251 34671 36025 36292 #> [41785] 37460 37886 42229 42941 45093 45187 45462 45923 46667 46768 18847 18975 #> [41797] 19676 20226 21332 21447 21645 21706 22943 23150 26498 27352 28505 30002 #> [41809] 30564 30795 32410 33171 33252 33492 33974 36932 39965 41855 43016 43479 #> [41821] 43558 44329 44612 46275 48557 49002 49209 49297 18976 19480 19617 19911 #> [41833] 20465 20917 20989 21057 21707 21885 21964 22391 23090 23624 24282 25307 #> [41845] 26212 27119 29192 30177 31737 33639 33819 34438 34521 35014 35434 35520 #> [41857] 35696 35943 36115 36739 40838 41213 41943 42043 44613 45828 46276 47576 #> [41869] 48361 48671 48765 49394 18665 19481 19618 21207 22882 23220 23356 23412 #> [41881] 24283 24351 24410 25389 26270 28121 29416 29573 31603 31815 33105 35267 #> [41893] 35778 36116 37167 37887 38058 38390 38558 39801 39882 40059 42230 42409 #> [41905] 43299 43559 44230 44526 45371 47052 47360 47790 48270 48672 19844 19980 #> [41917] 20466 20720 21708 22944 23413 24687 25242 25736 26914 27120 27906 28338 #> [41929] 28813 28974 29637 30003 31528 32497 32763 33640 33908 34522 35605 35697 #> [41941] 36379 36647 36835 37168 37806 38235 38559 40839 41214 41504 42410 42578 #> [41953] 45283 45732 46110 46567 48176 48558 19078 20227 21448 24411 24889 25390 #> [41965] 25884 26018 26148 27652 28055 28209 30950 33336 33820 34302 34672 37018 #> [41977] 37461 39275 39635 39883 40060 41944 42134 42411 46965 47361 47472 47577 #> [41989] 47678 48766 19301 19793 19845 19912 20399 20990 21646 21886 22816 23016 #> [42001] 23294 24555 24688 25455 26149 28659 30875 31604 33566 35175 36117 37462 #> [42013] 38475 38827 40678 41589 45463 45551 45733 47989 48462 48673 19023 19079 #> [42025] 19365 19547 20539 20721 21449 21759 22392 22883 23414 26213 26271 27202 #> [42037] 29122 30472 30565 31266 31816 32498 32764 33641 33821 34523 34934 35435 #> [42049] 35698 38476 39095 40679 41401 43017 43480 43746 43935 49395 19424 19482 #> [42061] 19677 19730 20590 21824 21965 22242 22451 24067 24689 24759 24959 25100 #> [42073] 25596 26699 27907 28210 28339 28506 29045 29193 29270 29499 29709 31605 #> [42085] 32119 32194 33822 35093 35354 35436 38739 40916 41025 42044 44034 46277 #> [42097] 47578 48362 19191 19619 19731 20722 20991 21709 22181 22393 24284 24960 #> [42109] 26214 26782 27121 27203 27353 29271 30876 31267 31430 32499 34366 35699 #> [42121] 35868 37169 37888 38648 41026 41116 41215 41758 42135 42313 43377 43481 #> [42133] 43747 44330 46019 46111 46180 46769 47579 19678 20281 20338 20798 21760 #> [42145] 21825 21966 22452 22817 23792 24205 24498 24760 24822 26431 27282 28422 #> [42157] 28975 30093 30566 30796 31126 31529 33172 33409 35355 35521 36933 37019 #> [42169] 37807 38153 39276 40511 42579 43112 43936 44614 45552 46470 46668 47791 #> [42181] 47890 48078 48177 48271 48881 19548 19913 20540 20657 21130 21450 21761 #> [42193] 22111 22182 22884 23221 23930 24961 25308 25456 25524 25808 26272 26348 #> [42205] 26850 27204 28423 30797 31036 31127 35176 36740 37367 40249 40680 42667 #> [42217] 42747 43653 44120 46374 46669 48882 49396 19483 19679 20400 20799 21451 #> [42229] 21574 22183 24352 24890 25737 25951 26150 26273 26634 26915 28586 28660 #> [42241] 29638 29863 30567 31128 33016 34227 34524 35606 36118 36207 37629 39277 #> [42253] 40061 40512 44425 44615 44807 45553 46471 46966 47362 47473 47580 47792 #> [42265] 48883 49298 20282 20658 21131 22112 22243 22313 23222 23475 27980 28211 #> [42277] 29123 31885 32120 33017 33493 34751 35015 35177 35607 35700 36556 36836 #> [42289] 37463 38059 38915 40681 41117 43113 44331 45284 45372 46967 49397 19484 #> [42301] 20723 21208 23151 23415 27054 27122 27205 27354 27491 27582 28122 28340 #> [42313] 28507 28814 29710 30094 30178 30473 31606 32334 32582 33744 34065 34595 #> [42325] 34935 35178 36293 36741 37368 39802 39884 40250 40421 40513 42231 43378 #> [42337] 46112 46670 48363 48559 48884 49299 19620 19846 19981 22113 22885 23295 #> [42349] 24206 24412 25101 25525 27422 28056 28508 29046 30393 30568 31951 32195 #> [42361] 32411 33253 33337 35608 37979 38236 38560 40682 41505 42314 43018 43654 #> [42373] 43937 44426 45007 45650 45829 46020 46568 48767 49093 21209 21333 21575 #> [42385] 22114 22945 23296 23931 24761 25665 26568 26851 28737 29047 30729 31268 #> [42397] 31817 33106 33254 34439 34673 36026 36477 36837 37269 39803 40514 40600 #> [42409] 41027 42045 42412 44527 44907 45285 46671 47581 48560 48674 19732 20101 #> [42421] 20659 22741 24068 24891 25047 25809 26274 27981 28424 28661 30004 30951 #> [42433] 31530 31607 32412 35779 36208 37170 37711 38309 39545 40515 41678 41856 #> [42445] 42748 43019 43300 44121 44332 44427 45464 48561 48885 20045 21273 22184 #> [42457] 23416 23932 26019 26215 27737 27823 30005 30651 30730 30798 31207 31269 #> [42469] 31431 31738 31818 32765 33173 33909 34440 35701 36119 37270 38990 39096 #> [42481] 39636 40840 41679 42668 44035 45554 46472 46569 46968 47990 48562 49300 #> [42493] 20046 20591 21887 22818 23017 23860 24353 25738 25810 26020 26216 26916 #> [42505] 27824 28057 28587 28815 29124 29500 30259 30569 36209 36557 37980 38060 #> [42517] 39885 41506 41680 42046 42669 22453 22742 22946 23625 23861 24069 24207 #> [42529] 24354 24823 25102 27492 28123 29125 29194 30877 31432 31952 32196 32849 #> [42541] 33174 34228 34596 35522 36742 36838 41118 41507 41945 45008 45734 46113 #> [42553] 46770 47891 48272 48364 49398 19733 19847 20164 20283 20724 22314 22947 #> [42565] 23297 23357 24285 25597 26021 26217 27055 27493 28273 28816 29639 30652 #> [42577] 30731 31953 32030 32197 32666 34066 34597 34836 38828 38991 40422 40756 #> [42589] 40841 42837 43938 44333 45830 47679 49399 20228 21274 22037 22185 22819 #> [42601] 23358 23996 24208 24824 27738 28509 28588 28662 29048 29864 30260 30732 #> [42613] 31344 31886 32931 33823 35437 37094 38061 39278 39637 40154 40842 41028 #> [42625] 42315 42838 43214 43379 43748 46278 46473 48178 48563 48675 19982 22038 #> [42637] 23223 24413 24825 24962 25952 26349 28058 28589 28889 31037 32850 33642 #> [42649] 36027 38237 38391 38561 38992 39097 40601 40843 42670 42839 42942 43114 #> [42661] 43842 45651 46181 46375 48079 49400 20339 20725 22820 23091 23298 24209 #> [42673] 25103 25172 26917 27206 28590 28738 28817 32031 33255 33338 34229 34752 #> [42685] 35179 36648 37981 39966 40062 40155 41402 42840 44808 45735 45831 46021 #> [42697] 46182 46863 47153 48564 48886 49094 20047 20726 22039 22454 22948 23559 #> [42709] 23793 24286 25309 25526 26350 27825 30394 31954 32667 34367 34598 35780 #> [42721] 36934 37271 40602 40683 41029 41590 41759 41857 41946 42749 43380 46022 #> [42733] 46474 46672 48273 20467 20592 20860 23092 23933 23997 24690 24762 25173 #> [42745] 25457 25598 27583 27982 28124 28591 29272 30006 30474 30952 31208 33410 #> [42757] 34837 35094 36120 37020 38477 39804 40844 40917 41119 42485 42671 43381 #> [42769] 43482 44616 45009 48676 48768 20593 22588 22669 22743 23560 25458 25739 #> [42781] 25811 26918 29126 30953 31129 31433 31531 31887 32263 34067 34150 34599 #> [42793] 35609 37889 38062 38649 38916 39193 39638 40918 41120 44528 44617 47154 #> [42805] 48887 20800 21275 21452 22744 23476 26151 26700 27207 28425 28890 30878 #> [42817] 31434 31739 32032 32932 34838 35356 35869 36028 37982 38063 40335 40684 #> [42829] 41121 42841 43115 44428 45010 45555 47155 48080 48565 49003 49401 20284 #> [42841] 20468 20541 20861 21058 21132 21334 23093 24287 25243 25527 25953 26701 #> [42853] 27208 28274 28592 29195 31608 32198 32264 32668 33643 34674 34839 35357 #> [42865] 36935 37171 37272 37544 37808 40156 40336 42232 43215 46570 46969 47156 #> [42877] 48179 48274 48365 20918 21453 22040 22525 23018 24355 25244 25528 26152 #> [42889] 26569 26783 27826 28510 29640 29789 31345 31955 32199 32413 34230 36121 #> [42901] 36380 37545 37712 38478 41122 44231 44700 45286 45924 46475 46771 46864 #> [42913] 20919 22589 23561 25104 26432 27355 27584 28125 28341 29865 30733 31609 #> [42925] 32033 32265 32669 33339 34840 35523 36210 36839 37464 37630 38562 38650 #> [42937] 39639 40757 41760 42580 43939 45925 46970 49301 20660 23094 23299 23794 #> [42949] 25885 26022 26218 27123 27494 28663 29049 30324 32266 34151 34303 36211 #> [42961] 36294 36478 37021 37172 38238 38310 38651 39368 39466 39640 41947 42413 #> [42973] 42486 43843 43940 45094 45373 20594 20862 24556 24612 25666 25812 26351 #> [42985] 27827 28059 29711 30095 30395 30954 31819 32670 34231 34441 34841 40603 #> [42997] 40919 41216 42316 42750 42842 44701 45011 45287 45374 46376 48366 48463 #> [43009] 48769 20595 21710 22949 23152 24499 25740 27739 28426 29346 29574 29931 #> [43021] 30570 31610 31956 32583 32671 33018 34152 34304 34442 34525 35095 35180 #> [43033] 36212 36649 38563 38993 41319 41508 42672 43116 43749 43844 44036 44429 #> [43045] 45188 45652 46571 47053 47892 22745 22886 22950 23795 28593 29050 29575 #> [43057] 30179 30396 30653 30799 31820 33644 33824 34526 34753 34842 35096 37273 #> [43069] 37631 38564 39279 40516 40920 44334 46279 46865 48367 48464 48770 49095 #> [43081] 20801 21133 21647 22951 23359 23934 23998 24144 24356 25310 26433 27495 #> [43093] 28126 28427 28818 31130 31270 32121 33645 33975 34936 35268 36558 37274 #> [43105] 37546 37890 38829 40063 40337 40845 43117 45375 46183 47991 49302 21059 #> [43117] 21398 21888 22041 22670 23095 23935 24414 25954 26080 26219 26352 27496 #> [43129] 27983 28428 31038 31131 31346 31888 32122 32335 32851 33256 33825 33910 #> [43141] 36381 36650 39098 41403 41591 42233 42673 43020 43655 46280 46377 47582 #> [43153] 47893 48677 20920 21576 21889 22115 23477 24145 24210 25311 25599 25886 #> [43165] 26081 26353 26499 27356 27740 28664 29501 29866 30397 31039 31347 32414 #> [43177] 32672 32766 32933 33107 33567 35781 42317 42414 42943 43301 44430 45376 #> [43189] 49096 21210 21335 21648 23300 24288 24613 25245 25600 25887 27497 28127 #> [43201] 28819 29641 30398 30654 31040 32934 33646 34527 34937 35358 35610 37095 #> [43213] 37632 37713 37983 38740 39194 40064 42318 42581 42674 43118 44037 44809 #> [43225] 45012 45189 46866 47583 48566 48771 49097 20992 21399 22590 23096 23626 #> [43237] 24691 26153 26434 26702 26784 26852 27283 27498 27741 29196 29273 29502 #> [43249] 31435 31740 31957 32584 34368 36743 38239 38652 39805 40846 41320 41681 #> [43261] 41948 42319 42944 43382 44335 45377 45556 48081 21762 21826 23999 24415 #> [43273] 25048 25174 25246 25813 26500 27124 27284 28342 28429 30399 30475 32267 #> [43285] 33175 38154 38917 39886 40251 43021 43483 44232 44618 47157 47793 48180 #> [43297] 48567 21454 21967 22455 22746 22821 22952 23478 23862 24070 24826 24963 #> [43309] 25459 26354 26703 28060 28511 29274 30007 30096 31348 32123 32415 32852 #> [43321] 33494 33568 33911 35702 36559 37096 37633 38311 38479 41030 41123 42047 #> [43333] 42487 42751 44529 44702 45832 47260 47992 49004 49402 21134 21455 23097 #> [43345] 24211 24289 25247 25814 26570 26973 27423 27828 27984 28128 29642 30008 #> [43357] 30180 30571 31041 31436 32336 33647 33745 34232 36213 36479 37809 39195 #> [43369] 39546 41217 41321 41592 41682 41858 41949 43560 44038 44431 44908 46476 #> [43381] 47363 48181 48465 49005 21211 21968 22887 23627 23796 24212 25049 25105 #> [43393] 26082 27499 27742 28129 28343 28976 29127 30734 30879 31271 32416 33108 #> [43405] 34528 35359 37891 38064 38392 39369 40338 41683 42234 44336 44619 46114 #> [43417] 48275 48678 49098 21649 21711 23153 23479 24557 24827 25175 28061 32585 #> [43429] 32767 33176 35703 36480 36936 40423 41509 42235 43119 44233 44530 47261 #> [43441] 47680 48888 22244 22953 24558 25106 26275 27585 28594 29503 29576 29712 #> [43453] 31042 31209 31272 32673 33019 33257 33495 35181 35524 38065 38155 38565 #> [43465] 39967 40604 42236 43022 43383 43561 43845 45095 45288 46184 47158 47474 #> [43477] 21509 21577 21712 22394 22747 22888 23719 24146 25176 25529 25815 26154 #> [43489] 26704 28130 28275 29867 30400 30955 32337 34754 35525 35782 35944 36295 #> [43501] 36744 37275 37892 38830 39196 40065 41124 41950 42488 43484 45289 21578 #> [43513] 22042 22116 25391 26571 28344 28430 28891 31672 32124 32853 34755 38831 #> [43525] 39280 40252 42320 42945 43023 43120 43302 46023 46281 46572 47475 47794 #> [43537] 21713 21827 22456 22591 23720 23863 25460 26083 27424 28212 28739 28977 #> [43549] 29347 29504 30735 30956 32768 33826 34675 35097 35269 35438 36029 37097 #> [43561] 37173 37714 38312 39099 42675 43656 45465 47993 21763 21969 22245 23098 #> [43573] 23154 23224 23480 23562 24147 25050 25107 25601 26355 26705 27586 28131 #> [43585] 28431 28740 28892 28978 30476 30800 31532 32769 33746 33827 34068 35439 #> [43597] 36481 38156 38240 43846 44531 45557 46772 49403 22671 23417 24559 24964 #> [43609] 25108 25741 26435 27425 28432 28741 29577 30401 30655 30801 31043 31349 #> [43621] 31889 32935 35440 36214 36560 36840 37893 38393 38832 39467 40424 41125 #> [43633] 42237 42676 42752 43847 44703 46024 48466 49099 22246 22457 23019 23099 #> [43645] 23360 23418 23481 23797 24071 24416 25051 25177 25312 26155 26220 27500 #> [43657] 28062 29275 29790 30402 31890 32268 32417 32674 32770 33020 33569 34233 #> [43669] 34529 34843 34938 35270 35783 36482 37810 37894 38241 38394 38480 38833 #> [43681] 38918 40157 41510 42843 44432 44532 44704 45290 46025 47681 48368 22526 #> [43693] 22592 22822 24417 25109 25602 25742 27587 30009 30656 32269 32586 35182 #> [43705] 36382 36651 37811 38653 39370 40517 43121 44810 47894 48772 49303 23301 #> [43717] 23563 24763 24892 24965 26706 27588 28063 28742 29932 32270 32418 32936 #> [43729] 33177 33258 33340 33496 34069 36030 37022 37369 37634 37715 38566 39100 #> [43741] 40066 40921 41126 43384 43657 43941 44039 45558 45653 47054 48082 22186 #> [43753] 22954 24290 26023 26356 26572 27209 27743 28064 28665 28743 29276 30097 #> [43765] 30957 31273 32587 32771 34756 34939 35183 35784 36652 36841 38834 39887 #> [43777] 41404 41511 43658 44909 45013 46026 47682 47795 22889 25313 26853 27285 #> [43789] 28345 28666 28744 29791 31741 31958 32772 33021 34070 35016 35526 40922 #> [43801] 41127 41218 42048 43122 44433 44533 45833 46773 48083 48568 48889 22117 #> [43813] 22748 22823 23225 23302 23361 24000 24072 24614 24828 24893 26707 26919 #> [43825] 27653 27908 28065 28213 28433 28745 28979 29792 29868 31891 32271 32773 #> [43837] 34369 35945 36842 38395 38835 41593 41684 41859 42946 43750 43848 45378 #> [43849] 47895 48276 48467 48773 22672 22955 23020 24213 24560 24692 25603 25667 #> [43861] 25955 26708 26785 26920 27210 27589 28980 29869 31132 31533 32200 32854 #> [43873] 33497 35360 36653 36745 37465 38567 41031 41219 41761 42321 43385 49210 #> [43885] 22824 23021 23155 23564 23628 24615 24764 26921 33498 33828 34600 35527 #> [43897] 37023 37716 38157 38568 42049 42582 44337 44620 44811 45379 45834 48569 #> [43909] 22956 23100 23303 24073 24561 24829 24966 25178 25530 26024 27056 27211 #> [43921] 28434 28595 30325 30880 31534 33178 33912 34676 35017 36031 36383 36937 #> [43933] 37098 37895 38654 40923 41594 44122 45190 49006 49304 23101 23362 24074 #> [43945] 25461 25604 26156 26854 27286 27654 27744 27985 28746 28820 30403 31350 #> [43957] 32855 33179 33259 33499 33913 34370 35018 35528 35946 36296 40158 40518 #> [43969] 40847 41032 42947 43216 44234 45096 46477 47683 49100 22395 22825 26276 #> [43981] 29277 30404 31959 33411 33570 33648 33829 34601 36561 37717 38242 39101 #> [43993] 39547 41512 42322 42489 45736 45835 46185 46478 49007 23226 24214 24500 #> [44005] 24616 24693 26277 26573 26635 27426 27745 28346 29197 30572 31044 33341 #> [44017] 34443 34677 36215 36483 37370 37896 40339 40924 41685 42844 43123 43485 #> [44029] 45380 45926 47262 48277 48774 48890 23798 24765 26855 27125 28347 29128 #> [44041] 29643 29870 31045 31892 33649 35785 35870 36297 37024 37099 37174 37276 #> [44053] 38243 38481 38655 39102 39968 40159 40758 41595 42323 42490 43751 45191 #> [44065] 46186 46282 23156 24148 24894 25668 26157 29129 30477 30881 31821 32272 #> [44077] 32675 32856 33342 33747 34940 35271 35611 35786 36122 38994 40425 41128 #> [44089] 42753 43217 44621 46673 46971 47684 22749 23102 23157 23482 25392 26574 #> [44101] 27357 27590 27909 28893 29198 30261 31046 32201 34844 36123 38158 39103 #> [44113] 39371 40759 41129 42583 47994 48468 23103 23304 23483 24149 24617 25314 #> [44125] 26709 26856 27287 29278 29417 30010 30181 30958 31437 33022 33650 34305 #> [44137] 34371 34444 35529 35704 35787 37277 38569 40253 40340 41686 42491 42754 #> [44149] 43218 43386 43562 45559 45654 46283 47263 48570 48891 23799 23864 24075 #> [44161] 25110 25315 26436 26786 27501 27910 28276 28435 29130 29199 29279 29933 #> [44173] 30326 30573 31047 31673 31742 31822 32857 33180 34306 35705 35947 36032 #> [44185] 36298 36484 36654 36938 37025 37547 38396 38570 38995 40519 40848 41762 #> [44197] 43219 43659 44910 45927 47159 47896 48369 48469 22890 23484 23721 25179 #> [44209] 26158 26575 26974 27911 29934 31611 33976 34678 34845 35272 37371 37548 #> [44221] 38159 39197 39468 39548 39641 39806 41220 41763 42238 43660 43752 44338 #> [44233] 44705 46378 46573 47055 48470 23865 24501 24766 25605 25956 26922 27427 #> [44245] 28348 29578 30574 30657 30736 30959 31210 32500 33181 33977 34153 39281 #> [44257] 42948 43220 44123 44706 47796 47995 23363 23419 23565 23629 24150 24618 #> [44269] 24895 25393 26278 26636 26923 28512 29418 29935 32034 32202 32338 33500 #> [44281] 33571 34071 34307 35706 36033 36216 36562 36655 36939 37278 37812 37984 #> [44293] 38066 38397 38836 39549 39642 40426 40685 41513 42136 44124 44339 45291 #> [44305] 47056 47264 47797 48892 49101 49211 25669 26221 27428 29348 31274 31535 #> [44317] 31960 33182 34602 34941 39550 40067 40254 40427 40849 41764 44340 45655 #> [44329] 46115 47057 47265 47364 47476 49102 49212 23800 24502 24830 25816 25888 #> [44341] 26857 27829 28747 29644 31438 31893 32035 32501 33023 33260 33651 34072 #> [44353] 34603 35019 37026 37100 37175 38313 39104 39716 41221 44125 44622 45097 #> [44365] 26025 26279 26437 27746 29936 31048 31439 31743 31961 32273 32937 33024 #> [44377] 33830 35098 35184 35948 36217 37985 38244 38571 38741 38837 40686 40760 #> [44389] 41130 42137 42677 44235 44911 45560 45836 47996 48571 49404 23630 23936 #> [44401] 24357 25531 25957 26975 27502 27591 27986 31133 31440 32419 33978 35530 #> [44413] 37635 38398 38572 39105 39551 39717 40341 40925 41131 41687 41951 42678 #> [44425] 43563 44812 45014 45837 45928 46027 47058 48572 49103 49213 23485 23722 #> [44437] 24503 24896 25817 27830 28277 29579 30405 31962 33025 33261 33831 34308 #> [44449] 34604 35099 36656 37176 37279 38067 38742 38838 39106 39807 40255 42492 #> [44461] 42845 43303 45292 46116 47160 48573 48893 24215 24418 25316 25606 26637 #> [44473] 28132 29200 30960 33183 33748 34154 35788 36384 36563 36746 37718 39107 #> [44485] 41222 41596 42493 42755 45098 45561 45929 46028 47365 47584 47798 23486 #> [44497] 24419 25111 25743 27503 29349 30406 30658 31134 31211 32938 33501 36843 #> [44509] 37101 38245 38482 39282 39808 40342 40428 42584 42846 43024 44040 44912 #> [44521] 45099 47366 23631 24001 24694 25958 26710 26924 27212 27358 27504 28349 #> [44533] 29419 29505 29645 30478 31823 32125 32420 32502 33652 34234 34530 34605 #> [44545] 34846 37027 37372 37466 38919 39643 41322 43753 44126 44534 44913 46029 #> [44557] 46284 46867 47266 47477 48775 49104 49405 23723 24076 24216 24619 25248 #> [44569] 26858 27057 27126 27288 27359 27505 28513 28894 29506 29580 32676 33653 #> [44581] 33832 34847 35020 36844 37373 37636 37719 38656 39198 39718 40605 40761 #> [44593] 40926 41033 43387 44623 44914 45562 47161 48278 24695 26084 27987 29051 #> [44605] 29131 29713 29793 30327 31894 32677 32939 33412 34155 34757 35441 36299 #> [44617] 36747 37280 38160 38314 38839 39283 41132 42239 42494 43221 46379 46868 #> [44629] 47585 48574 23801 23937 24077 24420 24831 25532 26357 27058 27655 28514 #> [44641] 28895 29201 29714 31135 31441 31824 32858 33262 33343 34309 34679 34848 #> [44653] 35361 36300 36385 37549 39552 39888 40687 41405 41514 42240 42756 45100 #> [44665] 47267 48776 49008 23938 24897 24967 25112 25533 26787 27747 28596 30882 #> [44677] 31674 32339 32421 32588 32774 32940 33413 34310 34680 35100 35612 36124 #> [44689] 38657 39469 41323 43486 44624 44813 45466 47268 48084 26358 26711 26925 #> [44701] 26976 27213 28214 29132 29715 30737 30961 32340 33026 35101 35362 35707 #> [44713] 36386 38658 38996 39969 40343 40688 40762 41597 42050 43025 43222 43754 #> [44725] 44625 45737 46574 47367 24421 25249 25462 26280 27289 28350 29052 29794 #> [44737] 30011 30328 31825 31895 31963 32274 32678 32859 33027 33184 33572 34758 #> [44749] 35442 35871 40429 40927 44434 44535 44707 45192 46972 47799 47997 48777 #> [44761] 24078 24422 24968 27214 27656 28066 29716 30479 31536 32126 32341 33914 #> [44773] 35531 36387 37028 37177 37720 38161 38483 38659 42051 42415 43661 43942 #> [44785] 44435 44814 44915 45193 45563 46380 47059 47269 47800 49105 24562 26222 #> [44797] 26359 27127 27360 29053 30480 30802 31275 31744 33414 33979 36034 36301 #> [44809] 37281 37467 39284 39719 39970 40068 40160 43755 43943 44436 44916 46030 #> [44821] 46187 46973 47801 48575 24358 24696 25744 25818 26926 30182 30575 32036 #> [44833] 32127 32589 32775 33654 34759 36845 38743 39720 39809 40430 41406 42052 #> [44845] 43124 44236 45564 46117 46285 46381 46674 47060 48085 25180 25463 25745 #> [44857] 26712 26859 27429 28436 29350 29717 30183 30481 31896 32342 32941 35949 #> [44869] 36748 37102 37374 38162 39553 41860 42138 44917 45930 46286 46774 49305 #> [44881] 25113 25959 26085 26281 27128 27215 28351 28896 29420 30576 31136 32942 #> [44893] 33109 33185 33344 33749 33980 34942 35363 35613 36125 36218 36485 38315 #> [44905] 38484 39285 39971 40069 40763 40928 42053 42324 44918 45931 46479 46675 #> [44917] 46775 46974 47061 47897 47998 49306 49406 24832 26438 26501 26638 27361 #> [44929] 28667 29202 29351 29718 30012 30577 30738 33263 35614 36302 37468 37637 #> [44941] 38399 38573 38920 39972 40256 44341 45467 46188 47685 47898 48370 49106 #> [44953] 25181 25464 25607 25746 26026 26713 27430 30578 31442 32203 32422 33345 #> [44965] 34311 34849 34943 36940 37029 37638 37986 38068 38163 39470 39810 42585 #> [44977] 44536 44815 45194 45565 45932 46118 46382 47478 25250 25534 25608 26439 #> [44989] 27362 27506 28215 28981 29646 30098 30184 30803 31276 31443 31537 32679 #> [45001] 33186 33346 33833 33981 34073 34312 34606 36303 39973 40344 40431 43125 #> [45013] 46189 46575 47999 48778 25609 26977 27216 27290 27507 27912 30013 31897 #> [45025] 32423 33982 34313 34681 35708 35950 36388 36657 37030 38485 38840 40161 #> [45037] 40345 41688 41765 42054 42325 42586 42949 44537 45101 45933 47802 48576 #> [45049] 49214 49307 49407 25747 26788 27657 29280 29352 30482 30579 31137 31675 #> [45061] 31826 32424 33110 35443 36564 37178 37282 40070 40346 40520 40929 41223 #> [45073] 41952 42495 42950 43026 44816 45102 45838 48577 49009 24833 25251 25670 #> [45085] 26027 26159 26502 27291 27592 27748 27831 28668 29133 30014 32590 33834 #> [45097] 34074 34607 34760 35185 35951 36126 36304 37103 37179 37469 39108 41689 #> [45109] 42139 42416 43756 44127 45103 46287 49107 49215 25114 25394 26282 28515 #> [45121] 30483 30659 33028 33573 35186 35444 35709 37721 37987 38744 39286 39721 #> [45133] 39811 40257 41953 42326 43126 43564 44342 46288 46480 46776 48679 25182 #> [45145] 26789 26927 27431 27832 28278 28437 29507 29937 31612 31964 33347 33574 #> [45157] 33835 34445 34608 35710 35789 37180 40432 43565 43662 44128 46031 46777 #> [45169] 47062 47162 47270 48279 48371 48779 48894 25317 25610 26790 27432 27658 #> [45181] 29421 29871 31965 32037 32860 34235 35364 36219 38069 38246 39372 39554 #> [45193] 40162 41133 43027 43223 46576 25252 26028 26503 26714 27129 27217 31613 #> [45205] 34075 34446 35711 37550 37639 38997 39287 39555 39812 40163 41324 41766 #> [45217] 42847 43487 45381 46975 47586 48372 48895 49408 25318 28216 29647 31138 #> [45229] 33029 33348 34609 35021 35187 35872 36658 37181 38921 40764 42327 44041 #> [45241] 44129 44708 46383 46869 25183 27508 27833 28748 28982 30015 31049 31139 #> [45253] 31614 31898 32128 34682 35790 35952 38247 39889 41134 41690 42328 43224 #> [45265] 43757 44042 44538 44709 45382 46481 46778 47163 48086 25889 28597 30262 #> [45277] 31444 31827 32204 32275 33502 34314 35022 35873 36305 37640 38070 38574 #> [45289] 41515 43225 43304 44043 45383 45738 46032 46976 47368 47479 25465 25819 #> [45301] 25960 26360 26860 27292 28516 28669 28897 29281 30099 30407 32343 32680 #> [45313] 32861 33349 34156 34683 35023 39373 39974 40930 41767 42951 43566 44539 #> [45325] 45015 48000 49108 49308 26029 26791 27659 28517 28670 30408 30580 30804 #> [45337] 30883 31050 32503 32776 33030 33750 34236 34315 34610 35273 35874 36749 #> [45349] 37104 37283 37813 39199 42055 42241 42848 42952 43944 44044 46190 47271 #> [45361] 47480 47686 48373 25890 27218 27293 28217 29581 30263 31445 31745 33751 #> [45373] 39722 40164 40433 40606 40931 41954 44710 44817 45566 45934 46191 47164 #> [45385] 47369 47587 49216 49309 26504 28067 28133 30100 30962 31051 31212 31966 #> [45397] 33415 34372 35188 38316 41516 41691 44130 44343 46577 47370 47899 48001 #> [45409] 27130 27294 27913 28898 29422 31676 32681 36486 37105 38248 40071 41768 #> [45421] 42587 44711 45104 45567 47371 48896 49310 26978 27660 27988 28134 28671 #> [45433] 29054 30101 30264 30484 30805 31351 31538 32425 33187 33655 33915 35532 #> [45445] 35615 36487 37106 37182 37375 37722 38164 40850 42849 43663 43849 44437 #> [45457] 45384 46384 47481 47588 47803 48780 48897 49217 26283 26361 26505 26861 #> [45469] 26979 28821 28983 29795 31539 31828 31899 32129 32862 33836 35953 36488 #> [45481] 36659 39200 39288 40258 42850 45568 46033 47804 47900 49409 26792 27989 #> [45493] 28899 29203 32038 32591 35445 37988 38486 42329 43226 44344 44712 44818 #> [45505] 44919 46034 46482 47901 49311 26223 26793 27593 27661 27914 28749 29055 #> [45517] 30581 30963 33416 33837 34316 34531 34761 35274 36035 37031 37183 37376 #> [45529] 37551 37723 38745 40521 41325 42953 43850 45468 46192 46870 49109 49312 #> [45541] 26506 27131 27990 29056 30660 30739 31052 31277 31446 31829 32039 33264 #> [45553] 33503 33656 34373 35365 35616 36127 36489 38249 39975 40765 41407 44819 #> [45565] 45569 45739 46578 47805 48471 26928 27219 28218 30265 30582 31140 31447 #> [45577] 31900 32682 33031 34237 35617 35712 36846 39289 39374 40522 41135 41408 #> [45589] 42242 42417 43388 43664 43758 44237 44438 45656 45740 47272 47482 47589 #> [45601] 48578 26086 26715 28438 28822 29134 29508 30661 32943 33983 34157 34374 #> [45613] 35024 37641 38841 40851 44713 45657 46676 47372 48898 26794 27662 28068 #> [45625] 28750 30409 30964 32777 33657 36750 36941 40165 42588 43488 43567 43665 #> [45637] 44131 45016 46871 47273 47806 48899 49410 27363 27594 27663 28135 29582 #> [45649] 31830 33032 34317 34447 34762 34944 35875 36490 36751 41692 41861 43389 #> [45661] 44238 44345 45469 46385 48579 49110 26862 27059 29509 30329 31053 31278 #> [45673] 31448 31677 32944 33188 33417 35189 37814 38071 39890 39976 41409 41955 #> [45685] 42496 43851 44132 44626 44714 46579 47373 47687 48182 48781 26362 26795 #> [45697] 27060 27295 28352 28439 28672 28823 30102 31746 32592 34684 35713 36491 #> [45709] 37107 37184 37284 37377 38400 38487 39290 40166 40523 41326 42330 43945 #> [45721] 44239 44920 48002 49218 26576 26716 26863 27132 29353 29938 30583 31279 #> [45733] 31540 31967 32205 32863 33838 34611 35275 35876 37989 38998 41327 41956 #> [45745] 43028 43489 48087 26507 26717 27664 32504 34238 35190 35618 38999 39375 #> [45757] 39556 41862 42418 42757 43390 43946 44820 45017 45385 45658 46386 46483 #> [45769] 48003 26980 27061 28219 29423 29719 30266 30884 31141 32130 33504 33839 #> [45781] 33984 34318 35102 35191 35446 36752 36942 37285 37470 38317 40852 41957 #> [45793] 42851 42954 43127 43568 44045 44439 45570 47374 26639 26718 27364 28598 #> [45805] 28984 31352 33752 34448 35025 37286 37724 37990 38318 38401 39201 41517 #> [45817] 41769 41958 43391 44715 44821 46035 46193 46580 46977 47063 47165 47807 #> [45829] 49111 26981 27433 27749 28069 29939 30185 30584 31142 31541 31901 33189 #> [45841] 34158 34375 34612 34945 35366 35533 35877 36389 36660 36753 37815 39109 #> [45853] 39376 39644 42497 43029 43947 44921 45018 46978 47483 47688 48280 48680 #> [45865] 48900 26796 26929 28220 28673 28900 31054 31449 33190 33575 34319 34449 #> [45877] 36220 36492 36565 37378 37725 38165 39000 39377 40524 41034 42589 43128 #> [45889] 44627 44716 45659 46677 47902 26982 27991 28518 28599 28751 29057 29583 #> [45901] 29872 30485 30585 31747 31902 32683 32864 32945 33111 33753 33840 33916 #> [45913] 34532 38072 38319 38575 38842 39723 41224 41518 41693 42331 43490 43852 #> [45925] 45293 46779 47166 47590 47808 47903 48088 48580 49219 26983 30186 30410 #> [45937] 32276 35276 36128 36493 36754 38402 40525 41035 41328 42056 43305 43759 #> [45949] 45470 45741 46484 46780 47591 49010 27062 27509 27595 27992 28279 28353 #> [45961] 28824 30486 31055 32778 33265 34763 36221 37108 37185 37642 38403 39110 #> [45973] 39291 39645 42758 44133 48089 48681 28519 28674 29584 30662 31353 32277 #> [45985] 33658 33917 35103 37109 38746 39001 40689 41329 41694 44240 45471 27665 #> [45997] 27993 29204 30187 32131 32344 32779 33985 34159 34946 35104 35534 36943 #> [46009] 37287 37643 37897 38073 38660 41330 42759 43227 43569 43948 44628 45105 #> [46021] 47064 48090 27434 28752 28825 29135 30267 30663 31213 32040 34850 34947 #> [46033] 35277 35791 36755 37471 38250 38488 39891 40853 40932 42332 42590 42955 #> [46045] 43853 45742 45839 46036 46194 46581 46979 48581 48682 27296 27510 28354 #> [46057] 28440 29424 30016 30411 30586 30740 30965 31831 32132 32946 33505 34764 #> [46069] 35105 35447 35792 36036 36390 37552 37644 40933 42140 43129 44346 45743 #> [46081] 47689 48091 27666 28280 29205 29282 29873 30017 30188 30268 32505 34239 #> [46093] 36037 36944 37110 38251 38661 38843 40347 43949 44540 45106 46195 47375 #> [46105] 47904 49313 28675 28826 29283 29585 30806 31450 32278 32593 33659 34851 #> [46117] 35714 39292 39892 39977 41225 42057 43854 44134 46678 47167 48582 28355 #> [46129] 29058 29720 30103 30412 31748 31968 33033 34765 35026 35715 36756 37032 #> [46141] 37379 39893 40607 43570 43666 43950 44717 45472 45744 46289 47592 48004 #> [46153] 48092 48374 48683 48782 28676 29284 30966 31143 31678 32133 32684 32780 #> [46165] 32947 33112 33506 33660 34160 36757 37111 38252 38489 38747 40072 40259 #> [46177] 40526 40690 41410 43392 46037 46119 46196 48375 49220 27994 28441 28901 #> [46189] 29354 29510 29648 31280 32041 32134 32206 32426 32781 32865 34376 35448 #> [46201] 35619 36038 38320 38490 38922 39724 41519 41695 42498 43030 44241 48583 #> [46213] 48783 27750 27834 28070 28520 30587 31281 31451 32948 36306 38166 38748 #> [46225] 39111 39202 39894 42760 43951 44135 45745 46120 46485 46582 47690 27995 #> [46237] 28753 28985 29511 30189 32345 32427 32949 33576 35449 36494 36566 36661 #> [46249] 37186 37472 37645 38404 39471 39646 39813 39978 40934 41331 41863 42852 #> [46261] 44629 45107 46781 47691 47905 48584 49011 27996 29136 29355 29425 30018 #> [46273] 30885 33113 33918 34613 34852 35192 35716 35878 36391 36495 36662 36945 #> [46285] 37380 38321 39293 40260 41770 44046 45840 45935 46290 46782 48005 48684 #> [46297] 28356 30269 34533 34948 35450 36039 36496 38074 38322 39002 39725 40691 #> [46309] 40935 41332 41598 42419 43228 44440 45195 45660 46121 48183 49112 28442 #> [46321] 28986 29356 30413 30807 32279 33577 34161 34534 35106 35193 37288 38844 #> [46333] 39203 39557 42243 42679 42853 43760 44922 45019 45473 46387 46980 47484 #> [46345] 48093 48376 48472 28357 29059 30019 30190 30588 30741 31354 33986 34162 #> [46357] 34240 35027 35717 36567 36847 37646 38323 40348 41696 41959 42141 42333 #> [46369] 42761 44630 45294 45936 47274 48377 28281 29426 30589 31452 32042 34163 #> [46381] 34241 35194 35367 38576 38923 39472 40349 41771 42334 42420 42499 44347 #> [46393] 45295 46679 46981 47485 48685 49314 30414 30590 30742 31749 33507 34320 #> [46405] 34535 36663 37816 38491 38749 41226 42058 42142 42335 42956 43393 44136 #> [46417] 44718 45841 49012 30020 30664 30743 31056 31214 32506 32594 33266 35107 #> [46429] 35195 36568 36664 37553 37898 40766 43130 43855 44719 47486 28987 29796 #> [46441] 30021 30967 31750 32043 33754 35196 35278 35620 37187 37899 38405 39726 #> [46453] 39895 40608 44348 45296 48784 29137 29512 31057 32044 32595 35279 36307 #> [46465] 37289 38167 39112 40261 40527 42500 43761 44631 45571 45842 46583 46872 #> [46477] 47275 47906 48378 49411 29513 29874 30270 30487 31453 33508 35108 36129 #> [46489] 38075 40854 42591 45108 45937 46122 46783 47276 47487 47692 48006 28827 #> [46501] 30330 31903 32045 32596 32950 33350 34766 35197 37900 38076 41520 41599 #> [46513] 41697 45843 46486 46784 47593 49113 30191 30415 33191 36946 38406 39294 #> [46525] 39727 40262 41521 42762 44720 44923 45938 47168 47693 49412 30665 31355 #> [46537] 31904 31969 32507 33267 34685 34853 34949 35535 36392 36758 36947 37991 #> [46549] 38253 38924 39113 39728 39814 40167 41227 41960 42854 43394 43571 43762 #> [46561] 44441 44632 45661 46785 47169 48901 29514 31356 31542 31832 34164 34242 #> [46573] 34767 35028 35109 35451 36948 37554 38168 39295 39896 40692 40767 42336 #> [46585] 43572 43952 44047 44349 45662 48473 28988 29285 29357 29515 30968 31144 #> [46597] 31357 33755 34377 34450 34536 34686 35198 36848 37033 39729 39815 40073 #> [46609] 40168 40263 40350 40609 40936 41961 42059 42421 43306 43953 44137 44721 #> [46621] 49413 29060 30022 30416 31615 32046 32866 33192 33919 34243 34378 35029 #> [46633] 35199 35536 35954 36308 36849 37112 38750 38925 39114 40169 40693 41228 #> [46645] 41522 41698 42763 43229 44138 44442 45939 46291 47809 49315 29427 29586 #> [46657] 29721 30023 32135 34537 35368 36309 36393 36850 37113 38407 38577 40074 #> [46669] 40434 40610 42143 44139 44722 45663 46292 46487 47488 48281 33268 33841 #> [46681] 34244 34854 36130 36222 36394 37726 38077 40264 41229 41699 42422 43491 #> [46693] 44633 48007 48686 29358 31358 31751 31970 33351 33987 36131 36759 37473 #> [46705] 37555 37647 38926 40435 41411 41864 42144 42244 42680 42764 44242 46488 #> [46717] 47376 49414 29797 30104 30666 31282 34245 36223 37648 37992 38492 41700 #> [46729] 46388 47065 48902 49415 29587 30591 30744 31283 32280 32685 33193 33920 #> [46741] 35280 35452 37188 37993 38845 39115 39558 41600 41962 43031 46680 47170 #> [46753] 47277 48184 48379 48474 48687 30024 30592 31215 33114 34855 35955 36040 #> [46765] 36224 36395 37189 38324 39979 40528 41230 45020 45297 46489 46873 47694 #> [46777] 48380 48785 32207 32597 32782 33115 33842 35200 35537 35879 36396 36497 #> [46789] 37817 39559 41412 43230 44443 46490 47278 30192 30667 30969 33116 33921 #> [46801] 35538 35793 36760 38751 40937 41231 41865 41963 42060 45298 45474 46038 #> [46813] 46197 47171 47279 48008 48094 48585 49221 30105 30808 31359 31833 32047 #> [46825] 32208 32428 33756 34950 35110 36041 36225 36498 36569 37556 38493 38752 #> [46837] 39116 39560 41772 41964 43032 43954 45021 47066 47377 47489 47695 48586 #> [46849] 29940 30668 32281 32508 33194 33352 33661 36132 36665 37381 40170 40351 #> [46861] 41036 41866 42337 43395 44243 44350 47172 47907 48381 49013 30193 31216 #> [46873] 32346 33269 33988 34614 34687 36226 36570 37034 37382 37649 37818 38325 #> [46885] 38578 40075 40938 42501 43856 45844 46874 48475 48688 32048 32598 33578 #> [46897] 33843 36042 36397 37035 39378 41136 42681 42855 43131 43396 43667 44244 #> [46909] 45109 45572 46491 48282 48903 30025 30886 31058 31360 31616 31971 32867 #> [46921] 32951 33195 33509 33579 34076 34165 34379 34688 35718 36666 38927 39204 #> [46933] 41413 42423 42682 43231 43307 43573 43955 44822 45573 46039 46198 46389 #> [46945] 46786 47810 47908 48185 48786 48904 49222 31217 32509 33662 34077 34166 #> [46957] 34321 34451 36227 36667 38078 38846 40436 41137 42424 43308 43574 43668 #> [46969] 43956 44541 45110 45475 46040 46584 47067 48382 31284 31361 32686 33196 #> [46981] 34380 36133 36228 37557 37727 37819 38494 39205 41523 42683 43669 45746 #> [46993] 46041 46787 48283 48587 49316 30488 31059 32347 32510 32687 32783 33197 #> [47005] 33844 34856 35201 37190 37383 39003 42684 44444 46199 46681 47068 30970 #> [47017] 31454 31679 31905 32209 32282 33270 33580 33989 36134 36310 37114 37650 #> [47029] 37820 39117 39897 40076 40437 42765 44048 44723 44823 44924 45022 46123 #> [47041] 46492 46982 47811 48588 49114 30809 32429 32599 33198 33845 34689 34768 #> [47053] 37191 37290 37651 38579 39206 40352 41773 44634 46293 48787 49416 31752 #> [47065] 33510 33663 34615 37036 37994 38928 39004 39118 39207 41232 41333 44925 #> [47077] 45299 46124 46200 46390 46682 48788 31060 32283 32952 33117 33664 33922 #> [47089] 34857 35111 35281 35621 36229 36668 37291 37901 38929 39980 40611 40768 #> [47101] 41601 42766 42856 43397 44351 45386 45574 45664 45940 46875 47173 49417 #> [47113] 31455 32210 32953 33990 34769 35719 36135 39379 39473 41602 41774 43232 #> [47125] 43309 43398 44824 45387 46585 46876 48009 48476 31285 31456 32049 32348 #> [47137] 32954 33581 34322 34538 36043 37292 37384 37728 38169 38326 38847 42245 #> [47149] 42425 43957 44825 45111 45300 45476 45845 30887 32868 33418 35112 35202 #> [47161] 35720 35794 36761 37293 37558 39119 39898 41233 41603 42338 42426 43033 #> [47173] 43958 45301 45575 46294 46788 48589 48905 49317 32284 32511 32688 34381 #> [47185] 34539 35113 36851 38753 39120 39899 39981 40353 41334 42427 44245 44445 #> [47197] 46789 31543 31617 32211 32600 32784 34858 35453 36136 36499 38170 39296 #> [47209] 39380 39900 40077 40612 40694 40855 41037 42592 44246 45941 46295 48010 #> [47221] 49014 31286 31362 32955 34246 34690 35030 35795 36571 37652 37821 38171 #> [47233] 39816 39901 41038 41524 41775 42502 43492 43575 44049 44140 45665 46877 #> [47245] 48383 48689 49318 31618 32136 32349 32601 32956 33199 33991 34247 35721 #> [47257] 35796 36230 36500 36762 37115 37294 40695 41525 41867 42503 43399 43763 #> [47269] 44724 45666 46125 46983 48384 48906 31457 32430 33757 34452 34691 35282 #> [47281] 37653 40696 43670 44635 44926 47069 47594 48011 48284 32512 33118 33511 #> [47293] 34323 36501 36949 37295 39902 40613 41039 41138 43671 44725 45196 45747 #> [47305] 46201 48186 48789 48907 31906 33271 35283 36311 36572 36852 36950 39005 #> [47317] 39647 40078 42593 44141 44826 32513 33582 34382 36231 37559 37729 39982 #> [47329] 40265 40529 42061 42594 47378 47696 49319 31972 32137 32212 33419 34383 #> [47341] 38079 40266 40354 40697 42339 42428 42595 42857 45388 45477 47595 47909 #> [47353] 48385 32050 32602 33923 34453 34859 39817 41040 41776 41868 41965 43764 #> [47365] 45023 46493 47490 48012 48386 31907 32051 32689 32785 33758 36573 38408 #> [47377] 39381 39818 41777 41966 42062 42145 43310 44542 45197 45389 33034 34540 #> [47389] 34860 34951 36502 36853 37995 38327 39382 40171 40769 42340 44927 47697 #> [47401] 48477 32514 33035 33420 33665 34167 36398 36854 37037 37296 39121 39561 #> [47413] 41234 41335 41526 42341 42504 43576 43672 45024 48690 48790 48908 49320 #> [47425] 31908 33119 34541 35284 36137 38580 38662 40770 40856 41778 44543 45302 #> [47437] 46126 46296 46683 48478 32603 33583 34692 35114 37902 38172 38581 39383 #> [47449] 39903 40172 41779 42146 43034 43132 43857 44142 47812 48387 33666 34384 #> [47461] 35203 35539 35797 36044 36312 38495 38754 38930 39208 40939 41139 41604 #> [47473] 42505 43311 43765 43858 44050 45942 46042 46202 48095 49223 35115 37116 #> [47485] 38663 39006 40355 42063 42147 42506 42596 43959 44446 45667 46790 47280 #> [47497] 48791 49015 49224 33120 34385 34616 34861 36045 36855 38080 38173 39209 #> [47509] 41869 42342 42507 43035 43493 44143 44447 46127 46984 47174 32431 33272 #> [47521] 33512 34078 34862 36313 37730 39904 40530 41140 41701 42148 43233 43673 #> [47533] 44247 45112 45478 46791 47281 47698 49115 32432 34454 35116 35369 36951 #> [47545] 37117 37731 38328 38496 40857 41041 41870 43674 43766 45668 46128 46494 #> [47557] 46684 46792 47596 32515 33353 34248 34693 35031 35622 37822 39905 39983 #> [47569] 40173 41527 43133 44448 44928 46203 47379 47597 32690 32957 35032 35204 #> [47581] 35880 35956 36399 38755 39007 40940 43134 45576 45669 47070 48590 48792 #> [47593] 48909 34542 34952 35454 35540 35957 37732 38329 39474 39562 39648 40356 #> [47605] 40614 40771 42149 43767 33584 34694 34770 35541 35623 35798 38756 39008 #> [47617] 39563 41702 42246 44144 45748 46391 47813 48388 49225 33200 34695 34953 #> [47629] 35455 35722 35958 36138 36856 36952 37903 38081 38330 38582 38931 39009 #> [47641] 39210 40531 47175 48389 48591 33759 34696 36139 36400 38174 39984 40079 #> [47653] 40267 41967 42767 43312 43400 46878 47699 49116 34079 34455 35542 36046 #> [47665] 37560 39211 39564 40772 41605 42597 42957 43234 43494 44544 45025 45479 #> [47677] 45670 45749 47380 47598 48691 36232 36401 37385 39565 40357 40615 40698 #> [47689] 41235 41414 42150 44051 44248 44929 45577 47282 47381 49321 33273 35543 #> [47701] 36574 36763 37118 37733 37904 37996 38497 38757 39010 39475 40941 42508 #> [47713] 42768 43235 43577 44352 45198 45303 46297 33421 33667 35370 36503 36857 #> [47725] 37038 37192 37386 37474 38254 38498 38664 40616 40773 40858 42429 44145 #> [47737] 44726 45113 46392 46586 47700 49322 33760 34456 34697 38848 38932 39212 #> [47749] 40268 42343 42598 43036 43495 43578 43675 43859 46204 46393 48187 48390 #> [47761] 48592 35881 36047 36402 37905 40617 40942 41415 41968 43860 44052 44146 #> [47773] 47283 48013 48096 48692 35959 36314 36575 36669 36858 37039 37297 37823 #> [47785] 37997 39011 39297 39985 42599 42769 43135 44249 46129 46793 47491 48479 #> [47797] 49016 33761 34080 34168 34249 35799 36315 36764 37387 38331 39298 40438 #> [47809] 41141 41236 41336 43136 43401 43676 45026 46298 48188 33762 33846 35205 #> [47821] 35285 35624 36140 36953 37040 38175 38583 38665 39384 39566 41606 42344 #> [47833] 43402 43496 44727 46299 46394 46685 47071 48189 49017 37119 37388 37998 #> [47845] 39122 39819 39906 40269 41142 41703 42151 43960 45114 45199 45943 46205 #> [47857] 46879 47072 48910 49323 35371 35723 35882 35960 36141 38082 38332 38758 #> [47869] 40270 40943 41528 41607 41969 44449 44728 45750 48190 34169 35883 36142 #> [47881] 37824 37906 38409 39123 39567 40532 40618 40774 41871 42600 43961 45304 #> [47893] 46206 46794 47073 47176 47382 34954 39012 42430 42958 43497 43579 43768 #> [47905] 45480 48191 49018 39013 39730 40533 42770 42858 43137 44053 44250 44353 #> [47917] 45846 49117 35800 36316 36859 38333 39124 42152 42431 42959 43138 44054 #> [47929] 44930 46207 46587 46686 46985 47074 47383 47492 47701 48014 49118 34386 #> [47941] 35372 36504 36670 37041 37193 37907 38666 39299 39649 39820 42247 44827 #> [47953] 46795 46880 47599 48593 48911 34543 34863 35033 35961 36143 36954 37654 #> [47965] 38255 39650 41970 42771 43236 43403 43861 43962 44147 44828 45751 47284 #> [47977] 47384 47814 47910 48693 49119 34387 36233 37475 38334 38410 38499 39821 #> [47989] 40174 40699 40775 41143 41237 41872 42345 45027 45481 46300 48793 35544 #> [48001] 36403 39300 41042 41144 42346 42601 42685 44148 44545 45671 46208 46301 #> [48013] 48694 48912 37734 37825 38667 41043 42602 45200 45578 45944 46687 47385 #> [48025] 47600 48285 36860 37389 39822 39986 40080 40175 41044 41145 42153 42603 #> [48037] 44055 45115 46495 48097 48913 49418 34864 37390 38083 38335 39301 41045 #> [48049] 42347 45116 46496 47815 48794 49019 34698 35117 35884 36234 36404 37655 #> [48061] 39987 40358 40619 41873 42248 42348 45752 46395 48914 35286 38411 39213 #> [48073] 39988 40439 40944 41971 43139 43313 43963 44149 46302 46396 47285 47386 #> [48085] 47911 48286 49419 35625 35885 36405 37194 37561 37735 37826 38412 38933 #> [48097] 39302 40440 40945 41337 41416 42249 42432 42686 45028 45390 45482 47493 #> [48109] 48098 48192 48915 36955 38256 40176 41780 43140 43862 44354 44546 45117 #> [48121] 46688 47702 48015 48795 35545 35801 36144 36505 36861 37042 37999 39731 #> [48133] 41046 41146 42250 43677 43769 44547 46209 46881 48193 49020 35287 35626 #> [48145] 36406 36956 37120 37827 39214 39732 40776 41147 44729 46397 46689 49324 #> [48157] 35288 35886 38000 39014 39651 39907 40359 41148 41972 44150 45579 48016 #> [48169] 48796 48916 35627 35802 36957 37736 38001 39733 40271 41338 41704 41874 #> [48181] 43580 44829 44931 46303 47075 47177 49120 35546 35887 35962 36048 36145 #> [48193] 38668 41608 43037 44355 44730 45201 46690 46796 47178 48194 48287 48391 #> [48205] 36506 37298 37476 37562 37908 39734 40360 42064 42154 42687 43237 43498 #> [48217] 43678 44830 45483 46130 46691 47076 47601 47816 48695 36507 37737 37909 #> [48229] 38257 39652 40081 40177 41529 41609 41781 42065 42155 42859 48288 48594 #> [48241] 36049 37477 38002 38176 39653 39735 41530 42433 43499 45029 45580 45945 #> [48253] 46882 47077 48917 36050 37563 38584 38759 40272 40700 41973 42066 43238 #> [48265] 43404 43964 44548 45118 47387 47494 48099 49121 36235 37564 39015 41238 #> [48277] 41417 42772 44356 45030 45119 45753 46131 36508 36958 37565 39125 40534 #> [48289] 40946 41047 41610 43965 45305 46497 47495 48100 48797 37195 37299 39303 #> [48301] 40361 41048 41418 43966 44056 44357 44636 45306 45847 46210 46398 46498 #> [48313] 46883 46986 47179 48195 48392 48595 36765 37196 38084 39385 40362 40701 #> [48325] 42434 42509 43405 44358 44637 37300 37566 37738 39215 40777 41419 42349 #> [48337] 42688 43141 43239 43406 45202 45754 47180 47602 48289 48596 49021 49226 #> [48349] 36766 36959 37910 38669 39386 40778 41420 41782 42156 44359 44831 45307 #> [48361] 46304 49227 36576 36767 37121 39654 40082 40363 40620 41875 43038 43967 #> [48373] 44151 44360 45672 45946 46132 48696 36407 37301 38258 39387 39655 42350 #> [48385] 43407 44549 46884 46987 47496 48017 49420 37567 38413 39656 39989 40441 #> [48397] 40621 42604 43770 44638 46133 49022 38585 39126 40535 41239 42157 43142 #> [48409] 43679 44731 45581 46043 46211 46588 46692 48597 36862 39736 40178 40364 #> [48421] 40702 41049 41149 41705 42067 43314 43680 44550 45308 45484 46305 46885 #> [48433] 49122 49421 36863 37391 37828 38670 40442 41150 41240 41339 43315 44732 #> [48445] 44932 46306 46499 46693 46886 47078 47603 47912 37197 38003 38177 38336 #> [48457] 38849 39304 39388 39990 40622 41340 41611 41876 42068 42435 42689 43968 #> [48469] 44152 44933 46307 46399 46500 48196 48290 37198 37392 37739 39127 40947 #> [48481] 43143 43408 43500 45203 45582 46501 47286 47388 48291 49325 37911 38085 #> [48493] 38337 40365 41151 41783 42251 43316 43409 44551 45848 47703 48197 37568 #> [48505] 39823 39991 40273 40859 40948 41612 42158 43681 44153 46308 49422 37393 #> [48517] 37656 37912 38086 39992 40703 41531 42510 44733 45391 46044 47287 47817 #> [48529] 48198 49326 37657 38500 38586 40083 42159 43410 43863 44934 45392 45849 #> [48541] 46797 47704 47818 48480 49023 38414 38760 39657 40179 41050 41532 41974 #> [48553] 42252 42436 44057 44251 45485 48798 49123 38178 38415 39128 39993 40623 #> [48565] 41152 45120 46589 47389 47705 47913 49423 37569 42860 43771 44252 44552 #> [48577] 45393 45755 46400 47497 48101 37913 39129 39389 39994 40624 40949 42861 #> [48589] 43581 43772 45486 46134 49124 38087 41153 42862 43144 43773 44450 44734 #> [48601] 45850 47181 47706 48697 40950 41051 42069 43774 44058 44735 44935 46988 #> [48613] 47390 48292 38088 38179 38416 39305 39908 41241 42511 44361 45204 45309 #> [48625] 45394 45487 47079 47288 48199 48293 48799 49228 39909 40860 40951 41421 #> [48637] 42160 42690 44059 44154 44451 44553 45310 45673 45756 46401 47498 48800 #> [48649] 48918 39306 39658 42253 43240 43317 43682 44060 44155 44452 44736 44832 #> [48661] 45121 49125 49229 38761 39737 40625 41533 43039 44362 44453 45311 46045 #> [48673] 46402 47604 47819 47914 48393 48698 48801 39476 39824 40536 40952 42161 #> [48685] 45205 48394 38338 39568 39659 40861 42162 42691 43775 44737 45851 48294 #> [48697] 48802 40084 40862 41242 41534 41784 42773 43411 43582 43683 43776 45206 #> [48709] 45757 47080 48598 41422 43040 43969 44454 46798 39825 40443 42163 42960 #> [48721] 43041 45031 45312 45583 46212 46309 46403 47289 48481 49230 38850 38934 #> [48733] 39477 41052 41423 41706 41785 42070 42437 43864 44363 44833 45032 46694 #> [48745] 48395 48599 48699 43318 46590 46695 47391 47915 48295 49327 39307 39826 #> [48757] 39995 40274 40863 41154 42351 42774 43970 44253 45033 45488 46502 46887 #> [48769] 47605 48396 48803 49231 39910 39996 41341 41535 42438 42512 43319 43865 #> [48781] 44364 44936 46213 48018 48919 40953 42164 43042 43412 43583 44554 44834 #> [48793] 45395 45947 46046 47290 47606 48920 40366 41342 41424 41877 41975 42254 #> [48805] 42352 42513 43145 43584 44835 45122 45674 48600 40180 40537 41425 42863 #> [48817] 44365 44555 44738 45489 47916 48804 40704 41343 43501 45034 45123 46404 #> [48829] 47182 40085 41613 42514 42692 43684 44739 46799 46888 47183 47499 49328 #> [48841] 40626 42255 42515 42775 42961 43043 43320 44639 45758 46989 47392 49329 #> [48853] 49424 40086 41976 42071 43585 44455 44836 45313 45396 45584 47917 48482 #> [48865] 39997 41155 44156 44456 45207 45397 45759 47918 49024 39911 40627 41243 #> [48877] 41344 41426 41707 42516 43146 43777 44640 45035 45675 46990 47081 47820 #> [48889] 48601 40444 40705 41156 41786 45314 45676 46503 47393 48397 49126 49330 #> [48901] 39998 42256 46214 46310 46696 47184 47500 48102 48805 49425 42165 42864 #> [48913] 45124 46504 47185 47291 48483 49331 40628 40779 40954 41157 41244 41536 #> [48925] 43321 44157 46135 46311 47607 49127 40181 40538 40629 41158 41245 41787 #> [48937] 41977 43241 44556 44641 44937 48398 40445 40955 41788 44837 45208 46697 #> [48949] 48602 49332 41159 41427 42517 43866 44557 47501 48806 40539 40630 41978 #> [48961] 42605 48103 48700 49128 49232 41246 42962 44061 44366 47608 48019 48921 #> [48973] 41160 41247 43586 44838 44938 45585 46047 46505 46698 49426 41708 42693 #> [48985] 43587 44254 44740 44939 45677 46800 46991 47502 48200 48603 41053 42865 #> [48997] 43242 43588 43971 44367 45398 46136 46699 47186 48604 49333 41054 41789 #> [49009] 42866 43322 45678 45852 47292 48104 48701 48922 41537 41709 42257 42963 #> [49021] 43589 44062 44255 45399 45490 45586 45853 48484 41790 42072 43323 43590 #> [49033] 45315 46506 48201 49233 41538 43147 44063 44457 45400 46889 48020 42694 #> [49045] 44158 47609 47707 49427 41614 43243 44159 44256 45125 45209 46215 46312 #> [49057] 46405 46507 47293 47394 47708 48702 41615 46508 46591 47395 47919 48923 #> [49069] 49428 42518 42964 44160 44458 45210 45854 45948 47294 47503 48924 42439 #> [49081] 43502 44064 45587 46216 46509 46992 49025 42606 42965 43148 44161 45126 #> [49093] 48925 42353 43867 44558 44940 46406 46592 47709 49129 41878 43591 44368 #> [49105] 45211 48605 42073 43044 43324 44162 45401 48296 49334 42776 43045 43778 #> [49117] 45036 45127 45316 46048 49026 43046 43149 46407 46700 46993 47187 47295 #> [49129] 47920 48485 44257 44459 44941 45949 46593 42867 42966 43685 45491 45950 #> [49141] 46701 48202 48703 46510 46594 47396 49130 42519 42777 43686 44163 44460 #> [49153] 44741 45402 45588 46049 46890 48105 43687 46408 46891 47188 47504 48399 #> [49165] 42695 43868 45317 45589 46313 46994 47821 48203 49429 43413 43869 44258 #> [49177] 44742 45403 45492 48204 48606 49335 43414 43592 43870 44369 45493 46409 #> [49189] 48021 49131 43244 43871 45951 46314 47710 49234 44743 45037 43325 44461 #> [49201] 47189 47921 49235 43593 44259 45494 45952 47190 47610 48607 44462 44559 #> [49213] 46702 48205 48704 48926 44065 45128 45212 45855 46315 47082 47711 48486 #> [49225] 48608 48807 49027 49132 43594 45038 46050 46316 46511 48022 48705 49430 #> [49237] 43688 43872 43972 44164 44839 47611 48487 43779 45495 45856 46512 47712 #> [49249] 49431 45039 45129 46801 48927 49236 44370 45496 46703 46995 48928 44942 #> [49261] 45404 46051 46410 44642 44840 45040 45213 46704 47296 47713 45953 46052 #> [49273] 46705 47397 44463 45130 46137 47398 49028 45131 46892 47505 48808 49237 #> [49285] 49432 45318 47822 48106 49433 45954 46138 44943 45497 46217 47506 48706 #> [49297] 48929 45405 45955 47083 47297 47399 48023 48297 48809 49029 44944 45590 #> [49309] 45857 46893 47507 48810 45679 48298 45406 45498 45760 45858 47191 48488 #> [49321] 45499 45591 45680 46139 47922 45859 46595 46894 48206 49030 49336 45592 #> [49333] 45860 46411 48489 48811 47192 47400 45761 48024 48609 46218 46802 49133 #> [49345] 46317 46895 48930 46513 46896 47714 48207 48610 45861 45956 47298 47401 #> [49357] 47612 48299 48611 49337 49434 46897 48025 49031 47823 48400 49338 46898 #> [49369] 47508 47613 47824 48107 49134 49339 46596 46899 47084 47614 47715 48490 #> [49381] 49135 46706 46996 47193 47509 47085 48026 48612 48931 49032 49136 47402 #> [49393] 47825 48401 48613 49033 48932 49137 47826 48812 49138 47510 47716 48027 #> [49405] 48933 49435 48402 49034 47615 48028 48707 49436 48300 49139 47403 48491 #> [49417] 47923 48301 48813 49140 47511 49437 48302 49438 47827 48029 49238 49439 #> [49429] 49239 49440 48614 49340 48934 49035 49441 48403 48492 48814 48935 49141 #> [49441] 49442 48936 49341 #>  #> [[7]] #>    [1]     0     0     0     0     1     1     1     2     3     4     4     6 #>   [13]     8    10    10    10    10    10    13    13    14    17    19    23 #>   [25]    26    29    31    32    35    38    40    41    43    49    51    54 #>   [37]    60    64    64    71    72    76    82    87    89    93    95   100 #>   [49]   105   113   118   124   127   136   142   151   156   161   172   176 #>   [61]   181   188   190   194   205   212   218   228   237   247   255   261 #>   [73]   266   272   284   292   302   311   318   323   330   335   342   351 #>   [85]   359   373   379   386   395   403   408   418   426   435   448   456 #>   [97]   461   471   483   496   507   519   528   540   547   557   572   582 #>  [109]   589   603   615   625   633   644   652   667   683   695   703   715 #>  [121]   727   735   743   754   762   772   783   796   813   824   837   852 #>  [133]   863   881   903   923   938   953   965   977   995  1011  1025  1043 #>  [145]  1054  1071  1085  1102  1115  1129  1146  1161  1178  1189  1206  1217 #>  [157]  1229  1247  1261  1280  1295  1308  1326  1340  1349  1362  1378  1388 #>  [169]  1406  1420  1430  1448  1462  1478  1498  1511  1527  1550  1571  1589 #>  [181]  1603  1617  1639  1645  1659  1668  1688  1705  1726  1742  1754  1775 #>  [193]  1792  1812  1828  1839  1860  1881  1899  1928  1947  1965  1985  2006 #>  [205]  2028  2048  2066  2085  2101  2121  2141  2159  2179  2188  2209  2232 #>  [217]  2251  2276  2294  2325  2353  2375  2406  2439  2465  2486  2509  2537 #>  [229]  2552  2581  2605  2633  2653  2680  2703  2730  2752  2775  2807  2829 #>  [241]  2840  2873  2894  2913  2937  2957  2980  3001  3026  3050  3075  3093 #>  [253]  3119  3154  3183  3209  3235  3256  3280  3301  3324  3341  3361  3382 #>  [265]  3412  3440  3469  3495  3530  3556  3584  3613  3640  3670  3692  3717 #>  [277]  3749  3773  3793  3815  3848  3880  3906  3928  3957  3981  4008  4033 #>  [289]  4067  4097  4128  4152  4177  4209  4236  4263  4293  4323  4353  4378 #>  [301]  4408  4438  4468  4496  4523  4557  4582  4613  4640  4671  4705  4735 #>  [313]  4769  4804  4825  4856  4891  4927  4953  4978  5016  5048  5078  5108 #>  [325]  5143  5169  5198  5229  5256  5296  5324  5353  5386  5420  5447  5480 #>  [337]  5514  5549  5569  5601  5636  5667  5696  5738  5761  5791  5832  5866 #>  [349]  5901  5940  5969  6012  6048  6082  6108  6144  6172  6204  6234  6271 #>  [361]  6306  6341  6382  6419  6448  6475  6505  6550  6592  6630  6673  6714 #>  [373]  6740  6778  6817  6853  6887  6920  6961  7005  7039  7070  7104  7134 #>  [385]  7176  7214  7252  7277  7316  7354  7401  7447  7490  7530  7572  7598 #>  [397]  7642  7675  7729  7770  7802  7837  7882  7918  7952  7985  8020  8057 #>  [409]  8085  8128  8168  8200  8233  8278  8316  8355  8405  8436  8487  8528 #>  [421]  8561  8601  8639  8676  8714  8748  8783  8816  8851  8895  8936  8977 #>  [433]  9018  9056  9098  9140  9190  9236  9280  9326  9364  9410  9460  9502 #>  [445]  9548  9593  9638  9678  9720  9766  9813  9857  9899  9954 10000 10049 #>  [457] 10093 10134 10175 10221 10261 10325 10369 10418 10474 10513 10566 10604 #>  [469] 10651 10691 10727 10771 10815 10872 10921 10967 11008 11055 11098 11153 #>  [481] 11202 11259 11307 11353 11393 11437 11484 11522 11568 11622 11678 11732 #>  [493] 11774 11834 11888 11936 11987 12037 12083 12128 12175 12226 12286 12320 #>  [505] 12367 12408 12465 12521 12581 12631 12686 12733 12784 12837 12886 12940 #>  [517] 12993 13041 13094 13160 13203 13260 13304 13368 13434 13485 13535 13589 #>  [529] 13650 13696 13750 13802 13852 13906 13967 14028 14069 14123 14170 14227 #>  [541] 14283 14344 14391 14446 14496 14552 14593 14657 14712 14768 14827 14871 #>  [553] 14916 14968 15030 15078 15134 15185 15242 15305 15353 15401 15452 15499 #>  [565] 15560 15612 15661 15722 15776 15828 15870 15933 15993 16055 16120 16175 #>  [577] 16237 16298 16366 16427 16479 16538 16602 16660 16731 16787 16848 16901 #>  [589] 16965 17019 17098 17157 17218 17282 17345 17413 17474 17533 17588 17645 #>  [601] 17721 17775 17840 17905 17949 18030 18091 18156 18227 18283 18350 18412 #>  [613] 18477 18546 18610 18666 18727 18784 18848 18914 18977 19024 19080 19133 #>  [625] 19192 19247 19302 19366 19425 19485 19549 19621 19680 19734 19794 19848 #>  [637] 19914 19983 20048 20102 20165 20229 20285 20340 20401 20469 20542 20596 #>  [649] 20661 20727 20802 20863 20921 20993 21060 21135 21212 21276 21336 21400 #>  [661] 21456 21510 21579 21650 21714 21764 21828 21890 21970 22043 22118 22187 #>  [673] 22247 22315 22396 22458 22527 22593 22673 22750 22826 22891 22957 23022 #>  [685] 23104 23158 23227 23305 23364 23420 23487 23566 23632 23724 23802 23866 #>  [697] 23939 24002 24079 24151 24217 24291 24359 24423 24504 24563 24620 24697 #>  [709] 24767 24834 24898 24969 25052 25115 25184 25253 25319 25395 25466 25535 #>  [721] 25611 25671 25748 25820 25891 25961 26030 26087 26160 26224 26284 26363 #>  [733] 26440 26508 26577 26640 26719 26797 26864 26930 26984 27063 27133 27220 #>  [745] 27297 27365 27435 27511 27596 27667 27751 27835 27915 27997 28071 28136 #>  [757] 28221 28282 28358 28443 28521 28600 28677 28754 28828 28902 28989 29061 #>  [769] 29138 29206 29286 29359 29428 29516 29588 29649 29722 29798 29875 29941 #>  [781] 30026 30106 30194 30271 30331 30417 30489 30593 30669 30745 30810 30888 #>  [793] 30971 31061 31145 31218 31287 31363 31458 31544 31619 31680 31753 31834 #>  [805] 31909 31973 32052 32138 32213 32285 32350 32433 32516 32604 32691 32786 #>  [817] 32869 32958 33036 33121 33201 33274 33354 33422 33513 33585 33668 33763 #>  [829] 33847 33924 33992 34081 34170 34250 34324 34388 34457 34544 34617 34699 #>  [841] 34771 34865 34955 35034 35118 35206 35289 35373 35456 35547 35628 35724 #>  [853] 35803 35888 35963 36051 36146 36236 36317 36408 36509 36577 36671 36768 #>  [865] 36864 36960 37043 37122 37199 37302 37394 37478 37570 37658 37740 37829 #>  [877] 37914 38004 38089 38180 38259 38339 38417 38501 38587 38671 38762 38851 #>  [889] 38935 39016 39130 39216 39308 39390 39478 39569 39660 39738 39827 39912 #>  [901] 39999 40087 40182 40275 40367 40446 40540 40631 40706 40780 40864 40956 #>  [913] 41055 41161 41248 41345 41428 41539 41616 41710 41791 41879 41979 42074 #>  [925] 42166 42258 42354 42440 42520 42607 42696 42778 42868 42967 43047 43150 #>  [937] 43245 43326 43415 43503 43595 43689 43780 43873 43973 44066 44165 44260 #>  [949] 44371 44464 44560 44643 44744 44841 44945 45041 45132 45214 45319 45407 #>  [961] 45500 45593 45681 45762 45862 45957 46053 46140 46219 46318 46412 46514 #>  [973] 46597 46707 46803 46900 46997 47086 47194 47299 47404 47512 47616 47717 #>  [985] 47828 47924 48030 48108 48208 48303 48404 48493 48615 48708 48815 48937 #>  [997] 49036 49142 49240 49342 49443 #>  #> [[8]] #>    [1]     0   106   207   299   407   518   628   726   839   945  1038  1141 #>   [13]  1242  1354  1432  1533  1643  1743  1832  1918  2012  2133  2242  2329 #>   [25]  2445  2539  2634  2733  2841  2919  3000  3094  3183  3279  3375  3449 #>   [37]  3557  3643  3720  3806  3921  4017  4109  4196  4287  4375  4470  4554 #>   [49]  4643  4740  4816  4912  5012  5120  5221  5326  5419  5502  5593  5685 #>   [61]  5766  5847  5939  6048  6155  6250  6336  6443  6550  6636  6752  6851 #>   [73]  6944  7026  7115  7214  7309  7405  7482  7559  7680  7764  7859  7928 #>   [85]  8022  8116  8197  8284  8366  8442  8552  8633  8713  8794  8873  8979 #>   [97]  9061  9160  9241  9341  9446  9533  9614  9706  9790  9878  9972 10057 #>  [109] 10146 10238 10327 10416 10493 10578 10664 10753 10842 10930 11018 11120 #>  [121] 11203 11303 11385 11475 11572 11653 11756 11847 11945 12029 12129 12217 #>  [133] 12297 12380 12472 12555 12647 12735 12822 12915 13004 13088 13174 13252 #>  [145] 13341 13417 13501 13577 13649 13726 13819 13922 13991 14097 14190 14284 #>  [157] 14363 14445 14528 14620 14702 14779 14858 14941 15017 15094 15172 15262 #>  [169] 15352 15441 15531 15603 15691 15774 15846 15935 16021 16100 16174 16258 #>  [181] 16333 16413 16474 16544 16610 16673 16746 16836 16917 17001 17074 17144 #>  [193] 17219 17298 17382 17454 17535 17617 17696 17778 17847 17922 18004 18071 #>  [205] 18135 18217 18302 18377 18449 18523 18602 18666 18731 18813 18886 18985 #>  [217] 19068 19154 19211 19291 19360 19441 19518 19599 19655 19723 19808 19888 #>  [229] 19972 20052 20126 20203 20267 20340 20427 20507 20573 20646 20731 20813 #>  [241] 20873 20954 21029 21103 21188 21265 21326 21402 21491 21572 21641 21706 #>  [253] 21768 21850 21942 22006 22072 22144 22217 22294 22383 22462 22535 22602 #>  [265] 22666 22745 22817 22885 22965 23044 23122 23193 23263 23349 23418 23486 #>  [277] 23556 23617 23690 23756 23828 23903 23963 24026 24109 24192 24249 24318 #>  [289] 24387 24462 24539 24615 24694 24764 24821 24881 24955 25015 25073 25146 #>  [301] 25211 25279 25342 25411 25486 25555 25624 25693 25769 25838 25905 25971 #>  [313] 26038 26105 26170 26237 26310 26362 26426 26489 26551 26630 26690 26750 #>  [325] 26827 26895 26971 27030 27099 27155 27227 27301 27364 27416 27485 27557 #>  [337] 27623 27696 27758 27838 27906 27970 28038 28088 28145 28219 28290 28355 #>  [349] 28411 28481 28562 28617 28688 28741 28812 28880 28930 29006 29060 29109 #>  [361] 29170 29236 29308 29371 29437 29497 29558 29612 29666 29731 29790 29853 #>  [373] 29937 30000 30071 30137 30194 30252 30309 30370 30430 30495 30563 30621 #>  [385] 30670 30714 30772 30833 30894 30942 31013 31074 31147 31224 31281 31341 #>  [397] 31390 31455 31520 31576 31632 31699 31746 31803 31861 31909 31968 32027 #>  [409] 32079 32137 32206 32256 32306 32360 32413 32474 32535 32591 32646 32701 #>  [421] 32746 32806 32863 32925 32975 33036 33090 33137 33186 33248 33302 33357 #>  [433] 33394 33453 33512 33568 33625 33694 33758 33812 33866 33923 33981 34039 #>  [445] 34088 34139 34196 34239 34303 34364 34416 34473 34524 34568 34634 34694 #>  [457] 34755 34804 34861 34916 34971 35012 35072 35118 35167 35210 35259 35312 #>  [469] 35355 35404 35462 35507 35546 35600 35652 35703 35756 35808 35855 35915 #>  [481] 35968 36019 36065 36112 36165 36200 36245 36293 36340 36393 36456 36508 #>  [493] 36550 36603 36651 36706 36750 36807 36845 36893 36951 36999 37063 37116 #>  [505] 37164 37223 37265 37317 37364 37420 37470 37515 37558 37608 37658 37708 #>  [517] 37762 37814 37860 37898 37942 37990 38042 38102 38149 38200 38239 38295 #>  [529] 38346 38403 38453 38489 38525 38567 38616 38660 38708 38747 38790 38825 #>  [541] 38868 38918 38952 38998 39040 39094 39139 39191 39235 39283 39333 39379 #>  [553] 39421 39462 39502 39543 39591 39630 39677 39716 39760 39806 39859 39897 #>  [565] 39946 39989 40023 40056 40095 40137 40179 40214 40250 40293 40332 40369 #>  [577] 40421 40448 40488 40518 40559 40598 40643 40686 40727 40763 40803 40847 #>  [589] 40886 40924 40967 41013 41062 41101 41151 41184 41225 41272 41300 41334 #>  [601] 41368 41415 41456 41500 41543 41571 41606 41640 41672 41717 41756 41794 #>  [613] 41828 41872 41914 41958 41990 42022 42058 42098 42139 42185 42223 42266 #>  [625] 42299 42342 42381 42418 42453 42492 42521 42557 42595 42634 42666 42702 #>  [637] 42735 42773 42805 42839 42879 42912 42944 42977 43009 43049 43080 43115 #>  [649] 43154 43189 43231 43268 43297 43341 43384 43419 43442 43476 43511 43536 #>  [661] 43568 43604 43640 43691 43715 43751 43784 43811 43852 43884 43908 43941 #>  [673] 43977 44001 44034 44066 44094 44118 44157 44204 44237 44262 44310 44335 #>  [685] 44364 44398 44434 44467 44495 44522 44563 44600 44630 44667 44697 44728 #>  [697] 44760 44794 44824 44853 44880 44923 44952 44984 45016 45051 45081 45116 #>  [709] 45143 45175 45197 45224 45244 45273 45298 45328 45363 45388 45408 45427 #>  [721] 45464 45490 45509 45540 45569 45601 45621 45643 45666 45694 45724 45747 #>  [733] 45769 45800 45829 45865 45893 45933 45954 45978 45995 46022 46053 46082 #>  [745] 46106 46127 46156 46185 46213 46235 46267 46296 46319 46347 46374 46398 #>  [757] 46419 46438 46457 46480 46499 46518 46534 46566 46590 46621 46654 46678 #>  [769] 46695 46718 46732 46757 46778 46795 46819 46848 46870 46893 46913 46951 #>  [781] 46976 46997 47015 47045 47063 47082 47112 47132 47155 47180 47197 47221 #>  [793] 47247 47274 47289 47308 47321 47335 47353 47369 47386 47401 47424 47440 #>  [805] 47458 47482 47499 47518 47539 47559 47576 47593 47608 47625 47645 47660 #>  [817] 47681 47698 47719 47742 47761 47776 47797 47817 47841 47860 47877 47897 #>  [829] 47907 47918 47939 47957 47981 47999 48014 48026 48042 48054 48069 48087 #>  [841] 48111 48124 48142 48156 48170 48187 48204 48225 48240 48255 48272 48283 #>  [853] 48297 48318 48329 48348 48362 48378 48391 48402 48416 48434 48452 48475 #>  [865] 48490 48503 48515 48530 48545 48559 48571 48581 48593 48604 48614 48632 #>  [877] 48649 48663 48679 48686 48697 48711 48716 48730 48747 48754 48772 48785 #>  [889] 48798 48812 48822 48829 48840 48853 48864 48873 48889 48900 48910 48918 #>  [901] 48930 48942 48950 48957 48965 48972 48982 48994 49006 49016 49028 49036 #>  [913] 49043 49048 49062 49069 49079 49087 49093 49101 49106 49113 49121 49130 #>  [925] 49135 49143 49147 49158 49164 49173 49182 49190 49196 49198 49203 49210 #>  [937] 49216 49228 49236 49243 49249 49254 49259 49263 49270 49274 49279 49285 #>  [949] 49289 49291 49297 49306 49312 49314 49320 49325 49331 49336 49338 49341 #>  [961] 49344 49347 49352 49361 49364 49367 49374 49381 49385 49391 49396 49398 #>  [973] 49401 49406 49408 49412 49414 49415 49416 49420 49422 49424 49428 49428 #>  [985] 49430 49432 49433 49434 49435 49439 49439 49440 49441 49442 49442 49443 #>  [997] 49443 49443 49443 49443 49443 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Correlated random graph\" #>  #> [[9]][[2]]$corr #> [1] 0.5 #>  #> [[9]][[2]]$p #> [1] 0.09982583 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cc1942ea0> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/sample_correlated_gnp_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a pair of correlated \\(G(n,p)\\) random graphs — sample_correlated_gnp_pair","title":"Sample a pair of correlated \\(G(n,p)\\) random graphs — sample_correlated_gnp_pair","text":"Sample new graph perturbing adjacency matrix given graph shuffling vertices.","code":""},{"path":"/reference/sample_correlated_gnp_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a pair of correlated \\(G(n,p)\\) random graphs — sample_correlated_gnp_pair","text":"","code":"sample_correlated_gnp_pair(n, corr, p, directed = FALSE, permutation = NULL)"},{"path":"/reference/sample_correlated_gnp_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a pair of correlated \\(G(n,p)\\) random graphs — sample_correlated_gnp_pair","text":"n Numeric scalar, number vertices sampled graphs. corr scalar unit interval, target Pearson correlation adjacency matrices original generated graph (adjacency matrix used vector). p numeric scalar, probability edge two vertices, must open (0,1) interval. directed Logical scalar, whether generate directed graphs. permutation numeric vector, permutation vector applied vertices first graph, get second graph.  NULL, vertices permuted.","code":""},{"path":"/reference/sample_correlated_gnp_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a pair of correlated \\(G(n,p)\\) random graphs — sample_correlated_gnp_pair","text":"list two igraph objects, named graph1 graph2, two graphs whose adjacency matrix entries correlated corr.","code":""},{"path":"/reference/sample_correlated_gnp_pair.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a pair of correlated \\(G(n,p)\\) random graphs — sample_correlated_gnp_pair","text":"Please see reference given .","code":""},{"path":"/reference/sample_correlated_gnp_pair.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample a pair of correlated \\(G(n,p)\\) random graphs — sample_correlated_gnp_pair","text":"Lyzinski, V., Fishkind, D. E., Priebe, C. E. (2013).  Seeded graph matching correlated Erdos-Renyi graphs. https://arxiv.org/abs/1304.7844","code":""},{"path":[]},{"path":"/reference/sample_correlated_gnp_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a pair of correlated \\(G(n,p)\\) random graphs — sample_correlated_gnp_pair","text":"","code":"gg <- sample_correlated_gnp_pair(   n = 10, corr = .8, p = .5,   directed = FALSE ) gg #> $graph1 #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 2 3 3 3 4 5 5 6 6 7 7 7 7 7 8 8 8 9 9 9 9 9 9 #>  #> [[4]] #>  [1] 1 0 1 2 2 0 4 1 3 0 1 3 4 5 0 5 7 0 1 4 5 7 8 #>  #> [[5]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 #>  #> [[6]] #>  [1]  1  5  9 14 17  0  2  7 10 18  3  4  8 11  6 12 19 13 15 20 16 21 22 #>  #> [[7]] #>  [1]  0  0  0  1  4  5  7  9 14 17 23 #>  #> [[8]] #>  [1]  0  5 10 12 14 17 20 20 22 23 23 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cc06e1628> #>  #> attr(,\"class\") #> [1] \"igraph\" #>  #> $graph2 #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 2 3 3 3 4 5 5 5 6 6 7 7 7 7 7 7 8 8 8 9 9 9 9 9 9 #>  #> [[4]] #>  [1] 1 0 1 2 2 0 3 4 1 3 0 1 2 3 4 5 0 5 6 0 1 4 5 7 8 #>  #> [[5]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #>  #> [[6]] #>  [1]  1  5 10 16 19  0  2  8 11 20  3  4 12  6  9 13  7 14 21 15 17 22 18 23 24 #>  #> [[7]] #>  [1]  0  0  0  1  4  5  8 10 16 19 25 #>  #> [[8]] #>  [1]  0  5 10 13 16 19 22 23 24 25 25 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cc06e1708> #>  #> attr(,\"class\") #> [1] \"igraph\" #>  cor(as.vector(gg[[1]][]), as.vector(gg[[2]][])) #> [1] 0.842701"},{"path":"/reference/sample_degseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random graphs with a given degree sequence — sample_degseq","title":"Generate random graphs with a given degree sequence — sample_degseq","text":"often useful create graph given vertex degrees. function creates graph randomized manner.","code":""},{"path":"/reference/sample_degseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random graphs with a given degree sequence — sample_degseq","text":"","code":"sample_degseq(   out.deg,   in.deg = NULL,   method = c(\"simple\", \"vl\", \"simple.no.multiple\", \"simple.no.multiple.uniform\") )  degseq(..., deterministic = FALSE)"},{"path":"/reference/sample_degseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random graphs with a given degree sequence — sample_degseq","text":".deg Numeric vector, sequence degrees (undirected graphs) -degrees (directed graphs). undirected graphs sum even. directed graphs sum sum .deg. .deg directed graph, -degree sequence. default NULL undirected graph created. method Character, method generating graph. Right now “simple”, “simple..multiple” “vl” methods implemented. ... Passed realize_degseq() ‘deterministic’ true, sample_degseq() otherwise. deterministic Whether construction deterministic","code":""},{"path":"/reference/sample_degseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random graphs with a given degree sequence — sample_degseq","text":"new graph object.","code":""},{"path":"/reference/sample_degseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random graphs with a given degree sequence — sample_degseq","text":"“simple” method connects -stubs edges (undirected graphs) -stubs -stubs (directed graphs) together. way loop edges also multiple edges may generated. method adequate one needs generate simple graphs given degree sequence. multiple loop edges can deleted, degree sequence distorted nothing ensure graphs sampled uniformly. “simple..multiple” method similar “simple”, tries avoid multiple loop edges restarts generation scratch gets stuck. guaranteed sample uniformly space possible graphs given sequence, relatively fast eventually succeed provided degree sequence graphical, upper bound number iterations. “simple..multiple.uniform” method variant “simple..multiple” added benefit sampling uniformly set possible simple graphs given degree sequence. Ensuring uniformity performance implications, though. “vl” method sophisticated generator. algorithm implementation done Fabien Viger Matthieu Latapy. generator always generates undirected, connected simple graphs, error pass .deg argument .  algorithm relies first creating initial (possibly unconnected) simple undirected graph given degree sequence (possible ). rewiring done make graph connected. Finally Monte-Carlo algorithm used randomize graph. “vl” samples undirected, connected simple graphs uniformly.","code":""},{"path":[]},{"path":"/reference/sample_degseq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate random graphs with a given degree sequence — sample_degseq","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_degseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random graphs with a given degree sequence — sample_degseq","text":"","code":"## The simple generator g <- sample_degseq(rep(2, 100)) degree(g) #>   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 is_simple(g) # sometimes TRUE, but can be FALSE #> [1] FALSE g2 <- sample_degseq(1:10, 10:1) degree(g2, mode = \"out\") #>  [1]  1  2  3  4  5  6  7  8  9 10 degree(g2, mode = \"in\") #>  [1] 10  9  8  7  6  5  4  3  2  1  ## The vl generator g3 <- sample_degseq(rep(2, 100), method = \"vl\") degree(g3) #>   [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 #>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 is_simple(g3) # always TRUE #> [1] TRUE  ## Exponential degree distribution ## Note, that we correct the degree sequence if its sum is odd degs <- sample(1:100, 100, replace = TRUE, prob = exp(-0.5 * (1:100))) if (sum(degs) %% 2 != 0) {   degs[1] <- degs[1] + 1 } g4 <- sample_degseq(degs, method = \"vl\") all(degree(g4) == degs) #> [1] TRUE  ## Power-law degree distribution ## Note, that we correct the degree sequence if its sum is odd degs <- sample(1:100, 100, replace = TRUE, prob = (1:100)^-2) if (sum(degs) %% 2 != 0) {   degs[1] <- degs[1] + 1 } g5 <- sample_degseq(degs, method = \"vl\") all(degree(g5) == degs) #> [1] TRUE"},{"path":"/reference/sample_dirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from a Dirichlet distribution — sample_dirichlet","title":"Sample from a Dirichlet distribution — sample_dirichlet","text":"Sample finite-dimensional vectors use latent position vectors random dot product graphs","code":""},{"path":"/reference/sample_dirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from a Dirichlet distribution — sample_dirichlet","text":"","code":"sample_dirichlet(n, alpha)"},{"path":"/reference/sample_dirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from a Dirichlet distribution — sample_dirichlet","text":"n Integer scalar, sample size. alpha Numeric vector, vector \\(\\alpha\\) parameter Dirichlet distribution.","code":""},{"path":"/reference/sample_dirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from a Dirichlet distribution — sample_dirichlet","text":"dim (length alpha vector sample_dirichlet()) times n matrix, whose columns sample vectors.","code":""},{"path":"/reference/sample_dirichlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from a Dirichlet distribution — sample_dirichlet","text":"sample_dirichlet() generates samples Dirichlet distribution given \\(\\alpha\\) parameter. sample drawn length(alpha)-1-simplex.","code":""},{"path":[]},{"path":"/reference/sample_dirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from a Dirichlet distribution — sample_dirichlet","text":"","code":"lpvs.dir <- sample_dirichlet(n = 20, alpha = rep(1, 10)) RDP.graph.2 <- sample_dot_product(lpvs.dir) colSums(lpvs.dir) #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"},{"path":"/reference/sample_dot_product.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random graphs according to the random dot product graph model — sample_dot_product","title":"Generate random graphs according to the random dot product graph model — sample_dot_product","text":"model, vertex represented latent position vector. Probability edge two vertices given dot product latent position vectors.","code":""},{"path":"/reference/sample_dot_product.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random graphs according to the random dot product graph model — sample_dot_product","text":"","code":"sample_dot_product(vecs, directed = FALSE)  dot_product(...)"},{"path":"/reference/sample_dot_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random graphs according to the random dot product graph model — sample_dot_product","text":"vecs numeric matrix latent position vector column. directed logical scalar, TRUE generated graph directed. ... Passed sample_dot_product().","code":""},{"path":"/reference/sample_dot_product.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random graphs according to the random dot product graph model — sample_dot_product","text":"igraph graph object generated random dot product graph.","code":""},{"path":"/reference/sample_dot_product.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random graphs according to the random dot product graph model — sample_dot_product","text":"dot product latent position vectors [0,1] interval, otherwise warning given. negative dot products, edges added; dot products larger one always add edge.","code":""},{"path":"/reference/sample_dot_product.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate random graphs according to the random dot product graph model — sample_dot_product","text":"Christine Leigh Myers Nickel: Random dot product graphs, model social networks. Dissertation, Johns Hopkins University, Maryland, USA, 2006.","code":""},{"path":[]},{"path":"/reference/sample_dot_product.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate random graphs according to the random dot product graph model — sample_dot_product","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_dot_product.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random graphs according to the random dot product graph model — sample_dot_product","text":"","code":"## A randomly generated  graph lpvs <- matrix(rnorm(200), 20, 10) lpvs <- apply(lpvs, 2, function(x) {   return(abs(x) / sqrt(sum(x^2))) }) g <- sample_dot_product(lpvs) g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 3 4 6 7 8 9 2 4 5 6 8 4 5 8 9 4 5 6 7 8 9 6 8 9 6 7 7 8 9 9 #>  #> [[4]] #>  [1] 0 0 0 0 0 0 0 1 1 1 1 1 2 2 2 2 3 3 3 3 3 3 4 4 4 5 5 6 6 7 8 #>  #> [[5]] #>  [1]  0  7  1  2  8 12 16  9 13 17  3 10 18 22 25  4 19 26 27  5 11 14 20 23 28 #> [26]  6 15 21 24 29 30 #>  #> [[6]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #> [26] 25 26 27 28 29 30 #>  #> [[7]] #>  [1]  0  0  1  2  3  7 10 15 19 25 31 #>  #> [[8]] #>  [1]  0  7 12 16 22 25 27 29 30 31 31 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cba39b5c8> #>  #> attr(,\"class\") #> [1] \"igraph\"  ## Sample latent vectors from the surface of the unit sphere lpvs2 <- sample_sphere_surface(dim = 5, n = 20) g2 <- sample_dot_product(lpvs2) g2 #> [[1]] #> [1] 20 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>   [1]  4  5  7  8  9 10 11 12 13 14 15 16 17 19  2  3  4  7  8  9 10 11 12 13 14 #>  [26] 15 16 17 18 19  3  4  5  6  7  9 10 11 12 13 14 15 18 19  4  5  6  7  8  9 #>  [51] 10 13 14 15 16 17 18 19  5  8  9 10 11 12 14 15 16 17  6  7  8 10 12 13 14 #>  [76] 16 17 18 19  8  9 10 11 12 14 17 18 19 10 11 12 13 14 15 16 17 18 19 11 12 #> [101] 13 14 15 16 17 18 19 11 13 16 19 11 12 14 15 16 18 13 14 15 17 19 14 18 16 #> [126] 18 15 16 17 18 16 18 17 18 19 19 #>  #> [[4]] #>   [1]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  1 #>  [26]  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  3 #>  [51]  3  3  3  3  3  3  3  3  4  4  4  4  4  4  4  4  4  4  5  5  5  5  5  5  5 #>  [76]  5  5  5  5  6  6  6  6  6  6  6  6  6  7  7  7  7  7  7  7  7  7  7  8  8 #> [101]  8  8  8  8  8  8  8  9  9  9  9 10 10 10 10 10 10 11 11 11 11 11 12 12 13 #> [126] 13 14 14 14 14 15 15 16 16 17 18 #>  #> [[5]] #>   [1]  14  15  30   0  16  31  44   1  32  45  58  33  46  68   2  17  34  47 #>  [19]  69   3  18  48  59  70  79   4  19  35  49  60  80   5  20  36  50  61 #>  [37]  71  81  88   6  21  37  62  82  89  98 107 111   7  22  38  63  72  83 #>  [55]  90  99 112   8  23  39  51  73  91 100 108 117   9  24  40  52  64  74 #>  [73]  84  92 101 113 118 122  10  25  41  53  65  93 102 114 119 126  11  26 #>  [91]  54  66  75  94 103 109 115 124 127 130  12  27  55  67  76  85  95 104 #> [109] 120 128 132  28  42  56  77  86  96 105 116 123 125 129 131 133  13  29 #> [127]  43  57  78  87  97 106 110 121 134 135 #>  #> [[6]] #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 #> [109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #> [127] 126 127 128 129 130 131 132 133 134 135 #>  #> [[7]] #>  [1]   0   0   0   1   3   7  11  14  19  25  31  39  48  57  66  78  88 100 111 #> [20] 124 136 #>  #> [[8]] #>  [1]   0  14  30  44  58  68  79  88  98 107 111 117 122 124 126 130 132 134 135 #> [20] 136 136 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cba2499e8> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/sample_fitness.html","id":null,"dir":"Reference","previous_headings":"","what":"Random graphs from vertex fitness scores — sample_fitness","title":"Random graphs from vertex fitness scores — sample_fitness","text":"function generates non-growing random graph edge probabilities proportional node fitness scores.","code":""},{"path":"/reference/sample_fitness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random graphs from vertex fitness scores — sample_fitness","text":"","code":"sample_fitness(   no.of.edges,   fitness.out,   fitness.in = NULL,   loops = FALSE,   multiple = FALSE )"},{"path":"/reference/sample_fitness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random graphs from vertex fitness scores — sample_fitness","text":"..edges number edges generated graph. fitness.numeric vector containing fitness vertex. directed graphs, specifies -fitness vertex. fitness.NULL (default), generated graph undirected. NULL, numeric vector specifies -fitness vertex. argument NULL, directed graph generated, otherwise undirected one. loops Logical scalar, whether allow loop edges graph. multiple Logical scalar, whether allow multiple edges graph.","code":""},{"path":"/reference/sample_fitness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random graphs from vertex fitness scores — sample_fitness","text":"igraph graph, directed undirected.","code":""},{"path":"/reference/sample_fitness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random graphs from vertex fitness scores — sample_fitness","text":"game generates directed undirected random graph probability edge vertices \\(\\) \\(j\\) depends fitness scores two vertices involved. undirected graphs, vertex single fitness score. directed graphs, vertex - -fitness, probability edge \\(\\) \\(j\\) depends -fitness vertex \\(\\) -fitness vertex \\(j\\). generation process goes follows. start \\(N\\) disconnected nodes (\\(N\\) given length fitness vector). randomly select two vertices \\(\\) \\(j\\), probabilities proportional fitnesses. (generated graph directed, \\(\\) selected according -fitnesses \\(j\\) selected according -fitnesses). vertices connected yet (multiple edges allowed), connect ; otherwise select new pair. repeated desired number links created. can shown expected degree vertex proportional fitness, although actual, observed degree . need generate graph exact degree sequence, consider sample_degseq() instead. model commonly used generate static scale-free networks. achieve , draw fitness scores desired power-law distribution. Alternatively, may use sample_fitness_pl() generates fitnesses given exponent.","code":""},{"path":"/reference/sample_fitness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random graphs from vertex fitness scores — sample_fitness","text":"Goh K-, Kahng B, Kim D: Universal behaviour load distribution scale-free networks. Phys Rev Lett 87(27):278701, 2001.","code":""},{"path":"/reference/sample_fitness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random graphs from vertex fitness scores — sample_fitness","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/sample_fitness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random graphs from vertex fitness scores — sample_fitness","text":"","code":"N <- 10000 g <- sample_fitness(5 * N, sample((1:50)^-2, N, replace = TRUE)) degree_distribution(g) #>   [1] 0.4576 0.1975 0.0880 0.0450 0.0296 0.0175 0.0161 0.0132 0.0085 0.0064 #>  [11] 0.0071 0.0059 0.0042 0.0055 0.0032 0.0036 0.0037 0.0028 0.0032 0.0028 #>  [21] 0.0017 0.0018 0.0021 0.0016 0.0021 0.0023 0.0017 0.0026 0.0014 0.0019 #>  [31] 0.0006 0.0014 0.0007 0.0011 0.0010 0.0005 0.0013 0.0003 0.0006 0.0014 #>  [41] 0.0014 0.0013 0.0007 0.0010 0.0009 0.0009 0.0007 0.0009 0.0012 0.0003 #>  [51] 0.0008 0.0004 0.0006 0.0006 0.0003 0.0004 0.0004 0.0002 0.0002 0.0003 #>  [61] 0.0001 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0002 #>  [71] 0.0001 0.0000 0.0000 0.0002 0.0001 0.0000 0.0001 0.0000 0.0001 0.0002 #>  [81] 0.0002 0.0000 0.0005 0.0004 0.0006 0.0003 0.0005 0.0008 0.0002 0.0004 #>  [91] 0.0008 0.0008 0.0014 0.0008 0.0013 0.0005 0.0008 0.0009 0.0008 0.0006 #> [101] 0.0006 0.0003 0.0006 0.0007 0.0004 0.0005 0.0005 0.0004 0.0003 0.0005 #> [111] 0.0001 0.0002 0.0000 0.0001 0.0000 0.0001 0.0001 0.0000 0.0000 0.0000 #> [121] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [131] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [141] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [151] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [161] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [171] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [181] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [191] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [201] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [211] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [221] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [231] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [241] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [251] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0001 0.0000 #> [261] 0.0000 0.0000 0.0002 0.0000 0.0000 0.0002 0.0000 0.0002 0.0003 0.0001 #> [271] 0.0001 0.0003 0.0003 0.0005 0.0004 0.0001 0.0004 0.0006 0.0001 0.0001 #> [281] 0.0003 0.0005 0.0002 0.0008 0.0003 0.0002 0.0009 0.0003 0.0005 0.0007 #> [291] 0.0006 0.0007 0.0005 0.0002 0.0010 0.0005 0.0004 0.0004 0.0004 0.0004 #> [301] 0.0008 0.0004 0.0006 0.0000 0.0003 0.0002 0.0001 0.0002 0.0001 0.0001 #> [311] 0.0001 0.0000 0.0001 0.0003 0.0001 0.0000 0.0002 0.0001 0.0000 0.0001 #> [321] 0.0002 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [331] 0.0000 0.0001 plot(degree_distribution(g, cumulative = TRUE), log = \"xy\")"},{"path":"/reference/sample_fitness_pl.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","title":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","text":"function generates non-growing random graph expected power-law degree distributions.","code":""},{"path":"/reference/sample_fitness_pl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","text":"","code":"sample_fitness_pl(   no.of.nodes,   no.of.edges,   exponent.out,   exponent.in = -1,   loops = FALSE,   multiple = FALSE,   finite.size.correction = TRUE )"},{"path":"/reference/sample_fitness_pl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","text":"..nodes number vertices generated graph. ..edges number edges generated graph. exponent.Numeric scalar, power law exponent degree distribution. directed graphs, specifies exponent -degree distribution. must greater equal 2. pass Inf , get back Erdos-Renyi random network. exponent.Numeric scalar. negative, generated graph undirected. greater equal 2, argument specifies exponent -degree distribution. non-negative less 2, error generated. loops Logical scalar, whether allow loop edges generated graph. multiple Logical scalar, whether allow multiple edges generated graph. finite.size.correction Logical scalar, whether use proposed finite size correction Cho et al., see references .","code":""},{"path":"/reference/sample_fitness_pl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","text":"igraph graph, directed undirected.","code":""},{"path":"/reference/sample_fitness_pl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","text":"game generates directed undirected random graph degrees vertices follow power-law distributions prescribed exponents. directed graphs, exponents - -degree distributions may specified separately. game simply uses sample_fitness() appropriately constructed fitness vectors. particular, fitness vertex \\(\\) \\(^{-alpha}\\), \\(alpha = 1/(gamma-1)\\) gamma exponent given arguments. remove correlations - -degrees case directed graphs, -fitness vector shuffled set sample_fitness() called. Note significant finite size effects may observed exponents smaller 3 original formulation game. function provides argument lets remove finite size effects assuming fitness vertex \\(\\) \\((+i_0-1)^{-alpha}\\) \\(i_0\\) constant chosen appropriately ensure maximum degree less square root number edges times average degree; see paper Chung Lu, Cho et al details.","code":""},{"path":"/reference/sample_fitness_pl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","text":"Goh K-, Kahng B, Kim D: Universal behaviour load distribution scale-free networks. Phys Rev Lett 87(27):278701, 2001. Chung F Lu L: Connected components random graph given degree sequences. Annals Combinatorics 6, 125-145, 2002. Cho YS, Kim JS, Park J, Kahng B, Kim D: Percolation transitions scale-free networks Achlioptas process. Phys Rev Lett 103:135702, 2009.","code":""},{"path":"/reference/sample_fitness_pl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/sample_fitness_pl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale-free random graphs, from vertex fitness scores — sample_fitness_pl","text":"","code":"g <- sample_fitness_pl(10000, 30000, 2.2, 2.3) plot(degree_distribution(g, cumulative = TRUE, mode = \"out\"), log = \"xy\")"},{"path":"/reference/sample_forestfire.html","id":null,"dir":"Reference","previous_headings":"","what":"Forest Fire Network Model — sample_forestfire","title":"Forest Fire Network Model — sample_forestfire","text":"growing network model, resembles forest fire spreads igniting trees close .","code":""},{"path":"/reference/sample_forestfire.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forest Fire Network Model — sample_forestfire","text":"","code":"sample_forestfire(nodes, fw.prob, bw.factor = 1, ambs = 1, directed = TRUE)"},{"path":"/reference/sample_forestfire.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forest Fire Network Model — sample_forestfire","text":"nodes number vertices graph. fw.prob forward burning probability, see details . bw.factor backward burning ratio. backward burning probability calculated bw.factor*fw.prob. ambs number ambassador vertices. directed Logical scalar, whether create directed graph.","code":""},{"path":"/reference/sample_forestfire.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forest Fire Network Model — sample_forestfire","text":"simple graph, possibly directed directed argument TRUE.","code":""},{"path":"/reference/sample_forestfire.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forest Fire Network Model — sample_forestfire","text":"forest fire model intends reproduce following network characteristics, observed real networks: Heavy-tailed -degree distribution. Heavy-tailed -degree distribution. Communities. Densification power-law. network densifying time, according power-law rule. Shrinking diameter. diameter network decreases time. network generated following way. One vertex added time. vertex connects (cites) ambs vertices already present network, chosen uniformly random. Now, cited vertex \\(v\\) following procedure: generate two random number, \\(x\\) \\(y\\), geometrically distributed means \\(p/(1-p)\\) \\(rp(1-rp)\\). (\\(p\\) fw.prob, \\(r\\) bw.factor.) new vertex cites \\(x\\) outgoing neighbors \\(y\\) incoming neighbors \\(v\\), yet cited new vertex. less \\(x\\) \\(y\\) vertices available cite . procedure applied newly cited vertices.","code":""},{"path":"/reference/sample_forestfire.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Forest Fire Network Model — sample_forestfire","text":"version model published paper incorrect sense generate kind graphs authors claim. corrected version available http://www.cs.cmu.edu/~jure/pubs/powergrowth-tkdd.pdf, implementation based .","code":""},{"path":"/reference/sample_forestfire.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Forest Fire Network Model — sample_forestfire","text":"Jure Leskovec, Jon Kleinberg Christos Faloutsos. Graphs time: densification laws, shrinking diameters possible explanations. KDD '05: Proceeding eleventh ACM SIGKDD international conference Knowledge discovery data mining, 177--187, 2005.","code":""},{"path":[]},{"path":"/reference/sample_forestfire.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Forest Fire Network Model — sample_forestfire","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_forestfire.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forest Fire Network Model — sample_forestfire","text":"","code":"g <- sample_forestfire(10000, fw.prob = 0.37, bw.factor = 0.32 / 0.37) dd1 <- degree_distribution(g, mode = \"in\") dd2 <- degree_distribution(g, mode = \"out\") plot(seq(along.with = dd1) - 1, dd1, log = \"xy\") #> Warning: 1 x value <= 0 omitted from logarithmic plot #> Warning: 489 y values <= 0 omitted from logarithmic plot points(seq(along.with = dd2) - 1, dd2, col = 2, pch = 2)"},{"path":"/reference/sample_gnm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","title":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","text":"model simple, every possible edge created constant probability.","code":""},{"path":"/reference/sample_gnm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","text":"","code":"sample_gnm(n, m, directed = FALSE, loops = FALSE)  gnm(...)"},{"path":"/reference/sample_gnm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","text":"n number vertices graph. m number edges graph. directed Logical, whether graph directed, defaults FALSE. loops Logical, whether add loop edges, defaults FALSE. ... Passed sample_gnm().","code":""},{"path":"/reference/sample_gnm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","text":"graph object.","code":""},{"path":"/reference/sample_gnm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","text":"graph ‘n’ vertices ‘m’ edges, ‘m’ edges chosen uniformly randomly set possible edges. set includes loop edges well loops parameter TRUE.","code":""},{"path":"/reference/sample_gnm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","text":"Erdos, P. Renyi, ., random graphs, Publicationes Mathematicae 6, 290--297 (1959).","code":""},{"path":[]},{"path":"/reference/sample_gnm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_gnm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random graphs according to the \\(G(n,m)\\) Erdős-Rényi model — sample_gnm","text":"","code":"g <- sample_gnm(1000, 1000) degree_distribution(g) #> [1] 0.113 0.284 0.280 0.184 0.102 0.028 0.008 0.000 0.001"},{"path":"/reference/sample_gnp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","title":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","text":"model simple, every possible edge created constant probability.","code":""},{"path":"/reference/sample_gnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","text":"","code":"sample_gnp(n, p, directed = FALSE, loops = FALSE)  gnp(...)"},{"path":"/reference/sample_gnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","text":"n number vertices graph. p probability drawing edge two arbitrary vertices (\\(G(n,p)\\) graph). directed Logical, whether graph directed, defaults FALSE. loops Logical, whether add loop edges, defaults FALSE. ... Passed sample_gnp().","code":""},{"path":"/reference/sample_gnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","text":"graph object.","code":""},{"path":"/reference/sample_gnp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","text":"graph ‘n’ vertices edge probability present graph ‘p’.","code":""},{"path":"/reference/sample_gnp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","text":"Erdos, P. Renyi, ., random graphs, Publicationes Mathematicae 6, 290--297 (1959).","code":""},{"path":[]},{"path":"/reference/sample_gnp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_gnp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random graphs according to the \\(G(n,p)\\) Erdős-Rényi model — sample_gnp","text":"","code":"g <- sample_gnp(1000, 1 / 1000) degree_distribution(g) #> [1] 0.375 0.363 0.183 0.064 0.012 0.003"},{"path":"/reference/sample_grg.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric random graphs — sample_grg","title":"Geometric random graphs — sample_grg","text":"Generate random graph based distance random point unit square","code":""},{"path":"/reference/sample_grg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric random graphs — sample_grg","text":"","code":"sample_grg(nodes, radius, torus = FALSE, coords = FALSE)  grg(...)"},{"path":"/reference/sample_grg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric random graphs — sample_grg","text":"nodes number vertices graph. radius radius within vertices connected edge. torus Logical constant, whether use torus instead square. coords Logical scalar, whether add positions vertices vertex attributes called ‘x’ ‘y’. ... Passed sample_grg().","code":""},{"path":"/reference/sample_grg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric random graphs — sample_grg","text":"graph object. coords TRUE vertex attributes ‘x’ ‘y’.","code":""},{"path":"/reference/sample_grg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometric random graphs — sample_grg","text":"First number points dropped unit square, points correspond vertices graph create. Two points connected undirected edge closer Euclidean norm given radius. torus argument TRUE unit area torus used instead square.","code":""},{"path":[]},{"path":"/reference/sample_grg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Geometric random graphs — sample_grg","text":"Gabor Csardi csardi.gabor@gmail.com, first version written Keith Briggs (http://keithbriggs.info/).","code":""},{"path":"/reference/sample_grg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometric random graphs — sample_grg","text":"","code":"g <- sample_grg(1000, 0.05, torus = FALSE) g2 <- sample_grg(1000, 0.05, torus = TRUE)"},{"path":"/reference/sample_growing.html","id":null,"dir":"Reference","previous_headings":"","what":"Growing random graph generation — sample_growing","title":"Growing random graph generation — sample_growing","text":"function creates random graph simulating stochastic evolution.","code":""},{"path":"/reference/sample_growing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growing random graph generation — sample_growing","text":"","code":"sample_growing(n, m = 1, directed = TRUE, citation = FALSE)  growing(...)"},{"path":"/reference/sample_growing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growing random graph generation — sample_growing","text":"n Numeric constant, number vertices graph. m Numeric constant, number edges added time step. directed Logical, whether create directed graph. citation Logical. TRUE citation graph created, ie. time step added edges originating new vertex. ... Passed sample_growing().","code":""},{"path":"/reference/sample_growing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growing random graph generation — sample_growing","text":"new graph object.","code":""},{"path":"/reference/sample_growing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Growing random graph generation — sample_growing","text":"discrete time step model, time step new vertex added graph m new edges created. citation FALSE edges connecting two uniformly randomly chosen vertices, otherwise edges connecting new vertex uniformly randomly chosen old vertices.","code":""},{"path":[]},{"path":"/reference/sample_growing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Growing random graph generation — sample_growing","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_growing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growing random graph generation — sample_growing","text":"","code":"g <- sample_growing(500, citation = FALSE) g2 <- sample_growing(500, citation = TRUE)"},{"path":"/reference/sample_hierarchical_sbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample the hierarchical stochastic block model — sample_hierarchical_sbm","title":"Sample the hierarchical stochastic block model — sample_hierarchical_sbm","text":"Sampling hierarchical stochastic block model networks.","code":""},{"path":"/reference/sample_hierarchical_sbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample the hierarchical stochastic block model — sample_hierarchical_sbm","text":"","code":"sample_hierarchical_sbm(n, m, rho, C, p)  hierarchical_sbm(...)"},{"path":"/reference/sample_hierarchical_sbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample the hierarchical stochastic block model — sample_hierarchical_sbm","text":"n Integer scalar, number vertices. m Integer scalar, number vertices per block. n / m must integer. Alternatively, integer vector block sizes, blocks equal sizes. rho Numeric vector, fraction vertices per cluster, within block. Must sum 1, rho * m must integer elements rho. Alternatively list rho vectors, one block, blocks. C square, symmetric numeric matrix, Bernoulli rates clusters within block. size must mach size rho vector. Alternatively, list square matrices, Bernoulli rates differ different blocks. p Numeric scalar, Bernoulli rate connections vertices different blocks. ... Passed sample_hierarchical_sbm().","code":""},{"path":"/reference/sample_hierarchical_sbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample the hierarchical stochastic block model — sample_hierarchical_sbm","text":"igraph graph.","code":""},{"path":"/reference/sample_hierarchical_sbm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample the hierarchical stochastic block model — sample_hierarchical_sbm","text":"function generates random graph according hierarchical stochastic block model.","code":""},{"path":[]},{"path":"/reference/sample_hierarchical_sbm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample the hierarchical stochastic block model — sample_hierarchical_sbm","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_hierarchical_sbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample the hierarchical stochastic block model — sample_hierarchical_sbm","text":"","code":"## Ten blocks with three clusters each C <- matrix(c(   1, 3 / 4, 0,   3 / 4, 0, 3 / 4,   0, 3 / 4, 3 / 4 ), nrow = 3) g <- sample_hierarchical_sbm(100, 10, rho = c(3, 3, 4) / 10, C = C, p = 1 / 20) g #> [[1]] #> [1] 100 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>   [1]  1  2  2  3  3  3  4  4  5  5  5  6  6  6  7  7  8  9  9  7  8  8  9 11 12 #>  [26] 12 14 14 15 15 16 16 17 17 17 18 18 19 19 17 18 19 19 19 21 22 22 23 24 24 #>  [51] 24 25 25 27 27 28 29 29 29 27 28 28 29 29 29 31 32 32 33 33 34 34 34 35 35 #>  [76] 36 36 36 37 37 38 38 38 39 39 37 38 38 39 39 41 42 42 43 43 44 45 45 45 46 #> [101] 46 47 47 48 48 48 49 49 47 48 49 49 49 51 52 52 53 53 53 54 54 54 55 55 56 #> [126] 57 57 57 58 58 58 59 59 59 57 58 59 59 61 62 62 63 63 63 64 65 65 65 66 66 #> [151] 67 67 67 68 68 69 69 69 67 68 68 69 69 69 71 72 72 73 73 73 74 74 75 75 76 #> [176] 76 76 77 77 78 78 78 79 79 77 78 79 79 81 82 82 83 83 83 84 84 84 85 86 87 #> [201] 87 87 88 88 88 89 88 88 89 89 89 91 92 92 93 93 94 94 95 95 96 96 96 97 97 #> [226] 98 98 99 99 97 99 10 11 13 15 15 17 19 22 29 31 32 33 34 35 39 41 41 42 43 #> [251] 46 49 52 57 57 58 59 61 62 64 64 65 66 68 68 69 70 71 76 77 78 79 79 87 87 #> [276] 88 89 91 93 96 97 20 20 22 24 33 34 35 36 36 38 39 41 42 42 43 45 46 51 56 #> [301] 59 59 67 72 75 77 78 79 79 80 81 84 86 86 87 87 88 88 91 93 93 95 95 31 37 #> [326] 37 39 41 44 48 52 53 53 54 58 59 59 61 63 64 66 67 68 69 69 74 74 74 80 82 #> [351] 84 86 88 94 95 95 97 98 43 44 49 51 56 60 62 67 67 68 69 70 70 71 72 74 76 #> [376] 80 80 82 87 87 88 91 91 94 98 98 53 55 55 62 65 66 68 69 72 72 73 76 81 84 #> [401] 84 87 90 91 92 92 92 95 60 61 63 64 65 66 66 67 68 70 71 74 74 78 81 82 83 #> [426] 83 84 84 84 86 89 91 92 95 98 99 99 72 74 74 76 77 77 77 78 79 79 83 83 84 #> [451] 87 87 89 90 90 94 97 99 92 92 96 97 97 98 90 91 92 93 94 95 96 #>  #> [[4]] #>   [1]  0  0  1  0  1  2  1  2  0  1  2  3  4  5  4  5  3  3  4  6  6  7  8 10 10 #>  [26] 11 10 12 10 11 14 15 13 14 15 13 14 14 15 16 16 16 17 18 20 20 21 21 20 21 #>  [51] 22 20 22 23 25 25 23 24 25 26 26 27 26 27 28 30 30 31 30 31 30 31 32 30 32 #>  [76] 33 34 35 33 35 33 34 35 34 35 36 36 37 37 38 40 40 41 40 42 41 40 41 42 43 #> [101] 45 43 44 43 44 45 44 45 46 46 46 47 48 50 50 51 50 51 52 50 51 52 50 52 53 #> [126] 53 54 55 53 54 55 53 54 55 56 57 56 58 60 60 61 60 61 62 62 60 61 62 63 64 #> [151] 63 64 65 64 65 63 64 65 66 66 67 66 67 68 70 70 71 70 71 72 70 72 70 71 73 #> [176] 74 75 73 74 73 74 75 74 75 76 77 77 78 80 80 81 80 81 82 80 81 82 82 85 83 #> [201] 84 85 83 84 85 83 86 87 86 87 88 90 90 91 91 92 90 92 90 92 93 94 95 93 94 #> [226] 93 94 94 95 96 98  2  3  2  1  7  6  8  0  2  1  1  2  4  8  7  1  3  2  6 #> [251]  6  0  3  6  9  6  2  6  9  3  8  8  7  2  7  7  4  4  1  9  4  2  7  3  5 #> [276]  2  9  1  9  6  8 10 11 13 10 17 17 17 15 18 14 13 19 10 19 12 17 10 14 15 #> [301] 12 13 19 15 12 14 14 11 14 12 19 14 12 15 12 18 15 16 17 12 18 10 18 28 24 #> [326] 26 22 27 29 20 25 20 27 21 22 22 27 23 22 24 28 29 27 25 26 24 26 27 22 26 #> [351] 28 23 29 21 20 28 28 29 33 36 31 31 37 34 37 36 37 33 36 34 39 32 34 37 38 #> [376] 33 39 33 35 37 36 32 39 30 32 34 49 41 49 43 43 44 48 40 47 49 44 49 42 42 #> [401] 49 49 44 45 46 47 48 48 57 54 53 58 52 54 55 53 53 53 50 51 54 57 50 58 56 #> [426] 57 56 58 59 52 53 56 58 57 57 53 56 67 66 69 64 63 65 68 68 66 69 63 68 61 #> [451] 62 67 60 60 64 64 60 67 71 73 78 73 78 71 85 89 81 83 81 87 85 #>  #> [[5]] #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  19  16 #>  [19]  20  21  17  18  22 231 232  23  24  25 233  26  27 234 235  28  29  30 #>  [37]  31 236  32  33  34  39  35  36  40 237  37  38  41  42  43 281 282  44 #>  [55] 238 283  45  46  47 284  48  49  50  51  52  53  54  59  55  60  61 239 #>  [73]  56  57  58  62  63  64 240 323  65 241  66  67 242 285  68  69 243 286 #>  [91]  70  71  72 244 287  73  74 288 289  75  76  77 324 325  78  79  85 290 #> [109]  80  81  82  86  87 245 291 326  83  84  88  89 246 247 292 327  90 248 #> [127] 293 294  91  92 249 295 358  93  94 328 359  95 296  96  97  98 250 297 #> [145]  99 100 101 102 108 329 103 104 105 109 251 360 106 107 110 111 112 298 #> [163] 361 113 252 330 114 115 331 332 386 116 117 118 333 119 120 121 387 388 #> [181] 122 123 299 362 124 253 254 125 126 127 134 255 334 128 129 130 135 256 #> [199] 300 301 335 336 131 132 133 136 137 363 408 257 337 409 138 258 364 389 #> [217] 139 140 338 410 141 142 143 259 260 339 411 144 261 390 412 145 146 147 #> [235] 262 340 391 413 414 148 149 302 341 365 366 415 150 151 152 158 263 264 #> [253] 342 367 392 416 153 154 159 160 265 343 344 368 393 155 156 157 161 162 #> [271] 163 266 369 370 417 267 371 418 164 303 372 394 395 437 165 166 396 167 #> [289] 168 169 345 346 347 373 419 420 438 439 170 171 304 172 173 268 374 397 #> [307] 440 174 175 176 269 305 441 442 443 177 178 184 270 306 421 444 179 180 #> [325] 181 185 271 272 307 308 445 446 182 183 186 187 309 348 375 376 310 398 #> [343] 422 188 349 377 423 189 190 424 425 447 448 191 192 193 311 350 399 400 #> [361] 426 427 428 449 194 195 196 197 312 313 351 429 198 273 274 314 315 378 #> [379] 379 401 450 451 199 200 201 275 316 317 352 380 202 203 204 206 207 276 #> [397] 430 452 205 208 209 210 402 453 454 464 277 318 381 382 403 431 465 211 #> [415] 404 405 406 432 458 459 466 212 213 278 319 320 467 214 215 353 383 455 #> [433] 468 216 217 321 322 354 355 407 433 469 218 219 279 460 470 220 221 222 #> [451] 280 356 456 461 462 223 224 229 357 384 385 434 463 225 226 435 436 457 #> [469] 227 228 230 #>  #> [[6]] #>   [1]   0   1   3   8 238 251   2   4   6   9 234 240 241 246 268 277   5   7 #>  [19]  10 231 233 239 242 248 256 263 271 275  11  16  17 232 247 252 259 273 #>  [37]  12  14  18 243 266 267 270  13  15 274  19  20 236 249 250 253 255 257 #>  [55] 279  21 235 245 262 264 265 272  22 237 244 260 261 280 254 258 269 276 #>  [73] 278  23  24  26  28 281 284 293 297 321  25  29 282 307  27 295 300 304 #>  [91] 309 312 314 319  32  35 283 291 301  30  33  36  37 290 298 305 306 308 #> [109] 311  31  34  38 288 299 303 313 316  39  40  41 317  42 285 286 287 296 #> [127] 318  43 289 315 320 322 292 294 302 310  44  45  48  51 329 331 354  46 #> [145]  47  49 333 353  50  52 326 334 335 338 348  53  56 337 351  57 324 339 #> [163] 345  54  55  58 330 343  59  60  62 325 344 346 349  61  63 327 332 336 #> [181] 342 347  64 323 340 350 355 356 328 341 352 357  65  66  68  70  73 383 #> [199]  67  69  71 360 361  72  74 371 381 384  75  78  80 358 367 375 377  76 #> [217]  81  83 363 369 372 385  77  79  82  84 378  85  86 359 365 368 380  87 #> [235]  88 362 364 366 373 379  89 374 370 376 382  90  91  93  96 393  92  95 #> [253]  97 387  94  98 398 399  99 101 103 389 390 102 104 106 391 396 402 100 #> [271] 105 107 403 108 109 110 404 111 394 405 112 392 406 407 386 388 395 397 #> [289] 400 401 113 114 116 119 122 418 422 115 117 120 419 118 121 123 412 429 #> [307] 124 125 128 131 410 415 416 417 430 435 126 129 132 409 413 420 127 130 #> [325] 133 414 134 136 424 426 431 436 135 408 421 425 433 434 137 411 423 427 #> [343] 432 428 138 139 141 145 452 453 456 140 142 146 449 143 144 147 450 148 #> [361] 150 155 441 447 149 151 153 156 440 454 455 152 154 157 442 158 159 161 #> [379] 438 445 160 162 437 451 457 163 443 444 448 439 446 164 165 167 170 172 #> [397] 166 168 173 458 463 169 171 174 177 179 459 461 175 178 180 182 176 181 #> [415] 183 184 185 186 187 460 462 188 189 191 194 190 192 195 466 468 193 196 #> [433] 197 199 202 205 467 200 203 198 201 204 464 470 206 208 207 209 469 210 #> [451] 465 211 212 216 218 213 214 215 217 219 220 223 225 221 224 226 227 222 #> [469] 228 229 230 #>  #> [[7]] #>   [1]   0   0   1   3   6   8  11  14  17  20  23  24  26  28  29  31  35  37 #>  [19]  42  45  51  53  54  58  59  63  65  65  68  71  78  78  81  84  88  93 #>  [37]  97 102 107 113 120 120 125 130 135 138 142 146 149 154 161 161 164 168 #>  [55] 174 178 182 185 191 197 207 209 213 218 223 228 234 241 250 260 271 275 #>  [73] 279 286 290 300 303 310 318 326 336 340 344 349 356 367 368 373 385 395 #>  [91] 402 406 414 423 429 435 444 450 458 465 471 #>  #> [[8]] #>   [1]   0   6  16  28  36  43  46  55  62  68  73  82  86  94  99 109 117 121 #>  [19] 127 132 136 143 148 155 159 163 168 175 182 188 192 198 203 208 215 222 #>  [37] 227 233 240 242 245 250 254 258 263 269 273 277 280 284 290 297 301 306 #>  [55] 316 322 326 332 338 343 344 351 355 359 364 371 375 380 385 389 391 396 #>  [73] 401 403 408 412 415 416 418 421 421 425 430 433 437 439 444 446 449 450 #>  [91] 451 455 457 460 463 467 469 470 470 471 471 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Hierarchical stochastic block model\" #>  #> [[9]][[2]]$m #> [1] 10 #>  #> [[9]][[2]]$rho #> [1] 0.3 0.3 0.4 #>  #> [[9]][[2]]$C #>      [,1] [,2] [,3] #> [1,] 1.00 0.75 0.00 #> [2,] 0.75 0.00 0.75 #> [3,] 0.00 0.75 0.75 #>  #> [[9]][[2]]$p #> [1] 0.05 #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cc1295400> #>  #> attr(,\"class\") #> [1] \"igraph\" if (require(Matrix)) {   image(g[]) }"},{"path":"/reference/sample_hrg.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from a hierarchical random graph model — sample_hrg","title":"Sample from a hierarchical random graph model — sample_hrg","text":"sample_hrg() samples graph given hierarchical random graph model.","code":""},{"path":"/reference/sample_hrg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from a hierarchical random graph model — sample_hrg","text":"","code":"sample_hrg(hrg)"},{"path":"/reference/sample_hrg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from a hierarchical random graph model — sample_hrg","text":"hrg hierarchical random graph model.","code":""},{"path":"/reference/sample_hrg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from a hierarchical random graph model — sample_hrg","text":"igraph graph.","code":""},{"path":[]},{"path":"/reference/sample_islands.html","id":null,"dir":"Reference","previous_headings":"","what":"A graph with subgraphs that are each a random graph. — sample_islands","title":"A graph with subgraphs that are each a random graph. — sample_islands","text":"Create number Erdos-Renyi random graphs identical parameters, connect specified number edges.","code":""},{"path":"/reference/sample_islands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A graph with subgraphs that are each a random graph. — sample_islands","text":"","code":"sample_islands(islands.n, islands.size, islands.pin, n.inter)"},{"path":"/reference/sample_islands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A graph with subgraphs that are each a random graph. — sample_islands","text":"islands.n number islands graph. islands.size size islands graph. islands.pin probability create possible edge island. n.inter number edges create two islands.","code":""},{"path":"/reference/sample_islands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A graph with subgraphs that are each a random graph. — sample_islands","text":"igraph graph.","code":""},{"path":"/reference/sample_islands.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A graph with subgraphs that are each a random graph. — sample_islands","text":"","code":"g <- sample_islands(3, 10, 5/10, 1) oc <- cluster_optimal(g) oc"},{"path":[]},{"path":"/reference/sample_islands.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A graph with subgraphs that are each a random graph. — sample_islands","text":"Samuel Thiriot","code":""},{"path":"/reference/sample_k_regular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a random regular graph — sample_k_regular","title":"Create a random regular graph — sample_k_regular","text":"Generate random graph vertex degree.","code":""},{"path":"/reference/sample_k_regular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a random regular graph — sample_k_regular","text":"","code":"sample_k_regular(no.of.nodes, k, directed = FALSE, multiple = FALSE)"},{"path":"/reference/sample_k_regular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a random regular graph — sample_k_regular","text":"..nodes Integer scalar, number vertices generated graph. k Integer scalar, degree vertex graph, -degree -degree directed graph. directed Logical scalar, whether create directed graph. multiple Logical scalar, whether multiple edges allowed.","code":""},{"path":"/reference/sample_k_regular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a random regular graph — sample_k_regular","text":"igraph graph.","code":""},{"path":"/reference/sample_k_regular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a random regular graph — sample_k_regular","text":"game generates directed undirected random graph degrees vertices equal predefined constant k. undirected graphs, least one k number vertices must even. game simply uses sample_degseq() appropriately constructed degree sequences.","code":""},{"path":[]},{"path":"/reference/sample_k_regular.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a random regular graph — sample_k_regular","text":"Tamas Nepusz ntamas@gmail.com","code":""},{"path":"/reference/sample_k_regular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a random regular graph — sample_k_regular","text":"","code":"## A simple ring ring <- sample_k_regular(10, 2) plot(ring) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ## k-regular graphs on 10 vertices, with k=1:9 k10 <- lapply(1:9, sample_k_regular, no.of.nodes = 10)  layout(matrix(1:9, nrow = 3, byrow = TRUE)) sapply(k10, plot, vertex.label = NA) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/sample_last_cit.html","id":null,"dir":"Reference","previous_headings":"","what":"Random citation graphs — sample_last_cit","title":"Random citation graphs — sample_last_cit","text":"sample_last_cit() creates graph, vertices age, gain new connections based long ago last citation happened.","code":""},{"path":"/reference/sample_last_cit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random citation graphs — sample_last_cit","text":"","code":"sample_last_cit(   n,   edges = 1,   agebins = n/7100,   pref = (1:(agebins + 1))^-3,   directed = TRUE )  last_cit(...)  sample_cit_types(   n,   edges = 1,   types = rep(0, n),   pref = rep(1, length(types)),   directed = TRUE,   attr = TRUE )  cit_types(...)  sample_cit_cit_types(   n,   edges = 1,   types = rep(0, n),   pref = matrix(1, nrow = length(types), ncol = length(types)),   directed = TRUE,   attr = TRUE )  cit_cit_types(...)"},{"path":"/reference/sample_last_cit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random citation graphs — sample_last_cit","text":"n Number vertices. edges Number edges per step. agebins Number aging bins. pref Vector (sample_last_cit() sample_cit_types() matrix (sample_cit_cit_types()) giving (unnormalized) citation probabilities different vertex types. directed Logical scalar, whether generate directed networks. ... Passed actual constructor. types Vector length ‘n’, types vertices. Types numbered zero. attr Logical scalar, whether add vertex types generated graph vertex attribute called ‘type’.","code":""},{"path":"/reference/sample_last_cit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random citation graphs — sample_last_cit","text":"new graph.","code":""},{"path":"/reference/sample_last_cit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random citation graphs — sample_last_cit","text":"sample_cit_cit_types() stochastic block model graph growing. sample_cit_types() similarly growing stochastic block model, probability edge depends (potentially) cited vertex .","code":""},{"path":[]},{"path":"/reference/sample_last_cit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random citation graphs — sample_last_cit","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_motifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph motifs — sample_motifs","title":"Graph motifs — sample_motifs","text":"Graph motifs small connected subgraphs well-defined structure.  functions search graph various motifs.","code":""},{"path":"/reference/sample_motifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph motifs — sample_motifs","text":"","code":"sample_motifs(   graph,   size = 3,   cut.prob = rep(0, size),   sample.size = vcount(graph)/10,   sample = NULL )"},{"path":"/reference/sample_motifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph motifs — sample_motifs","text":"graph Graph object, input graph. size size motif, currently size 3 4 supported directed graphs sizes 3-6 undirected graphs. cut.prob Numeric vector giving probabilities search graph cut certain level. length size motif (size argument). default cuts made. sample.size number vertices use starting point finding motifs. used sample argument NULL. sample NULL specifies vertices use starting point finding motifs.","code":""},{"path":"/reference/sample_motifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph motifs — sample_motifs","text":"numeric scalar, estimate total number motifs graph.","code":""},{"path":"/reference/sample_motifs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph motifs — sample_motifs","text":"sample_motifs() estimates total number motifs given size graph based sample.","code":""},{"path":[]},{"path":"/reference/sample_motifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph motifs — sample_motifs","text":"","code":"g <- barabasi.game(100) motifs(g, 3) #>  [1]  NA  NA 420  NA  73   0   0   0   0   0   0   0   0   0   0   0 count_motifs(g, 3) #> [1] 493 sample_motifs(g, 3) #> [1] 170"},{"path":"/reference/sample_pa.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random graphs using preferential attachment — sample_pa","title":"Generate random graphs using preferential attachment — sample_pa","text":"Preferential attachment family simple stochastic algorithms building graph. Variants include Barabási-Abert model Price model.","code":""},{"path":"/reference/sample_pa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random graphs using preferential attachment — sample_pa","text":"","code":"sample_pa(   n,   power = 1,   m = NULL,   out.dist = NULL,   out.seq = NULL,   out.pref = FALSE,   zero.appeal = 1,   directed = TRUE,   algorithm = c(\"psumtree\", \"psumtree-multiple\", \"bag\"),   start.graph = NULL )  pa(...)"},{"path":"/reference/sample_pa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random graphs using preferential attachment — sample_pa","text":"n Number vertices. power power preferential attachment, default one, ie. linear preferential attachment. m Numeric constant, number edges add time step argument used .dist .seq omitted NULL. .dist Numeric vector, distribution number edges add time step. argument used .seq argument omitted NULL. .seq Numeric vector giving number edges add time step. first element ignored edges added first time step. .pref Logical, true total degree used calculating citation probability, otherwise -degree used. zero.appeal ‘attractiveness’ vertices adjacent edges. See details . directed Whether create directed graph. algorithm algorithm use graph generation. psumtree uses partial prefix-sum tree generate graph, algorithm can handle power zero.appeal values never generates multiple edges.  psumtree-multiple also uses partial prefix-sum tree, generation multiple edges allowed. 0.6 version igraph used algorithm power one, zero.appeal one.  bag algorithm previously (version 0.6) used power one zero.appeal one well. works putting ids vertices bag (multiset, really), exactly many times (-)degree, plus . required number cited vertices drawn bag, replacement. method might generate multiple edges. works power zero.appeal equal one. start.graph NULL igraph graph. graph, supplied graph used starting graph preferential attachment algorithm. graph least one vertex. graph supplied .seq argument NULL, contain degrees new vertices , ones start.graph. ... Passed sample_pa().","code":""},{"path":"/reference/sample_pa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random graphs using preferential attachment — sample_pa","text":"graph object.","code":""},{"path":"/reference/sample_pa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random graphs using preferential attachment — sample_pa","text":"simple stochastic algorithm generate graph. discrete time step model time step single vertex added. start single vertex edges first time step. add one vertex time step new vertex initiates edges old vertices. probability old vertex chosen given $$P[] \\sim k_i^\\alpha+$$ \\(k_i\\) -degree vertex \\(\\) current time step (precisely number adjacent edges \\(\\) initiated \\(\\) ) \\(\\alpha\\) \\(\\) parameters given power zero.appeal arguments. number edges initiated time step given m, .dist .seq arguments. .seq given NULL gives number edges add vector, first element ignored, second number edges add second time step . .seq given null .dist given NULL used discrete distribution generate number edges time step. first element probability edges added, second probability one edge added, etc. (.dist need sum one, normalized automatically.) .dist contain non-negative numbers east one element positive. .seq .dist omitted NULL m used, positive integer constant m edges added time step. sample_pa() generates directed graph default, set directed FALSE generate undirected graph. Note even undirected graph generated \\(k_i\\) denotes number adjacent edges initiated vertex total (- + -) degree vertex, unless .pref argument set TRUE.","code":""},{"path":"/reference/sample_pa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate random graphs using preferential attachment — sample_pa","text":"Barabasi, .-L. Albert R. 1999. Emergence scaling random networks Science, 286 509--512. de Solla Price, D. J. 1965. Networks Scientific Papers Science, 149 510--515.","code":""},{"path":[]},{"path":"/reference/sample_pa.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate random graphs using preferential attachment — sample_pa","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_pa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random graphs using preferential attachment — sample_pa","text":"","code":"g <- sample_pa(10000) degree_distribution(g) #>   [1] 0.0000 0.6561 0.1767 0.0692 0.0337 0.0165 0.0105 0.0094 0.0063 0.0029 #>  [11] 0.0038 0.0016 0.0014 0.0017 0.0017 0.0005 0.0010 0.0008 0.0010 0.0006 #>  [21] 0.0003 0.0006 0.0003 0.0002 0.0004 0.0003 0.0001 0.0001 0.0002 0.0000 #>  [31] 0.0002 0.0000 0.0001 0.0000 0.0002 0.0001 0.0001 0.0000 0.0000 0.0000 #>  [41] 0.0000 0.0002 0.0001 0.0000 0.0000 0.0001 0.0000 0.0000 0.0001 0.0000 #>  [51] 0.0000 0.0000 0.0001 0.0000 0.0000 0.0001 0.0000 0.0001 0.0001 0.0000 #>  [61] 0.0000 0.0001 0.0000 0.0000 0.0000 0.0000 0.0000 0.0001 0.0000 0.0000 #>  [71] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #>  [81] 0.0000 0.0001 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0001 0.0000 #>  [91] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [101] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [111] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [121] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [131] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [141] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [151] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [161] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [171] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [181] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [191] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 #> [201] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0001"},{"path":"/reference/sample_pa_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an evolving random graph with preferential attachment and aging — sample_pa_age","title":"Generate an evolving random graph with preferential attachment and aging — sample_pa_age","text":"function creates random graph simulating evolution. time new vertex added creates number links old vertices probability old vertex cited depends -degree (preferential attachment) age.","code":""},{"path":"/reference/sample_pa_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an evolving random graph with preferential attachment and aging — sample_pa_age","text":"","code":"sample_pa_age(   n,   pa.exp,   aging.exp,   m = NULL,   aging.bin = 300,   out.dist = NULL,   out.seq = NULL,   out.pref = FALSE,   directed = TRUE,   zero.deg.appeal = 1,   zero.age.appeal = 0,   deg.coef = 1,   age.coef = 1,   time.window = NULL )  pa_age(...)"},{"path":"/reference/sample_pa_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an evolving random graph with preferential attachment and aging — sample_pa_age","text":"n number vertices graph. pa.exp preferential attachment exponent, see details . aging.exp exponent aging, usually non-positive number, see details . m number edges new vertex creates (except first vertex). argument used .dist .seq arguments NULL. aging.bin number bins use measuring age vertices, see details . .dist discrete distribution generate number edges add time step .seq NULL. See details . .seq number edges add time step, vector containing many elements number vertices. See details . .pref Logical constant, whether include edges initiated vertex basis preferential attachment. See details . directed Logical constant, whether generate directed graph. See details . zero.deg.appeal degree-dependent part ‘attractiveness’ vertices adjacent edges. See also details . zero.age.appeal age-dependent part ‘attrativeness’ vertices age zero. usually zero, see details . deg.coef coefficient degree-dependent ‘attractiveness’. See details . age.coef coefficient age-dependent part ‘attractiveness’. See details . time.window Integer constant, NULL adjacent added last time.windows time steps counted basis preferential attachment. See also details . ... Passed sample_pa_age().","code":""},{"path":"/reference/sample_pa_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an evolving random graph with preferential attachment and aging — sample_pa_age","text":"new graph.","code":""},{"path":"/reference/sample_pa_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an evolving random graph with preferential attachment and aging — sample_pa_age","text":"discrete time step model growing graph. start network containing single vertex (edges) first time step. time step (starting second) new vertex added initiates number edges old vertices network. probability old vertex connected proportional $$P[] \\sim (c\\cdot k_i^\\alpha+)(d\\cdot l_i^\\beta+b)$$. \\(k_i\\) -degree vertex \\(\\) current time step \\(l_i\\) age vertex \\(\\). age simply defined number time steps passed since vertex added, extension vertex age divided aging.bin bins. \\(c\\), \\(\\alpha\\), \\(\\), \\(d\\), \\(\\beta\\) \\(b\\) parameters can set via following arguments: pa.exp (\\(\\alpha\\), mandatory argument), aging.exp (\\(\\beta\\), mandatory argument), zero.deg.appeal (\\(\\), optional, default value 1), zero.age.appeal (\\(b\\), optional, default 0), deg.coef (\\(c\\), optional, default 1), age.coef (\\(d\\), optional, default 1). number edges initiated time step governed m, .seq .pref parameters. .seq given interpreted vector giving number edges added time step. length n (number vertices), first element ignored. .seq given (NULL) .dist given used discrete probability distribution generate number edges. first element gives probability zero edges added time step, second element probability one edge added, etc. (.seq contain non-negative numbers, sum 1, normalized sum 1. behavior similar prob argument sample command.) default directed graph generated, directed set FALSE undirected created. Even undirected graph generated \\(k_i\\) denotes adjacent edges initiated vertex except .pref set TRUE. time.window argument given (NULL) \\(k_i\\) means adjacent edges added previous time.window time steps. function might generate graphs multiple edges.","code":""},{"path":[]},{"path":"/reference/sample_pa_age.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate an evolving random graph with preferential attachment and aging — sample_pa_age","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_pa_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an evolving random graph with preferential attachment and aging — sample_pa_age","text":"","code":"# The maximum degree for graph with different aging exponents g1 <- sample_pa_age(10000, pa.exp = 1, aging.exp = 0, aging.bin = 1000) g2 <- sample_pa_age(10000, pa.exp = 1, aging.exp = -1, aging.bin = 1000) g3 <- sample_pa_age(10000, pa.exp = 1, aging.exp = -3, aging.bin = 1000) max(degree(g1)) #> [1] 166 max(degree(g2)) #> [1] 22 max(degree(g3)) #> [1] 10"},{"path":"/reference/sample_pref.html","id":null,"dir":"Reference","previous_headings":"","what":"Trait-based random generation — sample_pref","title":"Trait-based random generation — sample_pref","text":"Generation random graphs based different vertex types.","code":""},{"path":"/reference/sample_pref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trait-based random generation — sample_pref","text":"","code":"sample_pref(   nodes,   types,   type.dist = rep(1, types),   fixed.sizes = FALSE,   pref.matrix = matrix(1, types, types),   directed = FALSE,   loops = FALSE )  pref(...)  sample_asym_pref(   nodes,   types,   type.dist.matrix = matrix(1, types, types),   pref.matrix = matrix(1, types, types),   loops = FALSE )  asym_pref(...)"},{"path":"/reference/sample_pref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trait-based random generation — sample_pref","text":"nodes number vertices graphs. types number different vertex types. type.dist distribution vertex types, numeric vector length ‘types’ containing non-negative numbers. vector normed obtain probabilities. fixed.sizes Fix number vertices given vertex type label. type.dist argument gives group sizes (.e. number vertices different labels) case. pref.matrix square matrix giving preferences vertex types. matrix ‘types’ rows columns. directed Logical constant, whether create directed graph. loops Logical constant, whether self-loops allowed graph. ... Passed constructor, sample_pref() sample_asym_pref(). type.dist.matrix joint distribution - -vertex types.","code":""},{"path":"/reference/sample_pref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trait-based random generation — sample_pref","text":"igraph graph.","code":""},{"path":"/reference/sample_pref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trait-based random generation — sample_pref","text":"models generate random graphs given vertex types. sample_pref() probability two vertices connected depends type given ‘pref.matrix’ argument. matrix symmetric make sense checked. distribution different vertex types given ‘type.dist’ vector. sample_asym_pref() vertex -type -type directed graph created. probability directed edge realized vertex given -type vertex given -type given ‘pref.matrix’ argument, can asymmetric. joint distribution - -types given ‘type.dist.matrix’ argument. types generated vertices can retrieved type vertex attribute sample_pref() intype outtype vertex attribute sample_asym_pref().","code":""},{"path":[]},{"path":"/reference/sample_pref.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trait-based random generation — sample_pref","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com R interface","code":""},{"path":"/reference/sample_pref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trait-based random generation — sample_pref","text":"","code":"pf <- matrix(c(1, 0, 0, 1), nrow = 2) g <- sample_pref(20, 2, pref.matrix = pf) if (FALSE) { tkplot(g, layout = layout_with_fr) }  pf <- matrix(c(0, 1, 0, 0), nrow = 2) g <- sample_asym_pref(20, 2, pref.matrix = pf) if (FALSE) { tkplot(g, layout = layout_in_circle) }"},{"path":"/reference/sample_sbm.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample stochastic block model — sample_sbm","title":"Sample stochastic block model — sample_sbm","text":"Sampling stochastic block model networks","code":""},{"path":"/reference/sample_sbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample stochastic block model — sample_sbm","text":"","code":"sample_sbm(n, pref.matrix, block.sizes, directed = FALSE, loops = FALSE)  sbm(...)"},{"path":"/reference/sample_sbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample stochastic block model — sample_sbm","text":"n Number vertices graph. pref.matrix matrix giving Bernoulli rates.  \\(K\\times K\\) matrix, \\(K\\) number groups. probability creating edge vertices groups \\(\\) \\(j\\) given element \\((,j)\\). undirected graphs, matrix must symmetric. block.sizes Numeric vector giving number vertices group. sum vector must match number vertices. directed Logical scalar, whether generate directed graph. loops Logical scalar, whether self-loops allowed graph. ... Passed sample_sbm().","code":""},{"path":"/reference/sample_sbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample stochastic block model — sample_sbm","text":"igraph graph.","code":""},{"path":"/reference/sample_sbm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample stochastic block model — sample_sbm","text":"function samples graphs stochastic block model (equivalent ) Bernoulli trials potential edge probabilities given Bernoulli rate matrix, pref.matrix. order vertices generated graph corresponds block.sizes argument.","code":""},{"path":"/reference/sample_sbm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample stochastic block model — sample_sbm","text":"Faust, K., & Wasserman, S. (1992a). Blockmodels: Interpretation evaluation. Social Networks, 14, 5--61.","code":""},{"path":[]},{"path":"/reference/sample_sbm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample stochastic block model — sample_sbm","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_sbm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample stochastic block model — sample_sbm","text":"","code":"## Two groups with not only few connection between groups pm <- cbind(c(.1, .001), c(.001, .05)) g <- sample_sbm(1000, pref.matrix = pm, block.sizes = c(300, 700)) g #> [[1]] #> [1] 1000 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>     [1]   2   5   5   8   8   9   9  11  12  13  13  14  15  16  16  16  16  16 #>    [19]  19  19  21  21  22  22  22  22  23  23  24  24  24  25  26  27  28  28 #>    [37]  29  29  30  30  31  32  32  32  32  33  33  33  33  33  34  34  34  34 #>    [55]  35  35  35  35  35  35  35  35  36  36  36  36  38  38  38  38  39  39 #>    [73]  40  41  41  41  41  42  42  42  42  42  43  43  43  43  43  43  44  44 #>    [91]  44  44  44  45  45  45  46  46  46  46  46  47  47  47  47  47  47  47 #>   [109]  47  47  48  48  49  49  49  49  49  50  50  50  50  51  51  51  51  51 #>   [127]  51  52  53  53  53  53  53  53  53  53  54  54  54  54  54  54  54  54 #>   [145]  54  54  55  55  55  55  55  55  55  56  56  56  56  56  56  57  57  57 #>   [163]  57  58  58  58  58  58  59  59  59  59  59  60  60  60  60  60  60  60 #>   [181]  60  61  61  62  62  62  62  62  62  62  62  62  62  62  62  63  63  64 #>   [199]  64  64  65  65  65  65  66  66  66  66  66  66  66  67  67  67  67  67 #>   [217]  67  67  67  68  68  68  68  68  68  68  69  69  69  69  69  70  70  70 #>   [235]  70  70  70  71  71  71  71  71  71  71  72  72  72  72  72  72  72  72 #>   [253]  73  73  73  73  74  75  75  75  75  75  75  75  75  76  76  76  76  76 #>   [271]  76  76  76  77  77  77  77  77  78  78  78  78  79  79  79  79  80  80 #>   [289]  80  80  80  80  80  80  80  80  80  81  81  81  81  81  81  81  82  82 #>   [307]  82  82  82  82  82  82  82  82  83  83  83  83  83  83  83  83  83  83 #>   [325]  84  84  84  84  84  84  84  84  84  85  85  85  85  85  85  85  85  85 #>   [343]  86  86  86  86  86  86  86  86  87  87  87  87  87  87  87  87  87  87 #>   [361]  87  87  87  87  87  88  88  88  88  88  88  88  88  88  89  89  89  89 #>   [379]  89  89  89  89  90  90  90  90  90  90  90  90  91  91  91  91  91  91 #>   [397]  91  91  92  92  92  92  92  92  92  92  92  92  92  92  92  92  92  93 #>   [415]  93  93  93  93  93  93  93  93  93  94  94  94  94  94  94  94  94  94 #>   [433]  95  95  95  95  95  95  95  95  95  95  96  96  96  96  96  96  96  96 #>   [451]  96  97  97  97  97  97  97  97  98  98  98  98  98  98  98  98  98  98 #>   [469]  98  99  99  99  99 100 100 100 100 100 100 100 100 100 100 101 101 101 #>   [487] 101 101 101 101 101 102 102 102 102 102 102 102 103 103 103 103 103 103 #>   [505] 104 104 104 104 104 104 104 104 104 105 105 105 105 105 106 106 106 106 #>   [523] 106 106 106 106 106 106 106 107 107 107 107 107 107 107 107 107 107 107 #>   [541] 107 108 108 108 108 108 108 108 108 108 108 108 109 109 109 109 109 109 #>   [559] 109 109 110 110 110 110 110 110 110 110 110 110 110 110 111 111 111 111 #>   [577] 111 111 111 111 111 111 112 112 112 112 112 112 112 113 113 113 113 113 #>   [595] 113 113 113 113 113 113 113 113 113 113 113 113 113 113 114 114 114 114 #>   [613] 114 114 114 114 114 114 115 115 115 115 115 115 115 115 115 115 115 115 #>   [631] 115 115 116 116 116 116 116 116 116 116 116 116 116 116 116 116 116 116 #>   [649] 116 116 117 117 117 117 117 117 117 117 117 117 118 118 118 118 118 118 #>   [667] 118 118 118 118 118 118 118 118 118 119 119 119 119 119 119 119 120 120 #>   [685] 120 120 120 120 120 120 120 120 120 121 121 121 121 121 121 121 121 121 #>   [703] 121 121 121 121 121 121 122 122 122 122 122 122 122 122 122 122 122 122 #>   [721] 122 123 123 123 123 123 123 123 123 123 123 123 123 124 124 124 124 124 #>   [739] 124 124 124 124 124 124 124 124 124 124 124 124 124 124 124 124 124 125 #>   [757] 125 125 125 125 125 125 125 125 125 125 126 126 126 126 126 126 126 126 #>   [775] 126 126 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 127 #>   [793] 128 128 128 128 128 128 128 128 128 128 128 128 128 129 129 129 129 129 #>   [811] 129 129 129 129 129 129 129 129 129 129 130 130 130 130 130 130 130 130 #>   [829] 130 130 130 131 131 131 131 131 131 131 131 131 131 131 131 131 131 131 #>   [847] 131 131 131 131 131 132 132 132 132 132 132 132 132 132 132 132 132 132 #>   [865] 133 133 133 133 133 133 133 133 133 133 133 133 133 133 134 134 134 134 #>   [883] 134 134 134 134 134 134 134 134 134 135 135 135 135 135 135 135 135 135 #>   [901] 135 135 135 135 136 136 136 136 136 136 136 136 136 136 136 136 136 136 #>   [919] 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 137 #>   [937] 137 137 137 137 138 138 138 138 138 138 138 138 138 138 138 138 138 138 #>   [955] 138 138 138 139 139 139 139 139 139 139 139 139 139 139 140 140 140 140 #>   [973] 140 140 140 140 140 140 140 140 140 140 140 140 141 141 141 141 141 141 #>   [991] 141 141 141 141 141 142 142 142 142 142 142 142 142 142 142 142 143 143 #>  [1009] 143 143 143 143 143 143 143 143 143 144 144 144 144 144 144 144 144 144 #>  [1027] 144 144 144 144 144 144 144 144 145 145 145 145 145 145 145 145 145 145 #>  [1045] 145 145 145 145 146 146 146 146 146 146 146 146 146 146 146 146 146 146 #>  [1063] 146 146 146 146 146 146 146 147 147 147 147 147 147 147 147 147 147 147 #>  [1081] 147 147 147 147 147 147 147 147 148 148 148 148 148 148 148 148 148 149 #>  [1099] 149 149 149 149 149 149 149 149 149 149 149 149 149 149 149 149 149 149 #>  [1117] 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 150 #>  [1135] 150 151 151 151 151 151 151 151 151 151 151 151 151 151 152 152 152 152 #>  [1153] 152 152 152 152 152 152 152 152 152 152 152 153 153 153 153 153 153 153 #>  [1171] 153 153 154 154 154 154 154 154 154 154 154 154 154 154 154 154 154 155 #>  [1189] 155 155 155 155 155 155 155 155 155 155 155 155 155 156 156 156 156 156 #>  [1207] 156 156 156 156 156 156 156 156 156 156 156 157 157 157 157 157 157 157 #>  [1225] 157 157 157 157 157 157 157 157 157 157 157 157 157 158 158 158 158 158 #>  [1243] 158 158 158 158 158 158 158 158 158 159 159 159 159 159 159 159 159 159 #>  [1261] 159 159 159 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 #>  [1279] 160 160 160 160 161 161 161 161 161 161 161 161 161 161 162 162 162 162 #>  [1297] 162 162 162 162 162 162 162 162 162 162 162 162 162 162 162 162 163 163 #>  [1315] 163 163 163 163 163 163 163 163 163 163 163 163 163 163 163 164 164 164 #>  [1333] 164 164 164 164 164 164 164 164 164 164 164 164 165 165 165 165 165 165 #>  [1351] 165 165 165 165 165 165 165 165 165 166 166 166 166 166 166 166 166 166 #>  [1369] 166 166 166 167 167 167 167 167 167 167 167 167 167 168 168 168 168 168 #>  [1387] 168 168 168 168 168 168 169 169 169 169 169 169 169 169 169 169 169 169 #>  [1405] 169 169 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 170 #>  [1423] 170 170 170 170 170 170 170 171 171 171 171 171 171 171 171 171 171 171 #>  [1441] 171 171 171 171 171 171 172 172 172 172 172 172 172 172 172 172 172 172 #>  [1459] 172 172 172 172 172 172 172 172 173 173 173 173 173 173 173 173 173 173 #>  [1477] 173 173 173 173 173 173 174 174 174 174 174 174 174 174 174 174 174 174 #>  [1495] 174 174 174 175 175 175 175 175 175 175 175 176 176 176 176 176 176 176 #>  [1513] 176 176 176 176 176 176 176 176 177 177 177 177 177 177 177 177 177 177 #>  [1531] 177 177 177 177 177 177 177 177 177 177 178 178 178 178 178 178 178 178 #>  [1549] 178 178 178 178 178 178 178 179 179 179 179 179 179 179 179 179 179 179 #>  [1567] 179 179 179 179 179 180 180 180 180 180 180 180 180 180 180 180 180 180 #>  [1585] 180 180 180 180 180 180 180 181 181 181 181 181 181 181 181 181 181 181 #>  [1603] 181 181 181 181 181 181 181 181 181 181 181 181 182 182 182 182 182 182 #>  [1621] 182 182 182 182 182 182 182 182 182 183 183 183 183 183 183 183 183 183 #>  [1639] 183 183 183 183 183 183 183 184 184 184 184 184 184 184 184 184 184 184 #>  [1657] 184 184 184 184 184 184 184 185 185 185 185 185 185 185 185 185 185 185 #>  [1675] 185 185 185 186 186 186 186 186 186 186 186 186 186 186 186 186 186 186 #>  [1693] 186 186 186 186 187 187 187 187 187 187 187 187 187 187 187 187 187 187 #>  [1711] 187 187 188 188 188 188 188 188 188 188 188 188 188 188 188 188 188 188 #>  [1729] 188 188 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 189 #>  [1747] 189 189 189 189 189 189 189 189 190 190 190 190 190 190 190 190 190 190 #>  [1765] 190 190 190 190 190 190 190 190 190 190 190 190 190 191 191 191 191 191 #>  [1783] 191 191 191 191 191 191 191 191 191 191 192 192 192 192 192 192 192 192 #>  [1801] 192 192 192 192 192 192 192 192 192 192 192 192 193 193 193 193 193 193 #>  [1819] 193 193 193 193 193 193 193 193 193 193 193 193 194 194 194 194 194 194 #>  [1837] 194 194 194 194 194 194 194 194 194 194 194 194 194 195 195 195 195 195 #>  [1855] 195 195 195 195 195 195 195 195 195 195 195 195 196 196 196 196 196 196 #>  [1873] 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 196 197 197 #>  [1891] 197 197 197 197 197 197 197 197 197 197 197 197 198 198 198 198 198 198 #>  [1909] 198 198 198 198 198 198 198 198 198 198 198 199 199 199 199 199 199 199 #>  [1927] 199 199 199 199 199 199 199 199 199 199 199 199 199 199 200 200 200 200 #>  [1945] 200 200 200 200 200 200 200 200 200 200 200 200 200 200 201 201 201 201 #>  [1963] 201 201 201 201 201 201 201 201 201 201 201 201 201 201 202 202 202 202 #>  [1981] 202 202 202 202 202 202 202 202 202 202 202 202 202 203 203 203 203 203 #>  [1999] 203 203 203 203 203 203 203 203 203 203 203 203 203 204 204 204 204 204 #>  [2017] 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 204 #>  [2035] 204 204 205 205 205 205 205 205 205 205 205 205 205 205 205 205 205 206 #>  [2053] 206 206 206 206 206 206 206 206 206 206 206 206 206 206 206 206 206 206 #>  [2071] 206 206 207 207 207 207 207 207 207 207 207 207 207 207 207 207 207 207 #>  [2089] 207 207 207 207 207 207 207 207 208 208 208 208 208 208 208 208 208 208 #>  [2107] 208 208 208 208 208 208 208 208 208 208 208 209 209 209 209 209 209 209 #>  [2125] 209 209 209 209 209 209 209 209 209 209 209 209 209 209 209 209 209 209 #>  [2143] 209 209 209 209 210 210 210 210 210 210 210 210 210 210 210 210 210 210 #>  [2161] 210 210 210 210 210 211 211 211 211 211 211 211 211 211 211 211 211 211 #>  [2179] 211 211 211 211 211 211 211 212 212 212 212 212 212 212 212 212 212 212 #>  [2197] 212 212 212 212 212 212 212 212 212 212 212 213 213 213 213 213 213 213 #>  [2215] 213 213 213 213 213 213 213 213 213 213 213 213 213 213 214 214 214 214 #>  [2233] 214 214 214 214 214 214 214 214 214 214 214 214 214 214 214 214 214 214 #>  [2251] 214 214 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 215 #>  [2269] 215 215 215 215 216 216 216 216 216 216 216 216 216 216 216 216 216 216 #>  [2287] 216 216 216 216 216 216 216 216 216 216 216 216 217 217 217 217 217 217 #>  [2305] 217 217 217 217 217 217 217 217 217 217 217 217 217 217 218 218 218 218 #>  [2323] 218 218 218 218 218 218 218 218 218 218 218 218 218 218 218 219 219 219 #>  [2341] 219 219 219 219 219 219 219 219 219 219 219 219 219 219 219 219 219 220 #>  [2359] 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 220 #>  [2377] 220 220 220 220 220 220 220 220 221 221 221 221 221 221 221 221 221 221 #>  [2395] 221 221 221 221 221 221 222 222 222 222 222 222 222 222 222 222 222 222 #>  [2413] 222 222 222 223 223 223 223 223 223 223 223 223 223 223 223 223 223 223 #>  [2431] 223 223 223 223 223 223 223 223 223 223 223 223 223 224 224 224 224 224 #>  [2449] 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 225 225 #>  [2467] 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 225 #>  [2485] 225 225 225 225 226 226 226 226 226 226 226 226 226 226 226 226 226 226 #>  [2503] 226 226 226 226 226 227 227 227 227 227 227 227 227 227 227 227 227 228 #>  [2521] 228 228 228 228 228 228 228 228 228 228 228 228 228 228 228 229 229 229 #>  [2539] 229 229 229 229 229 229 229 229 229 229 229 229 229 229 229 229 229 229 #>  [2557] 229 229 230 230 230 230 230 230 230 230 230 230 230 230 230 230 230 230 #>  [2575] 230 230 230 230 230 230 230 231 231 231 231 231 231 231 231 231 231 231 #>  [2593] 231 231 231 231 231 231 231 231 231 232 232 232 232 232 232 232 232 232 #>  [2611] 232 232 232 232 232 232 232 233 233 233 233 233 233 233 233 233 233 233 #>  [2629] 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 233 #>  [2647] 233 233 234 234 234 234 234 234 234 234 234 234 234 234 234 234 234 234 #>  [2665] 234 234 234 234 234 234 235 235 235 235 235 235 235 235 235 235 235 235 #>  [2683] 235 235 235 235 235 235 235 236 236 236 236 236 236 236 236 236 236 236 #>  [2701] 236 236 236 236 236 236 236 236 236 236 236 237 237 237 237 237 237 237 #>  [2719] 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 237 #>  [2737] 237 237 237 237 237 237 237 237 238 238 238 238 238 238 238 238 238 238 #>  [2755] 238 238 238 238 238 238 238 238 238 238 238 238 238 238 239 239 239 239 #>  [2773] 239 239 239 239 239 239 239 239 239 239 239 239 239 239 239 239 239 239 #>  [2791] 239 239 239 239 239 239 240 240 240 240 240 240 240 240 240 240 240 240 #>  [2809] 240 240 240 240 240 240 240 240 241 241 241 241 241 241 241 241 241 241 #>  [2827] 241 241 241 241 241 241 241 241 241 241 241 241 241 241 241 241 241 241 #>  [2845] 241 242 242 242 242 242 242 242 242 242 242 242 242 242 242 242 242 242 #>  [2863] 242 242 242 242 242 242 242 242 242 242 242 242 242 242 243 243 243 243 #>  [2881] 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 243 #>  [2899] 243 243 243 244 244 244 244 244 244 244 244 244 244 244 244 244 244 244 #>  [2917] 244 244 244 244 244 244 244 244 245 245 245 245 245 245 245 245 245 245 #>  [2935] 245 245 245 245 245 245 245 245 245 245 245 246 246 246 246 246 246 246 #>  [2953] 246 246 246 246 246 246 246 246 246 246 246 246 246 246 246 246 247 247 #>  [2971] 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 247 #>  [2989] 247 247 247 248 248 248 248 248 248 248 248 248 248 248 248 248 248 248 #>  [3007] 248 248 248 248 248 248 248 248 248 248 248 248 248 248 249 249 249 249 #>  [3025] 249 249 249 249 249 249 249 249 249 249 249 249 249 249 249 249 250 250 #>  [3043] 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 250 #>  [3061] 250 250 250 250 250 250 250 250 251 251 251 251 251 251 251 251 251 251 #>  [3079] 251 251 251 251 251 251 251 251 251 251 251 251 251 251 252 252 252 252 #>  [3097] 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 252 #>  [3115] 252 252 252 252 252 252 252 252 253 253 253 253 253 253 253 253 253 253 #>  [3133] 253 253 253 253 253 253 253 253 253 253 253 254 254 254 254 254 254 254 #>  [3151] 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 254 #>  [3169] 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 #>  [3187] 255 255 255 255 255 255 256 256 256 256 256 256 256 256 256 256 256 256 #>  [3205] 256 256 256 256 256 256 256 256 256 256 256 256 257 257 257 257 257 257 #>  [3223] 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 257 #>  [3241] 257 257 257 257 257 257 257 257 257 257 257 257 257 257 258 258 258 258 #>  [3259] 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 258 #>  [3277] 258 258 258 258 258 258 258 259 259 259 259 259 259 259 259 259 259 259 #>  [3295] 259 259 260 260 260 260 260 260 260 260 260 260 260 260 260 260 260 260 #>  [3313] 260 260 260 260 260 260 260 260 260 260 260 260 260 261 261 261 261 261 #>  [3331] 261 261 261 261 261 261 261 261 261 261 261 261 262 262 262 262 262 262 #>  [3349] 262 262 262 262 262 262 262 262 262 262 262 262 262 262 262 262 262 262 #>  [3367] 262 262 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 263 #>  [3385] 263 263 263 263 263 263 263 263 263 263 263 263 263 263 264 264 264 264 #>  [3403] 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 264 #>  [3421] 264 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 265 #>  [3439] 265 265 265 265 265 265 266 266 266 266 266 266 266 266 266 266 266 266 #>  [3457] 266 266 266 266 266 266 266 266 266 266 266 267 267 267 267 267 267 267 #>  [3475] 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 267 #>  [3493] 267 267 267 267 268 268 268 268 268 268 268 268 268 268 268 268 268 268 #>  [3511] 268 268 268 268 268 268 268 268 268 268 268 268 268 268 268 268 268 269 #>  [3529] 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 269 #>  [3547] 269 269 270 270 270 270 270 270 270 270 270 270 270 270 270 270 270 270 #>  [3565] 270 270 270 270 270 270 270 270 270 271 271 271 271 271 271 271 271 271 #>  [3583] 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 271 #>  [3601] 271 271 271 271 271 271 271 271 272 272 272 272 272 272 272 272 272 272 #>  [3619] 272 272 272 272 272 272 272 272 272 272 273 273 273 273 273 273 273 273 #>  [3637] 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 273 #>  [3655] 273 273 273 273 273 274 274 274 274 274 274 274 274 274 274 274 274 274 #>  [3673] 274 274 274 274 274 274 274 274 274 274 274 274 274 275 275 275 275 275 #>  [3691] 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 275 #>  [3709] 275 275 275 275 275 275 275 275 275 276 276 276 276 276 276 276 276 276 #>  [3727] 276 276 276 276 276 276 276 276 276 276 276 276 276 276 276 276 276 276 #>  [3745] 276 276 276 276 277 277 277 277 277 277 277 277 277 277 277 277 277 277 #>  [3763] 277 277 277 277 277 277 277 277 277 277 277 277 277 277 277 278 278 278 #>  [3781] 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 278 #>  [3799] 278 278 278 278 278 279 279 279 279 279 279 279 279 279 279 279 279 279 #>  [3817] 279 279 279 279 279 279 279 279 279 280 280 280 280 280 280 280 280 280 #>  [3835] 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 280 281 #>  [3853] 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 281 #>  [3871] 281 281 281 281 281 281 281 281 281 281 281 281 281 282 282 282 282 282 #>  [3889] 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 282 #>  [3907] 282 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 283 #>  [3925] 283 283 283 283 283 283 284 284 284 284 284 284 284 284 284 284 284 284 #>  [3943] 284 284 284 284 284 284 284 284 284 284 284 284 284 285 285 285 285 285 #>  [3961] 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 285 #>  [3979] 285 285 285 285 285 286 286 286 286 286 286 286 286 286 286 286 286 286 #>  [3997] 286 286 286 286 286 286 286 286 286 286 286 286 286 287 287 287 287 287 #>  [4015] 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 287 #>  [4033] 287 287 287 287 288 288 288 288 288 288 288 288 288 288 288 288 288 288 #>  [4051] 288 288 288 288 288 288 288 288 288 288 288 289 289 289 289 289 289 289 #>  [4069] 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 289 #>  [4087] 289 289 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 290 #>  [4105] 290 290 290 290 290 290 290 290 290 290 291 291 291 291 291 291 291 291 #>  [4123] 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 291 #>  [4141] 291 291 291 291 291 292 292 292 292 292 292 292 292 292 292 292 292 292 #>  [4159] 292 292 292 292 292 292 292 292 292 292 293 293 293 293 293 293 293 293 #>  [4177] 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 293 #>  [4195] 293 293 293 293 293 293 293 293 293 294 294 294 294 294 294 294 294 294 #>  [4213] 294 294 294 294 294 294 294 294 294 294 294 294 294 294 294 294 294 294 #>  [4231] 294 294 294 294 294 294 294 294 294 295 295 295 295 295 295 295 295 295 #>  [4249] 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 295 #>  [4267] 295 295 295 295 295 295 295 295 295 295 295 295 296 296 296 296 296 296 #>  [4285] 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 296 #>  [4303] 296 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 297 #>  [4321] 297 297 297 297 297 297 298 298 298 298 298 298 298 298 298 298 298 298 #>  [4339] 298 298 298 298 298 298 298 298 298 298 298 298 298 298 299 299 299 299 #>  [4357] 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 299 #>  [4375] 299 299 299 299 299 299 302 302 304 304 304 305 313 319 322 323 324 327 #>  [4393] 327 329 331 331 337 344 354 355 364 364 366 373 376 387 391 402 406 406 #>  [4411] 410 413 420 420 434 436 437 443 446 448 449 451 456 459 466 467 469 470 #>  [4429] 475 476 482 486 491 498 503 504 506 507 507 508 511 511 514 518 520 521 #>  [4447] 522 523 527 530 530 532 532 535 548 549 552 552 555 555 560 562 563 563 #>  [4465] 563 568 580 593 596 599 601 602 606 609 613 619 624 628 628 629 635 637 #>  [4483] 639 642 647 662 665 670 670 672 674 675 686 689 689 691 691 692 699 705 #>  [4501] 710 715 715 728 728 728 735 736 739 741 742 743 746 748 748 749 753 756 #>  [4519] 757 757 757 761 761 762 764 766 767 768 770 778 780 783 786 790 792 793 #>  [4537] 794 796 800 802 803 806 809 809 813 817 818 826 828 829 829 832 833 840 #>  [4555] 849 849 860 863 864 872 884 887 889 891 896 897 902 903 905 910 915 919 #>  [4573] 920 921 923 925 927 932 935 935 936 937 944 946 949 953 957 961 964 964 #>  [4591] 969 978 301 303 313 313 313 316 317 319 319 320 322 322 323 324 325 325 #>  [4609] 326 326 326 328 328 329 329 331 331 331 332 332 333 333 333 333 334 334 #>  [4627] 334 336 336 338 339 340 340 340 341 342 343 343 343 343 343 343 345 345 #>  [4645] 345 345 346 348 349 349 349 350 350 351 352 354 354 355 355 355 357 357 #>  [4663] 357 357 358 358 359 359 360 361 361 363 363 364 365 365 365 365 365 365 #>  [4681] 366 366 366 366 367 367 367 368 368 368 369 370 370 370 370 371 371 372 #>  [4699] 372 372 373 373 373 373 373 374 374 374 374 374 374 375 376 376 376 376 #>  [4717] 377 377 377 379 379 379 379 380 380 380 381 382 383 383 383 384 384 384 #>  [4735] 386 386 386 386 386 386 387 387 387 388 388 388 388 388 388 388 388 389 #>  [4753] 389 389 389 389 389 390 390 390 390 390 391 391 391 392 392 393 393 393 #>  [4771] 393 393 393 394 394 394 394 395 395 395 395 395 395 396 396 396 396 397 #>  [4789] 397 397 397 398 398 398 398 399 399 399 399 399 399 399 400 400 400 400 #>  [4807] 400 400 400 400 401 401 401 401 401 402 402 402 402 402 402 402 403 403 #>  [4825] 403 403 403 403 403 403 403 404 404 404 404 404 405 405 405 405 405 405 #>  [4843] 406 406 406 406 406 406 406 407 407 407 408 408 408 408 408 408 409 409 #>  [4861] 409 410 410 410 411 411 411 411 411 411 411 411 412 412 413 413 413 413 #>  [4879] 413 414 414 414 414 414 415 415 415 415 415 415 416 416 416 416 416 416 #>  [4897] 416 416 416 416 416 416 417 417 417 417 417 418 418 418 418 418 419 419 #>  [4915] 419 420 420 420 420 420 421 421 421 421 421 421 422 422 422 422 422 422 #>  [4933] 422 422 423 423 423 423 423 424 424 424 424 424 424 424 424 424 424 424 #>  [4951] 425 425 425 425 426 426 426 426 426 426 426 426 426 426 427 427 427 427 #>  [4969] 427 427 428 428 428 428 428 428 428 428 428 428 428 428 429 429 429 429 #>  [4987] 429 429 429 430 430 430 430 430 430 430 431 431 431 431 431 431 431 431 #>  [5005] 431 432 432 432 432 432 432 432 433 433 433 433 433 433 433 433 433 433 #>  [5023] 433 434 434 435 435 435 435 436 436 436 436 436 436 436 436 436 437 437 #>  [5041] 437 437 437 437 437 437 437 437 438 438 438 438 438 438 439 439 439 439 #>  [5059] 439 439 440 440 440 440 440 440 440 441 441 441 441 441 441 441 441 442 #>  [5077] 442 442 442 442 442 442 442 442 442 443 443 443 443 443 444 444 444 444 #>  [5095] 444 444 445 445 445 445 445 445 446 446 446 446 446 446 446 446 446 447 #>  [5113] 447 447 447 447 447 447 447 447 448 448 448 448 448 449 449 449 449 449 #>  [5131] 449 450 450 450 450 450 450 450 451 451 451 451 451 451 452 452 452 452 #>  [5149] 452 452 452 453 453 453 453 453 453 454 454 454 454 454 454 454 454 454 #>  [5167] 454 454 455 455 455 455 455 455 455 455 456 456 456 456 456 457 457 457 #>  [5185] 457 458 458 458 458 458 458 458 458 458 458 458 458 459 459 459 459 460 #>  [5203] 460 460 460 460 460 460 461 461 461 461 461 461 461 461 462 462 462 462 #>  [5221] 462 462 462 462 463 463 463 463 463 463 463 463 463 463 463 463 463 464 #>  [5239] 464 464 464 464 464 464 464 465 465 465 465 465 465 466 466 466 466 466 #>  [5257] 466 467 467 467 467 467 467 467 468 468 468 468 468 468 468 468 468 469 #>  [5275] 469 469 469 469 469 470 470 470 471 471 471 471 471 471 471 471 471 471 #>  [5293] 472 472 472 472 472 472 472 472 472 473 473 473 473 473 473 473 473 473 #>  [5311] 474 474 474 474 474 474 474 475 475 475 475 475 476 476 476 476 476 477 #>  [5329] 477 477 477 477 477 477 477 478 478 478 478 478 478 478 478 478 478 478 #>  [5347] 479 479 479 479 479 479 479 479 479 479 479 479 480 480 480 480 480 480 #>  [5365] 480 480 480 480 480 480 481 481 481 481 481 481 482 482 482 482 482 482 #>  [5383] 482 482 482 483 483 483 483 483 483 483 483 483 483 483 483 483 483 483 #>  [5401] 484 484 484 484 484 484 484 484 484 484 485 485 485 485 486 486 486 486 #>  [5419] 486 486 486 486 487 487 487 487 487 487 487 487 487 487 487 487 488 488 #>  [5437] 488 488 488 488 488 488 488 488 488 488 489 489 489 489 489 489 489 489 #>  [5455] 489 490 490 490 490 490 490 490 490 491 491 491 491 491 491 491 492 492 #>  [5473] 492 492 492 492 492 492 492 493 493 493 493 493 493 493 494 494 494 494 #>  [5491] 494 494 494 494 494 494 494 494 495 495 495 495 495 495 495 496 496 496 #>  [5509] 496 496 496 496 496 496 496 497 497 497 497 497 497 497 497 497 497 497 #>  [5527] 497 498 498 498 498 498 498 498 498 498 498 498 499 499 499 499 499 499 #>  [5545] 499 500 500 500 500 500 500 500 500 500 500 501 501 501 501 501 501 501 #>  [5563] 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 502 503 503 #>  [5581] 503 503 503 503 503 503 503 503 503 503 503 503 503 504 504 504 504 504 #>  [5599] 504 504 504 504 504 504 505 505 505 505 505 505 505 505 505 505 505 505 #>  [5617] 505 505 505 505 506 506 506 506 506 506 506 506 506 506 507 507 507 507 #>  [5635] 507 507 507 507 507 507 507 508 508 508 508 508 508 508 508 508 508 509 #>  [5653] 509 509 509 509 509 509 509 510 510 510 510 510 510 510 510 510 510 511 #>  [5671] 511 511 511 511 511 511 511 512 512 512 512 512 512 512 512 512 513 513 #>  [5689] 513 513 513 513 513 513 513 513 513 513 514 514 514 514 514 514 514 514 #>  [5707] 514 514 514 514 515 515 515 515 515 515 515 515 515 515 515 515 515 515 #>  [5725] 515 515 515 516 516 516 516 516 516 516 516 516 516 517 517 517 517 517 #>  [5743] 517 517 517 517 518 518 518 518 518 518 518 518 518 519 519 519 519 519 #>  [5761] 519 519 519 519 519 519 520 520 520 520 520 520 520 520 520 520 520 521 #>  [5779] 521 521 521 521 521 521 521 521 521 522 522 522 522 522 522 522 522 522 #>  [5797] 522 522 522 522 523 523 523 523 523 523 523 523 523 523 523 523 523 524 #>  [5815] 524 524 524 524 524 524 524 524 525 525 525 525 525 525 525 525 525 526 #>  [5833] 526 526 526 526 526 526 526 526 526 526 527 527 527 527 527 527 527 527 #>  [5851] 527 527 527 527 527 527 527 527 528 528 528 528 528 528 528 528 528 528 #>  [5869] 529 529 529 529 529 529 529 529 529 530 530 530 530 530 530 530 531 531 #>  [5887] 531 531 531 531 531 532 532 532 532 532 532 532 532 532 533 533 533 533 #>  [5905] 533 533 533 533 534 534 534 534 534 534 534 534 534 535 535 535 535 535 #>  [5923] 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 535 536 #>  [5941] 536 536 536 536 536 536 536 536 536 536 537 537 537 537 537 537 537 537 #>  [5959] 537 537 537 538 538 538 538 538 538 538 538 538 538 538 538 538 538 538 #>  [5977] 539 539 539 539 539 539 539 539 539 539 539 539 539 539 540 540 540 540 #>  [5995] 540 540 540 540 540 540 540 540 540 540 540 540 541 541 541 541 541 541 #>  [6013] 541 541 541 541 542 542 542 542 542 543 543 543 543 543 543 543 543 543 #>  [6031] 543 544 544 544 544 544 544 544 544 544 544 544 545 545 545 545 545 545 #>  [6049] 545 545 545 546 546 546 546 546 546 546 546 546 546 546 546 546 546 546 #>  [6067] 546 546 547 547 547 547 547 547 547 548 548 548 548 548 548 548 548 548 #>  [6085] 548 548 548 548 549 549 549 549 549 549 549 549 550 550 550 550 550 550 #>  [6103] 550 550 550 551 551 551 551 551 551 551 551 551 552 552 552 552 552 552 #>  [6121] 552 552 552 552 552 552 552 552 552 553 553 553 553 553 553 553 553 553 #>  [6139] 553 553 553 553 553 553 553 553 554 554 554 554 554 554 554 554 554 554 #>  [6157] 554 554 554 555 555 555 555 555 555 555 555 555 555 555 555 556 556 556 #>  [6175] 556 556 556 556 556 556 556 556 556 556 557 557 557 557 557 557 557 557 #>  [6193] 557 558 558 558 558 558 558 558 558 558 558 558 558 558 558 558 559 559 #>  [6211] 559 559 559 559 559 559 559 559 559 559 559 559 560 560 560 560 560 560 #>  [6229] 560 560 560 560 560 560 560 560 560 561 561 561 561 561 561 561 561 561 #>  [6247] 561 561 561 561 561 561 561 561 562 562 562 562 562 562 562 562 562 562 #>  [6265] 562 562 563 563 563 563 563 563 563 563 563 563 563 563 563 564 564 564 #>  [6283] 564 564 564 564 564 564 564 564 564 564 564 564 565 565 565 565 565 565 #>  [6301] 565 565 565 565 565 566 566 566 566 567 567 567 567 567 567 567 567 567 #>  [6319] 567 567 567 567 567 567 567 568 568 568 568 568 568 568 568 568 568 568 #>  [6337] 568 568 569 569 569 569 569 569 569 569 569 569 569 569 569 569 569 570 #>  [6355] 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 570 #>  [6373] 571 571 571 571 571 571 571 571 571 571 571 571 571 571 571 572 572 572 #>  [6391] 572 572 572 572 572 573 573 573 573 573 573 573 573 573 573 574 574 574 #>  [6409] 574 574 574 574 574 574 574 574 574 574 574 575 575 575 575 575 575 575 #>  [6427] 575 575 575 575 575 575 575 575 575 575 575 576 576 576 576 576 576 576 #>  [6445] 576 576 576 576 576 577 577 577 577 577 577 577 577 577 577 577 577 577 #>  [6463] 577 577 578 578 578 578 578 578 578 578 578 579 579 579 579 579 579 579 #>  [6481] 579 579 579 579 579 579 579 579 580 580 580 580 580 580 580 580 580 580 #>  [6499] 580 580 580 580 580 580 580 580 581 581 581 581 581 581 581 582 582 582 #>  [6517] 582 582 582 582 582 582 582 583 583 583 583 583 583 583 583 583 583 583 #>  [6535] 583 583 583 583 583 584 584 584 584 584 584 584 584 584 584 584 584 584 #>  [6553] 584 584 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 585 #>  [6571] 585 585 585 585 586 586 586 586 586 586 586 586 586 586 586 586 586 586 #>  [6589] 586 586 587 587 587 587 587 587 587 587 587 587 587 588 588 588 588 588 #>  [6607] 588 588 588 588 588 588 589 589 589 589 589 589 589 589 589 589 589 589 #>  [6625] 589 589 589 589 589 590 590 590 590 590 590 590 590 590 590 590 590 590 #>  [6643] 590 590 590 590 591 591 591 591 591 591 591 591 591 591 591 591 591 591 #>  [6661] 591 591 591 591 591 592 592 592 592 592 592 592 592 592 592 592 592 592 #>  [6679] 592 592 593 593 593 593 593 593 593 593 593 593 593 594 594 594 594 594 #>  [6697] 594 594 594 594 594 594 594 594 594 594 594 594 595 595 595 595 595 595 #>  [6715] 595 595 595 595 595 595 595 595 595 595 596 596 596 596 596 596 596 596 #>  [6733] 596 596 597 597 597 597 597 597 597 597 597 597 597 597 598 598 598 598 #>  [6751] 598 598 598 598 598 598 598 598 598 598 598 598 598 598 599 599 599 599 #>  [6769] 599 599 599 599 599 599 599 599 599 600 600 600 600 600 600 600 600 600 #>  [6787] 600 600 600 600 600 600 600 600 600 600 600 600 600 600 601 601 601 601 #>  [6805] 601 601 601 601 601 601 601 601 602 602 602 602 602 602 602 602 602 602 #>  [6823] 602 602 603 603 603 603 603 603 603 603 603 603 603 603 603 604 604 604 #>  [6841] 604 604 604 604 604 604 605 605 605 605 605 605 605 605 605 605 605 605 #>  [6859] 605 605 605 605 605 605 606 606 606 606 606 606 606 606 606 606 607 607 #>  [6877] 607 607 607 607 607 607 607 607 608 608 608 608 608 608 608 608 608 608 #>  [6895] 608 608 608 608 608 608 608 608 609 609 609 609 609 609 609 609 609 609 #>  [6913] 609 609 609 609 609 609 609 609 609 609 609 610 610 610 610 610 610 610 #>  [6931] 610 610 610 610 610 610 610 611 611 611 611 611 611 611 611 611 611 611 #>  [6949] 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 612 #>  [6967] 612 612 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 613 #>  [6985] 613 613 613 613 613 614 614 614 614 614 614 614 614 614 614 614 614 614 #>  [7003] 614 614 614 614 614 615 615 615 615 615 615 615 615 615 615 615 615 615 #>  [7021] 615 615 615 615 616 616 616 616 616 616 616 616 616 616 616 616 616 616 #>  [7039] 616 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 617 618 #>  [7057] 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 618 #>  [7075] 618 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 619 #>  [7093] 619 619 619 619 619 619 620 620 620 620 620 620 620 620 620 620 620 620 #>  [7111] 620 620 620 620 620 621 621 621 621 621 621 621 621 621 621 621 621 621 #>  [7129] 621 621 621 621 622 622 622 622 622 622 622 622 622 622 622 622 622 622 #>  [7147] 622 622 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 623 #>  [7165] 623 623 623 623 623 624 624 624 624 624 624 624 624 624 624 624 624 624 #>  [7183] 624 624 624 624 624 625 625 625 625 625 625 625 625 625 625 625 625 625 #>  [7201] 625 625 625 626 626 626 626 626 626 626 626 626 626 626 627 627 627 627 #>  [7219] 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 627 #>  [7237] 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 628 629 629 #>  [7255] 629 629 629 629 629 629 629 629 629 629 629 629 630 630 630 630 630 630 #>  [7273] 630 630 630 630 630 630 630 630 630 630 630 630 630 631 631 631 631 631 #>  [7291] 631 631 631 631 631 631 631 632 632 632 632 632 632 632 632 632 632 632 #>  [7309] 632 632 632 632 632 632 632 633 633 633 633 633 633 633 633 633 633 633 #>  [7327] 633 633 633 634 634 634 634 634 634 634 634 634 634 634 634 634 634 634 #>  [7345] 634 634 634 635 635 635 635 635 635 635 635 635 635 635 635 635 635 635 #>  [7363] 635 635 635 635 635 635 635 636 636 636 636 636 636 636 636 636 636 637 #>  [7381] 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 637 #>  [7399] 638 638 638 638 638 638 638 638 638 638 638 638 638 638 638 639 639 639 #>  [7417] 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 639 640 #>  [7435] 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 640 #>  [7453] 640 640 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 641 #>  [7471] 641 641 641 641 641 641 641 641 642 642 642 642 642 642 642 642 642 642 #>  [7489] 642 642 642 642 642 642 642 642 643 643 643 643 643 643 643 643 643 643 #>  [7507] 643 643 643 643 643 643 643 643 643 643 643 644 644 644 644 644 644 644 #>  [7525] 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 644 #>  [7543] 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 645 #>  [7561] 645 645 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 646 #>  [7579] 646 646 646 646 646 647 647 647 647 647 647 647 647 647 647 647 647 647 #>  [7597] 647 647 647 647 648 648 648 648 648 648 648 648 648 648 648 648 648 648 #>  [7615] 648 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 649 #>  [7633] 649 649 649 649 649 649 649 649 649 649 649 650 650 650 650 650 650 650 #>  [7651] 650 650 650 650 650 650 650 650 650 651 651 651 651 651 651 651 651 651 #>  [7669] 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 651 652 #>  [7687] 652 652 652 652 652 652 652 652 652 652 653 653 653 653 653 653 653 653 #>  [7705] 653 653 653 653 653 653 654 654 654 654 654 654 654 654 654 654 654 654 #>  [7723] 654 654 654 654 654 654 654 655 655 655 655 655 655 655 655 655 655 655 #>  [7741] 655 655 655 655 656 656 656 656 656 656 656 656 656 656 656 656 656 656 #>  [7759] 656 656 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 657 #>  [7777] 657 657 657 657 657 658 658 658 658 658 658 658 658 658 658 658 658 658 #>  [7795] 658 658 658 658 658 658 658 658 658 658 658 658 658 659 659 659 659 659 #>  [7813] 659 659 659 659 659 659 659 660 660 660 660 660 660 660 660 660 660 660 #>  [7831] 660 660 661 661 661 661 661 661 661 661 661 661 661 661 661 661 662 662 #>  [7849] 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 662 663 #>  [7867] 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 663 #>  [7885] 663 663 663 663 663 663 663 664 664 664 664 664 664 664 664 664 664 664 #>  [7903] 664 664 664 664 664 665 665 665 665 665 665 665 665 665 665 665 665 665 #>  [7921] 665 665 665 666 666 666 666 666 666 666 666 666 666 666 666 666 666 666 #>  [7939] 666 666 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 667 #>  [7957] 667 667 667 667 667 667 667 667 667 668 668 668 668 668 668 668 668 668 #>  [7975] 668 668 668 668 668 669 669 669 669 669 669 669 669 669 669 669 669 669 #>  [7993] 669 669 669 669 669 669 669 669 670 670 670 670 670 670 670 670 670 670 #>  [8011] 670 670 670 670 670 670 670 670 670 670 670 670 670 670 670 671 671 671 #>  [8029] 671 671 671 671 671 671 671 671 671 672 672 672 672 672 672 672 672 672 #>  [8047] 672 672 672 672 672 672 672 672 673 673 673 673 673 673 673 673 673 673 #>  [8065] 673 673 673 673 673 673 673 673 673 674 674 674 674 674 674 674 674 674 #>  [8083] 674 674 674 674 674 674 674 674 674 674 674 674 675 675 675 675 675 675 #>  [8101] 675 675 675 675 675 675 675 675 675 675 675 676 676 676 676 676 676 676 #>  [8119] 676 676 676 676 676 676 676 676 676 676 676 676 677 677 677 677 677 677 #>  [8137] 677 677 677 677 677 677 677 677 677 677 677 677 677 678 678 678 678 678 #>  [8155] 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 678 679 #>  [8173] 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 679 680 680 #>  [8191] 680 680 680 680 680 680 680 680 680 680 680 680 681 681 681 681 681 681 #>  [8209] 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 681 #>  [8227] 681 681 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 682 #>  [8245] 682 682 682 682 682 682 683 683 683 683 683 683 683 683 683 683 683 683 #>  [8263] 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 683 684 #>  [8281] 684 684 684 684 684 684 684 684 684 684 684 684 684 684 685 685 685 685 #>  [8299] 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 685 686 #>  [8317] 686 686 686 686 686 686 686 686 686 686 686 686 686 687 687 687 687 687 #>  [8335] 687 687 687 687 687 687 687 687 687 687 687 687 687 687 688 688 688 688 #>  [8353] 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 688 #>  [8371] 688 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 689 #>  [8389] 689 689 689 689 689 690 690 690 690 690 690 690 690 690 690 690 690 690 #>  [8407] 690 690 690 690 690 691 691 691 691 691 691 691 691 691 691 691 691 691 #>  [8425] 691 691 691 691 691 691 691 691 691 691 692 692 692 692 692 692 692 692 #>  [8443] 692 692 692 692 692 692 692 692 692 692 692 692 693 693 693 693 693 693 #>  [8461] 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 693 694 694 #>  [8479] 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 694 #>  [8497] 694 694 694 694 695 695 695 695 695 695 695 695 695 695 695 695 695 695 #>  [8515] 695 695 695 695 695 695 695 695 696 696 696 696 696 696 696 696 696 696 #>  [8533] 696 696 696 696 696 696 696 696 696 696 696 696 696 697 697 697 697 697 #>  [8551] 697 697 697 697 697 697 697 697 697 697 697 697 698 698 698 698 698 698 #>  [8569] 698 698 698 698 698 698 698 698 698 699 699 699 699 699 699 699 699 699 #>  [8587] 699 699 699 699 699 699 699 699 699 699 700 700 700 700 700 700 700 700 #>  [8605] 700 700 700 700 700 700 700 700 700 700 700 700 700 700 700 701 701 701 #>  [8623] 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 701 #>  [8641] 701 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 702 #>  [8659] 702 702 702 702 702 703 703 703 703 703 703 703 703 703 703 703 703 703 #>  [8677] 703 703 703 703 703 703 703 703 703 703 704 704 704 704 704 704 704 704 #>  [8695] 704 704 704 704 704 704 704 704 704 704 704 704 704 704 704 705 705 705 #>  [8713] 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 705 706 706 #>  [8731] 706 706 706 706 706 706 706 706 706 706 706 706 706 706 706 707 707 707 #>  [8749] 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 707 #>  [8767] 707 707 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 708 #>  [8785] 708 708 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 709 #>  [8803] 709 709 709 709 709 709 709 709 710 710 710 710 710 710 710 710 710 710 #>  [8821] 710 710 710 710 710 710 710 710 710 710 710 710 710 710 710 711 711 711 #>  [8839] 711 711 711 711 711 711 711 711 711 711 711 711 711 711 711 712 712 712 #>  [8857] 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 712 #>  [8875] 712 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 713 #>  [8893] 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 714 715 715 #>  [8911] 715 715 715 715 715 715 715 715 715 715 715 715 715 715 715 716 716 716 #>  [8929] 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 716 #>  [8947] 716 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 717 #>  [8965] 717 717 717 717 717 717 717 717 717 717 717 717 718 718 718 718 718 718 #>  [8983] 718 718 718 718 718 718 718 718 718 718 718 718 718 718 719 719 719 719 #>  [9001] 719 719 719 719 719 719 719 719 719 719 719 719 719 720 720 720 720 720 #>  [9019] 720 720 720 720 720 720 720 720 720 720 720 720 720 720 721 721 721 721 #>  [9037] 721 721 721 721 721 721 722 722 722 722 722 722 722 722 722 722 722 722 #>  [9055] 722 722 722 722 722 722 722 722 723 723 723 723 723 723 723 723 723 723 #>  [9073] 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 723 #>  [9091] 723 723 724 724 724 724 724 724 724 724 724 724 724 724 725 725 725 725 #>  [9109] 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 725 726 726 #>  [9127] 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 726 727 #>  [9145] 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 727 #>  [9163] 727 727 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 728 #>  [9181] 728 728 728 728 728 728 728 729 729 729 729 729 729 729 729 729 729 729 #>  [9199] 729 729 729 729 729 729 729 729 729 729 729 729 729 729 729 730 730 730 #>  [9217] 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 730 #>  [9235] 730 730 730 730 730 730 730 731 731 731 731 731 731 731 731 731 731 731 #>  [9253] 731 731 731 731 731 731 731 731 731 731 731 731 732 732 732 732 732 732 #>  [9271] 732 732 732 732 732 732 732 732 732 732 732 732 733 733 733 733 733 733 #>  [9289] 733 733 733 733 733 733 733 733 733 734 734 734 734 734 734 734 734 734 #>  [9307] 734 734 734 734 734 734 734 734 734 734 734 734 734 735 735 735 735 735 #>  [9325] 735 735 735 735 735 735 735 735 735 735 736 736 736 736 736 736 736 736 #>  [9343] 736 736 736 736 736 736 736 736 736 737 737 737 737 737 737 737 737 737 #>  [9361] 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 737 738 #>  [9379] 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 738 #>  [9397] 738 738 738 738 738 739 739 739 739 739 739 739 739 739 739 739 739 739 #>  [9415] 739 739 739 739 739 739 739 740 740 740 740 740 740 740 740 740 740 740 #>  [9433] 740 740 740 740 740 741 741 741 741 741 741 741 741 741 741 741 741 741 #>  [9451] 741 741 741 741 741 741 741 741 742 742 742 742 742 742 742 742 742 742 #>  [9469] 742 742 742 742 743 743 743 743 743 743 743 743 743 743 743 743 743 743 #>  [9487] 743 743 743 744 744 744 744 744 744 744 744 744 744 744 744 744 744 744 #>  [9505] 744 744 744 744 744 744 744 745 745 745 745 745 745 745 745 745 745 745 #>  [9523] 745 745 745 745 745 745 745 745 745 745 746 746 746 746 746 746 746 746 #>  [9541] 746 746 746 746 746 746 746 746 746 746 747 747 747 747 747 747 747 747 #>  [9559] 747 747 747 747 747 747 747 747 747 747 748 748 748 748 748 748 748 748 #>  [9577] 748 748 748 748 748 748 748 748 748 748 748 748 748 748 749 749 749 749 #>  [9595] 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 749 #>  [9613] 749 749 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 #>  [9631] 750 750 750 750 750 750 750 750 750 750 751 751 751 751 751 751 751 751 #>  [9649] 751 751 751 751 751 751 751 751 751 752 752 752 752 752 752 752 752 752 #>  [9667] 752 752 752 752 752 752 752 753 753 753 753 753 753 753 753 753 753 753 #>  [9685] 753 753 753 753 753 753 753 753 753 753 754 754 754 754 754 754 754 754 #>  [9703] 754 754 754 754 754 754 754 754 754 754 754 754 754 754 755 755 755 755 #>  [9721] 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 755 756 756 #>  [9739] 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 #>  [9757] 756 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 757 #>  [9775] 757 757 757 757 757 757 757 757 757 757 757 758 758 758 758 758 758 758 #>  [9793] 758 758 758 758 758 758 758 758 758 758 758 759 759 759 759 759 759 759 #>  [9811] 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 759 #>  [9829] 759 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 760 #>  [9847] 760 760 760 760 760 760 760 760 760 760 760 760 760 761 761 761 761 761 #>  [9865] 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 761 #>  [9883] 761 761 761 761 762 762 762 762 762 762 762 762 762 762 762 762 762 762 #>  [9901] 762 762 762 762 762 762 762 762 762 762 762 762 763 763 763 763 763 763 #>  [9919] 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 763 #>  [9937] 763 763 763 763 763 763 764 764 764 764 764 764 764 764 764 764 764 764 #>  [9955] 764 764 764 764 764 764 765 765 765 765 765 765 765 765 765 765 765 765 #>  [9973] 765 765 765 765 765 765 765 765 765 765 765 765 765 765 765 766 766 766 #>  [9991] 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 766 #> [10009] 766 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 767 #> [10027] 767 767 767 767 767 767 767 767 767 767 767 768 768 768 768 768 768 768 #> [10045] 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 768 769 769 #> [10063] 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 769 #> [10081] 769 769 769 769 769 769 770 770 770 770 770 770 770 770 770 770 770 770 #> [10099] 770 770 770 770 770 770 770 770 770 770 770 770 770 771 771 771 771 771 #> [10117] 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 771 #> [10135] 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 772 773 773 #> [10153] 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 773 #> [10171] 773 773 773 773 773 774 774 774 774 774 774 774 774 774 774 774 774 774 #> [10189] 774 774 774 774 774 774 774 775 775 775 775 775 775 775 775 775 775 775 #> [10207] 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 775 776 #> [10225] 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 776 #> [10243] 776 776 776 776 776 776 776 776 776 776 776 776 776 777 777 777 777 777 #> [10261] 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 777 #> [10279] 777 777 777 777 778 778 778 778 778 778 778 778 778 778 778 778 778 778 #> [10297] 778 778 778 778 778 778 778 778 778 778 779 779 779 779 779 779 779 779 #> [10315] 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 779 780 780 #> [10333] 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 780 #> [10351] 780 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 781 #> [10369] 781 781 781 781 781 781 781 782 782 782 782 782 782 782 782 782 782 782 #> [10387] 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 782 #> [10405] 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 783 #> [10423] 783 783 783 783 784 784 784 784 784 784 784 784 784 784 784 784 784 784 #> [10441] 784 784 784 784 784 784 785 785 785 785 785 785 785 785 785 785 785 785 #> [10459] 785 785 785 785 785 785 785 786 786 786 786 786 786 786 786 786 786 786 #> [10477] 786 786 786 786 786 786 786 786 786 786 786 786 786 786 787 787 787 787 #> [10495] 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 787 #> [10513] 787 787 787 787 787 788 788 788 788 788 788 788 788 788 788 788 788 788 #> [10531] 788 788 788 788 788 788 788 788 788 788 788 788 788 788 789 789 789 789 #> [10549] 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 789 #> [10567] 789 789 789 789 789 789 789 789 789 789 789 789 789 790 790 790 790 790 #> [10585] 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 790 #> [10603] 790 790 790 790 791 791 791 791 791 791 791 791 791 791 791 791 791 791 #> [10621] 791 791 791 791 791 791 791 791 791 791 791 791 791 791 792 792 792 792 #> [10639] 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 792 #> [10657] 792 792 792 792 792 792 792 792 792 792 793 793 793 793 793 793 793 793 #> [10675] 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 793 #> [10693] 793 793 793 793 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [10711] 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 794 #> [10729] 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 795 #> [10747] 795 795 795 795 795 795 795 795 795 795 796 796 796 796 796 796 796 796 #> [10765] 796 796 796 796 796 796 796 796 796 797 797 797 797 797 797 797 797 797 #> [10783] 797 797 797 797 797 797 797 797 797 797 797 797 797 797 798 798 798 798 #> [10801] 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 798 #> [10819] 798 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 799 #> [10837] 799 799 799 799 799 799 799 799 800 800 800 800 800 800 800 800 800 800 #> [10855] 800 800 800 800 800 800 800 800 800 800 800 801 801 801 801 801 801 801 #> [10873] 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 801 802 802 #> [10891] 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 802 #> [10909] 802 802 802 802 803 803 803 803 803 803 803 803 803 803 803 803 803 803 #> [10927] 803 803 803 803 803 803 804 804 804 804 804 804 804 804 804 804 804 804 #> [10945] 804 804 804 804 804 804 804 804 804 804 804 804 804 804 805 805 805 805 #> [10963] 805 805 805 805 805 805 805 805 805 805 805 805 805 805 806 806 806 806 #> [10981] 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 806 #> [10999] 806 806 806 806 806 806 806 806 806 806 806 807 807 807 807 807 807 807 #> [11017] 807 807 807 807 807 807 807 807 807 807 807 807 807 808 808 808 808 808 #> [11035] 808 808 808 808 808 808 808 808 808 808 808 808 808 808 809 809 809 809 #> [11053] 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 809 #> [11071] 809 809 809 809 809 809 809 809 809 809 809 809 810 810 810 810 810 810 #> [11089] 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 810 #> [11107] 810 810 810 810 810 810 810 811 811 811 811 811 811 811 811 811 811 811 #> [11125] 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 811 #> [11143] 811 811 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 812 #> [11161] 812 812 812 812 812 812 812 813 813 813 813 813 813 813 813 813 813 813 #> [11179] 813 813 813 813 813 813 813 813 813 813 813 813 813 813 813 814 814 814 #> [11197] 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 814 #> [11215] 814 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 815 #> [11233] 815 815 815 816 816 816 816 816 816 816 816 816 816 816 816 816 816 816 #> [11251] 816 816 816 816 816 817 817 817 817 817 817 817 817 817 817 817 817 817 #> [11269] 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 817 818 818 #> [11287] 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 818 #> [11305] 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 819 #> [11323] 819 819 819 819 819 819 819 819 819 820 820 820 820 820 820 820 820 820 #> [11341] 820 820 820 820 820 820 820 820 820 820 820 820 821 821 821 821 821 821 #> [11359] 821 821 821 821 821 821 821 821 821 821 822 822 822 822 822 822 822 822 #> [11377] 822 822 822 822 822 822 822 822 822 822 822 822 822 823 823 823 823 823 #> [11395] 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 823 #> [11413] 823 823 823 823 824 824 824 824 824 824 824 824 824 824 824 824 824 824 #> [11431] 824 824 824 824 824 824 824 824 824 824 824 824 824 824 825 825 825 825 #> [11449] 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 825 #> [11467] 825 825 825 825 826 826 826 826 826 826 826 826 826 826 826 826 826 826 #> [11485] 826 826 826 826 826 826 826 826 826 826 826 826 827 827 827 827 827 827 #> [11503] 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 827 #> [11521] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 828 #> [11539] 828 828 828 828 828 828 828 828 828 828 828 828 828 828 829 829 829 829 #> [11557] 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 829 #> [11575] 829 829 829 829 830 830 830 830 830 830 830 830 830 830 830 830 830 830 #> [11593] 830 830 830 830 830 830 830 830 830 830 830 831 831 831 831 831 831 831 #> [11611] 831 831 831 831 831 831 831 831 831 831 831 831 831 831 831 832 832 832 #> [11629] 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 832 #> [11647] 832 832 832 833 833 833 833 833 833 833 833 833 833 833 833 833 833 833 #> [11665] 833 833 833 833 833 833 833 833 833 833 833 833 834 834 834 834 834 834 #> [11683] 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 834 #> [11701] 834 834 834 835 835 835 835 835 835 835 835 835 835 835 835 835 835 835 #> [11719] 835 835 835 835 835 835 835 835 835 836 836 836 836 836 836 836 836 836 #> [11737] 836 836 836 836 836 837 837 837 837 837 837 837 837 837 837 837 837 837 #> [11755] 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 837 838 838 #> [11773] 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 838 #> [11791] 838 838 838 838 838 838 838 838 838 838 838 838 838 839 839 839 839 839 #> [11809] 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 839 #> [11827] 839 839 839 839 839 839 839 839 839 840 840 840 840 840 840 840 840 840 #> [11845] 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 840 #> [11863] 840 840 840 840 840 840 840 840 840 841 841 841 841 841 841 841 841 841 #> [11881] 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 841 842 842 #> [11899] 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 842 #> [11917] 842 842 842 842 842 842 843 843 843 843 843 843 843 843 843 843 843 843 #> [11935] 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 843 844 844 #> [11953] 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 844 #> [11971] 844 844 844 844 844 844 845 845 845 845 845 845 845 845 845 845 845 845 #> [11989] 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 845 846 846 #> [12007] 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 846 #> [12025] 846 846 846 846 846 846 846 847 847 847 847 847 847 847 847 847 847 847 #> [12043] 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 847 848 848 #> [12061] 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 848 #> [12079] 848 848 848 848 848 848 848 848 848 848 849 849 849 849 849 849 849 849 #> [12097] 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 849 #> [12115] 849 849 849 849 849 849 849 849 850 850 850 850 850 850 850 850 850 850 #> [12133] 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 850 #> [12151] 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 851 #> [12169] 851 851 851 851 851 851 851 851 852 852 852 852 852 852 852 852 852 852 #> [12187] 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 852 #> [12205] 852 852 852 852 852 852 852 852 852 852 852 852 853 853 853 853 853 853 #> [12223] 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 853 #> [12241] 853 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 854 #> [12259] 854 854 854 854 854 854 854 855 855 855 855 855 855 855 855 855 855 855 #> [12277] 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 855 #> [12295] 855 855 855 855 855 855 855 856 856 856 856 856 856 856 856 856 856 856 #> [12313] 856 856 856 856 856 856 856 856 856 856 856 857 857 857 857 857 857 857 #> [12331] 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 857 #> [12349] 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 858 #> [12367] 858 858 858 858 858 858 858 859 859 859 859 859 859 859 859 859 859 859 #> [12385] 859 859 859 859 859 859 860 860 860 860 860 860 860 860 860 860 860 860 #> [12403] 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 860 861 861 #> [12421] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 #> [12439] 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 861 862 862 #> [12457] 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 862 #> [12475] 862 862 862 862 862 862 862 862 862 862 862 863 863 863 863 863 863 863 #> [12493] 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 863 864 #> [12511] 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 864 #> [12529] 864 864 864 864 864 864 864 864 864 864 864 865 865 865 865 865 865 865 #> [12547] 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 865 #> [12565] 865 865 865 866 866 866 866 866 866 866 866 866 866 866 866 866 866 866 #> [12583] 866 866 866 866 866 866 866 866 866 867 867 867 867 867 867 867 867 867 #> [12601] 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 867 #> [12619] 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 868 #> [12637] 868 868 868 868 868 868 868 868 868 868 868 868 869 869 869 869 869 869 #> [12655] 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 869 870 #> [12673] 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 870 #> [12691] 870 870 870 870 870 870 870 870 870 870 870 870 871 871 871 871 871 871 #> [12709] 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 871 #> [12727] 871 871 871 871 871 871 871 871 871 871 872 872 872 872 872 872 872 872 #> [12745] 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 872 #> [12763] 872 872 872 872 872 872 872 872 872 872 873 873 873 873 873 873 873 873 #> [12781] 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 873 874 #> [12799] 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 874 #> [12817] 874 874 874 874 874 874 874 874 874 875 875 875 875 875 875 875 875 875 #> [12835] 875 875 875 875 875 875 875 875 875 875 875 875 875 876 876 876 876 876 #> [12853] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 #> [12871] 876 876 876 876 876 876 876 876 876 876 876 876 876 876 876 877 877 877 #> [12889] 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 877 #> [12907] 877 877 877 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 #> [12925] 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 878 879 #> [12943] 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 879 #> [12961] 879 879 879 879 879 879 879 879 879 879 879 879 879 880 880 880 880 880 #> [12979] 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 880 #> [12997] 880 880 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 881 #> [13015] 881 881 881 881 881 881 881 881 882 882 882 882 882 882 882 882 882 882 #> [13033] 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 883 883 #> [13051] 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 883 #> [13069] 883 883 883 883 883 883 883 883 883 883 883 884 884 884 884 884 884 884 #> [13087] 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 884 #> [13105] 884 884 884 884 884 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [13123] 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 885 #> [13141] 885 885 885 885 885 885 885 885 885 886 886 886 886 886 886 886 886 886 #> [13159] 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 886 #> [13177] 886 886 886 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [13195] 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 887 #> [13213] 887 887 887 887 887 888 888 888 888 888 888 888 888 888 888 888 888 888 #> [13231] 888 888 888 888 888 888 888 888 888 888 888 889 889 889 889 889 889 889 #> [13249] 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 889 890 #> [13267] 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 890 #> [13285] 890 890 890 890 890 890 890 890 890 890 890 890 891 891 891 891 891 891 #> [13303] 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 891 #> [13321] 891 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 892 #> [13339] 892 892 892 892 892 892 893 893 893 893 893 893 893 893 893 893 893 893 #> [13357] 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 893 #> [13375] 893 893 893 893 893 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [13393] 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 894 #> [13411] 894 894 894 894 894 895 895 895 895 895 895 895 895 895 895 895 895 895 #> [13429] 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 895 896 #> [13447] 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 896 #> [13465] 896 896 896 896 896 896 896 896 896 897 897 897 897 897 897 897 897 897 #> [13483] 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 897 #> [13501] 897 897 897 897 897 897 897 897 897 897 897 898 898 898 898 898 898 898 #> [13519] 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 898 #> [13537] 898 898 898 898 898 898 898 899 899 899 899 899 899 899 899 899 899 899 #> [13555] 899 899 899 899 899 899 899 899 899 899 899 899 899 899 900 900 900 900 #> [13573] 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 900 #> [13591] 900 900 900 900 900 900 900 901 901 901 901 901 901 901 901 901 901 901 #> [13609] 901 901 901 901 901 901 901 901 901 901 901 901 901 901 901 902 902 902 #> [13627] 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 902 #> [13645] 902 902 902 902 902 902 903 903 903 903 903 903 903 903 903 903 903 903 #> [13663] 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 903 #> [13681] 903 903 903 903 903 903 903 903 903 904 904 904 904 904 904 904 904 904 #> [13699] 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 904 #> [13717] 904 904 904 905 905 905 905 905 905 905 905 905 905 905 905 905 905 905 #> [13735] 905 905 905 905 905 905 905 905 905 905 905 905 905 905 906 906 906 906 #> [13753] 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 906 #> [13771] 906 906 906 906 906 906 906 906 906 906 906 906 907 907 907 907 907 907 #> [13789] 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 907 #> [13807] 907 907 907 907 907 907 907 907 907 907 907 907 908 908 908 908 908 908 #> [13825] 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 908 #> [13843] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [13861] 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 909 #> [13879] 909 909 909 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 #> [13897] 910 910 910 910 910 910 910 910 910 910 910 910 910 910 910 911 911 911 #> [13915] 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 911 #> [13933] 911 911 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 912 #> [13951] 912 912 912 912 912 912 912 912 912 912 912 912 913 913 913 913 913 913 #> [13969] 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 913 #> [13987] 913 913 913 913 913 913 914 914 914 914 914 914 914 914 914 914 914 914 #> [14005] 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 914 #> [14023] 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 915 #> [14041] 915 915 915 915 915 915 915 915 916 916 916 916 916 916 916 916 916 916 #> [14059] 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 916 #> [14077] 916 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [14095] 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 917 #> [14113] 917 917 917 917 918 918 918 918 918 918 918 918 918 918 918 918 918 918 #> [14131] 918 918 918 918 918 918 918 918 918 918 918 919 919 919 919 919 919 919 #> [14149] 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 919 #> [14167] 919 919 919 919 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [14185] 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 920 #> [14203] 920 920 920 920 920 920 920 921 921 921 921 921 921 921 921 921 921 921 #> [14221] 921 921 921 921 921 921 921 921 921 921 921 921 921 921 922 922 922 922 #> [14239] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 922 #> [14257] 922 922 922 922 922 922 922 922 922 922 922 922 922 922 923 923 923 923 #> [14275] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [14293] 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 923 #> [14311] 923 923 923 923 923 924 924 924 924 924 924 924 924 924 924 924 924 924 #> [14329] 924 924 924 924 924 924 924 924 924 924 924 924 924 924 925 925 925 925 #> [14347] 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 925 #> [14365] 925 925 925 925 925 925 925 925 925 925 926 926 926 926 926 926 926 926 #> [14383] 926 926 926 926 926 926 926 926 926 926 927 927 927 927 927 927 927 927 #> [14401] 927 927 927 927 927 927 927 928 928 928 928 928 928 928 928 928 928 928 #> [14419] 928 928 928 928 928 928 928 928 928 928 928 928 928 928 929 929 929 929 #> [14437] 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 929 #> [14455] 929 929 929 929 929 929 929 929 929 929 929 929 929 930 930 930 930 930 #> [14473] 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 930 #> [14491] 930 930 930 930 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [14509] 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 931 #> [14527] 931 931 931 931 931 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [14545] 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 932 #> [14563] 932 932 932 932 932 932 932 932 932 932 932 932 933 933 933 933 933 933 #> [14581] 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 933 #> [14599] 933 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 934 #> [14617] 934 934 934 934 934 934 934 934 934 934 934 935 935 935 935 935 935 935 #> [14635] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 #> [14653] 935 935 935 935 935 935 935 935 935 935 935 935 935 935 935 936 936 936 #> [14671] 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 936 #> [14689] 936 936 936 936 936 936 936 936 936 936 937 937 937 937 937 937 937 937 #> [14707] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 #> [14725] 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 937 938 938 #> [14743] 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 938 #> [14761] 938 938 938 938 938 938 938 938 938 938 939 939 939 939 939 939 939 939 #> [14779] 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 939 #> [14797] 939 939 939 939 939 939 940 940 940 940 940 940 940 940 940 940 940 940 #> [14815] 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 940 #> [14833] 940 940 940 940 940 940 941 941 941 941 941 941 941 941 941 941 941 941 #> [14851] 941 941 941 941 941 941 941 941 941 941 941 941 941 941 942 942 942 942 #> [14869] 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 942 #> [14887] 942 942 942 942 942 942 942 942 942 942 942 942 942 943 943 943 943 943 #> [14905] 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 943 #> [14923] 943 943 943 943 943 943 944 944 944 944 944 944 944 944 944 944 944 944 #> [14941] 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 944 #> [14959] 944 944 944 944 944 944 944 944 944 944 945 945 945 945 945 945 945 945 #> [14977] 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 945 #> [14995] 945 945 945 945 945 945 945 945 945 946 946 946 946 946 946 946 946 946 #> [15013] 946 946 946 946 946 946 946 946 946 946 946 946 946 947 947 947 947 947 #> [15031] 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 947 #> [15049] 947 947 947 947 947 947 947 947 947 947 947 947 948 948 948 948 948 948 #> [15067] 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 948 #> [15085] 948 948 948 948 948 948 948 948 948 949 949 949 949 949 949 949 949 949 #> [15103] 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 949 #> [15121] 949 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 #> [15139] 950 950 950 950 950 950 950 950 950 950 950 950 950 950 950 951 951 951 #> [15157] 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 951 952 952 #> [15175] 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 952 #> [15193] 952 952 952 952 952 952 952 952 952 952 952 952 952 953 953 953 953 953 #> [15211] 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 953 #> [15229] 953 953 953 953 953 953 953 954 954 954 954 954 954 954 954 954 954 954 #> [15247] 954 954 954 954 954 954 954 954 954 954 954 954 954 954 955 955 955 955 #> [15265] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [15283] 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 955 #> [15301] 955 955 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 956 #> [15319] 956 956 956 956 956 956 956 956 956 956 956 956 957 957 957 957 957 957 #> [15337] 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 957 #> [15355] 957 957 957 957 957 957 957 957 957 957 957 957 958 958 958 958 958 958 #> [15373] 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 958 #> [15391] 958 958 958 958 958 958 958 958 958 959 959 959 959 959 959 959 959 959 #> [15409] 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 959 #> [15427] 959 959 959 959 959 959 959 960 960 960 960 960 960 960 960 960 960 960 #> [15445] 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 960 #> [15463] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 #> [15481] 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 961 962 962 #> [15499] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 962 #> [15517] 962 962 962 962 962 962 962 962 962 962 962 962 962 962 963 963 963 963 #> [15535] 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 963 #> [15553] 963 963 963 963 963 963 963 964 964 964 964 964 964 964 964 964 964 964 #> [15571] 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 964 #> [15589] 964 964 964 964 964 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [15607] 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 965 #> [15625] 965 965 965 965 965 965 966 966 966 966 966 966 966 966 966 966 966 966 #> [15643] 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 966 #> [15661] 966 966 966 966 966 967 967 967 967 967 967 967 967 967 967 967 967 967 #> [15679] 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 967 968 #> [15697] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 #> [15715] 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 968 969 #> [15733] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 #> [15751] 969 969 969 969 969 969 969 969 969 969 969 969 969 969 969 970 970 970 #> [15769] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 #> [15787] 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 970 971 #> [15805] 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 971 #> [15823] 971 971 971 971 971 971 971 971 971 972 972 972 972 972 972 972 972 972 #> [15841] 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 972 #> [15859] 972 972 972 972 972 972 972 973 973 973 973 973 973 973 973 973 973 973 #> [15877] 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 973 #> [15895] 973 973 973 973 973 973 973 973 973 973 973 974 974 974 974 974 974 974 #> [15913] 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 974 #> [15931] 974 974 974 974 974 974 974 974 974 974 975 975 975 975 975 975 975 975 #> [15949] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 #> [15967] 975 975 975 975 975 975 975 975 975 975 975 975 975 975 975 976 976 976 #> [15985] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [16003] 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 976 #> [16021] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 #> [16039] 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 977 978 #> [16057] 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 978 #> [16075] 978 978 978 978 978 978 978 978 978 978 979 979 979 979 979 979 979 979 #> [16093] 979 979 979 979 979 979 979 979 979 979 979 979 979 980 980 980 980 980 #> [16111] 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 980 #> [16129] 980 980 980 980 980 981 981 981 981 981 981 981 981 981 981 981 981 981 #> [16147] 981 981 981 981 981 981 981 981 981 981 981 981 981 982 982 982 982 982 #> [16165] 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 982 #> [16183] 982 982 982 982 982 982 982 982 982 982 982 983 983 983 983 983 983 983 #> [16201] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [16219] 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 983 #> [16237] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 #> [16255] 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 984 985 #> [16273] 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 985 #> [16291] 985 985 985 985 985 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [16309] 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 986 #> [16327] 986 986 986 986 986 986 986 986 986 986 986 987 987 987 987 987 987 987 #> [16345] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 987 #> [16363] 987 987 987 987 987 987 987 987 987 987 987 987 987 987 988 988 988 988 #> [16381] 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 988 #> [16399] 988 988 988 988 988 988 988 988 988 988 988 989 989 989 989 989 989 989 #> [16417] 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 989 #> [16435] 989 989 989 989 989 989 989 990 990 990 990 990 990 990 990 990 990 990 #> [16453] 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 990 #> [16471] 990 990 990 990 990 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [16489] 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 991 #> [16507] 991 991 991 991 991 992 992 992 992 992 992 992 992 992 992 992 992 992 #> [16525] 992 992 992 992 992 992 992 992 992 992 993 993 993 993 993 993 993 993 #> [16543] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [16561] 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 993 #> [16579] 993 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 994 #> [16597] 994 994 994 994 994 994 994 994 994 995 995 995 995 995 995 995 995 995 #> [16615] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [16633] 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 995 #> [16651] 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 996 #> [16669] 996 996 996 996 996 996 996 996 996 996 996 996 996 997 997 997 997 997 #> [16687] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [16705] 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 997 #> [16723] 997 997 997 997 997 997 998 998 998 998 998 998 998 998 998 998 998 998 #> [16741] 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 998 #> [16759] 998 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #> [16777] 999 999 999 999 999 999 999 999 999 999 999 999 999 999 #>  #> [[4]] #>     [1]   1   1   2   3   5   6   7   4   5   0  12   6   0   1   2   6  13  14 #>    [19]  14  15   3  16   2  19  20  21   5   7  15  16  21  11  14  26   1  27 #>    [37]  26  27   7  22   2   3   5   8  15   7   9  11  14  29   6  12  26  33 #>    [55]   6   7  13  15  21  23  27  31   8  10  31  32   7  18  23  37   2  12 #>    [73]  28   3  11  31  35   1   4   5  18  35   3   4  15  23  26  42  13  23 #>    [91]  26  39  40  14  30  33   5  11  15  22  34  10  11  13  14  18  21  24 #>   [109]  40  43  24  45  10  11  22  25  47  12  28  32  36  11  12  19  22  27 #>   [127]  34  40   1   8  17  25  30  34  37  47   6  16  20  21  22  24  29  36 #>   [145]  49  50   0   1   2   7  10  16  24   1   4  20  33  40  44   2  11  30 #>   [163]  53  19  29  39  41  50   1   2   9  32  56   1  18  30  32  36  55  58 #>   [181]  59  50  55   2  15  16  17  18  21  27  36  39  51  57  61   3   4  16 #>   [199]  38  59   5  12  34  39   7  10  13  16  38  53  61   3   6  32  41  42 #>   [217]  46  47  52  18  22  33  45  47  50  55   6  20  31  42  65  24  25  28 #>   [235]  35  45  64   7  14  15  22  29  56  69   0   4   7   9  36  42  45  53 #>   [253]   7   9  24  67   3  18  20  23  26  29  42  57  69   0  15  43  46  47 #>   [271]  51  52  63  26  39  58  66  72  19  38  41  50  13  17  61  77   9  24 #>   [289]  32  33  38  40  41  48  50  73  76  44  45  49  51  52  74  76   5  23 #>   [307]  27  29  42  47  49  53  59  65   5   7  10  15  20  24  35  45  59  62 #>   [325]   8  12  18  22  27  32  43  61  79   1   2  12  15  25  39  64  70  71 #>   [343]  15  23  26  43  51  71  80  83   7  15  27  41  44  47  48  54  57  58 #>   [361]  65  66  74  81  82   3  10  14  27  42  43  52  80  85   5  13  15  25 #>   [379]  50  65  76  88   1   6  15  19  31  33  38  57   6  12  18  38  59  60 #>   [397]  71  88   4   5  13  14  15  25  27  53  54  55  56  61  75  79  87   0 #>   [415]  26  29  32  43  64  66  72  79  84  16  43  46  49  60  61  72  83  89 #>   [433]   4  33  35  49  50  67  79  83  86  94  21  23  47  49  50  70  77  92 #>   [451]  95   5  11  12  17  44  49  60   9  24  35  36  56  59  61  66  77  80 #>   [469]  84  11  40  54  74   0   4  13  24  32  34  46  76  83  95   9  12  13 #>   [487]  23  53  61  66  77   1  12  21  24  39  44  84   1  30  56  81  90 101 #>   [505]   5  25  26  38  50  55  60  69  83   1   5  81  87  88   2  12  14  15 #>   [523]  17  26  31  54  63  91  98   0   9  17  24  27  29  43  59  72  94  99 #>   [541] 106   6  21  27  38  45  67  73  83  84 102 104  17  18  21  28  34  54 #>   [559]  64  76   4  20  24  36  37  40  65  74  91  92  95 108  11  12  42  46 #>   [577]  54  56  80  82  89  98  21  54  78  83  89  93  99  23  36  39  49  52 #>   [595]  57  59  62  64  74  75  78  80  85  91  94  96 101 107   8  39  48  53 #>   [613]  67  76  85  95 105 111   4  16  20  40  50  57  59  79  83  84  89  90 #>   [631] 101 102   1  10  11  19  34  35  42  47  57  58  64  80  82  91  98 103 #>   [649] 108 111   2  17  21  23  27  64  76  85 103 107   4   6  17  18  33  41 #>   [667]  53  64  68  83  93 109 111 114 115   0  24  26  39  49  73 100   7   9 #>   [685]  22  31  40  54  57  66  89 101 102  13  29  40  49  73  75  85  89  96 #>   [703]  97 103 105 108 112 115   1   4  20  29  38  62  64  88  98 102 106 113 #>   [721] 120  16  19  21  31  37  65  66  72  77 114 115 116   5  13  14  15  16 #>   [739]  24  39  47  53  57  59  64  65  73  74  83  91  96  99 103 109 116  11 #>   [757]  19  25  38  42  47  56  66  77  82  92  10  15  19  76  77  82  84 103 #>   [775] 123 125   0  15  18  22  23  27  33  44  54  55  62  73  80  85 111 113 #>   [793]   1  11  13  19  26  53  70  93  97 101 112 120 124   1   9  40  44  56 #>   [811]  61  67  68  72  88  90  99 101 104 113  16  23  31  36  50  52  94  95 #>   [829] 108 114 115   4   6  17  25  27  40  45  49  54  55  57  58  59  60  65 #>   [847] 105 110 114 119 126  17  35  36  37  38  41  43  58  63  68  78 107 125 #>   [865]   1   4   5   7  23  32  37  65  76  79  89 101 109 126  13  24  32  45 #>   [883]  48  53  67  74  77  78  81  97 120   0  11  16  27  35  68  74  76  77 #>   [901]  78  84 109 124   0  11  12  23  34  38  66  89  92 119 129 131 133 135 #>   [919]   2   3   4  11  17  22  24  32  38  40  42  49  50  54  88  89  90 101 #>   [937] 102 116 119 128  11  14  22  27  48  53  58  63  66  67  68  82  85  95 #>   [955]  98 119 131   7  19  31  44  49  91  94 109 129 132 137  22  25  53  67 #>   [973]  73  74  79  82  88  93 106 107 114 124 127 132  19  23  28  56  73  82 #>   [991] 110 119 120 121 127   5   6  14  26  44  52  70  88  94 103 126   1  18 #>  [1009]  19  59  73  76 106 107 135 136 140   5   8  12  13  32  35  38  51  73 #>  [1027]  74  75  85 110 121 123 125 135   4  10  11  20  26  44  48  60  64  96 #>  [1045] 103 131 135 143   4   6  15  17  57  61  72  77  79  80  84  87  95  99 #>  [1063] 102 103 104 118 124 127 144   6  14  26  45  47  49  58  59  63  71  85 #>  [1081]  87 102 112 116 120 133 138 144  31  66  80  99 111 116 140 144 145   6 #>  [1099]   7   8  19  42  44  56  70  72  80  94 104 108 113 123 126 138 140 148 #>  [1117]   2   8  10  18  24  32  34  36  37  53  86  89  90 105 117 118 124 148 #>  [1135] 149   0  19  40  45  64  68  78 104 108 110 114 119 139   7   8  18  22 #>  [1153]  24  25  41  45  47  50  73 101 109 126 134  14  28  63  74  77  87  97 #>  [1171] 121 144   3   7  17  28  41  52  53  63  90  98 101 104 133 140 151   2 #>  [1189]  26  48  58  65  80  82  90  94 102 103 115 130 134  12  13  14  21  37 #>  [1207]  50  51  70  83  84 104 112 113 119 134 154   7  23  32  46  52  56  62 #>  [1225]  67  76  77  79  86  91  98 106 109 110 111 121 150  12  13  16  40  47 #>  [1243]  61  65  72  76  78  80  90 112 113  20  21  22  26  60  66  67  86 110 #>  [1261] 124 137 144   3  12  27  28  29  45  49  55  89  99 106 110 114 115 126 #>  [1279] 132 139 149 159  18  22  29  67  78  92  95 102 132 154   8  10  14  16 #>  [1297]  25  34  43  49  54  55  59  63  80  98 109 112 132 134 151 152   8  11 #>  [1315]  12  65  79  80  85  93 102 113 121 124 130 139 147 149 158   1   5   9 #>  [1333]  27  44  77  81  85  91  92  93  96 114 143 154   6  15  20  22  24  25 #>  [1351]  60  64 107 114 120 132 135 137 154   2  15  24  32  43  51 107 115 135 #>  [1369] 140 145 161  10  36  91  96 115 118 122 123 137 157   0  17  19  25  38 #>  [1387]  56  90 103 137 139 160  11  21  22  40  51  58  80  83  94 110 113 141 #>  [1405] 163 165   2   4  35  39  46  47  52  56  65  70  75  76  80  83  88  95 #>  [1423]  97 122 146 149 156 163 168   0  17  40  46  55  57  62  63  68  96 107 #>  [1441] 108 110 111 113 140 148   3   5   8  11  12  20  22  26  30  31  45  61 #>  [1459]  78  82  99 107 128 149 150 152   3   6  21  39  44  50  68  98 101 105 #>  [1477] 121 139 142 164 170 172   1  10  38  57  64  66  67  68  86  93 108 140 #>  [1495] 149 150 153   1  10  33  77  84 105 132 145   1   9  16  23  28  47  75 #>  [1513] 112 115 117 125 140 149 156 157   7  13  17  21  35  42  70  72  78  80 #>  [1531]  94  97 100 109 135 136 143 148 149 160  12  14  16  22  38  41  47  52 #>  [1549]  76  86  95  96 110 120 168  16  29  35  40  56  58  71  83  88  97 100 #>  [1567] 104 127 150 171 172  32  33  42  44  47  56  61  70  79  80  82  85  90 #>  [1585]  98 115 120 138 159 164 169   3   9  21  22  25  28  32  42  44  58  59 #>  [1603]  61  75  86 106 111 118 127 140 149 160 174 176   4   5  20  28  61  65 #>  [1621]  69  86  87  94 162 166 168 172 176  15  32  40  64  66  68  70  85  86 #>  [1639] 106 111 128 139 141 155 176   1   9  17  40  53  67  85  89  99 104 107 #>  [1657] 109 110 126 148 158 162 172   0  56  75  79  91  94 115 117 119 123 128 #>  [1675] 129 135 151   8  11  21  26  50  53  56  60  62  69 106 107 137 144 150 #>  [1693] 157 158 169 172  16  32  33  39  40  41  46  64  80  81  96 104 155 165 #>  [1711] 171 186   2  12  16  27  28  30  32  33  37  73  92  93  98 137 144 155 #>  [1729] 165 183   8   9  46  51  70  82  85  92  94 106 124 125 132 133 137 141 #>  [1747] 143 145 153 155 161 163 174 179  11  12  26  40  60  72  73  75  77  95 #>  [1765]  99 104 118 119 125 127 134 139 142 143 144 161 179   1  10  21  42  65 #>  [1783]  72  89  98 111 118 136 141 175 180 187  12  16  19  25  58  88 106 108 #>  [1801] 111 113 114 117 128 138 139 144 155 156 159 178  31  46  69  85  92 111 #>  [1819] 126 131 132 135 142 150 153 158 159 171 173 174   0  33  41  47  67  74 #>  [1837]  82  84  89  97 106 120 129 136 152 168 172 174 188   2  19  23  32  45 #>  [1855]  54  66  67  76  81  90 103 111 112 123 133 134   1  14  33  41  82  86 #>  [1873]  95  99 104 111 115 119 120 123 130 147 157 165 166 175 185 186  13  15 #>  [1891]  43  79  84  92  98 117 135 145 160 173 181 190   1   2  11  25  32  42 #>  [1909]  46  52  74  78  87  90  91  96 115 178 189   0   2   5  11  13  22  32 #>  [1927]  47  50  79  94 118 125 126 128 133 148 153 156 159 191   8  22  39  42 #>  [1945]  47  72  74  76  85  87 119 123 131 133 142 160 171 196   8   9  16  25 #>  [1963]  27  37  38  45  62  65  93 113 142 145 154 172 175 191   0   9  21  24 #>  [1981]  27  35  38  41  60  93  95 110 132 134 143 161 192   8   9  12  36  49 #>  [1999]  74  81  82  84  92  98 137 150 176 184 198 201 202   0   8  17  27  30 #>  [2017]  44  48  58  74 104 110 115 116 121 131 133 153 157 165 167 175 189 196 #>  [2035] 199 201   1   8  18  21  36  54  65  79  81 103 133 146 154 159 178  11 #>  [2053]  17  44  48  55  85  94 112 120 128 132 155 164 175 176 178 193 195 197 #>  [2071] 198 204  13  18  19  32  37  40  43  52  53  57  69  80 105 120 124 137 #>  [2089] 148 151 154 165 188 190 202 203  13  15  17  31  38  42  49  56  61  73 #>  [2107]  93 102 110 114 123 146 172 173 193 197 201   2  13  17  24  31  38  43 #>  [2125]  45  49  53  57  60  77  83  86  90 104 108 111 114 116 119 135 139 169 #>  [2143] 180 181 183 190   0   5   7  14  28  41  48  53  57  59  82 109 148 163 #>  [2161] 169 176 181 190 201   4   5   6   8  14  15  34  41  47  57  69  71  90 #>  [2179]  96 135 152 159 165 179 191   1  21  46  49  50  52  71  72  85  88  90 #>  [2197]  93 113 125 131 143 152 160 171 178 197 201  18  24  27  35  49  52  59 #>  [2215]  64  74  88 106 112 117 125 132 151 169 181 186 197 212   0   1   3  20 #>  [2233]  42  54  59  63  91 117 124 126 137 144 153 164 168 171 175 177 178 191 #>  [2251] 196 202   1  40  42  62  75  78  92  93  96  97 109 110 113 137 156 168 #>  [2269] 192 206 207 214   4  12  15  22  25  27  32  43  45  57  60  94 108 109 #>  [2287] 115 129 132 133 134 156 159 166 190 194 212 213   4  14  19  35  48  61 #>  [2305]  69  71  81  95  96 124 159 174 179 180 183 191 196 209   1  11  14  40 #>  [2323]  43  54  61  71  82  90  92 130 133 146 152 166 176 184 201  24  31  33 #>  [2341]  36  41  47  58  59  68  75  82  86  91  96 131 133 189 204 211 214   3 #>  [2359]   6   9  24  34  49  50  63  66  85 105 110 113 114 119 121 123 142 153 #>  [2377] 154 184 185 187 193 194 201 207   0  23  28  35  37  56  65  68  84  99 #>  [2395] 127 157 163 179 193 205  11  31  60  62  66  67  95 100 111 113 149 177 #>  [2413] 184 187 205   1  37  51  55  60  63  64  66  71  77  79  81 101 124 130 #>  [2431] 135 139 143 145 148 149 154 155 174 187 204 205 206   1  26  27  31  51 #>  [2449]  57  61  65  87  97 118 127 133 136 137 164 173 179 192 202 205   8  16 #>  [2467]  19  24  46  54  62  97 104 107 114 117 128 144 149 153 164 165 181 182 #>  [2485] 184 186 202 217  11  16  28  45  48  50  53  56  91 107 115 128 151 186 #>  [2503] 192 194 195 210 219  34  57  61  70  88  97 105 112 142 143 168 196  40 #>  [2521]  48  49  58  89 100 105 141 146 155 172 188 210 214 215 220  42  43  51 #>  [2539]  57  64  66  70  73  94  99 103 116 135 137 162 167 172 180 190 191 201 #>  [2557] 205 224   4   5  28  33  40  62  67  87 101 112 121 127 138 150 155 156 #>  [2575] 186 190 192 194 201 221 224  21  51  52  90  99 100 103 110 111 118 128 #>  [2593] 138 147 168 170 173 197 198 213 225  23  28  32  36  84  94 107 126 129 #>  [2611] 137 164 191 193 197 198 229   9  10  16  21  22  30  39  45  58  69  74 #>  [2629]  86  90  93  95 116 117 124 130 131 133 140 142 147 150 166 182 189 195 #>  [2647] 212 226   5   8  22  45  54  65  74  85  90 118 125 131 133 139 142 149 #>  [2665] 170 172 192 201 209 214   0  11  16  28  32  41  68  73  79  95  98 101 #>  [2683] 121 142 144 149 153 156 170   5  20  30  31  42  50  54  60  63  97 117 #>  [2701] 136 147 152 153 175 190 200 208 209 212 227   3   8  14  17  21  22  24 #>  [2719]  43  56  64  72  75  83  90  93 105 110 120 128 134 136 137 142 143 171 #>  [2737] 186 187 191 196 206 222 226 227   2   3  11  32  53  54  69  85  89 103 #>  [2755] 121 124 132 137 145 170 175 197 199 213 222 230 231 233   4   6   8  25 #>  [2773]  44  46  51  55  59  60  80  83 118 123 127 128 149 150 165 166 187 206 #>  [2791] 213 224 229 230 235 238   2   4  10  16  27  61  86 107 114 132 148 153 #>  [2809] 154 170 175 185 191 215 231 239   9  16  17  30  49  50  60  71  87  89 #>  [2827]  96 115 124 131 137 159 169 175 177 180 183 185 189 201 204 210 225 231 #>  [2845] 232   2   7  13  14  23  54  65  68  73  83  84  85  88 112 127 129 131 #>  [2863] 132 136 156 157 159 160 161 162 169 173 175 180 201 204   0  20  26  35 #>  [2881]  36  37  56  57  72  90  91 104 105 109 112 141 149 170 172 208 216 225 #>  [2899] 229 235 240   3  14  27  29  47  50  59  87  96 104 105 110 112 113 118 #>  [2917] 123 124 136 145 190 206 213 237   2  11  12  26  34  36  37  40  45  72 #>  [2935]  79 115 120 169 171 174 185 192 218 234 241   2  11  29  52  56  65  83 #>  [2953]  87  90 118 132 134 167 171 172 175 176 196 202 211 213 225 226   5  11 #>  [2971]  27  44  46  52  54  59  90 110 115 116 122 128 132 140 148 164 182 206 #>  [2989] 211 220 225   7   9  10  16  18  23  42  44  68  70  75  79  95 109 137 #>  [3007] 154 155 160 170 172 181 186 214 218 219 232 235 242 245  13  24  45  50 #>  [3025]  61  97 115 124 138 140 157 161 162 168 171 184 189 194 221 248  17  21 #>  [3043]  31  32  37  44  50  51  52  54  62  69  71  72  88  99 116 133 137 152 #>  [3061] 161 168 198 203 221 231 233 236  12  14  18  22  24  30  33  36  38  52 #>  [3079]  66  72  81  86 100 110 117 140 141 144 153 154 189 250   2  17  50  53 #>  [3097]  54  55  66  69  80  88  90 111 129 134 144 145 148 150 161 177 179 201 #>  [3115] 204 218 222 235 236 238 240 247  27  55  56  79  91  95 113 121 132 136 #>  [3133] 143 149 184 185 187 189 195 217 231 239 249   7  25  36  38  61  67  88 #>  [3151]  96 108 122 141 143 144 182 184 192 193 195 199 201 204 210 212 226 250 #>  [3169]  11  13  22  49  56  86 102 107 119 138 140 150 156 161 174 182 184 187 #>  [3187] 213 215 221 237 244 250  21  25  29  33  41  47  57  66  86  93  97 102 #>  [3205] 107 111 139 150 165 172 199 200 202 227 236 251   0   6  13  23  33  50 #>  [3223]  51  59  68  79  80  89 106 111 119 144 150 152 153 169 171 179 181 183 #>  [3241] 185 200 205 206 213 215 225 229 235 238 240 241 248 252   1  18  20  23 #>  [3259]  34  53  62  71  72  80 118 131 142 152 156 174 175 176 179 195 197 199 #>  [3277] 204 217 220 239 244 246 250  39  50  67  72  97 140 146 190 215 221 226 #>  [3295] 230 247  35  43  51  61  80  89  91  96 101 104 110 144 146 152 153 159 #>  [3313] 167 170 180 182 184 186 214 222 239 244 252 255 256   5   8  42  55  59 #>  [3331]  81  90 131 138 142 150 159 190 202 211 218 233   5  19  21  41  44  46 #>  [3349]  80  84  91  92  93 108 130 133 140 141 152 188 198 220 223 231 237 254 #>  [3367] 255 258   1   9  27  28  33  37  43  44  50  57  60  77  79  87  91 108 #>  [3385] 109 123 135 137 138 139 147 172 187 201 219 226 234 243  10  20  26  31 #>  [3403]  35  40  41  44  49  60  67  72  86 106 107 121 126 130 223 224 242 253 #>  [3421] 256   6  28  29  36  61  76  84 112 123 125 131 178 193 202 207 215 217 #>  [3439] 220 224 228 238 250 255   6  12  17  27  28  41  42  62  74 106 120 136 #>  [3457] 146 163 168 175 196 206 215 219 225 250 254  11  29  34  40  46  52  57 #>  [3475]  61  66  73  78 102 110 122 126 131 141 149 154 165 180 193 196 197 198 #>  [3493] 199 201 235 246   1   3   8  12  37  38  39  79  88  89 106 112 114 128 #>  [3511] 137 147 149 156 196 198 205 206 222 242 249 251 252 254 258 263 265  26 #>  [3529]  58  62  72  76  77  81  91  99 108 114 115 118 178 190 195 200 237 243 #>  [3547] 249 264   2   5   6   7  25  27  29  34  44  52  53  56  67 123 141 151 #>  [3565] 155 156 163 165 193 199 230 249 257   1   5   8  14  16  25  26  34  41 #>  [3583]  47  53  67  75  82  84  86 110 111 123 133 137 139 140 148 151 156 161 #>  [3601] 168 176 180 210 241 243 250 268  14  35  37  60  86 102 103 140 151 152 #>  [3619] 155 172 177 193 198 218 221 229 239 258   5   8  11  17  20  48  67  91 #>  [3637]  92 106 109 114 119 127 133 134 159 161 164 165 170 178 182 206 234 240 #>  [3655] 250 254 259 265 272  14  16  21  22  30  67  76  86 115 121 123 128 132 #>  [3673] 137 143 172 183 186 189 192 194 196 222 226 238 269   4   8  27  31  34 #>  [3691]  38  43  49  50  86  97 105 114 130 140 144 152 159 174 178 181 183 184 #>  [3709] 196 198 200 212 232 243 249 256 270   3   6  19  21  26  30  31  73  75 #>  [3727]  87  91  94  99 112 113 120 137 140 143 156 170 182 189 201 215 218 224 #>  [3745] 236 244 248 260   5  16  28  33  51  62  97 102 106 125 143 148 154 165 #>  [3763] 169 183 194 211 212 214 218 223 225 226 233 243 245 256 257   5  11  13 #>  [3781]  32  37  57  58  78  87  93 120 128 148 173 175 196 198 205 217 227 239 #>  [3799] 262 264 269 271 277  13  17  21  47  81  86 109 130 135 139 150 155 157 #>  [3817] 178 188 191 192 226 227 230 236 274  16  29  47  48  63  72  73  92  98 #>  [3835] 122 126 130 150 177 178 183 187 188 190 201 204 212 214 229 241 270  13 #>  [3853]  20  40  52  56  57  68  72  79  95  98 104 107 116 118 121 130 138 154 #>  [3871] 171 177 178 191 192 193 203 206 235 250 256 258 279  22  32  44  55  59 #>  [3889]  73  76  89  96 138 146 150 182 206 218 220 223 225 236 238 240 249 251 #>  [3907] 253  17  25  28  30  46  52  74  93 103 127 149 153 161 162 166 205 213 #>  [3925] 215 218 233 264 281 282   2   4   9  13  15  25  28  30  49  50  58  86 #>  [3943] 101 105 107 115 123 149 166 185 202 246 259 266 272   8  12  15  21  35 #>  [3961]  69  70  83 106 116 130 135 136 148 151 160 163 185 190 197 199 209 210 #>  [3979] 215 227 246 278 283  29  36  58  66 100 110 132 160 165 169 171 174 183 #>  [3997] 190 209 215 232 234 239 243 250 251 261 266 272 276   4   6  27  32  39 #>  [4015]  59  73  94 107 123 126 155 161 165 168 173 184 187 196 228 241 242 251 #>  [4033] 258 268 270 277   0  12  26  28  53  81  87  98 109 111 118 134 144 148 #>  [4051] 160 178 200 206 216 223 227 242 268 275 276   1   5   6  11  17  23  25 #>  [4069]  35  37  46  76  87 122 126 128 138 139 142 148 158 188 198 202 204 206 #>  [4087] 232 269  11  19  39  41  62 107 126 140 164 167 169 180 181 182 199 208 #>  [4105] 217 222 226 234 237 261 272 276 282 287   5   6   8  37  77  83  87  89 #>  [4123]  90  91  97 114 117 155 160 162 163 166 168 182 195 197 200 216 223 248 #>  [4141] 251 254 261 280 284   1  21  57  62 100 110 119 121 129 132 157 167 187 #>  [4159] 188 191 215 220 238 262 271 273 282 284   3   6   9  20  28  31  43  44 #>  [4177]  59  70  73 103 126 133 141 149 154 156 158 167 171 182 183 184 202 214 #>  [4195] 219 233 242 247 248 251 254 257 262   1  15  22  35  38  51  65  73  89 #>  [4213]  91 111 128 141 158 160 161 168 170 173 182 191 192 195 202 206 247 250 #>  [4231] 258 261 262 264 267 269 274 285 293  10  19  29  46  47  48  61  66  67 #>  [4249]  71  77  91  94  96 103 105 111 136 151 152 154 159 173 175 176 188 192 #>  [4267] 204 214 227 231 236 244 247 255 268 277 286 294   5  28  32  35  37  42 #>  [4285]  44  45  47  63  64  71 125 133 137 139 158 174 178 180 190 199 210 254 #>  [4303] 283  15  22  34  35  36  51  62  81  89  97 125 140 143 150 168 169 172 #>  [4321] 190 217 237 268 277 278   2  22  38  46  65  80 105 107 115 116 126 131 #>  [4339] 137 154 156 160 185 194 205 209 230 238 254 258 289 297  16  25  32  34 #>  [4357]  61  86  96  97 118 124 129 146 167 169 185 187 188 203 204 205 211 212 #>  [4375] 228 237 251 269 280 284  73 132  48 146 186 126 150  88  39  29 182 154 #>  [4393] 218 161  91 161 162 142 172 175  93 119 122  94 219 237 115 148 134 297 #>  [4411] 261  89 130 137  54 196 102 290 186 256 137 288 217  71 185 283 264  37 #>  [4429]  28 206 115 223  77 218 178 199 121  58  61 115  40 231  84  58 109 193 #>  [4447]  26 255 168 176 215  15 202  80 261 210  94 261 119 222 238  68  34 232 #>  [4465] 262 246  48  59 224  79   2 119 102  51  42  44 225  72 255  73 128 176 #>  [4483] 248 289 140  13 145  47 285  23   7 251   5 106 110 112 147 241  28  44 #>  [4501]  56  99 168  59 149 181  84 260 141 227 229 184 182 204 275  63 286 221 #>  [4519]  89 102 164  24  51  58  88 160  50 293 213 148 186 233  71 171 198 121 #>  [4537]   3  79  64 188 274 184 185 211  64 124 211 204  12  41  42 170 295  42 #>  [4555] 164 282 100  48 242 141  38 151  40  80  47 218 132  32 169 161 192 243 #>  [4573]  35 188 137 294 184 143 156 205 190  35 170 199  81 182 138 183  16 283 #>  [4591] 168 175 300 301 300 301 308 314 310 300 309 303 303 309 318 310 303 306 #>  [4609] 302 309 320 309 315 307 310 311 328 329 300 319 307 311 326 332 312 318 #>  [4627] 328 309 329 315 322 306 307 329 301 310 321 324 329 334 337 338 300 313 #>  [4645] 319 333 336 313 308 313 317 304 337 308 342 305 336 310 347 351 308 312 #>  [4663] 328 350 300 348 310 334 337 313 318 311 356 332 303 306 315 318 328 336 #>  [4681] 302 312 315 335 318 325 362 315 328 363 356 308 318 340 350 331 334 310 #>  [4699] 333 361 325 329 346 350 353 313 323 328 338 358 373 348 314 315 326 339 #>  [4717] 332 335 337 348 363 369 374 358 373 378 363 373 300 301 326 325 344 359 #>  [4735] 316 334 345 351 355 375 343 355 372 314 315 321 322 343 353 360 375 318 #>  [4753] 328 347 354 356 367 310 315 350 364 381 341 366 390 325 330 307 314 315 #>  [4771] 324 339 362 311 317 338 389 300 302 321 332 363 371 315 329 335 372 305 #>  [4789] 313 356 369 303 345 347 373 302 306 312 339 347 356 377 311 317 325 371 #>  [4807] 375 384 386 396 306 307 363 399 400 307 312 341 376 379 386 399 312 320 #>  [4825] 330 338 344 371 376 387 395 306 358 362 388 395 322 330 337 350 379 398 #>  [4843] 301 323 327 346 349 391 402 317 323 346 307 329 351 378 400 402 315 343 #>  [4861] 350 338 347 378 314 324 330 346 364 372 375 400 336 368 324 331 332 357 #>  [4879] 369 316 327 331 353 371 351 358 382 401 409 414 337 346 352 358 359 363 #>  [4897] 378 387 390 393 396 399 303 362 371 373 397 311 320 331 398 407 375 387 #>  [4915] 403 306 352 361 404 406 300 309 337 342 393 408 303 317 372 377 384 407 #>  [4933] 413 416 309 311 334 400 413 315 323 335 344 347 348 356 377 385 401 419 #>  [4951] 309 356 369 384 303 305 326 331 339 353 373 390 408 415 310 334 374 383 #>  [4969] 409 411 300 319 325 343 362 375 380 388 405 406 412 414 308 318 358 374 #>  [4987] 383 387 405 300 319 348 362 386 390 424 303 346 348 353 358 380 384 407 #>  [5005] 428 303 310 340 376 402 421 430 302 334 351 353 356 380 390 416 419 424 #>  [5023] 432 347 354 337 364 388 415 315 333 336 350 356 365 407 415 423 317 318 #>  [5041] 323 331 343 363 392 409 417 429 330 349 354 357 394 406 300 346 351 382 #>  [5059] 387 402 307 324 356 358 378 416 436 329 350 368 395 412 422 428 433 357 #>  [5077] 379 380 388 400 410 411 417 423 428 317 318 334 359 392 315 330 340 388 #>  [5095] 389 428 338 355 379 409 415 420 336 352 380 386 404 406 411 413 419 319 #>  [5113] 322 331 343 346 357 389 433 437 328 339 403 418 443 320 335 366 403 437 #>  [5131] 446 312 328 359 392 404 413 424 302 304 343 346 366 438 310 376 390 394 #>  [5149] 422 433 448 308 313 342 343 347 423 315 318 373 395 407 409 422 434 439 #>  [5167] 448 451 330 339 362 378 380 397 428 454 360 375 407 410 420 368 419 423 #>  [5185] 425 346 354 355 376 380 385 389 406 420 428 430 448 376 393 412 436 332 #>  [5203] 356 361 362 371 378 415 321 334 358 362 366 381 445 447 306 314 338 369 #>  [5221] 387 423 435 449 311 318 335 337 342 353 361 374 400 415 426 427 431 308 #>  [5239] 321 335 366 392 399 404 415 302 308 313 363 423 450 305 309 318 329 423 #>  [5257] 451 319 323 324 331 376 422 461 338 343 347 373 394 443 445 447 466 306 #>  [5275] 320 414 433 454 455 378 386 456 311 318 356 360 369 371 376 410 441 469 #>  [5293] 319 320 334 347 348 424 444 458 459 305 318 342 376 411 426 427 437 443 #>  [5311] 317 319 354 360 398 409 467 328 354 399 431 472 340 428 441 448 450 339 #>  [5329] 367 387 388 459 463 464 465 307 320 321 324 328 334 364 371 401 437 468 #>  [5347] 303 339 349 383 384 390 396 402 410 415 424 429 301 302 309 320 357 378 #>  [5365] 395 445 454 465 469 476 346 366 368 369 407 460 333 334 337 352 405 414 #>  [5383] 461 462 475 305 316 328 329 336 353 374 396 420 441 443 448 456 459 464 #>  [5401] 304 317 338 387 431 440 448 472 473 482 345 347 353 381 311 351 362 425 #>  [5419] 447 472 478 484 309 318 327 328 329 380 405 407 446 455 477 481 317 323 #>  [5437] 337 356 383 397 401 422 435 457 471 473 309 352 382 386 430 440 455 467 #>  [5455] 469 304 310 429 449 460 464 469 474 351 363 387 408 427 449 459 350 390 #>  [5473] 411 424 427 445 477 484 490 324 337 430 443 450 456 485 310 340 344 351 #>  [5491] 361 362 400 409 425 455 459 492 325 351 393 419 427 460 485 302 321 339 #>  [5509] 368 372 405 422 426 450 453 331 351 356 358 363 364 384 401 423 436 465 #>  [5527] 485 305 326 328 376 379 387 397 402 405 433 435 302 314 389 427 446 459 #>  [5545] 495 305 379 388 419 429 460 482 489 493 496 366 375 429 432 465 482 487 #>  [5563] 304 309 314 320 356 363 365 381 382 386 406 435 446 457 464 476 309 314 #>  [5581] 317 321 326 375 448 463 467 479 484 486 487 488 499 304 316 325 334 335 #>  [5599] 345 354 386 412 447 474 301 310 313 315 340 342 362 372 392 411 417 436 #>  [5617] 441 457 476 477 323 373 399 400 417 446 458 472 501 502 308 345 356 359 #>  [5635] 380 411 437 467 477 480 499 314 331 356 374 376 388 432 451 468 498 319 #>  [5653] 338 348 410 466 467 483 504 307 406 408 416 440 450 456 485 490 505 322 #>  [5671] 352 368 376 407 459 481 490 334 358 388 389 395 424 441 476 494 312 322 #>  [5689] 328 329 343 366 407 452 478 493 494 507 308 320 341 346 353 360 377 389 #>  [5707] 436 441 444 509 306 314 383 417 418 427 436 438 440 444 448 451 459 469 #>  [5725] 484 489 499 300 352 416 429 460 466 486 493 498 504 307 310 326 384 389 #>  [5743] 401 404 430 464 302 323 357 376 393 430 450 463 486 319 329 332 364 396 #>  [5761] 397 427 432 444 457 471 309 348 359 369 374 395 426 444 475 484 497 305 #>  [5779] 377 382 417 433 441 464 480 488 493 324 336 341 352 361 371 405 406 444 #>  [5797] 455 486 488 520 307 317 335 336 338 341 358 401 455 481 484 501 518 300 #>  [5815] 408 420 446 466 471 473 510 513 337 410 411 418 448 467 494 498 505 331 #>  [5833] 335 339 344 347 399 400 405 414 467 518 307 314 356 375 380 393 420 453 #>  [5851] 463 477 480 487 494 503 509 525 305 317 362 410 423 424 490 500 518 519 #>  [5869] 340 346 387 410 461 474 475 500 524 316 350 394 407 420 510 511 307 372 #>  [5887] 401 402 453 488 489 320 373 391 409 430 451 470 474 486 337 419 425 446 #>  [5905] 479 498 522 525 335 339 365 409 458 470 483 496 516 311 340 348 352 369 #>  [5923] 385 393 420 424 426 455 478 482 485 487 489 493 498 501 507 521 524 300 #>  [5941] 389 425 434 443 458 474 486 501 507 517 320 382 383 390 421 422 445 464 #>  [5959] 506 508 531 325 331 363 379 406 423 458 472 493 498 500 506 518 525 529 #>  [5977] 314 333 340 342 394 428 449 452 485 496 497 504 508 512 317 322 325 336 #>  [5995] 347 361 363 369 370 417 418 470 472 475 502 512 329 339 370 385 393 429 #>  [6013] 462 478 480 505 440 500 502 505 506 311 359 360 393 415 432 443 445 458 #>  [6031] 474 318 372 373 394 415 449 453 475 481 510 523 345 360 396 411 417 442 #>  [6049] 513 523 527 319 339 357 359 361 380 405 419 439 449 454 481 518 519 523 #>  [6067] 530 542 300 342 356 364 382 428 429 314 359 379 404 419 427 433 452 458 #>  [6085] 505 508 521 536 311 334 379 418 437 463 489 504 305 322 334 383 389 410 #>  [6103] 415 544 547 301 316 345 364 393 394 482 487 495 325 360 361 387 388 418 #>  [6121] 421 430 433 448 490 503 526 537 550 331 332 340 349 363 384 394 398 432 #>  [6139] 466 469 482 489 491 495 545 547 311 340 354 375 415 445 452 464 516 520 #>  [6157] 522 527 535 312 320 327 392 396 400 436 450 502 504 505 539 308 317 332 #>  [6175] 375 378 381 404 461 466 485 512 524 553 319 375 386 433 457 482 509 518 #>  [6193] 547 330 337 344 355 356 377 397 406 407 413 419 492 541 545 547 306 308 #>  [6211] 332 342 379 397 401 421 452 491 504 518 552 553 306 378 385 394 395 401 #>  [6229] 423 431 433 466 517 536 542 549 551 302 306 309 313 351 374 375 382 394 #>  [6247] 408 423 451 488 506 520 537 553 303 320 336 366 370 427 443 465 475 495 #>  [6265] 525 552 316 328 384 392 394 399 403 433 439 449 525 528 531 313 328 342 #>  [6283] 348 349 357 385 396 403 428 450 456 494 513 540 349 358 371 385 441 442 #>  [6301] 468 485 496 500 536 352 432 492 554 304 343 365 384 388 395 413 422 465 #>  [6319] 486 491 497 521 534 554 558 302 335 338 380 385 402 415 426 439 460 472 #>  [6337] 510 537 348 355 392 405 406 420 425 434 449 456 459 468 475 498 554 340 #>  [6355] 341 350 355 367 391 392 397 415 432 450 467 489 502 528 529 533 563 569 #>  [6373] 311 314 338 343 350 356 361 370 382 401 410 428 527 555 564 399 406 436 #>  [6391] 466 493 498 524 562 315 350 376 384 430 492 495 518 535 541 332 343 347 #>  [6409] 362 382 401 403 417 419 424 450 470 508 560 337 354 356 357 362 363 391 #>  [6427] 424 429 441 459 486 524 541 545 546 549 572 320 340 341 346 354 359 385 #>  [6445] 404 428 483 510 575 307 310 318 356 372 381 400 411 426 430 439 452 503 #>  [6463] 537 564 340 351 368 430 501 537 546 560 574 313 316 327 362 365 379 418 #>  [6481] 422 425 436 441 476 498 512 574 327 328 332 342 356 360 366 372 428 452 #>  [6499] 466 472 480 519 526 546 549 574 371 385 441 481 497 549 563 310 334 370 #>  [6517] 381 392 417 487 544 567 580 330 350 372 389 406 468 474 476 479 495 501 #>  [6535] 502 511 515 548 574 302 306 337 349 356 372 384 419 441 474 488 508 510 #>  [6553] 535 558 303 332 345 351 377 390 450 467 472 513 520 524 537 538 543 548 #>  [6571] 553 556 567 582 309 338 351 359 373 380 387 422 433 440 457 496 516 525 #>  [6589] 541 574 306 380 382 394 426 435 455 473 494 550 555 301 336 355 400 418 #>  [6607] 420 464 475 516 531 577 306 313 320 329 341 358 396 415 433 485 496 497 #>  [6625] 530 533 561 569 584 300 321 341 398 406 417 419 423 432 477 501 524 551 #>  [6643] 569 572 577 588 309 327 335 343 355 369 405 409 421 443 454 465 485 522 #>  [6661] 533 543 554 575 579 315 318 360 422 449 464 466 473 514 527 545 562 565 #>  [6679] 578 579 300 316 358 379 391 414 504 513 562 565 578 306 313 315 319 350 #>  [6697] 357 364 366 389 457 507 508 517 524 563 570 588 339 350 365 369 399 471 #>  [6715] 477 484 485 510 530 556 557 575 582 583 304 382 394 419 432 496 500 541 #>  [6733] 559 587 344 349 397 419 441 498 511 525 531 538 563 593 300 326 360 365 #>  [6751] 369 412 420 454 462 465 467 478 479 481 497 503 538 556 305 338 347 356 #>  [6769] 360 390 396 409 421 488 519 548 570 303 312 335 343 351 352 373 398 403 #>  [6787] 409 419 422 442 446 451 482 508 521 526 539 542 554 584 351 377 416 421 #>  [6805] 429 491 530 571 574 592 593 595 307 328 341 364 486 488 500 507 513 544 #>  [6823] 583 586 303 327 390 401 417 477 512 516 543 545 546 548 562 307 312 365 #>  [6841] 397 413 443 456 468 580 308 344 384 385 409 430 440 450 478 497 504 512 #>  [6859] 519 529 533 544 553 565 357 408 428 465 478 500 505 524 555 590 314 345 #>  [6877] 395 397 425 428 475 532 560 570 326 330 341 363 397 438 451 456 458 461 #>  [6895] 465 470 497 514 528 541 551 583 309 316 341 364 366 399 400 403 417 441 #>  [6913] 448 454 460 464 469 503 537 541 570 597 603 390 393 395 421 429 436 441 #>  [6931] 459 465 513 523 537 598 604 323 338 364 400 427 464 468 486 497 552 582 #>  [6949] 302 304 308 317 340 375 395 428 451 453 457 468 473 501 520 523 554 560 #>  [6967] 578 595 306 307 318 319 321 334 335 346 358 374 397 398 402 408 447 488 #>  [6985] 493 532 561 562 612 304 328 332 372 385 408 426 444 446 470 471 506 518 #>  [7003] 551 574 588 590 610 330 334 335 336 340 341 344 364 398 411 435 493 533 #>  [7021] 535 536 580 581 308 332 343 355 394 422 489 493 524 546 577 598 603 608 #>  [7039] 615 338 386 390 396 398 430 447 489 505 510 511 541 545 547 576 581 304 #>  [7057] 342 344 355 388 401 404 430 444 450 488 489 492 505 533 574 590 591 595 #>  [7075] 617 321 322 347 355 359 365 366 370 374 401 406 407 443 454 464 494 511 #>  [7093] 557 571 583 596 598 599 305 315 319 329 346 365 385 387 436 465 467 482 #>  [7111] 527 563 583 586 615 342 364 406 432 448 452 479 498 507 513 536 539 547 #>  [7129] 567 587 591 594 308 328 333 349 438 442 462 491 522 525 539 557 558 584 #>  [7147] 586 601 307 318 320 337 360 407 448 449 468 495 506 521 526 538 567 568 #>  [7165] 592 594 602 619 621 307 315 316 319 351 373 386 393 437 458 476 552 553 #>  [7183] 573 591 596 597 605 322 339 346 385 429 436 442 444 446 448 460 492 562 #>  [7201] 585 601 610 307 312 319 386 427 430 441 490 578 603 616 324 329 337 349 #>  [7219] 351 362 363 379 383 412 428 432 451 452 455 466 481 510 538 570 584 593 #>  [7237] 328 332 333 342 382 400 423 489 500 523 536 563 566 568 593 616 309 312 #>  [7255] 314 322 395 423 434 436 440 448 492 513 530 587 313 333 367 370 377 395 #>  [7273] 411 467 469 484 497 518 533 554 558 559 574 607 614 360 369 376 393 455 #>  [7291] 529 547 549 591 596 604 629 304 307 310 330 359 365 368 394 433 434 452 #>  [7309] 457 466 478 489 530 538 596 345 393 428 439 450 458 479 492 519 579 597 #>  [7327] 610 625 630 315 378 418 424 438 442 460 461 499 510 541 548 552 554 576 #>  [7345] 597 602 629 310 326 349 352 370 384 388 395 418 419 430 478 488 496 529 #>  [7363] 537 540 544 559 587 626 629 302 375 390 423 440 481 569 590 600 610 336 #>  [7381] 354 369 387 394 407 424 432 441 445 465 466 500 502 517 599 602 614 620 #>  [7399] 369 414 437 487 488 495 496 515 563 564 579 603 621 630 634 318 337 400 #>  [7417] 432 437 442 456 473 475 480 497 506 508 517 527 561 573 604 615 625 330 #>  [7435] 331 332 347 393 399 405 417 428 430 451 452 470 475 483 531 537 561 589 #>  [7453] 604 619 324 335 354 377 390 410 414 415 416 432 437 459 480 499 508 512 #>  [7471] 523 550 568 572 586 588 598 637 328 333 382 402 419 430 442 447 478 485 #>  [7489] 542 555 557 561 580 607 612 636 311 349 350 369 398 437 475 492 513 517 #>  [7507] 539 552 557 568 576 602 616 617 627 630 641 309 344 345 347 353 359 370 #>  [7525] 383 392 402 471 477 495 502 507 514 517 530 532 543 585 587 595 607 619 #>  [7543] 300 327 329 332 333 367 372 410 420 424 427 509 528 535 547 548 550 574 #>  [7561] 587 590 313 348 360 362 394 399 401 412 421 427 443 460 483 528 537 541 #>  [7579] 562 570 599 606 619 300 317 330 357 358 380 398 402 439 448 473 539 543 #>  [7597] 559 572 584 639 303 306 344 363 382 404 439 454 491 498 520 542 578 607 #>  [7615] 615 306 313 316 319 323 347 361 377 384 388 434 451 489 494 517 520 531 #>  [7633] 532 541 548 564 573 598 602 604 611 644 645 317 344 345 347 380 391 412 #>  [7651] 437 461 513 553 587 593 607 624 627 300 320 330 354 355 373 377 385 427 #>  [7669] 430 461 475 484 507 520 533 538 540 548 572 588 606 611 624 627 634 336 #>  [7687] 339 391 455 540 544 556 614 626 632 638 318 351 359 362 382 426 428 479 #>  [7705] 516 540 551 598 601 634 320 336 354 362 397 400 405 419 441 466 515 518 #>  [7723] 520 535 546 568 586 628 646 307 312 364 375 402 439 444 471 487 526 535 #>  [7741] 549 582 634 639 310 337 360 368 385 401 407 426 427 457 462 484 545 568 #>  [7759] 569 582 314 325 360 364 365 379 423 449 498 509 531 537 548 554 564 569 #>  [7777] 584 597 599 602 651 300 317 339 365 371 396 398 402 425 440 441 457 470 #>  [7795] 475 488 533 559 560 575 586 587 593 633 635 640 647 341 387 408 430 455 #>  [7813] 471 474 554 588 598 604 608 342 353 379 413 476 481 487 493 506 542 580 #>  [7831] 617 645 302 333 387 393 397 437 513 545 584 586 600 631 645 659 335 361 #>  [7849] 371 374 390 403 412 415 419 443 481 486 507 529 556 579 581 603 619 311 #>  [7867] 320 350 365 392 415 432 434 439 462 471 476 492 498 503 512 515 538 541 #>  [7885] 552 569 600 628 629 649 662 307 346 371 375 385 388 439 443 461 480 489 #>  [7903] 493 582 624 637 646 309 350 363 409 425 440 479 504 509 510 535 560 591 #>  [7921] 598 628 632 343 350 358 373 378 472 492 494 503 518 530 606 617 633 634 #>  [7939] 635 655 314 331 381 397 421 468 486 491 497 522 531 536 556 560 562 572 #>  [7957] 573 579 590 616 631 632 636 639 656 301 328 357 368 378 390 393 409 431 #>  [7975] 460 529 582 599 657 310 344 348 370 375 404 420 476 486 536 539 543 555 #>  [7993] 559 583 589 594 606 632 658 667 311 346 361 386 409 413 417 426 430 454 #>  [8011] 468 479 492 494 497 507 508 517 551 553 562 576 638 655 661 301 358 399 #>  [8029] 412 448 475 518 571 615 621 651 654 311 316 319 323 345 357 374 403 537 #>  [8047] 585 593 594 598 606 648 650 667 329 394 405 408 454 478 483 489 529 537 #>  [8065] 540 615 623 638 643 647 651 661 664 317 331 346 353 363 364 381 395 439 #>  [8083] 467 478 517 522 567 630 637 638 647 650 651 666 331 336 346 361 400 410 #>  [8101] 464 475 507 523 531 554 555 580 606 644 668 300 342 350 411 421 427 469 #>  [8119] 489 490 514 556 578 589 623 627 630 649 655 662 300 318 335 343 375 377 #>  [8137] 396 403 436 438 500 504 523 527 533 568 646 658 674 310 327 336 343 362 #>  [8155] 385 390 423 436 440 441 458 489 533 552 560 563 580 595 612 649 673 323 #>  [8173] 339 341 364 370 381 405 407 414 434 450 460 468 492 559 586 611 302 330 #>  [8191] 434 435 451 460 473 477 536 551 557 597 608 627 303 304 340 350 356 363 #>  [8209] 378 381 402 421 451 455 476 497 500 513 519 526 540 559 563 579 583 593 #>  [8227] 639 678 312 327 337 361 365 426 431 445 448 462 469 478 486 495 499 524 #>  [8245] 556 637 647 649 652 666 309 344 350 351 352 362 368 369 383 413 422 426 #>  [8263] 432 454 465 485 495 518 520 531 553 595 603 621 628 636 657 660 678 301 #>  [8281] 339 340 346 383 407 417 441 449 510 514 541 558 581 645 322 328 333 334 #>  [8299] 344 367 382 396 402 412 414 423 447 459 481 533 546 551 565 633 679 358 #>  [8317] 376 398 404 452 480 510 538 547 548 551 619 644 663 305 325 420 424 438 #>  [8335] 450 463 478 488 503 512 537 571 588 626 633 654 659 670 332 346 350 394 #>  [8353] 397 403 411 419 423 449 459 460 511 522 552 559 569 584 597 602 619 627 #>  [8371] 650 313 344 357 373 396 416 424 435 491 540 571 583 603 615 625 635 642 #>  [8389] 644 647 653 666 679 305 337 359 390 391 429 435 449 454 500 504 549 555 #>  [8407] 595 599 604 612 663 308 309 350 391 401 427 435 437 471 497 502 550 552 #>  [8425] 554 566 580 598 606 622 623 624 655 674 315 323 331 458 490 493 504 519 #>  [8443] 550 576 584 586 588 591 618 637 639 643 659 683 301 327 333 370 380 390 #>  [8461] 425 427 434 438 448 470 473 474 519 537 538 553 557 577 586 686 303 321 #>  [8479] 343 351 396 443 452 474 479 484 517 521 528 585 586 589 590 636 653 656 #>  [8497] 664 667 681 684 318 328 339 342 343 404 419 426 459 460 496 519 539 561 #>  [8515] 573 578 580 597 635 666 679 681 328 336 364 454 462 489 490 522 532 542 #>  [8533] 564 568 578 580 591 613 617 654 660 666 667 668 679 316 388 391 393 447 #>  [8551] 452 465 470 508 517 518 600 604 620 622 659 693 317 347 365 371 384 400 #>  [8569] 405 465 493 520 527 541 566 606 638 303 313 324 326 356 367 368 401 444 #>  [8587] 462 520 521 552 556 586 597 659 665 677 334 338 363 375 382 388 410 445 #>  [8605] 446 470 474 524 529 539 551 576 585 616 631 643 686 694 696 307 317 338 #>  [8623] 407 412 419 422 459 516 560 583 605 608 610 636 648 657 662 667 681 691 #>  [8641] 694 317 320 328 367 381 384 387 406 409 477 487 499 532 534 558 565 574 #>  [8659] 621 635 660 678 699 324 334 383 398 415 427 431 438 475 481 488 521 537 #>  [8677] 546 582 605 609 630 637 649 650 689 701 330 353 378 455 464 499 500 537 #>  [8695] 541 547 565 566 575 603 607 611 624 644 655 674 682 694 698 323 324 348 #>  [8713] 364 396 397 419 461 488 492 507 509 531 532 554 562 619 658 677 304 321 #>  [8731] 358 386 424 448 505 515 517 541 585 603 624 651 669 691 695 314 321 350 #>  [8749] 378 381 382 426 433 443 470 522 531 555 575 578 582 613 641 660 686 695 #>  [8767] 700 703 319 379 398 401 434 472 484 487 532 587 604 648 650 659 676 682 #>  [8785] 684 705 300 337 372 404 417 444 450 451 465 469 525 532 547 560 574 584 #>  [8803] 585 591 617 659 678 688 695 700 305 307 311 314 321 328 381 389 431 432 #>  [8821] 438 440 465 482 495 500 509 577 578 599 629 644 654 662 686 305 383 427 #>  [8839] 442 447 461 485 499 521 526 530 601 606 616 628 646 678 708 308 362 370 #>  [8857] 375 415 425 427 432 458 470 487 493 496 497 513 519 560 573 610 640 659 #>  [8875] 684 314 332 344 381 399 434 491 496 521 559 566 571 575 687 694 697 703 #>  [8893] 329 352 362 381 385 396 410 447 471 473 587 593 618 623 669 711 379 387 #>  [8911] 423 452 453 465 471 490 519 526 544 554 594 619 627 651 688 327 350 357 #>  [8929] 361 393 397 439 446 463 465 466 477 537 563 576 581 594 662 672 680 686 #>  [8947] 698 314 328 337 341 356 357 375 377 384 389 409 414 459 463 469 479 495 #>  [8965] 510 529 540 559 562 567 609 616 625 633 667 702 312 314 325 366 367 404 #>  [8983] 405 427 437 480 487 489 498 504 519 580 595 598 605 652 423 427 430 446 #>  [9001] 453 455 467 476 497 498 508 571 609 616 632 657 675 311 360 379 380 394 #>  [9019] 406 435 446 455 458 546 549 560 570 583 677 678 688 691 311 317 347 361 #>  [9037] 378 429 495 635 638 649 335 339 356 399 461 470 514 519 531 550 560 594 #>  [9055] 596 601 617 647 667 681 696 720 303 320 353 367 371 379 422 439 442 449 #>  [9073] 464 500 511 554 566 567 589 593 594 614 631 633 639 651 667 668 671 677 #>  [9091] 680 694 312 421 499 515 566 580 581 585 605 625 664 706 362 372 403 408 #>  [9109] 418 445 447 463 466 486 487 530 590 626 633 637 651 685 719 721 302 374 #>  [9127] 375 384 416 431 448 451 484 499 542 591 635 638 683 687 689 695 725 309 #>  [9145] 334 335 353 407 460 464 468 474 475 487 528 538 565 567 579 666 670 675 #>  [9163] 698 711 306 338 359 366 398 406 414 415 445 451 452 517 520 521 591 602 #>  [9181] 631 651 660 669 687 695 719 333 336 337 342 347 389 419 428 429 459 470 #>  [9199] 484 494 500 535 553 589 601 607 608 633 662 671 681 689 722 303 326 327 #>  [9217] 338 360 367 370 375 376 388 453 489 503 507 572 591 620 629 636 637 644 #>  [9235] 661 663 680 683 695 713 728 317 342 349 350 359 376 382 399 417 480 485 #>  [9253] 491 528 535 545 560 584 603 609 646 661 721 724 315 373 380 385 445 481 #>  [9271] 495 499 507 527 531 538 585 614 622 650 657 663 331 359 379 381 402 459 #>  [9289] 464 490 538 589 605 652 660 671 680 303 326 387 392 411 443 474 491 512 #>  [9307] 530 543 551 572 602 676 682 696 706 718 719 720 721 329 395 416 458 491 #>  [9325] 526 534 545 555 605 630 704 706 719 729 315 383 456 482 503 519 525 545 #>  [9343] 565 594 625 632 640 657 662 672 694 336 359 363 371 373 404 426 451 457 #>  [9361] 469 471 498 510 523 525 533 535 537 559 612 676 688 722 725 727 731 318 #>  [9379] 334 344 345 356 405 451 461 467 504 512 561 563 565 566 586 600 612 629 #>  [9397] 646 653 681 734 736 300 314 326 377 378 405 435 469 494 509 521 523 633 #>  [9415] 639 647 649 653 689 717 728 315 316 353 383 463 471 474 484 521 524 541 #>  [9433] 557 607 638 695 713 324 372 387 399 412 420 433 469 476 493 535 546 573 #>  [9451] 578 582 583 584 627 658 683 734 318 375 390 407 461 488 559 565 608 690 #>  [9469] 697 712 715 720 316 354 371 378 391 404 461 528 533 595 632 639 645 667 #>  [9487] 714 732 734 309 326 336 344 347 358 399 417 422 430 442 452 546 574 603 #>  [9505] 665 670 683 697 704 708 743 302 352 359 388 425 441 455 459 520 529 557 #>  [9523] 558 568 589 593 613 640 641 715 728 734 316 337 360 423 470 524 541 545 #>  [9541] 560 569 574 594 601 619 620 703 719 732 327 356 359 371 377 384 450 458 #>  [9559] 498 524 529 531 572 574 608 651 717 718 318 336 341 347 358 360 375 407 #>  [9577] 439 449 456 458 487 522 524 550 554 567 642 716 728 733 300 321 368 382 #>  [9595] 402 406 443 460 467 476 526 544 571 590 621 637 645 665 669 673 719 731 #>  [9613] 743 748 326 332 337 341 343 346 363 365 371 387 419 440 497 540 551 572 #>  [9631] 587 602 623 647 671 692 704 709 717 747 331 344 345 427 450 489 528 551 #>  [9649] 558 563 592 605 617 700 722 739 743 311 315 326 384 416 443 533 583 596 #>  [9667] 597 598 622 641 661 663 705 343 369 400 444 488 554 555 564 580 587 591 #>  [9685] 598 615 616 655 666 675 689 706 711 717 311 312 406 424 442 443 453 500 #>  [9703] 522 528 564 578 609 661 662 663 688 695 704 708 733 734 302 306 313 323 #>  [9721] 337 360 388 403 464 468 478 498 527 538 654 659 679 690 718 751 313 327 #>  [9739] 335 354 368 419 456 462 480 483 504 514 543 550 555 557 588 668 669 673 #>  [9757] 730 307 326 329 353 372 377 384 432 440 499 522 549 553 563 570 594 596 #>  [9775] 634 635 643 645 660 664 670 675 690 740 755 346 361 375 420 431 438 480 #>  [9793] 485 489 512 520 528 571 641 667 685 701 749 317 319 336 337 340 348 425 #>  [9811] 447 448 463 477 481 490 505 512 586 614 623 654 664 697 721 724 728 751 #>  [9829] 758 320 323 362 405 448 453 474 530 542 543 544 554 588 604 619 620 624 #>  [9847] 625 629 632 636 668 670 673 680 696 727 729 742 745 337 389 435 484 499 #>  [9865] 506 507 533 546 550 556 560 586 589 595 596 625 636 637 647 648 660 671 #>  [9883] 681 682 686 754 320 364 376 379 410 421 427 447 457 464 471 474 579 598 #>  [9901] 607 614 630 642 648 685 692 714 723 740 749 754 303 337 346 347 377 401 #>  [9919] 427 432 440 496 499 515 521 522 523 546 566 579 581 593 595 597 611 642 #>  [9937] 659 686 695 706 720 746 328 330 340 343 363 408 413 425 428 441 451 491 #>  [9955] 594 599 696 698 724 738 309 338 353 358 361 372 376 388 390 455 464 477 #>  [9973] 482 492 496 521 575 629 636 653 672 680 687 698 730 731 735 306 318 342 #>  [9991] 379 383 388 446 477 498 502 546 569 573 574 578 581 607 718 721 727 732 #> [10009] 741 306 340 375 382 390 391 398 408 424 429 433 450 470 503 519 533 537 #> [10027] 541 587 604 639 654 675 692 710 721 723 753 300 312 352 370 414 442 454 #> [10045] 466 468 506 540 552 623 648 660 668 712 716 724 736 750 752 767 327 335 #> [10063] 372 388 402 404 415 421 455 479 493 526 528 539 617 621 641 661 668 699 #> [10081] 703 706 709 734 747 757 308 312 319 324 325 327 378 381 392 411 418 459 #> [10099] 482 495 502 525 545 582 623 637 671 704 736 754 761 318 338 393 442 473 #> [10117] 482 493 521 535 540 560 570 578 635 657 658 664 668 670 691 695 752 762 #> [10135] 352 396 463 482 516 532 646 652 658 674 690 708 732 745 754 765 309 318 #> [10153] 322 340 384 396 445 452 472 496 528 532 539 565 580 625 628 641 661 664 #> [10171] 670 706 715 724 769 309 335 341 378 403 462 529 562 574 580 589 609 611 #> [10189] 638 645 696 736 741 744 770 321 346 355 378 380 383 423 432 445 458 493 #> [10207] 494 527 569 570 623 628 656 658 688 704 715 725 728 732 768 773 774 301 #> [10225] 307 325 346 379 381 391 393 396 403 412 429 433 443 478 497 498 507 522 #> [10243] 551 587 601 610 620 639 646 664 711 731 753 764 772 301 311 318 325 372 #> [10261] 449 457 483 503 504 507 537 542 554 562 581 582 583 608 632 657 668 671 #> [10279] 674 699 732 772 321 322 343 357 359 391 392 405 443 458 469 495 507 529 #> [10297] 533 633 643 664 667 681 698 706 736 777 326 328 332 348 349 353 373 379 #> [10315] 439 446 447 454 523 541 561 581 597 619 657 668 684 693 718 772 342 381 #> [10333] 408 478 494 496 530 534 540 551 560 566 569 633 635 656 682 694 712 723 #> [10351] 757 312 317 333 343 347 371 372 416 428 431 448 511 568 589 596 608 633 #> [10369] 647 676 691 751 767 773 776 306 333 334 357 361 384 397 409 422 433 442 #> [10387] 444 450 506 515 538 554 556 568 569 595 609 627 632 639 655 689 705 752 #> [10405] 331 333 351 401 414 439 444 476 498 503 544 551 557 570 607 644 645 651 #> [10423] 666 668 688 719 302 304 359 360 379 400 422 423 426 439 454 605 662 674 #> [10441] 692 696 697 713 745 763 318 342 359 368 375 387 419 523 531 536 564 589 #> [10459] 599 604 678 692 711 730 773 323 342 345 384 409 417 510 511 512 556 559 #> [10477] 561 592 596 615 617 636 638 670 692 694 724 731 744 756 304 305 310 311 #> [10495] 351 363 366 398 460 470 479 512 534 535 547 568 666 678 682 699 703 722 #> [10513] 723 733 747 753 756 316 330 356 373 400 407 492 510 521 553 555 592 610 #> [10531] 616 680 681 683 694 701 736 745 752 757 777 780 783 785 304 309 310 318 #> [10549] 320 324 328 381 387 390 407 418 451 460 478 481 495 544 576 587 597 603 #> [10567] 608 609 611 645 667 669 700 738 740 748 759 766 770 316 324 381 387 414 #> [10585] 438 450 467 475 476 477 480 504 519 525 549 570 573 582 586 630 645 659 #> [10603] 666 676 703 723 312 336 348 370 389 418 419 425 434 436 445 458 459 461 #> [10621] 473 482 536 575 588 634 670 678 681 701 720 757 784 787 321 346 352 358 #> [10639] 388 395 404 407 418 425 426 432 444 446 480 486 494 496 510 520 528 536 #> [10657] 567 583 591 666 668 672 691 716 776 778 332 335 380 389 390 415 416 426 #> [10675] 434 444 466 469 504 543 566 582 592 595 598 617 618 672 686 688 697 710 #> [10693] 732 736 755 780 303 306 318 334 360 374 404 405 422 424 427 431 437 468 #> [10711] 491 506 526 557 562 595 603 612 629 671 675 680 692 696 699 703 716 763 #> [10729] 320 327 332 334 340 354 356 359 392 400 406 414 423 466 468 471 489 500 #> [10747] 602 612 632 633 664 679 702 706 722 764 336 448 453 463 488 516 611 653 #> [10765] 659 668 677 695 724 733 747 759 789 323 324 417 421 443 459 491 530 562 #> [10783] 570 581 590 593 629 632 641 671 692 720 723 775 786 791 333 412 416 420 #> [10801] 423 465 475 493 531 549 575 584 586 617 627 637 644 646 668 693 707 714 #> [10819] 722 331 335 347 348 372 402 419 451 453 455 488 495 502 507 516 555 571 #> [10837] 589 642 690 706 729 768 775 778 304 326 351 360 363 497 523 540 554 573 #> [10855] 579 581 591 596 607 615 630 669 709 768 792 311 314 317 373 414 415 423 #> [10873] 425 444 455 496 518 533 569 627 631 665 750 770 771 780 781 789 314 319 #> [10891] 367 406 409 418 446 447 464 480 497 505 548 606 627 660 667 693 724 744 #> [10909] 758 763 788 800 318 340 343 360 394 470 484 504 520 524 560 594 636 650 #> [10927] 664 694 734 771 773 776 311 341 352 360 365 425 426 437 446 458 534 537 #> [10945] 539 570 580 585 608 644 654 698 713 714 742 772 773 789 346 364 365 369 #> [10963] 373 379 432 459 493 508 513 558 572 603 630 635 655 777 302 330 359 361 #> [10981] 374 401 435 447 460 461 469 509 529 530 549 552 558 560 578 627 630 633 #> [10999] 645 655 673 694 701 705 707 722 743 788 797 323 339 356 369 382 416 421 #> [11017] 510 565 580 611 623 634 666 703 705 724 736 765 804 334 371 399 403 404 #> [11035] 414 483 512 513 529 532 552 580 597 630 680 772 779 788 316 328 358 384 #> [11053] 387 390 396 407 414 436 457 491 498 510 514 518 519 525 530 548 620 627 #> [11071] 645 646 659 670 687 690 692 727 743 753 759 764 327 333 346 392 393 394 #> [11089] 435 438 447 454 529 556 558 570 573 579 582 595 597 602 606 629 649 674 #> [11107] 688 705 745 748 758 778 804 317 335 340 341 368 387 437 474 476 482 501 #> [11125] 504 506 511 520 521 522 584 598 610 627 630 704 706 735 750 753 765 768 #> [11143] 770 799 322 324 346 412 437 459 469 513 517 540 543 555 559 615 620 706 #> [11161] 708 721 729 735 744 759 809 385 405 411 420 424 480 483 508 521 543 544 #> [11179] 555 568 582 596 597 610 639 657 682 686 702 735 782 799 806 321 355 356 #> [11197] 367 375 401 422 503 511 537 611 615 660 690 699 716 720 739 774 776 802 #> [11215] 807 318 325 328 451 471 474 486 489 538 591 601 609 639 656 666 770 773 #> [11233] 780 787 805 332 336 378 387 402 442 453 500 514 555 573 620 657 706 722 #> [11251] 724 754 758 764 796 303 313 325 330 348 374 400 443 448 454 498 501 511 #> [11269] 512 536 577 581 618 643 648 679 722 731 739 742 761 777 791 816 301 312 #> [11287] 337 442 455 480 481 499 524 531 550 591 597 613 645 700 707 734 765 807 #> [11305] 379 406 418 427 449 451 452 456 463 522 556 564 567 592 595 607 616 634 #> [11323] 637 668 684 709 727 765 769 792 802 349 354 389 396 452 461 518 522 540 #> [11341] 573 584 632 677 682 689 706 712 731 743 756 781 336 341 378 383 418 435 #> [11359] 506 515 549 552 574 581 615 688 693 743 310 315 363 366 403 433 448 449 #> [11377] 481 532 541 550 552 591 603 628 640 681 732 734 820 329 365 370 374 392 #> [11395] 393 394 419 428 508 522 551 566 589 603 618 624 634 668 710 721 738 746 #> [11413] 771 774 776 806 301 306 310 326 329 337 343 361 376 380 389 400 403 407 #> [11431] 480 517 537 549 553 597 622 665 678 682 702 713 740 792 319 356 375 382 #> [11449] 424 440 480 487 494 498 501 512 513 530 538 573 603 615 639 692 726 735 #> [11467] 757 763 793 815 314 332 340 341 372 389 406 411 419 447 478 488 492 579 #> [11485] 595 641 678 698 758 781 787 791 800 808 812 815 358 365 369 406 420 446 #> [11503] 461 500 510 550 572 601 609 622 634 648 658 660 671 674 682 693 711 770 #> [11521] 305 334 346 359 370 375 376 395 399 433 436 447 463 465 488 518 521 527 #> [11539] 542 544 642 673 683 694 700 721 747 749 760 770 776 825 306 316 356 364 #> [11557] 367 381 421 426 457 479 499 523 574 600 609 633 663 668 677 684 689 722 #> [11575] 723 734 738 819 371 381 411 413 435 458 461 465 469 499 524 574 581 592 #> [11593] 617 638 645 651 668 687 708 731 782 788 815 311 314 320 331 390 405 419 #> [11611] 447 497 508 511 570 586 610 611 692 698 757 777 794 801 826 320 328 341 #> [11629] 355 360 388 413 429 489 562 575 606 622 649 651 665 690 709 740 752 769 #> [11647] 790 812 819 302 327 334 338 368 380 395 406 410 421 425 466 500 521 548 #> [11665] 593 618 675 680 685 712 715 740 743 755 792 810 324 342 412 420 422 463 #> [11683] 484 508 515 540 550 560 565 596 614 617 647 661 663 668 721 740 745 766 #> [11701] 797 799 830 336 339 372 379 395 418 501 525 556 558 580 589 606 642 646 #> [11719] 667 688 692 733 765 794 814 819 826 322 395 405 419 435 454 467 485 487 #> [11737] 572 673 750 758 782 307 335 337 345 353 401 403 415 418 425 450 470 487 #> [11755] 497 516 531 550 652 653 700 708 723 778 779 791 792 814 816 818 344 361 #> [11773] 365 382 409 456 479 498 507 561 573 622 624 626 627 664 707 715 727 739 #> [11791] 773 774 779 785 789 796 803 804 808 815 818 830 836 310 316 367 378 400 #> [11809] 428 439 452 457 479 488 529 533 550 563 601 602 614 622 682 713 732 738 #> [11827] 741 742 757 787 795 798 807 821 822 301 328 340 351 366 371 387 393 442 #> [11845] 443 453 474 480 508 510 512 518 525 532 546 564 565 572 602 613 661 673 #> [11863] 675 688 715 716 756 786 805 811 820 343 386 389 402 406 427 454 487 525 #> [11881] 534 540 543 549 554 588 597 648 652 661 670 719 764 799 802 803 302 303 #> [11899] 309 326 376 382 409 469 500 515 548 554 560 572 610 616 623 629 649 674 #> [11917] 676 685 687 706 730 837 300 305 312 314 347 365 380 391 451 453 480 491 #> [11935] 501 524 537 538 557 567 587 616 703 712 742 749 755 771 796 810 321 378 #> [11953] 394 399 422 448 492 540 572 586 607 621 630 633 634 645 648 671 725 736 #> [11971] 764 765 778 795 802 834 344 345 399 406 411 429 436 457 472 481 483 492 #> [11989] 498 573 593 609 614 640 655 711 738 758 788 796 803 819 827 828 304 311 #> [12007] 337 339 371 379 392 397 399 443 479 498 539 566 570 579 581 584 595 638 #> [12025] 656 680 690 721 765 833 845 319 343 347 366 397 407 428 448 453 468 499 #> [12043] 515 528 547 563 577 674 688 709 732 736 738 788 797 812 842 845 300 340 #> [12061] 345 374 394 402 421 454 464 477 481 486 503 507 526 529 562 595 685 686 #> [12079] 724 744 755 758 761 766 777 785 793 835 303 340 343 353 355 383 394 401 #> [12097] 463 483 490 495 501 535 536 549 550 551 553 557 596 603 632 648 719 732 #> [12115] 745 748 757 779 781 821 828 845 313 335 389 406 421 430 433 440 469 481 #> [12133] 493 508 544 548 550 560 604 631 634 663 665 671 697 716 736 753 761 793 #> [12151] 330 342 348 357 374 393 452 468 493 515 540 596 609 634 652 660 673 701 #> [12169] 736 743 750 795 816 819 837 840 317 329 340 346 356 389 390 392 447 449 #> [12187] 458 486 494 499 522 541 546 561 562 563 574 590 605 607 609 615 624 650 #> [12205] 677 694 724 731 734 759 775 821 825 835 837 845 305 363 365 368 414 415 #> [12223] 431 440 488 499 530 533 535 569 587 588 631 646 683 688 698 704 707 747 #> [12241] 783 345 420 430 443 456 464 477 515 530 547 587 619 626 675 676 684 713 #> [12259] 718 735 742 812 825 826 841 303 308 311 314 318 345 350 359 389 399 411 #> [12277] 414 432 448 491 515 521 538 543 555 559 562 629 633 651 653 693 750 751 #> [12295] 776 777 789 800 803 817 828 329 346 370 430 446 467 495 496 525 530 538 #> [12313] 563 624 628 629 656 688 697 703 785 817 848 307 360 366 402 457 459 467 #> [12331] 470 482 497 535 561 584 585 607 611 628 649 653 659 662 701 705 783 828 #> [12349] 327 329 348 365 366 376 404 433 478 492 505 519 540 541 558 624 641 642 #> [12367] 664 717 749 805 830 836 839 300 337 361 402 457 464 549 559 602 604 671 #> [12385] 706 713 740 776 807 834 309 341 342 352 387 389 469 478 502 503 513 542 #> [12403] 544 573 575 587 618 631 635 693 695 710 737 761 813 842 846 856 301 306 #> [12421] 317 334 346 363 377 383 388 434 440 454 456 483 499 536 548 597 606 641 #> [12439] 664 674 683 689 722 740 749 751 761 768 790 803 810 819 823 828 306 309 #> [12457] 323 331 343 345 369 373 377 378 410 461 467 470 490 528 557 560 564 588 #> [12475] 595 609 620 640 656 671 691 697 721 771 784 325 326 343 407 417 439 445 #> [12493] 454 456 469 508 584 597 626 636 646 652 662 672 695 724 791 808 836 329 #> [12511] 348 421 422 439 486 497 511 516 531 542 546 552 562 600 615 634 699 704 #> [12529] 713 735 740 769 780 789 801 808 827 843 863 302 307 338 375 403 406 493 #> [12547] 513 546 552 554 563 593 628 643 660 679 698 709 711 716 719 732 734 738 #> [12565] 745 760 831 323 336 405 494 496 500 536 562 566 588 591 617 625 669 673 #> [12583] 696 733 758 762 794 804 815 827 856 352 364 445 466 491 517 519 521 524 #> [12601] 541 557 612 631 634 635 692 706 710 728 732 740 757 765 787 808 820 840 #> [12619] 314 360 361 366 374 376 382 399 402 411 434 440 511 518 535 560 565 596 #> [12637] 615 634 661 664 672 674 683 702 803 842 846 850 303 329 391 435 447 478 #> [12655] 500 511 566 586 633 643 649 662 702 724 732 753 769 798 810 838 854 323 #> [12673] 338 354 363 416 423 460 467 477 507 516 554 557 582 592 604 608 628 634 #> [12691] 691 725 746 748 753 762 770 774 817 827 831 837 301 316 318 347 371 381 #> [12709] 387 424 435 472 504 511 549 565 566 568 573 584 602 626 667 677 686 690 #> [12727] 704 732 741 749 766 816 821 832 847 849 322 327 367 375 389 407 410 449 #> [12745] 465 487 492 505 519 522 531 547 562 566 568 589 601 619 635 652 679 687 #> [12763] 698 716 732 770 772 792 794 811 818 845 301 338 350 362 387 389 416 423 #> [12781] 432 445 503 557 558 579 609 632 641 650 682 701 745 753 766 795 842 344 #> [12799] 390 408 414 440 497 506 527 536 545 573 588 603 662 674 678 696 699 704 #> [12817] 713 733 740 749 832 835 843 854 861 306 319 320 337 346 356 365 413 457 #> [12835] 469 472 545 554 564 573 609 612 621 661 681 700 814 300 306 309 316 322 #> [12853] 337 348 351 367 386 407 413 455 460 467 538 549 563 565 582 601 609 613 #> [12871] 646 661 686 724 726 736 780 799 824 833 840 841 858 868 875 323 327 335 #> [12889] 344 348 370 371 461 462 508 590 666 722 725 732 747 762 783 792 815 817 #> [12907] 834 843 860 305 309 324 343 356 369 383 400 405 409 414 421 448 494 507 #> [12925] 509 532 551 564 577 597 598 619 644 650 663 734 779 795 814 845 849 301 #> [12943] 302 325 355 369 376 415 427 435 442 472 478 490 506 554 556 558 573 602 #> [12961] 607 657 662 680 683 686 765 801 802 815 846 852 858 323 337 339 341 418 #> [12979] 464 467 510 539 556 612 619 624 627 630 707 768 776 788 809 812 818 844 #> [12997] 860 877 317 398 403 491 533 535 562 577 617 621 654 672 687 689 706 707 #> [13015] 719 726 729 749 768 787 806 868 316 341 344 404 412 423 434 454 498 505 #> [13033] 506 510 548 552 557 570 640 653 664 677 712 716 717 750 794 818 306 332 #> [13051] 334 336 359 386 404 461 465 478 484 485 488 495 507 535 550 564 583 589 #> [13069] 630 632 660 695 711 726 760 777 836 846 853 306 370 382 394 423 425 449 #> [13087] 454 457 459 478 499 529 547 556 590 629 665 667 693 699 701 725 730 733 #> [13105] 770 799 811 845 850 333 334 342 354 355 376 390 417 442 449 461 475 514 #> [13123] 540 568 576 609 619 634 648 657 664 682 705 726 727 728 749 750 760 765 #> [13141] 768 771 777 784 830 837 848 863 874 334 350 363 405 418 477 484 547 597 #> [13159] 623 644 647 667 674 675 752 758 778 791 795 805 807 809 813 850 853 860 #> [13177] 872 874 884 302 328 341 361 390 401 404 406 407 442 463 464 471 475 478 #> [13195] 509 515 531 555 601 622 635 651 659 666 696 725 737 746 755 759 769 790 #> [13213] 791 803 812 827 867 310 322 394 419 422 440 444 459 479 494 502 563 592 #> [13231] 606 646 647 716 730 773 801 862 864 865 868 355 368 397 410 440 447 508 #> [13249] 511 540 595 604 614 688 732 751 752 753 757 773 790 795 796 852 873 320 #> [13267] 332 336 349 355 427 457 481 496 502 535 570 581 585 593 626 635 642 662 #> [13285] 692 718 742 754 768 773 796 819 831 832 834 860 304 310 366 392 429 452 #> [13303] 484 582 603 626 700 714 716 723 731 761 763 765 771 772 795 803 805 838 #> [13321] 848 331 353 359 366 379 389 427 439 472 506 515 524 558 561 573 648 658 #> [13339] 674 723 765 797 835 855 320 328 340 354 391 433 439 449 454 458 462 473 #> [13357] 485 520 522 547 550 603 642 647 689 696 699 753 755 759 776 778 781 813 #> [13375] 818 831 841 845 877 316 380 386 392 405 407 462 471 485 515 516 533 534 #> [13393] 550 555 558 559 576 643 644 652 729 737 748 753 754 771 784 792 816 822 #> [13411] 827 837 854 866 871 313 320 337 345 347 349 366 373 422 429 445 488 540 #> [13429] 556 581 600 603 612 624 629 643 644 650 702 707 720 757 836 867 870 336 #> [13447] 363 385 388 393 401 405 417 424 511 523 533 556 581 607 613 689 722 735 #> [13465] 736 737 747 756 800 814 826 838 858 300 317 375 381 396 457 461 470 503 #> [13483] 515 519 531 637 648 652 655 674 695 705 707 713 714 715 726 732 774 782 #> [13501] 786 810 819 828 831 836 871 874 879 884 885 303 314 352 365 393 407 464 #> [13519] 466 485 493 501 508 515 518 548 560 572 580 613 632 653 662 698 719 735 #> [13537] 744 756 767 785 791 843 872 301 326 352 423 443 457 481 510 539 572 599 #> [13555] 643 645 724 732 736 757 805 817 823 826 836 874 880 890 326 342 345 349 #> [13573] 364 378 396 401 411 413 442 484 493 559 562 606 643 645 664 696 731 734 #> [13591] 742 756 786 823 837 854 892 309 313 367 396 398 404 408 433 439 455 479 #> [13609] 482 488 521 533 536 549 567 586 682 733 771 773 825 863 864 307 314 336 #> [13627] 352 373 383 396 441 448 462 463 476 521 615 661 668 727 743 749 785 815 #> [13645] 817 835 853 861 865 876 311 320 324 354 364 365 366 401 417 424 437 440 #> [13663] 527 545 564 567 568 573 580 601 610 628 664 687 693 699 707 741 774 776 #> [13681] 787 831 835 841 850 853 861 875 882 306 330 348 363 379 381 382 387 419 #> [13699] 437 449 453 475 476 490 502 552 564 573 583 588 624 643 709 801 810 841 #> [13717] 850 860 901 304 305 316 327 359 394 460 464 501 513 539 548 584 606 674 #> [13735] 698 707 745 750 767 772 789 806 807 830 839 847 879 900 300 314 332 396 #> [13753] 431 446 448 449 460 495 514 525 527 593 607 627 647 679 691 714 716 744 #> [13771] 746 760 761 773 786 793 796 797 806 811 814 898 319 322 330 343 345 356 #> [13789] 361 363 372 377 403 405 410 467 487 539 540 545 567 586 588 668 687 694 #> [13807] 695 713 733 751 783 813 821 823 838 850 854 896 321 328 329 407 446 467 #> [13825] 495 505 511 513 539 589 647 652 689 727 754 758 760 796 802 822 889 892 #> [13843] 306 314 318 319 326 334 346 371 412 432 434 436 452 465 511 542 546 553 #> [13861] 562 565 583 597 599 608 626 631 648 660 663 678 691 693 728 743 755 775 #> [13879] 796 884 893 320 355 362 371 466 494 498 505 506 518 543 561 562 616 629 #> [13897] 664 671 684 693 704 717 735 813 822 826 847 848 852 873 905 307 310 311 #> [13915] 318 354 373 376 380 392 393 396 439 445 459 469 482 550 559 575 587 597 #> [13933] 793 800 350 356 392 397 420 456 484 495 558 585 642 661 664 679 691 697 #> [13951] 709 715 743 782 818 837 856 874 882 890 896 905 326 330 340 349 357 370 #> [13969] 372 380 390 454 463 486 487 495 498 505 536 588 589 602 605 611 621 705 #> [13987] 710 725 775 793 828 883 308 343 354 366 406 418 422 433 434 457 511 513 #> [14005] 569 611 636 649 721 733 744 752 762 800 807 876 881 892 894 905 907 912 #> [14023] 320 334 371 413 474 512 543 550 578 591 636 659 676 685 704 707 708 766 #> [14041] 817 820 827 828 830 841 863 876 313 323 381 449 481 482 487 517 518 536 #> [14059] 550 584 585 592 594 605 612 614 641 660 673 680 696 715 727 734 740 742 #> [14077] 794 313 316 328 356 421 425 438 447 454 462 478 500 506 513 524 557 558 #> [14095] 568 606 629 641 695 698 720 724 745 747 754 783 793 800 804 825 834 838 #> [14113] 856 864 871 885 302 305 324 330 338 353 458 508 563 591 612 630 634 639 #> [14131] 650 658 661 666 762 769 806 812 813 842 904 304 320 329 365 404 411 429 #> [14149] 447 479 530 537 544 573 601 619 642 660 661 705 715 774 778 786 799 825 #> [14167] 855 880 882 910 350 359 360 361 371 383 409 420 441 469 506 527 539 552 #> [14185] 578 586 590 612 626 627 637 682 692 697 751 758 768 772 774 776 809 832 #> [14203] 846 851 868 881 909 913 917 307 322 398 419 422 435 438 486 515 553 610 #> [14221] 611 613 630 650 681 691 692 695 707 723 732 823 849 911 304 313 316 324 #> [14239] 335 364 385 397 452 474 476 477 496 538 543 570 572 583 605 606 611 631 #> [14257] 660 665 729 766 784 785 786 795 801 807 823 869 885 907 300 312 342 354 #> [14275] 393 394 398 428 441 466 478 479 480 503 504 523 537 540 551 558 563 568 #> [14293] 591 598 601 607 626 631 663 668 674 693 696 708 736 767 769 773 784 788 #> [14311] 824 829 901 913 915 300 324 335 341 373 389 403 430 474 481 505 513 537 #> [14329] 543 559 560 573 634 651 656 657 711 748 753 793 860 905 306 326 342 351 #> [14347] 355 358 374 375 454 485 494 495 507 511 525 560 587 605 654 671 683 696 #> [14365] 762 784 786 792 813 830 838 843 845 898 443 457 467 514 518 524 560 561 #> [14383] 606 632 640 662 744 791 813 831 849 884 313 321 444 445 451 479 509 513 #> [14401] 676 700 721 752 774 819 870 363 395 408 436 486 489 522 526 540 587 588 #> [14419] 596 623 630 631 637 638 643 666 696 728 760 804 806 889 318 322 332 355 #> [14437] 384 388 418 478 494 499 508 574 582 605 617 618 620 625 636 637 640 669 #> [14455] 684 697 699 724 746 756 773 795 806 809 868 895 913 302 342 344 371 373 #> [14473] 424 438 452 458 472 473 494 507 530 581 589 602 607 611 628 666 680 764 #> [14491] 794 851 860 873 321 330 362 385 391 435 452 493 495 525 539 553 584 648 #> [14509] 660 677 692 693 718 724 766 768 777 779 808 811 818 822 854 859 881 887 #> [14527] 888 899 902 920 924 305 316 331 335 369 384 387 395 432 454 456 465 478 #> [14545] 486 504 511 513 598 605 629 643 663 681 682 684 687 727 729 736 739 757 #> [14563] 785 789 793 810 844 864 865 880 898 901 916 920 316 320 331 382 460 474 #> [14581] 530 572 583 610 626 640 645 684 686 691 785 815 821 822 826 847 867 910 #> [14599] 912 334 348 369 398 464 488 494 510 525 532 533 546 558 573 619 620 622 #> [14617] 715 731 733 834 838 842 845 862 907 915 925 373 377 391 395 397 400 416 #> [14635] 444 457 461 481 522 531 534 567 572 578 632 648 657 667 684 690 703 707 #> [14653] 715 765 770 797 841 845 851 858 869 875 885 892 924 928 934 307 323 385 #> [14671] 389 422 430 435 467 482 490 505 538 563 614 634 663 690 733 736 749 764 #> [14689] 768 780 815 822 866 868 880 884 920 924 306 308 313 347 358 369 373 386 #> [14707] 388 392 399 407 418 455 465 495 512 523 532 592 602 605 610 619 621 623 #> [14725] 624 665 706 710 720 732 735 746 752 762 763 785 836 844 852 870 314 324 #> [14743] 371 375 400 449 454 481 483 489 504 515 525 540 563 579 581 624 636 678 #> [14761] 702 706 728 750 809 826 844 866 876 884 303 385 405 429 441 467 499 506 #> [14779] 508 533 534 535 557 572 591 601 607 628 632 679 716 720 757 769 792 809 #> [14797] 850 883 888 889 909 910 304 305 318 330 336 431 469 501 512 527 557 565 #> [14815] 581 592 601 618 626 660 675 681 695 699 701 710 725 728 730 761 774 775 #> [14833] 813 848 853 859 915 919 397 398 498 499 528 557 585 586 604 619 621 674 #> [14851] 749 751 761 763 785 791 807 822 838 847 855 866 870 918 311 324 367 384 #> [14869] 419 443 448 461 488 492 495 506 552 564 599 605 609 627 629 632 650 691 #> [14887] 695 701 709 723 758 761 767 775 799 824 834 844 931 303 311 330 367 373 #> [14905] 381 409 430 460 499 536 580 618 632 658 662 678 709 712 754 764 767 808 #> [14923] 819 821 847 863 915 939 302 303 319 330 343 344 349 383 387 394 406 430 #> [14941] 446 448 482 484 489 491 527 532 542 547 583 601 602 635 647 651 656 664 #> [14959] 670 674 680 704 729 765 777 830 887 940 304 322 336 349 361 365 387 388 #> [14977] 391 396 440 493 536 557 587 588 600 612 671 682 684 727 734 745 765 774 #> [14995] 788 791 810 821 827 885 890 904 910 306 307 318 367 389 393 445 452 476 #> [15013] 492 493 553 609 709 727 731 788 792 799 833 856 913 335 356 369 371 372 #> [15031] 409 417 463 491 496 508 535 536 537 567 593 599 600 619 625 655 705 706 #> [15049] 745 748 783 795 835 846 868 871 889 917 919 931 325 342 369 387 394 397 #> [15067] 420 424 452 455 481 491 513 539 553 581 600 606 620 663 671 680 683 691 #> [15085] 716 797 815 819 829 843 854 872 874 314 318 326 342 350 403 449 469 522 #> [15103] 525 539 554 578 584 596 609 625 630 718 728 745 755 785 826 869 909 920 #> [15121] 929 306 307 316 317 327 370 381 419 487 502 508 509 544 547 549 563 578 #> [15139] 593 599 602 608 643 704 712 726 737 784 812 872 897 898 929 306 326 356 #> [15157] 360 492 510 530 534 584 654 672 706 741 759 770 846 856 868 903 355 374 #> [15175] 385 390 393 446 447 488 506 508 525 533 555 569 593 630 636 639 657 673 #> [15193] 701 712 731 741 775 813 838 839 880 883 911 935 945 324 345 366 368 393 #> [15211] 416 497 503 531 538 547 557 584 624 674 680 694 698 703 739 794 798 819 #> [15229] 853 870 876 889 903 936 943 316 323 351 374 431 444 457 503 505 507 547 #> [15247] 619 736 742 756 779 786 797 800 834 838 863 897 909 937 334 338 345 346 #> [15265] 367 377 389 394 403 408 435 442 449 452 463 478 498 536 546 570 574 607 #> [15283] 614 651 675 693 765 775 790 798 803 811 831 837 847 853 865 872 886 912 #> [15301] 922 948 328 358 399 561 568 570 574 581 606 629 648 651 671 673 762 775 #> [15319] 796 798 826 837 848 850 861 915 916 940 952 953 325 329 335 369 381 386 #> [15337] 389 391 402 420 442 451 452 508 537 544 560 564 596 603 614 630 642 645 #> [15355] 652 678 711 732 735 806 854 879 905 912 919 936 301 305 396 399 435 449 #> [15373] 467 496 497 505 506 521 538 568 574 594 605 644 671 674 678 687 703 725 #> [15391] 781 788 799 803 834 847 849 860 925 312 354 355 360 365 384 385 392 399 #> [15409] 405 406 445 452 480 501 503 506 508 526 552 555 557 573 589 600 621 693 #> [15427] 787 821 852 854 891 911 949 300 310 330 390 399 405 415 429 435 444 462 #> [15445] 466 538 557 575 594 627 659 693 694 763 783 806 840 871 892 895 908 917 #> [15463] 332 334 336 346 401 404 414 418 431 452 455 492 498 500 507 513 521 603 #> [15481] 611 616 623 659 725 731 755 760 772 789 802 846 858 870 915 941 301 302 #> [15499] 309 318 345 347 388 396 451 453 473 517 537 572 578 606 608 618 633 642 #> [15517] 674 739 759 760 806 808 821 832 838 844 851 866 894 943 319 398 402 441 #> [15535] 475 503 517 519 559 569 576 583 612 620 622 674 690 695 736 752 855 858 #> [15553] 859 862 897 908 931 946 960 307 312 347 393 408 417 441 453 490 504 552 #> [15571] 579 589 647 649 671 683 698 700 723 731 737 738 789 796 814 820 831 849 #> [15589] 851 864 891 902 960 301 350 375 385 410 412 419 432 434 520 532 539 541 #> [15607] 556 560 595 626 638 653 676 682 685 695 711 744 751 753 804 824 829 855 #> [15625] 862 881 883 934 943 951 304 331 365 373 375 394 419 436 452 472 478 499 #> [15643] 515 542 563 568 571 584 596 608 609 616 637 650 657 659 681 724 740 807 #> [15661] 845 875 902 903 905 327 345 364 382 388 396 399 417 420 438 496 582 627 #> [15679] 629 632 665 678 698 720 723 763 769 780 796 824 837 882 905 914 961 307 #> [15697] 325 337 338 342 345 357 362 364 369 383 416 424 434 467 480 515 527 534 #> [15715] 571 579 593 643 661 724 740 783 807 835 842 850 885 905 922 960 961 315 #> [15733] 317 323 336 462 465 474 488 492 506 513 524 543 558 561 570 581 590 593 #> [15751] 601 636 644 665 668 671 672 683 712 763 827 868 874 918 959 312 313 314 #> [15769] 319 350 362 376 422 428 429 445 459 474 491 495 496 503 517 568 580 637 #> [15787] 646 648 655 687 691 700 710 777 796 806 840 885 915 922 924 929 939 319 #> [15805] 338 347 349 352 365 392 467 483 586 589 624 633 662 684 693 707 723 728 #> [15823] 730 748 870 872 884 903 908 925 965 308 325 333 363 368 399 405 417 418 #> [15841] 490 492 527 531 549 585 598 611 641 654 675 688 702 704 733 745 756 785 #> [15859] 791 872 884 929 952 961 968 301 307 308 339 349 352 372 385 389 391 414 #> [15877] 440 448 487 560 562 600 603 622 643 646 670 685 692 729 730 751 754 777 #> [15895] 787 800 820 821 827 880 932 938 944 958 972 333 345 353 363 373 390 403 #> [15913] 417 509 521 530 543 547 564 575 578 607 683 692 704 718 721 725 783 798 #> [15931] 811 813 818 831 842 863 879 914 916 968 315 316 319 324 327 350 384 424 #> [15949] 458 461 476 477 482 486 511 525 534 558 605 610 634 653 662 670 681 718 #> [15967] 722 766 771 779 791 809 846 854 857 863 878 892 903 920 928 300 324 340 #> [15985] 345 348 363 366 368 391 428 434 465 469 470 472 482 486 535 541 542 649 #> [16003] 656 724 725 762 775 777 791 793 795 829 840 880 882 892 903 917 934 965 #> [16021] 329 335 341 400 411 441 442 481 508 515 532 552 565 618 629 659 660 700 #> [16039] 701 706 725 750 753 754 775 801 808 809 819 831 842 858 905 952 961 328 #> [16057] 340 422 470 473 481 482 516 531 535 576 606 613 633 638 648 685 705 823 #> [16075] 835 844 857 875 884 892 926 940 949 976 327 424 425 460 481 500 511 535 #> [16093] 577 579 654 673 709 721 781 791 864 889 900 932 966 318 319 369 385 396 #> [16111] 399 415 453 522 523 578 605 649 662 663 668 674 680 740 775 802 803 806 #> [16129] 811 854 858 958 966 313 315 362 416 444 584 630 646 648 697 710 774 783 #> [16147] 787 812 834 835 837 892 902 915 916 957 960 964 974 303 307 338 356 374 #> [16165] 392 426 451 466 471 494 537 553 568 625 631 675 689 697 713 716 718 733 #> [16183] 738 765 807 812 813 839 852 858 880 928 933 332 342 355 397 410 424 430 #> [16201] 437 456 462 502 512 519 532 540 544 561 592 619 688 714 717 721 734 746 #> [16219] 760 761 766 786 790 792 808 814 836 889 892 895 919 924 933 936 953 966 #> [16237] 303 351 369 403 405 428 452 467 479 481 512 524 562 569 588 599 663 669 #> [16255] 671 680 690 698 700 709 710 719 722 726 779 800 874 911 922 944 962 334 #> [16273] 376 412 430 448 450 456 467 533 570 626 632 659 689 741 770 810 865 876 #> [16291] 881 917 947 968 983 324 344 345 347 348 372 391 393 395 421 441 456 496 #> [16309] 497 499 510 521 526 538 565 581 591 592 603 621 625 633 636 684 692 710 #> [16327] 784 795 814 848 867 887 911 912 936 943 972 339 356 370 412 446 458 463 #> [16345] 527 535 537 542 583 598 623 643 670 678 683 691 706 710 718 724 752 763 #> [16363] 771 805 806 820 842 853 859 885 889 899 913 944 951 961 308 324 339 387 #> [16381] 389 402 405 418 446 510 538 539 540 553 557 569 580 620 621 637 639 669 #> [16399] 680 707 710 756 774 817 836 862 872 900 979 300 315 363 388 397 458 478 #> [16417] 481 548 550 552 571 623 678 697 717 719 721 726 754 776 813 816 818 820 #> [16435] 826 849 865 895 903 917 919 312 341 373 377 442 448 455 485 522 531 540 #> [16453] 555 572 586 591 627 667 676 700 724 741 752 762 816 819 911 918 926 934 #> [16471] 947 949 951 958 972 310 349 364 389 396 403 509 514 517 577 590 621 653 #> [16489] 668 691 695 707 724 750 754 757 796 799 814 840 867 871 873 875 882 895 #> [16507] 897 952 975 977 989 333 372 398 419 426 482 483 510 520 525 541 547 556 #> [16525] 590 592 658 676 756 765 799 856 865 924 307 322 332 357 395 408 420 451 #> [16543] 460 486 500 511 516 526 548 568 571 582 583 588 654 662 671 715 750 758 #> [16561] 761 766 773 775 776 803 805 816 833 838 856 866 889 906 942 953 968 977 #> [16579] 982 322 344 354 368 381 417 446 456 467 483 580 593 632 648 686 695 715 #> [16597] 777 786 848 856 858 859 878 947 971 332 339 371 377 460 496 509 523 543 #> [16615] 546 551 559 570 581 596 622 628 629 660 662 670 678 710 711 715 726 740 #> [16633] 750 768 770 800 826 848 849 864 894 908 923 933 934 937 977 983 992 993 #> [16651] 311 339 365 379 395 402 482 497 519 530 543 589 628 655 670 676 685 693 #> [16669] 707 711 719 781 842 877 908 918 922 928 953 970 989 302 307 315 344 361 #> [16687] 399 422 434 443 447 500 504 506 511 512 536 539 559 579 580 595 608 625 #> [16705] 633 668 685 697 704 711 713 725 745 776 796 799 808 849 851 858 900 901 #> [16723] 922 933 943 962 966 974 307 310 315 325 343 367 389 399 421 451 464 495 #> [16741] 525 557 570 635 652 705 718 773 781 791 803 819 823 898 902 915 918 941 #> [16759] 991 320 325 326 338 362 384 394 414 427 443 447 484 492 513 520 556 573 #> [16777] 577 593 609 651 687 733 779 783 785 801 831 854 957 984 #>  #> [[5]] #>     [1]     0     1     2     3     4     5     6     7     8     9    10    11 #>    [13]    12    13    14    15    16    17    18    19    20    21    22    23 #>    [25]    24    25    26    27    28    29    30    31    32    33    34    35 #>    [37]    36    37    38    39    40    41    42    43    44    45    46    47 #>    [49]    48    49    50    51    52    53    54    55    56    57    58    59 #>    [61]    60    61    62    63    64    65    66    67    68    69    70    71 #>    [73]    72    73    74    75    76    77    78    79    80    81    82    83 #>    [85]    84    85    86    87    88    89    90    91    92    93    94    95 #>    [97]    96    97    98    99   100   101   102   103   104   105   106   107 #>   [109]   108   109   110   111   112   113   114   115   116   117   118   119 #>   [121]   120   121   122   123   124   125   126   127   128   129   130   131 #>   [133]   132   133   134   135   136   137   138   139   140   141   142   143 #>   [145]   144   145   146   147   148   149   150   151   152   153   154   155 #>   [157]   156   157   158   159   160   161   162   163   164   165   166   167 #>   [169]   168   169   170   171   172   173   174   175   176   177   178   179 #>   [181]   180   181   182   183   184   185   186   187   188   189   190   191 #>   [193]   192   193   194   195   196   197   198   199   200   201   202   203 #>   [205]   204   205   206   207   208   209   210   211   212   213   214   215 #>   [217]   216   217   218   219   220   221   222   223   224   225   226   227 #>   [229]   228   229   230   231   232   233   234   235   236   237   238   239 #>   [241]   240   241   242   243   244   245   246   247   248   249   250   251 #>   [253]   252   253   254   255   256   257   258   259   260   261   262   263 #>   [265]   264   265   266   267   268   269   270   271   272   273   274   275 #>   [277]   276   277   278   279   280   281   282   283   284   285   286   287 #>   [289]   288   289   290   291   292   293   294   295   296   297   298   299 #>   [301]   300   301   302   303   304   305   306   307   308   309   310   311 #>   [313]   312   313   314   315   316   317   318   319   320   321   322   323 #>   [325]   324   325   326   327   328   329   330   331   332   333   334   335 #>   [337]   336   337   338   339   340   341   342   343   344   345   346   347 #>   [349]   348   349   350   351   352   353   354   355   356   357   358   359 #>   [361]   360   361   362   363   364   365   366   367   368   369   370   371 #>   [373]   372   373   374   375   376   377   378   379   380   381   382   383 #>   [385]   384   385   386   387   388   389   390   391   392   393   394   395 #>   [397]   396   397   398   399   400   401   402   403   404   405   406   407 #>   [409]   408   409   410   411   412   413   414   415   416   417   418   419 #>   [421]   420   421   422   423   424   425   426   427   428   429   430   431 #>   [433]   432   433   434   435   436   437   438   439   440   441   442   443 #>   [445]   444   445   446   447   448   449   450   451   452   453   454   455 #>   [457]   456   457   458   459   460   461   462   463   464   465   466   467 #>   [469]   468   469   470   471   472   473   474   475   476   477   478   479 #>   [481]   480   481   482   483   484   485   486   487   488   489   490   491 #>   [493]   492   493   494   495   496   497   498   499   500   501   502   503 #>   [505]   504   505   506   507   508   509   510   511   512   513   514   515 #>   [517]   516   517   518   519   520   521   522   523   524   525   526   527 #>   [529]   528   529   530   531   532   533   534   535   536   537   538   539 #>   [541]   540   541   542   543   544   545   546   547   548   549   550   551 #>   [553]   552   553   554   555   556   557   558   559   560   561   562   563 #>   [565]   564   565   566   567   568   569   570   571   572   573   574   575 #>   [577]   576   577   578   579   580   581   582   583   584   585   586   587 #>   [589]   588   589   590   591   592   593   594   595   596   597   598   599 #>   [601]   600   601   602   603   604   605   606   607   608   609   610   611 #>   [613]   612   613   614   615   616   617   618   619   620   621   622   623 #>   [625]   624   625   626   627   628   629   630   631   632   633   634   635 #>   [637]   636   637   638   639   640   641   642   643   644   645   646   647 #>   [649]   648   649   650   651   652   653   654   655   656   657   658   659 #>   [661]   660   661   662   663   664   665   666   667   668   669   670   671 #>   [673]   672   673   674   675   676   677   678   679   680   681   682   683 #>   [685]   684   685   686   687   688   689   690   691   692   693   694   695 #>   [697]   696   697   698   699   700   701   702   703   704   705   706   707 #>   [709]   708   709   710   711   712   713   714   715   716   717   718   719 #>   [721]   720   721   722   723   724   725   726   727   728   729   730   731 #>   [733]   732   733   734   735   736   737   738   739   740   741   742   743 #>   [745]   744   745   746   747   748   749   750   751   752   753   754   755 #>   [757]   756   757   758   759   760   761   762   763   764   765   766   767 #>   [769]   768   769   770   771   772   773   774   775   776   777   778   779 #>   [781]   780   781   782   783   784   785   786   787   788   789   790   791 #>   [793]   792   793   794   795   796   797   798   799   800   801   802   803 #>   [805]   804   805   806   807   808   809   810   811   812   813   814   815 #>   [817]   816   817   818   819   820   821   822   823   824   825   826   827 #>   [829]   828   829   830   831   832   833   834   835   836   837   838   839 #>   [841]   840   841   842   843   844   845   846   847   848   849   850   851 #>   [853]   852   853   854   855   856   857   858   859   860   861   862   863 #>   [865]   864   865   866   867   868   869   870   871   872   873   874   875 #>   [877]   876   877   878   879   880   881   882   883   884   885   886   887 #>   [889]   888   889   890   891   892   893   894   895   896   897   898   899 #>   [901]   900   901   902   903   904   905   906   907   908   909   910   911 #>   [913]   912   913   914   915   916   917   918   919   920   921   922   923 #>   [925]   924   925   926   927   928   929   930   931   932   933   934   935 #>   [937]   936   937   938   939   940   941   942   943   944   945   946   947 #>   [949]   948   949   950   951   952   953   954   955   956   957   958   959 #>   [961]   960   961   962   963   964   965   966   967   968   969   970   971 #>   [973]   972   973   974   975   976   977   978   979   980   981   982   983 #>   [985]   984   985   986   987   988   989   990   991   992   993   994   995 #>   [997]   996   997   998   999  1000  1001  1002  1003  1004  1005  1006  1007 #>  [1009]  1008  1009  1010  1011  1012  1013  1014  1015  1016  1017  1018  1019 #>  [1021]  1020  1021  1022  1023  1024  1025  1026  1027  1028  1029  1030  1031 #>  [1033]  1032  1033  1034  1035  1036  1037  1038  1039  1040  1041  1042  1043 #>  [1045]  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053  1054  1055 #>  [1057]  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066  1067 #>  [1069]  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 #>  [1081]  1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091 #>  [1093]  1092  1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103 #>  [1105]  1104  1105  1106  1107  1108  1109  1110  1111  1112  1113  1114  1115 #>  [1117]  1116  1117  1118  1119  1120  1121  1122  1123  1124  1125  1126  1127 #>  [1129]  1128  1129  1130  1131  1132  1133  1134  1135  1136  1137  1138  1139 #>  [1141]  1140  1141  1142  1143  1144  1145  1146  1147  1148  1149  1150  1151 #>  [1153]  1152  1153  1154  1155  1156  1157  1158  1159  1160  1161  1162  1163 #>  [1165]  1164  1165  1166  1167  1168  1169  1170  1171  1172  1173  1174  1175 #>  [1177]  1176  1177  1178  1179  1180  1181  1182  1183  1184  1185  1186  1187 #>  [1189]  1188  1189  1190  1191  1192  1193  1194  1195  1196  1197  1198  1199 #>  [1201]  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209  1210  1211 #>  [1213]  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222  1223 #>  [1225]  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 #>  [1237]  1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247 #>  [1249]  1248  1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259 #>  [1261]  1260  1261  1262  1263  1264  1265  1266  1267  1268  1269  1270  1271 #>  [1273]  1272  1273  1274  1275  1276  1277  1278  1279  1280  1281  1282  1283 #>  [1285]  1284  1285  1286  1287  1288  1289  1290  1291  1292  1293  1294  1295 #>  [1297]  1296  1297  1298  1299  1300  1301  1302  1303  1304  1305  1306  1307 #>  [1309]  1308  1309  1310  1311  1312  1313  1314  1315  1316  1317  1318  1319 #>  [1321]  1320  1321  1322  1323  1324  1325  1326  1327  1328  1329  1330  1331 #>  [1333]  1332  1333  1334  1335  1336  1337  1338  1339  1340  1341  1342  1343 #>  [1345]  1344  1345  1346  1347  1348  1349  1350  1351  1352  1353  1354  1355 #>  [1357]  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365  1366  1367 #>  [1369]  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378  1379 #>  [1381]  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 #>  [1393]  1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403 #>  [1405]  1404  1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415 #>  [1417]  1416  1417  1418  1419  1420  1421  1422  1423  1424  1425  1426  1427 #>  [1429]  1428  1429  1430  1431  1432  1433  1434  1435  1436  1437  1438  1439 #>  [1441]  1440  1441  1442  1443  1444  1445  1446  1447  1448  1449  1450  1451 #>  [1453]  1452  1453  1454  1455  1456  1457  1458  1459  1460  1461  1462  1463 #>  [1465]  1464  1465  1466  1467  1468  1469  1470  1471  1472  1473  1474  1475 #>  [1477]  1476  1477  1478  1479  1480  1481  1482  1483  1484  1485  1486  1487 #>  [1489]  1488  1489  1490  1491  1492  1493  1494  1495  1496  1497  1498  1499 #>  [1501]  1500  1501  1502  1503  1504  1505  1506  1507  1508  1509  1510  1511 #>  [1513]  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521  1522  1523 #>  [1525]  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534  1535 #>  [1537]  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 #>  [1549]  1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559 #>  [1561]  1560  1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571 #>  [1573]  1572  1573  1574  1575  1576  1577  1578  1579  1580  1581  1582  1583 #>  [1585]  1584  1585  1586  1587  1588  1589  1590  1591  1592  1593  1594  1595 #>  [1597]  1596  1597  1598  1599  1600  1601  1602  1603  1604  1605  1606  1607 #>  [1609]  1608  1609  1610  1611  1612  1613  1614  1615  1616  1617  1618  1619 #>  [1621]  1620  1621  1622  1623  1624  1625  1626  1627  1628  1629  1630  1631 #>  [1633]  1632  1633  1634  1635  1636  1637  1638  1639  1640  1641  1642  1643 #>  [1645]  1644  1645  1646  1647  1648  1649  1650  1651  1652  1653  1654  1655 #>  [1657]  1656  1657  1658  1659  1660  1661  1662  1663  1664  1665  1666  1667 #>  [1669]  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677  1678  1679 #>  [1681]  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690  1691 #>  [1693]  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 #>  [1705]  1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715 #>  [1717]  1716  1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727 #>  [1729]  1728  1729  1730  1731  1732  1733  1734  1735  1736  1737  1738  1739 #>  [1741]  1740  1741  1742  1743  1744  1745  1746  1747  1748  1749  1750  1751 #>  [1753]  1752  1753  1754  1755  1756  1757  1758  1759  1760  1761  1762  1763 #>  [1765]  1764  1765  1766  1767  1768  1769  1770  1771  1772  1773  1774  1775 #>  [1777]  1776  1777  1778  1779  1780  1781  1782  1783  1784  1785  1786  1787 #>  [1789]  1788  1789  1790  1791  1792  1793  1794  1795  1796  1797  1798  1799 #>  [1801]  1800  1801  1802  1803  1804  1805  1806  1807  1808  1809  1810  1811 #>  [1813]  1812  1813  1814  1815  1816  1817  1818  1819  1820  1821  1822  1823 #>  [1825]  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833  1834  1835 #>  [1837]  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846  1847 #>  [1849]  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 #>  [1861]  1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871 #>  [1873]  1872  1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883 #>  [1885]  1884  1885  1886  1887  1888  1889  1890  1891  1892  1893  1894  1895 #>  [1897]  1896  1897  1898  1899  1900  1901  1902  1903  1904  1905  1906  1907 #>  [1909]  1908  1909  1910  1911  1912  1913  1914  1915  1916  1917  1918  1919 #>  [1921]  1920  1921  1922  1923  1924  1925  1926  1927  1928  1929  1930  1931 #>  [1933]  1932  1933  1934  1935  1936  1937  1938  1939  1940  1941  1942  1943 #>  [1945]  1944  1945  1946  1947  1948  1949  1950  1951  1952  1953  1954  1955 #>  [1957]  1956  1957  1958  1959  1960  1961  1962  1963  1964  1965  1966  1967 #>  [1969]  1968  1969  1970  1971  1972  1973  1974  1975  1976  1977  1978  1979 #>  [1981]  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989  1990  1991 #>  [1993]  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002  2003 #>  [2005]  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 #>  [2017]  2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027 #>  [2029]  2028  2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039 #>  [2041]  2040  2041  2042  2043  2044  2045  2046  2047  2048  2049  2050  2051 #>  [2053]  2052  2053  2054  2055  2056  2057  2058  2059  2060  2061  2062  2063 #>  [2065]  2064  2065  2066  2067  2068  2069  2070  2071  2072  2073  2074  2075 #>  [2077]  2076  2077  2078  2079  2080  2081  2082  2083  2084  2085  2086  2087 #>  [2089]  2088  2089  2090  2091  2092  2093  2094  2095  2096  2097  2098  2099 #>  [2101]  2100  2101  2102  2103  2104  2105  2106  2107  2108  2109  2110  2111 #>  [2113]  2112  2113  2114  2115  2116  2117  2118  2119  2120  2121  2122  2123 #>  [2125]  2124  2125  2126  2127  2128  2129  2130  2131  2132  2133  2134  2135 #>  [2137]  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145  2146  2147 #>  [2149]  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158  2159 #>  [2161]  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 #>  [2173]  2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183 #>  [2185]  2184  2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195 #>  [2197]  2196  2197  2198  2199  2200  2201  2202  2203  2204  2205  2206  2207 #>  [2209]  2208  2209  2210  2211  2212  2213  2214  2215  2216  2217  2218  2219 #>  [2221]  2220  2221  2222  2223  2224  2225  2226  2227  2228  2229  2230  2231 #>  [2233]  2232  2233  2234  2235  2236  2237  2238  2239  2240  2241  2242  2243 #>  [2245]  2244  2245  2246  2247  2248  2249  2250  2251  2252  2253  2254  2255 #>  [2257]  2256  2257  2258  2259  2260  2261  2262  2263  2264  2265  2266  2267 #>  [2269]  2268  2269  2270  2271  2272  2273  2274  2275  2276  2277  2278  2279 #>  [2281]  2280  2281  2282  2283  2284  2285  2286  2287  2288  2289  2290  2291 #>  [2293]  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301  2302  2303 #>  [2305]  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314  2315 #>  [2317]  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 #>  [2329]  2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339 #>  [2341]  2340  2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351 #>  [2353]  2352  2353  2354  2355  2356  2357  2358  2359  2360  2361  2362  2363 #>  [2365]  2364  2365  2366  2367  2368  2369  2370  2371  2372  2373  2374  2375 #>  [2377]  2376  2377  2378  2379  2380  2381  2382  2383  2384  2385  2386  2387 #>  [2389]  2388  2389  2390  2391  2392  2393  2394  2395  2396  2397  2398  2399 #>  [2401]  2400  2401  2402  2403  2404  2405  2406  2407  2408  2409  2410  2411 #>  [2413]  2412  2413  2414  2415  2416  2417  2418  2419  2420  2421  2422  2423 #>  [2425]  2424  2425  2426  2427  2428  2429  2430  2431  2432  2433  2434  2435 #>  [2437]  2436  2437  2438  2439  2440  2441  2442  2443  2444  2445  2446  2447 #>  [2449]  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457  2458  2459 #>  [2461]  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470  2471 #>  [2473]  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 #>  [2485]  2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495 #>  [2497]  2496  2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507 #>  [2509]  2508  2509  2510  2511  2512  2513  2514  2515  2516  2517  2518  2519 #>  [2521]  2520  2521  2522  2523  2524  2525  2526  2527  2528  2529  2530  2531 #>  [2533]  2532  2533  2534  2535  2536  2537  2538  2539  2540  2541  2542  2543 #>  [2545]  2544  2545  2546  2547  2548  2549  2550  2551  2552  2553  2554  2555 #>  [2557]  2556  2557  2558  2559  2560  2561  2562  2563  2564  2565  2566  2567 #>  [2569]  2568  2569  2570  2571  2572  2573  2574  2575  2576  2577  2578  2579 #>  [2581]  2580  2581  2582  2583  2584  2585  2586  2587  2588  2589  2590  2591 #>  [2593]  2592  2593  2594  2595  2596  2597  2598  2599  2600  2601  2602  2603 #>  [2605]  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613  2614  2615 #>  [2617]  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626  2627 #>  [2629]  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 #>  [2641]  2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651 #>  [2653]  2652  2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663 #>  [2665]  2664  2665  2666  2667  2668  2669  2670  2671  2672  2673  2674  2675 #>  [2677]  2676  2677  2678  2679  2680  2681  2682  2683  2684  2685  2686  2687 #>  [2689]  2688  2689  2690  2691  2692  2693  2694  2695  2696  2697  2698  2699 #>  [2701]  2700  2701  2702  2703  2704  2705  2706  2707  2708  2709  2710  2711 #>  [2713]  2712  2713  2714  2715  2716  2717  2718  2719  2720  2721  2722  2723 #>  [2725]  2724  2725  2726  2727  2728  2729  2730  2731  2732  2733  2734  2735 #>  [2737]  2736  2737  2738  2739  2740  2741  2742  2743  2744  2745  2746  2747 #>  [2749]  2748  2749  2750  2751  2752  2753  2754  2755  2756  2757  2758  2759 #>  [2761]  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769  2770  2771 #>  [2773]  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782  2783 #>  [2785]  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 #>  [2797]  2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807 #>  [2809]  2808  2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819 #>  [2821]  2820  2821  2822  2823  2824  2825  2826  2827  2828  2829  2830  2831 #>  [2833]  2832  2833  2834  2835  2836  2837  2838  2839  2840  2841  2842  2843 #>  [2845]  2844  2845  2846  2847  2848  2849  2850  2851  2852  2853  2854  2855 #>  [2857]  2856  2857  2858  2859  2860  2861  2862  2863  2864  2865  2866  2867 #>  [2869]  2868  2869  2870  2871  2872  2873  2874  2875  2876  2877  2878  2879 #>  [2881]  2880  2881  2882  2883  2884  2885  2886  2887  2888  2889  2890  2891 #>  [2893]  2892  2893  2894  2895  2896  2897  2898  2899  2900  2901  2902  2903 #>  [2905]  2904  2905  2906  2907  2908  2909  2910  2911  2912  2913  2914  2915 #>  [2917]  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925  2926  2927 #>  [2929]  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938  2939 #>  [2941]  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 #>  [2953]  2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963 #>  [2965]  2964  2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975 #>  [2977]  2976  2977  2978  2979  2980  2981  2982  2983  2984  2985  2986  2987 #>  [2989]  2988  2989  2990  2991  2992  2993  2994  2995  2996  2997  2998  2999 #>  [3001]  3000  3001  3002  3003  3004  3005  3006  3007  3008  3009  3010  3011 #>  [3013]  3012  3013  3014  3015  3016  3017  3018  3019  3020  3021  3022  3023 #>  [3025]  3024  3025  3026  3027  3028  3029  3030  3031  3032  3033  3034  3035 #>  [3037]  3036  3037  3038  3039  3040  3041  3042  3043  3044  3045  3046  3047 #>  [3049]  3048  3049  3050  3051  3052  3053  3054  3055  3056  3057  3058  3059 #>  [3061]  3060  3061  3062  3063  3064  3065  3066  3067  3068  3069  3070  3071 #>  [3073]  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081  3082  3083 #>  [3085]  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094  3095 #>  [3097]  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 #>  [3109]  3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119 #>  [3121]  3120  3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131 #>  [3133]  3132  3133  3134  3135  3136  3137  3138  3139  3140  3141  3142  3143 #>  [3145]  3144  3145  3146  3147  3148  3149  3150  3151  3152  3153  3154  3155 #>  [3157]  3156  3157  3158  3159  3160  3161  3162  3163  3164  3165  3166  3167 #>  [3169]  3168  3169  3170  3171  3172  3173  3174  3175  3176  3177  3178  3179 #>  [3181]  3180  3181  3182  3183  3184  3185  3186  3187  3188  3189  3190  3191 #>  [3193]  3192  3193  3194  3195  3196  3197  3198  3199  3200  3201  3202  3203 #>  [3205]  3204  3205  3206  3207  3208  3209  3210  3211  3212  3213  3214  3215 #>  [3217]  3216  3217  3218  3219  3220  3221  3222  3223  3224  3225  3226  3227 #>  [3229]  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237  3238  3239 #>  [3241]  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250  3251 #>  [3253]  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 #>  [3265]  3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275 #>  [3277]  3276  3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287 #>  [3289]  3288  3289  3290  3291  3292  3293  3294  3295  3296  3297  3298  3299 #>  [3301]  3300  3301  3302  3303  3304  3305  3306  3307  3308  3309  3310  3311 #>  [3313]  3312  3313  3314  3315  3316  3317  3318  3319  3320  3321  3322  3323 #>  [3325]  3324  3325  3326  3327  3328  3329  3330  3331  3332  3333  3334  3335 #>  [3337]  3336  3337  3338  3339  3340  3341  3342  3343  3344  3345  3346  3347 #>  [3349]  3348  3349  3350  3351  3352  3353  3354  3355  3356  3357  3358  3359 #>  [3361]  3360  3361  3362  3363  3364  3365  3366  3367  3368  3369  3370  3371 #>  [3373]  3372  3373  3374  3375  3376  3377  3378  3379  3380  3381  3382  3383 #>  [3385]  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393  3394  3395 #>  [3397]  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406  3407 #>  [3409]  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 #>  [3421]  3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431 #>  [3433]  3432  3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443 #>  [3445]  3444  3445  3446  3447  3448  3449  3450  3451  3452  3453  3454  3455 #>  [3457]  3456  3457  3458  3459  3460  3461  3462  3463  3464  3465  3466  3467 #>  [3469]  3468  3469  3470  3471  3472  3473  3474  3475  3476  3477  3478  3479 #>  [3481]  3480  3481  3482  3483  3484  3485  3486  3487  3488  3489  3490  3491 #>  [3493]  3492  3493  3494  3495  3496  3497  3498  3499  3500  3501  3502  3503 #>  [3505]  3504  3505  3506  3507  3508  3509  3510  3511  3512  3513  3514  3515 #>  [3517]  3516  3517  3518  3519  3520  3521  3522  3523  3524  3525  3526  3527 #>  [3529]  3528  3529  3530  3531  3532  3533  3534  3535  3536  3537  3538  3539 #>  [3541]  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549  3550  3551 #>  [3553]  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562  3563 #>  [3565]  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 #>  [3577]  3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587 #>  [3589]  3588  3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599 #>  [3601]  3600  3601  3602  3603  3604  3605  3606  3607  3608  3609  3610  3611 #>  [3613]  3612  3613  3614  3615  3616  3617  3618  3619  3620  3621  3622  3623 #>  [3625]  3624  3625  3626  3627  3628  3629  3630  3631  3632  3633  3634  3635 #>  [3637]  3636  3637  3638  3639  3640  3641  3642  3643  3644  3645  3646  3647 #>  [3649]  3648  3649  3650  3651  3652  3653  3654  3655  3656  3657  3658  3659 #>  [3661]  3660  3661  3662  3663  3664  3665  3666  3667  3668  3669  3670  3671 #>  [3673]  3672  3673  3674  3675  3676  3677  3678  3679  3680  3681  3682  3683 #>  [3685]  3684  3685  3686  3687  3688  3689  3690  3691  3692  3693  3694  3695 #>  [3697]  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705  3706  3707 #>  [3709]  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718  3719 #>  [3721]  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 #>  [3733]  3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743 #>  [3745]  3744  3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755 #>  [3757]  3756  3757  3758  3759  3760  3761  3762  3763  3764  3765  3766  3767 #>  [3769]  3768  3769  3770  3771  3772  3773  3774  3775  3776  3777  3778  3779 #>  [3781]  3780  3781  3782  3783  3784  3785  3786  3787  3788  3789  3790  3791 #>  [3793]  3792  3793  3794  3795  3796  3797  3798  3799  3800  3801  3802  3803 #>  [3805]  3804  3805  3806  3807  3808  3809  3810  3811  3812  3813  3814  3815 #>  [3817]  3816  3817  3818  3819  3820  3821  3822  3823  3824  3825  3826  3827 #>  [3829]  3828  3829  3830  3831  3832  3833  3834  3835  3836  3837  3838  3839 #>  [3841]  3840  3841  3842  3843  3844  3845  3846  3847  3848  3849  3850  3851 #>  [3853]  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861  3862  3863 #>  [3865]  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874  3875 #>  [3877]  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 #>  [3889]  3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899 #>  [3901]  3900  3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911 #>  [3913]  3912  3913  3914  3915  3916  3917  3918  3919  3920  3921  3922  3923 #>  [3925]  3924  3925  3926  3927  3928  3929  3930  3931  3932  3933  3934  3935 #>  [3937]  3936  3937  3938  3939  3940  3941  3942  3943  3944  3945  3946  3947 #>  [3949]  3948  3949  3950  3951  3952  3953  3954  3955  3956  3957  3958  3959 #>  [3961]  3960  3961  3962  3963  3964  3965  3966  3967  3968  3969  3970  3971 #>  [3973]  3972  3973  3974  3975  3976  3977  3978  3979  3980  3981  3982  3983 #>  [3985]  3984  3985  3986  3987  3988  3989  3990  3991  3992  3993  3994  3995 #>  [3997]  3996  3997  3998  3999  4000  4001  4002  4003  4004  4005  4006  4007 #>  [4009]  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017  4018  4019 #>  [4021]  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030  4031 #>  [4033]  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 #>  [4045]  4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055 #>  [4057]  4056  4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067 #>  [4069]  4068  4069  4070  4071  4072  4073  4074  4075  4076  4077  4078  4079 #>  [4081]  4080  4081  4082  4083  4084  4085  4086  4087  4088  4089  4090  4091 #>  [4093]  4092  4093  4094  4095  4096  4097  4098  4099  4100  4101  4102  4103 #>  [4105]  4104  4105  4106  4107  4108  4109  4110  4111  4112  4113  4114  4115 #>  [4117]  4116  4117  4118  4119  4120  4121  4122  4123  4124  4125  4126  4127 #>  [4129]  4128  4129  4130  4131  4132  4133  4134  4135  4136  4137  4138  4139 #>  [4141]  4140  4141  4142  4143  4144  4145  4146  4147  4148  4149  4150  4151 #>  [4153]  4152  4153  4154  4155  4156  4157  4158  4159  4160  4161  4162  4163 #>  [4165]  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173  4174  4175 #>  [4177]  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186  4187 #>  [4189]  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 #>  [4201]  4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211 #>  [4213]  4212  4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223 #>  [4225]  4224  4225  4226  4227  4228  4229  4230  4231  4232  4233  4234  4235 #>  [4237]  4236  4237  4238  4239  4240  4241  4242  4243  4244  4245  4246  4247 #>  [4249]  4248  4249  4250  4251  4252  4253  4254  4255  4256  4257  4258  4259 #>  [4261]  4260  4261  4262  4263  4264  4265  4266  4267  4268  4269  4270  4271 #>  [4273]  4272  4273  4274  4275  4276  4277  4278  4279  4280  4281  4282  4283 #>  [4285]  4284  4285  4286  4287  4288  4289  4290  4291  4292  4293  4294  4295 #>  [4297]  4296  4297  4298  4299  4300  4301  4302  4303  4304  4305  4306  4307 #>  [4309]  4308  4309  4310  4311  4312  4313  4314  4315  4316  4317  4318  4319 #>  [4321]  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329  4330  4331 #>  [4333]  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342  4343 #>  [4345]  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 #>  [4357]  4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367 #>  [4369]  4368  4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379 #>  [4381]  4592  4380  4381  4593  4382  4383  4384  4385  4386  4594  4595  4596 #>  [4393]  4597  4598  4387  4599  4600  4601  4388  4602  4603  4389  4604  4390 #>  [4405]  4605  4606  4607  4608  4609  4610  4391  4392  4611  4612  4393  4613 #>  [4417]  4614  4394  4395  4615  4616  4617  4618  4619  4620  4621  4622  4623 #>  [4429]  4624  4625  4626  4627  4628  4396  4629  4630  4631  4632  4633  4634 #>  [4441]  4635  4636  4637  4638  4639  4640  4641  4397  4642  4643  4644  4645 #>  [4453]  4646  4647  4648  4649  4650  4651  4652  4653  4654  4398  4655  4656 #>  [4465]  4399  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 #>  [4477]  4668  4669  4670  4671  4672  4400  4401  4673  4674  4675  4676  4677 #>  [4489]  4678  4679  4402  4680  4681  4682  4683  4684  4685  4686  4687  4688 #>  [4501]  4689  4690  4691  4692  4693  4694  4695  4696  4697  4698  4699  4403 #>  [4513]  4700  4701  4702  4703  4704  4705  4706  4707  4708  4709  4710  4711 #>  [4525]  4404  4712  4713  4714  4715  4716  4717  4718  4719  4720  4721  4722 #>  [4537]  4723  4724  4725  4726  4727  4728  4729  4730  4731  4732  4733  4734 #>  [4549]  4735  4736  4737  4738  4739  4405  4740  4741  4742  4743  4744  4745 #>  [4561]  4746  4747  4748  4749  4750  4751  4752  4753  4754  4755  4756  4757 #>  [4573]  4758  4759  4760  4761  4406  4762  4763  4764  4765  4766  4767  4768 #>  [4585]  4769  4770  4771  4772  4773  4774  4775  4776  4777  4778  4779  4780 #>  [4597]  4781  4782  4783  4784  4785  4786  4787  4788  4789  4790  4791  4792 #>  [4609]  4793  4794  4795  4796  4797  4798  4799  4800  4801  4802  4803  4804 #>  [4621]  4805  4806  4807  4808  4809  4810  4811  4812  4813  4814  4407  4815 #>  [4633]  4816  4817  4818  4819  4820  4821  4822  4823  4824  4825  4826  4827 #>  [4645]  4828  4829  4830  4831  4832  4833  4834  4835  4836  4837  4838  4839 #>  [4657]  4840  4841  4408  4409  4842  4843  4844  4845  4846  4847  4848  4849 #>  [4669]  4850  4851  4852  4853  4854  4855  4856  4857  4858  4859  4860  4410 #>  [4681]  4861  4862  4863  4864  4865  4866  4867  4868  4869  4870  4871  4872 #>  [4693]  4873  4411  4874  4875  4876  4877  4878  4879  4880  4881  4882  4883 #>  [4705]  4884  4885  4886  4887  4888  4889  4890  4891  4892  4893  4894  4895 #>  [4717]  4896  4897  4898  4899  4900  4901  4902  4903  4904  4905  4906  4907 #>  [4729]  4908  4909  4910  4911  4912  4913  4914  4412  4413  4915  4916  4917 #>  [4741]  4918  4919  4920  4921  4922  4923  4924  4925  4926  4927  4928  4929 #>  [4753]  4930  4931  4932  4933  4934  4935  4936  4937  4938  4939  4940  4941 #>  [4765]  4942  4943  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953 #>  [4777]  4954  4955  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965 #>  [4789]  4966  4967  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977 #>  [4801]  4978  4979  4980  4981  4982  4983  4984  4985  4986  4987  4988  4989 #>  [4813]  4990  4991  4992  4993  4994  4995  4996  4997  4998  4999  5000  5001 #>  [4825]  5002  5003  5004  5005  5006  5007  5008  5009  5010  5011  5012  5013 #>  [4837]  5014  5015  5016  5017  5018  5019  5020  5021  5022  4414  5023  5024 #>  [4849]  5025  5026  5027  5028  4415  5029  5030  5031  5032  5033  5034  5035 #>  [4861]  5036  5037  4416  5038  5039  5040  5041  5042  5043  5044  5045  5046 #>  [4873]  5047  5048  5049  5050  5051  5052  5053  5054  5055  5056  5057  5058 #>  [4885]  5059  5060  5061  5062  5063  5064  5065  5066  5067  5068  5069  5070 #>  [4897]  5071  5072  5073  5074  5075  5076  5077  5078  5079  5080  5081  5082 #>  [4909]  5083  5084  4417  5085  5086  5087  5088  5089  5090  5091  5092  5093 #>  [4921]  5094  5095  5096  5097  5098  5099  5100  5101  4418  5102  5103  5104 #>  [4933]  5105  5106  5107  5108  5109  5110  5111  5112  5113  5114  5115  5116 #>  [4945]  5117  5118  5119  4419  5120  5121  5122  5123  5124  4420  5125  5126 #>  [4957]  5127  5128  5129  5130  5131  5132  5133  5134  5135  5136  5137  4421 #>  [4969]  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147  5148  5149 #>  [4981]  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159  5160  5161 #>  [4993]  5162  5163  5164  5165  5166  5167  5168  5169  5170  5171  5172  5173 #>  [5005]  5174  5175  4422  5176  5177  5178  5179  5180  5181  5182  5183  5184 #>  [5017]  5185  5186  5187  5188  5189  5190  5191  5192  5193  5194  5195  5196 #>  [5029]  4423  5197  5198  5199  5200  5201  5202  5203  5204  5205  5206  5207 #>  [5041]  5208  5209  5210  5211  5212  5213  5214  5215  5216  5217  5218  5219 #>  [5053]  5220  5221  5222  5223  5224  5225  5226  5227  5228  5229  5230  5231 #>  [5065]  5232  5233  5234  5235  5236  5237  5238  5239  5240  5241  5242  5243 #>  [5077]  5244  5245  5246  5247  5248  5249  5250  4424  5251  5252  5253  5254 #>  [5089]  5255  5256  4425  5257  5258  5259  5260  5261  5262  5263  5264  5265 #>  [5101]  5266  5267  5268  5269  5270  5271  5272  4426  5273  5274  5275  5276 #>  [5113]  5277  5278  4427  5279  5280  5281  5282  5283  5284  5285  5286  5287 #>  [5125]  5288  5289  5290  5291  5292  5293  5294  5295  5296  5297  5298  5299 #>  [5137]  5300  5301  5302  5303  5304  5305  5306  5307  5308  5309  5310  5311 #>  [5149]  5312  5313  5314  5315  5316  4428  5317  5318  5319  5320  5321  4429 #>  [5161]  5322  5323  5324  5325  5326  5327  5328  5329  5330  5331  5332  5333 #>  [5173]  5334  5335  5336  5337  5338  5339  5340  5341  5342  5343  5344  5345 #>  [5185]  5346  5347  5348  5349  5350  5351  5352  5353  5354  5355  5356  5357 #>  [5197]  5358  5359  5360  5361  5362  5363  5364  5365  5366  5367  5368  5369 #>  [5209]  5370  5371  5372  5373  5374  5375  4430  5376  5377  5378  5379  5380 #>  [5221]  5381  5382  5383  5384  5385  5386  5387  5388  5389  5390  5391  5392 #>  [5233]  5393  5394  5395  5396  5397  5398  5399  5400  5401  5402  5403  5404 #>  [5245]  5405  5406  5407  5408  5409  5410  5411  5412  5413  4431  5414  5415 #>  [5257]  5416  5417  5418  5419  5420  5421  5422  5423  5424  5425  5426  5427 #>  [5269]  5428  5429  5430  5431  5432  5433  5434  5435  5436  5437  5438  5439 #>  [5281]  5440  5441  5442  5443  5444  5445  5446  5447  5448  5449  5450  5451 #>  [5293]  5452  5453  5454  5455  5456  5457  5458  5459  5460  5461  5462  4432 #>  [5305]  5463  5464  5465  5466  5467  5468  5469  5470  5471  5472  5473  5474 #>  [5317]  5475  5476  5477  5478  5479  5480  5481  5482  5483  5484  5485  5486 #>  [5329]  5487  5488  5489  5490  5491  5492  5493  5494  5495  5496  5497  5498 #>  [5341]  5499  5500  5501  5502  5503  5504  5505  5506  5507  5508  5509  5510 #>  [5353]  5511  5512  5513  5514  5515  5516  5517  5518  5519  5520  5521  5522 #>  [5365]  5523  5524  5525  5526  4433  5527  5528  5529  5530  5531  5532  5533 #>  [5377]  5534  5535  5536  5537  5538  5539  5540  5541  5542  5543  5544  5545 #>  [5389]  5546  5547  5548  5549  5550  5551  5552  5553  5554  5555  5556  5557 #>  [5401]  5558  5559  5560  5561  5562  5563  5564  5565  5566  5567  5568  5569 #>  [5413]  5570  5571  5572  5573  5574  5575  5576  5577  4434  5578  5579  5580 #>  [5425]  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590  5591  5592 #>  [5437]  4435  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 #>  [5449]  5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615 #>  [5461]  5616  5617  5618  5619  4436  5620  5621  5622  5623  5624  5625  5626 #>  [5473]  5627  5628  5629  4437  4438  5630  5631  5632  5633  5634  5635  5636 #>  [5485]  5637  5638  5639  5640  4439  5641  5642  5643  5644  5645  5646  5647 #>  [5497]  5648  5649  5650  5651  5652  5653  5654  5655  5656  5657  5658  5659 #>  [5509]  5660  5661  5662  5663  5664  5665  5666  5667  5668  4440  4441  5669 #>  [5521]  5670  5671  5672  5673  5674  5675  5676  5677  5678  5679  5680  5681 #>  [5533]  5682  5683  5684  5685  5686  5687  5688  5689  5690  5691  5692  5693 #>  [5545]  5694  5695  5696  5697  4442  5698  5699  5700  5701  5702  5703  5704 #>  [5557]  5705  5706  5707  5708  5709  5710  5711  5712  5713  5714  5715  5716 #>  [5569]  5717  5718  5719  5720  5721  5722  5723  5724  5725  5726  5727  5728 #>  [5581]  5729  5730  5731  5732  5733  5734  5735  5736  5737  5738  5739  5740 #>  [5593]  5741  5742  5743  5744  5745  4443  5746  5747  5748  5749  5750  5751 #>  [5605]  5752  5753  5754  5755  5756  5757  5758  5759  5760  5761  5762  5763 #>  [5617]  5764  5765  4444  5766  5767  5768  5769  5770  5771  5772  5773  5774 #>  [5629]  5775  5776  4445  5777  5778  5779  5780  5781  5782  5783  5784  5785 #>  [5641]  5786  4446  5787  5788  5789  5790  5791  5792  5793  5794  5795  5796 #>  [5653]  5797  5798  5799  4447  5800  5801  5802  5803  5804  5805  5806  5807 #>  [5665]  5808  5809  5810  5811  5812  5813  5814  5815  5816  5817  5818  5819 #>  [5677]  5820  5821  5822  5823  5824  5825  5826  5827  5828  5829  5830  5831 #>  [5689]  5832  5833  5834  5835  5836  5837  5838  5839  5840  5841  4448  5842 #>  [5701]  5843  5844  5845  5846  5847  5848  5849  5850  5851  5852  5853  5854 #>  [5713]  5855  5856  5857  5858  5859  5860  5861  5862  5863  5864  5865  5866 #>  [5725]  5867  5868  5869  5870  5871  5872  5873  5874  5875  5876  4449  4450 #>  [5737]  5877  5878  5879  5880  5881  5882  5883  5884  5885  5886  5887  5888 #>  [5749]  5889  5890  4451  4452  5891  5892  5893  5894  5895  5896  5897  5898 #>  [5761]  5899  5900  5901  5902  5903  5904  5905  5906  5907  5908  5909  5910 #>  [5773]  5911  5912  5913  5914  5915  5916  4453  5917  5918  5919  5920  5921 #>  [5785]  5922  5923  5924  5925  5926  5927  5928  5929  5930  5931  5932  5933 #>  [5797]  5934  5935  5936  5937  5938  5939  5940  5941  5942  5943  5944  5945 #>  [5809]  5946  5947  5948  5949  5950  5951  5952  5953  5954  5955  5956  5957 #>  [5821]  5958  5959  5960  5961  5962  5963  5964  5965  5966  5967  5968  5969 #>  [5833]  5970  5971  5972  5973  5974  5975  5976  5977  5978  5979  5980  5981 #>  [5845]  5982  5983  5984  5985  5986  5987  5988  5989  5990  5991  5992  5993 #>  [5857]  5994  5995  5996  5997  5998  5999  6000  6001  6002  6003  6004  6005 #>  [5869]  6006  6007  6008  6009  6010  6011  6012  6013  6014  6015  6016  6017 #>  [5881]  6018  6019  6020  6021  6022  6023  6024  6025  6026  6027  6028  6029 #>  [5893]  6030  6031  6032  6033  6034  6035  6036  6037  6038  6039  6040  6041 #>  [5905]  6042  6043  6044  6045  6046  6047  6048  6049  6050  6051  6052  6053 #>  [5917]  6054  6055  6056  6057  6058  6059  6060  6061  6062  6063  6064  6065 #>  [5929]  6066  6067  6068  6069  6070  6071  6072  6073  6074  4454  6075  6076 #>  [5941]  6077  6078  6079  6080  6081  6082  6083  6084  6085  6086  6087  4455 #>  [5953]  6088  6089  6090  6091  6092  6093  6094  6095  6096  6097  6098  6099 #>  [5965]  6100  6101  6102  6103  6104  6105  6106  6107  6108  6109  6110  6111 #>  [5977]  6112  6113  4456  4457  6114  6115  6116  6117  6118  6119  6120  6121 #>  [5989]  6122  6123  6124  6125  6126  6127  6128  6129  6130  6131  6132  6133 #>  [6001]  6134  6135  6136  6137  6138  6139  6140  6141  6142  6143  6144  6145 #>  [6013]  6146  6147  6148  6149  6150  6151  6152  6153  6154  6155  6156  6157 #>  [6025]  6158  4458  4459  6159  6160  6161  6162  6163  6164  6165  6166  6167 #>  [6037]  6168  6169  6170  6171  6172  6173  6174  6175  6176  6177  6178  6179 #>  [6049]  6180  6181  6182  6183  6184  6185  6186  6187  6188  6189  6190  6191 #>  [6061]  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201  6202  6203 #>  [6073]  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214  6215 #>  [6085]  6216  6217  6218  6219  6220  6221  4460  6222  6223  6224  6225  6226 #>  [6097]  6227  6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238 #>  [6109]  6239  6240  6241  6242  6243  6244  6245  6246  6247  6248  6249  6250 #>  [6121]  6251  6252  6253  4461  6254  6255  6256  6257  6258  6259  6260  6261 #>  [6133]  6262  6263  6264  6265  4462  4463  4464  6266  6267  6268  6269  6270 #>  [6145]  6271  6272  6273  6274  6275  6276  6277  6278  6279  6280  6281  6282 #>  [6157]  6283  6284  6285  6286  6287  6288  6289  6290  6291  6292  6293  6294 #>  [6169]  6295  6296  6297  6298  6299  6300  6301  6302  6303  6304  6305  6306 #>  [6181]  6307  6308  6309  6310  6311  6312  6313  6314  6315  6316  6317  6318 #>  [6193]  6319  6320  6321  6322  6323  6324  4465  6325  6326  6327  6328  6329 #>  [6205]  6330  6331  6332  6333  6334  6335  6336  6337  6338  6339  6340  6341 #>  [6217]  6342  6343  6344  6345  6346  6347  6348  6349  6350  6351  6352  6353 #>  [6229]  6354  6355  6356  6357  6358  6359  6360  6361  6362  6363  6364  6365 #>  [6241]  6366  6367  6368  6369  6370  6371  6372  6373  6374  6375  6376  6377 #>  [6253]  6378  6379  6380  6381  6382  6383  6384  6385  6386  6387  6388  6389 #>  [6265]  6390  6391  6392  6393  6394  6395  6396  6397  6398  6399  6400  6401 #>  [6277]  6402  6403  6404  6405  6406  6407  6408  6409  6410  6411  6412  6413 #>  [6289]  6414  6415  6416  6417  6418  6419  6420  6421  6422  6423  6424  6425 #>  [6301]  6426  6427  6428  6429  6430  6431  6432  6433  6434  6435  6436  6437 #>  [6313]  6438  6439  6440  6441  6442  6443  6444  6445  6446  6447  6448  6449 #>  [6325]  6450  6451  6452  6453  6454  6455  6456  6457  6458  6459  6460  6461 #>  [6337]  6462  6463  6464  6465  6466  6467  6468  6469  6470  6471  6472  6473 #>  [6349]  6474  6475  6476  6477  6478  6479  6480  6481  6482  6483  6484  6485 #>  [6361]  6486  6487  4466  6488  6489  6490  6491  6492  6493  6494  6495  6496 #>  [6373]  6497  6498  6499  6500  6501  6502  6503  6504  6505  6506  6507  6508 #>  [6385]  6509  6510  6511  6512  6513  6514  6515  6516  6517  6518  6519  6520 #>  [6397]  6521  6522  6523  6524  6525  6526  6527  6528  6529  6530  6531  6532 #>  [6409]  6533  6534  6535  6536  6537  6538  6539  6540  6541  6542  6543  6544 #>  [6421]  6545  6546  6547  6548  6549  6550  6551  6552  6553  6554  6555  6556 #>  [6433]  6557  6558  6559  6560  6561  6562  6563  6564  6565  6566  6567  6568 #>  [6445]  6569  6570  6571  6572  6573  6574  6575  6576  6577  6578  6579  6580 #>  [6457]  6581  6582  6583  6584  6585  6586  6587  6588  6589  6590  6591  6592 #>  [6469]  6593  6594  6595  6596  6597  6598  6599  6600  6601  6602  6603  6604 #>  [6481]  6605  6606  6607  6608  6609  6610  6611  6612  6613  6614  6615  6616 #>  [6493]  6617  6618  6619  6620  6621  6622  6623  6624  6625  6626  6627  6628 #>  [6505]  6629  6630  6631  6632  6633  6634  6635  6636  6637  6638  6639  6640 #>  [6517]  6641  6642  6643  6644  6645  6646  6647  6648  6649  6650  6651  6652 #>  [6529]  6653  6654  6655  6656  6657  6658  6659  6660  6661  6662  6663  6664 #>  [6541]  6665  6666  6667  6668  6669  6670  6671  6672  6673  6674  6675  6676 #>  [6553]  6677  6678  6679  4467  6680  6681  6682  6683  6684  6685  6686  6687 #>  [6565]  6688  6689  6690  6691  6692  6693  6694  6695  6696  6697  6698  6699 #>  [6577]  6700  6701  6702  6703  6704  6705  6706  6707  6708  6709  6710  6711 #>  [6589]  6712  6713  6714  6715  6716  6717  6718  6719  6720  6721  6722  6723 #>  [6601]  4468  6724  6725  6726  6727  6728  6729  6730  6731  6732  6733  6734 #>  [6613]  6735  6736  6737  6738  6739  6740  6741  6742  6743  6744  6745  6746 #>  [6625]  6747  6748  6749  6750  6751  6752  6753  6754  6755  6756  6757  6758 #>  [6637]  6759  6760  6761  6762  6763  4469  6764  6765  6766  6767  6768  6769 #>  [6649]  6770  6771  6772  6773  6774  6775  6776  6777  6778  6779  6780  6781 #>  [6661]  6782  6783  6784  6785  6786  6787  6788  6789  6790  6791  6792  6793 #>  [6673]  6794  6795  6796  6797  6798  6799  4470  6800  6801  6802  6803  6804 #>  [6685]  6805  6806  6807  6808  6809  6810  6811  4471  6812  6813  6814  6815 #>  [6697]  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825  6826  6827 #>  [6709]  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838  6839 #>  [6721]  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 #>  [6733]  6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863 #>  [6745]  4472  6864  6865  6866  6867  6868  6869  6870  6871  6872  6873  6874 #>  [6757]  6875  6876  6877  6878  6879  6880  6881  6882  6883  6884  6885  6886 #>  [6769]  6887  6888  6889  6890  6891  6892  6893  6894  6895  6896  6897  6898 #>  [6781]  6899  6900  6901  4473  6902  6903  6904  6905  6906  6907  6908  6909 #>  [6793]  6910  6911  6912  6913  6914  6915  6916  6917  6918  6919  6920  6921 #>  [6805]  6922  6923  6924  6925  6926  6927  6928  6929  6930  6931  6932  6933 #>  [6817]  6934  6935  6936  6937  6938  6939  6940  6941  6942  6943  6944  6945 #>  [6829]  6946  6947  6948  6949  6950  6951  6952  6953  6954  6955  6956  6957 #>  [6841]  6958  6959  6960  6961  6962  6963  6964  6965  6966  6967  4474  6968 #>  [6853]  6969  6970  6971  6972  6973  6974  6975  6976  6977  6978  6979  6980 #>  [6865]  6981  6982  6983  6984  6985  6986  6987  6988  6989  6990  6991  6992 #>  [6877]  6993  6994  6995  6996  6997  6998  6999  7000  7001  7002  7003  7004 #>  [6889]  7005  7006  7007  7008  7009  7010  7011  7012  7013  7014  7015  7016 #>  [6901]  7017  7018  7019  7020  7021  7022  7023  7024  7025  7026  7027  7028 #>  [6913]  7029  7030  7031  7032  7033  7034  7035  7036  7037  7038  7039  7040 #>  [6925]  7041  7042  7043  7044  7045  7046  7047  7048  7049  7050  7051  7052 #>  [6937]  7053  7054  7055  7056  7057  7058  7059  7060  7061  7062  7063  7064 #>  [6949]  7065  7066  7067  7068  7069  7070  7071  7072  7073  7074  4475  7075 #>  [6961]  7076  7077  7078  7079  7080  7081  7082  7083  7084  7085  7086  7087 #>  [6973]  7088  7089  7090  7091  7092  7093  7094  7095  7096  7097  7098  7099 #>  [6985]  7100  7101  7102  7103  7104  7105  7106  7107  7108  7109  7110  7111 #>  [6997]  7112  7113  7114  7115  7116  7117  7118  7119  7120  7121  7122  7123 #>  [7009]  7124  7125  7126  7127  7128  7129  7130  7131  7132  7133  7134  7135 #>  [7021]  7136  7137  7138  7139  7140  7141  7142  7143  7144  7145  7146  7147 #>  [7033]  7148  7149  7150  7151  7152  7153  7154  7155  7156  7157  7158  7159 #>  [7045]  7160  7161  7162  7163  7164  7165  7166  7167  7168  4476  7169  7170 #>  [7057]  7171  7172  7173  7174  7175  7176  7177  7178  7179  7180  7181  7182 #>  [7069]  7183  7184  7185  7186  7187  7188  7189  7190  7191  7192  7193  7194 #>  [7081]  7195  7196  7197  7198  7199  7200  7201  7202  7203  7204  7205  7206 #>  [7093]  7207  7208  7209  7210  7211  7212  7213  7214  7215  7216  7217  7218 #>  [7105]  7219  7220  7221  7222  7223  7224  7225  7226  7227  7228  7229  7230 #>  [7117]  7231  7232  7233  7234  7235  4477  4478  7236  7237  7238  7239  7240 #>  [7129]  7241  7242  7243  7244  7245  7246  7247  7248  7249  7250  7251  4479 #>  [7141]  7252  7253  7254  7255  7256  7257  7258  7259  7260  7261  7262  7263 #>  [7153]  7264  7265  7266  7267  7268  7269  7270  7271  7272  7273  7274  7275 #>  [7165]  7276  7277  7278  7279  7280  7281  7282  7283  7284  7285  7286  7287 #>  [7177]  7288  7289  7290  7291  7292  7293  7294  7295  7296  7297  7298  7299 #>  [7189]  7300  7301  7302  7303  7304  7305  7306  7307  7308  7309  7310  7311 #>  [7201]  7312  7313  7314  7315  7316  7317  7318  7319  7320  7321  7322  7323 #>  [7213]  7324  7325  7326  7327  7328  7329  7330  7331  7332  7333  7334  7335 #>  [7225]  7336  7337  7338  7339  7340  7341  7342  7343  7344  7345  7346  4480 #>  [7237]  7347  7348  7349  7350  7351  7352  7353  7354  7355  7356  7357  7358 #>  [7249]  7359  7360  7361  7362  7363  7364  7365  7366  7367  7368  7369  7370 #>  [7261]  7371  7372  7373  7374  7375  7376  7377  7378  4481  7379  7380  7381 #>  [7273]  7382  7383  7384  7385  7386  7387  7388  7389  7390  7391  7392  7393 #>  [7285]  7394  7395  7396  7397  7398  7399  7400  7401  7402  7403  7404  7405 #>  [7297]  7406  7407  7408  7409  7410  7411  7412  4482  7413  7414  7415  7416 #>  [7309]  7417  7418  7419  7420  7421  7422  7423  7424  7425  7426  7427  7428 #>  [7321]  7429  7430  7431  7432  7433  7434  7435  7436  7437  7438  7439  7440 #>  [7333]  7441  7442  7443  7444  7445  7446  7447  7448  7449  7450  7451  7452 #>  [7345]  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462  7463  7464 #>  [7357]  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475  7476 #>  [7369]  7477  4483  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487 #>  [7381]  7488  7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499 #>  [7393]  7500  7501  7502  7503  7504  7505  7506  7507  7508  7509  7510  7511 #>  [7405]  7512  7513  7514  7515  7516  7517  7518  7519  7520  7521  7522  7523 #>  [7417]  7524  7525  7526  7527  7528  7529  7530  7531  7532  7533  7534  7535 #>  [7429]  7536  7537  7538  7539  7540  7541  7542  7543  7544  7545  7546  7547 #>  [7441]  7548  7549  7550  7551  7552  7553  7554  7555  7556  7557  7558  7559 #>  [7453]  7560  7561  7562  7563  7564  7565  7566  7567  7568  7569  7570  7571 #>  [7465]  7572  7573  7574  7575  7576  7577  7578  7579  7580  7581  7582  4484 #>  [7477]  7583  7584  7585  7586  7587  7588  7589  7590  7591  7592  7593  7594 #>  [7489]  7595  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605  7606 #>  [7501]  7607  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618 #>  [7513]  7619  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630 #>  [7525]  7631  7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642 #>  [7537]  7643  7644  7645  7646  7647  7648  7649  7650  7651  7652  7653  7654 #>  [7549]  7655  7656  7657  7658  7659  7660  7661  7662  7663  7664  7665  7666 #>  [7561]  7667  7668  7669  7670  7671  7672  7673  7674  7675  7676  7677  7678 #>  [7573]  7679  7680  7681  7682  7683  7684  7685  7686  7687  7688  7689  7690 #>  [7585]  7691  7692  7693  7694  7695  7696  7697  7698  7699  7700  7701  7702 #>  [7597]  7703  7704  7705  7706  7707  7708  7709  7710  7711  7712  7713  7714 #>  [7609]  7715  7716  7717  7718  7719  7720  7721  7722  7723  7724  7725  7726 #>  [7621]  7727  7728  7729  7730  7731  7732  7733  7734  7735  7736  7737  7738 #>  [7633]  7739  7740  7741  7742  7743  7744  7745  7746  7747  7748  7749  7750 #>  [7645]  7751  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761  7762 #>  [7657]  7763  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774 #>  [7669]  7775  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786 #>  [7681]  7787  7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798 #>  [7693]  7799  7800  7801  7802  7803  7804  7805  7806  7807  7808  7809  7810 #>  [7705]  7811  7812  7813  7814  7815  7816  7817  7818  7819  7820  7821  7822 #>  [7717]  7823  7824  7825  7826  7827  7828  7829  7830  7831  7832  7833  7834 #>  [7729]  7835  7836  7837  7838  7839  7840  7841  7842  7843  7844  7845  4485 #>  [7741]  7846  7847  7848  7849  7850  7851  7852  7853  7854  7855  7856  7857 #>  [7753]  7858  7859  7860  7861  7862  7863  7864  7865  7866  7867  7868  7869 #>  [7765]  7870  7871  7872  7873  7874  7875  7876  7877  7878  7879  7880  7881 #>  [7777]  7882  7883  7884  7885  7886  7887  7888  7889  7890  7891  7892  7893 #>  [7789]  7894  7895  7896  7897  7898  7899  7900  7901  7902  7903  7904  7905 #>  [7801]  7906  4486  7907  7908  7909  7910  7911  7912  7913  7914  7915  7916 #>  [7813]  7917  7918  7919  7920  7921  7922  7923  7924  7925  7926  7927  7928 #>  [7825]  7929  7930  7931  7932  7933  7934  7935  7936  7937  7938  7939  7940 #>  [7837]  7941  7942  7943  7944  7945  7946  7947  7948  7949  7950  7951  7952 #>  [7849]  7953  7954  7955  7956  7957  7958  7959  7960  7961  7962  7963  7964 #>  [7861]  7965  7966  7967  7968  7969  7970  7971  7972  7973  7974  7975  7976 #>  [7873]  7977  7978  7979  7980  7981  7982  7983  7984  7985  7986  7987  7988 #>  [7885]  7989  7990  7991  7992  7993  7994  7995  7996  7997  7998  7999  4487 #>  [7897]  4488  8000  8001  8002  8003  8004  8005  8006  8007  8008  8009  8010 #>  [7909]  8011  8012  8013  8014  8015  8016  8017  8018  8019  8020  8021  8022 #>  [7921]  8023  8024  8025  8026  8027  8028  8029  8030  8031  8032  8033  8034 #>  [7933]  8035  8036  4489  8037  8038  8039  8040  8041  8042  8043  8044  8045 #>  [7945]  8046  8047  8048  8049  8050  8051  8052  8053  8054  8055  8056  8057 #>  [7957]  8058  8059  8060  8061  8062  8063  8064  8065  8066  8067  8068  8069 #>  [7969]  8070  8071  8072  4490  8073  8074  8075  8076  8077  8078  8079  8080 #>  [7981]  8081  8082  8083  8084  8085  8086  8087  8088  8089  8090  8091  8092 #>  [7993]  8093  4491  8094  8095  8096  8097  8098  8099  8100  8101  8102  8103 #>  [8005]  8104  8105  8106  8107  8108  8109  8110  8111  8112  8113  8114  8115 #>  [8017]  8116  8117  8118  8119  8120  8121  8122  8123  8124  8125  8126  8127 #>  [8029]  8128  8129  8130  8131  8132  8133  8134  8135  8136  8137  8138  8139 #>  [8041]  8140  8141  8142  8143  8144  8145  8146  8147  8148  8149  8150  8151 #>  [8053]  8152  8153  8154  8155  8156  8157  8158  8159  8160  8161  8162  8163 #>  [8065]  8164  8165  8166  8167  8168  8169  8170  8171  8172  8173  8174  8175 #>  [8077]  8176  8177  8178  8179  8180  8181  8182  8183  8184  8185  8186  8187 #>  [8089]  8188  8189  8190  8191  8192  8193  8194  8195  8196  8197  8198  8199 #>  [8101]  8200  8201  8202  8203  8204  8205  8206  8207  8208  8209  8210  8211 #>  [8113]  8212  8213  8214  8215  8216  8217  8218  8219  8220  8221  8222  8223 #>  [8125]  8224  8225  8226  8227  8228  8229  8230  8231  8232  8233  8234  8235 #>  [8137]  8236  8237  8238  8239  8240  8241  8242  8243  8244  8245  8246  8247 #>  [8149]  8248  8249  8250  8251  8252  8253  8254  8255  8256  8257  8258  8259 #>  [8161]  8260  8261  8262  8263  8264  8265  8266  8267  8268  8269  8270  8271 #>  [8173]  8272  8273  8274  8275  8276  8277  8278  8279  8280  8281  8282  8283 #>  [8185]  8284  8285  8286  8287  8288  8289  8290  8291  8292  8293  8294  8295 #>  [8197]  8296  8297  8298  8299  8300  8301  8302  8303  8304  8305  8306  8307 #>  [8209]  8308  8309  8310  8311  8312  8313  8314  4492  8315  8316  8317  8318 #>  [8221]  8319  8320  8321  8322  8323  8324  8325  8326  8327  8328  8329  8330 #>  [8233]  8331  8332  8333  8334  8335  8336  8337  8338  8339  8340  8341  8342 #>  [8245]  8343  8344  8345  8346  8347  8348  8349  8350  8351  8352  8353  8354 #>  [8257]  8355  8356  8357  8358  8359  8360  8361  8362  8363  8364  8365  8366 #>  [8269]  8367  8368  8369  8370  4493  4494  8371  8372  8373  8374  8375  8376 #>  [8281]  8377  8378  8379  8380  8381  8382  8383  8384  8385  8386  8387  8388 #>  [8293]  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398  8399  8400 #>  [8305]  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  4495  4496 #>  [8317]  8411  8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422 #>  [8329]  8423  8424  8425  8426  8427  8428  8429  8430  8431  8432  8433  4497 #>  [8341]  8434  8435  8436  8437  8438  8439  8440  8441  8442  8443  8444  8445 #>  [8353]  8446  8447  8448  8449  8450  8451  8452  8453  8454  8455  8456  8457 #>  [8365]  8458  8459  8460  8461  8462  8463  8464  8465  8466  8467  8468  8469 #>  [8377]  8470  8471  8472  8473  8474  8475  8476  8477  8478  8479  8480  8481 #>  [8389]  8482  8483  8484  8485  8486  8487  8488  8489  8490  8491  8492  8493 #>  [8401]  8494  8495  8496  8497  8498  8499  8500  8501  8502  8503  8504  8505 #>  [8413]  8506  8507  8508  8509  8510  8511  8512  8513  8514  8515  8516  8517 #>  [8425]  8518  8519  8520  8521  8522  8523  8524  8525  8526  8527  8528  8529 #>  [8437]  8530  8531  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541 #>  [8449]  8542  8543  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553 #>  [8461]  8554  8555  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565 #>  [8473]  8566  8567  8568  8569  8570  8571  8572  8573  8574  8575  8576  4498 #>  [8485]  8577  8578  8579  8580  8581  8582  8583  8584  8585  8586  8587  8588 #>  [8497]  8589  8590  8591  8592  8593  8594  8595  8596  8597  8598  8599  8600 #>  [8509]  8601  8602  8603  8604  8605  8606  8607  8608  8609  8610  8611  8612 #>  [8521]  8613  8614  8615  8616  8617  8618  8619  8620  8621  8622  8623  8624 #>  [8533]  8625  8626  8627  8628  8629  8630  8631  8632  8633  8634  8635  8636 #>  [8545]  8637  8638  8639  8640  8641  8642  8643  8644  8645  8646  8647  8648 #>  [8557]  8649  8650  8651  8652  8653  8654  8655  8656  8657  8658  8659  8660 #>  [8569]  8661  8662  8663  8664  8665  8666  8667  8668  8669  8670  8671  8672 #>  [8581]  8673  8674  8675  8676  8677  8678  8679  8680  8681  8682  8683  8684 #>  [8593]  8685  8686  8687  8688  8689  8690  8691  8692  8693  8694  8695  8696 #>  [8605]  8697  8698  8699  8700  8701  8702  8703  8704  8705  8706  8707  8708 #>  [8617]  4499  8709  8710  8711  8712  8713  8714  8715  8716  8717  8718  8719 #>  [8629]  8720  8721  8722  8723  8724  8725  8726  8727  8728  8729  8730  8731 #>  [8641]  8732  8733  8734  8735  8736  8737  8738  8739  8740  8741  8742  8743 #>  [8653]  8744  8745  8746  8747  8748  8749  8750  8751  8752  8753  8754  8755 #>  [8665]  8756  8757  8758  8759  8760  8761  8762  8763  8764  8765  8766  8767 #>  [8677]  8768  8769  8770  8771  8772  8773  8774  8775  8776  8777  8778  8779 #>  [8689]  8780  8781  8782  8783  8784  8785  8786  8787  8788  8789  8790  8791 #>  [8701]  8792  8793  8794  8795  8796  8797  8798  8799  8800  8801  8802  8803 #>  [8713]  8804  8805  8806  8807  8808  8809  4500  8810  8811  8812  8813  8814 #>  [8725]  8815  8816  8817  8818  8819  8820  8821  8822  8823  8824  8825  8826 #>  [8737]  8827  8828  8829  8830  8831  8832  8833  8834  8835  8836  8837  8838 #>  [8749]  8839  8840  8841  8842  8843  8844  8845  8846  8847  8848  8849  8850 #>  [8761]  8851  8852  8853  8854  8855  8856  8857  8858  8859  8860  8861  8862 #>  [8773]  8863  8864  8865  8866  8867  8868  8869  8870  8871  8872  8873  8874 #>  [8785]  8875  8876  8877  8878  8879  8880  8881  8882  8883  8884  8885  8886 #>  [8797]  8887  8888  8889  8890  8891  8892  8893  8894  8895  8896  8897  8898 #>  [8809]  8899  8900  8901  8902  8903  8904  8905  8906  8907  4501  4502  8908 #>  [8821]  8909  8910  8911  8912  8913  8914  8915  8916  8917  8918  8919  8920 #>  [8833]  8921  8922  8923  8924  8925  8926  8927  8928  8929  8930  8931  8932 #>  [8845]  8933  8934  8935  8936  8937  8938  8939  8940  8941  8942  8943  8944 #>  [8857]  8945  8946  8947  8948  8949  8950  8951  8952  8953  8954  8955  8956 #>  [8869]  8957  8958  8959  8960  8961  8962  8963  8964  8965  8966  8967  8968 #>  [8881]  8969  8970  8971  8972  8973  8974  8975  8976  8977  8978  8979  8980 #>  [8893]  8981  8982  8983  8984  8985  8986  8987  8988  8989  8990  8991  8992 #>  [8905]  8993  8994  8995  8996  8997  8998  8999  9000  9001  9002  9003  9004 #>  [8917]  9005  9006  9007  9008  9009  9010  9011  9012  9013  9014  9015  9016 #>  [8929]  9017  9018  9019  9020  9021  9022  9023  9024  9025  9026  9027  9028 #>  [8941]  9029  9030  9031  9032  9033  9034  9035  9036  9037  9038  9039  9040 #>  [8953]  9041  9042  9043  9044  9045  9046  9047  9048  9049  9050  9051  9052 #>  [8965]  9053  9054  9055  9056  9057  9058  9059  9060  9061  9062  9063  9064 #>  [8977]  9065  9066  9067  9068  9069  9070  9071  9072  9073  9074  9075  9076 #>  [8989]  9077  9078  9079  9080  9081  9082  9083  9084  9085  9086  9087  9088 #>  [9001]  9089  9090  9091  9092  9093  9094  9095  9096  9097  9098  9099  9100 #>  [9013]  9101  9102  9103  9104  9105  9106  9107  9108  9109  9110  9111  9112 #>  [9025]  9113  9114  9115  9116  9117  9118  9119  9120  9121  9122  9123  9124 #>  [9037]  9125  9126  9127  9128  9129  9130  9131  9132  9133  9134  9135  9136 #>  [9049]  9137  9138  9139  9140  9141  9142  9143  9144  9145  9146  9147  9148 #>  [9061]  9149  9150  9151  9152  9153  9154  9155  9156  9157  9158  9159  9160 #>  [9073]  9161  9162  9163  4503  4504  4505  9164  9165  9166  9167  9168  9169 #>  [9085]  9170  9171  9172  9173  9174  9175  9176  9177  9178  9179  9180  9181 #>  [9097]  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191  9192  9193 #>  [9109]  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203  9204  9205 #>  [9121]  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215  9216  9217 #>  [9133]  9218  9219  9220  9221  9222  9223  9224  9225  9226  9227  9228  9229 #>  [9145]  9230  9231  9232  9233  9234  9235  9236  9237  9238  9239  9240  9241 #>  [9157]  9242  9243  9244  9245  9246  9247  9248  9249  9250  9251  9252  9253 #>  [9169]  9254  9255  9256  9257  9258  9259  9260  9261  9262  9263  9264  9265 #>  [9181]  9266  9267  9268  9269  9270  9271  9272  9273  9274  9275  9276  9277 #>  [9193]  9278  9279  9280  9281  9282  9283  9284  9285  9286  9287  9288  9289 #>  [9205]  9290  9291  9292  9293  9294  9295  9296  9297  9298  9299  9300  9301 #>  [9217]  9302  9303  9304  9305  9306  9307  9308  9309  9310  9311  9312  9313 #>  [9229]  9314  9315  9316  9317  9318  4506  9319  9320  9321  9322  9323  9324 #>  [9241]  9325  9326  9327  9328  9329  9330  9331  9332  9333  4507  9334  9335 #>  [9253]  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 #>  [9265]  9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359 #>  [9277]  9360  9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371 #>  [9289]  9372  9373  9374  9375  9376  9377  9378  9379  9380  9381  9382  9383 #>  [9301]  9384  9385  9386  9387  9388  9389  9390  9391  9392  9393  9394  9395 #>  [9313]  9396  9397  9398  9399  9400  4508  9401  9402  9403  9404  9405  9406 #>  [9325]  9407  9408  9409  9410  9411  9412  9413  9414  9415  9416  9417  9418 #>  [9337]  9419  9420  9421  9422  9423  9424  9425  9426  9427  9428  9429  9430 #>  [9349]  9431  9432  9433  9434  9435  9436  4509  9437  9438  9439  9440  9441 #>  [9361]  9442  9443  9444  9445  9446  9447  9448  9449  9450  9451  9452  9453 #>  [9373]  9454  9455  9456  9457  4510  9458  9459  9460  9461  9462  9463  9464 #>  [9385]  9465  9466  9467  9468  9469  9470  9471  4511  9472  9473  9474  9475 #>  [9397]  9476  9477  9478  9479  9480  9481  9482  9483  9484  9485  9486  9487 #>  [9409]  9488  9489  9490  9491  9492  9493  9494  9495  9496  9497  9498  9499 #>  [9421]  9500  9501  9502  9503  9504  9505  9506  9507  9508  9509  9510  9511 #>  [9433]  9512  9513  9514  9515  9516  9517  9518  9519  9520  9521  9522  9523 #>  [9445]  9524  9525  9526  9527  9528  9529  9530  9531  4512  9532  9533  9534 #>  [9457]  9535  9536  9537  9538  9539  9540  9541  9542  9543  9544  9545  9546 #>  [9469]  9547  9548  9549  9550  9551  9552  9553  9554  9555  9556  9557  9558 #>  [9481]  9559  9560  9561  9562  9563  9564  9565  9566  9567  4513  4514  9568 #>  [9493]  9569  9570  9571  9572  9573  9574  9575  9576  9577  9578  9579  9580 #>  [9505]  9581  9582  9583  9584  9585  9586  9587  9588  9589  4515  9590  9591 #>  [9517]  9592  9593  9594  9595  9596  9597  9598  9599  9600  9601  9602  9603 #>  [9529]  9604  9605  9606  9607  9608  9609  9610  9611  9612  9613  9614  9615 #>  [9541]  9616  9617  9618  9619  9620  9621  9622  9623  9624  9625  9626  9627 #>  [9553]  9628  9629  9630  9631  9632  9633  9634  9635  9636  9637  9638  9639 #>  [9565]  9640  9641  9642  9643  9644  9645  9646  9647  9648  9649  9650  9651 #>  [9577]  9652  9653  9654  9655  9656  9657  9658  9659  9660  9661  9662  9663 #>  [9589]  9664  9665  9666  9667  9668  9669  9670  9671  9672  4516  9673  9674 #>  [9601]  9675  9676  9677  9678  9679  9680  9681  9682  9683  9684  9685  9686 #>  [9613]  9687  9688  9689  9690  9691  9692  9693  9694  9695  9696  9697  9698 #>  [9625]  9699  9700  9701  9702  9703  9704  9705  9706  9707  9708  9709  9710 #>  [9637]  9711  9712  9713  9714  9715  9716  9717  9718  9719  9720  9721  9722 #>  [9649]  9723  9724  9725  9726  9727  9728  9729  9730  9731  9732  9733  9734 #>  [9661]  9735  4517  9736  9737  9738  9739  9740  9741  9742  9743  9744  9745 #>  [9673]  9746  9747  9748  9749  9750  9751  9752  9753  9754  9755  9756  4518 #>  [9685]  4519  4520  9757  9758  9759  9760  9761  9762  9763  9764  9765  9766 #>  [9697]  9767  9768  9769  9770  9771  9772  9773  9774  9775  9776  9777  9778 #>  [9709]  9779  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789  9790 #>  [9721]  9791  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802 #>  [9733]  9803  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814 #>  [9745]  9815  9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826 #>  [9757]  9827  9828  9829  9830  9831  9832  9833  9834  9835  9836  9837  9838 #>  [9769]  9839  9840  9841  9842  9843  9844  9845  9846  9847  9848  9849  9850 #>  [9781]  9851  9852  9853  9854  9855  9856  9857  9858  4521  4522  9859  9860 #>  [9793]  9861  9862  9863  9864  9865  9866  9867  9868  9869  9870  9871  9872 #>  [9805]  9873  9874  9875  9876  9877  9878  9879  9880  9881  9882  9883  9884 #>  [9817]  9885  4523  9886  9887  9888  9889  9890  9891  9892  9893  9894  9895 #>  [9829]  9896  9897  9898  9899  9900  9901  9902  9903  9904  9905  9906  9907 #>  [9841]  9908  9909  9910  9911  9912  9913  9914  9915  9916  9917  9918  9919 #>  [9853]  9920  9921  9922  9923  9924  9925  9926  9927  9928  9929  9930  9931 #>  [9865]  9932  9933  9934  9935  9936  9937  9938  9939  9940  9941  4524  9942 #>  [9877]  9943  9944  9945  9946  9947  9948  9949  9950  9951  9952  9953  9954 #>  [9889]  9955  9956  9957  9958  9959  9960  9961  9962  9963  9964  9965  9966 #>  [9901]  9967  9968  9969  9970  9971  9972  9973  9974  9975  9976  9977  9978 #>  [9913]  9979  9980  9981  9982  9983  9984  9985  9986  4525  9987  9988  9989 #>  [9925]  9990  9991  9992  9993  9994  9995  9996  9997  9998  9999 10000 10001 #>  [9937] 10002 10003 10004 10005 10006 10007 10008  4526 10009 10010 10011 10012 #>  [9949] 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 10024 #>  [9961] 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 #>  [9973]  4527 10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 #>  [9985] 10048 10049 10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 #>  [9997] 10060 10061 10062 10063 10064 10065 10066 10067 10068 10069 10070 10071 #> [10009] 10072 10073 10074 10075 10076 10077 10078 10079 10080 10081 10082 10083 #> [10021] 10084 10085  4528 10086 10087 10088 10089 10090 10091 10092 10093 10094 #> [10033] 10095 10096 10097 10098 10099 10100 10101 10102 10103 10104 10105 10106 #> [10045] 10107 10108 10109 10110 10111 10112 10113 10114 10115 10116 10117 10118 #> [10057] 10119 10120 10121 10122 10123 10124 10125 10126 10127 10128 10129 10130 #> [10069] 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 10141 10142 #> [10081] 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 10154 #> [10093] 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 #> [10105] 10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 #> [10117] 10179 10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 #> [10129] 10191 10192 10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 #> [10141] 10203 10204 10205 10206 10207 10208 10209 10210 10211 10212 10213 10214 #> [10153] 10215 10216 10217 10218 10219 10220 10221 10222 10223 10224 10225 10226 #> [10165] 10227 10228 10229 10230 10231 10232 10233 10234 10235 10236 10237 10238 #> [10177] 10239 10240 10241 10242 10243 10244 10245 10246 10247 10248 10249 10250 #> [10189] 10251 10252 10253 10254 10255 10256 10257 10258 10259 10260 10261 10262 #> [10201] 10263 10264 10265 10266 10267 10268 10269 10270 10271 10272 10273 10274 #> [10213] 10275 10276 10277 10278 10279 10280 10281  4529 10282 10283 10284 10285 #> [10225] 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 10297 #> [10237] 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 #> [10249] 10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 #> [10261] 10322 10323 10324 10325 10326 10327 10328 10329  4530 10330 10331 10332 #> [10273] 10333 10334 10335 10336 10337 10338 10339 10340 10341 10342 10343 10344 #> [10285] 10345 10346 10347 10348 10349 10350 10351 10352 10353 10354 10355 10356 #> [10297] 10357 10358 10359 10360 10361 10362 10363 10364 10365 10366 10367 10368 #> [10309] 10369 10370 10371 10372 10373 10374 10375 10376 10377 10378 10379 10380 #> [10321] 10381 10382 10383 10384 10385 10386 10387 10388 10389 10390 10391 10392 #> [10333] 10393 10394 10395 10396 10397 10398 10399 10400 10401 10402 10403  4531 #> [10345] 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 10414 10415 #> [10357] 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 10427 #> [10369] 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 #> [10381] 10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 #> [10393] 10452 10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 #> [10405] 10464  4532 10465 10466 10467 10468 10469 10470 10471 10472 10473 10474 #> [10417] 10475 10476 10477 10478 10479 10480 10481 10482 10483 10484 10485 10486 #> [10429] 10487 10488 10489 10490 10491 10492 10493 10494 10495 10496 10497 10498 #> [10441] 10499 10500 10501 10502 10503 10504 10505 10506 10507 10508 10509 10510 #> [10453] 10511 10512 10513 10514 10515 10516 10517 10518 10519 10520 10521 10522 #> [10465] 10523 10524 10525 10526 10527 10528 10529 10530 10531 10532 10533 10534 #> [10477] 10535 10536 10537 10538 10539 10540 10541 10542 10543 10544 10545 10546 #> [10489] 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 10557 10558 #> [10501] 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 10570 #> [10513] 10571 10572 10573 10574 10575 10576 10577 10578  4533 10579 10580 10581 #> [10525] 10582 10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 #> [10537] 10594 10595 10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 #> [10549] 10606 10607 10608 10609 10610 10611 10612 10613 10614 10615 10616 10617 #> [10561] 10618 10619 10620 10621 10622 10623 10624 10625 10626 10627 10628 10629 #> [10573] 10630 10631 10632 10633  4534 10634 10635 10636 10637 10638 10639 10640 #> [10585] 10641 10642 10643 10644 10645 10646 10647 10648 10649 10650 10651 10652 #> [10597] 10653 10654 10655 10656 10657 10658 10659 10660 10661 10662 10663 10664 #> [10609] 10665  4535 10666 10667 10668 10669 10670 10671 10672 10673 10674 10675 #> [10621] 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 10687 #> [10633] 10688 10689 10690 10691 10692 10693 10694 10695  4536 10696 10697 10698 #> [10645] 10699 10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 #> [10657] 10711 10712 10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 #> [10669] 10723 10724 10725 10726 10727 10728 10729 10730 10731 10732 10733 10734 #> [10681] 10735 10736 10737 10738 10739 10740 10741 10742 10743 10744 10745 10746 #> [10693] 10747 10748 10749 10750 10751 10752 10753 10754 10755  4537 10756 10757 #> [10705] 10758 10759 10760 10761 10762 10763 10764 10765 10766 10767 10768 10769 #> [10717] 10770 10771 10772 10773 10774 10775 10776 10777 10778 10779 10780 10781 #> [10729] 10782 10783 10784 10785 10786 10787 10788 10789 10790 10791 10792 10793 #> [10741] 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 10804 10805 #> [10753] 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 10817 #> [10765] 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 #> [10777] 10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 #> [10789] 10842 10843  4538 10844 10845 10846 10847 10848 10849 10850 10851 10852 #> [10801] 10853 10854 10855 10856 10857 10858 10859 10860 10861 10862 10863 10864 #> [10813] 10865 10866 10867 10868 10869 10870 10871 10872 10873 10874 10875 10876 #> [10825] 10877 10878 10879 10880 10881 10882 10883 10884 10885 10886 10887  4539 #> [10837] 10888 10889 10890 10891 10892 10893 10894 10895 10896 10897 10898 10899 #> [10849] 10900 10901 10902 10903 10904 10905 10906 10907 10908 10909 10910 10911 #> [10861]  4540 10912 10913 10914 10915 10916 10917 10918 10919 10920 10921 10922 #> [10873] 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 10934 #> [10885] 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 #> [10897] 10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 #> [10909] 10959 10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 #> [10921] 10971 10972 10973 10974 10975  4541 10976 10977 10978 10979 10980 10981 #> [10933] 10982 10983 10984 10985 10986 10987 10988 10989 10990 10991 10992 10993 #> [10945] 10994 10995 10996 10997 10998 10999 11000 11001 11002 11003 11004 11005 #> [10957] 11006 11007 11008 11009 11010 11011 11012 11013 11014 11015 11016 11017 #> [10969] 11018 11019 11020 11021 11022 11023 11024 11025 11026 11027 11028 11029 #> [10981] 11030 11031 11032 11033 11034 11035 11036 11037 11038 11039 11040 11041 #> [10993] 11042 11043 11044 11045 11046 11047  4542  4543 11048 11049 11050 11051 #> [11005] 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 #> [11017] 11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 #> [11029] 11076 11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 #> [11041] 11088 11089 11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 #> [11053] 11100 11101 11102 11103 11104 11105 11106 11107 11108 11109 11110 11111 #> [11065] 11112 11113 11114 11115 11116 11117 11118 11119 11120 11121 11122 11123 #> [11077] 11124 11125 11126 11127 11128 11129 11130 11131 11132 11133 11134 11135 #> [11089] 11136 11137 11138 11139 11140 11141 11142 11143 11144 11145 11146 11147 #> [11101] 11148 11149 11150 11151 11152 11153 11154 11155 11156 11157 11158 11159 #> [11113] 11160 11161 11162 11163 11164 11165 11166  4544 11167 11168 11169 11170 #> [11125] 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 11181 11182 #> [11137] 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 11194 #> [11149] 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 #> [11161] 11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 #> [11173] 11219 11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 #> [11185] 11231 11232 11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 #> [11197] 11243 11244 11245 11246 11247 11248 11249 11250 11251 11252 11253 11254 #> [11209]  4545 11255 11256 11257 11258 11259 11260 11261 11262 11263 11264 11265 #> [11221] 11266 11267 11268 11269 11270 11271 11272 11273 11274 11275 11276 11277 #> [11233] 11278 11279 11280 11281 11282 11283  4546 11284 11285 11286 11287 11288 #> [11245] 11289 11290 11291 11292 11293 11294 11295 11296 11297 11298 11299 11300 #> [11257] 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 11311 11312 #> [11269] 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 11324 #> [11281] 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 #> [11293] 11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 #> [11305] 11349 11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 #> [11317] 11361 11362 11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 #> [11329] 11373 11374 11375 11376 11377 11378 11379 11380 11381 11382 11383 11384 #> [11341] 11385 11386 11387 11388 11389 11390 11391 11392 11393 11394 11395 11396 #> [11353] 11397 11398 11399 11400 11401 11402 11403 11404 11405 11406 11407 11408 #> [11365] 11409 11410 11411 11412 11413 11414 11415 11416 11417 11418 11419 11420 #> [11377] 11421 11422 11423 11424 11425 11426 11427 11428 11429 11430 11431 11432 #> [11389] 11433 11434 11435 11436 11437 11438 11439 11440 11441 11442 11443 11444 #> [11401] 11445 11446 11447 11448 11449 11450 11451 11452 11453 11454 11455 11456 #> [11413] 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 11467 11468 #> [11425] 11469  4547 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 #> [11437] 11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 #> [11449] 11492 11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 #> [11461] 11504 11505 11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 #> [11473] 11516 11517 11518 11519  4548 11520 11521 11522 11523 11524 11525 11526 #> [11485] 11527 11528 11529 11530 11531 11532 11533 11534 11535 11536 11537 11538 #> [11497] 11539 11540 11541 11542 11543 11544 11545 11546 11547 11548 11549 11550 #> [11509] 11551  4549  4550 11552 11553 11554 11555 11556 11557 11558 11559 11560 #> [11521] 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 11571 11572 #> [11533] 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 11584 #> [11545] 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 #> [11557] 11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 #> [11569] 11609 11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 #> [11581] 11621 11622 11623 11624  4551 11625 11626 11627 11628 11629 11630 11631 #> [11593] 11632 11633 11634 11635 11636 11637 11638 11639 11640 11641 11642 11643 #> [11605] 11644 11645 11646 11647 11648  4552 11649 11650 11651 11652 11653 11654 #> [11617] 11655 11656 11657 11658 11659 11660 11661 11662 11663 11664 11665 11666 #> [11629] 11667 11668 11669 11670 11671 11672 11673 11674 11675 11676 11677 11678 #> [11641] 11679 11680 11681 11682 11683 11684 11685 11686 11687 11688 11689 11690 #> [11653] 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 11701 11702 #> [11665] 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 11714 #> [11677] 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 #> [11689] 11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 #> [11701] 11739 11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 #> [11713] 11751 11752 11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 #> [11725] 11763 11764 11765 11766 11767 11768 11769 11770 11771 11772 11773 11774 #> [11737] 11775 11776 11777 11778 11779 11780 11781 11782 11783 11784 11785 11786 #> [11749] 11787 11788 11789 11790 11791 11792 11793 11794 11795 11796 11797 11798 #> [11761] 11799 11800 11801 11802 11803 11804 11805 11806 11807 11808 11809 11810 #> [11773] 11811 11812 11813 11814 11815 11816 11817 11818 11819 11820 11821 11822 #> [11785] 11823 11824 11825 11826 11827 11828 11829 11830 11831 11832 11833 11834 #> [11797]  4553 11835 11836 11837 11838 11839 11840 11841 11842 11843 11844 11845 #> [11809] 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 11857 #> [11821] 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 #> [11833] 11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 #> [11845] 11882 11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 #> [11857] 11894 11895 11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 #> [11869] 11906 11907 11908 11909 11910 11911 11912 11913 11914 11915 11916 11917 #> [11881] 11918 11919 11920 11921 11922 11923 11924 11925 11926 11927 11928 11929 #> [11893] 11930 11931 11932 11933 11934 11935 11936 11937 11938 11939 11940 11941 #> [11905] 11942 11943 11944 11945 11946 11947 11948 11949 11950 11951 11952 11953 #> [11917] 11954 11955 11956 11957 11958 11959 11960 11961 11962 11963 11964 11965 #> [11929] 11966 11967 11968 11969 11970 11971 11972 11973 11974 11975 11976 11977 #> [11941] 11978 11979 11980 11981 11982 11983 11984 11985 11986 11987 11988 11989 #> [11953] 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 12000 12001 #> [11965] 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 12013 #> [11977] 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 #> [11989] 12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 #> [12001] 12038 12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 #> [12013] 12050 12051 12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 #> [12025] 12062 12063 12064 12065 12066 12067 12068 12069 12070 12071 12072 12073 #> [12037] 12074 12075 12076 12077 12078 12079 12080 12081 12082 12083 12084 12085 #> [12049] 12086 12087  4554  4555 12088 12089 12090 12091 12092 12093 12094 12095 #> [12061] 12096 12097 12098 12099 12100 12101 12102 12103 12104 12105 12106 12107 #> [12073] 12108 12109 12110 12111 12112 12113 12114 12115 12116 12117 12118 12119 #> [12085] 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 12130 12131 #> [12097] 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 12143 #> [12109] 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 #> [12121] 12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 #> [12133] 12168 12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 #> [12145] 12180 12181 12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 #> [12157] 12192 12193 12194 12195 12196 12197 12198 12199 12200 12201 12202 12203 #> [12169] 12204 12205 12206 12207 12208 12209 12210 12211 12212 12213 12214 12215 #> [12181] 12216 12217 12218 12219 12220 12221 12222 12223 12224 12225 12226 12227 #> [12193] 12228 12229 12230 12231 12232 12233 12234 12235 12236 12237 12238 12239 #> [12205] 12240 12241 12242 12243 12244 12245 12246 12247 12248 12249 12250 12251 #> [12217] 12252 12253 12254 12255 12256 12257 12258 12259 12260 12261 12262 12263 #> [12229] 12264 12265 12266 12267 12268 12269 12270 12271 12272 12273 12274 12275 #> [12241] 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 12286 12287 #> [12253] 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 12299 #> [12265] 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 #> [12277] 12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 #> [12289] 12324 12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 #> [12301] 12336 12337 12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 #> [12313] 12348 12349 12350 12351 12352 12353 12354 12355 12356 12357 12358 12359 #> [12325] 12360 12361 12362 12363 12364 12365 12366 12367 12368 12369 12370 12371 #> [12337] 12372 12373 12374 12375 12376 12377 12378 12379 12380 12381 12382 12383 #> [12349] 12384 12385 12386 12387 12388 12389  4556 12390 12391 12392 12393 12394 #> [12361] 12395 12396 12397 12398 12399 12400 12401 12402 12403 12404 12405 12406 #> [12373] 12407 12408 12409 12410 12411 12412 12413 12414 12415 12416 12417 12418 #> [12385] 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 12429 12430 #> [12397] 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 12442 #> [12409] 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 #> [12421] 12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 #> [12433] 12467 12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 #> [12445] 12479 12480 12481 12482 12483 12484  4557 12485 12486 12487 12488 12489 #> [12457] 12490 12491 12492 12493 12494 12495 12496 12497 12498 12499 12500 12501 #> [12469] 12502 12503 12504 12505 12506 12507 12508  4558 12509 12510 12511 12512 #> [12481] 12513 12514 12515 12516 12517 12518 12519 12520 12521 12522 12523 12524 #> [12493] 12525 12526 12527 12528 12529 12530 12531 12532 12533 12534 12535 12536 #> [12505] 12537 12538 12539 12540 12541 12542 12543 12544 12545 12546 12547 12548 #> [12517] 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 12559 12560 #> [12529] 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 12572 #> [12541] 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 #> [12553] 12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 #> [12565] 12597 12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 #> [12577] 12609 12610 12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 #> [12589] 12621 12622 12623 12624 12625 12626 12627 12628 12629 12630 12631 12632 #> [12601] 12633 12634 12635 12636 12637 12638 12639 12640 12641 12642 12643 12644 #> [12613] 12645 12646 12647 12648 12649 12650 12651 12652 12653 12654 12655 12656 #> [12625] 12657 12658 12659 12660 12661 12662 12663 12664 12665 12666 12667 12668 #> [12637] 12669 12670 12671 12672 12673 12674 12675 12676 12677 12678 12679 12680 #> [12649] 12681 12682 12683 12684 12685 12686 12687 12688 12689 12690 12691 12692 #> [12661] 12693 12694 12695 12696 12697 12698 12699 12700 12701 12702 12703 12704 #> [12673] 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 12715 12716 #> [12685] 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 12728 #> [12697] 12729 12730 12731 12732 12733 12734 12735  4559 12736 12737 12738 12739 #> [12709] 12740 12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 #> [12721] 12752 12753 12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 #> [12733] 12764 12765 12766 12767 12768 12769 12770 12771 12772 12773 12774 12775 #> [12745] 12776 12777 12778 12779 12780 12781 12782 12783 12784 12785 12786 12787 #> [12757] 12788 12789 12790 12791 12792 12793 12794 12795 12796 12797 12798 12799 #> [12769] 12800 12801 12802 12803 12804 12805 12806 12807 12808 12809 12810 12811 #> [12781] 12812 12813 12814 12815 12816 12817 12818 12819 12820 12821 12822 12823 #> [12793] 12824 12825 12826 12827 12828 12829 12830 12831 12832 12833 12834 12835 #> [12805] 12836 12837 12838 12839 12840 12841 12842 12843 12844 12845 12846 12847 #> [12817] 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 12858 12859 #> [12829] 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 12871 #> [12841] 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 #> [12853] 12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 #> [12865] 12896 12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 #> [12877] 12908 12909 12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 #> [12889] 12920 12921 12922 12923 12924 12925 12926 12927 12928 12929 12930 12931 #> [12901] 12932 12933 12934 12935 12936 12937 12938 12939 12940 12941 12942 12943 #> [12913] 12944 12945 12946 12947 12948 12949 12950 12951 12952 12953 12954 12955 #> [12925] 12956 12957 12958 12959 12960 12961 12962 12963 12964 12965 12966 12967 #> [12937] 12968 12969 12970 12971 12972 12973 12974 12975 12976 12977 12978 12979 #> [12949] 12980 12981 12982 12983 12984 12985 12986 12987 12988 12989 12990 12991 #> [12961] 12992 12993 12994 12995 12996 12997 12998 12999 13000 13001 13002 13003 #> [12973] 13004 13005 13006 13007 13008 13009 13010 13011 13012 13013 13014 13015 #> [12985] 13016 13017 13018 13019 13020 13021 13022 13023 13024 13025 13026 13027 #> [12997] 13028 13029 13030 13031 13032 13033 13034 13035 13036 13037 13038 13039 #> [13009] 13040 13041 13042 13043 13044 13045 13046 13047 13048 13049 13050 13051 #> [13021] 13052 13053 13054 13055 13056 13057 13058 13059 13060 13061 13062 13063 #> [13033] 13064 13065 13066 13067 13068 13069 13070 13071 13072 13073 13074 13075 #> [13045] 13076 13077 13078  4560 13079 13080 13081 13082 13083 13084 13085 13086 #> [13057] 13087 13088 13089 13090 13091 13092 13093 13094 13095 13096 13097 13098 #> [13069] 13099 13100 13101 13102 13103 13104 13105 13106 13107 13108 13109 13110 #> [13081] 13111 13112 13113 13114 13115 13116 13117 13118 13119 13120 13121 13122 #> [13093] 13123 13124 13125 13126 13127 13128 13129 13130 13131 13132 13133 13134 #> [13105] 13135 13136 13137 13138 13139 13140 13141 13142 13143 13144 13145 13146 #> [13117] 13147 13148 13149 13150 13151 13152 13153 13154 13155 13156 13157 13158 #> [13129] 13159 13160 13161 13162 13163 13164 13165 13166 13167 13168 13169 13170 #> [13141] 13171 13172 13173 13174 13175 13176 13177 13178  4561 13179 13180 13181 #> [13153] 13182 13183 13184 13185 13186 13187 13188 13189 13190 13191 13192 13193 #> [13165] 13194 13195 13196 13197 13198 13199 13200 13201 13202 13203 13204 13205 #> [13177] 13206 13207 13208 13209 13210 13211 13212 13213 13214 13215 13216 13217 #> [13189] 13218 13219 13220 13221 13222 13223 13224 13225 13226 13227 13228 13229 #> [13201] 13230 13231 13232 13233 13234 13235 13236 13237 13238 13239 13240  4562 #> [13213] 13241 13242 13243 13244 13245 13246 13247 13248 13249 13250 13251 13252 #> [13225] 13253 13254 13255 13256 13257 13258 13259 13260 13261 13262 13263 13264 #> [13237] 13265 13266 13267 13268 13269 13270 13271 13272 13273 13274 13275 13276 #> [13249] 13277 13278 13279 13280 13281 13282 13283 13284 13285 13286 13287 13288 #> [13261] 13289 13290 13291 13292 13293 13294 13295  4563 13296 13297 13298 13299 #> [13273] 13300 13301 13302 13303 13304 13305 13306 13307 13308 13309 13310 13311 #> [13285] 13312 13313 13314 13315 13316 13317 13318 13319 13320 13321 13322 13323 #> [13297] 13324 13325 13326 13327 13328 13329 13330 13331 13332 13333 13334 13335 #> [13309] 13336 13337 13338 13339 13340 13341 13342 13343 13344 13345 13346 13347 #> [13321] 13348 13349 13350 13351 13352 13353 13354 13355 13356 13357 13358 13359 #> [13333] 13360 13361 13362 13363 13364 13365 13366 13367 13368 13369 13370 13371 #> [13345] 13372 13373 13374 13375 13376 13377 13378 13379 13380 13381 13382 13383 #> [13357] 13384 13385 13386 13387 13388 13389 13390 13391 13392 13393 13394 13395 #> [13369] 13396 13397 13398 13399 13400 13401 13402 13403 13404 13405 13406 13407 #> [13381] 13408 13409 13410 13411 13412 13413 13414 13415 13416 13417 13418 13419 #> [13393] 13420 13421 13422 13423 13424 13425 13426 13427 13428 13429 13430 13431 #> [13405] 13432 13433 13434 13435 13436 13437 13438 13439 13440 13441 13442 13443 #> [13417] 13444  4564 13445 13446 13447 13448 13449 13450 13451 13452 13453 13454 #> [13429] 13455 13456 13457 13458 13459 13460 13461 13462 13463 13464 13465 13466 #> [13441] 13467 13468 13469 13470 13471 13472  4565 13473 13474 13475 13476 13477 #> [13453] 13478 13479 13480 13481 13482 13483 13484 13485 13486 13487 13488 13489 #> [13465] 13490 13491 13492 13493 13494 13495 13496 13497 13498 13499 13500 13501 #> [13477] 13502 13503 13504 13505 13506 13507 13508 13509 13510 13511 13512 13513 #> [13489] 13514 13515 13516 13517 13518 13519 13520 13521 13522 13523 13524 13525 #> [13501] 13526 13527 13528 13529 13530 13531 13532 13533 13534 13535 13536 13537 #> [13513] 13538 13539 13540 13541 13542 13543 13544 13545 13546 13547 13548 13549 #> [13525] 13550 13551 13552 13553 13554 13555 13556 13557 13558 13559 13560 13561 #> [13537] 13562 13563 13564 13565 13566 13567 13568 13569 13570 13571 13572 13573 #> [13549] 13574 13575 13576 13577 13578 13579 13580 13581 13582 13583 13584 13585 #> [13561] 13586 13587 13588 13589 13590 13591 13592 13593 13594 13595 13596 13597 #> [13573] 13598 13599 13600 13601 13602 13603 13604 13605 13606 13607 13608 13609 #> [13585] 13610 13611 13612 13613 13614 13615 13616 13617 13618 13619 13620 13621 #> [13597] 13622  4566 13623 13624 13625 13626 13627 13628 13629 13630 13631 13632 #> [13609] 13633 13634 13635 13636 13637 13638 13639 13640 13641 13642 13643 13644 #> [13621] 13645 13646 13647 13648 13649  4567 13650 13651 13652 13653 13654 13655 #> [13633] 13656 13657 13658 13659 13660 13661 13662 13663 13664 13665 13666 13667 #> [13645] 13668 13669 13670 13671 13672 13673 13674 13675 13676 13677 13678 13679 #> [13657] 13680 13681 13682 13683 13684 13685 13686 13687 13688 13689 13690 13691 #> [13669] 13692 13693 13694 13695 13696 13697 13698 13699 13700 13701 13702 13703 #> [13681] 13704 13705 13706 13707 13708 13709 13710 13711 13712 13713 13714 13715 #> [13693] 13716 13717 13718  4568 13719 13720 13721 13722 13723 13724 13725 13726 #> [13705] 13727 13728 13729 13730 13731 13732 13733 13734 13735 13736 13737 13738 #> [13717] 13739 13740 13741 13742 13743 13744 13745 13746 13747 13748 13749 13750 #> [13729] 13751 13752 13753 13754 13755 13756 13757 13758 13759 13760 13761 13762 #> [13741] 13763 13764 13765 13766 13767 13768 13769 13770 13771 13772 13773 13774 #> [13753] 13775 13776 13777 13778 13779 13780 13781 13782 13783 13784 13785 13786 #> [13765] 13787 13788 13789 13790 13791 13792 13793 13794 13795 13796 13797 13798 #> [13777] 13799 13800 13801 13802 13803 13804 13805 13806 13807 13808 13809 13810 #> [13789] 13811 13812 13813 13814 13815 13816 13817 13818 13819 13820 13821 13822 #> [13801] 13823 13824 13825 13826 13827 13828 13829 13830 13831 13832 13833 13834 #> [13813] 13835 13836 13837 13838 13839 13840 13841 13842 13843 13844 13845 13846 #> [13825] 13847 13848 13849 13850 13851 13852 13853 13854 13855 13856 13857 13858 #> [13837] 13859 13860 13861 13862 13863 13864 13865 13866 13867 13868 13869 13870 #> [13849] 13871 13872 13873 13874 13875 13876 13877 13878 13879 13880  4569 13881 #> [13861] 13882 13883 13884 13885 13886 13887 13888 13889 13890 13891 13892 13893 #> [13873] 13894 13895 13896 13897 13898 13899 13900 13901 13902 13903 13904 13905 #> [13885] 13906 13907 13908 13909 13910 13911 13912 13913 13914 13915 13916 13917 #> [13897] 13918 13919 13920 13921 13922 13923 13924 13925 13926 13927 13928 13929 #> [13909] 13930 13931 13932 13933 13934 13935 13936 13937 13938 13939 13940 13941 #> [13921] 13942 13943 13944 13945 13946 13947 13948 13949 13950 13951 13952 13953 #> [13933] 13954 13955 13956 13957 13958 13959 13960 13961 13962 13963 13964 13965 #> [13945] 13966 13967 13968 13969 13970 13971 13972 13973 13974 13975 13976 13977 #> [13957] 13978 13979 13980 13981 13982 13983 13984 13985 13986 13987 13988 13989 #> [13969] 13990 13991 13992 13993 13994 13995 13996 13997 13998 13999 14000 14001 #> [13981] 14002 14003 14004 14005 14006 14007 14008 14009 14010 14011 14012 14013 #> [13993] 14014 14015 14016 14017 14018 14019 14020 14021  4570 14022 14023 14024 #> [14005] 14025 14026 14027 14028 14029 14030 14031 14032 14033 14034 14035 14036 #> [14017] 14037 14038 14039 14040 14041 14042 14043 14044 14045 14046 14047 14048 #> [14029] 14049 14050 14051 14052 14053 14054 14055 14056 14057 14058 14059 14060 #> [14041] 14061 14062 14063 14064 14065 14066 14067 14068 14069 14070 14071 14072 #> [14053] 14073 14074 14075 14076 14077 14078 14079 14080 14081 14082 14083 14084 #> [14065] 14085 14086 14087 14088 14089 14090 14091 14092 14093 14094 14095 14096 #> [14077] 14097 14098 14099 14100 14101 14102 14103 14104 14105 14106 14107 14108 #> [14089] 14109 14110 14111 14112 14113 14114 14115 14116 14117 14118 14119 14120 #> [14101] 14121 14122 14123 14124 14125 14126 14127 14128 14129 14130 14131 14132 #> [14113] 14133 14134 14135 14136 14137 14138 14139 14140  4571 14141 14142 14143 #> [14125] 14144 14145 14146 14147 14148 14149 14150 14151 14152 14153 14154 14155 #> [14137] 14156 14157 14158 14159 14160 14161 14162 14163 14164 14165 14166 14167 #> [14149] 14168 14169  4572 14170 14171 14172 14173 14174 14175 14176 14177 14178 #> [14161] 14179 14180 14181 14182 14183 14184 14185 14186 14187 14188 14189 14190 #> [14173] 14191 14192 14193 14194 14195 14196 14197 14198 14199 14200 14201 14202 #> [14185] 14203 14204 14205 14206 14207 14208  4573 14209 14210 14211 14212 14213 #> [14197] 14214 14215 14216 14217 14218 14219 14220 14221 14222 14223 14224 14225 #> [14209] 14226 14227 14228 14229 14230 14231 14232 14233 14234 14235 14236 14237 #> [14221] 14238 14239 14240 14241 14242 14243 14244 14245 14246 14247 14248 14249 #> [14233] 14250 14251 14252 14253 14254 14255 14256 14257 14258 14259 14260 14261 #> [14245] 14262 14263 14264 14265 14266 14267 14268 14269  4574 14270 14271 14272 #> [14257] 14273 14274 14275 14276 14277 14278 14279 14280 14281 14282 14283 14284 #> [14269] 14285 14286 14287 14288 14289 14290 14291 14292 14293 14294 14295 14296 #> [14281] 14297 14298 14299 14300 14301 14302 14303 14304 14305 14306 14307 14308 #> [14293] 14309 14310 14311 14312 14313 14314 14315 14316 14317 14318 14319 14320 #> [14305] 14321 14322 14323 14324 14325 14326 14327 14328 14329 14330 14331 14332 #> [14317] 14333 14334 14335 14336 14337 14338 14339 14340 14341  4575 14342 14343 #> [14329] 14344 14345 14346 14347 14348 14349 14350 14351 14352 14353 14354 14355 #> [14341] 14356 14357 14358 14359 14360 14361 14362 14363 14364 14365 14366 14367 #> [14353] 14368 14369 14370 14371 14372 14373 14374 14375 14376 14377 14378 14379 #> [14365] 14380 14381 14382 14383 14384 14385 14386 14387 14388 14389 14390 14391 #> [14377]  4576 14392 14393 14394 14395 14396 14397 14398 14399 14400 14401 14402 #> [14389] 14403 14404 14405 14406 14407 14408 14409 14410 14411 14412 14413 14414 #> [14401] 14415 14416 14417 14418 14419 14420 14421 14422 14423 14424 14425 14426 #> [14413] 14427 14428 14429 14430 14431 14432 14433 14434 14435 14436 14437 14438 #> [14425] 14439 14440 14441 14442 14443 14444 14445 14446 14447 14448 14449 14450 #> [14437] 14451 14452 14453 14454 14455 14456 14457 14458 14459 14460 14461 14462 #> [14449] 14463 14464 14465 14466 14467 14468 14469 14470 14471 14472 14473 14474 #> [14461] 14475 14476 14477 14478 14479 14480 14481 14482 14483 14484 14485 14486 #> [14473] 14487 14488 14489 14490 14491 14492 14493 14494 14495 14496 14497 14498 #> [14485] 14499 14500 14501 14502 14503 14504 14505 14506 14507 14508 14509 14510 #> [14497] 14511 14512 14513 14514 14515 14516 14517 14518 14519 14520 14521 14522 #> [14509] 14523 14524 14525 14526 14527 14528 14529 14530  4577 14531 14532 14533 #> [14521] 14534 14535 14536 14537 14538 14539 14540 14541 14542 14543 14544 14545 #> [14533] 14546 14547 14548 14549 14550 14551 14552 14553 14554 14555 14556 14557 #> [14545] 14558 14559 14560 14561 14562 14563 14564 14565 14566 14567 14568 14569 #> [14557] 14570 14571 14572 14573 14574 14575 14576 14577 14578 14579 14580 14581 #> [14569] 14582 14583 14584 14585 14586 14587 14588 14589 14590 14591 14592 14593 #> [14581] 14594 14595 14596 14597 14598 14599 14600 14601 14602 14603 14604 14605 #> [14593] 14606 14607 14608 14609 14610 14611 14612 14613 14614 14615 14616 14617 #> [14605] 14618 14619 14620 14621 14622 14623 14624 14625 14626  4578  4579 14627 #> [14617] 14628 14629 14630 14631 14632 14633 14634 14635 14636 14637 14638 14639 #> [14629] 14640 14641 14642 14643 14644 14645 14646 14647 14648 14649 14650 14651 #> [14641] 14652 14653 14654 14655 14656 14657 14658 14659 14660 14661 14662 14663 #> [14653] 14664 14665 14666  4580 14667 14668 14669 14670 14671 14672 14673 14674 #> [14665] 14675 14676 14677 14678 14679 14680 14681 14682 14683 14684 14685 14686 #> [14677] 14687 14688 14689 14690 14691 14692 14693 14694 14695 14696 14697  4581 #> [14689] 14698 14699 14700 14701 14702 14703 14704 14705 14706 14707 14708 14709 #> [14701] 14710 14711 14712 14713 14714 14715 14716 14717 14718 14719 14720 14721 #> [14713] 14722 14723 14724 14725 14726 14727 14728 14729 14730 14731 14732 14733 #> [14725] 14734 14735 14736 14737 14738 14739 14740 14741 14742 14743 14744 14745 #> [14737] 14746 14747 14748 14749 14750 14751 14752 14753 14754 14755 14756 14757 #> [14749] 14758 14759 14760 14761 14762 14763 14764 14765 14766 14767 14768 14769 #> [14761] 14770 14771 14772 14773 14774 14775 14776 14777 14778 14779 14780 14781 #> [14773] 14782 14783 14784 14785 14786 14787 14788 14789 14790 14791 14792 14793 #> [14785] 14794 14795 14796 14797 14798 14799 14800 14801 14802 14803 14804 14805 #> [14797] 14806 14807 14808 14809 14810 14811 14812 14813 14814 14815 14816 14817 #> [14809] 14818 14819 14820 14821 14822 14823 14824 14825 14826 14827 14828 14829 #> [14821] 14830 14831 14832 14833 14834 14835 14836 14837 14838 14839 14840 14841 #> [14833] 14842 14843 14844 14845 14846 14847 14848 14849 14850 14851 14852 14853 #> [14845] 14854 14855 14856 14857 14858 14859 14860 14861 14862 14863 14864 14865 #> [14857] 14866 14867 14868 14869 14870 14871 14872 14873 14874 14875 14876 14877 #> [14869] 14878 14879 14880 14881 14882 14883 14884 14885 14886 14887 14888 14889 #> [14881] 14890 14891 14892 14893 14894 14895 14896 14897 14898 14899 14900 14901 #> [14893] 14902 14903 14904 14905 14906 14907 14908 14909 14910 14911 14912 14913 #> [14905] 14914 14915 14916 14917 14918 14919 14920 14921 14922 14923 14924 14925 #> [14917] 14926 14927  4582 14928 14929 14930 14931 14932 14933 14934 14935 14936 #> [14929] 14937 14938 14939 14940 14941 14942 14943 14944 14945 14946 14947 14948 #> [14941] 14949 14950 14951 14952 14953 14954 14955 14956 14957 14958 14959 14960 #> [14953] 14961 14962 14963 14964 14965 14966 14967 14968 14969 14970 14971 14972 #> [14965] 14973 14974 14975 14976 14977 14978 14979 14980 14981 14982 14983 14984 #> [14977] 14985 14986 14987 14988 14989 14990 14991 14992 14993 14994 14995 14996 #> [14989] 14997 14998 14999 15000 15001 15002  4583 15003 15004 15005 15006 15007 #> [15001] 15008 15009 15010 15011 15012 15013 15014 15015 15016 15017 15018 15019 #> [15013] 15020 15021 15022 15023 15024 15025 15026 15027 15028 15029 15030 15031 #> [15025] 15032 15033 15034 15035 15036 15037 15038 15039 15040 15041 15042 15043 #> [15037] 15044 15045 15046 15047 15048 15049 15050 15051 15052 15053 15054 15055 #> [15049] 15056 15057 15058 15059 15060 15061 15062 15063 15064 15065 15066 15067 #> [15061] 15068 15069 15070 15071 15072 15073 15074 15075 15076 15077 15078 15079 #> [15073] 15080 15081 15082 15083 15084 15085 15086 15087 15088 15089 15090 15091 #> [15085] 15092  4584 15093 15094 15095 15096 15097 15098 15099 15100 15101 15102 #> [15097] 15103 15104 15105 15106 15107 15108 15109 15110 15111 15112 15113 15114 #> [15109] 15115 15116 15117 15118 15119 15120 15121 15122 15123 15124 15125 15126 #> [15121] 15127 15128 15129 15130 15131 15132 15133 15134 15135 15136 15137 15138 #> [15133] 15139 15140 15141 15142 15143 15144 15145 15146 15147 15148 15149 15150 #> [15145] 15151 15152 15153 15154 15155 15156 15157 15158 15159 15160 15161 15162 #> [15157] 15163 15164 15165 15166 15167 15168 15169 15170 15171 15172 15173 15174 #> [15169] 15175 15176 15177 15178 15179 15180 15181 15182 15183 15184 15185 15186 #> [15181] 15187 15188 15189 15190 15191 15192 15193 15194 15195 15196 15197 15198 #> [15193] 15199 15200 15201 15202 15203 15204  4585 15205 15206 15207 15208 15209 #> [15205] 15210 15211 15212 15213 15214 15215 15216 15217 15218 15219 15220 15221 #> [15217] 15222 15223 15224 15225 15226 15227 15228 15229 15230 15231 15232 15233 #> [15229] 15234 15235 15236 15237 15238 15239 15240 15241 15242 15243 15244 15245 #> [15241] 15246 15247 15248 15249 15250 15251 15252 15253 15254 15255 15256 15257 #> [15253] 15258 15259 15260 15261 15262 15263 15264 15265 15266 15267 15268 15269 #> [15265] 15270 15271 15272 15273 15274 15275 15276 15277 15278 15279 15280 15281 #> [15277] 15282 15283 15284 15285 15286 15287 15288 15289 15290 15291 15292 15293 #> [15289] 15294 15295 15296 15297 15298 15299 15300 15301 15302 15303 15304 15305 #> [15301] 15306 15307 15308 15309 15310 15311 15312 15313 15314 15315 15316 15317 #> [15313] 15318 15319 15320 15321 15322 15323 15324 15325 15326 15327 15328 15329 #> [15325]  4586 15330 15331 15332 15333 15334 15335 15336 15337 15338 15339 15340 #> [15337] 15341 15342 15343 15344 15345 15346 15347 15348 15349 15350 15351 15352 #> [15349] 15353 15354 15355 15356 15357 15358 15359 15360 15361 15362 15363 15364 #> [15361] 15365 15366 15367 15368 15369 15370 15371 15372 15373 15374 15375 15376 #> [15373] 15377 15378 15379 15380 15381 15382 15383 15384 15385 15386 15387 15388 #> [15385] 15389 15390 15391 15392 15393 15394 15395 15396 15397 15398 15399 15400 #> [15397] 15401 15402 15403 15404 15405 15406 15407 15408 15409 15410 15411 15412 #> [15409] 15413 15414 15415 15416 15417 15418 15419 15420 15421 15422 15423 15424 #> [15421] 15425 15426 15427 15428 15429 15430 15431 15432 15433 15434 15435 15436 #> [15433] 15437 15438 15439 15440 15441 15442 15443 15444 15445 15446 15447 15448 #> [15445] 15449 15450 15451 15452 15453 15454 15455 15456 15457 15458 15459 15460 #> [15457] 15461  4587 15462 15463 15464 15465 15466 15467 15468 15469 15470 15471 #> [15469] 15472 15473 15474 15475 15476 15477 15478 15479 15480 15481 15482 15483 #> [15481] 15484 15485 15486 15487 15488 15489 15490 15491 15492 15493 15494 15495 #> [15493] 15496 15497 15498 15499 15500 15501 15502 15503 15504 15505 15506 15507 #> [15505] 15508 15509 15510 15511 15512 15513 15514 15515 15516 15517 15518 15519 #> [15517] 15520 15521 15522 15523 15524 15525 15526 15527 15528 15529 15530 15531 #> [15529] 15532 15533 15534 15535 15536 15537 15538 15539 15540 15541 15542 15543 #> [15541] 15544 15545 15546 15547 15548 15549 15550 15551 15552 15553 15554 15555 #> [15553] 15556 15557 15558  4588  4589 15559 15560 15561 15562 15563 15564 15565 #> [15565] 15566 15567 15568 15569 15570 15571 15572 15573 15574 15575 15576 15577 #> [15577] 15578 15579 15580 15581 15582 15583 15584 15585 15586 15587 15588 15589 #> [15589] 15590 15591 15592 15593 15594 15595 15596 15597 15598 15599 15600 15601 #> [15601] 15602 15603 15604 15605 15606 15607 15608 15609 15610 15611 15612 15613 #> [15613] 15614 15615 15616 15617 15618 15619 15620 15621 15622 15623 15624 15625 #> [15625] 15626 15627 15628 15629 15630 15631 15632 15633 15634 15635 15636 15637 #> [15637] 15638 15639 15640 15641 15642 15643 15644 15645 15646 15647 15648 15649 #> [15649] 15650 15651 15652 15653 15654 15655 15656 15657 15658 15659 15660 15661 #> [15661] 15662 15663 15664 15665 15666 15667 15668 15669 15670 15671 15672 15673 #> [15673] 15674 15675 15676 15677 15678 15679 15680 15681 15682 15683 15684 15685 #> [15685] 15686 15687 15688 15689 15690 15691 15692 15693 15694 15695 15696 15697 #> [15697] 15698 15699 15700 15701 15702 15703 15704 15705 15706 15707 15708 15709 #> [15709] 15710 15711 15712 15713 15714 15715 15716 15717 15718 15719 15720 15721 #> [15721] 15722 15723 15724 15725 15726 15727 15728 15729 15730  4590 15731 15732 #> [15733] 15733 15734 15735 15736 15737 15738 15739 15740 15741 15742 15743 15744 #> [15745] 15745 15746 15747 15748 15749 15750 15751 15752 15753 15754 15755 15756 #> [15757] 15757 15758 15759 15760 15761 15762 15763 15764 15765 15766 15767 15768 #> [15769] 15769 15770 15771 15772 15773 15774 15775 15776 15777 15778 15779 15780 #> [15781] 15781 15782 15783 15784 15785 15786 15787 15788 15789 15790 15791 15792 #> [15793] 15793 15794 15795 15796 15797 15798 15799 15800 15801 15802 15803 15804 #> [15805] 15805 15806 15807 15808 15809 15810 15811 15812 15813 15814 15815 15816 #> [15817] 15817 15818 15819 15820 15821 15822 15823 15824 15825 15826 15827 15828 #> [15829] 15829 15830 15831 15832 15833 15834 15835 15836 15837 15838 15839 15840 #> [15841] 15841 15842 15843 15844 15845 15846 15847 15848 15849 15850 15851 15852 #> [15853] 15853 15854 15855 15856 15857 15858 15859 15860 15861 15862 15863 15864 #> [15865] 15865 15866 15867 15868 15869 15870 15871 15872 15873 15874 15875 15876 #> [15877] 15877 15878 15879 15880 15881 15882 15883 15884 15885 15886 15887 15888 #> [15889] 15889 15890 15891 15892 15893 15894 15895 15896 15897 15898 15899 15900 #> [15901] 15901 15902 15903 15904 15905 15906 15907 15908 15909 15910 15911 15912 #> [15913] 15913 15914 15915 15916 15917 15918 15919 15920 15921 15922 15923 15924 #> [15925] 15925 15926 15927 15928 15929 15930 15931 15932 15933 15934 15935 15936 #> [15937] 15937 15938 15939 15940 15941 15942 15943 15944 15945 15946 15947 15948 #> [15949] 15949 15950 15951 15952 15953 15954 15955 15956 15957 15958 15959 15960 #> [15961] 15961 15962 15963 15964 15965 15966 15967 15968 15969 15970 15971 15972 #> [15973] 15973 15974 15975 15976 15977 15978 15979 15980 15981 15982 15983 15984 #> [15985] 15985 15986 15987 15988 15989 15990 15991 15992 15993 15994 15995 15996 #> [15997] 15997 15998 15999 16000 16001 16002 16003 16004 16005 16006 16007 16008 #> [16009] 16009 16010 16011 16012 16013 16014 16015 16016 16017 16018 16019 16020 #> [16021] 16021 16022 16023 16024 16025 16026 16027 16028 16029 16030 16031 16032 #> [16033] 16033 16034 16035 16036 16037 16038 16039 16040 16041 16042 16043 16044 #> [16045] 16045 16046 16047 16048 16049 16050 16051 16052 16053 16054  4591 16055 #> [16057] 16056 16057 16058 16059 16060 16061 16062 16063 16064 16065 16066 16067 #> [16069] 16068 16069 16070 16071 16072 16073 16074 16075 16076 16077 16078 16079 #> [16081] 16080 16081 16082 16083 16084 16085 16086 16087 16088 16089 16090 16091 #> [16093] 16092 16093 16094 16095 16096 16097 16098 16099 16100 16101 16102 16103 #> [16105] 16104 16105 16106 16107 16108 16109 16110 16111 16112 16113 16114 16115 #> [16117] 16116 16117 16118 16119 16120 16121 16122 16123 16124 16125 16126 16127 #> [16129] 16128 16129 16130 16131 16132 16133 16134 16135 16136 16137 16138 16139 #> [16141] 16140 16141 16142 16143 16144 16145 16146 16147 16148 16149 16150 16151 #> [16153] 16152 16153 16154 16155 16156 16157 16158 16159 16160 16161 16162 16163 #> [16165] 16164 16165 16166 16167 16168 16169 16170 16171 16172 16173 16174 16175 #> [16177] 16176 16177 16178 16179 16180 16181 16182 16183 16184 16185 16186 16187 #> [16189] 16188 16189 16190 16191 16192 16193 16194 16195 16196 16197 16198 16199 #> [16201] 16200 16201 16202 16203 16204 16205 16206 16207 16208 16209 16210 16211 #> [16213] 16212 16213 16214 16215 16216 16217 16218 16219 16220 16221 16222 16223 #> [16225] 16224 16225 16226 16227 16228 16229 16230 16231 16232 16233 16234 16235 #> [16237] 16236 16237 16238 16239 16240 16241 16242 16243 16244 16245 16246 16247 #> [16249] 16248 16249 16250 16251 16252 16253 16254 16255 16256 16257 16258 16259 #> [16261] 16260 16261 16262 16263 16264 16265 16266 16267 16268 16269 16270 16271 #> [16273] 16272 16273 16274 16275 16276 16277 16278 16279 16280 16281 16282 16283 #> [16285] 16284 16285 16286 16287 16288 16289 16290 16291 16292 16293 16294 16295 #> [16297] 16296 16297 16298 16299 16300 16301 16302 16303 16304 16305 16306 16307 #> [16309] 16308 16309 16310 16311 16312 16313 16314 16315 16316 16317 16318 16319 #> [16321] 16320 16321 16322 16323 16324 16325 16326 16327 16328 16329 16330 16331 #> [16333] 16332 16333 16334 16335 16336 16337 16338 16339 16340 16341 16342 16343 #> [16345] 16344 16345 16346 16347 16348 16349 16350 16351 16352 16353 16354 16355 #> [16357] 16356 16357 16358 16359 16360 16361 16362 16363 16364 16365 16366 16367 #> [16369] 16368 16369 16370 16371 16372 16373 16374 16375 16376 16377 16378 16379 #> [16381] 16380 16381 16382 16383 16384 16385 16386 16387 16388 16389 16390 16391 #> [16393] 16392 16393 16394 16395 16396 16397 16398 16399 16400 16401 16402 16403 #> [16405] 16404 16405 16406 16407 16408 16409 16410 16411 16412 16413 16414 16415 #> [16417] 16416 16417 16418 16419 16420 16421 16422 16423 16424 16425 16426 16427 #> [16429] 16428 16429 16430 16431 16432 16433 16434 16435 16436 16437 16438 16439 #> [16441] 16440 16441 16442 16443 16444 16445 16446 16447 16448 16449 16450 16451 #> [16453] 16452 16453 16454 16455 16456 16457 16458 16459 16460 16461 16462 16463 #> [16465] 16464 16465 16466 16467 16468 16469 16470 16471 16472 16473 16474 16475 #> [16477] 16476 16477 16478 16479 16480 16481 16482 16483 16484 16485 16486 16487 #> [16489] 16488 16489 16490 16491 16492 16493 16494 16495 16496 16497 16498 16499 #> [16501] 16500 16501 16502 16503 16504 16505 16506 16507 16508 16509 16510 16511 #> [16513] 16512 16513 16514 16515 16516 16517 16518 16519 16520 16521 16522 16523 #> [16525] 16524 16525 16526 16527 16528 16529 16530 16531 16532 16533 16534 16535 #> [16537] 16536 16537 16538 16539 16540 16541 16542 16543 16544 16545 16546 16547 #> [16549] 16548 16549 16550 16551 16552 16553 16554 16555 16556 16557 16558 16559 #> [16561] 16560 16561 16562 16563 16564 16565 16566 16567 16568 16569 16570 16571 #> [16573] 16572 16573 16574 16575 16576 16577 16578 16579 16580 16581 16582 16583 #> [16585] 16584 16585 16586 16587 16588 16589 16590 16591 16592 16593 16594 16595 #> [16597] 16596 16597 16598 16599 16600 16601 16602 16603 16604 16605 16606 16607 #> [16609] 16608 16609 16610 16611 16612 16613 16614 16615 16616 16617 16618 16619 #> [16621] 16620 16621 16622 16623 16624 16625 16626 16627 16628 16629 16630 16631 #> [16633] 16632 16633 16634 16635 16636 16637 16638 16639 16640 16641 16642 16643 #> [16645] 16644 16645 16646 16647 16648 16649 16650 16651 16652 16653 16654 16655 #> [16657] 16656 16657 16658 16659 16660 16661 16662 16663 16664 16665 16666 16667 #> [16669] 16668 16669 16670 16671 16672 16673 16674 16675 16676 16677 16678 16679 #> [16681] 16680 16681 16682 16683 16684 16685 16686 16687 16688 16689 16690 16691 #> [16693] 16692 16693 16694 16695 16696 16697 16698 16699 16700 16701 16702 16703 #> [16705] 16704 16705 16706 16707 16708 16709 16710 16711 16712 16713 16714 16715 #> [16717] 16716 16717 16718 16719 16720 16721 16722 16723 16724 16725 16726 16727 #> [16729] 16728 16729 16730 16731 16732 16733 16734 16735 16736 16737 16738 16739 #> [16741] 16740 16741 16742 16743 16744 16745 16746 16747 16748 16749 16750 16751 #> [16753] 16752 16753 16754 16755 16756 16757 16758 16759 16760 16761 16762 16763 #> [16765] 16764 16765 16766 16767 16768 16769 16770 16771 16772 16773 16774 16775 #> [16777] 16776 16777 16778 16779 16780 16781 16782 16783 16784 16785 16786 16787 #> [16789] 16788 16789 #>  #> [[6]] #>     [1]     9    12   146   244   265   413   473   529   675   776   891   904 #>    [13]  1135  1381  1429  1663  1830  1919  1976  2011  2146  2228  2384  2670 #>    [25]  2876  3216  4036     0     1    13    34    77   128   147   153   168 #>    [37]   173   333   382   491   498   513   632   708   792   805   864  1006 #>    [49]  1329  1482  1497  1505  1645  1777  1866  1902  2036  2185  2229  2252 #>    [61]  2318  2415  2443  3254  3368  3496  3573  4061  4145  4203     2    14 #>    [73]    22    40    70   148   159   169   183   334   518   650   918  1116 #>    [85]  1187  1359  1406  1712  1849  1903  1920  2117  2744  2796  2845  2924 #>    [97]  2945  3092  3548  3930  4326  4470     3    20    41    73    82   195 #>   [109]   211   256   365   919  1172  1263  1446  1466  1591  2230  2357  2711 #>   [121]  2745  2901  3497  3717  4168  4536     7    78    83   154   196   245 #>   [133]   398   432   474   560   618   660   709   831   865   920  1034  1048 #>   [145]  1407  1614  2165  2272  2298  2558  2768  2797  3685  3931  4009     4 #>   [157]     8    26    42    79    96   200   304   314   374   399   451   504 #>   [169]   514   733   866   995  1017  1330  1447  1615  1921  2147  2166  2559 #>   [181]  2648  2689  2968  3325  3342  3549  3574  3628  3748  3777  4062  4114 #>   [193]  4278  4492     5    11    15    50    54   136   212   226   383   390 #>   [205]   541   661   832   996  1049  1069  1097  1344  1467  2167  2358  2769 #>   [217]  3217  3421  3444  3550  3718  4010  4063  4115  4169     6    27    38 #>   [229]    45    55    66   149   204   237   246   252   315   350   682   867 #>   [241]   957  1098  1148  1173  1217  1520  2148  2846  2991  3143  3551  4490 #>   [253]    43    62   129   324   608  1018  1099  1117  1149  1292  1312  1448 #>   [265]  1677  1730  1940  1958  1993  2012  2037  2168  2464  2649  2712  2770 #>   [277]  3326  3498  3575  3629  3686  3955  4116    46   170   247   253   286 #>   [289]   458   483   530   683   806  1331  1506  1592  1646  1731  1959  1977 #>   [301]  1994  2359  2617  2816  2992  3369  3932  4170    63   101   112   150 #>   [313]   205   316   366   633   766  1035  1118  1293  1371  1483  1498  1778 #>   [325]  2618  2798  2993  3398  4239    31    47    74    97   102   113   121 #>   [337]   160   452   469   572   634   755   793   892   905   921   940  1036 #>   [349]  1313  1392  1449  1678  1754  1904  1922  2051  2319  2400  2488  2671 #>   [361]  2746  2925  2946  2969  3168  3467  3630  3778  4064  4088    10    51 #>   [373]    71   117   122   201   325   335   391   453   484   492   519   573 #>   [385]   906  1019  1201  1237  1264  1314  1450  1540  1713  1755  1792  1995 #>   [397]  2273  2926  3068  3445  3499  3956  4037  4548    16    56    88   103 #>   [409]   206   282   375   400   475   485   693   734   794   878  1020  1202 #>   [421]  1238  1521  1888  1923  2072  2096  2118  2847  3020  3169  3218  3779 #>   [433]  3803  3851  3933  4485    17    18    32    48    93   104   238   367 #>   [445]   401   520   735   941   997  1070  1163  1203  1294  1541  1867  2149 #>   [457]  2169  2299  2320  2713  2848  2902  3069  3576  3608  3659    19    28 #>   [469]    44    57    84    98   184   239   266   317   336   342   351   376 #>   [481]   384   402   521   736   767   777  1050  1345  1360  1629  1889  2097 #>   [493]  2170  2274  3934  3957  4204  4303  4451    21    29   137   151   185 #>   [505]   197   207   423   619   721   737   820   893  1239  1295  1507  1542 #>   [517]  1555  1696  1714  1793  1960  2465  2489  2619  2672  2799  2817  2994 #>   [529]  3577  3660  3749  3825  4352  4588   130   186   283   454   522   531 #>   [541]   552   651   662   833   851   922  1051  1174  1382  1430  1522  1647 #>   [553]  2013  2052  2098  2119  2714  2818  3040  3093  3446  3631  3804  3907 #>   [565]  4065    67    80   105   174   187   219   257   326   392   553   663 #>   [577]   778  1007  1119  1150  1282  2038  2073  2207  2995  3070  3255    23 #>   [589]   123   163   278   385   635   722   756   768   795   958   984  1008 #>   [601]  1100  1136  1383  1794  1850  2074  2300  2466  3343  3719  4089  4240 #>   [613]    24   138   155   227   258   318   561   620   710  1037  1251  1346 #>   [625]  1451  1616  2231  2690  2877  3256  3399  3632  3852  4171    25    30 #>   [637]    58   106   139   188   442   493   542   554   582   652   723  1204 #>   [649]  1252  1393  1468  1523  1593  1679  1779  1978  2039  2186  2581  2620 #>   [661]  2715  3041  3192  3344  3661  3720  3805  3958  4146    39    99   114 #>   [673]   124   140   220   240   327   684   779   923   942   968  1151  1253 #>   [685]  1283  1347  1394  1452  1543  1594  1924  1941  2275  2621  2650  2716 #>   [697]  3071  3170  3662  3883  4205  4304  4327    59    68    85    89   259 #>   [709]   305   343   443   486   589   653   780   821   868   907   985  1218 #>   [721]  1508  1851  2385  2601  2849  2996  3219  3257  4066  4489   107   110 #>   [733]   141   152   231   254   287   319   459   476   494   532   562   676 #>   [745]   738   879   924  1120  1152  1348  1361  1979  2120  2208  2337  2360 #>   [757]  2467  2717  3021  3072  4521   115   131   232   337   377   403   505 #>   [769]   757   834   969  1153  1296  1349  1384  1595  1795  1905  1961  2276 #>   [781]  2771  3144  3193  3552  3578  3908  3935  4067  4353    33    36    52 #>   [793]    86    90   260   273   344   414   506   523   677   796   998  1038 #>   [805]  1071  1188  1254  1453  1680  1756  2444  2878  2927  3400  3527  3579 #>   [817]  3721  4038  4446    35    37    60   125   189   306   328   352   368 #>   [829]   404   533   543   654   781   835   894   943  1265  1332  1715  1962 #>   [841]  1980  2014  2209  2277  2445  2800  2903  2970  3122  3370  3447  3553 #>   [853]  3687  4011    72   118   233   555   986  1164  1175  1266  1509  1596 #>   [865]  1617  1716  2150  2386  2490  2560  2602  2673  3371  3422  3448  3750 #>   [877]  3909  3936  4039  4172  4279  4428  4498    49   142   164   241   261 #>   [889]   307   415   534   694   711  1267  1284  1556  2904  2947  3194  3423 #>   [901]  3468  3554  3826  3983  4241  4389    94   132   161   175   499  1454 #>   [913]  1717  2015  2622  2691  2819  3073  3663  3722  3910  3937    61    64 #>   [925]    75   228   386   524   685   724   822   959  1088  1455  1812  2099 #>   [937]  2121  2338  2401  2446  2692  3042  3401  3688  3723  4173    65   119 #>   [949]   171   176   213   288   329   416   477   869   880   925  1021  1121 #>   [961]  1219  1362  1571  1597  1630  1697  1718  1852  1906  1925  2075  2278 #>   [973]  2603  2674  2747  3043  3780  3884  4012  4280  4354  4567    53    95 #>   [985]   156   221   289   387   433   664   782  1499  1572  1698  1719  1831 #>   [997]  1868  2339  2561  3074  3195  3220  3372  3751   100   126   133   202 #>  [1009]   478   556   636   908  1122  1297  2171  2361  2507  2928  3258  3469 #>  [1021]  3555  3580  3689  4305  4355  4462    76    81   234   320   434   460 #>  [1033]   637   852   895  1022  1408  1524  1557  1981  2210  2301  2387  2879 #>  [1045]  3296  3402  3609  3959  4068  4206  4281  4306  4572  4581   120   143 #>  [1057]   177   190   248   461   563   590   823   853  1123  1372  1996  2040 #>  [1069]  2340  2604  2880  2929  3075  3145  3424  3984  4307    69   134   564 #>  [1081]   725   854   870  1124  1205  1720  1963  2076  2388  2416  2881  2930 #>  [1093]  3044  3373  3500  3610  3781  4069  4117  4282  4427   198   208   279 #>  [1105]   290   388   393   507   544   712   758   855   909   926  1023  1385 #>  [1117]  1484  1544  1964  1982  2100  2122  3076  3146  3501  3690  4207  4328 #>  [1129]  4560    91   165   191   203   274   338   495   591   609   678   739 #>  [1141]  1409  1469  1699  1942  2623  3283  3502  4013  4090  4388    92   108 #>  [1153]   127   157   291   470   565   621   686   695   807   836   927  1137 #>  [1165]  1240  1395  1431  1558  1631  1648  1700  1757  2077  2253  2321  2519 #>  [1177]  2562  2931  3403  3470  3853  4440  4562   166   214   280   292   353 #>  [1189]   665   856  1154  1176  1545  1701  1832  1869  1983  2151  2172  2341 #>  [1201]  2675  3196  3345  3404  3449  3581  4091  4549    87   215   229   249 #>  [1213]   262   308   369   574   638   759   928  1101  1525  1573  1598  1780 #>  [1225]  1907  1943  2101  2232  2254  2535  2693  2997  3327  3450  4283  4474 #>  [1237]  4550  4553   109   267   330   345   370   417   424   535   857  1298 #>  [1249]  1363  1890  2078  2123  2279  2322  2536  2718  3297  3374  3691  4174 #>  [1261]   158   297   354   455   496   783   808   960   999  1039  1102  1333 #>  [1273]  1470  1574  1599  2016  2053  2772  2971  2998  3045  3346  3375  3405 #>  [1285]  3556  3885  4175  4284  4475  4499   111   222   235   250   298   321 #>  [1297]   545   837   881  1072  1138  1155  1268  1456  1853  1965  2124  2280 #>  [1309]  2491  2624  2651  2932  3022  4285   216   268   425   479   575  1220 #>  [1321]  1410  1432  1702  1732  1813  1908  2187  2468  2773  2972  3347  3471 #>  [1333]  3911  4070  4242  4329   116   135   217   223   269   309   355   444 #>  [1345]   639   740   760  1073  1156  1241  1411  1510  1546  1575  1833  1926 #>  [1357]  1944  2173  2342  2905  3197  3582  3806  3827  4243  4286  4487  4564 #>  [1369]   293   356   610   882   944  1040  1189  2017  2054  2152  2302  2492 #>  [1381]  2520  3633  3828  4244  4382  4466  4557   144   299   310   426   435 #>  [1393]   445   456   592   679   696   838   929   961  1074  1269  1299  1997 #>  [1405]  2102  2125  2188  2211  2362  2521  2820  3171  3406  3692  3938   145 #>  [1417]   167   181   224   281   294   378   436   446   508   622   824   930 #>  [1429]  1157  1206  1471  1681  1927  2189  2363  2493  2694  2821  2906  3023 #>  [1441]  3046  3094  3221  3284  3376  3693  3939  4526   192   270   300   346 #>  [1453]  1024  1207  1364  1396  1733  2417  2447  2537  2582  2774  3047  3222 #>  [1465]  3298  3752  4208  4308  4473  4522   218   271   301   371   593   825 #>  [1477]  1000  1177  1221  1412  1547  1909  2079  2190  2212  2583  2948  2973 #>  [1489]  3048  3077  3472  3557  3854  3912   162   209   251   311   405   487 #>  [1501]   611   666   741   797   883   945   970  1125  1178  1649  1682  2080 #>  [1513]  2126  2153  2494  2748  3095  3259  3558  3583  4040   357   406   471 #>  [1525]   525   557   576   583   687   784   839   931  1300  1854  2041  2233 #>  [1537]  2323  2469  2652  2695  2749  2850  2974  3049  3096  4414   178   182 #>  [1549]   225   407   509   785   840  1270  1301  1433  2055  2418  2775  3097 #>  [1561]  3123  3328  3886   172   242   408   462   500   577   761   809   987 #>  [1573]  1103  1222  1386  1413  1559  1576  1664  1683  2103  2389  2495  2719 #>  [1585]  2882  2949  3124  3172  3559  3855  4500   193   263   358   389   594 #>  [1597]   623   640   688   742   841  1052  1434  1485  2081  2127  2154  2174 #>  [1609]  2281  2448  2508  2538  2883  3198  3377  3473  3782  3856  4147   179 #>  [1621]   275   359   641   842   858   946  1075  1190  1397  1560  1600  1796 #>  [1633]  2018  2343  2522  2625  3528  3783  3940  3985  4437  4443  4523   180 #>  [1645]   199   312   322   394   463   536   595   624   743   843  1009  1076 #>  [1657]  1302  1601  2155  2213  2234  2344  2776  2907  2975  3223  3329  3887 #>  [1669]  4014  4176  4467  4503   395   427   457   510   844  1041  1255  1350 #>  [1681]  1684  1758  1984  2128  2282  2402  2419  2696  2777  2822  3378  3407 #>  [1693]  3611   194   210   284   331   409   428   464   488   810  1053  1242 #>  [1705]  1457  1577  1602  1618  2104  2303  2324  2449  2509  2801  3024  3147 #>  [1717]  3299  3425  3474  4245  4356  4438   323   596   713   786  1223  1435 #>  [1729]  1685  1966  2255  2403  2470  2563  3050  3260  3451  3529  3753  4092 #>  [1741]  4148  4309   272   526   859   947  1077  1165  1179  1303  1436  2235 #>  [1753]  2364  2420  2697  3829  4287  4515   236   339   418   558   597   642 #>  [1765]   655   667   714   744  1042  1139  1351  1486  1632  1703  2214  2421 #>  [1777]  2539  2720  4288  4538  4544   230   313   360   379   566   726   745 #>  [1789]   845   871  1191  1243  1315  1414  1619  1781  1967  2042  2390  2450 #>  [1801]  2653  2851  2950  4209  4330   276   361   419   465   489   689   727 #>  [1813]   762   910   948  1089  1256  1487  1633  1855  2365  2404  2422  2540 #>  [1825]  3078  3098  3199  3475  3986  4246   255   437   546   612   811   884 #>  [1837]   949   971  1224  1257  1285  1488  1650  1834  1856  2405  2564  3148 #>  [1849]  3285  3408  3560  3584  3634  3664  4247   668   812   860   896   950 #>  [1861]  1140  1437  1472  1489  1634  2345  2391  2676  2852  2999  3224  3857 #>  [1873]  4461   243   264   511  1620  1686  1814  2082  2175  2304  2626  2750 #>  [1885]  3051  3099  3960   340   447   798  1001  1104  1208  1415  1526  1578 #>  [1897]  1635  1734  2510  2541  3000  3961  4177   341   347   396  1078  1561 #>  [1909]  2176  2191  2305  2325  2423  2823  3052  3261  4248  4289  4423  4532 #>  [1921]   277   420   429   537   728   813  1054  1105  1244  1527  1759  1782 #>  [1933]  1945  2192  2721  2884  2933  3053  3079  3262  3286  3409  3530  3830 #>  [1945]  3858  4477   295   547   680   697   746   787   972   988  1010  1025 #>  [1957]  1158  1721  1760  2105  2542  2677  2853  3476  3724  3831  3888  4015 #>  [1969]  4178  4210  4380  4479   302   362   472   567   598   747   885   897 #>  [1981]   973  1026  1166  1835  1910  1946  1998  2019  2215  2627  2654  3452 #>  [1993]  3913   410   599   698  1027  1416  1511  1603  1665  1761  2256  2346 #>  [2005]  2722  3001  3585  3725   296   303   380   480   559   613   656   769 #>  [2017]   872   898  1011  1225  1245  1417  1548  1857  1947  3426  3531  3665 #>  [2029]  3889  4071   285   448   466   490   729   763   770   886   899  1055 #>  [2041]  1167  1226  1334  1500  1762  2129  2424  3379  3532  4118  4249  4432 #>  [2053]   584   600   861   887   900  1141  1246  1286  1458  1528  1911  2257 #>  [2065]  3477  3784   332   411   421   438   625   873   974  1056  1227  1316 #>  [2077]  1579  1666  1891  1928  2043  2425  2678  2934  3002  3125  3225  3380 #>  [2089]  3503  3859  4469  4537   348   372   467   578   601   643   788  1057 #>  [2101]  1090  1106  1192  1247  1304  1317  1398  1418  1529  1580  1704  2083 #>  [2113]  2778  3100  3226  3263  3300  3348  4331  4453  4563   363   501   515 #>  [2125]   888  1335  1705  1858  1999  2044  2306  2426  3080  3330  3533  3807 #>  [2137]  4041  4310  4584   364   579   644   764   771   951   975   989  1193 #>  [2149]  1459  1581  1735  1836  1870  2000  2156  2326  2347  3586   349   430 #>  [2161]   439   481   512   548   585   626   669   748  1209  1399  1419  1562 #>  [2173]  2130  2723  2779  2854  2951  3962  4119   422   468   497   549   627 #>  [2185]   772   901  1058  1210  1501  1837  1892  2001  2392  2605  2855  3349 #>  [2197]  3427  3587  4442  4506   373   602   614   657   699   789   952  1028 #>  [2209]  1079  1318  1336  1582  1636  1651  1736  1815  1948  2056  2193  2366 #>  [2221]  2655  2751  2856   440  1126  1228  1258  1490  1549  1604  1621  1637 #>  [2233]  1871  2131  2348  2628  2802  3081  3173  3200  3410  3588  3612  3666 #>  [2245]  3694  3808  3941  4357   412   516  1059  1080  1168  1622  1912  1949 #>  [2257]  2451  2565  2824  2908  2952  3381  3726  3785  4042  4072  4120   381 #>  [2269]   397   517   715   814   932   976  1002  1420  1563  1797  2194  2216 #>  [2281]  2511  2857  3054  3101  3149  3504  4387  4524   431   580   586   628 #>  [2293]   690   700   874   911   933  1127  1271  1652  1783  1838  2523  2752 #>  [2305]  2825  3227  3301  3505  3890  4121  4211  4311  4411  4518   502   629 #>  [2317]   815   934  1128  1180  1194  1248  1387  1583  1859  1913  2132  2177 #>  [2329]  2195  2327  2584  2629  2656  2724  2885  2953  2976  3102  3331  4122 #>  [2341]   527   568   603   645   749   962  1229  1337  1373  1667  1914  2236 #>  [2353]  2349  2496  2886  3126  3302  3350  3382  3534  3635  3727  4123  4212 #>  [2365]  4250  4394   449   569   765   912  1287  1338  1722  1737  1816  1893 #>  [2377]  2002  2258  2328  3351  3636  3832   587   670   799   977  1319  1339 #>  [2389]  1491  1723  1968  1985  2106  2196  2259  2630  2725  3201  3352  3786 #>  [2401]  3914  4400   441   538   604   826   963  1003  1107  1195  1400  1530 #>  [2413]  1623  1668  1738  1929  2057  2283  2543  2606  3728  4016  4251  4403 #>  [2425]  4456   450   482   570   615   827   953  1060  1288  1421  1550  1763 #>  [2437]  1872  1986  2307  2406  2631  2679  3003  3127  3860   605   701   750 #>  [2449]  1043  1340  1374  1438  1551  1706  1915  2178  2260  2308  2350  2826 #>  [2461]  2909  3150  3303  3891  4252  4358   702   800   889  1169  1422  1531 #>  [2473]  1564  1839  2261  2452  2471  2512  2698  3025  3202  3287  3695  3754 #>  [2485]  4124  4312  4359   528   581   646   716   954  1181  1230  1305  1473 #>  [2497]  1584  1724  1784  1894  2003  2680  3833  3861  4043   539   588   751 #>  [2509]   816  1061  1091  1272  1460  1653  1764  1873  2393  2544  2585  3055 #>  [2521]  3535  3729  4501   681  1532  1565  2407  2524  2586  3082  3987  4149 #>  [2533]  4556   503   606   630   691   801   817   875   935  1159  1182  1474 #>  [2545]  2427  2566  2681  3304  3942   550   631   692   717   936  1062  1081 #>  [2557]  1196  1289  1320  2107  3174  3203  3478  3613  3755  4416  4472  4519 #>  [2569]   647   658   703   752   773  1004  1044  1063  1197  1388  1860  2045 #>  [2581]  2545  2587  2753  3614  3915  4179  4253   551   818  1064  1108  1142 #>  [2593]  1183  1211  1566  1654  1707  1765  1874  2020  2133  2472  2887  2910 #>  [2605]  3305  3862   616   704   846  1129  1475  1502  2084  2367  2513  2525 #>  [2617]  2726  2888  2911  3696  3943  4254  4332   540   718   978  1012  1231 #>  [2629]  1273  1605  1638  1687  1739  1798  1840  2217  3228  3411  3453  3506 #>  [2641]  3637  3756  3963  4493   607   659   862   979  1013  1352  1365  1439 #>  [2653]  1461  1655  1688  2473  2497  2607  2803  3175  3204  3412  3863  3944 #>  [2665]  4017  4093  4333   571   648   705   828  1109  1143  1440  1492  1799 #>  [2677]  2134  2284  3151  3353  3383  3536   671   753   876   902   964  1160 #>  [2689]  1232  1306  1533  1656  2157  2262  2285  2889  3004  3384  3638  3809 #>  [2701]  4044  4444   847   990  1029  1144  1233  1259  1274  1401  1441  1552 #>  [2713]  1657  1987  2021  2108  2263  2368  2588  2727  2912  2977  3083  3306 #>  [2725]  3479  3589  3988  4150  4494   617   649   672   790  1092  1234  1442 #>  [2737]  1606  1639  1785  1800  1817  1861  1875  2135  2408  2589  3103  3205 #>  [2749]  3229  3590  4045  4213  4255   706   802  1082  1212  1249  1307  1512 #>  [2761]  1862  2058  2218  2514  2567  2858  2890  2913  3428  3507  3730  4495 #>  [2773]   719   791   819  1110  1213  1250  1321  1402  1443  1801  1969  2197 #>  [2785]  2264  2369  2409  2914  3128  3731   673   730   829   848   980  1145 #>  [2797]  1275  1341  1353  1802  2109  2136  2370  2474  2804  3508  3537  3639 #>  [2809]  3697  4125   674   707   731   830  1198  1276  1366  1375  1513  1585 #>  [2821]  1669  1876  1916  2022  2286  2498  2827  2935  2978  3026  3538  3667 #>  [2833]  3945  4334  4406  4430  4439   732   754   937  1083  1093  2023  2137 #>  [2845]  2546  2632  2979  3056  3864  3964  4335  1130  1514  1670  1803  1895 #>  [2857]  2219  2237  2475  2633  2699  3084  4126  1065  1131  1376  1607  1766 #>  [2869]  1786  1930  2453  2590  2657  2780  2915  2954  3264  3539  3865  4046 #>  [2881]  4360   849   913   938   955   991  1146  1214  1671  1767  1877  1950 #>  [2893]  2138  2371  3176  3230  3640  4151  4401  4458  4471   720   803   890 #>  [2905]   992  1084  1354  1553  1586  1841  1878  2059  2085  2728  2936  3454 #>  [2917]  3732  3787   993  1030  1170  1235  1322  1476  2024  2372  2568  2682 #>  [2929]  2754  3129  3413  3668  3866  4152  4436  4535  1377  1423  2980  3152 #>  [2941]  3480  3834  4073  4402   774  1031  1111  1378  1672  1863  1879  1951 #>  [2953]  2110  2373  2781  2916  3385  3429  3561  3591  3669  3946  4018   804 #>  [2965]   903   981  1066  1132  1260  1323  1740  2086  2238  2309  2428  2634 #>  [2977]  2755  2828  2917  3027  4361  4545   775   863  1032  1515  1741  1768 #>  [2989]  1931  2198  2220  2658  3430  3757  4290  4313   850   877  1005  1112 #>  [3001]  1161  1277  1658  1818  1932  2239  2608  3414  3481  3835  4019  4074 #>  [3013]  4094  4180  4336  4385   982   994  1067  1567  1608  1769  2394  2454 #>  [3025]  2569  2782  2859  3641  3916   939  1462  1640  1673  1804  1933  2060 #>  [3037]  2476  2499  2591  2729  2783  2981  3509  3670  3788  4075  4214  4480 #>  [3049]   914   965  1674  1842  2287  2609  2860  3104  4153  4362  1199  1324 #>  [3061]  1880  2329  2429  2635  3354  3415  3698  3810  3836  3867  3965  4412 #>  [3073]   915   956  1045  1819  1952  2025  2199  2351  2636  2659  2829  2861 #>  [3085]  3265  3332  3431  3482  4337   966   983  1278  1290  1308  1355  1503 #>  [3097]  1742  1820  1988  2061  2221  2288  2756  2805  2862  2955  2982  3130 #>  [3109]  3671  3989  4154  4381  4566   916  1085  1184  1743  1864  1934  1953 #>  [3121]  2026  2046  2289  2330  2352  2455  2637  2660  3057  3355  3592  3642 #>  [3133]  4181  4291  1162  1200  1215  1309  1770  1865  1989  2290  2730  2956 #>  [3145]  3105  3643  4047  4408   917  1014  1033  1046  1356  1367  1534  1675 #>  [3157]  1821  1896  2139  2179  2430  2547  3386  3811  3966  1015  1535  1787 #>  [3169]  1843  2456  2700  2731  2863  2918  3131  3455  3967  4256   967  1261 #>  [3181]  1357  1379  1389  1689  1725  1744  2004  2087  2240  2265  2457  2548 #>  [3193]  2610  2732  2757  2830  3005  3058  3387  3510  3593  3672  3733  4292 #>  [3205]  4338  4413  4420  4574  1086  1113  1587  1805  2570  2592  3028  3177 #>  [3217]  3333  3388  3868  3892  4076  4586  1147  1279  1325  1390  1477  1641 #>  [3229]  1771  1806  2140  2431  2661  3206  3389  3594  3812  4077  4293  1016 #>  [3241]  1094  1114  1185  1368  1444  1493  1516  1609  2638  2983  3029  3085 #>  [3253]  3178  3288  3356  3595  3615  3699  3734  4095  4314  4484  1403  1642 #>  [3265]  1745  1788  2526  2891  3086  3153  3357  3483  3562  4182  4215  4508 #>  [3277]  4559  1478  1772  1822  1954  1970  2374  2515  2639  2662  2683  2733 #>  [3289]  3266  3334  4078  4397  1047  1342  1536  1746  1773  1990  2200  2432 #>  [3301]  2516  2734  3132  3154  3673  3735  3758  4315  4577  1068  1087  1095 #>  [3313]  1171  1262  1690  1726  1774  1807  2241  2477  2684  3087  3106  3155 #>  [3325]  3231  3307  3700  4048  1096  1369  1504  1747  1897  1971  2433  2758 #>  [3337]  2919  3107  4486  1424  2047  2111  2331  2527  3289  3308  3456  3893 #>  [3349]  4363  4383  1326  1881  2593  2640  2701  3390  3511  4496  1115  1133 #>  [3361]  1445  1537  1659  1935  2088  2158  2434  2806  2984  3108  3596  3759 #>  [3373]  3789  3968  4049  4079  4407  4529  1134  1280  1327  1425  1463  1494 #>  [3385]  1517  1538  1610  2410  2435  2478  2663  2685  2784  2892  3133  3484 #>  [3397]  3512  3917  3947  4183  4504  1236  1464  1495  1568  1691  1823  2005 #>  [3409]  2571  2641  2785  3109  3179  3207  3232  3335  3813  3837  3894  4316 #>  [3421]  4386  1186  1310  1676  2089  2222  2500  3563  3597  3616  3969  4257 #>  [3433]  4561  1311  1465  1844  2180  2201  2332  2702  3059  3233  3267  3309 #>  [3445]  3358  3617  3701  4258  1496  1748  1824  1936  2027  2242  2375  2479 #>  [3457]  2686  2703  2807  3088  3234  3310  3918  1216  1291  1343  1358  1972 #>  [3469]  2048  2090  2376  2436  2808  3006  3089  3485  3760  3869  4184  4259 #>  [3481]  4339  4391  1643  1708  1727  1749  1808  2062  2437  2528  2572  3007 #>  [3493]  3564  3618  3814  4020  4127  1426  1518  1809  1937  2266  2291  2573 #>  [3505]  2687  2864  3180  3268  3513  3565  3598  3736  4185  4340  4578  1380 #>  [3517]  1519  1692  1882  2028  2395  2865  3030  3815  4155  1328  1660  1693 #>  [3529]  1825  4080  4186  4216  4294  1281  1588  1810  1826  1938  2049  2181 #>  [3541]  2292  2310  2831  2866  3311  3336  3644  3702  4260  1391  1539  1611 #>  [3553]  1898  1955  2202  2867  3008  3970  3990  4050  4128  4217  4341  4525 #>  [3565]  1370  1750  1775  1991  2868  3031  3060  3110  3181  3599  3645  3919 #>  [3577]  4021  4218  4393  4395  4569  1624  1661  2549  2869  3032  3920  4129 #>  [3589]  4396  1404  1427  1751  2159  2396  3457  3566  3971  4130  1479  1589 #>  [3601]  2063  2243  2458  2480  2611  2985  3646  4096  4520  4554  1405  1709 #>  [3613]  1728  1883  2029  2091  2182  2481  2786  3208  3486  3567  3647  3761 #>  [3625]  3991  4022  1625  1884  2293  2333  2642  2787  3921  3948  4131  2030 #>  [3637]  2550  2957  3312  4097  4156  4187  4364  1428  1554  1626  1845  2244 #>  [3649]  2267  2517  2594  3033  3061  3458  3600  4023  4132  4219  4317  4448 #>  [3661]  4502  4590  1590  1694  2141  2160  2223  2832  2870  2937  3235  3762 #>  [3673]  3992  4098  4318  4365  4568  1480  2595  2664  2688  2759  2809  2893 #>  [3685]  3009  3313  3648  3737  4220  4551  4582  1569  1710  1827  1956  2203 #>  [3697]  2245  2735  2938  2958  3034  3236  3870  3993  4188  4533  1481  1570 #>  [3709]  1627  1662  1695  1846  1973  2112  2529  2551  2665  2894  2959  3010 #>  [3721]  3209  3391  3619  3674  4319  4398  1828  1899  2113  2459  2596  2871 #>  [3733]  3790  4024  4221  4261  1612  1752  1829  1847  2311  2438  2939  3182 #>  [3745]  3269  3703  3994  4295  1789  1885  1974  2031  2064  2246  2704  2760 #>  [3757]  2810  2833  2872  2960  3270  3459  3791  4262  4399  4591  1613  1628 #>  [3769]  1644  2006  2065  2161  2334  2961  3271  3601  4263  4449  4481  2247 #>  [3781]  2411  2834  3111  3620  3838  3871  1811  1917  2050  2066  2204  2248 #>  [3793]  3432  3540  3649  3704  3816  3839  3872  4051  4296  4434  1753  1776 #>  [3805]  2183  2312  2397  2460  3112  3237  3272  1790  2142  2313  2552  2835 #>  [3817]  2873  3314  3487  3602  4099  4297  1900  2143  2162  2224  2482  3011 #>  [3829]  3238  3705  4100  4505  2483  2643  2986  3156  3183  3315  3650  3738 #>  [3841]  3895  4101  4133  4189  4222  4390  4512  4585  1729  2144  2314  2836 #>  [3853]  3239  3675  3706  3763  3840  3995  4190  4587  2007  2335  2377  2412 #>  [3865]  2484  3035  3134  3157  3184  3316  3707  4025  4191  4511  4541  4576 #>  [3877]  1886  2378  2811  2837  2940  3135  3240  3949  3972  4342  4366  4424 #>  [3889]  4542  1711  1887  2225  2485  2501  2574  2736  3012  3317  3676  4384 #>  [3901]  4418  4530  1791  2379  2413  2439  2737  2788  3136  3185  3392  3841 #>  [3913]  4026  4157  4367  1848  2092  2530  3359  3817  3842  4081  4158  4264 #>  [3925]  4368  4539  4573  1918  2032  2353  2644  2838  3036  3090  3137  3677 #>  [3937]  3739  1901  2093  2145  2163  2294  2553  2575  2705  2920  3290  3337 #>  [3949]  3541  3843  3973  3996  4298  4320  4580  1939  1975  2184  2249  2315 #>  [3961]  2554  2612  2738  2812  3818  3873  4159  4223  1992  2268  2461  2502 #>  [3973]  2576  2666  2941  3158  3678  3819  3874  4224  4265  4570  2067  2114 #>  [3985]  2380  2398  2613  3159  3433  3488  3568  3621  3875  4445  2295  2381 #>  [3997]  2503  2577  3037  3679  3764  4343  2068  2504  2645  3138  3160  3273 #>  [4009]  3542  4134  4225  1957  2033  2250  2316  2518  2739  2962  3460  3489 #>  [4021]  3514  3680  3708  3792  4027  4415  2069  2115  2205  2226  2597  2614 #>  [4033]  2761  3274  3490  3974  4135  2008  2070  2598  2615  3062  3360  3491 #>  [4045]  3515  3622  3709  3793  4082  4534  2034  2762  3161  3210  3275  3492 #>  [4057]  3569  3975  4102  4299  4435  4583  2706  3211  3241  3543  3710  4052 #>  [4069]  4136  2009  2035  2116  2164  2206  2336  2382  2555  2578  2667  2839 #>  [4081]  2874  3113  3162  3393  3493  3740  3844  2010  2094  2251  2462  2486 #>  [4093]  2963  3212  3338  3434  3950  4083  4192  4226  4452  2095  3063  3876 #>  [4105]  4369  2071  2354  2440  2840  2875  3114  3163  3276  3845  4084  4266 #>  [4117]  4370  4513  4547  2399  2414  2441  2463  2556  3242  3516  3794  3922 #>  [4129]  4344  4371  4579  2269  2442  2740  2789  2921  2987  3243  3461  3517 #>  [4141]  3651  3877  3896  4053  4085  4227  4429  2270  2383  3435  2707  2895 #>  [4153]  4103  2317  2668  2708  3976  3997  4345  2505  2531  2841  3164  3603 #>  [4165]  3977  4300  4455  2355  2964  2988  3339  3765  4372  4543  4546  2227 #>  [4177]  2296  2646  2709  3165  3711  3766  3846  4373  2297  2599  2763  2790 #>  [4189]  2922  2965  3186  3244  3923  4528  2271  2356  2532  2669  3013  3318 #>  [4201]  3767  3847  4193  4267  2533  2813  3187  3245  3291  3436  3462  3741 #>  [4213]  3924  3978  3998  4160  4450  2896  4054  4137  2487  3139  3277  3437 #>  [4225]  3795  4104  4321  4422  2942  3014  3115  3340  3623  3742  3768  3897 #>  [4237]  3925  4392  4433  4565  2506  3015  3394  3463  4194  4404  2534  2989 #>  [4249]  3278  3361  3438  3898  4161  2579  3038  3064  3188  3292  3624  4517 #>  [4261]  2741  2764  3116  3319  3518  3681  4105  4459  3362  3416  3769  3899 #>  [4273]  4055  4138  4431  2557  2580  2791  3417  3439  3743  4468  2600  2842 #>  [4285]  2897  2966  2990  3246  3464  3770  3900  4476  2647  2742  2967  3166 #>  [4297]  3293  3395  3682  3771  3820  4106  2710  2743  3213  3796  3821  3979 #>  [4309]  4056  4268  4509  3440  4028  4374  2616  2792  2898  3247  3625  3848 #>  [4321]  4510  2765  2793  3294  3570  3822  4346  2766  2814  2843  3065  3140 #>  [4333]  3363  4269  4441  2844  3016  3712  3999  4086  4463  2767  3066  3341 #>  [4345]  3772  3926  4195  4531  2943  3396  3652  4000  4107  2794  2899  3017 #>  [4357]  3117  3248  3494  3878  3067  3118  3214  3744  3823  3901  4270  2923 #>  [4369]  3189  3364  3544  4108  4322  4375  4405  2795  3119  3249  3441  3683 #>  [4381]  3902  4162  4347  4460  2815  3141  3279  3320  3626  3797  4001  2900 #>  [4393]  3120  3250  3653  3903  2944  3251  3604  3849  4029  4497  3018  3418 #>  [4405]  3519  4030  4057  4196  4558  3397  3545  3605  3713  3773  4002  4571 #>  [4417]  3190  3280  3321  3745  4271  3019  3774  3281  3495  3951  3980  4465 #>  [4429]  3121  3295  4197  4228  4272  3039  3252  3746  4139  4198  4482  3142 #>  [4441]  3520  3546  3571  3714  3904  3091  3167  3191  3282  3442  3465  3606 #>  [4453]  3654  3879  4003  4229  3215  3521  3905  4004  4031  4140  4199  4376 #>  [4465]  4491  3253  3322  3522  3419  3906  3365  3466  3523  3655  4141  4200 #>  [4477]  4301  4348  3323  3366  3443  4273  4447  4478  3324  3420  3715  3775 #>  [4489]  3880  4419  3572  3776  4201  3367  3524  3627  3881  4032  4230  4349 #>  [4501]  3656  3952  3747  4507  4005  4109  4142  4231  4410  4454  4457  3798 #>  [4513]  4163  4202  4232  4464  3525  3547  3799  3927  4233  4426  3526  3657 #>  [4525]  3953  4006  4234  3607  4033  4058  4274  4323  3684  3800  4087  4235 #>  [4537]  4377  3716  3850  4034  3801  4164  3658  3954  4007  4110  4165  3824 #>  [4549]  4236  4540  4059  4514  4008  4060  4111  3802  4035  4275  4324  3981 #>  [4561]  4325  3882  4143  4378  3928  3929  4112  4166  4555  3982  4302  4425 #>  [4573]  4589  4144  4167  4379  4237  4488  4276  4516  4113  4421  4350  4483 #>  [4585]  4417  4238  4527  4277  4575  4552  4351  4409  4592  4594  4599  4618 #>  [4597]  4642  4664  4728  4777  4920  4970  4989  5054  5727  5813  5939  6068 #>  [4609]  6629  6680  6746  7542  7583  7659  7781  8111  8130  8786  9401  9590 #>  [4621] 10037 11922 12058 12373 12847 13473 13748 14270 14315 15433 15981 16409 #>  [4633]  4593  4595  4634  4729  4842  5358  5604  6105  6601  7965  8025  8279 #>  [4645]  8454 10223 10255 11284 11416 11835 12418 12702 12772 12941 13543 15366 #>  [4657] 15496 15593 15865  4608  4680  4778  4795  5012  5138  5245  5359  5505 #>  [4669]  5538  5746  6237  6325  6539  6948  7369  7832  8188  9124  9511  9716 #>  [4681] 10426 10976 11649 11896 12539 12942 13179 14116 14467 14928 15497 16681 #>  [4693]  4601  4602  4606  4674  4791  4902  4926  4954  4996  5005  5346  6254 #>  [4705]  6554  6777  6824  7600  8202  8476  8577  9062  9213  9297  9912 10696 #>  [4717] 11255 11897 12088 12265 12648 13511 14770 14899 14929 16159 16236  4651 #>  [4729]  5139  5400  5455  5562  5593  6309  6724  6949  6989  7055  7297  8203 #>  [4741]  8728 10427 10490 10544 10844 12004 13296 13719 14141 14234 14802 14968 #>  [4753] 15630  4655  4787  4955  5251  5301  5385  5527  5545  5777  5858  6096 #>  [4765]  6764  7098  8329  8393  8810  8835 10491 11520 11923 12216 12909 13720 #>  [4777] 14117 14531 14803 15367  4607  4631  4675  4796  4810  4831  4915  5216 #>  [4789]  5273  5710  6208  6222  6238  6540  6590  6612  6691  6968  7601  7615 #>  [4801]  9164  9717  9987 10009 10375 10697 11417 11552 12419 12454 12825 12848 #>  [4813] 13048 13079 13689 13842 14342 14698 15003 15121 15153  4613  4620  4632 #>  [4825]  4767  4811  4815  4852  5060  5335  5659  5737  5800  5842  5884  6449 #>  [4837]  6812  6837  6969  7148  7169  7203  7298  7729  7891  8619  8811  9757 #>  [4849] 10224 11741 12323 12540 13623 13911 14209 14667 15004 15122 15559 15695 #>  [4861] 15866 16160 16534 16682 16728  4596  4648  4653  4660  4691  4982  5151 #>  [4873]  5237  5246  5630  5698  6171  6209  6846  6950  7024  7132  8411  8853 #>  [4885] 10086 12266 13992 14699 15831 15867 16376  4600  4603  4609  4611  4627 #>  [4897]  4921  4934  4950  5252  5360  5422  5446  5563  5578  5766  6239  6574 #>  [4909]  6646  6902  7252  7517  7907  8250  8412  9143  9489  9960 10150 10175 #>  [4921] 10545 11898 12390 12455 12849 12910 13597 15498  4598  4605  4614  4635 #>  [4933]  4657  4666  4697  4757  4964  5006  5144  5456  5486  5605  5738  6450 #>  [4945]  6513  7299  7347  7744  7979  8149 10492 10546 11368 11418 11803 13217 #>  [4957] 13297 13912 15434 16475 16729  4615  4621  4671  4773  4802  4907  4935 #>  [4969]  5224  5282  5414  5917  6021  6088  6146  6372  7496  7865  8000  8037 #>  [4981]  8812  9013  9032  9657  9694 10256 10493 10865 10932 11603 12005 12267 #>  [4993] 13650 13913 14864 14900 16650  4624  4661  4681  4797  4816  4822  5131 #>  [5005]  5686  6159  6778  6838  7204  7253  7730  8228  8976  9092  9695 10038 #>  [5017] 10087 10351 10606 11285 11924 14271 15399 15560 15765 16441  4643  4647 #>  [5029]  4649  4669  4705  4788  5152  5247  5606  6240  6279  6473  6613  6692 #>  [5041]  7266  7562  7616  8371  8578  9718  9736 11256 12122 13415 13598 14048 #>  [5053] 14077 14235 14392 14700 15766 16133  4597  4712  4743  4768  4864  5217 #>  [5065]  5539  5564  5579  5641  5711  5843  5976  6075  6373  6874  7254  7760 #>  [5077]  7940  8745  8813  8875  8947  8977  9402 10866 10888 11470 11604 11925 #>  [5089] 12268 12618 13512 13624 13749 13843 14740 15093 15767  4612  4629  4676 #>  [5101]  4682  4687  4713  4744  4758  4769  4783  4858  4939  5029  5090  5157 #>  [5113]  5607  6395  6665  6693  7099  7170  7329  8434  9264  9334  9421  9658 #>  [5125] 11369 15731 15940 16134 16410 16683 16730  4734  4879  5386  5594  5877 #>  [5137]  6106  6266  6474  6681  6903  7171  7617  8038  8545  9422  9472  9532 #>  [5149] 10517 10579 11048 11553 11804 12703 12850 13022 13379 13721 14078 14236 #>  [5161] 14532 14574 15123 15235 15941  4650  4774  4803  4849  4927  5038  5085 #>  [5173]  5310  5401  5434  5580  5801  5859  5990  6172  6951  7584  7643  7782 #>  [5185]  8073  8562  8620  8641  9033  9241  9803 10352 10867 11113 12176 12420 #>  [5197] 12998 13474 15124 15732  4604  4625  4670  4677  4684  4692  4751  4983 #>  [5209]  5039  5086  5158  5225  5253  5283  5302  5423  6031  6451  6666  6970 #>  [5221]  7149  7413  7696  8131  8500  9377  9458  9568  9988 10111 10151 10257 #>  [5233] 10446 10547 10698 10912 11215 12269 12704 13844 13914 14432 14804 15005 #>  [5245] 15094 15499 16105  4619  4644  4971  4990  5111  5257  5292  5311  5651 #>  [5257]  5755  6051  6184  6694  6971  7100  7172  7205  7618  8039  8768  9804 #>  [5269] 10088 10889 11444 12031 12826 13782 13845 14930 15530 15768 15803 15942 #>  [5281] 16106  4610  4823  4908  5125  5274  5293  5336  5361  5565  5699  5891 #>  [5293]  5950  6160  6255  6437  6614  7150  7660  7710  7866  8642  9063  9829 #>  [5305]  9886 10548 10728 11605 11625 12827 13265 13344 13416 13651 13881 14022 #>  [5317] 14142 14575 16759  4636  4745  4779  5208  5238  5337  5506  5581  6630 #>  [5329]  6972  7075  8477  8729  8746  8814  9591 10195 10282 10634 11193 11950 #>  [5341] 13818 14393 14494  4630  4746  4836  5112  5669  5687  5991  6097  7076 #>  [5353]  7187  7255  8294 10152 10283 11144 11727 12736 12851 13218 13783 14210 #>  [5365] 14433 14969 16535 16579  4706  4843  4850  4940  5040  5258  5435  5620 #>  [5377]  5747  6937  7619  8040  8171  8435  8709  9719  9830 10465 10773 11009 #>  [5389] 12456 12567 12671 12885 12973 14049 14668 15236 15733  4637  4770  4865 #>  [5401]  4874  5061  5259  5338  5479  5787  7214  7454  8579  8663  8710  9437 #>  [5413] 10089 10549 10580 10774 11145 11676 12911 13652 14118 14237 14316 14741 #>  [5425] 14865 15205 15943 15982 16295 16377  4685  4700  4731  4765  4804  4972 #>  [5437]  5498  5595  5961  5992  6114  7761  8330  8978 10090 10225 10258 11216 #>  [5449] 11257 12485 12943 15060 15330 15696 15832 16731 16760  4622  4714  4730 #>  [5461]  4956  5528  5582  5739  6747  6884  7348  8580  9214  9298  9403  9490 #>  [5473]  9614  9659  9758 10306 10845 11419 11899 12486 13544 13568 13846 13962 #>  [5485] 14343 15095 15154 16761  4844  4880  5424  6161  6475  6488  6647  6825 #>  [5497]  7543  8150  8229  8455  8925  9215  9550  9737 10060 10091 10729 11082 #>  [5509] 11650 12348 12737 12886 13722 15125 15665 15944 16084  4616  4626  4662 #>  [5521]  4678  4688  4707  4752  5120  5132  5317  5339  5387  5425  5529  5688 #>  [5533]  6267  6280  6489  6813  6990  7133  7236  7478  7966  8295  8501  8522 #>  [5545]  8643  8815  8948  9942 10307 10550 11049 11217 11626 11836 13180 13345 #>  [5557] 13819 14079 15302 16055  4617  4628  4633  4638  4701  4784  4853  5067 #>  [5569]  5254  5388  5426  5689  5756  6006  6615  7101  7215  7544  8054  8892 #>  [5581]  9319  9759 11389 11420 12177 12301 12349 12509 12649 13820 14143 15331 #>  [5593] 16020  4766  4824  4837  4866  5048  5091  5168  6193  6523  6885  7007 #>  [5605]  7300  7433  7585  7661  8189  8686  9943 10518 10977 11258 12150 13690 #>  [5617] 13784 13963 14119 14495 14805 14901 14931 15435  4695  4875  4881  4909 #>  [5629]  4957  5041  5113  5260  5515  5642  5831  5962  6129  7434  7941  8074 #>  [5641]  8094  8436  9282  9640 10404 10819 11606 12457 13321 14533 14576 15631 #>  [5653]  4623  4673  4716  4780  4876  5201  5757  6130  6173  6210  6405  6490 #>  [5665]  6555  6991  7025  7237  7435  7545  8348  8876  9615 10308 10666 10730 #>  [5677] 11235 11471 13049 13266 13750 14434 15462 16193 16536 16605  4645  4698 #>  [5689]  5030  5376  5977  7134  7238  7267  7479  7546  7833  8296  8456  9187 #>  [5701] 10353 10376 10405 10796 11083 13109 15833 15905 16511  4639  4667  4696 #>  [5713]  4735  4936  4965  5013  5087  5209  5294  5340  5377  5596  5677  6089 #>  [5725]  6098  6514  6973  7008  8297  8596  8664  9144  9378 10377 10699 10731 #>  [5737] 11029 11521 11651 12421 13050 13110 13149 13847 14023 14599 15260 15463 #>  [5749] 16271  4683  4717  4785  4941  5126  5226  5239  5597  5802  5832  5908 #>  [5761]  6326  6648  6779  6974  7009  7455  7846  8132  9042  9145  9738 10061 #>  [5773] 10176 10667 10820 11114 11742 12123 12887 14238 14317 14534 15025 15332 #>  [5785] 16021  4646  4656  4679  4872  5031  5102  5389  5788  5803  5993  6256 #>  [5797]  6602  7010  7379  7685  7711  8095  8151  8523  9188  9351  9491  9569 #>  [5809]  9805 10607 10756 11236 11352 11703 12568 13051 13267 13445 13625 14806 #>  [5821] 14970 15464 15734  4640  4652  4668  4718  4838  4890  4922  5025  5227 #>  [5833]  5378  5436  5480  5822  5900  6194  6419  6541  7151  7216  7414  7745 #>  [5845]  8230  8394  8787  8949  9189  9533  9616  9720  9806  9859  9913 11286 #>  [5857] 11421 11743 12006 12374 12828 12852 12974 13417 15697  4641  4708  4775 #>  [5869]  4825  4861  5096  5218  5264  5402  5652  5804  6327  6374  6575  6765 #>  [5881]  6938  7039  8597  8621  9165  9216  9961 10112 11652 12541 12672 12773 #>  [5893] 14120 15261 15698 15804 16161 16762  4715  4771  4798  4958  5121  5169 #>  [5905]  5327  5347  5507  5833  5909  6007  6052  6708  7188  7686  7783  8172 #>  [5917]  8280  8502  9043 11010 11704 12007 12975 15868 16337 16378 16606 16651 #>  [5929]  4693  5007  5092  5322  5487  5608  5868  5918  5978  6131  6147  6353 #>  [5941]  6438  6464  6952  7011  8204  8281  9807  9944 10010 10153 10732 10913 #>  [5953] 11115 11472 11837 12059 12089 12178 13346 13964 15983 16056  4762  4817 #>  [5965]  5700  5789  5805  6354  6439  6616  6631  6814  6886  6904  7012  7807 #>  [5977]  8173  8950  9570  9617 10177 10933 11116 11353 11473 11627 12391 12976 #>  [5989] 13023 13181 14318 16022 16442  4654  4923  5153  5228  5303  5609  5979 #>  [6001]  6069  6211  6281  6491  7056  7115  7239  7819  8112  8503  9190  9242 #>  [6013]  9989 10330 10447 10466 11677 12151 12392 13111 13569 14272 14344 14468 #>  [6025] 15061 15096 15699 16194  4740  4747  4859  4973  5042  5114  5140  5154 #>  [6037]  5265  5690  6310  6375  6406  6649  6780  7026  7923  8133  8152  8478 #>  [6049]  8504  9618  9673  9945 10284 10354 10914 11422 11871 12032 12090 12458 #>  [6061] 12487 12912 13785 13993 14932 16732  4732  4826  4942  5488  5834  6195 #>  [6073]  6734  6847  7013  7057  7518  7602  7644  7980  8251  8298  8372  8877 #>  [6085]  9379  9492  9641 11770 11976 12797 12888 13024 14469 14933 16296 16580 #>  [6097] 16684  4736  4792  5410  5598  5631  6042  6107  6556  6875  7315  7519 #>  [6109]  7645  8041  9380  9642 10467 11744 11977 12060 12241 12270 12459 13418 #>  [6121] 13570 13786 15206 15262 15500 15666 15700 15906 15984 16297  4702  4845 #>  [6133]  4851  4867  4891  4997  5055  5115  5141  5185  5370  5701  5869  6440 #>  [6145]  6975  7102  7189  7892  8001  8075  8096  8282  8349  9619  9785  9914 #>  [6157] 10196 10226 10635 10958 11084 11146 11522 12179 12302 12422 12829 13848 #>  [6169] 15263 15465  4658  4753  4793  4799  4862  4943  5023  5155  5266  5295 #>  [6181]  5411  5835  5994  6407  6766  7077  7436  7520  7620  7646  8563  9034 #>  [6193]  9191  9493  9571  9915 10355 10821 11926 12033 12705 13419 14701 15501 #>  [6205] 15561 15805 16298  4665  4711  4719  4944  4991  4998  5296  5653  5767 #>  [6217]  5919  6282  6338  7563  7981  8711  9808 10309 10608 10822 11259 12152 #>  [6229] 12350 12510 12853 12889 13691 14600 15985 16299  4846  5049  5348  6132 #>  [6241]  6283  6294  6542  6735  7135  7217  7349  7497  9243 10310 11331 13268 #>  [6253] 13420 13571 13965 14934 14971 15806 15869 16476  4663  4694  4703  4759 #>  [6265]  4839  4860  5032  5068  5470  5878  6355  6376  6396  6524  6695  6709 #>  [6277]  7498  7867  7908  7924  8113  8205  8252  8350  8413  8747  8926  9244 #>  [6289] 12271 12774 13150 13934 14170 15097 15594 15769 15945  4659  4737  4854 #>  [6301]  4884  5014  5056  5415  5463  5489  5499  5516  6241  6465  6557  6576 #>  [6313]  6781  6800  7173  7218  7697  8253  8479 10406 10494 10846 11838 12854 #>  [6325] 14345 15237 16237  4892  4916  5103  5379  5447  5670  5728  5790  5920 #>  [6337]  6305  6782  7350  8254  8893  9512 10039 10134 10636 10934 12393 12591 #>  [6349] 13513 13545 13626 15807 15870  4704  4748  4882  4959  4999  5015  5229 #>  [6361]  5390  5412  5702  7521  7820  8076  8687  9064  9146  9423  9760  9962 #>  [6373] 10311 11745 12091 13322 14121 15907  4754  5024  5050  5186  5312  5318 #>  [6385]  5599  6148  6420  6441  7380  7456  7662  7712  9473  9739 10733 11332 #>  [6397] 12673 13112 13347 13653 13915 13994 14273 15400 16581  4738  4741  5097 #>  [6409]  5187  6196  6339  6356  6603  6650  7027  7058  7078  7663 10197 11194 #>  [6421] 11628 12092 12944 13113 13241 13269 13882 14346 14435 15172 15401 16195 #>  [6433]  4672  4690  4755  4789  4800  4945  4951  5016  5033  5062  5202  5284 #>  [6445]  5437  5517  5566  5632  5643  5844  6070  6197  6377  6421  6452  6492 #>  [6457]  6543  6767  8206  8581  8951  9044  9381  9551 10519 10734 11011 11195 #>  [6469] 11445 11554 12180 12830 12913 13787 13935 14080 15026 15155 16162 16338 #>  [6481]  4877  5051  5075  5116  5362  5748  6053  6284  6422  6696  6864  7586 #>  [6493]  7967  8042  8373  8927  8952 10285 10378 12153 13966 15701 16537  4709 #>  [6505]  4723  4832  4885  4893  4984  5000  5063  5210  5518  5678  5806  6295 #>  [6517]  6617  6682  6976  7587  7925  8026  8315  8730  9494  9572  9963 10637 #>  [6529] 11050 11496 14347 14702 15303  4733  4894  5088  5133  5633  5768  6022 #>  [6541]  6054  6076  6442  6577  7079  7301  7522  7698  8395  9166  9245  9283 #>  [6553]  9352  9513  9552 10286 10428 10448 10735 10978 11523 12272 13052 13323 #>  [6565] 13723 14171  4749  5176  5285  5313  5703  6023  6043  6115  6493  6667 #>  [6577]  6748  6768  7152  7285  7564  7746  7762  9014  9217  9534  9573  9721 #>  [6589] 10429 10700 10847 10915 10935 11629 12324 12619 14172 15156 15402  4699 #>  [6601]  4917  5203  5230  5490  5791  5995  6055  6116  6378  7621  7847  8002 #>  [6613]  8097  8231  8928  9035  9786  9964 10379 10979 11423 11771 12375 12620 #>  [6625] 13182 13788 14173 14972 16685  4686  4772  4833  4903  4974  4992  5170 #>  [6637]  5204  5211  5416  5491  5610  5860  6408  6423  6476  7219  7565  7699 #>  [6649]  7713  8153  8255  8854  8894  9104  9831 12775 13883 14496 15702 15770 #>  [6661] 16135 16763  4689  4720  4726  4781  4812  4895  5043  5248  5464  5519 #>  [6673]  5567  5963  5996  6133  6424  6887  7220  7603  7909  8077  8207  8598 #>  [6685]  9353  9620  9946 10495 10848 11370 12217 12423 12674 13151 13446 13692 #>  [6697] 13789 14407 15834 15908 15986 16411  4760  4868  5026  5341  5520  5758 #>  [6709]  6071  6108  6697  6815  6905  6939  7014  7116  7731  7763  8078  8174 #>  [6721]  8524  8712  9887 10959 11555 12592 13572 13654 14239 15667 15703 16477 #>  [6733]  5034  5568  5910  6311  6477  6710  6749  6839  7080  7103  7302  7764 #>  [6745]  7784  7868  8232  8564  9621 10936 10960 11390 11497 11772 11927 12218 #>  [6757] 12351 12831 13514 13655 14144 14973 15403 15632 15808 16652  4763  5127 #>  [6769]  5142  5212  5240  5371  5555  5691  6257  6494  6698  6906  7081  8979 #>  [6781]  9167 10496 11371 11839 12034 12325 12352 12621 13298 13324 13421 13656 #>  [6793] 13995 15207 15987  4756  5328  6357  7268  7547  8299  8582  8644  8980 #>  [6805]  9065  9218 10890 11196 11556 11805 12738 12855 13599 14866 14902 15006 #>  [6817] 15264 16733  4873  5069  5181  5372  5508  5671  6466  7303  7747  7968 #>  [6829]  8256  8583  9592  9740 10449 11117 11653 12219 13242 15208 15835 15988 #>  [6841] 16582  4721  4790  4878  4952  5219  5286  5373  5769  5921  5997  6651 #>  [6853]  6711  6750  7286  7381  7398  7499  8257  9674 10961 11012 11498 12460 #>  [6865] 12914 12945 14535 14601 14703 15027 15062 15333 15704 16107 16238  5998 #>  [6877]  6008  6258  6379  6515  7082  7269  7351  7523  7982  8175  8457  8855 #>  [6889]  9219 10040 10609 11391 11524 12303 12890 13080 13967 15126 16339  4782 #>  [6901]  4805  4827  4883  4904  5205  5287  5342  5792  6296  6506  7785  7848 #>  [6913]  7893  8565  9066  9354  9474  9553  9622 10356 11030 11578 11840 12008 #>  [6925] 12706 12891 13849 13884 14024 14174 14470 14742 15028 16607  4742  4786 #>  [6937]  4869  4928  5509  5611  5885  6032  6453  6495  6525  6544  6992  7548 #>  [6949]  8788  9105  9438  9761  9965 10062 10259 10357 10823 11474 11705 13790 #>  [6961] 13968 15029 15871 16300 16512  4710  4724  4727  4794  4905  4960  5159 #>  [6973]  5267  5621  5892  6033  6578  6783  7174  7664  7926  8374  9265  9355 #>  [6985] 10312 10520 10868 10962 12461 13422 13627 13916 14319 14471 14627 14704 #>  [6997] 14903 15633 15909 16443  4722  4966  4985  5231  5391  5644  5770  6242 #>  [7009]  6977  7083  7849  8043  9125 10701 10980 11260 11392 12061 12154 12622 #>  [7021] 14348 15173 15238 16163  4739  4750  4806  4870  4912  4975  5177  5556 #>  [7033]  5583  5845  6149  6174  6185  6243  6953  7370  7732  7894  7983  8134 #>  [7045]  8599  8856  8953  9126  9220  9459  9574  9787 10011 10450 11197 11446 #>  [7057] 11525 12542 12739 13475 14349 14743 15595 15634  4818  4828  5008  5145 #>  [7069]  5188  5197  5261  5288  5304  5530  5645  5672  5749  6397  7287  8316 #>  [7081]  9221  9246  9888  9966 11424 11526 11900 12353 12623 12946 13114 13917 #>  [7093] 15771 16272  4801  4929  4946  5704  5778  6198  6558  6801  7270  7457 #>  [7105]  7622  7665  8135  8954  9404  9554  9762  9916 12424 12462 13791 14628 #>  [7117] 15265 16444 16608  4725  4855  4863  4896  5064  5171  5206  5279  5363 #>  [7129]  6175  6223  7330  7927  7969  8208  8688  8748  9036  9405  9475 10092 #>  [7141] 10178 10198 11237 11354 11806 11951 12463 13573  4819  4840  5076  5098 #>  [7153]  5531  5546  5964  6077  6090  6212  6478  6683  7221  7765  7821  8769 #>  [7165]  8908  9015  9067  9284  9889  9990 10227 10313 10430 10963 11304 11706 #>  [7177] 12009 13325 13693 16653  4976  5001  5017  5077  5104  5172  5189  5427 #>  [7189]  5634  5846  6056  6328  6579  6591  7588  7647  8458  9016  9266 10199 #>  [7201] 10668 11425 11654 11928 13380 13918 13969  4761  5213  5413  5569  6176 #>  [7213]  6454  6516  7942  8079  8176  8209  8645  8749  8816  8878  8895  9285 #>  [7225] 10093 10228 10331 10551 10581 11557 11579 12707 13476 13694 14050 14904 #>  [7237] 15127 15334 16583  4886  5057  5448  5570  5779  5951  6072  6244  6380 #>  [7249]  6409  6592  6725  7240  7480  7604  7700  8300  8600  8750  9247  9593 #>  [7261] 10012 11013 11447 11773 11901 12624 13081 13695 14577 15668  4967  4986 #>  [7273]  5349  5438  5712  5952  6099  7222  7524  8258  8283  8665  8836  9335 #>  [7285]  9424  9991 10200 11355 12093 12425 12915 13628 14175 14935 15705  4807 #>  [7297]  4930  4953  5002  5350  5521  5740  6134  6268  6312  6398  6545  6848 #>  [7309]  7352  7623  8566  8646  8955  9127  9555  9660  9763 10154 10380 10468 #>  [7321] 11051 14436 14536 14867 15404 15946 16764  4947  5190  5922  6009  6224 #>  [7333]  6285  6297  6329  6443  6507  6849  6993  7104  7190  7666  7748  7895 #>  [7345]  8154  8896  9267 11167 13447 14240 14497 14669 14771 15174 15405 15596 #>  [7357] 15872 16108  4808  4820  4993  5105  5280  5449  5571  5600  6186  7040 #>  [7369]  7175  7206  8003  8731 11872 12856 13053 13381 14705 15335  4829  4897 #>  [7381]  4913  4987  5058  5220  5329  5403  5465  5532  5870  6117  6580  7105 #>  [7393]  7382  7808  7834  8647  8909  9299  9439  9623 10451 10552 10582 11052 #>  [7405] 11118 11238 11841 12394 12708 12776 13696 14537 14936 14974 15063 16379 #>  [7417]  4834  4977  5027  5078  5093  5330  5547  5646  5679  6118  6313  7059 #>  [7429]  7353  7624  7896  8546  8601  9222  9514  9722  9967  9992 10063 10638 #>  [7441] 11630 12426 13448 14437 14706 14975 15502 15669 16412  4776  5094  5117 #>  [7453]  5191  5540  5680  5705  5741  5940  6100  6526  6699  8817  8956  9192 #>  [7465]  9860 10610 10669 11333 11426 11475 11873 12124 12181 12273 12395 12740 #>  [7477] 12777 13326 14320 14670 15007 15266 15336 15873 16380 16478 16734  4764 #>  [7489]  4898  4961  4994  5018  5146  5351  5471  5953  6559  6769  6826  6923 #>  [7501]  7041  7371  7458  7850  7970  8155  8396  8459  9460  9968 10013 10553 #>  [7513] 10670 11053 11607 12182 12798 13115 13183 13970 15175 15436 15910  4847 #>  [7525]  5893  6358  6425  6684  7648  7687  8397  8414  8547  9476 10014 10229 #>  [7537] 10287 11929 12650 13348 14498 14629 14976 15337 15874 15989 16301  5044 #>  [7549]  5089  5134  5241  5612  6162  6269  6340  6359  6517  7525  7869  9300 #>  [7561] 10094 10288 10736 11085 11393 12010 12183 13299 13382 13919 13936 14707 #>  [7573] 15406 15809 16164  4899  4924  5198  5500  5750  5847  5923  6010  6024 #>  [7585]  6109  6924  7176  7288  7316  7437  7835  7971  8548  8929 10113 10230 #>  [7597] 11086 11394 11842 12155 13449 13515 13920 14274 15008 15176 15209 15562 #>  [7609] 16302  5052  5147  5268  5879  5980  6034  6110  6135  6225  6245  6270 #>  [7621]  6593  6726  7028  7304  7383  7566  8055  8351  9017 10916 11087 11395 #>  [7633] 11952 12062 12094 13082 13219 13724 14275 14937 15064 15267 15635 16765 #>  [7645]  4830  4835  5070  5160  5364  5681  5771  6226  6314  6876  6925  6954 #>  [7657]  7256  7271  7354  8080  9320 10639 11527 11655 11707 11728 14408 14538 #>  [7669] 14630 16303 16538 16654  4809  4900  5352  5392  5759  6044  6163  6286 #>  [7681]  6618  6770  7042  7786  8136  8301  8375  8480  8713  8897 10135 10155 #>  [7693] 10231 11054 11334 13477 13574 13600 13629 13751 13921 14977 15368 15503 #>  [7705] 15670 16109 16479  4906  5173  5439  5533  5760  6199  6213  6360  6736 #>  [7717]  6840  6877  6888  6978  7714  7836  7943  8352  8714  8930 10381 12011 #>  [7729] 12035 13243 13937 14241 14631 14838 15065 16196 16413  4841  4910  5314 #>  [7741]  6136  6632  6784  6979  7015  7043  7500  7589  7787  8317  8666  8770 #>  [7753]  9168 10015 10497 12999 13601 14211 14276 14602 14839 15531 16513  4813 #>  [7765]  4821  4901  5242  5319  5622  5836  6271  6387  6712  6907  7438  7567 #>  [7777]  8027  8879  9045  9248  9440  9495 11031 11528 11953 11978 12012 12274 #>  [7789] 12625 14708 15304 15369 15407 15437 15671 15836 16110 16686 16735  4814 #>  [7801]  4856  4871  4937  5079  5232  5492  5623  5837  6164  6455  6604  6908 #>  [7813]  6940  7241  7415  7715  8098  8567  9675 10431 10521 10737 11261 11427 #>  [7825] 11807 12916 14632 14744 16023  4887  4948  5343  5440  5522  5742  5807 #>  [7837]  5886  6214  6227  6381  6410  6827  7060  7084  7568  7749  8415  8584 #>  [7849]  8771  9917 10407 10981 11198 11746 12095 13184 13450 13575 13657 15466 #>  [7861]  4848  4857  5009  5059  5353  5534  5887  6330  6980  7481  7526  7590 #>  [7873]  7733  7788  8210  8302  9286  9594 10064 10824 11239 11874 12063 12326 #>  [7885] 12376 12626 15338 15532 16381 16655  4914  5122  5128  6272  6287  6411 #>  [7897]  6785  6909  7851  8044  8137  8353  9106  9723 10179 10232 11032 11372 #>  [7909] 11428 11747 12543 13000 13792 14321 15098 15268 15911 16239 16480  4918 #>  [7921]  5106  5135  5243  5743  6078  6177  6444  7061  7605  7984  8318  8505 #>  [7933]  8789  8981  9356  9477 10065 10640 10702 11033 12354 13025 13054 13185 #>  [7945] 13602 14145 15467  4978  4988  5380  5428  5510  5535  5793  5838  6057 #>  [7957]  6341  6652  7439  7716  8056  8177  8568  8982  9382  9406  9832 10289 #>  [7969] 10703 11168 11608 11729 12569 12917 13152 13383 13451 13793 14772 15408 #>  [7981] 15438 15837 16240 16382  4919  4979  5053  5107  5192  5572  5660  5794 #>  [7993]  5965  6200  6342  6388  6527  6633  7085  7117  8648  9018  9169  9595 #>  [8005]  9696 10738 10891 11305 11476 11499 11656 11875 11979 12125 12544 13186 #>  [8017] 13996 14938 15409  4911  4931  5003  5035  5161  5178  5374  5429  5673 #>  [8029]  5692  5880  6201  7086  7153  7384  7750  8178  8284  8622  9147  9461 #>  [8041]  9575 10522 10554 10641 11055 11429 12036 12488 12741 12857 13187 13384 #>  [8053] 13516 13821 14709  4925  4962  5466  5661  5814  6246  6865  6981  6994 #>  [8065]  7809  8057  9107  9947 10016 10332 12799 13603 14409 15269 15563 16539 #>  [8077]  4888  4968  5045  5099  5162  5315  5493  5894  5911  6653  6771  6786 #>  [8089]  6850  7910  7972  8004  8649  8957 10382 10469 10892 11774 11902 12918 #>  [8101] 14176 14905 15030  5080  5179  5289  5354  5654  5823  5861  5871  6101 #>  [8113]  6382  7459  7549  8099  8602  8898  9890 11657 12464 12742 13244 13794 #>  [8125] 15597 16197  4969  5081  5108  5305  5472  5613  5635  5824  6045  6456 #>  [8137]  7016  7272  8114  8354  9301 10095 11169 11477 11580 11980 12275 12627 #>  [8149] 13576 14146 16024  4980  5071  5199  5601  6751  7223  7569  7649  7852 #>  [8161]  8028  8303  8623  9441 10233 10797 11147 11678 13026 13850 15598 16273 #>  [8173] 16340  4932  4938  5109  5136  6202  6315  6841  7822  8005  8259  9948 #>  [8185] 11581 11631 12832 12858 13577 14025  4889  4981  5275  5381  5839  6685 #>  [8197]  7399  7460  8179  8304  8958  9170 10041 10408 10583 10739 10869 11034 #>  [8209] 11056 12220 12276 12800 12919 15468 15875 16766  4963  5028  5036  5100 #>  [8221]  5207  5233  5244  5355  6025  6035  6102  6150  6331  6361  6619  7461 #>  [8233]  7853  7870  8667  8857  9171 10066 10671 10870 11748 12221 12947 15439 #>  [8245] 16111  4933  5019  5065  5662  5729  6802  7462  8376  9128  9321  9661 #>  [8257] 10358 10672 10798 11014 12675 12778 14633 15210 15706 16136  5046  5082 #>  [8269]  5614  5624  5713  5780  5999  6046  6412  6518  6634  6828  6910  7440 #>  [8281]  8006  8285  8790  9249  9496 10470 10775 12489 13116 13452 13658 15031 #>  [8293] 15564 15672 15838 15912 16584  5123  5714  5825  6000  6091  6119  6479 #>  [8305]  6605  7331  7355  9108 10096 10555 10611 10642 10893 11306 11356 11708 #>  [8317] 11749 12977 13153 13997 14438 14710 15469 15839 16383  4949  5020  5110 #>  [8329]  5182  5501  5548  5901  6058  6079  6203  6413  6546  6635  6727  6737 #>  [8341]  6787  7356  7482  7717  7854  8355  8506  8624  8715  9193  9624  9741 #>  [8353] 10452 10612 10825 11396 11478 11609 11730 13220 13697 14212 14868 15128 #>  [8365] 15599 15636 16514  5101  5180  5193  5393  5815  5848  5881  5924  6343 #>  [8377]  6606  6752  7550  7985  8331  9442  9788 10799 11170 11500 11679 12242 #>  [8389] 13938 14177 15066 15339 15673 16540  5010  5954  6120  6215  6654  6772 #>  [8401]  6803  6926  7570  7944  8115  8211  9093  9891 10067 10776 11015 11558 #>  [8413] 11658 12064 12126 12511 12920 14081 16304 16736  5072  5148  5163  5262 #>  [8425]  5441  5511  5955  6316  6480  6581  6668  6788  7029  8260  8625  9068 #>  [8437]  9497 10383 10432 10704 11199 11680 11954 12512 13221 13423 13998 14213 #>  [8449] 14671 15772 16057 16687  5037  5083  5156  5183  5221  5249  5255  5523 #>  [8461]  5862  5966  6228  6247  6636  7242  7257  7372  7766  8156  8305  8356 #>  [8473]  8910  8996  9535 10201 10433 10740 10800 10871 12676 12779 13027 13083 #>  [8485] 13546  4995  5021  5137  5297  5356  5473  5682  5863  5925  6414  6426 #>  [8497]  7332  7385  7551  8332  8377  8732  9697 10017 10705 11171 11448 12709 #>  [8509] 13453 13659 14472 15067 15707 15947 16085 16198  5184  5417  5494  5902 #>  [8521]  5941  6344  6481  6878  7789  7911  8460  8858  9515  9809  9949 10613 #>  [8533] 10643 10872 10937 11659 11750 13084 14082 16086  5234  5306  5512  5772 #>  [8545]  5926  6332  6457  6594  6995  7701  7751  8007  8233  8261  8507  8751 #>  [8557]  9357 10434 10644 10673 10938 11559 16165 16515  5235  5307  5467  5474 #>  [8569]  5502  5541  5715  5761  6080  6259  6941  7207  7552  7571  7667  7752 #>  [8581]  8116  8416  8461  8668  8837  8859  8983  8997  9643  9892  9918 10706 #>  [8593] 11307 11876 12948 13270 13327 16767  5004  5073  5084  5095  5174  5194 #>  [8605]  5323  5981  6073  6288  6383  6445  6496  6866  6879  6955  7224  7317 #>  [8617]  7441  7702  9194  9950 10359 11397 11808 12037 14277 15773 15990 16241 #>  [8629]  5047  5357  5457  5549  5557  5730  6011  6074  6427  6804  6927  7191 #>  [8641]  8398  9037  9195 10018 10234 11632 11981 13300 13424 14147 14773 15440 #>  [8653] 15774  5011  5195  5450  5481  5744  5751  5895  6121  6399  6458  6467 #>  [8665]  6851  7044  7062  7208  7357  7442  7483  7668  7810  8008  8998  9498 #>  [8677] 12127 12243 12304 14322 14672 14906 14939 16199 16274  5236  5320  5404 #>  [8689]  6229  7973  8234  8669  8818  9129  9789 10360 10707 12222 13752 14807 #>  [8701] 15239 15470  5022  5558  5647  5762  6026  6137  6306  6362  6637  6728 #>  [8713]  7118  7225  7386  7416  7463  7871  8262  8819  8860  9764  9919 10202 #>  [8725] 10645 10964 12277 12780 13851 14539 15600  5074  5118  5149  5276  5536 #>  [8737]  5781  6081  6122  6187  6230  6273  6582  6620  7305  8752  9443 10019 #>  [8749] 10235 10384 11373 11529 12128 12355 13349 13604 13999  5164  5942  6345 #>  [8761]  7258  7306  7625  7872  8180  8190  8462  8772  8880 10614 10674 12427 #>  [8773] 12628 13028 13852 14000 15601 15708 15991 16688  5222  5442  5537  5573 #>  [8785]  6595  7017  8191  8378  8399  8417  9019  9407  9861 10982 11088 11357 #>  [8797] 11582 11731 12651 12710 12949 14214 14499 14673 15270 15370 15441  5066 #>  [8809]  5200  5524  5615  5706  5716  6165  6389  6482  6928  7106  7192  7259 #>  [8821]  8138  8157 10615 11057 11530 11982 13853 14410 15637  5119  5129  5308 #>  [8833]  5344  5636  6092  7177  7400  7417  7464  7501  7650  7837  8418  8984 #>  [8845] 10708 10939 11119 11148 13660 13698 16200  5143  5717  6889  7136  7333 #>  [8857]  8139  8333  8463  8670  8820  9790 10584 11089 14083 14215 14473 15674 #>  [8869]  5165  6059  6274  6333  6459  7318  7591  7606  7734  7873  7897  8081 #>  [8881]  8931  9069  9576 10314 10409 10435 11809 12490 12513 13328 13350 13605 #>  [8893] 13922  5405  5451  5663  5718  6016  6583  6852  7260  7373  7790  7912 #>  [8905]  8158  8821  9625  9765  9920 11449 12129 12223 12428 12629 12801 13222 #>  [8917] 13245 13661 14978 15876  5290  5324  5394  5616  5683  5707  5782  6298 #>  [8929]  6428  6483  6508  6547  6738  6911  6929  7209  7387  7718  7791  8159 #>  [8941]  8286  9516  9951 13630 14178 14278 14774 15533 15565 16025 16305  6047 #>  [8953]  6299  6789  7137  7193  7334  7418  7484  8838  9070  9499  9698 10042 #>  [8965] 10114 10385 11240 11287 11843 12950 13117 13188 13578 15271 15340 16026 #>  [8977] 16445  5124  5269  5309  5395  5482  5943  6027  6260  6655  6842  7087 #>  [8989]  7572  7855  7898  8481  8753  9302  9596  9662  9699 10236 10290 10777 #>  [9001] 11262 11844 12013 12244 13547 14374 14869 16689 16768  5298  5708  5719 #>  [9013]  5763  5773  5795  6996  7063  7194  7735  8585  8791  9676 10386 10410 #>  [9025] 10646 10675 10873 13223 14394 14634 15240 15442 16137  5214  5270  5365 #>  [9037]  5475  5956  6028  6151  7388  8235  8603  9109  9172  9268 10156 10203 #>  [9049] 10616 12491 12593 12781 13425 13923 14395 15009 15410 15775  5130  5430 #>  [9061]  5542  5574  5625  5816  5903  6790  6997  7195  8604  8932  8999  9020 #>  [9073]  9993 10315 10647 10894 10940 11501 12305 13753 13822 14940 15177 16341 #>  [9085] 16384 16585  5215  5271  5418  5602  6982  7045  7485  8306  8549  8839 #>  [9097]  8899  9110  9810  9893 10316 10895 10983 11090 11479 11531 11610 12184 #>  [9109] 12652 13246 14084 14148 15178 16690 16769  5150  5166  5196  5325  5396 #>  [9121]  5406  5584  5720  5826  6123  6912  7119  7154  7196  7261  7592  8029 #>  [9133]  8236  8464  8733  9130  9811  9833 10361 10757 11263 11374 11955 12038 #>  [9145] 12278 12921 13631 13754 14870 14941 15877 16275 16446  5223  5458  5468 #>  [9157]  5982  6036  6060  6275  6346  6669  7155  7767  8287  8357  8400  9071 #>  [9169]  9577 10260 11308 11375 12185 12743 13085 13118 13351 13699 13755 14051 #>  [9181] 14745 15099 15272 15371  5250  5326  5483  5513  5664  5752  6166  6289 #>  [9193]  6363  6415  6560  6853  7064  7319  8181  8334  8792  9556  9644 10020 #>  [9205] 10387 10585 11751 16276  5167  5256  5648  5721  5896  6248  6791  6890 #>  [9217]  6956  7226  7443  7626  8192  8212  8793  9131  9173  9358  9383  9952 #>  [9229] 10556 10826 11218 11309 11930 14396 15341 15504 16166 16541 16737  5693 #>  [9241]  5983  6082  6152  6216  6460  6497  7120  7227  7307  7444  8319  8482 #>  [9253]  8550  8911  9174  9500 10157 11310 11335 11810 12156 13301 13854 14242 #>  [9265] 14474 14500 15010 15068 15273 15342 15411 15471 15638 16242  5514  5849 #>  [9277]  5888  6037  6957  8912  9000  9223  9700  9834 10758 10827 11241 11845 #>  [9289] 11931 12039 13700 15505 15566 16112  5175  5277  5366  6061  6656  6753 #>  [9301]  6913  7088  7607  8009  8058  8263  8401  8525 10043 10317 10436 11091 #>  [9313] 11264 11732 11877 12065 12429 12492 13029 13086 13352 13971 14085 14350 #>  [9325] 14540 14746  5278  5431  5452  5495  5796  5808  5927  6596  7228  7289 #>  [9337]  7688  7811  8213  8689  9001  9021  9517  9969 10068 10828 10874 11288 #>  [9349] 12859 13606 14711 15069 15472 16447  5281  5397  5484  5665  6290  6347 #>  [9361]  6843  6891  7419  9336  9578  9742 11311 11775 12245 12430 12493 13939 #>  [9373] 14541 16201 16277 16306 16586  5443  5575  5617  5764  6188  6584  6700 #>  [9385]  6958  7308  7753  7792  9359  9894 10261 11058 11560 11811 11983 12327 #>  [9397] 12377 12833 13087 13271 13478 13548 14001 14375 14635 15241  5299  5626 #>  [9409]  5912  5944  5967  6029  6083  6892  7178  7320  8160  8437  8861  9022 #>  [9421]  9322  9557  9579 10204 10291 10617 10941 11583 12186 13353 14122 14475 #>  [9433] 15948 16342 16414  5300  5331  5398  5469  5496  5543  5674  5722  6348 #>  [9445]  6429  6930  7465  8307  8358  8508  8626  8959  9196  9287  9518 10097 #>  [9457] 10618 10778 10965 11149 12328 13088 13224 13924 15776  5375  5459  5503 #>  [9469]  5550  5731  6334  6914  7197  7335  7573  7974  8182  8193  8359  8509 #>  [9481]  9148  9597 10498 10557 10984 12677 12860 13725 13756 14578 14907 16087 #>  [9493] 16542 16609  5263  5382  5872  6178  6893  7336  7651  7669  7899  8716 #>  [9505]  8840  9046  9384  9462  9478 10619 10985 11336 11502 11584 12465 12892 #>  [9517] 13055 13119 13479 14636 14871 15949  5383  6012  6754  7138  7754  7874 #>  [9529]  8237  8526  8586  9743 10180 12893 13354 13385 13632 14086 15443 15735 #>  [9541] 16202  5332  5585  5753  5850  6093  8335  8933  8960  9111  9425  9812 #>  [9553] 10136 10759 11312 11532 11681 12096 13189 13633 13972 15032 15274 16343 #>  [9565]  5333  5399  5460  5576  5745  5783  5957  6153  6607  6670  6915  6942 #>  [9577]  7089  8100  8690  9072  9149  9288  9724  9895  9970 10896 12066 12246 #>  [9589] 12378 12978 13190 13517 13726 14603 16738  5334  5367  5525  5559  6261 #>  [9601]  6317  6657  6755  6867  6894  6931  7107  7389  8264  8551  8569  8794 #>  [9613]  8822  8913  8934 10801 11533 11585 12744 13056 13855 14542 14712 15736 #>  [9625] 15992  5272  5655  5732  5817  6138  6179  6231  6390  6498  6671  7229 #>  [9637]  7309  7390  7719  8935  9112 10044 10676 10741 11660 12594 13518 13885 #>  [9649] 14279 15444 16167  5316  5453  5586  5637  5656  5827  5840  6364  6561 #>  [9661]  6756  7108  7273  8082  9002  9385  9598 10586 11733 12306 12329 12466 #>  [9673] 12678 12861 12979 13795 13823 14376 14674 14775 15372 15709 15810 16243 #>  [9685] 16278 16587  5345  5649  6300  6349  6528  6844  6943  6959  7156  7945 #>  [9697]  8010  8183  9150  9725 10045 10709 10742 12040 12157  5291  5368  5454 #>  [9709]  5461  5723  6139  6916  7274  8117  8238  8795  8961  9360  9408  9444 #>  [9721] 10292 10677 10986 11150 11586 11903 12130 12396 12494 12834 13925 14179 #>  [9733] 14808 15100 15993  5897  5913  6001  6416  6895  6998  7445  7793  8465 #>  [9745]  8552  8605  8754  8862  9047  9197  9536 10021 10499 10917 11752 12330 #>  [9757] 12467 13480 15994 16058  5444  5765  5818  6713  6999  7527  7736  7812 #>  [9769]  7875  8419  8900  8914  9361  9426  9896 10743 11219 13191 13386 16168 #>  [9781]  5321  5407  5419  5627  5968  6002  6335  6499  6562  7928  8773 10158 #>  [9793] 11984 12711 12835 12951 13329 14476 15639 15995  5408  5445  5819  6597 #>  [9805]  6672  6960  7420  7593  8194  8466  8901 10115 10620 13355 14477 15506 #>  [9817] 16059  5462  5603  5873  5898  5945  6030  6529  6548  7813  8467  8483 #>  [9829]  8606  9151  9303  9427  9835  9897 11120 11220 11846 14026 14243 14323 #>  [9841] 14579 15737 15777  5384  5774  5874  6003  6038  6262  6350  6608  6880 #>  [9853]  7421  7446  7502  7670  7794  8030  8101  8671  9152 10587 10802 13120 #>  [9865] 13192 13701 15534  5369  5577  5618  5684  6484  6530  7179  7823  7876 #>  [9877]  7986  8214  9003  9445  9599 10411 10588 11121 13634 13702 14244 15011 #>  [9889] 15950  5432  5476  5619  5638  5851  6638  6714  6829  7528  8195  8650 #>  [9901]  8936  9813  9971  9994 10589 12067 12247 12679 13154 14245 15951  5420 #>  [9913]  5694  5928  6013  6757  6854  6868  7310  7358  7486  8059  8083  8239 #>  [9925]  8336  9726 10237 10333 10558 11480 12356 12397 12653 12952 13057 13089 #>  [9937] 13193 14087 14280 14439 14543 15275 15640 16415  5587  5904  6531  6758 #>  [9949]  7121  7321  7703  7913  8011  8484  8962 10069 10500 11561 11776 11812 #>  [9961] 12014 13225 13607 14149 14281 14397 16244  5639  5784  5852  6014  6500 #>  [9973]  7422  7466  7900  8320  8985  9250  9744  9791 10590 10648 10897 11172 #>  [9985] 11289 11430 11450 11847 11932 14282 15412 15710  5433  5675  5809  6039 #>  [9997]  6062  6509  6759  7230  7374  7824  7856  8308  8672  9269  9814 10559 #> [10009] 11290 11376 11985 12068 12131 13272 13549 14052 14324 14637 14747 15070 #> [10021] 16027 16060 16088 16245 16416  5409  5551  5560  5929  6111  6140  6189 #> [10033]  6792  7109  8823  9337  9972 10098 10116 10137 10621 11122 12331 13608 #> [10045] 13926 14053 14675 14942 15952 15996 16061 16516 16656  5657  5914  6446 #> [10057]  7447  7574  8060  9745 10262 11035 11173 11986 12097 12431 14748 15811 #> [10069] 16517 16588  5421  5477  5588  5724  5775  5810  6715  7275  7671  7755 #> [10081]  8485  8774  9132  9198  9428  9862 10918 11682 13058 13155 13302 13579 #> [10093] 13940 14943 16770  5485  5504  5526  5666  5930  5984  6180  6301  6621 #> [10105]  6658  6716  7487  8265  8841  9251  9792 11734 13059 13356 13387 13519 #> [10117] 14351 16448  5589  5733  5754  5797  5899  5946  6318  6430  6816  6944 #> [10129]  7857  7946  7987  8240  9113 10649 11221 12069 12187 12514 13973 14216 #> [10141] 14411 14544 15953 15997 16543  5561  5590  5853  5931  6112  6519  7401 #> [10153]  7737  7825  8651  8775  8863  8986  9114  9153  9580 11451 11735 11753 #> [10165] 11878 12745 13796 13974 14054 15129 15878  5591  5785  5798  5889  6249 #> [10177]  6549  6773  6817  6983  7065  7359  7402  7795  8337  8673  8717  9463 #> [10189]  9677 10760 10829 11481 11534 11813 12224 13060 13426 13609 14604 14872 #> [10201] 15179 15738  5552  5725  5890  5932  6094  6141  6365  7030  7046  7066 #> [10213]  7243  7311  7627  7901  8061  8118  8161  8527  8987  9224  9645  9793 #> [10225] 10744 11222 11633 14412 14749 14944  5478  5667  5676  5864  6124  7210 #> [10237]  8119  8438  8528  8915  9289  9815 12098 12468 12953 13703 14676 15567 #> [10249] 15840  6142  6217  6319  6805  7139  7608  7947  8379  8881  9252  9304 #> [10261]  9323  9953 10710 10779 11059 11933 12279 12595 13001 14945 15033 15071 #> [10273] 15778  5497  6204  6307  6400  7067  7198  7262  7322  7503  7877  7929 #> [10285]  8012  8184  8718  9973 10523 11482 11956 11987 12357 12746 14873 15012 #> [10297] 15157 15473 15739 15841 16771  5553  5695  5734  5786  5933  5969  6391 #> [10309]  6984  7018  7031  7826  7902  8439  8570  8864  9446 10070 10117 10205 #> [10321] 10803 10966 12132 12158 12545 13520 13580 14501 14979 15013  5685  5696 #> [10333]  5828  5854  6291  6598  7090  7628  7930  8013  9199  9409 10206 10334 #> [10345] 10650 11452 12188 12570 12922 13226 13886 14352 14440 14478 14605 16169 #> [10357]  5544  6113  6143  6263  6401  6532  7157  7403  7529  8241  8266  8824 #> [10369]  8963  9038  9270 10099 10293 10560 10830 12099 12307 13061 13757 13824 #> [10381] 13941 13975 14353 14502 14713 14874 15779 16739  5554  5915  5985  6302 #> [10393]  6585  6622  6729  7360  7404  8510  8865  8882  9921  9974 10159 10335 #> [10405] 10651 10875 12308 12571 13273 14246 15034 15373 15675 15780 16307 16610 #> [10417]  5776  5986  6320  6510  6623  6760  6855  6896  6945  7276  7423  7948 #> [10429]  8014  8215  8420  8866  9004  9626 10238 10849 10898 11611 11754 12332 #> [10441] 12515 12802 15211 15374 16308 16657  5650  5735  5829  5905  5934  5970 #> [10453]  6351  6392  6485  6739  7122  7609  7768  7878  8988  9005  9362  9558 #> [10465]  9727  9995 10239 10412 11060 11265 11453 11777 11988 12015 13030 13887 #> [10477] 13976 14840 15276 15474  5592  5640  5726  7337  7467  8242  8652  8691 #> [10489]  8842  9094  9133  9271  9766  9863  9922 11291 11562 11587 12041 12189 #> [10501] 12225 12432 13090 14441 14776 14841 14908 15641 16309  5865  5875  5971 #> [10513]  6017  6303  6730  6818  6869  7244  7391  8140  8216  8402  8692  8825 #> [10525]  9073  9200  9701 10745 11242 11503 11661 11904 12572 12654 14088 15475 #> [10537] 16089 16544 16691  5628  5811  5935  5947  6468  6533  6639  6961 11123 #> [10549] 11266 11454 11709 11934 12100 13521 13727 14809 15413  5629  6004  6018 #> [10561]  6167  6366  6534  7392  7530  8421  9996 10100 10831 12398 13227 13274 #> [10573] 13704 15130 16203  5855  6125  6461  6761  6917  7879  7931  8338  9225 #> [10585]  9338 10022 10263 10413 11200 12070 12399 12782 13481 14283 15212 15242 #> [10597] 15414 15535 15781  5658  5736  5987  6095  6168  6218  6686  6856  7914 #> [10609]  8141  8403  8440  8989  9386  9746 10264 10591 10678 10919 11124 12712 #> [10621] 14284 14545 14750 15568 16692  5668  5830  6015  6019  6084  6169  6870 #> [10633]  7047  7068  8734  9816 10899 12358 12747 13031 13825 13888 13977 14325 #> [10645] 14677 15243 15375  5958  5972  6020  6250  7000  7158  7424  7827  9864 #> [10657] 10046 10388 10711 11125 11358 12803 12954 13032 13330 13889 14089 14180 #> [10669] 14777 14875 15180 15376 15415 15740 16693  5697  5936  5948  6701  6819 #> [10681]  7123  7531  7672  7858  8015  8102  8719  9226  9272  9865 10240 10265 #> [10693] 10294 10832 11778 12071 12680 12923 13062 14354 14479 15244 15476  5959 #> [10705]  5988  6085  6417  6550  6702  6793  7425  7468  8016  8553  9006 10967 #> [10717] 11174 11398 11612 11683 11848 12133 12495 12894 13247 13522 14123 14442 #> [10729] 14778 15035 15131 15181 15343 15416 16028  5709  5856  6190  7553  7769 #> [10741]  7915  8720  8826  9410 10987 12924 13194 14398 15132 15913 16481 16611 #> [10753]  5820  5882  6040  6336  6447  6551  6717  7048  7231  7338  7916  8288 #> [10765]  8321  8964  9363 10471 10524 10652 11016 11061 11504 11849 12980 13033 #> [10777] 13550 14606 15158 16310 16385 16518  5883  6535  6740  7049  7091  8360 #> [10789]  9074 10362 10472 11126 11201 11267 11613 12516 12630 12655 12713 13248 #> [10801] 13454 13826 13856 14002 14355 14546 15954 16090 16545 16694  5989  6005 #> [10813]  6181  6486  6830  6857  7469  7880  8339  9305  9387  9794  9817 10473 #> [10825] 10501 11036 11268 11455 11850 14027 14714 14810 16204 16246 16695  5821 #> [10837]  6048  6292  6563  6687  6820  6932  7124  7263  7504  7652  7838  8217 #> [10849]  8867 10968 11037 11151 11456 12400 12546 13728 13827 14003 14090 14326 #> [10861] 14399 14547 15072 15477 15741 16772  6673  6897  7532  8120  8289  9048 #> [10873]  9747 11062 11243 13121 13758 14377 16482  6536  7405  7720  7881  8735 #> [10885]  9095  9923 10389 11359 11684 11905 12042 12159 12248 12280 13195 13331 #> [10897] 13388 13482 13523 14217 14751 15642 15711 16029  5916  6154  6586  6609 #> [10909]  6831  7704  8627 10138 10761 10833 11755 12517 12681 13389 16062 16546 #> [10921]  5949  6232  6703  7393  7426  7505  7533  7629  8017  8084  8486  8554 #> [10933]  8736  9175 11152 11431 12596 14055 15507 15536 15782 16483  5812  5841 #> [10945]  5866  5973  6063  6191  6219  6402  7001  7277  7721  7932  8031  8267 #> [10957]  8555 10876 11063 11337 11535 11851 12631 13524 13890 14056 14378  5867 #> [10969]  6064  6501  6774  6858  7323  8218  8441  8468  8511  8868  8916  8990 #> [10981]  9049  9339 10023 10592 11064 12359 12597 12748 13483 15537 16205 16658 #> [10993]  5799  6155  6251  6564  6962  7610  7630  7673  7722  8268  8571  8587 #> [11005]  9176  9519  9795 10653 10920 11127 13357 15602 16519 16773  5937  6086 #> [11017]  6321  6794  7159  8487  8588  8674  8843  8883  9177  9411  9429  9924 #> [11029]  9975 10118 10525 11128 11175 11536 11662 12281 12598 13610 13635 15377 #> [11041] 15478 15914 16311  5906  6156  6659  7140  7949  8085  8361  8529  8755 #> [11053]  9581  9702  9767  9925 10241 11129 11313 11338 11399 12190 12749 13358 #> [11065] 14413 14638 15101 16113 16449  6041  6049  6065  6933  6963  7245  7470 #> [11077]  8103  8142  9364  9412  9926 10318 10453 10850 11563 13455 14285 14715 #> [11089] 16114 16612  5876  5938  6182  6393  6431  6565  6640  6704  6871  7032 #> [11101]  8243  8607  9430  9537  9559  9582 10921 11292 11588 11935 12599 13332 #> [11113] 14091 14379 15742 16247  5857  5907  5974  6264  6276  6587  6741  7141 #> [11125]  8796  9340  9365 10101 10593 11065 11710 11852 11879 12309 13759 14356 #> [11137] 14503 14607 14752 15102 15182 15955 16520 16740  6126  6502  6795  7160 #> [11149]  7738  8219  8844  8917  9324  9600 10071 10712 12072 14414 15417 16312 #> [11161] 16547  6050  6157  6384  6674  7110  7427  8143  8572  9273  9728 10207 #> [11173] 11537 12804 13662 13760 14181 14811 14946 15712 15842 16344  6277  6367 #> [11185]  6898  7554  7575  8488  9154  9253  9479  9646  9703  9796 10072 10160 #> [11197] 10654 12043 12469 14842  5975  6368  6859  7290  7361  7859  7975  8062 #> [11209]  8608  8965  9520  9560 10181 10295 10988 11038 11092 11814 12073 13091 #> [11221]  6066  6624  6718  6806  7264  7312  7534  7933  8845  9115  9306  9836 #> [11233] 10336 10780 10989 11066 11457 12226 12249 12310 14150 14480 14580 15159 #> [11245] 15915 16659  5960  6278  6610  6742  7448  7631  7770  7950  8104  8269 #> [11257]  8721  8756  9050  9274  9561 10454 10804 11293 11756 12518 12750 13196 #> [11269] 13484 14639 15213 15843 16063 16450  6881  6985  7535  7632  8530  8653 #> [11281]  8722  8776  8797 10139 10161 11039 11377 11853 12925 14608 14716 14947 #> [11293] 15603 16030 16206  6369  6625  6660  6860  7019  7069  7278  7674  7796 #> [11305]  8144  8162  8309  9366  9480  9663  9866 10024 10296 10877 11815 12227 #> [11317] 13002 13390 13456 13611 14609 14779 15183 16279  6322  8654  9325 10337 #> [11329] 10502 10942 11880 13391 14640 14780 15160 15713 15956  6158  6403  6552 #> [11341]  7020  7555  7723  7739  7917  9201  9254  9367  9447 10119 10503 12101 #> [11353] 12228 12333 12632 13003 13063 13275 14781 15036 15998 16064 16091 16345 #> [11365]  6087  6233  6304  7021  7125  7246  7951  7988  8196 10455 10622 10655 #> [11377] 11269 12102 12433 12573 12805 13612 13978 14057 14909 14980 15037 15277 #> [11389] 16696  6127  6252  6337  6462  6469  6566  6918  6934  7362  7449  7576 #> [11401]  7771  8045  8063  8340  8469  8675  8693  8937  9368 10025 10266 10943 #> [11413] 11202 11432 11936 14151 14286 14327 15038 15344 15508 16170 16346  6567 #> [11425]  6743  6762  7161  7232  7313  7675  7882  8322  8470  9155  9275  9290 #> [11437]  9729 10390 11223 11458 11937 12282 12311 12862 14247 14678 15214 15378 #> [11449] 15445 16313 16386  6170  6796  7126  7142  7506  7594  7989  8512  8609 #> [11461] 10073 10162 10944 12016 12981 13551 13729 13797 13828 14182 14504 15073 #> [11473] 15103 15604 16387 16697  6293  7363  7676  7689  7705  8064  8220  8380 #> [11485]  8966  9627 10047 10120 10338 10851 11153 11339 11685 11881 11957 12160 #> [11497] 12360 13122 13249 13427 13798 14287 14415 14753 16207 16388 16451  6205 #> [11509]  6404  6432  6588  6731  6899  6919  7050  7339  7577  7633  7883  8290 #> [11521]  8573  8694  8737  9431  9538 10026 10319 11378 12191 12361 12600 15605 #> [11533] 15999 16521  6067  6234  6797  7488  7611  7828  8531  9134  9837 10267 #> [11545] 11538 12401 12519 13857 14948 15643 16000 16347  6568  6661  6832  7536 #> [11557]  7595  7990  9307  9748  9838 10679 11154 11176 11882 12283 13891 14028 #> [11569] 14248 14328 15743 15916 16613 16660  6103  6520  6821  6861  7364  7690 #> [11581]  8918  9601  9839 10414 10561 11177 11539 12134 12402 14152 15133 15345 #> [11593] 16208  6144  6206  6433  6675  6833  7051  7756  7839  9255  9326  9341 #> [11605]  9539 10102 12806 12836 13663 13799  6434  6470  6503  6834  7033  7724 #> [11617]  8310  8676  9023  9448  9501  9867  9927  9997 11854 12192 12520 12547 #> [11629] 13858 14610 15278 16614  6104  6145  6192  6207  7052  7127  7291  7556 #> [11641]  8323  8695  8798 10504 12044 12250 12751 13092 13156 13359 14949 15134 #> [11653] 15215 15245 15917 16522  6537  6569  6775  6835  7340  7557  7634  7677 #> [11665]  7772  8324 10900 11067 11663 11906 12135 12434 13034 13525 13730 16417 #> [11677] 16548  6235  6435  6504  6511  7292  7740  8404  9024  9768 10594 10805 #> [11689] 10990 11360 11433 11883 12103 12379 12714 12863 13613 15135 15844  6128 #> [11701]  6599  7471  7558  8422  8442  9051  9583  9749  9868 11294 11379 11505 #> [11713] 11686 11757 11816 12104 12136 13064 13360 13392 13927 14029 14058 16418 #> [11725]  6236  6641  6900  7002  7706  8018  8197  8311  8325  8610  9308  9628 #> [11737]  9647 10242 10339 10415 11400 12105 12926 14288 16615  6220  6265  6946 #> [11749]  7180  7341  7507  7884  8163  8362  8423  8589 10048 10991 11040 11361 #> [11761] 11380 12521 12548 13035 13705 14183 14876 15418 15569 16031 16419  6183 #> [11773]  6221  6253  6570  6862  7181  7653  8019  8270  8471  9202  9769 10526 #> [11785] 11434 12106 13859 14218 14505 15014 15074 16171 16389  6308  6323  6352 #> [11797]  6662  6798  6964  7279  7342  7773  7814  8105  8424  8723  8919  9075 #> [11809]  9584  9678  9840 10268 10391 10852 11884 11907 12549 12682 12837 12955 #> [11821] 15104  6385  6600  6872  7489  7991  8106  8405  8757  9327  9679  9750 #> [11833] 10527 10834 11155 11178 11244 12284 13197 13393 15184 15419 16452  6571 #> [11845]  6719  6763  7691  7860  7952  8121  8244  8590  9869 10392 10474 11093 #> [11857] 11314 11711 12956 12982 13093 13428 13457 15606 16523 16774  6720  7092 #> [11869]  7143  7490  7508  8198  8472  9432  9521  9751 10416 10713 11938 12107 #> [11881] 12470 12601 12683 12783 13036 14092 14782 14812 14843 14981 15216 15420 #> [11893] 15446 16390 16741  6324  6553  7144  7280  8291  8655  9522  9648 10969 #> [11905] 10992 11094 11712 12362 12784 12957 13333 13394 13942 14093 14289 14611 #> [11917] 15744 15957  6732  7281  7365  7596  7797  7992  8185  8221  8363  8884 #> [11929]  8967  9369  9464 10475 11156 12285 12380 13395 13581 13928 14329 15538 #> [11941] 16616 16698  6418  6471  6882  6965  7798  7918  7953  8164  8628  8799 #> [11953]  8869  9025  9052  9256  9540  9870 10121 10340 10922 10993 11687 11908 #> [11965] 12137 12471 12633 13526 14330 14357 14380 15346 15607 15879  6626  6986 #> [11977]  7428  7450  7491  8513  9388 10320 10476 11779 12193 12334 13334 13892 #> [11989] 14381 15305 15745 16209  6394  6676  6688  6836  6987  7199  7578  7954 #> [12001]  8020  8724  8968 10182 10269 10714 10781 11634 12074 12194 12286 12522 #> [12013] 12574 12752 13004 13582 13860 13893 15880 16248  6370  6512  6705  6744 #> [12025]  7111  7247  7406  8165  8222  8938  9389  9649  9770 11817 12045 12195 #> [12037] 12312 12550 12864 13228 14124 14290 14679 14754 15136 15644  6386  6463 #> [12049]  7407  7635  7774  8532  9680  9704 10456 11315 11855 12472 12838 12927 #> [12061] 13065 13664 13706 14877 15347 15918  6677  6689  6863  8312  8656  8696 #> [12073]  9156  9342  9390  9465 10163 11017 11688 11856 12634 12715 12865 13861 #> [12085] 14813 16032 16314  7248  8425  8574  8697  8885  9076  9096  9391  9928 #> [12097] 10341 10680 11401 12017 12575 12656 12716 12753  6521  6572  7128  7162 #> [12109]  8086  8969  9077  9157  9585 10656 11316 11939 13614 13665 13800 14641 #> [12121] 15039  7163  7249  7472  7509  7725  7757  8145  8533  9523 10363 10393 #> [12133] 10505 11179 12717 12754 13123 13666 14094 14291 15306 15379 15645 15783 #> [12145] 16172 16549  6371  6627  6642  7375  7758  7775  7885  8364  9541  9998 #> [12157] 10208 10342 10394 10878 12229 14004 15185 15539 16249 16391  6706  6776 #> [12169]  6883  6920  7233  7579  9026  9771 10122 10209 10417 10595 10782 10945 #> [12181] 11095 11614 12018 13037 13276 14249 15279 15307 15746 16280 16617 16742 #> [12193]  6807  7093  8032  8341  8381  8886  9007  9602  9797 10835 15646 15714 #> [12205] 16420 16550  6436  6643  7473  7597  7678  7955  9227  9309  9562  9629 #> [12217] 10970 11506 11736 11857 11909 11958 13527 13552 14250 14581 14642 14783 #> [12229] 15509 16453  7182  7429  7636  7956  8514  8870  9449  9999 10596 10853 #> [12241] 11096 11245 11340 11459 11780 11989 12403 12718 12807 12839 12958 13335 #> [12253] 13667 13707 14153 14331 14612 15421 16775  6472  6487  6505  6538  6589 #> [12265]  6808  7003  7070  7282  7559  8657  8800  9502  9542  9563 10000 10183 #> [12277] 11362 11564 11589 12196 14443 15280 15308 15380  6448  6663  6721  7799 #> [12289]  8698  8758  8887  9976 10623 10806 11635 12404 13929 15447 15919  7053 #> [12301]  7343  7510  8021  8443  8611  8939 10562 13124 13396 15540 16065  6611 #> [12313]  6644  7034  8473  8827 11270 12046 12928 13005 16092 16484 16776  6678 #> [12325]  6690  6966  7211  7612  8122  8515  8534  8759  8828  9450  9705 10001 #> [12337] 10123 10994 14030 14184 14643 15105 15137 15510 15920 16115  6664  6679 #> [12349]  7324  7408  7861  7957  8223  9158  9898  9929 10854 11097 11483 12019 #> [12361] 12785 14755 15570 15715 16093 16699  6522  6845  7022  7492  7829  8107 #> [12373]  8166  8426  8516  8535  8991  9097  9681 10164 10184 10946 11018 11041 #> [12385] 11713 13528 13668 14910 15784 16392 16589 16700  7023  7054  7862  8292 #> [12397]  8940  9098  9930 10002 10270 10321 10783 10855 11271 11363 11590 12020 #> [12409] 13277 13429 13458 14481 14756 14814 15075 15309 15747 16315 16618  6573 #> [12421]  6722  6947  7741  7759  7903  7976  8677  8760  9451 10103 10271 10597 #> [12433] 10681 11098 11180 12684 12866 13303 14444 15676 16551  6723  6822  6901 #> [12445]  7094  7112  7993  8224  8382  8629  9027  9452  9664 10272 10657 13066 #> [12457] 13708 13862 14251 14582 14950 15541 16348 16552  6628  6799  7145  7234 #> [12469]  7598  7776  7840  8365  8444  8801  9257  9453 10807 11130 11341 12021 #> [12481] 12335 12496 12719 13731 14059 14506 15106 15161 15217 15647 16138  7200 #> [12493]  7537  8046  8489  8612  8738  8802  9099  9276 10947 12336 13278 13943 #> [12505] 14060 14844 15845  6823  7113  7146  7474  7726  7800  7841  8186  8445 #> [12517]  8474  8490  8591  9392  9818  9871 10598 10808 11615 11959 12657 13615 #> [12529] 13801 14185 14845 15812 16454  6733  7129  7265  7366  7538  7560  7654 #> [12541]  7801  8777  8902  9630  9682 10027 10243 10563 11940 12230 12251 12405 #> [12553] 13930 14358 14416 14982  6645  6707  7004  7475  7679  7815  8342  8446 #> [12565]  9752  9841 10624 11885 12231 12473 12576 12808 13709 13802 13979 14417 #> [12577] 14983 16250 16553  7451  7994  8123  8491  9078  9203  9291  9524  9872 #> [12589] 10185 10364 10457 10836 11402 11714 12755 13067 13829 13980 14482 15422 #> [12601] 15571 15813 16661  6873  7005  7071  7376  7561  7958  8492  9116  9603 #> [12613] 10784 12197 12895 13094 14186 15748 16485 16524  7072  7130  7183  7293 #> [12625]  7919  8447  8536  8803  9135  9178  9228  9683 10658 10856 11224 11295 #> [12637] 11381 12577 14031 14125 14292 14784 16316 16455  6809  7164  9650 10477 #> [12649] 10528 10682 11317 11591 12685 13229 14061 14717 14815 16210 16317 16525 #> [12661]  6745  6810  7235  7250  7655  7802  8047  8225  8903  9079  9525  9931 #> [12673] 10785 11664 11990 12551 13279 13761 15040 15138 15186 15716 15749 16590 #> [12685] 16777  7131  7165  7995  8048  8920  8941  9053  9080  9343  9543  9772 #> [12697]  9954 10923 14062 15381 15448  6811  6967  7073  7539  8167  8271  8406 #> [12709]  8992  9481  9873  9932 10395 10683 10715 11099 11318 11484 12022 12075 #> [12721] 12474 13250 15608 16701  7095  7184  7294  7314  9054  9665  9773  9874 #> [12733] 10365 10478 10857 11181 11689 12108 12161 12635 14418 15107 15348 15648 #> [12745] 16619  6921  7185  7325  7344  7777  8199  8366  8517  8592  9666  9933 #> [12757] 10322 10564 11042 11100 11182 11296 11435 11886 12435 12497 12929 13157 #> [12769] 13863 13931  6935  7035  7096  7476  7637  7707  7816  7920  8049  8427 #> [12781]  8993  9667  9684  9899 10684 11131 12930 14293 14548 15846 16349  7097 #> [12793]  7394  7580  7778  7977  8407  8829  9955 10458 13553 13864 14878 15041 #> [12805] 15139 16251  7377  7842  7886  8556  9393 11565 12523 13430 14984 15042 #> [12817] 15076 15423 15881  7147  7201  7708  8846  9055  9204  9544 10244 11225 #> [12829] 11507 11818 12756 12867 13198 13669 14154 14294 14785 14816 14951 15750 #> [12841]  7166  7345  7395  7511  7638  7779  8367  9179  9310  9631 10746 11101 #> [12853] 11819 11858 12381 12720 12959 13981 14483 14718 14952 15140  6922  7036 #> [12865]  7212  7409  7863  8272  8383  8699  8739  9258  9503 10565 10716 10971 #> [12877] 11382 11403 11460 12109 12809 13304 13361 13431 15349 15479 15882 16318 #> [12889]  6936  7295  7430  7452  7639  7817  8408  8557  8778  9842 10028 10459 #> [12901] 12138 12382 12686 13251 14846  7186  8630  8678  8994  9100  9292  9328 #> [12913]  9651 10437 12198 13982 14063 14252 14359 14445 14549 14719 14879 15382 #> [12925] 15958 16116  7581  7680  7934  7996  8050  8108  8428  8575  8847 10901 #> [12937] 11102 11636 11715 12436 13230 13583 13732 14095 14253 14382 15077 15310 #> [12949] 15511 16066  7283  7493  7540  7613  7656  8700  9205  9433  9900 10003 #> [12961] 10418 10858 11319 11960 12199 12337 12960 13459 13762 14295 14484 14786 #> [12973] 15281 15921  7037  7818  8200  8631  9206  9466  9564 10273 10366 10566 #> [12985] 10948 12687 13865 15141 15512 15649 16702  8679  8970  9008  9259  9706 #> [12997] 10186 10396 10567 11226 11508 11566 11991 12162 12200 12475 12786 12840 #> [13009] 12868 13125 14880 15015 15108 15650 16778  7006  7202  7326  7378  8632 #> [13021]  8871 10245 10529 11132 11183 11616 11910 13670 14219 14583 14720 15959 #> [13033]  7640  7681  8187  8701  9934 10187 10568 10762 11019 11203 11617 12338 #> [13045] 13983 14005 14220 14254 14485 15480 15847  6988  7494  8168  8409  9370 #> [13057]  9394 10717 10747 12602 12841 12983 13432 14064 14126 14187 14985 15542 #> [13069]  8537  8761  9526 11297 11859 12869 13460 13529 14221 16067  7284  7396 #> [13081]  7692  9081  9277  9819  9901 11690 11820 11992 13252 14065 14680 15282 #> [13093] 15350  7038  7114  7431  7614  8033  8065  8384  9685 10479 10859 11157 #> [13105] 11204 11364 11461 12201 12524 12636 13636  7213  7251  7512  7959  8613 #> [13117]  8848  8971  9009  9686 10530 11320 11911 11941 13894 15481 15651  7074 #> [13129]  7513  7830  7935  8538  8804  9056  9652 10074 10480 10685 10809 11592 #> [13141] 11691 12578 13006 14446  8448  8904 10686 11272 11404 11665 12406 14447 #> [13153] 14817 14911 15513 16033  7167  7453  7541  7582  7864  8326  8368  8725 #> [13165]  8921  9545  9843 10323 12252 12757 12931 12984 13126 14155 14613 14721 #> [13177] 14847 15043 15246 16211  7397  8558  9229  9546  9844 10246 11068 11158 #> [13189] 11246 12476 14448 14614 15078 15543 16393  7168  7410  8034  8273  8658 #> [13201]  9604 10075 11961 12842 13007 13984 14722 14848 15424 16319 16394 16486 #> [13213]  8429  8559  9278  9668 11436 11509 11637 11781 11821 13199 14615 15544 #> [13225] 15883 16620  8066  8124  8430  8905  9632  9820 10049 10104 10210 11020 #> [13237] 11912 13158 14419 14723 15482 16350 16421  7657  7682  7904  8431  8702 #> [13249]  8740  9845 11405 11782 12202 12313 12363 12985 13433 13710 14724 14757 #> [13261] 15218 15814  7327  7432  8385  8972  9101  9344  9846  9875 10165 12579 #> [13273] 14449 15044 15109 16173 16320 16703  7367  7693  8343  9117 11783 12253 #> [13285] 12498 12721 13280 13305 13866 14188 14296 14584 14818 15609 16281  7514 #> [13297]  7658  7683  8125  8201  8369  8922  9454 10397 10810 10879 10902 10995 #> [13309] 11069 11133 11784 12986 13763 14189 14881 15449 15677 16456  7727  7887 #> [13321]  7921  8274  8849 10166 10211 11383 12314 12339 12552 12688 13671 14486 #> [13333] 14787 16621 16662  7296  7346  7368  7888  8830  9230  9395  9847  9977 #> [13345] 10718 10786 11103 11913 12287 12315 13095 13434 13895 14096 14550 14882 #> [13357] 15311 15678 16034 16622  7328  7411  7515  8087  8126  8680  9329  9902 #> [13369] 10599 10860 10972 10996 11043 11134 11962 12987 13068 14127 14222 14420 #> [13381] 15110 15187 15351 16139  7843  7960  8614  9082  9180 10880 12139 12232 #> [13393] 12407 12603 13867 14255 14297 14421 16174  7694  7922  7961  7997  9010 #> [13405]  9345  9482  9848 10274 10398 10748 10787 11342 12110 12787 13069 13530 #> [13417] 14383 14644 14788 14883 14912 15679 16282 16591  7803  7936  8313  8344 #> [13429]  8973  9083  9118  9207  9413 10297 10343 10367 10749 10997 11567 11963 #> [13441] 12288 12658 15514 15815 16068 16321 16704  7412  7684  7709  7742  7937 #> [13453]  9774 10625 11021 11321 11406 11510 11964 12140 12163 12525 12604 12637 #> [13465] 12689 13127 14128 14332 14681 15960  7804  7938  8386  8518  8659  9039 #> [13477]  9136  9775 10124 10344 10973 12408 12605 12758 13200 13281 14953 16743 #> [13489]  7495  7962  8275  8493  8633  9231  9849  9876  9978 10481 10924 12499 #> [13501] 14006 14032 14450 14758 15188 15751 16322  7477  7905  8088  8245  8449 #> [13513]  8681  9119  9232  9605  9877 10105 10811 11322 13485 14190 14422 14451 #> [13525] 15652 15785 16395  7695  8022  8067  8089  8576  9040  9137  9434 10188 #> [13537] 10482 11593 12023 14423 15610 16069  7599  7743  7963  8226  8450  9084 #> [13549]  9414  9483 10029 10247 10399 11184 11227 11462 14129 15189 16396  7805 #> [13561]  8872  9346  9527 11384 11993 12477 13038 14384 14452 14585  7516  8762 #> [13573]  9528  9669  9798 10076 10167 10788 11485 12364 12437 12788 14066 14097 #> [13585] 15848  8387  9586  9903  9935 10837 11540 11716 12365 13282 13362 13944 #> [13597] 14156 15352 15515  8068  8451  8615  9776 10298 11273 12553 12659 13397 #> [13609] 13435 13554 13584 13711 14424 14551 15142 15717 15884 16351  7641  8109 #> [13621]  8327  8388  8703  8831  9233 10419 10812 10949 12932 13159 13398 13436 #> [13633] 15383 15752  7642  7831  7844  8293  9484  9606  9777 10189 10420 10569 #> [13645] 10600 10998 11070 11298 11594 11965 13555 13585 14586 15353  7728  7906 #> [13657]  8146  8850  9260  9396 10140 10248 10813 11071 11717 12233 12500 12870 #> [13669] 13231 15786 15885 16140  7806  8069  8090  8246  8389  9057  9415  9633 #> [13681]  9878 10368 11692 13160 13232 13363 13764 13830 14954 15572  8051  8634 #> [13693]  8779  9879  9904 10050 11274 11511 11887 11966 12111 13128 13336 13486 #> [13705] 13868 14507 14645 15312 15787 16070 16141 16592  7889  8127  8169  8247 #> [13717]  8682  9041  9416 11104 11638 11914 12340 12660 14007 15573 16001 16117 #> [13729]  8052  8091  8370  8683  8780  9279 10925 12203 12789 12933 13437 14130 #> [13741] 14223 14884 15653  7780  8035  8070  8092  8741  8923  9085  9120  9181 #> [13753]  9565 10421 11595 11639 12289 13201 14333 14955 15283 15313 16779  8248 #> [13765]  8995  9293 10141 11758 11888 12164 12501 12759 13399 13487 13831 15354 #> [13777] 16744  8390  8494  9397  9417  9979 10763 11759 12290 12341 13039 13531 #> [13789] 15611 15961 16487  8036  8345  8539  8832  9730  9821 10030 10950 13008 #> [13801] 14360 15162 15849 16094 16554  7939  8023  8128  8432  8704  9687 10400 #> [13813] 10974 10999 11994 13488 15045 15788 16663  7964  8495 10212 10345 11228 #> [13825] 12024 12316 12478 14334 14956 16002  7978  8276  8635  9011  9280  9347 #> [13837] 10125 10275 10324 11185 11247 12961 13129 14335 14646 15190 15654  7998 #> [13849]  8147  8726  9455 10126 10142 10213 11512 13337 14131 14913 16526  7845 #> [13861]  8346  8452  8560  8593  8781  8805  8873  9731  9936 10601 10764 11072 #> [13873] 12342 13202 14033 15450 15483 15655 16035 16283  8277  8540  8660  8763 #> [13885]  9182  9294  9778  9880 10051 10903 11205 11513 12165 12554 13070 13869 #> [13897] 14067 14157 14256 14508 14819 16036 16623  8024  8071  9234  9261  9670 #> [13909]  9707 10077 10168 11693 11860 11889 12638 12843 12871 13637 13945 14132 #> [13921] 14158 15718  7890  8129  8636  8833  8942  9208  9348  9708 10438 12343 #> [13933] 12502 12661 12810 12962 13283 13532 14385 14914 15816 15962 16118 16555 #> [13945] 16624  8328  8410  9235  9281  9671  9709 11568 11694 12141 12934 13870 #> [13957] 14298 14552 14682 15079 16119 16252  8072  8496  9102  9779  9822 10127 #> [13969] 10169 10249 10299 10750 10926 11785 12366 12438 12639 13040 13130 13586 #> [13981] 13672 13896 13946 14957  8594  9504  9607 10881 11437 11640 12142 13096 #> [13993] 14257 14725 15680 15753  8093  8249  8391  8519  8541  9159  9688 10422 #> [14005] 10506 10602 10659 11022 11229 12896 13203 14133 14425 14487  7999  8053 #> [14017]  8497  8542  8637  8974  9058  9086  9485  9799 10300 10570 10904 11718 #> [14029] 12722 13097 13161 14647 16457  8110  8543  9087  9753  9850 10052 10078 #> [14041] 10128 10276 10325 10423 10660 10765 10814 11323 11407 11569 11596 11695 #> [14053] 13638 13803 14299 15754 16120 16488 16705  8742  8906  9183  9608  9754 #> [14065] 10571 10861 12580 14453 16253 16397  8347  9160  9505  9780  9851 10129 #> [14077] 10170 10483 10626 11073 11890 14958 15886 15963 16352 16625 16664  9088 #> [14089]  9209  9295  9634  9881 10106 10277 10719 10789 11514 11967 12143 12383 #> [14101] 12479 13897 14361 14986 15080 15314 15384 15574 15755 16254 16556  8943 #> [14113]  9349  9980 10661 10687 12503 12640 13009 15163 15756  8170  9609  9755 #> [14125]  9852 11000 11541 11737 11861 12166 12581 14068 15191 15315 16095  8148 #> [14137]  8433  8705 10143 10278 10439 11105 11515 11915 12047 12439 12641 12811 #> [14149] 13162 13338 13489 13733 14300 14849 14959 15219 15385 15516 15545 16121 #> [14161]  9012  9161  9689  9781 10031 10720 11666 11862 12254 13163 14820 15284 #> [14173] 15850 16175  8782  9311  9371 10369 10603 11916 12255 14034 14400 15612 #> [14185] 16458 16527 16665  8595  8727  9028  9089 10766 11343 11570 12204 12723 #> [14197] 13041 14509  8227  8278  8661  8806  8851  9029 10460 10507 10627 11438 #> [14209] 11486 12812 13871 14759 14915 15355 15386 15681 16353 16422 16626  8314 #> [14221]  8392  8520  8544  9732 10751 11275 12555 12760 13765 13947 14789  8944 #> [14233]  9090  9236  9296  9853  9981 10531 10721 11044 11667 12025 12963 14069 #> [14245] 14488 14960 15081 15220 16122 16255 16398  8498  8521  8638  9059  9210 #> [14257]  9398  9882 10301 10532 10628 11385 12844 14224 14553 14821 15656 15964 #> [14269]  8706  8783  9312  9883 10346 10508 11186 11344 11439 11516 11822 12790 #> [14281] 13131 13616 14191 14554 14987 15613  8453  9138  9237  9456  9506 10533 #> [14293] 11542 12234 12440 12642 12964 14362 15082 15575 15757 15922 16354  8499 #> [14305]  8784  8874 10326 11324 11571 12256 13898 14454 14555 14587 14648 14988 #> [14317] 15817 16323  9121  9800  9905 11668 11917 12076 14035 15614 15887 16071 #> [14329] 16666 16706  8475  8616  8764  8834  8945  9884  9937 10688 11187 12077 #> [14341] 12724 12872 12965 14588 16593  8888  9139  9184  9982 11074 11597 11918 #> [14353] 12761 13010 13673 13804 14556 15387 15789 16780  8807  8924  9030  9372 #> [14365]  9710 10214 10424 10689 11106 11365 11719 11863 12048 12235 12317 13253 #> [14377] 15851 16212  8684  9140  9211  9418  9690 10401 11345 11572 12441 13011 #> [14389] 13364 13461 13832 16176 16284  9467  9733  9782 10144 10838 11075 11206 #> [14401] 11641 12026 12725 14649 14683 15546 16256  8639  8743  9031 10130 10370 #> [14413] 10662 12480 12690 13766 13872 13948 14225 14589 14885 15083 15790 16355 #> [14425] 16489  9635  9906 10032 10440 10461 10484 10722 10790 11076 11463 11618 #> [14437] 11720 12606 13284 14192 14226 14510 15888 15923 16324  8561 10327 10815 #> [14449] 10905 11366 11517 12291 12409 13098 13674 13873 13899 14301 14511 15285 #> [14461] 15425 15451 15818 16667  8617  8640  8707  8889  9091  9350 10347 10485 #> [14473] 10534 10927 11001 11543 12205 13805 15221 15452  8744  8765  8808  9141 #> [14485]  9185  9238  9435  9711  9938 10131 10767 12410 12504 13071 13490 13806 #> [14497] 14098 14227 14822 14886 15547 15615 16490 16594  8618  9060  9313  9854 #> [14509]  9956 10190 10441 10723 12582 12813 13204 13365 13587 14070 14302 14363 #> [14521] 14426  8890  9468  9507  9823 10442 10690 12144 12318 12481 13949 14193 #> [14533] 14455 16142 16177 16423 16707  8708  8946  9162  9957  9983 10302 10951 #> [14545] 11487 11619 12236 12556 12762 13533 13734 14099 15222 15576 15682 16257 #> [14557]  8662 10079 10279 10509 10724 11207 12526 12814 13099 13366 13675 14456 #> [14569] 14823  8766  8809  9653 10572 11299 11544 11760 12845 13306 14401 15577 #> [14581] 15791 16037 16258 16459  8685  9801 10535 10629 11002 12167 12344 12791 #> [14593] 13100 14824 14887 15192 16038  8975 10752 11188 11440 12643 12662 13438 #> [14605] 14760 15852  8767  8891  9547 10080 10510 10604 10725 11023 11942 12319 #> [14617] 14650 15223 15388  9330  9508  9636  9712 10107 10215 11135 12237 12527 #> [14629] 12726 12815 13900 14036 14961 15143 15853 15924 16708  8785  9672 10402 #> [14641] 11003 11024 11107 12345 13132 13491 13985 14159 15046 16072 16745  9103 #> [14653]  9314  9331  9691  9939 10081 10171 10303 10753 10839 11136 11159 11248 #> [14665] 11346 11919 12384 12607 13012 14726 14761 15047 15164 16039 16356 10816 #> [14677] 11004 11300 11786 12238 12988 13013 13439 13492 13676 13735 14037 14228 #> [14689] 14651 15819 16399 16491 16668  8852  9509  9713 10145 11160 11598 11761 #> [14701] 14038 14303  9637 10082 10862 11325 11642 12049 12557 13712 13950 14888 #> [14713] 14916 15016 16096 16259 10033 10691 11408 12411 12608 13986 14727 14825 #> [14725] 15792 16143 16260 16325 16357 16400 16627  8907  9163  9692 10250 10462 #> [14737] 11518 11995 12558 13072 14336 15356 15616 16628 16669 16709  9469 10053 #> [14749] 10348 11347 11669 11943 13042 14917 15144 15193 15758  9239  9436 10443 #> [14761] 10952 11441 11823 12257 12385 12528 12816 13493 13807 16178 16710  9486 #> [14773]  9907 10817 10953 13307 13494 13767 16213  9470  9529 10172 10216 11670 #> [14785] 11787 11864 13495 13951 14071 14160 14616 14652 16557 16595 16629  9587 #> [14797] 10054 10663 10726 11208 11865 12145 12559 12763 13043 13233 13308 13768 #> [14809] 14790 15084 16179  9419  9566  9638  9693 12367 13044 13901 16214 16424 #> [14821]  9315  9567  9734 10004 10328 12258 13285 14512 15111 15925 15965 16180 #> [14833] 16358 16746  9122  9186  9316  9332  9548  9610 10425 11891 12112 12560 #> [14845] 13014 13534 16261 16425 16670  9061  9317  9471  9940 10630 10791 11209 #> [14857] 13440 14100 14728 14791 15683  9123  9262  9318  9824 10005 10034 11161 #> [14869] 11409 11545 11696 12027 12482 14008 14402 15926 16097 16215 16426  9212 #> [14881]  9373  9654 10511 10754 10818 11005 11249 11276 11573 12442 12897 13462 #> [14893] 15966 16262  9908 10035 10349 10512 10605 10792 11574 11762 13309 13339 #> [14905] 14229 14889 15578 15684 15820  9263  9825  9958 10055 10173 10486 10768 #> [14917] 10906 11025 11250 12078 12206 12505 12663 12873 13556 14101 14457 14513 #> [14929] 15657 15719 16003 16359 16460 16492  9142  9374 10217 11968 12691 12898 #> [14941] 13101 13205 13987 14826 15389 15484 15927 16004 16040 16711 11464 12874 #> [14953] 13015 13073 13133 13496 15145 16263 16427 16630  9375  9855 10006 11077 #> [14965] 11326 11788 13134 13639 13833 14072 14557 14989 15017  9240  9420  9530 #> [14977]  9588  9826 10218 12609 13135 13874 14427 14762 14827 15112 15821  9333 #> [14989]  9856 10840 11162 13016 13400 14258 14558 14962 15889  9756  9984 10463 #> [15001] 11920 13102 13234 14828 15822 15890  9376  9611  9985 10251 10487 11277 #> [15013] 11348 11599 12207 13310 13588 14617 15018 15194 15485 15579  9487  9549 #> [15025] 10007 10146 10219 10280 10692 11386 11824 12050 12113 12561 12610 12664 #> [15037] 12727 12764 12899 13254 13497 13557 14230 14729 15357  9589  9714 10513 #> [15049] 10769 11721 12583 12817 13103 13617 13808 14009 14618 14684 15854 16181 #> [15061] 16781  9399  9457  9488  9531  9715 10083 10928 11301 11387 11575 12208 #> [15073] 12562 12935 13589 14073 14990 16216  9986 11137 11163 11189 11465 12259 #> [15085] 12529 13463 13535 13902 14730 15358  9400 10056 10108 10191 10304 10536 #> [15097] 10693 11026 11969 12051 12146 12168 12875 13464 13558 14304 14559 14685 #> [15109] 15247 15548 12412 13206 13401 13465 15146 15580  9959 10573 11410 11576 #> [15121] 11825 11996 12052 12563 15581 16182  9655 11210 11278 11789 14560 15224 #> [15133] 15517  9783  9909 10574 11442 11643 11671 11697 12386 12443 12530 12611 #> [15145] 12818 14074 15658 15720 16123 16631 10008 10192 11826 12728 13677 15165 #> [15157] 15195 16285 16461  9857 10954 11279 11827 11944 12260 13286 13590 14075 #> [15169] 15248  9510  9612  9656 11006 11078 11349 11367 11672 12169 13640 13875 #> [15181] 13952 10193 10488 10907 11164 12079 13536 13769 14010 14386 15617  9858 #> [15193] 10147 10444 10537 11108 11698 12114 12564 12792 13736 14102 14991 15048 #> [15205] 15113 15855 16712  9941 11411 12692 13207 13770 14458 14731 16217  9639 #> [15217] 10084 10514 10770 11546 12239 12900 13466 14103  9613 10575 11109 12115 #> [15229] 12693 13402 14337 15049 15823  9802  9910 11547 11945 12368 12444 12729 #> [15241] 12819 13017 13136 13641 14686 14850 10057 10882 11138 11738 12170 12292 #> [15253] 13045 13137 13737 14763 16041 16493 16558 16632  9735  9827 10371 12293 #> [15265] 12445 13255 13809 14194 14851 15618 15891 10058 10132 10403 10538 11644 #> [15277] 13164 13256 14011 14403 14732 15549 16360 16462 10036 10252 10515 11079 #> [15289] 11139 12147 12665 12694 12793 13257 13367 13403 14338 15619 16042  9885 #> [15301]  9911 10109 10148 11251 13287 13404 13834 14104 14918 15892 16043 16428 #> [15313] 16494  9784 10694 11673 11946 12080 13208 13368 13876 15114 15486 10489 #> [15325] 10516 11350 11866 13467 13537 13591 14459 15249 15856 16401 16528 10085 #> [15337] 10350 10539 10631 11466 11620 11828 12116 12612 13258 13441 13559 14561 #> [15349] 14792 16495  9828 10908 11110 11252 11488 11739 11997 12081 12584 13165 #> [15361] 13835 14195 14890 16559 10576 10771 11080 11165 12209 13209 13369 15166 #> [15373] 15518 11548 12565 13074 13138 13771 13836 14428 15487 15519 16218 10110 #> [15385] 11280 12082 12148 12413 12446 13311 13772 14829 14852 14891 16219 16560 #> [15397] 10133 12585 12695 12901 14012 14134 14364 14733 15316 16005 16463 10445 #> [15409] 10727 10909 11467 13312 14734 14853 15453 15685 15759 16361 10253 10755 #> [15421] 11081 11253 11892 11970 14489 14687 14919 10149 11027 11140 11302 11327 #> [15433] 11722 11971 12028 12613 12966 13139 13313 13340 14653 14963 14992 15286 #> [15445] 16183 16529 10577 11699 12083 12730 12794 14039 14259 14514 15967 16220 #> [15457] 16561 10059 10372 13538 13738 14305 14892 14920 10220 10841 10863 11141 #> [15469] 12447 12989 13018 13140 13288 14196 14515 14688 16633 10174 11328 11645 #> [15481] 12531 12666 13210 14135 14306 14793 15686 10194 10578 10883 11142 11230 #> [15493] 11519 11549 12696 12765 13104 14654 15167 16286 16634 10884 10929 11412 #> [15505] 11947 12483 13141 13314 13405 13618 15968 16362 10254 10281 10329 10955 #> [15517] 11045 12766 13315 13739 14197 15488 10221 10373 10464 10930 10956 11231 #> [15529] 11790 13235 13259 13289 13619 13773 14307 14460 16562 16747 10222 11211 #> [15541] 11413 11791 12697 13498 13678 14161 14198 14404 14830 14993 16144 16402 #> [15553] 10793 10842 12210 13877 13988 14831 14893 15196 15287 15317 16006 16044 #> [15565] 16124 16563 10374 10664 10931 11212 11414 11550 12294 12387 12990 13370 #> [15577] 13679 14199 16429 16564 16713 10305 10540 10975 11281 11621 12084 12295 #> [15589] 13075 13142 14516 14964 15793 15893 16007 16596 10665 10843 11111 11763 #> [15601] 11972 13166 13371 14162 11046 11764 11792 12117 12936 14517 15250 15969 #> [15613] 16264 16782 10541 10695 10885 11232 12532 12876 14689 15687 10886 11351 #> [15625] 11489 12118 13372 15390 16098 16671 16748 11190 11600 11740 13499 13953 #> [15637] 10542 12240 12346 12902 13810 14105 15050 15454 15721 15928 16145 16783 #> [15649] 10632 12484 13143 13406 14260 14308 14365 15147 16326 10543 11793 12085 #> [15661] 12320 13539 13642 14261 14562 14590 14735 14854 15115 15857 16784 10794 #> [15673] 11867 13500 13592 13774 14163 14262 14366 15251 16221 16597 10633 11233 #> [15685] 11490 11829 12614 13019 13680 15426 15894 16146 10910 11007 11047 11601 #> [15697] 11998 12053 12991 14309 14994 15019 15391 10772 10887 10957 11794 12296 #> [15709] 12533 13740 14563 15489 15582 11646 12448 13211 13260 15288 16222 10795 #> [15721] 11282 11491 11765 12506 13167 13212 13540 14387 14855 14995 15858 15970 #> [15733] 16008 16099 16749 10864 11329 11443 11674 11766 12767 12903 13407 14367 #> [15745] 14794 15020 16223 11468 12086 12149 13775 13932 13989 14106 14339 14564 #> [15757] 16009 11622 11723 12586 12768 13046 14076 14490 15225 11830 11973 12171 #> [15769] 12795 12937 13168 13261 13316 14263 14461 15051 16010 16327 11254 11795 #> [15781] 11948 11999 13262 13290 13776 13837 13878 15318 15583 15688 15794 16496 #> [15793] 16714 11008 11700 12054 13341 13777 14655 15085 15252 11831 12667 15226 #> [15805] 15289 15319 15929 11143 11191 11701 11893 12877 13105 14164 14894 15021 #> [15817] 15392 16497 16530 16715 10911 11492 12297 13468 13933 14013 14107 15253 #> [15829] 15895 16265 16635 11623 12534 12967 13236 13713 14264 16045 16785 11213 #> [15841] 11330 11894 11974 12968 13838 15490 16125 11796 11895 12000 12298 12449 #> [15853] 12644 13213 13317 15290 15393 16126 16565 16750 11028 11112 11797 12587 #> [15865] 14108 14429 15620 11234 11868 12369 13169 13318 13560 16363 16566 11192 #> [15877] 11415 13020 13741 13778 14136 14430 14462 15359 15455 15520 15795 16127 #> [15889] 16364 11214 11303 11832 12388 13170 13742 14014 14265 14856 15659 15722 #> [15901] 16184 11493 11798 12507 12535 12615 14518 14921 15521 16046 16224 16716 #> [15913] 11166 12992 13171 14200 14463 14764 14795 15971 16047 11675 11949 12450 #> [15925] 12668 13501 13714 14565 14996 16287 11869 12769 13106 13779 14519 15291 #> [15937] 15930 16128 11494 11647 12055 12261 12993 13214 14137 15148 16147 16185 #> [15949] 12414 13172 13373 13811 13903 14138 14368 14388 14832 15197 15931 16186 #> [15961] 16430 11724 11767 12846 12938 13469 13780 15584 16225 16328 16498 11469 #> [15973] 11495 11602 11799 12588 12904 12969 13643 14591 14690 15086 11283 11768 #> [15985] 12172 12731 13408 16431 16464 16567 12299 12321 12698 12905 13561 13644 #> [15997] 14040 16403 11769 11800 12770 12994 13047 13374 13954 14520 15932 16432 #> [16009] 11577 11648 11725 12001 12173 12451 13291 13502 14405 14922 15087 15227 #> [16021] 16048 16465 16751 11388 11870 12616 14041 15585 15896 16365 16433 11833 #> [16033] 12119 12211 12732 13812 14592 14923 14997 15427 15522 15897 11834 13409 #> [16045] 13839 13904 14521 14593 14691 14857 12452 13562 13593 13813 14231 14266 #> [16057] 16073 16752 12878 14310 14895 15621 15689 11551 12212 12262 13620 14109 #> [16069] 14165 11624 11726 12263 13470 13563 13905 14594 14765 15116 15320 16434 #> [16081] 16636 12002 12536 12589 12699 13215 13410 14042 14998 15760 15898 12003 #> [16093] 12120 12300 12347 12453 13503 13990 14043 14311 15088 15622 16011 11702 #> [16105] 11801 12370 13144 13743 14044 14369 14965 12566 12700 13292 13375 13504 #> [16117] 13681 14389 15292 15586 15933 16049 16786 12733 12820 13293 14201 15523 #> [16129] 12029 12879 15022 16568 11975 12389 12906 13294 14110 14619 14896 15254 #> [16141] 15394 16148 12087 12213 12821 13342 13645 13682 15052 15723 16074 16149 #> [16153] 11802 12371 12508 13076 13442 13505 13564 14736 16226 16404 11921 12174 #> [16165] 12214 12701 13145 13411 13594 13955 15293 15321 15690 16150 12669 13319 #> [16177] 13471 13814 14111 14370 14620 14858 15198 15255 15524 16569 12372 13744 #> [16189] 15199 16187 12175 12617 12880 15456 15796 16012 16499 12264 12881 13376 #> [16201] 13683 13715 14045 14656 12056 12415 12645 12796 14139 14621 15724 15934 #> [16213] 16050 16366 16672 12537 12822 12907 13541 14371 15089 12995 14566 14737 #> [16225] 14766 14897 15525 16075 12030 12057 12121 12215 12771 12939 13107 13377 #> [16237] 14372 14622 14657 15660 12416 12646 12970 13077 14202 15053 15168 15491 #> [16249] 15972 12734 13745 13906 14595 14859 14924 15294 15395 12322 13146 13320 #> [16261] 13907 14833 15322 16329 16598 16637 12735 12940 14232 14390 15396 15587 #> [16273] 16435 16638 16717 12647 13108 13173 13684 13716 13815 14796 15323 15725 #> [16285] 14203 14491 14658 15526 15588 16718 12971 13263 13908 14738 15428 16188 #> [16297] 13078 13174 13646 13685 14834 15228 15295 16367 12670 12823 13412 13595 #> [16309] 13816 14522 15090 15360 15429 15973 16129 16787 13343 14166 14860 15550 #> [16321] 15623 12417 12590 13956 14112 15023 15169 16531 16570 16599 15974 16076 #> [16333] 12882 12972 13472 14659 15492 15551 16051 16130 16189 16600 16719 14523 #> [16345] 14835 15552 16368 16601 12908 12996 13175 13295 13717 14340 14492 15397 #> [16357] 12824 13647 13686 15324 13237 14623 15553 15624 16405 12538 13147 13621 #> [16369] 14046 14925 15256 15935 15975 13238 13622 14113 14567 15589 16100 16639 #> [16381] 13239 13648 14568 15296 16288 16436 16532 13413 14692 14767 14861 15527 #> [16393] 16571 13216 13443 14596 16330 16500 12883 13021 13240 14204 14464 14693 #> [16405] 15054 15170 15761 14267 14660 15117 13444 14406 14739 14862 15229 15493 #> [16417] 15824 13414 13506 14114 15055 15457 16501 13176 13542 15091 15149 15297 #> [16429] 15825 15859 16406 13264 13909 14493 16502 13148 13177 13507 13565 13957 #> [16441] 15092 15762 16266 12884 13687 14661 15661 16077 16503 13649 14015 14047 #> [16453] 14768 15230 16289 12997 13378 16673 15976 16602 13508 13746 15361 15936 #> [16465] 13566 14167 14569 14694 15200 15899 16013 16190 14016 14205 14524 15625 #> [16477] 16290 13688 13958 14168 15691 16014 16504 13991 14797 15201 15626 13178 #> [16489] 13509 13879 14391 14695 14769 15826 15860 16078 13510 14115 14268 14662 #> [16501] 14999 15726 15797 16369 15298 14525 14966 16331 14526 14798 13840 14431 #> [16513] 14799 15056 15231 16101 16227 16370 16572 13567 13959 15000 15430 15590 #> [16525] 13596 13841 14017 14663 15458 15977 16015 16079 16151 16228 13880 14018 #> [16537] 15528 16640 14465 15459 16229 16437 16505 13817 13960 15150 15257 15554 #> [16549] 16506 13781 14373 14570 15151 16753 14527 16371 13747 16102 16407 16720 #> [16561] 13718 14312 14571 16721 14528 15591 15662 16152 16754 15171 15232 15663 #> [16573] 15827 15978 16016 16438 14140 15001 13910 13961 14019 14341 15362 15664 #> [16585] 15692 15727 16052 16573 14020 14269 14624 15460 15555 15828 16641 16674 #> [16597] 14206 14800 15118 15258 14169 14597 14801 15002 14233 15202 15431 16267 #> [16609] 16332 16466 14021 14598 15299 15363 16333 14207 14313 14466 15024 16372 #> [16621] 15693 15937 14314 14625 14836 14926 15325 15494 15798 16153 16755 14572 #> [16633] 15326 15938 16154 14208 15057 15461 16017 16291 16439 14863 15763 16467 #> [16645] 16675 16756 14837 15058 15364 16230 16440 14529 14573 14696 15119 15979 #> [16657] 15300 15728 15799 16268 16676 16722 16642 14530 14664 14697 15800 16231 #> [16669] 16533 14626 15398 15829 16080 16468 14665 15980 16191 16677 15120 15152 #> [16681] 15801 15861 14898 15059 15556 15900 16103 16192 16232 16643 16723 14666 #> [16693] 15627 16018 16469 16644 15203 15233 15365 16233 16334 15259 16645 15901 #> [16705] 14927 15802 14967 15327 16081 15495 16757 16574 15234 15529 15628 16335 #> [16717] 16724 15902 16269 16373 15204 15557 16292 16470 16603 15301 15432 16082 #> [16729] 16471 15629 16374 16472 15328 15862 16053 16507 15329 16234 16575 16678 #> [16741] 16155 16788 15903 16131 16473 15764 15558 15592 15729 16156 15694 15730 #> [16753] 15863 16054 16375 16270 16725 16157 15830 16019 16104 16132 16235 16726 #> [16765] 15864 15939 16293 16576 16679 16604 15904 16336 16474 16158 16727 16508 #> [16777] 16083 16509 16577 16646 16408 16578 16294 16647 16789 16510 16680 16758 #> [16789] 16648 16649 #>  #> [[7]] #>    [1]     0     0     0     1     1     1     3     3     3     5     7     7 #>   [13]     8     9    11    12    13    18    18    18    20    20    22    26 #>   [25]    28    31    32    33    34    36    38    40    41    45    50    54 #>   [37]    62    66    66    70    72    73    77    82    88    93    96   101 #>   [49]   110   112   117   121   127   128   136   146   153   159   163   168 #>   [61]   173   181   183   195   197   200   204   211   219   226   231   237 #>   [73]   244   252   256   257   265   273   278   282   286   297   304   314 #>   [85]   324   333   342   350   365   374   382   390   398   413   423   432 #>   [97]   442   451   458   469   473   483   491   498   504   513   518   529 #>  [109]   541   552   560   572   582   589   608   618   632   650   660   675 #>  [121]   682   693   708   721   733   755   766   776   792   805   820   831 #>  [133]   851   864   878   891   904   918   940   957   968   984   995  1006 #>  [145]  1017  1034  1048  1069  1088  1097  1116  1135  1148  1163  1172  1187 #>  [157]  1201  1217  1237  1251  1263  1282  1292  1312  1329  1344  1359  1371 #>  [169]  1381  1392  1406  1429  1446  1466  1482  1497  1505  1520  1540  1555 #>  [181]  1571  1591  1614  1629  1645  1663  1677  1696  1712  1730  1754  1777 #>  [193]  1792  1812  1830  1849  1866  1888  1902  1919  1940  1958  1976  1993 #>  [205]  2011  2036  2051  2072  2096  2117  2146  2165  2185  2207  2228  2252 #>  [217]  2272  2298  2318  2337  2357  2384  2400  2415  2443  2464  2488  2507 #>  [229]  2519  2535  2558  2581  2601  2617  2648  2670  2689  2711  2744  2768 #>  [241]  2796  2816  2845  2876  2901  2924  2945  2968  2991  3020  3040  3068 #>  [253]  3092  3122  3143  3168  3192  3216  3254  3283  3296  3325  3342  3368 #>  [265]  3398  3421  3444  3467  3496  3527  3548  3573  3608  3628  3659  3685 #>  [277]  3717  3748  3777  3803  3825  3851  3883  3907  3930  3955  3983  4009 #>  [289]  4036  4061  4088  4114  4145  4168  4203  4239  4278  4303  4326  4352 #>  [301]  4380  4380  4381  4383  4384  4387  4388  4388  4388  4388  4388  4388 #>  [313]  4388  4388  4392  4392  4392  4393  4394  4394  4397  4398  4398  4401 #>  [325]  4403  4405  4407  4410  4412  4414  4417  4417  4422  4424  4428  4431 #>  [337]  4431  4433  4434  4435  4436  4439  4440  4441  4447  4448  4452  4453 #>  [349]  4453  4454  4457  4459  4460  4461  4461  4464  4468  4468  4472  4474 #>  [361]  4476  4477  4479  4479  4481  4484  4490  4495  4498  4501  4502  4506 #>  [373]  4508  4511  4517  4523  4524  4529  4532  4532  4536  4539  4540  4541 #>  [385]  4544  4547  4547  4553  4557  4565  4571  4576  4580  4582  4588  4592 #>  [397]  4598  4602  4606  4610  4617  4625  4630  4638  4647  4652  4658  4667 #>  [409]  4670  4676  4679  4683  4691  4693  4699  4704  4710  4722  4727  4732 #>  [421]  4735  4742  4748  4756  4761  4772  4776  4786  4792  4804  4811  4818 #>  [433]  4827  4834  4845  4848  4852  4862  4873  4879  4885  4892  4900  4910 #>  [445]  4916  4922  4928  4938  4947  4953  4960  4967  4974  4981  4987  4998 #>  [457]  5006  5012  5016  5028  5033  5040  5048  5056  5069  5077  5083  5090 #>  [469]  5098  5107  5114  5118  5128  5137  5146  5153  5159  5165  5173  5184 #>  [481]  5196  5208  5214  5224  5239  5249  5253  5262  5274  5286  5295  5303 #>  [493]  5311  5320  5327  5339  5346  5356  5368  5380  5387  5397  5404  5420 #>  [505]  5436  5448  5464  5475  5488  5499  5507  5517  5527  5536  5548  5561 #>  [517]  5578  5588  5597  5607  5618  5630  5641  5655  5669  5678  5687  5698 #>  [529]  5715  5725  5734  5743  5750  5761  5769  5778  5801  5812  5823  5838 #>  [541]  5852  5868  5878  5883  5893  5904  5913  5930  5937  5951  5960  5969 #>  [553]  5978  5995  6012  6025  6039  6052  6061  6076  6090  6106  6123  6136 #>  [565]  6152  6167  6178  6182  6198  6212  6227  6246  6261  6269  6279  6293 #>  [577]  6311  6323  6338  6347  6362  6381  6388  6398  6414  6429  6449  6465 #>  [589]  6476  6487  6504  6521  6540  6555  6567  6584  6600  6611  6623  6641 #>  [601]  6655  6678  6691  6704  6717  6726  6744  6755  6765  6783  6805  6819 #>  [613]  6830  6850  6872  6890  6907  6922  6938  6958  6982  6999  7016  7032 #>  [625]  7053  7072  7088  7099  7121  7139  7154  7173  7185  7203  7217  7235 #>  [637]  7258  7268  7288  7303  7324  7345  7369  7388  7409  7434  7454  7475 #>  [649]  7493  7508  7536  7552  7578  7589  7603  7622  7637  7653  7674  7700 #>  [661]  7712  7725  7739  7759  7785  7801  7818  7835  7860  7874  7895  7922 #>  [673]  7934  7952  7971  7993  8011  8030  8049  8071  8088  8102  8128  8150 #>  [685]  8179  8194  8215  8230  8249  8272  8296  8314  8339  8360  8382  8406 #>  [697]  8428  8451  8468  8483  8503  8526  8548  8570  8593  8616  8636  8653 #>  [709]  8676  8694  8718  8744  8762  8784  8801  8817  8836  8858  8887  8907 #>  [721]  8924  8943  8953  8973  9003  9015  9035  9054  9075  9101  9127  9155 #>  [733]  9178  9196  9211  9233  9249  9267  9293  9317  9338  9354  9376  9391 #>  [745]  9409  9431  9452  9471  9489  9513  9538  9564  9581  9597  9619  9641 #>  [757]  9661  9683  9714  9732  9758  9788  9817  9844  9874  9893  9920  9943 #>  [769]  9972  9996 10022 10048 10071 10087 10112 10132 10160 10192 10219 10244 #>  [781] 10268 10290 10314 10343 10366 10386 10405 10431 10458 10485 10520 10548 #>  [793] 10576 10609 10640 10673 10701 10719 10742 10765 10790 10812 10835 10860 #>  [805] 10881 10907 10925 10959 10979 10998 11034 11065 11096 11119 11146 11168 #>  [817] 11188 11208 11238 11259 11286 11307 11323 11344 11371 11399 11425 11452 #>  [829] 11476 11509 11537 11562 11584 11609 11637 11664 11688 11702 11731 11764 #>  [841] 11796 11833 11858 11884 11912 11938 11966 11993 12020 12050 12086 12114 #>  [853] 12140 12180 12205 12229 12265 12287 12312 12337 12354 12383 12419 12450 #>  [865] 12475 12506 12534 12558 12585 12615 12638 12669 12703 12740 12765 12793 #>  [877] 12815 12853 12877 12909 12941 12966 12990 13016 13047 13078 13118 13148 #>  [889] 13187 13211 13236 13267 13293 13316 13351 13387 13417 13446 13485 13517 #>  [901] 13542 13571 13597 13625 13665 13695 13725 13759 13795 13819 13858 13889 #>  [913] 13912 13940 13970 14000 14027 14056 14095 14120 14150 14190 14216 14252 #>  [925] 14298 14325 14358 14376 14392 14417 14452 14479 14516 14560 14585 14613 #>  [937] 14655 14687 14730 14760 14792 14828 14854 14889 14918 14959 14994 15017 #>  [949] 15052 15085 15114 15146 15165 15198 15229 15254 15296 15324 15361 15394 #>  [961] 15428 15457 15492 15526 15555 15591 15628 15663 15693 15729 15764 15802 #>  [973] 15830 15864 15904 15939 15980 16019 16054 16084 16105 16133 16159 16193 #>  [985] 16236 16271 16295 16337 16376 16409 16441 16475 16511 16534 16579 16605 #>  [997] 16650 16681 16728 16759 16790 #>  #> [[8]] #>    [1]     0    27    70   102   126   155   194   225   252   283   308   329 #>   [13]   370   404   436   466   499   534   565   587   612   634   669   703 #>   [25]   730   761   789   819   854   883   906   922   946   982  1004  1026 #>   [37]  1054  1077  1101  1129  1150  1183  1208  1238  1260  1290  1314  1336 #>   [49]  1368  1387  1415  1448  1470  1494  1521  1546  1563  1591  1619  1643 #>   [61]  1672  1693  1722  1742  1758  1781  1805  1830  1855  1873  1887  1903 #>   [73]  1920  1946  1972  1993  2008  2030  2052  2066  2092  2121  2139  2158 #>   [85]  2179  2200  2223  2248  2267  2288  2314  2340  2366  2382  2402  2425 #>   [97]  2445  2466  2487  2505  2523  2533  2549  2568  2587  2606  2623  2644 #>  [109]  2667  2682  2702  2729  2753  2772  2790  2810  2837  2851  2863  2881 #>  [121]  2901  2918  2936  2944  2963  2982  2996  3016  3029  3048  3058  3072 #>  [133]  3089  3113  3134  3148  3165  3178  3208  3222  3239  3262  3277  3292 #>  [145]  3309  3328  3339  3350  3358  3378  3401  3421  3433  3448  3463  3482 #>  [157]  3497  3515  3525  3533  3549  3564  3581  3589  3598  3610  3626  3635 #>  [169]  3643  3662  3677  3691  3706  3726  3736  3748  3766  3779  3786  3802 #>  [181]  3811  3822  3832  3848  3860  3876  3889  3902  3915  3927  3937  3955 #>  [193]  3968  3982  3994  4002  4011  4026  4037  4050  4062  4069  4087  4101 #>  [205]  4105  4119  4131  4147  4150  4153  4159  4167  4175  4184  4194  4204 #>  [217]  4217  4220  4228  4240  4246  4253  4260  4268  4275  4282  4292  4302 #>  [229]  4311  4314  4321  4327  4335  4341  4348  4353  4360  4367  4375  4384 #>  [241]  4391  4396  4402  4409  4416  4421  4423  4428  4433  4439  4445  4456 #>  [253]  4465  4468  4470  4478  4484  4490  4493  4500  4502  4504  4511  4516 #>  [265]  4517  4522  4524  4526  4527  4532  4537  4540  4542  4546  4547  4550 #>  [277]  4552  4555  4559  4561  4562  4564  4565  4569  4573  4576  4578  4580 #>  [289]  4581  4582  4584  4585  4585  4585  4587  4589  4590  4590  4592  4592 #>  [301]  4592  4632  4659  4692  4727  4753  4780  4821  4865  4891  4928  4961 #>  [313]  4997  5026  5058  5097  5131  5165  5200  5247  5281  5319  5343  5368 #>  [325]  5397  5430  5457  5488  5517  5560  5593  5624  5652  5686  5709  5749 #>  [337]  5785  5823  5865  5898  5928  5962  5993  6028  6066  6097  6130  6170 #>  [349]  6207  6236  6260  6297  6327  6353  6378  6405  6432  6480  6503  6533 #>  [361]  6566  6599  6629  6662  6702  6732  6766  6795  6818  6841  6875  6899 #>  [373]  6934  6965  7000  7024  7064  7094  7119  7148  7180  7207  7239  7270 #>  [385]  7295  7327  7358  7378  7416  7449  7487  7523  7547  7575  7609  7644 #>  [397]  7672  7707  7737  7763  7799  7829  7860  7890  7919  7947  7984  8019 #>  [409]  8055  8076  8103  8126  8151  8173  8190  8216  8245  8266  8297  8325 #>  [421]  8367  8394  8420  8452  8485  8516  8540  8564  8598  8628  8653  8685 #>  [433]  8702  8731  8757  8780  8807  8829  8851  8868  8893  8920  8951  8977 #>  [445]  9009  9033  9058  9086  9115  9153  9184  9208  9239  9274  9294  9326 #>  [457]  9354  9377  9406  9435  9465  9494  9522  9541  9564  9595  9625  9651 #>  [469]  9686  9705  9735  9760  9780  9800  9817  9843  9867  9889  9911  9944 #>  [481]  9967  9992 10025 10053 10070 10095 10118 10145 10171 10202 10230 10249 #>  [493] 10273 10301 10330 10356 10388 10416 10446 10480 10509 10539 10557 10575 #>  [505] 10599 10625 10647 10675 10703 10735 10752 10782 10810 10835 10866 10879 #>  [517] 10904 10920 10942 10967 10992 11014 11043 11069 11090 11116 11144 11161 #>  [529] 11182 11200 11220 11246 11274 11295 11324 11337 11364 11389 11423 11451 #>  [541] 11476 11507 11534 11552 11574 11593 11610 11632 11656 11677 11699 11724 #>  [553] 11745 11771 11793 11821 11843 11866 11895 11918 11942 11974 11992 12020 #>  [565] 12046 12066 12087 12104 12121 12146 12166 12192 12206 12230 12259 12284 #>  [577] 12299 12311 12323 12346 12366 12392 12419 12441 12464 12491 12507 12533 #>  [589] 12556 12579 12603 12620 12644 12660 12685 12701 12724 12745 12770 12791 #>  [601] 12806 12819 12840 12862 12888 12905 12926 12950 12974 12991 13015 13032 #>  [613] 13051 13068 13078 13093 13111 13127 13144 13156 13180 13195 13212 13226 #>  [625] 13243 13262 13278 13295 13318 13335 13360 13384 13399 13424 13447 13470 #>  [637] 13488 13507 13527 13542 13559 13570 13585 13599 13618 13634 13654 13672 #>  [649] 13690 13712 13728 13743 13763 13777 13791 13805 13819 13830 13847 13859 #>  [661] 13880 13903 13922 13945 13962 13984 13996 14014 14033 14059 14070 14087 #>  [673] 14111 14121 14135 14160 14174 14187 14198 14219 14231 14251 14268 14286 #>  [685] 14303 14318 14330 14345 14360 14378 14393 14407 14425 14445 14464 14480 #>  [697] 14504 14521 14537 14556 14569 14584 14597 14606 14619 14637 14651 14675 #>  [709] 14693 14702 14716 14731 14746 14757 14771 14779 14795 14811 14820 14834 #>  [721] 14849 14861 14879 14894 14909 14934 14950 14960 14973 14987 14997 15006 #>  [733] 15022 15045 15061 15078 15090 15110 15116 15126 15133 15150 15159 15169 #>  [745] 15181 15191 15207 15215 15224 15233 15246 15260 15271 15284 15299 15313 #>  [757] 15323 15335 15350 15364 15373 15383 15396 15407 15418 15427 15446 15457 #>  [769] 15464 15477 15487 15501 15512 15522 15538 15552 15566 15581 15596 15604 #>  [781] 15614 15622 15631 15636 15648 15657 15671 15682 15692 15703 15713 15719 #>  [793] 15735 15747 15757 15765 15778 15793 15801 15807 15820 15831 15839 15847 #>  [805] 15860 15867 15875 15889 15901 15912 15921 15930 15938 15948 15961 15971 #>  [817] 15982 15990 15998 16008 16023 16031 16042 16050 16058 16063 16069 16081 #>  [829] 16091 16099 16103 16111 16123 16128 16132 16142 16152 16162 16174 16186 #>  [841] 16190 16197 16204 16215 16221 16228 16240 16249 16257 16266 16275 16284 #>  [853] 16290 16296 16304 16316 16321 16330 16332 16343 16348 16356 16360 16365 #>  [865] 16373 16380 16387 16393 16398 16407 16410 16417 16423 16431 16435 16443 #>  [877] 16449 16455 16458 16460 16464 16472 16477 16483 16487 16496 16504 16505 #>  [889] 16508 16510 16519 16522 16524 16534 16535 16538 16543 16545 16549 16554 #>  [901] 16556 16560 16564 16569 16576 16578 16587 16588 16591 16596 16600 16604 #>  [913] 16610 16615 16620 16622 16631 16635 16641 16646 16651 16656 16656 16662 #>  [925] 16663 16669 16672 16674 16674 16678 16682 16682 16685 16687 16691 16696 #>  [937] 16697 16701 16703 16704 16706 16709 16711 16712 16717 16720 16721 16722 #>  [949] 16725 16726 16729 16729 16732 16736 16740 16740 16740 16740 16742 16745 #>  [961] 16746 16750 16755 16757 16757 16758 16760 16764 16764 16768 16768 16769 #>  [973] 16770 16773 16773 16775 16776 16777 16780 16780 16781 16781 16781 16782 #>  [985] 16784 16785 16785 16785 16785 16785 16787 16787 16788 16789 16790 16790 #>  [997] 16790 16790 16790 16790 16790 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Stochastic block model\" #>  #> [[9]][[2]]$loops #> [1] FALSE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf490d98> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/sample_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling a random integer sequence — sample_seq","title":"Sampling a random integer sequence — sample_seq","text":"function provides efficient way pull integer random sample sequence integer interval.","code":""},{"path":"/reference/sample_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling a random integer sequence — sample_seq","text":"","code":"sample_seq(low, high, length)"},{"path":"/reference/sample_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling a random integer sequence — sample_seq","text":"low lower limit interval (inclusive). high higher limit interval (inclusive). length length sample.","code":""},{"path":"/reference/sample_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling a random integer sequence — sample_seq","text":"increasing numeric vector containing integers, sample.","code":""},{"path":"/reference/sample_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling a random integer sequence — sample_seq","text":"algorithm runs O(length) expected time, even high-low big. much faster (course less general) builtin sample function R.","code":""},{"path":"/reference/sample_seq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sampling a random integer sequence — sample_seq","text":"Jeffrey Scott Vitter: Efficient Algorithm Sequential Random Sampling, ACM Transactions Mathematical Software, 13/1, 58--67.","code":""},{"path":[]},{"path":"/reference/sample_seq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sampling a random integer sequence — sample_seq","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling a random integer sequence — sample_seq","text":"","code":"rs <- sample_seq(1, 100000000, 10) rs #>  [1]   229498  2158403 18554079 33255101 37050430 56465302 58507696 74248653 #>  [9] 82199166 95784988"},{"path":"/reference/sample_smallworld.html","id":null,"dir":"Reference","previous_headings":"","what":"The Watts-Strogatz small-world model — sample_smallworld","title":"The Watts-Strogatz small-world model — sample_smallworld","text":"Generate graph according Watts-Strogatz network model.","code":""},{"path":"/reference/sample_smallworld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Watts-Strogatz small-world model — sample_smallworld","text":"","code":"sample_smallworld(dim, size, nei, p, loops = FALSE, multiple = FALSE)  smallworld(...)"},{"path":"/reference/sample_smallworld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Watts-Strogatz small-world model — sample_smallworld","text":"dim Integer constant, dimension starting lattice. size Integer constant, size lattice along dimension. nei Integer constant, neighborhood within vertices lattice connected. p Real constant zero one, rewiring probability. loops Logical scalar, whether loops edges allowed generated graph. multiple Logical scalar, whether multiple edges allowed int generated graph. ... Passed sample_smallworld().","code":""},{"path":"/reference/sample_smallworld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Watts-Strogatz small-world model — sample_smallworld","text":"graph object.","code":""},{"path":"/reference/sample_smallworld.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Watts-Strogatz small-world model — sample_smallworld","text":"First lattice created given dim, size nei arguments. edges lattice rewired uniformly randomly probability p. Note function might create graphs loops /multiple edges. can use simplify() get rid .","code":""},{"path":"/reference/sample_smallworld.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Watts-Strogatz small-world model — sample_smallworld","text":"Duncan J Watts Steven H Strogatz: Collective dynamics ‘small world’ networks, Nature 393, 440-442, 1998.","code":""},{"path":[]},{"path":"/reference/sample_smallworld.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Watts-Strogatz small-world model — sample_smallworld","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_smallworld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Watts-Strogatz small-world model — sample_smallworld","text":"","code":"g <- sample_smallworld(1, 100, 5, 0.05) mean_distance(g) #> [1] 2.642626 transitivity(g, type = \"average\") #> [1] 0.487338"},{"path":"/reference/sample_spanning_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples from the spanning trees of a graph randomly and uniformly — sample_spanning_tree","title":"Samples from the spanning trees of a graph randomly and uniformly — sample_spanning_tree","text":"sample_spanning_tree() picks spanning tree undirected graph randomly uniformly, using loop-erased random walks.","code":""},{"path":"/reference/sample_spanning_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples from the spanning trees of a graph randomly and uniformly — sample_spanning_tree","text":"","code":"sample_spanning_tree(graph, vid = 0)"},{"path":"/reference/sample_spanning_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Samples from the spanning trees of a graph randomly and uniformly — sample_spanning_tree","text":"graph input graph sample . Edge directions ignored graph directed. vid graph disconnected, argument specifies handle situation. argument zero (default), sampling performed component-wise, result spanning forest. argument contains vertex ID, component containing given vertex processed, result spanning tree component graph.","code":""},{"path":"/reference/sample_spanning_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Samples from the spanning trees of a graph randomly and uniformly — sample_spanning_tree","text":"edge sequence containing edges spanning tree. Use subgraph.edges() extract corresponding subgraph.","code":""},{"path":[]},{"path":"/reference/sample_spanning_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Samples from the spanning trees of a graph randomly and uniformly — sample_spanning_tree","text":"","code":"g <- make_full_graph(10) %du% make_full_graph(5) edges <- sample_spanning_tree(g) forest <- subgraph.edges(g, edges)"},{"path":"/reference/sample_sphere_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample vectors uniformly from the surface of a sphere — sample_sphere_surface","title":"Sample vectors uniformly from the surface of a sphere — sample_sphere_surface","text":"Sample finite-dimensional vectors use latent position vectors random dot product graphs","code":""},{"path":"/reference/sample_sphere_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample vectors uniformly from the surface of a sphere — sample_sphere_surface","text":"","code":"sample_sphere_surface(dim, n = 1, radius = 1, positive = TRUE)"},{"path":"/reference/sample_sphere_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample vectors uniformly from the surface of a sphere — sample_sphere_surface","text":"dim Integer scalar, dimension random vectors. n Integer scalar, sample size. radius Numeric scalar, radius sphere sample. positive Logical scalar, whether sample positive orthant sphere.","code":""},{"path":"/reference/sample_sphere_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample vectors uniformly from the surface of a sphere — sample_sphere_surface","text":"dim (length alpha vector sample_dirichlet()) times n matrix, whose columns sample vectors.","code":""},{"path":"/reference/sample_sphere_surface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample vectors uniformly from the surface of a sphere — sample_sphere_surface","text":"sample_sphere_surface() generates uniform samples \\(S^{dim-1}\\) ((dim-1)-sphere) radius radius, .e. Euclidean norm samples equal radius.","code":""},{"path":[]},{"path":"/reference/sample_sphere_surface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample vectors uniformly from the surface of a sphere — sample_sphere_surface","text":"","code":"lpvs.sph <- sample_sphere_surface(dim = 10, n = 20, radius = 1) RDP.graph.3 <- sample_dot_product(lpvs.sph) vec.norm <- apply(lpvs.sph, 2, function(x) {   sum(x^2) }) vec.norm #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"},{"path":"/reference/sample_sphere_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample vectors uniformly from the volume of a sphere — sample_sphere_volume","title":"Sample vectors uniformly from the volume of a sphere — sample_sphere_volume","text":"Sample finite-dimensional vectors use latent position vectors random dot product graphs","code":""},{"path":"/reference/sample_sphere_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample vectors uniformly from the volume of a sphere — sample_sphere_volume","text":"","code":"sample_sphere_volume(dim, n = 1, radius = 1, positive = TRUE)"},{"path":"/reference/sample_sphere_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample vectors uniformly from the volume of a sphere — sample_sphere_volume","text":"dim Integer scalar, dimension random vectors. n Integer scalar, sample size. radius Numeric scalar, radius sphere sample. positive Logical scalar, whether sample positive orthant sphere.","code":""},{"path":"/reference/sample_sphere_volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample vectors uniformly from the volume of a sphere — sample_sphere_volume","text":"dim (length alpha vector sample_dirichlet()) times n matrix, whose columns sample vectors.","code":""},{"path":"/reference/sample_sphere_volume.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample vectors uniformly from the volume of a sphere — sample_sphere_volume","text":"sample_sphere_volume() generates uniform samples \\(S^{dim-1}\\) ((dim-1)-sphere) .e. Euclidean norm samples smaller equal radius.","code":""},{"path":[]},{"path":"/reference/sample_sphere_volume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample vectors uniformly from the volume of a sphere — sample_sphere_volume","text":"","code":"lpvs.sph.vol <- sample_sphere_volume(dim = 10, n = 20, radius = 1) RDP.graph.4 <- sample_dot_product(lpvs.sph.vol) vec.norm <- apply(lpvs.sph.vol, 2, function(x) {   sum(x^2) }) vec.norm #>  [1] 0.6562266 0.6680501 0.9013967 0.9013093 0.6700255 0.9845800 0.7290675 #>  [8] 0.8607051 0.6397746 0.9789273 0.8294399 0.8145978 0.7837617 0.9895597 #> [15] 0.6456152 0.7196572 0.9312549 0.8725443 0.5585520 0.4512249"},{"path":"/reference/sample_traits_callaway.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph generation based on different vertex types — sample_traits_callaway","title":"Graph generation based on different vertex types — sample_traits_callaway","text":"functions implement evolving network models based different vertex types.","code":""},{"path":"/reference/sample_traits_callaway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph generation based on different vertex types — sample_traits_callaway","text":"","code":"sample_traits_callaway(   nodes,   types,   edge.per.step = 1,   type.dist = rep(1, types),   pref.matrix = matrix(1, types, types),   directed = FALSE )  traits_callaway(...)  sample_traits(   nodes,   types,   k = 1,   type.dist = rep(1, types),   pref.matrix = matrix(1, types, types),   directed = FALSE )  traits(...)"},{"path":"/reference/sample_traits_callaway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph generation based on different vertex types — sample_traits_callaway","text":"nodes number vertices graph. types number different vertex types. edge.per.step number edges add graph per time step. type.dist distribution vertex types. assumed stationary time. pref.matrix matrix giving preferences given vertex types. probabilities, ie. numbers zero one. directed Logical constant, whether generate directed graphs. ... Passed constructor, sample_traits() sample_traits_callaway(). k number trials per time step, see details .","code":""},{"path":"/reference/sample_traits_callaway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph generation based on different vertex types — sample_traits_callaway","text":"new graph object.","code":""},{"path":"/reference/sample_traits_callaway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph generation based on different vertex types — sample_traits_callaway","text":"sample_traits_callaway() simulation goes like : discrete time step new vertex added graph. type vertex generated based type.dist. two vertices selected uniformly randomly graph. probability connected depends types vertices taken pref.matrix. another two vertices selected repeated edges.per.step times time step. sample_traits() simulation goes like : single vertex added time step. new vertex tries connect k vertices graph. probability connection realized depends types vertices involved taken pref.matrix.","code":""},{"path":[]},{"path":"/reference/sample_traits_callaway.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Graph generation based on different vertex types — sample_traits_callaway","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/sample_traits_callaway.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph generation based on different vertex types — sample_traits_callaway","text":"","code":"# two types of vertices, they like only themselves g1 <- sample_traits_callaway(1000, 2, pref.matrix = matrix(c(1, 0, 0, 1), ncol = 2)) g2 <- sample_traits(1000, 2, k = 2, pref.matrix = matrix(c(1, 0, 0, 1), ncol = 2))"},{"path":"/reference/sample_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample trees randomly and uniformly — sample_tree","title":"Sample trees randomly and uniformly — sample_tree","text":"sample_tree() generates random given number nodes uniform random set labelled trees.","code":""},{"path":"/reference/sample_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample trees randomly and uniformly — sample_tree","text":"","code":"sample_tree(n, directed = FALSE, method = c(\"lerw\", \"prufer\"))"},{"path":"/reference/sample_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample trees randomly and uniformly — sample_tree","text":"n number nodes tree directed Whether create directed tree. edges tree oriented away root. method algorithm use generate tree. ‘prufer’ samples Prufer sequences uniformly converts sampled sequence tree. ‘lerw’ performs loop-erased random walk complete graph uniformly sampleits spanning trees. (also known Wilson's algorithm). default ‘lerw’. Note method based Prufer sequences support directed trees moment.","code":""},{"path":"/reference/sample_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample trees randomly and uniformly — sample_tree","text":"graph object.","code":""},{"path":"/reference/sample_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample trees randomly and uniformly — sample_tree","text":"words, function generates possible labelled tree given number nodes probability.","code":""},{"path":"/reference/sample_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample trees randomly and uniformly — sample_tree","text":"","code":"g <- sample_tree(100, method = \"lerw\")"},{"path":"/reference/scan_stat.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan statistics on a time series of graphs — scan_stat","title":"Scan statistics on a time series of graphs — scan_stat","text":"Calculate scan statistics time series graphs. done calculating local scan statistics graph vertex, normalizing across vertices across time steps.","code":""},{"path":"/reference/scan_stat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan statistics on a time series of graphs — scan_stat","text":"","code":"scan_stat(graphs, tau = 1, ell = 0, locality = c(\"us\", \"them\"), ...)"},{"path":"/reference/scan_stat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan statistics on a time series of graphs — scan_stat","text":"graphs list igraph graph objects. must directed undirected must number vertices. tau number previous time steps consider time-dependent normalization individual vertices.  words, current locality statistics vertex compared many previous time steps vertex decide whether significantly larger. ell number previous time steps consider aggregated scan statistics. essentially smoothing parameter. locality Whether calculate ‘us’ ‘’ statistics. ... Extra arguments passed local_scan().","code":""},{"path":"/reference/scan_stat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scan statistics on a time series of graphs — scan_stat","text":"list entries: stat scan statistics time step. NA initial tau + ell time steps. arg_max_v (numeric) vertex ids vertex largest locality statistics, time step. NA initial tau + ell time steps.","code":""},{"path":[]},{"path":"/reference/scan_stat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scan statistics on a time series of graphs — scan_stat","text":"","code":"## Generate a bunch of SBMs, with the last one being different num_t <- 20 block_sizes <- c(10, 5, 5) p_ij <- list(p = 0.1, h = 0.9, q = 0.9)  P0 <- matrix(p_ij$p, 3, 3) P0[2, 2] <- p_ij$h PA <- P0 PA[3, 3] <- p_ij$q num_v <- sum(block_sizes)  tsg <- replicate(num_t - 1, P0, simplify = FALSE) %>%   append(list(PA)) %>%   lapply(sample_sbm, n = num_v, block.sizes = block_sizes, directed = TRUE)  scan_stat(graphs = tsg, k = 1, tau = 4, ell = 2) #> $stat #>  [1]         NA         NA         NA         NA         NA         NA #>  [7]  1.3471458  0.2943034  1.1096475  0.3030458 -2.2500000 -2.6320086 #> [13]  3.5643954 -0.6770680 -0.2154841  0.8334852 -0.6250000 -1.3750000 #> [19]  2.7500000  8.2133172 #>  #> $arg_max_v #>  [1] NA NA NA NA NA NA  4  8 16  3 19 13 12 14  7  8 10  1 20 19 #>  scan_stat(graphs = tsg, locality = \"them\", k = 1, tau = 4, ell = 2) #> $stat #>  [1]          NA          NA          NA          NA          NA          NA #>  [7]  3.41768278 -0.42260230 -0.71067604  0.24853882  0.37867966 -2.62500000 #> [13]  0.06428243  0.70710678 -0.75000000  1.62500000  1.23743687 -1.12500000 #> [19] -0.47140452 10.87500000 #>  #> $arg_max_v #>  [1] NA NA NA NA NA NA  4  8 10 14  4  2 11  7 16  2  3 18 20 17 #>"},{"path":"/reference/scg-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral Coarse Graining — scg-method","title":"Spectral Coarse Graining — scg-method","text":"Functions perform Spectral Coarse Graining (SCG) matrices graphs.","code":""},{"path":"/reference/scg-method.html","id":"introduction","dir":"Reference","previous_headings":"","what":"Introduction","title":"Spectral Coarse Graining — scg-method","text":"SCG functions provide framework, called Spectral Coarse Graining (SCG), reducing large graphs preserving spectral-related features, features closely related eigenvalues eigenvectors graph matrix (now can adjacency, stochastic, Laplacian matrix). Common examples features comprise first-passage-time random walkers Markovian graphs, thermodynamic properties lattice models statistical physics (e.g. Ising model), epidemic threshold epidemic network models (SIR SIS models). SCG differs traditional clustering schemes producing coarse-grained graph (just partition vertices), representative original one. shown [1], Principal Component Analysis can viewed particular SCG, called exact SCG, matrix coarse-grained covariance matrix data set. SCG interest practitioners various fields dealing problems matrix eigenpairs play important role, instance case dynamical processes networks.","code":""},{"path":"/reference/scg-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spectral Coarse Graining — scg-method","text":"D. Morton de Lachapelle, D. Gfeller, P. De Los Rios, Shrinking Matrices Preserving Eigenpairs Application Spectral Coarse Graining Graphs. Submitted SIAM Journal Matrix Analysis Applications, 2008. http://people.epfl.ch/david.morton D. Gfeller, P. De Los Rios, Spectral Coarse Graining Synchronization Oscillator Networks. Physical Review Letters, 100(17), 2008.  https://arxiv.org/abs/0708.2055 D. Gfeller, P. De Los Rios, Spectral Coarse Graining Complex Networks, Physical Review Letters, 99(3), 2007. https://arxiv.org/abs/0706.0812","code":""},{"path":"/reference/scg-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spectral Coarse Graining — scg-method","text":"David Morton de Lachapelle, http://people.epfl.ch/david.morton.","code":""},{"path":"/reference/scg.html","id":null,"dir":"Reference","previous_headings":"","what":"All-in-one Function for the SCG of Matrices and Graphs — scg","title":"All-in-one Function for the SCG of Matrices and Graphs — scg","text":"function handles steps involved Spectral Coarse Graining (SCG) matrices graphs described reference .","code":""},{"path":"/reference/scg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All-in-one Function for the SCG of Matrices and Graphs — scg","text":"","code":"scg(   X,   ev,   nt,   groups = NULL,   mtype = c(\"symmetric\", \"laplacian\", \"stochastic\"),   algo = c(\"optimum\", \"interv_km\", \"interv\", \"exact_scg\"),   norm = c(\"row\", \"col\"),   direction = c(\"default\", \"left\", \"right\"),   evec = NULL,   p = NULL,   use.arpack = FALSE,   maxiter = 300,   sparse = igraph_opt(\"sparsematrices\"),   output = c(\"default\", \"matrix\", \"graph\"),   semproj = FALSE,   epairs = FALSE,   stat.prob = FALSE )"},{"path":"/reference/scg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All-in-one Function for the SCG of Matrices and Graphs — scg","text":"X input graph square matrix. Can class igraph, matrix Matrix. ev vector positive integers giving indexes eigenpairs preserved. real eigenpairs, 1 designates eigenvalue largest algebraic value, 2 one second largest algebraic value, etc. complex case, magnitude matters. nt vector positive integers length one equal length(ev). algo = “optimum”, nt contains number groups used partition eigenvector separately. algo equal “interv_km” “interv”, nt contains number intervals used partition eigenvector. partition size number intervals used eigenvector nt single integer. algo = “exact_cg” parameter ignored. groups vector nrow(X) vcount(X) integers labeling group vertex partition. parameter supplied part function bypassed. mtype Character scalar. type semi-projector used SCG. now “symmetric”, “laplacian” “stochastic” available. algo Character scalar. algorithm used solve SCG problem. Possible values “optimum”, “interv_km”, “interv” “exact_scg”. norm Character scalar. Either “row” “col”. set “row” rows Laplacian matrix sum zero rows stochastic matrix sum one; otherwise columns. direction Character scalar. set “right”, resp. “left”, parameters ev evec refer right, resp. left eigenvectors. passed “default” SCG described reference applied (common usage). argument currently implemented, right eigenvectors always used. evec numeric matrix (eigen)vectors preserved coarse graining (vectors stored column-wise evec). supplied, eigenvectors correspond indexes ev cross-check done. p probability vector length nrow(X) (vcount(X)). p stationary probability distribution Markov chain mtype = “stochastic”. parameter ignored cases. use.arpack Logical scalar. set TRUE uses function arpack() compute eigenpairs. parameter set TRUE one deals large (thousands) sparse graphs matrices. argument implemented currently LAPACK used solving eigenproblems. maxiter positive integer giving maximum number iterations k-means algorithm algo = “interv_km”. parameter ignored cases. sparse Logical scalar. Whether return sparse matrices result, matrices requested. output Character scalar. Set parameter “default” retrieve coarse-grained object class X. semproj Logical scalar. Set parameter TRUE retrieve semi-projectors SCG. epairs Logical scalar. Set TRUE collect eigenpairs computed scg(). stat.prob Logical scalar. collect stationary probability p dealing stochastic matrices.","code":""},{"path":"/reference/scg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All-in-one Function for the SCG of Matrices and Graphs — scg","text":"Xt coarse-grained graph, matrix, possibly sparse matrix. groups vector nrow(X) vcount(X) integers giving group label object (vertex) partition. L semi-projector \\(L\\) semproj = TRUE. R semi-projector \\(R\\) semproj = TRUE. values computed eigenvalues epairs = TRUE. vectors computed supplied eigenvectors epairs = TRUE. p stationary probability vector mtype = stochastic stat.prob = TRUE. matrix types missing.","code":""},{"path":"/reference/scg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"All-in-one Function for the SCG of Matrices and Graphs — scg","text":"Please see scg-method introduction. following \\(V\\) matrix eigenvectors SCG solved. \\(V\\) calculated X, given evec argument. algorithm “optimum” solves exactly SCG problem eigenvector V. running time algorithm \\(O(\\max nt \\cdot m^2)\\) symmetric laplacian matrix problems (.e. mtype “symmetric” “laplacian”. \\(O(m^3)\\) stochastic problem. \\(m\\) number rows V.  three cases, memory usage \\(O(m^2)\\). algorithms “interv” “interv_km” solve approximately SCG problem performing (now) constant binning components eigenvectors, nt[] constant-size bins used partition V[,]. algo = “interv_km”, (Lloyd) k-means algorithm run partition obtained “interv” improve accuracy. minimizing partition (either exact approximate) found eigenvector, final grouping worked follows: two vertices grouped together final partition grouped together minimizing partition. general size final partition known advance ncol(V)>1. Finally, algorithm “exact_scg” groups vertices equal components eigenvector. last three algorithms essentially linear running time memory load.","code":""},{"path":"/reference/scg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"All-in-one Function for the SCG of Matrices and Graphs — scg","text":"D. Morton de Lachapelle, D. Gfeller, P. De Los Rios, Shrinking Matrices Preserving Eigenpairs Application Spectral Coarse Graining Graphs. Submitted SIAM Journal Matrix Analysis Applications, 2008. http://people.epfl.ch/david.morton","code":""},{"path":[]},{"path":"/reference/scg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"All-in-one Function for the SCG of Matrices and Graphs — scg","text":"David Morton de Lachapelle, http://people.epfl.ch/david.morton.","code":""},{"path":"/reference/scg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All-in-one Function for the SCG of Matrices and Graphs — scg","text":"","code":"## We are not running these examples any more, because they ## take a long time (~20 seconds) to run and this is against the CRAN ## repository policy. Copy and paste them by hand to your R prompt if ## you want to run them.  # SCG of a toy network g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5) g <- add_edges(g, c(1, 6, 1, 11, 6, 11)) cg <- scg(g, 1, 3, algo = \"exact_scg\")  # plot the result layout <- layout_with_kk(g) nt <- vcount(cg$Xt) col <- rainbow(nt) vsize <- table(cg$groups) ewidth <- round(E(cg$Xt)$weight, 2)  op <- par(mfrow = c(1, 2)) plot(g,   vertex.color = col[cg$groups], vertex.size = 20,   vertex.label = NA, layout = layout ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' plot(cg$Xt,   edge.width = ewidth, edge.label = ewidth,   vertex.color = col, vertex.size = 20 * vsize / max(vsize),   vertex.label = NA, layout = layout_with_kk ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' par(op)  ## SCG of real-world network library(igraphdata) data(immuno) summary(immuno) #> IGRAPH 46d8c3f U--- 1316 6300 -- immunoglobuline network #> + attr: name (g/c), Citation (g/c), Author (g/c) n <- vcount(immuno) interv <- c(100, 100, 50, 25, 12, 6, 3, 2, 2) cg <- scg(immuno,   ev = n - (1:9), nt = interv, mtype = \"laplacian\",   algo = \"interv\", epairs = TRUE )  ## are the eigenvalues well-preserved? gt <- cg$Xt nt <- vcount(gt) Lt <- laplacian_matrix(gt) evalt <- eigen(Lt, only.values = TRUE)$values[nt - (1:9)] res <- cbind(interv, cg$values, evalt) res <- round(res, 5) colnames(res) <- c(\"interv\", \"lambda_i\", \"lambda_tilde_i\") rownames(res) <- c(\"N-1\", \"N-2\", \"N-3\", \"N-4\", \"N-5\", \"N-6\", \"N-7\", \"N-8\", \"N-9\") print(res) #>     interv   lambda_i lambda_tilde_i #> N-1 100+0i 0.00221+0i     0.00223+0i #> N-2 100+0i 0.00276+0i     0.00280+0i #> N-3  50+0i 0.03602+0i     0.03694+0i #> N-4  25+0i 0.03830+0i     0.04094+0i #> N-5  12+0i 0.07111+0i     0.07765+0i #> N-6   6+0i 0.07850+0i     0.08783+0i #> N-7   3+0i 0.20293+0i     0.20870+0i #> N-8   2+0i 0.21540+0i     0.34227+0i #> N-9   2+0i 0.22132+0i     0.41807+0i  ## use SCG to get the communities com <- scg(laplacian_matrix(immuno), ev = n - c(1, 2), nt = 2)$groups col <- rainbow(max(com)) layout <- layout_nicely(immuno)  plot(immuno,   layout = layout, vertex.size = 3, vertex.color = col[com],   vertex.label = NA ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ## display the coarse-grained graph gt <- simplify(as.undirected(gt)) layout.cg <- layout_with_kk(gt) com.cg <- scg(laplacian_matrix(gt), nt - c(1, 2), 2)$groups vsize <- sqrt(as.vector(table(cg$groups)))  op <- par(mfrow = c(1, 2)) plot(immuno,   layout = layout, vertex.size = 3, vertex.color = col[com],   vertex.label = NA ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' plot(gt,   layout = layout.cg, vertex.size = 15 * vsize / max(vsize),   vertex.color = col[com.cg], vertex.label = NA ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' par(op)"},{"path":"/reference/scg_eps.html","id":null,"dir":"Reference","previous_headings":"","what":"Error of the spectral coarse graining (SCG) approximation — scg_eps","title":"Error of the spectral coarse graining (SCG) approximation — scg_eps","text":"scg_eps() computes \\(\\Vert v_i-Pv_i\\Vert\\), \\(v_i\\) \\(\\)th eigenvector V \\(P\\) projector corresponding mtype argument.","code":""},{"path":"/reference/scg_eps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error of the spectral coarse graining (SCG) approximation — scg_eps","text":"","code":"scg_eps(   V,   groups,   mtype = c(\"symmetric\", \"laplacian\", \"stochastic\"),   p = NULL,   norm = c(\"row\", \"col\") )"},{"path":"/reference/scg_eps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error of the spectral coarse graining (SCG) approximation — scg_eps","text":"V numeric matrix (eigen)vectors assumed normalized.  vectors stored column-wise V). groups vector nrow(V) integers labeling group vertex partition. mtype type semi-projector used SCG. now “symmetric”, “laplacian” “stochastic” available. p probability vector length nrow(V).  p stationary probability distribution Markov chain mtype = “stochastic”. parameter ignored otherwise. norm Either “row” “col”. set “row” rows Laplacian matrix sum zero rows stochastic matrix sum one; otherwise columns.","code":""},{"path":"/reference/scg_eps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error of the spectral coarse graining (SCG) approximation — scg_eps","text":"scg_eps() returns numeric vector whose \\(\\)th component \\(\\Vert v_i-Pv_i\\Vert\\) (see Details).","code":""},{"path":"/reference/scg_eps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Error of the spectral coarse graining (SCG) approximation — scg_eps","text":"D. Morton de Lachapelle, D. Gfeller, P. De Los Rios, Shrinking Matrices Preserving Eigenpairs Application Spectral Coarse Graining Graphs. Submitted SIAM Journal Matrix Analysis Applications, 2008. http://people.epfl.ch/david.morton","code":""},{"path":[]},{"path":"/reference/scg_eps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Error of the spectral coarse graining (SCG) approximation — scg_eps","text":"David Morton de Lachapelle, http://people.epfl.ch/david.morton.","code":""},{"path":"/reference/scg_eps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error of the spectral coarse graining (SCG) approximation — scg_eps","text":"","code":"v <- rexp(20) km <- kmeans(v, 5) sum(km$withinss) #> [1] 1.271995 scg_eps(cbind(v), km$cluster)^2 #> [1] 1.271995"},{"path":"/reference/scg_group.html","id":null,"dir":"Reference","previous_headings":"","what":"SCG Problem Solver — scg_group","title":"SCG Problem Solver — scg_group","text":"function solves Spectral Coarse Graining (SCG) problem; either exactly, approximately faster.","code":""},{"path":"/reference/scg_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SCG Problem Solver — scg_group","text":"","code":"scg_group(   V,   nt,   mtype = c(\"symmetric\", \"laplacian\", \"stochastic\"),   algo = c(\"optimum\", \"interv_km\", \"interv\", \"exact_scg\"),   p = NULL,   maxiter = 100 )"},{"path":"/reference/scg_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCG Problem Solver — scg_group","text":"V numeric matrix (eigen)vectors preserved coarse graining (vectors stored column-wise V). nt vector positive integers length one equal length(ev). algo = “optimum”, nt contains number groups used partition eigenvector separately. algo equal “interv_km” “interv”, nt contains number intervals used partition eigenvector. partition size number intervals used eigenvector nt single integer. algo = “exact_cg” parameter ignored. mtype type semi-projectors used SCG. now “symmetric”, “laplacian” “stochastic” available. algo algorithm used solve SCG problem. Possible values “optimum”, “interv_km”, “interv” “exact_scg”. p probability vector length equal nrow(V). p stationary probability distribution Markov chain mtype = “stochastic”. parameter ignored cases. maxiter positive integer giving maximum number iterations k-means algorithm algo = “interv_km”. parameter ignored cases.","code":""},{"path":"/reference/scg_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SCG Problem Solver — scg_group","text":"vector nrow(V) integers giving group label object (vertex) partition.","code":""},{"path":"/reference/scg_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SCG Problem Solver — scg_group","text":"algorithm “optimum” solves exactly SCG problem eigenvector V. running time algorithm \\(O(\\max nt \\cdot m^2)\\) symmetric laplacian matrix problems (.e. mtype “symmetric” “laplacian”. \\(O(m^3)\\) stochastic problem. \\(m\\) number rows V.  three cases, memory usage \\(O(m^2)\\). algorithms “interv” “interv_km” solve approximately SCG problem performing (now) constant binning components eigenvectors, nt[] constant-size bins used partition V[,]. algo = “interv_km”, (Lloyd) k-means algorithm run partition obtained “interv” improve accuracy. minimizing partition (either exact approximate) found eigenvector, final grouping worked follows: two vertices grouped together final partition grouped together minimizing partition. general size final partition known advance ncol(V)>1. Finally, algorithm “exact_scg” groups vertices equal components eigenvector. last three algorithms essentially linear running time memory load.","code":""},{"path":"/reference/scg_group.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SCG Problem Solver — scg_group","text":"D. Morton de Lachapelle, D. Gfeller, P. De Los Rios, Shrinking Matrices Preserving Eigenpairs Application Spectral Coarse Graining Graphs. Submitted SIAM Journal Matrix Analysis Applications, 2008. http://people.epfl.ch/david.morton","code":""},{"path":[]},{"path":"/reference/scg_group.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SCG Problem Solver — scg_group","text":"David Morton de Lachapelle david.morton@epfl.ch, david.mortondelachapelle@swissquote.ch","code":""},{"path":"/reference/scg_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SCG Problem Solver — scg_group","text":"","code":"## We are not running these examples any more, because they ## take a long time to run and this is against the CRAN repository ## policy. Copy and paste them by hand to your R prompt if ## you want to run them.  # eigenvectors of a random symmetric matrix M <- matrix(rexp(10^6), 10^3, 10^3) M <- (M + t(M)) / 2 V <- eigen(M, symmetric = TRUE)$vectors[, c(1, 2)]  # displays size of the groups in the final partition gr <- scg_group(V, nt = c(2, 3)) col <- rainbow(max(gr)) plot(table(gr), col = col, main = \"Group size\", xlab = \"group\", ylab = \"size\")   ## comparison with the grouping obtained by kmeans ## for a partition of same size gr.km <- kmeans(V, centers = max(gr), iter.max = 100, nstart = 100)$cluster op <- par(mfrow = c(1, 2)) plot(V[, 1], V[, 2],   col = col[gr],   main = \"SCG grouping\",   xlab = \"1st eigenvector\",   ylab = \"2nd eigenvector\" ) plot(V[, 1], V[, 2],   col = col[gr.km],   main = \"K-means grouping\",   xlab = \"1st eigenvector\",   ylab = \"2nd eigenvector\" )  par(op) ## kmeans disregards the first eigenvector as it ## spreads a much smaller range of values than the second one  ### comparing optimal and k-means solutions ### in the one-dimensional case. x <- rexp(2000, 2) gr.true <- scg_group(cbind(x), 100) gr.km <- kmeans(x, 100, 100, 300)$cluster scg_eps(cbind(x), gr.true) #> [1] 0.232753 scg_eps(cbind(x), gr.km) #> [1] 0.6845352"},{"path":"/reference/scg_semi_proj.html","id":null,"dir":"Reference","previous_headings":"","what":"Semi-Projectors — scg_semi_proj","title":"Semi-Projectors — scg_semi_proj","text":"function compute \\(L\\) \\(R\\) semi-projectors given partition vertices.","code":""},{"path":"/reference/scg_semi_proj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Semi-Projectors — scg_semi_proj","text":"","code":"scg_semi_proj(   groups,   mtype = c(\"symmetric\", \"laplacian\", \"stochastic\"),   p = NULL,   norm = c(\"row\", \"col\"),   sparse = igraph_opt(\"sparsematrices\") )"},{"path":"/reference/scg_semi_proj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Semi-Projectors — scg_semi_proj","text":"groups vector nrow(X) vcount(X) integers giving group label every vertex partition. mtype type semi-projectors. now “symmetric”, “laplacian” “stochastic” available. p probability vector length length(gr). p stationary probability distribution Markov chain mtype = “stochastic”. parameter ignored cases. norm Either “row” “col”. set “row” rows Laplacian matrix sum zero rows stochastic sum one; otherwise columns. sparse Logical scalar, whether return sparse matrices.","code":""},{"path":"/reference/scg_semi_proj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Semi-Projectors — scg_semi_proj","text":"L semi-projector \\(L\\). R semi-projector \\(R\\).","code":""},{"path":"/reference/scg_semi_proj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Semi-Projectors — scg_semi_proj","text":"three types semi-projectors defined follows.  Let \\(\\gamma(j)\\) label group vertex \\(j\\) partition vertices. symmetric semi-projectors defined $$L_{\\alpha j}=R_{\\alpha j}= $$$$ \\frac{1}{\\sqrt{|\\alpha|}}\\delta_{\\alpha\\gamma(j)},$$ (row) Laplacian semi-projectors $$L_{\\alpha j}=\\frac{1}{|\\alpha|}\\delta_{\\alpha\\gamma(j)}\\,\\,\\,\\, $$$$ \\textrm{}\\,\\,\\,\\, R_{\\alpha j}=\\delta_{\\alpha\\gamma(j)},$$ (row) stochastic semi-projectors $$L_{\\alpha j}=\\frac{p_{1}(j)}{\\sum_{k\\\\gamma(j)}p_{1}(k)}\\,\\,\\,\\, $$$$ \\textrm{}\\,\\,\\,\\, R_{\\alpha j}=\\delta_{\\alpha\\gamma(j)\\delta_{\\alpha\\gamma(j)}},$$ \\(p_1\\) (left) eigenvector associated one-eigenvalue stochastic matrix. \\(L\\) \\(R\\) defined symmetric way norm = col. semi-projectors verify various properties described reference.","code":""},{"path":"/reference/scg_semi_proj.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Semi-Projectors — scg_semi_proj","text":"D. Morton de Lachapelle, D. Gfeller, P. De Los Rios, Shrinking Matrices Preserving Eigenpairs Application Spectral Coarse Graining Graphs. Submitted SIAM Journal Matrix Analysis Applications, 2008. http://people.epfl.ch/david.morton","code":""},{"path":[]},{"path":"/reference/scg_semi_proj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Semi-Projectors — scg_semi_proj","text":"David Morton de Lachapelle, http://people.epfl.ch/david.morton.","code":""},{"path":"/reference/scg_semi_proj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Semi-Projectors — scg_semi_proj","text":"","code":"library(Matrix) # compute the semi-projectors and projector for the partition # provided by a community detection method g <- sample_pa(20, m = 1.5, directed = FALSE) eb <- cluster_edge_betweenness(g) memb <- membership(eb) lr <- scg_semi_proj(memb) # In the symmetric case L = R tcrossprod(lr$R) # same as lr$R %*% t(lr$R) #> 5 x 5 sparse Matrix of class \"dsCMatrix\" #>                #> [1,] 1 . . . . #> [2,] . 1 . . . #> [3,] . . 1 . . #> [4,] . . . 1 . #> [5,] . . . . 1 P <- crossprod(lr$R) # same as t(lr$R) %*% lr$R # P is an orthogonal projector isSymmetric(P) #> [1] TRUE sum((P %*% P - P)^2) #> [1] 1.556151e-31  ## use L and R to coarse-grain the graph Laplacian lr <- scg_semi_proj(memb, mtype = \"laplacian\") L <- laplacian_matrix(g) Lt <- lr$L %*% L %*% t(lr$R) ## or better lr$L %*% tcrossprod(L,lr$R) rowSums(Lt) #> [1] 0.000000e+00 2.220446e-16 0.000000e+00 0.000000e+00 5.551115e-17"},{"path":"/reference/sequential_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential palette — sequential_pal","title":"Sequential palette — sequential_pal","text":"‘OrRd’ palette https://colorbrewer2.org/. nine colors.","code":""},{"path":"/reference/sequential_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential palette — sequential_pal","text":"","code":"sequential_pal(n)"},{"path":"/reference/sequential_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential palette — sequential_pal","text":"n number colors palette. maximum nine currently.","code":""},{"path":"/reference/sequential_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential palette — sequential_pal","text":"character vector RGB color codes.","code":""},{"path":"/reference/sequential_pal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequential palette — sequential_pal","text":"Use palette, vertex colors mark ordinal quantity, e.g. centrality measure, ordinal vertex covariate, like age people, seniority level.","code":""},{"path":[]},{"path":"/reference/sequential_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential palette — sequential_pal","text":"","code":"library(igraphdata) data(karate) karate <- karate %>%   add_layout_(with_kk()) %>%   set_vertex_attr(\"size\", value = 10)  V(karate)$color <- scales::dscale(degree(karate) %>% cut(5), sequential_pal) plot(karate) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/set_edge_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set edge attributes — set_edge_attr","title":"Set edge attributes — set_edge_attr","text":"Set edge attributes","code":""},{"path":"/reference/set_edge_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set edge attributes — set_edge_attr","text":"","code":"set_edge_attr(graph, name, index = E(graph), value)"},{"path":"/reference/set_edge_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set edge attributes — set_edge_attr","text":"graph graph name name attribute set. index optional edge sequence set attributes subset edges. value new value attribute (index) edges.","code":""},{"path":"/reference/set_edge_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set edge attributes — set_edge_attr","text":"graph, edge attribute added set.","code":""},{"path":[]},{"path":"/reference/set_edge_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set edge attributes — set_edge_attr","text":"","code":"g <- make_ring(10) %>%   set_edge_attr(\"label\", value = LETTERS[1:10]) g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> [[9]][[4]]$label #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #>  #>  #> [[10]] #> <environment: 0x564cc06dbfc8> #>  #> attr(,\"class\") #> [1] \"igraph\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/set_graph_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a graph attribute — set_graph_attr","title":"Set a graph attribute — set_graph_attr","text":"existing attribute name overwritten.","code":""},{"path":"/reference/set_graph_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a graph attribute — set_graph_attr","text":"","code":"set_graph_attr(graph, name, value)"},{"path":"/reference/set_graph_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a graph attribute — set_graph_attr","text":"graph graph. name name attribute set. value New value attribute.","code":""},{"path":"/reference/set_graph_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a graph attribute — set_graph_attr","text":"graph new graph attribute added set.","code":""},{"path":[]},{"path":"/reference/set_graph_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a graph attribute — set_graph_attr","text":"","code":"g <- make_ring(10) %>%   set_graph_attr(\"layout\", layout_with_fr) g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #> [[9]][[2]]$layout #> function (graph, coords = NULL, dim = 2, niter = 500, start.temp = sqrt(vcount(graph)),  #>     grid = c(\"auto\", \"grid\", \"nogrid\"), weights = NULL, minx = NULL,  #>     maxx = NULL, miny = NULL, maxy = NULL, minz = NULL, maxz = NULL,  #>     coolexp, maxdelta, area, repulserad, maxiter)  #> { #>     if (!is_igraph(graph)) { #>         stop(\"Not a graph object\") #>     } #>     if (!is.null(coords)) { #>         coords <- as.matrix(structure(as.double(coords), dim = dim(coords))) #>     } #>     dim <- as.integer(dim) #>     if (dim != 2L && dim != 3L) { #>         stop(\"Dimension must be two or three\") #>     } #>     if (!missing(niter) && !missing(maxiter)) { #>         stop(\"Both `niter' and `maxiter' are given, give only one of them\") #>     } #>     if (!missing(maxiter))  #>         niter <- maxiter #>     niter <- as.integer(niter) #>     start.temp <- as.numeric(start.temp) #>     grid <- igraph.match.arg(grid) #>     grid <- switch(grid, grid = 0L, nogrid = 1L, auto = 2L) #>     if (is.null(weights) && \"weight\" %in% edge_attr_names(graph)) { #>         weights <- E(graph)$weight #>     } #>     if (!is.null(weights) && any(!is.na(weights))) { #>         weights <- as.numeric(weights) #>     } #>     else { #>         weights <- NULL #>     } #>     if (!is.null(minx))  #>         minx <- as.numeric(minx) #>     if (!is.null(maxx))  #>         maxx <- as.numeric(maxx) #>     if (!is.null(miny))  #>         miny <- as.numeric(miny) #>     if (!is.null(maxy))  #>         maxy <- as.numeric(maxy) #>     if (!is.null(minz))  #>         minz <- as.numeric(minz) #>     if (!is.null(maxz))  #>         maxz <- as.numeric(maxz) #>     if (!missing(coolexp)) { #>         warning(\"Argument `coolexp' is deprecated and has no effect\") #>     } #>     if (!missing(maxdelta)) { #>         warning(\"Argument `maxdelta' is deprecated and has no effect\") #>     } #>     if (!missing(area)) { #>         warning(\"Argument `area' is deprecated and has no effect\") #>     } #>     if (!missing(repulserad)) { #>         warning(\"Argument `repulserad' is deprecated and has no effect\") #>     } #>     on.exit(.Call(C_R_igraph_finalizer)) #>     if (dim == 2) { #>         res <- .Call(C_R_igraph_layout_fruchterman_reingold,  #>             graph, coords, niter, start.temp, weights, minx,  #>             maxx, miny, maxy, grid) #>     } #>     else { #>         res <- .Call(C_R_igraph_layout_fruchterman_reingold_3d,  #>             graph, coords, niter, start.temp, weights, minx,  #>             maxx, miny, maxy, minz, maxz) #>     } #>     res #> } #> <bytecode: 0x564cbdba4ea0> #> <environment: namespace:igraph> #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbc5f9db8> #>  #> attr(,\"class\") #> [1] \"igraph\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/set_vertex_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set vertex attributes — set_vertex_attr","title":"Set vertex attributes — set_vertex_attr","text":"Set vertex attributes","code":""},{"path":"/reference/set_vertex_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set vertex attributes — set_vertex_attr","text":"","code":"set_vertex_attr(graph, name, index = V(graph), value)"},{"path":"/reference/set_vertex_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set vertex attributes — set_vertex_attr","text":"graph graph. name name attribute set. index optional vertex sequence set attributes subset vertices. value new value attribute (index) vertices.","code":""},{"path":"/reference/set_vertex_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set vertex attributes — set_vertex_attr","text":"graph, vertex attribute added set.","code":""},{"path":[]},{"path":"/reference/set_vertex_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set vertex attributes — set_vertex_attr","text":"","code":"g <- make_ring(10) %>%   set_vertex_attr(\"label\", value = LETTERS[1:10]) g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$label #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb91f71b8> #>  #> attr(,\"class\") #> [1] \"igraph\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Various vertex shapes when plotting igraph graphs — shapes","title":"Various vertex shapes when plotting igraph graphs — shapes","text":"Starting version 0.5.1 igraph supports different vertex shapes plotting graphs.","code":""},{"path":"/reference/shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various vertex shapes when plotting igraph graphs — shapes","text":"","code":"shapes(shape = NULL)  shape_noclip(coords, el, params, end = c(\"both\", \"from\", \"to\"))  shape_noplot(coords, v = NULL, params)  add_shape(shape, clip = shape_noclip, plot = shape_noplot, parameters = list())"},{"path":"/reference/shapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various vertex shapes when plotting igraph graphs — shapes","text":"shape Character scalar, name vertex shape. NULL shapes(), names defined vertex shapes returned. coords, el, params, end, v See parameters clipping/plotting functions . clip R function object, clipping function. plot R function object, plotting function. parameters Named list, additional plot/vertex/edge parameters. element named define new parameters, elements define default values. Vertex parameters prefix ‘vertex.’, edge parameters prefix ‘edge.’. general plotting parameters prefix ‘plot.’. See Details .","code":""},{"path":"/reference/shapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various vertex shapes when plotting igraph graphs — shapes","text":"shapes() returns character vector shape argument NULL. returns named list entries named ‘clip’ ‘plot’, R functions. add_shape() returns TRUE, invisibly. shape_noclip() returns appropriate columns coords argument.","code":""},{"path":"/reference/shapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Various vertex shapes when plotting igraph graphs — shapes","text":"igraph vertex shape defined two functions: 1) provides information size shape clipping edges 2) plots shape requested. functions called “shape functions” rest manual page. first one clipping function second plotting function. clipping function following arguments: coords matrix four columns, contains coordinates vertices edge list supplied el argument. el matrix two columns, edges end points clipped. number rows coords. params function object can called query vertex/edge/plot graphical parameters. first argument function “vertex”, “edge” “plot” decide type parameter, second character string giving name parameter. E.g. end Character string, gives end points used. Possible values “”, “” “”. “” function expected clip first column el edge list, “” selects second column, “” selects . clipping function return matrix number rows el arguments. end matrix must four columns, otherwise two. matrix contains modified coordinates, clipping applied. plotting function following arguments: coords coordinates vertices, matrix two columns. v ids vertices plot. match number rows coords argument. params clipping function, see . return value plotting function used. shapes() can used list names installed vertex shapes, calling without arguments, setting shape argument NULL. shape name given, clipping plotting functions shape returned named list. add_shape() can used add new vertex shapes igraph. one must give clipping plotting functions new shape. also possible list plot/vertex/edge parameters, parameters argument, clipping /plotting functions can make use . example generic regular polygon shape, can parameter number sides. shape_noclip() simple clipping function user can use shape definitions. clipping, edges drawn exactly listed vertex position coordinates. shape_noplot() simple (probably useful) plotting function, plot anything.","code":"params(\"vertex\", \"size\")"},{"path":"/reference/shapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various vertex shapes when plotting igraph graphs — shapes","text":"","code":"# all vertex shapes, minus \"raster\", that might not be available shapes <- setdiff(shapes(), \"\") g <- make_ring(length(shapes)) set.seed(42) plot(g,   vertex.shape = shapes, vertex.label = shapes, vertex.label.dist = 1,   vertex.size = 15, vertex.size2 = 15,   vertex.pie = lapply(shapes, function(x) if (x == \"pie\") 2:6 else 0),   vertex.pie.color = list(heat.colors(5)) ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  # add new vertex shape, plot nothing with no clipping add_shape(\"nil\") plot(g, vertex.shape = \"nil\") #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ################################################################# # triangle vertex shape mytriangle <- function(coords, v = NULL, params) {   vertex.color <- params(\"vertex\", \"color\")   if (length(vertex.color) != 1 && !is.null(v)) {     vertex.color <- vertex.color[v]   }   vertex.size <- 1 / 200 * params(\"vertex\", \"size\")   if (length(vertex.size) != 1 && !is.null(v)) {     vertex.size <- vertex.size[v]   }    symbols(     x = coords[, 1], y = coords[, 2], bg = vertex.color,     stars = cbind(vertex.size, vertex.size, vertex.size),     add = TRUE, inches = FALSE   ) } # clips as a circle add_shape(\"triangle\",   clip = shapes(\"circle\")$clip,   plot = mytriangle ) plot(g,   vertex.shape = \"triangle\", vertex.color = rainbow(vcount(g)),   vertex.size = seq(10, 20, length.out = vcount(g)) ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'  ################################################################# # generic star vertex shape, with a parameter for number of rays mystar <- function(coords, v = NULL, params) {   vertex.color <- params(\"vertex\", \"color\")   if (length(vertex.color) != 1 && !is.null(v)) {     vertex.color <- vertex.color[v]   }   vertex.size <- 1 / 200 * params(\"vertex\", \"size\")   if (length(vertex.size) != 1 && !is.null(v)) {     vertex.size <- vertex.size[v]   }   norays <- params(\"vertex\", \"norays\")   if (length(norays) != 1 && !is.null(v)) {     norays <- norays[v]   }    mapply(coords[, 1], coords[, 2], vertex.color, vertex.size, norays,     FUN = function(x, y, bg, size, nor) {       symbols(         x = x, y = y, bg = bg,         stars = matrix(c(size, size / 2), nrow = 1, ncol = nor * 2),         add = TRUE, inches = FALSE       )     }   ) } # no clipping, edges will be below the vertices anyway add_shape(\"star\",   clip = shape_noclip,   plot = mystar, parameters = list(vertex.norays = 5) ) plot(g,   vertex.shape = \"star\", vertex.color = rainbow(vcount(g)),   vertex.size = seq(10, 20, length.out = vcount(g)) ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y' plot(g,   vertex.shape = \"star\", vertex.color = rainbow(vcount(g)),   vertex.size = seq(10, 20, length.out = vcount(g)),   vertex.norays = rep(4:8, length.out = vcount(g)) ) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Similarity measures of two vertices — similarity","title":"Similarity measures of two vertices — similarity","text":"functions calculates similarity scores vertices based connection patterns.","code":""},{"path":"/reference/similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Similarity measures of two vertices — similarity","text":"","code":"similarity(   graph,   vids = V(graph),   mode = c(\"all\", \"out\", \"in\", \"total\"),   loops = FALSE,   method = c(\"jaccard\", \"dice\", \"invlogweighted\") )"},{"path":"/reference/similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Similarity measures of two vertices — similarity","text":"graph input graph. vids vertex ids similarity calculated. mode type neighboring vertices use calculation, possible values: ‘’, ‘’, ‘’. loops Whether include vertices neighbor sets. method method use.","code":""},{"path":"/reference/similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Similarity measures of two vertices — similarity","text":"length(vids) length(vids) numeric matrix containing similarity scores. argument ignored invlogweighted method.","code":""},{"path":"/reference/similarity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Similarity measures of two vertices — similarity","text":"Jaccard similarity coefficient two vertices number common neighbors divided number vertices neighbors least one two vertices considered. jaccard method calculates pairwise Jaccard similarities () vertices. Dice similarity coefficient two vertices twice number common neighbors divided sum degrees vertices. Methof dice calculates pairwise Dice similarities () vertices. inverse log-weighted similarity two vertices number common neighbors, weighted inverse logarithm degrees.  based assumption two vertices considered similar share low-degree common neighbor, since high-degree common neighbors likely appear even pure chance.  Isolated vertices zero similarity vertex.  Self-similarities calculated.  See following paper details: Lada . Adamic Eytan Adar: Friends neighbors Web. Social Networks, 25(3):211-230, 2003.","code":""},{"path":"/reference/similarity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Similarity measures of two vertices — similarity","text":"Lada . Adamic Eytan Adar: Friends neighbors Web. Social Networks, 25(3):211-230, 2003.","code":""},{"path":[]},{"path":"/reference/similarity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Similarity measures of two vertices — similarity","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com manual page.","code":""},{"path":"/reference/similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Similarity measures of two vertices — similarity","text":"","code":"g <- make_ring(5) similarity(g, method = \"dice\") #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  1.0  0.0  0.5  0.5  0.0 #> [2,]  0.0  1.0  0.0  0.5  0.5 #> [3,]  0.5  0.0  1.0  0.0  0.5 #> [4,]  0.5  0.5  0.0  1.0  0.0 #> [5,]  0.0  0.5  0.5  0.0  1.0 similarity(g, method = \"jaccard\") #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 1.0000000 0.0000000 0.3333333 0.3333333 0.0000000 #> [2,] 0.0000000 1.0000000 0.0000000 0.3333333 0.3333333 #> [3,] 0.3333333 0.0000000 1.0000000 0.0000000 0.3333333 #> [4,] 0.3333333 0.3333333 0.0000000 1.0000000 0.0000000 #> [5,] 0.0000000 0.3333333 0.3333333 0.0000000 1.0000000"},{"path":"/reference/simplified.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor modifier to drop multiple and loop edges — simplified","title":"Constructor modifier to drop multiple and loop edges — simplified","text":"Constructor modifier drop multiple loop edges","code":""},{"path":"/reference/simplified.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor modifier to drop multiple and loop edges — simplified","text":"","code":"simplified()"},{"path":[]},{"path":"/reference/simplified.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor modifier to drop multiple and loop edges — simplified","text":"","code":"sample_(pa(10, m = 3, algorithm = \"bag\")) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 #>  #> [[4]] #>  [1] 0 0 0 0 0 0 0 1 2 3 2 3 2 0 0 0 2 0 1 3 0 0 1 3 0 3 0 #>  #> [[5]] #>  [1]  2  1  0  5  4  3  6  7  8 10 11  9 14 13 12 17 15 16 20 18 19 21 22 23 26 #> [26] 24 25 #>  #> [[6]] #>  [1]  2  1  0  5  4  3  6 14 13 17 15 20 21 26 24  7 18 22  8 10 12 16 11  9 19 #> [26] 23 25 #>  #> [[7]] #>  [1]  0  0  3  6  9 12 15 18 21 24 27 #>  #> [[8]] #>  [1]  0 15 18 22 27 27 27 27 27 27 27 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Barabasi graph\" #>  #> [[9]][[2]]$power #> [1] 1 #>  #> [[9]][[2]]$m #> [1] 3 #>  #> [[9]][[2]]$zero.appeal #> [1] 1 #>  #> [[9]][[2]]$algorithm #> [1] \"bag\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbc1e4da0> #>  #> attr(,\"class\") #> [1] \"igraph\" sample_(pa(10, m = 3, algorithm = \"bag\"), simplified()) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 1 2 2 3 3 4 5 5 6 6 7 7 8 8 8 9 9 9 #>  #> [[4]] #>  [1] 0 0 1 0 1 0 0 1 0 3 0 3 0 3 5 0 4 7 #>  #> [[5]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 #>  #> [[6]] #>  [1]  0  1  3  5  6  8 10 12 15  2  4  7  9 11 13 16 14 17 #>  #> [[7]] #>  [1]  0  0  1  3  5  6  8 10 12 15 18 #>  #> [[8]] #>  [1]  0  9 12 12 15 16 17 17 18 18 18 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Barabasi graph\" #>  #> [[9]][[2]]$power #> [1] 1 #>  #> [[9]][[2]]$m #> [1] 3 #>  #> [[9]][[2]]$zero.appeal #> [1] 1 #>  #> [[9]][[2]]$algorithm #> [1] \"bag\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cbc0c64c8> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/simplify.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple graphs — simplify","title":"Simple graphs — simplify","text":"Simple graphs graphs contain loop multiple edges.","code":""},{"path":"/reference/simplify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple graphs — simplify","text":"","code":"simplify(   graph,   remove.multiple = TRUE,   remove.loops = TRUE,   edge.attr.comb = igraph_opt(\"edge.attr.comb\") )  is_simple(graph)  simplify_and_colorize(graph)"},{"path":"/reference/simplify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple graphs — simplify","text":"graph graph work . remove.multiple Logical, whether multiple edges removed. remove.loops Logical, whether loop edges removed. edge.attr.comb Specifies edge attributes, remove.multiple=TRUE. case many edges might mapped single one new graph, attributes combined. Please see attribute.combination() details .","code":""},{"path":"/reference/simplify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple graphs — simplify","text":"new graph object edges deleted.","code":""},{"path":"/reference/simplify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple graphs — simplify","text":"loop edge edge two endpoints vertex. Two edges multiple edges exactly two endpoints (directed graphs order matter). graph simple contain loop edges multiple edges. is_simple() checks whether graph simple. simplify() removes loop /multiple edges graph.  remove.loops remove.multiple TRUE function returns simple graph. simplify_and_colorize() constructs new, simple graph graph also sets color attribute vertices edges. colors vertices represent number self-loops originally incident , colors edges represent multiplicities edges original graph. allows one take account edge multiplicities number loop edges VF2 isomorphism algorithm. graph, vertex edge attributes original graph discarded primary purpose function facilitate usage multigraphs VF2 algorithm.","code":""},{"path":[]},{"path":"/reference/simplify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simple graphs — simplify","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/simplify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple graphs — simplify","text":"","code":"g <- graph(c(1, 2, 1, 2, 3, 3)) is_simple(g) #> [1] FALSE is_simple(simplify(g, remove.loops = FALSE)) #> [1] FALSE is_simple(simplify(g, remove.multiple = FALSE)) #> [1] FALSE is_simple(simplify(g)) #> [1] TRUE"},{"path":"/reference/sir.html","id":null,"dir":"Reference","previous_headings":"","what":"SIR model on graphs — time_bins.sir","title":"SIR model on graphs — time_bins.sir","text":"Run simulations SIR (susceptible-infected-recovered) model, graph","code":""},{"path":"/reference/sir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIR model on graphs — time_bins.sir","text":"","code":"# S3 method for sir time_bins(x, middle = TRUE)  # S3 method for sir median(x, na.rm = FALSE, ...)  # S3 method for sir quantile(x, comp = c(\"NI\", \"NS\", \"NR\"), prob, ...)  sir(graph, beta, gamma, no.sim = 100)"},{"path":"/reference/sir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SIR model on graphs — time_bins.sir","text":"x sir object, returned sir() function. middle Logical scalar, whether return middle time bins, boundaries. na.rm Logical scalar, whether ignore NA values.  sir objects contain NA values currently, argument effectively ignored. ... Additional arguments, ignored currently. comp Character scalar. component calculate quantile . NI infected agents, NS susceptibles, NR stands recovered. prob Numeric vector probabilities, [0,1], specify quantiles calculate. graph graph run model . directed, edge directions ignored warning given. beta Non-negative scalar. rate infection individual susceptible single infected neighbor. infection rate susceptible individual n infected neighbors n times beta. Formally rate parameter exponential distribution. gamma Positive scalar. rate recovery infected individual. Formally, rate parameter exponential distribution. .sim Integer scalar, number simulation runs perform.","code":""},{"path":"/reference/sir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SIR model on graphs — time_bins.sir","text":"sir() results returned object class ‘sir’, list, one element simulation. simulation list following elements. numeric vectors, equal length: times times events. NS number susceptibles population, time. NI number infected individuals population, time. NR number recovered individuals population, time. Function time_bins() returns numeric vector, middle boundaries time bins, depending middle argument. median returns list three named numeric vectors, NS, NI NR. names within vectors created time bins. quantile returns vector median (one, one requested) one quantile requested. multiple quantiles requested, list vectors returned, one quantile.","code":""},{"path":"/reference/sir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SIR model on graphs — time_bins.sir","text":"SIR model simple model epidemiology. individuals population might three states: susceptible, infected recovered. Recovered people assumed immune disease. Susceptibles become infected rate depends number infected neighbors. Infected people become recovered constant rate. function sir() simulates model. Function time_bins() bins simulation steps, using Freedman-Diaconis heuristics determine bin width. Function median quantile calculate median quantiles results, respectively, bins calculated time_bins().","code":""},{"path":"/reference/sir.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SIR model on graphs — time_bins.sir","text":"Bailey, Norman T. J. (1975). mathematical theory infectious diseases applications (2nd ed.). London: Griffin.","code":""},{"path":[]},{"path":"/reference/sir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SIR model on graphs — time_bins.sir","text":"Gabor Csardi csardi.gabor@gmail.com. Eric Kolaczyk (http://math.bu.edu/people/kolaczyk/) wrote initial version R.","code":""},{"path":"/reference/sir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SIR model on graphs — time_bins.sir","text":"","code":"g <- sample_gnm(100, 100) sm <- sir(g, beta = 5, gamma = 1) plot(sm)"},{"path":"/reference/spectrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Eigenvalues and eigenvectors of the adjacency matrix of a graph — spectrum","title":"Eigenvalues and eigenvectors of the adjacency matrix of a graph — spectrum","text":"Calculate selected eigenvalues eigenvectors (supposedly sparse) graph.","code":""},{"path":"/reference/spectrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eigenvalues and eigenvectors of the adjacency matrix of a graph — spectrum","text":"","code":"spectrum(   graph,   algorithm = c(\"arpack\", \"auto\", \"lapack\", \"comp_auto\", \"comp_lapack\", \"comp_arpack\"),   which = list(),   options = arpack_defaults )"},{"path":"/reference/spectrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eigenvalues and eigenvectors of the adjacency matrix of a graph — spectrum","text":"graph input graph, can directed undirected. algorithm algorithm use. Currently arpack implemented, uses ARPACK solver. See also arpack(). list specify eigenvalues eigenvectors calculate. default leading (.e. largest magnitude) eigenvalue corresponding eigenvector calculated. options Options ARPACK solver. See arpack_defaults().","code":""},{"path":"/reference/spectrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eigenvalues and eigenvectors of the adjacency matrix of a graph — spectrum","text":"Depends algorithm used. arpack list three entries returned: options See return value arpack() complete description. values Numeric vector, eigenvalues. vectors Numeric matrix, eigenvectors columns.","code":""},{"path":"/reference/spectrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Eigenvalues and eigenvectors of the adjacency matrix of a graph — spectrum","text":"argument list specifies eigenvalues corresponding eigenvectors calculate: eight options: Eigenvalues largest magnitude. Set pos LM, howmany number eigenvalues want. Eigenvalues smallest magnitude. Set pos SM howmany number eigenvalues want. Largest eigenvalues. Set pos LA howmany number eigenvalues want. Smallest eigenvalues. Set pos SA howmany number eigenvalues want. Eigenvalues ends spectrum. Set pos howmany number eigenvalues want. howmany odd, one eigenvalue returned larger end. Selected eigenvalues. (yet) implemented currently. Eigenvalues interval. (yet) implemented. eigenvalues. implemented yet. standard eigen function better job , anyway. Note ARPACK might unstable graphs multiple components, e.g. graphs isolate vertices.","code":""},{"path":[]},{"path":"/reference/spectrum.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Eigenvalues and eigenvectors of the adjacency matrix of a graph — spectrum","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/spectrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eigenvalues and eigenvectors of the adjacency matrix of a graph — spectrum","text":"","code":"## Small example graph, leading eigenvector by default kite <- make_graph(\"Krackhardt_kite\") spectrum(kite)[c(\"values\", \"vectors\")] #> $values #> [1] 4.306404 #>  #> $vectors #>             [,1] #>  [1,] 0.35220940 #>  [2,] 0.35220940 #>  [3,] 0.28583499 #>  [4,] 0.48102086 #>  [5,] 0.28583499 #>  [6,] 0.39769064 #>  [7,] 0.39769064 #>  [8,] 0.19586058 #>  [9,] 0.04807349 #> [10,] 0.01116326 #>   ## Double check eigen(as_adj(kite, sparse = FALSE))$vectors[, 1] #>  [1] -0.35220940 -0.35220940 -0.28583499 -0.48102086 -0.28583499 -0.39769064 #>  [7] -0.39769064 -0.19586058 -0.04807349 -0.01116326  ## Should be the same as 'eigen_centrality' (but rescaled) cor(eigen_centrality(kite)$vector, spectrum(kite)$vectors) #>      [,1] #> [1,]    1  ## Smallest eigenvalues spectrum(kite, which = list(pos = \"SM\", howmany = 2))$values #> [1] -0.4043420  0.6403647"},{"path":"/reference/split_join_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Split-join distance of two community structures — split_join_distance","title":"Split-join distance of two community structures — split_join_distance","text":"split-join distance partitions B sum projection distance B projection distance B . projection distance asymmetric measure defined follows:","code":""},{"path":"/reference/split_join_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split-join distance of two community structures — split_join_distance","text":"","code":"split_join_distance(comm1, comm2)"},{"path":"/reference/split_join_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split-join distance of two community structures — split_join_distance","text":"comm1 first community structure. comm2 second community structure.","code":""},{"path":"/reference/split_join_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split-join distance of two community structures — split_join_distance","text":"Two integer numbers, see details .","code":""},{"path":"/reference/split_join_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split-join distance of two community structures — split_join_distance","text":"First, set partition evaluated sets partition B. set partition , best matching set partition B found overlap size calculated. (Matching quantified size overlap two sets). , maximal overlap sizes set summed together subtracted number elements . split-join distance returned two numbers, first projection distance first partition second, second number projection distance second partition first. makes easier detect whether partition subpartition , since case, corresponding distance zero.","code":""},{"path":"/reference/split_join_distance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Split-join distance of two community structures — split_join_distance","text":"van Dongen S: Performance criteria graph clustering Markov cluster experiments. Technical Report INS-R0012, National Research Institute Mathematics Computer Science Netherlands, Amsterdam, May 2000.","code":""},{"path":[]},{"path":"/reference/srand.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function, used to set random seed of the C library's RNG — srand","title":"Deprecated function, used to set random seed of the C library's RNG — srand","text":"Deprecated function, used set random seed C library's RNG","code":""},{"path":"/reference/srand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated function, used to set random seed of the C library's RNG — srand","text":"","code":"srand(seed)"},{"path":"/reference/srand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function, used to set random seed of the C library's RNG — srand","text":"seed Ignored.","code":""},{"path":[]},{"path":"/reference/srand.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Deprecated function, used to set random seed of the C library's RNG — srand","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/st_cuts.html","id":null,"dir":"Reference","previous_headings":"","what":"List all (s,t)-cuts of a graph — st_cuts","title":"List all (s,t)-cuts of a graph — st_cuts","text":"List (s,t)-cuts directed graph.","code":""},{"path":"/reference/st_cuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all (s,t)-cuts of a graph — st_cuts","text":"","code":"st_cuts(graph, source, target)"},{"path":"/reference/st_cuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all (s,t)-cuts of a graph — st_cuts","text":"graph input graph. must directed. source source vertex. target target vertex.","code":""},{"path":"/reference/st_cuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all (s,t)-cuts of a graph — st_cuts","text":"list entries: cuts list numeric vectors containing edge ids. vector \\((s,t)\\)-cut. partition1s list numeric vectors containing vertex ids, correspond edge cuts. vertex set generator corresponding cut, .e. graph \\(G=(V,E)\\), vertex set \\(X\\) complementer \\(V-X\\), generates cut contains exactly edges go \\(X\\) \\(V-X\\).","code":""},{"path":"/reference/st_cuts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List all (s,t)-cuts of a graph — st_cuts","text":"Given \\(G\\) directed graph two, different non-ajacent vertices, \\(s\\) \\(t\\), \\((s,t)\\)-cut set edges, removing edges \\(G\\) directed path \\(s\\) \\(t\\).","code":""},{"path":"/reference/st_cuts.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List all (s,t)-cuts of a graph — st_cuts","text":"JS Provan DR Shier: Paradigm listing (s,t)-cuts graphs, Algorithmica 15, 351--372, 1996.","code":""},{"path":[]},{"path":"/reference/st_cuts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List all (s,t)-cuts of a graph — st_cuts","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/st_cuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all (s,t)-cuts of a graph — st_cuts","text":"","code":"# A very simple graph g <- graph_from_literal(a -+ b -+ c -+ d -+ e) st_cuts(g, source = \"a\", target = \"e\") #> $cuts #> $cuts[[1]] #> + 1/4 edge from a87d036 (vertex names): #> [1] a->b #>  #> $cuts[[2]] #> + 1/4 edge from a87d036 (vertex names): #> [1] b->c #>  #> $cuts[[3]] #> + 1/4 edge from a87d036 (vertex names): #> [1] c->d #>  #> $cuts[[4]] #> + 1/4 edge from a87d036 (vertex names): #> [1] d->e #>  #>  #> $partition1s #> $partition1s[[1]] #> + 1/5 vertex, named, from a87d036: #> [1] a #>  #> $partition1s[[2]] #> + 2/5 vertices, named, from a87d036: #> [1] a b #>  #> $partition1s[[3]] #> + 3/5 vertices, named, from a87d036: #> [1] a b c #>  #> $partition1s[[4]] #> + 4/5 vertices, named, from a87d036: #> [1] a b c d #>  #>   # A somewhat more difficult graph g2 <- graph_from_literal(   s --+ a:b, a:b --+ t,   a --+ 1:2:3, 1:2:3 --+ b ) st_cuts(g2, source = \"s\", target = \"t\") #> $cuts #> $cuts[[1]] #> + 2/10 edges from d20177d (vertex names): #> [1] s->a s->b #>  #> $cuts[[2]] #> + 2/10 edges from d20177d (vertex names): #> [1] s->a b->t #>  #> $cuts[[3]] #> + 5/10 edges from d20177d (vertex names): #> [1] s->b a->t a->1 a->2 a->3 #>  #> $cuts[[4]] #> + 5/10 edges from d20177d (vertex names): #> [1] s->b a->t a->1 a->2 3->b #>  #> $cuts[[5]] #> + 5/10 edges from d20177d (vertex names): #> [1] s->b a->t a->1 a->3 2->b #>  #> $cuts[[6]] #> + 5/10 edges from d20177d (vertex names): #> [1] s->b a->t a->1 2->b 3->b #>  #> $cuts[[7]] #> + 5/10 edges from d20177d (vertex names): #> [1] s->b a->t a->2 a->3 1->b #>  #> $cuts[[8]] #> + 5/10 edges from d20177d (vertex names): #> [1] s->b a->t a->2 1->b 3->b #>  #> $cuts[[9]] #> + 5/10 edges from d20177d (vertex names): #> [1] s->b a->t a->3 1->b 2->b #>  #> $cuts[[10]] #> + 5/10 edges from d20177d (vertex names): #> [1] s->b a->t 1->b 2->b 3->b #>  #> $cuts[[11]] #> + 2/10 edges from d20177d (vertex names): #> [1] a->t b->t #>  #>  #> $partition1s #> $partition1s[[1]] #> + 1/7 vertex, named, from d20177d: #> [1] s #>  #> $partition1s[[2]] #> + 2/7 vertices, named, from d20177d: #> [1] s b #>  #> $partition1s[[3]] #> + 2/7 vertices, named, from d20177d: #> [1] s a #>  #> $partition1s[[4]] #> + 3/7 vertices, named, from d20177d: #> [1] s a 3 #>  #> $partition1s[[5]] #> + 3/7 vertices, named, from d20177d: #> [1] s a 2 #>  #> $partition1s[[6]] #> + 4/7 vertices, named, from d20177d: #> [1] s a 2 3 #>  #> $partition1s[[7]] #> + 3/7 vertices, named, from d20177d: #> [1] s a 1 #>  #> $partition1s[[8]] #> + 4/7 vertices, named, from d20177d: #> [1] s a 1 3 #>  #> $partition1s[[9]] #> + 4/7 vertices, named, from d20177d: #> [1] s a 1 2 #>  #> $partition1s[[10]] #> + 5/7 vertices, named, from d20177d: #> [1] s a 1 2 3 #>  #> $partition1s[[11]] #> + 6/7 vertices, named, from d20177d: #> [1] s a 1 2 3 b #>  #>"},{"path":"/reference/st_min_cuts.html","id":null,"dir":"Reference","previous_headings":"","what":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","title":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","text":"Listing minimum \\((s,t)\\)-cuts directed graph, given \\(s\\) \\(t\\).","code":""},{"path":"/reference/st_min_cuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","text":"","code":"st_min_cuts(graph, source, target, capacity = NULL)"},{"path":"/reference/st_min_cuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","text":"graph input graph. must directed. source id source vertex. target id target vertex. capacity Numeric vector giving edge capacities. NULL graph weight edge attribute, attribute defines edge capacities. forcing unit edge capacities, even graphs weight edge attribute, supply NA .","code":""},{"path":"/reference/st_min_cuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","text":"list entries: value Numeric scalar, size minimum cut(s). cuts list numeric vectors containing edge ids. vector minimum \\((s,t)\\)-cut. partition1s list numeric vectors containing vertex ids, correspond edge cuts. vertex set generator corresponding cut, .e. graph \\(G=(V,E)\\), vertex set \\(X\\) complementer \\(V-X\\), generates cut contains exactly edges go \\(X\\) \\(V-X\\).","code":""},{"path":"/reference/st_min_cuts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","text":"Given \\(G\\) directed graph two, different non-ajacent vertices, \\(s\\) \\(t\\), \\((s,t)\\)-cut set edges, removing edges \\(G\\) directed path \\(s\\) \\(t\\). size \\((s,t)\\)-cut defined sum capacities (weights) cut. unweighted (=equally weighted) graphs, simply number edges. \\((s,t)\\)-cut minimum smallest possible size.","code":""},{"path":"/reference/st_min_cuts.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","text":"JS Provan DR Shier: Paradigm listing (s,t)-cuts graphs, Algorithmica 15, 351--372, 1996.","code":""},{"path":[]},{"path":"/reference/st_min_cuts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/st_min_cuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all minimum \\((s,t)\\)-cuts of a graph — st_min_cuts","text":"","code":"# A difficult graph, from the Provan-Shier paper g <- graph_from_literal(   s --+ a:b, a:b --+ t,   a --+ 1:2:3:4:5, 1:2:3:4:5 --+ b ) st_min_cuts(g, source = \"s\", target = \"t\") #> $value #> [1] 2 #>  #> $cuts #> $cuts[[1]] #> + 2/14 edges from 9e0a686 (vertex names): #> [1] s->a s->b #>  #> $cuts[[2]] #> + 2/14 edges from 9e0a686 (vertex names): #> [1] s->b a->t #>  #> $cuts[[3]] #> + 2/14 edges from 9e0a686 (vertex names): #> [1] s->a b->t #>  #> $cuts[[4]] #> + 2/14 edges from 9e0a686 (vertex names): #> [1] a->t b->t #>  #>  #> $partition1s #> $partition1s[[1]] #> + 1/9 vertex, named, from 9e0a686: #> [1] s #>  #> $partition1s[[2]] #> + 7/9 vertices, named, from 9e0a686: #> [1] s a 5 4 3 2 1 #>  #> $partition1s[[3]] #> + 2/9 vertices, named, from 9e0a686: #> [1] s b #>  #> $partition1s[[4]] #> + 8/9 vertices, named, from 9e0a686: #> [1] s b a 5 4 3 2 1 #>  #>"},{"path":"/reference/stochastic_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Stochastic matrix of a graph — stochastic_matrix","title":"Stochastic matrix of a graph — stochastic_matrix","text":"Retrieves stochastic matrix graph class igraph.","code":""},{"path":"/reference/stochastic_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stochastic matrix of a graph — stochastic_matrix","text":"","code":"stochastic_matrix(   graph,   column.wise = FALSE,   sparse = igraph_opt(\"sparsematrices\") )"},{"path":"/reference/stochastic_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stochastic matrix of a graph — stochastic_matrix","text":"graph input graph. Must class igraph. column.wise FALSE, rows stochastic matrix sum one; otherwise columns. sparse Logical scalar, whether return sparse matrix. Matrix package needed sparse matrices.","code":""},{"path":"/reference/stochastic_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stochastic matrix of a graph — stochastic_matrix","text":"regular matrix matrix class Matrix sparse argument TRUE.","code":""},{"path":"/reference/stochastic_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stochastic matrix of a graph — stochastic_matrix","text":"Let \\(M\\) \\(n \\times n\\) adjacency matrix real non-negative entries. Let us define \\(D = \\textrm{diag}(\\sum_{}M_{1i}, \\dots, \\sum_{}M_{ni})\\) (row) stochastic matrix defined $$W = D^{-1}M,$$ assumed \\(D\\) non-singular.  Column stochastic matrices defined symmetric way.","code":""},{"path":[]},{"path":"/reference/stochastic_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stochastic matrix of a graph — stochastic_matrix","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/stochastic_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stochastic matrix of a graph — stochastic_matrix","text":"","code":"library(Matrix) ## g is a large sparse graph g <- sample_pa(n = 10^5, power = 2, directed = FALSE) W <- stochastic_matrix(g, sparse = TRUE)  ## a dense matrix here would probably not fit in the memory class(W) #> [1] \"dgCMatrix\" #> attr(,\"package\") #> [1] \"Matrix\"  ## may not be exactly 1, due to numerical errors max(abs(rowSums(W)) - 1) #> [1] 1.456613e-13"},{"path":"/reference/strength.html","id":null,"dir":"Reference","previous_headings":"","what":"Strength or weighted vertex degree — strength","title":"Strength or weighted vertex degree — strength","text":"Summing edge weights adjacent edges vertex.","code":""},{"path":"/reference/strength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strength or weighted vertex degree — strength","text":"","code":"strength(   graph,   vids = V(graph),   mode = c(\"all\", \"out\", \"in\", \"total\"),   loops = TRUE,   weights = NULL )"},{"path":"/reference/strength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strength or weighted vertex degree — strength","text":"graph input graph. vids vertices strength calculated. mode Character string, “” -degree, “” -degree “” sum two. undirected graphs argument ignored. loops Logical; whether loop edges also counted. weights Weight vector. graph weight edge attribute, used default. graph weight edge attribute argument NULL, warning given degree() called.","code":""},{"path":"/reference/strength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strength or weighted vertex degree — strength","text":"numeric vector giving strength vertices.","code":""},{"path":"/reference/strength.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Strength or weighted vertex degree — strength","text":"Alain Barrat, Marc Barthelemy, Romualdo Pastor-Satorras, Alessandro Vespignani: architecture complex weighted networks, Proc. Natl. Acad. Sci. USA 101, 3747 (2004)","code":""},{"path":[]},{"path":"/reference/strength.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Strength or weighted vertex degree — strength","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/strength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strength or weighted vertex degree — strength","text":"","code":"g <- make_star(10) E(g)$weight <- seq(ecount(g)) strength(g) #>  [1] 45  1  2  3  4  5  6  7  8  9 strength(g, mode = \"out\") #>  [1] 0 1 2 3 4 5 6 7 8 9 strength(g, mode = \"in\") #>  [1] 45  0  0  0  0  0  0  0  0  0  # No weights, a warning is given g <- make_ring(10) strength(g) #>  [1] 2 2 2 2 2 2 2 2 2 2"},{"path":"/reference/sub-.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Query and manipulate a graph as it were an adjacency matrix — [.igraph","title":"Query and manipulate a graph as it were an adjacency matrix — [.igraph","text":"Query manipulate graph adjacency matrix","code":""},{"path":"/reference/sub-.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query and manipulate a graph as it were an adjacency matrix — [.igraph","text":"","code":"# S3 method for igraph [(   x,   i,   j,   ...,   from,   to,   sparse = igraph_opt(\"sparsematrices\"),   edges = FALSE,   drop = TRUE,   attr = if (is_weighted(x)) \"weight\" else NULL )"},{"path":"/reference/sub-.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query and manipulate a graph as it were an adjacency matrix — [.igraph","text":"x graph. Index. Vertex ids names logical vectors. See details . j Index. Vertex ids names logical vectors. See details . ... Currently ignored. numeric character vector giving vertex ids names. Together argument, can used query/set sequence edges. See details . argument present together j arguments present, argument must present well. numeric character vector giving vertex ids names. Together argument, can used query/set sequence edges. See details . argument present together j arguments present, argument must present well. sparse Logical scalar, whether return sparse matrices. edges Logical scalar, whether return edge ids. drop Ignored. attr NULL, name edge attribute. attribute queried returned.","code":""},{"path":"/reference/sub-.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query and manipulate a graph as it were an adjacency matrix — [.igraph","text":"scalar matrix. See details .","code":""},{"path":"/reference/sub-.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query and manipulate a graph as it were an adjacency matrix — [.igraph","text":"single bracket indexes (possibly weighted) adjacency matrix graph. can : Check whether edge two vertices (\\(v\\) \\(w\\)) graph: numeric scalar returned, one edge exists, zero otherwise. Extract (sparse) adjacency matrix graph, part : first variants returns full adjacency matrix, two return part . arguments can used check existence many edges. case, must present must length. must contain vertex ids names. numeric vector returned, length , contains ones existing edges edges zeros non-existing ones. Example: . weighted graphs, [ operator returns edge weights. non-esistent edges zero weights returned. edge attributes can queried well, giving attr argument. Querying edge ids instead existance edges edge attributes. E.g. returns id edge vertices 1 2, zero edge. Adding one edges graph. element(s) imaginary adjacency matrix must set non-zero numeric value (TRUE): affect edges already present graph, .e. multiple edges created. Adding weighted edges graph. attr argument contains name edge attribute set, ‘weight’: edge already present network, weights attribute updated. graph already weighted, attr=\"weight\" setting implicit, one need give explicitly. Deleting edges. replacement syntax allow deletion edges, specifying FALSE NULL replacement value: removes edge vertex \\(v\\) vertex \\(w\\). can used delete edges two sets vertices, either pairwise: : \\(v\\) \\(w\\) vectors edge ids names. ‘[’ allows logical indices negative indices well, usual R semantics. E.g. adds edge every isolate vertex vertex one, creates star graph. course, indexing operators support vertex names, instead numeric vertex id vertex can also given ‘[’ ‘[[’.","code":"graph[v, w] graph[] graph[1:3,5:6] graph[c(1,3,5),] graph[from=1:3, to=c(2,3,5)] graph[1, 2, edges=TRUE] graph[1, 2] <- 1 graph[1:3,1] <- 1 graph[from=1:3, to=c(2,3,5)] <- TRUE graph[1, 2, attr=\"weight\"]<- 5 graph[from=1:3, to=c(2,3,5)] <- c(1,-1,4) graph[v, w] <- FALSE graph[from=v, to=w] <- FALSE graph[v, w] <- FALSE graph[degree(graph)==0, 1] <- 1 G <- make_empty_graph(10) G[-1,1] <- TRUE"},{"path":[]},{"path":"/reference/sub-sub-.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Query and manipulate a graph as it were an adjacency list — [[.igraph","title":"Query and manipulate a graph as it were an adjacency list — [[.igraph","text":"Query manipulate graph adjacency list","code":""},{"path":"/reference/sub-sub-.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query and manipulate a graph as it were an adjacency list — [[.igraph","text":"","code":"# S3 method for igraph [[(x, i, j, from, to, ..., directed = TRUE, edges = FALSE, exact = TRUE)"},{"path":"/reference/sub-sub-.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query and manipulate a graph as it were an adjacency list — [[.igraph","text":"x graph. Index, integer, character logical, see details . j Index, integer, character logical, see details . numeric character vector giving vertex ids names. Together argument, can used query/set sequence edges. See details . argument present together j arguments present, argument must present well. numeric character vector giving vertex ids names. Together argument, can used query/set sequence edges. See details . argument present together j arguments present, argument must present well. ... Additional arguments used currently. directed Logical scalar, whether consider edge directions directed graphs. ignored undirected graphs. edges Logical scalar, whether return edge ids. exact Ignored.","code":""},{"path":"/reference/sub-sub-.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query and manipulate a graph as it were an adjacency list — [[.igraph","text":"double bracket operator indexes (imaginary) adjacency list graph. can used following operations: Querying adjacent vertices one vertices: first form gives successors, second predecessors 1:3 vertices. (undirected graphs equivalent.) Querying incident edges one vertices, edges argument set TRUE: Querying edge ids two sets vertices, indices used. E.g. gives edge ids edges exist vertices \\(v\\) vertices \\(w\\). alternative argument names can used instead usual j, make code readable: ‘[[’ operators allows logical indices negative indices well, usual R semantics. Vertex names also supported, instead numeric vertex id vertex can also given ‘[’ ‘[[’.","code":"graph[[1:3,]] graph[[,1:3]] graph[[1:3, , edges=TRUE]] graph[[, 1:3, edges=TRUE]] graph[[v, w, edges=TRUE]] graph[[from = 1:3]] graph[[from = v, to = w, edges = TRUE]]"},{"path":[]},{"path":"/reference/subcomponent.html","id":null,"dir":"Reference","previous_headings":"","what":"In- or out- component of a vertex — subcomponent","title":"In- or out- component of a vertex — subcomponent","text":"Finds vertices reachable given vertex, opposite: vertices given vertex reachable via directed path.","code":""},{"path":"/reference/subcomponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"In- or out- component of a vertex — subcomponent","text":"","code":"subcomponent(graph, v, mode = c(\"all\", \"out\", \"in\"))"},{"path":"/reference/subcomponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"In- or out- component of a vertex — subcomponent","text":"graph graph analyze. v vertex start search . mode Character string, either “”, “” “”. “” vertices v reachable listed. “” vertices reachable v returned. “” returns union . ignored undirected graphs.","code":""},{"path":"/reference/subcomponent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"In- or out- component of a vertex — subcomponent","text":"Numeric vector, ids vertices component v.","code":""},{"path":"/reference/subcomponent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"In- or out- component of a vertex — subcomponent","text":"breadth-first search conducted starting vertex v.","code":""},{"path":[]},{"path":"/reference/subcomponent.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"In- or out- component of a vertex — subcomponent","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/subcomponent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"In- or out- component of a vertex — subcomponent","text":"","code":"g <- sample_gnp(100, 1 / 200) subcomponent(g, 1, \"in\") #> + 6/100 vertices, from 3eb5b1a: #> [1]  1 12 25 57 67 26 subcomponent(g, 1, \"out\") #> + 6/100 vertices, from 3eb5b1a: #> [1]  1 12 25 57 67 26 subcomponent(g, 1, \"all\") #> + 6/100 vertices, from 3eb5b1a: #> [1]  1 12 25 57 67 26"},{"path":"/reference/subgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Subgraph of a graph — subgraph","title":"Subgraph of a graph — subgraph","text":"subgraph() creates subgraph graph, containing specified vertices edges among .","code":""},{"path":"/reference/subgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subgraph of a graph — subgraph","text":"","code":"subgraph(graph, vids)  induced_subgraph(   graph,   vids,   impl = c(\"auto\", \"copy_and_delete\", \"create_from_scratch\") )  subgraph.edges(graph, eids, delete.vertices = TRUE)"},{"path":"/reference/subgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subgraph of a graph — subgraph","text":"graph original graph. vids Numeric vector, vertices original graph form subgraph. impl Character scalar, choose two implementation subgraph calculation. ‘copy_and_delete’ copies graph first, deletes vertices edges included result graph. ‘create_from_scratch’ searches vertices edges must kept uses create graph scratch. ‘auto’ chooses two implementations automatically, using heuristics based size original result graph. eids edge ids edges kept result graph. delete.vertices Logical scalar, whether remove vertices adjacent edges eids.","code":""},{"path":"/reference/subgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subgraph of a graph — subgraph","text":"new graph object.","code":""},{"path":"/reference/subgraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subgraph of a graph — subgraph","text":"induced_subgraph() calculates induced subgraph set vertices graph. means exactly specified vertices edges kept result graph. subgraph.edges() calculates subgraph graph. function one can specify vertices edges keep. function renamed subgraph() next major version igraph. subgraph() function currently induced_subgraph() (assuming ‘auto’ impl argument), behaviour deprecated. next major version, subgraph() overtake functionality subgraph.edges().","code":""},{"path":[]},{"path":"/reference/subgraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subgraph of a graph — subgraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/subgraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subgraph of a graph — subgraph","text":"","code":"g <- make_ring(10) g2 <- induced_subgraph(g, 1:7) g3 <- subgraph.edges(g, 1:5, 1:5)"},{"path":"/reference/subgraph_centrality.html","id":null,"dir":"Reference","previous_headings":"","what":"Find subgraph centrality scores of network positions — subgraph_centrality","title":"Find subgraph centrality scores of network positions — subgraph_centrality","text":"Subgraph centrality vertex measures number subgraphs vertex participates , weighting according size.","code":""},{"path":"/reference/subgraph_centrality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find subgraph centrality scores of network positions — subgraph_centrality","text":"","code":"subgraph_centrality(graph, diag = FALSE)"},{"path":"/reference/subgraph_centrality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find subgraph centrality scores of network positions — subgraph_centrality","text":"graph input graph, undirected, implementation check currently. diag Boolean scalar, whether include diagonal adjacency matrix analysis. Giving FALSE effectively eliminates loops edges graph calculation.","code":""},{"path":"/reference/subgraph_centrality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find subgraph centrality scores of network positions — subgraph_centrality","text":"numeric vector, subgraph centrality scores vertices.","code":""},{"path":"/reference/subgraph_centrality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find subgraph centrality scores of network positions — subgraph_centrality","text":"subgraph centrality vertex defined number closed loops originating vertex, longer loops exponentially downweighted. Currently calculation performed explicitly calculating eigenvalues eigenvectors adjacency matrix graph. effectively means measure can calculated small graphs.","code":""},{"path":"/reference/subgraph_centrality.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find subgraph centrality scores of network positions — subgraph_centrality","text":"Ernesto Estrada, Juan . Rodriguez-Velazquez: Subgraph centrality Complex Networks. Physical Review E 71, 056103 (2005).","code":""},{"path":[]},{"path":"/reference/subgraph_centrality.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find subgraph centrality scores of network positions — subgraph_centrality","text":"Gabor Csardi csardi.gabor@gmail.com based Matlab code Ernesto Estrada","code":""},{"path":"/reference/subgraph_centrality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find subgraph centrality scores of network positions — subgraph_centrality","text":"","code":"g <- sample_pa(100, m = 4, dir = FALSE) sc <- subgraph_centrality(g) cor(degree(g), sc) #> [1] 0.9399332"},{"path":"/reference/subgraph_isomorphic.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"Decide graph subgraph isomorphic another one","code":""},{"path":"/reference/subgraph_isomorphic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"","code":"subgraph_isomorphic(pattern, target, method = c(\"auto\", \"lad\", \"vf2\"), ...)  is_subgraph_isomorphic_to(   pattern,   target,   method = c(\"auto\", \"lad\", \"vf2\"),   ... )"},{"path":"/reference/subgraph_isomorphic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"pattern smaller graph, might directed undirected. Undirected graphs treated directed graphs mutual edges. target bigger graph, might directed undirected. Undirected graphs treated directed graphs mutual edges. method method use. Possible values: ‘auto’, ‘lad’, ‘vf2’. See details . ... Additional arguments, passed various methods.","code":""},{"path":"/reference/subgraph_isomorphic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"Logical scalar, TRUE pattern isomorphic (possibly induced) subgraph target.","code":""},{"path":"/reference/subgraph_isomorphic.html","id":"-auto-method","dir":"Reference","previous_headings":"","what":"‘auto’ method","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"method currently selects ‘lad’, always, seems superior graphs.","code":""},{"path":"/reference/subgraph_isomorphic.html","id":"-lad-method","dir":"Reference","previous_headings":"","what":"‘lad’ method","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"LAD algorithm Solnon, see reference . following extra arguments: domains NULL, specifies matching restrictions. must list target vertex sets, given numeric vertex ids symbolic vertex names. length list must vcount(pattern) vertex pattern gives allowed matching vertices target. Defaults NULL. induced Logical scalar, whether search induced subgraph. FALSE default. time.limit processor time limit computation, seconds. defaults Inf, means limit.","code":""},{"path":"/reference/subgraph_isomorphic.html","id":"-vf-method","dir":"Reference","previous_headings":"","what":"‘vf2’ method","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"method uses VF2 algorithm Cordella, Foggia et al., see references . supports vertex edge colors following extra arguments: vertex.color1, vertex.color2 Optional integer vectors giving colors vertices colored graph isomorphism. given, graph “color” vertex attribute, used. want ignore attributes, supply NULL arguments. See also examples . edge.color1, edge.color2 Optional integer vectors giving colors edges edge-colored (sub)graph isomorphism. given, graph “color” edge attribute, used. want ignore attributes, supply NULL arguments.","code":""},{"path":"/reference/subgraph_isomorphic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"LP Cordella,  P Foggia, C Sansone, M Vento: improved algorithm matching large graphs, Proc. 3rd IAPR TC-15 Workshop Graphbased Representations Pattern Recognition, 149--159, 2001. C. Solnon: AllDifferent-based Filtering Subgraph Isomorphism, Artificial Intelligence 174(12-13):850--864, 2010.","code":""},{"path":[]},{"path":"/reference/subgraph_isomorphic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decide if a graph is subgraph isomorphic to another one — subgraph_isomorphic","text":"","code":"# A LAD example pattern <- make_graph(   ~ 1:2:3:4:5,   1 - 2:5, 2 - 1:5:3, 3 - 2:4, 4 - 3:5, 5 - 4:2:1 ) target <- make_graph(   ~ 1:2:3:4:5:6:7:8:9,   1 - 2:5:7, 2 - 1:5:3, 3 - 2:4, 4 - 3:5:6:8:9,   5 - 1:2:4:6:7, 6 - 7:5:4:9, 7 - 1:5:6,   8 - 4:9, 9 - 6:4:8 ) domains <- list(   `1` = c(1, 3, 9), `2` = c(5, 6, 7, 8), `3` = c(2, 4, 6, 7, 8, 9),   `4` = c(1, 3, 9), `5` = c(2, 4, 8, 9) ) subgraph_isomorphisms(pattern, target) #> [[1]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 2 1 7 6 5 #>  #> [[2]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 1 2 3 4 5 #>  #> [[3]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 6 4 3 2 5 #>  #> [[4]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 8 4 5 6 9 #>  #> [[5]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 5 4 8 9 6 #>  #> [[6]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 9 4 5 7 6 #>  #> [[7]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 1 5 4 6 7 #>  #> [[8]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 1 5 4 3 2 #>  #> [[9]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 4 5 1 7 6 #>  #> [[10]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 7 5 4 9 6 #>  #> [[11]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 6 5 2 3 4 #>  #> [[12]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 6 5 2 1 7 #>  #> [[13]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 2 5 6 7 1 #>  #> [[14]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 9 6 7 5 4 #>  #> [[15]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 5 6 9 8 4 #>  #> [[16]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 4 6 7 1 5 #>  #> [[17]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 7 6 9 4 5 #>  #> [[18]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 1 7 6 4 5 #>  #> [[19]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 6 7 1 2 5 #>  #> [[20]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 8 9 6 5 4 #>  subgraph_isomorphisms(pattern, target, induced = TRUE) #> [[1]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 1 2 3 4 5 #>  #> [[2]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 6 4 3 2 5 #>  #> [[3]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 6 5 2 3 4 #>  #> [[4]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 1 5 4 3 2 #>  subgraph_isomorphisms(pattern, target, domains = domains) #> [[1]] #> + 5/9 vertices, named, from cc0b6f5: #> [1] 1 5 4 3 2 #>   # Directed LAD example pattern <- make_graph(~ 1:2:3, 1 -+ 2:3) dring <- make_ring(10, directed = TRUE) subgraph_isomorphic(pattern, dring) #> [1] FALSE"},{"path":"/reference/subgraph_isomorphisms.html","id":null,"dir":"Reference","previous_headings":"","what":"All isomorphic mappings between a graph and subgraphs of another graph — subgraph_isomorphisms","title":"All isomorphic mappings between a graph and subgraphs of another graph — subgraph_isomorphisms","text":"isomorphic mappings graph subgraphs another graph","code":""},{"path":"/reference/subgraph_isomorphisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All isomorphic mappings between a graph and subgraphs of another graph — subgraph_isomorphisms","text":"","code":"subgraph_isomorphisms(pattern, target, method = c(\"lad\", \"vf2\"), ...)"},{"path":"/reference/subgraph_isomorphisms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All isomorphic mappings between a graph and subgraphs of another graph — subgraph_isomorphisms","text":"pattern smaller graph, might directed undirected. Undirected graphs treated directed graphs mutual edges. target bigger graph, might directed undirected. Undirected graphs treated directed graphs mutual edges. method method use. Possible values: ‘auto’, ‘lad’, ‘vf2’. See details . ... Additional arguments, passed various methods.","code":""},{"path":"/reference/subgraph_isomorphisms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All isomorphic mappings between a graph and subgraphs of another graph — subgraph_isomorphisms","text":"list vertex sequences, corresponding mappings first graph second.","code":""},{"path":"/reference/subgraph_isomorphisms.html","id":"-lad-method","dir":"Reference","previous_headings":"","what":"‘lad’ method","title":"All isomorphic mappings between a graph and subgraphs of another graph — subgraph_isomorphisms","text":"LAD algorithm Solnon, see reference . following extra arguments: domains NULL, specifies matching restrictions. must list target vertex sets, given numeric vertex ids symbolic vertex names. length list must vcount(pattern) vertex pattern gives allowed matching vertices target. Defaults NULL. induced Logical scalar, whether search induced subgraph. FALSE default. time.limit processor time limit computation, seconds. defaults Inf, means limit.","code":""},{"path":"/reference/subgraph_isomorphisms.html","id":"-vf-method","dir":"Reference","previous_headings":"","what":"‘vf2’ method","title":"All isomorphic mappings between a graph and subgraphs of another graph — subgraph_isomorphisms","text":"method uses VF2 algorithm Cordella, Foggia et al., see references . supports vertex edge colors following extra arguments: vertex.color1, vertex.color2 Optional integer vectors giving colors vertices colored graph isomorphism. given, graph “color” vertex attribute, used. want ignore attributes, supply NULL arguments. See also examples . edge.color1, edge.color2 Optional integer vectors giving colors edges edge-colored (sub)graph isomorphism. given, graph “color” edge attribute, used. want ignore attributes, supply NULL arguments.","code":""},{"path":[]},{"path":"/reference/tail_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Tails of the edge(s) in a graph — tail_of","title":"Tails of the edge(s) in a graph — tail_of","text":"undirected graphs, head tail defined.  case tail_of() returns vertices incident supplied edges, head_of() returns end(s) edge(s).","code":""},{"path":"/reference/tail_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tails of the edge(s) in a graph — tail_of","text":"","code":"tail_of(graph, es)"},{"path":"/reference/tail_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tails of the edge(s) in a graph — tail_of","text":"graph input graph. es edges query.","code":""},{"path":"/reference/tail_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tails of the edge(s) in a graph — tail_of","text":"vertex sequence tail(s) edge(s).","code":""},{"path":[]},{"path":"/reference/tkigraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Experimental basic igraph GUI — tkigraph","title":"Experimental basic igraph GUI — tkigraph","text":"functions starts experimental GUI igraph functions. GUI written Tcl/Tk, cross platform.","code":""},{"path":"/reference/tkigraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Experimental basic igraph GUI — tkigraph","text":"","code":"tkigraph()"},{"path":"/reference/tkigraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Experimental basic igraph GUI — tkigraph","text":"Returns NULL, invisibly.","code":""},{"path":"/reference/tkigraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Experimental basic igraph GUI — tkigraph","text":"tkigraph() online help system, please see details use .","code":""},{"path":[]},{"path":"/reference/tkigraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Experimental basic igraph GUI — tkigraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/tkplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive plotting of graphs — tkplot","title":"Interactive plotting of graphs — tkplot","text":"tkplot() companion functions serve interactive graph drawing facility. parameters plot can changed interactively right now though, eg. colors vertices, edges, also others pre-defined.","code":""},{"path":"/reference/tkplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive plotting of graphs — tkplot","text":"","code":"tkplot(graph, canvas.width = 450, canvas.height = 450, ...)  tk_close(tkp.id, window.close = TRUE)  tk_off()  tk_fit(tkp.id, width = NULL, height = NULL)  tk_center(tkp.id)  tk_reshape(tkp.id, newlayout, ..., params)  tk_postscript(tkp.id)  tk_coords(tkp.id, norm = FALSE)  tk_set_coords(tkp.id, coords)  tk_rotate(tkp.id, degree = NULL, rad = NULL)  tk_canvas(tkp.id)"},{"path":"/reference/tkplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive plotting of graphs — tkplot","text":"graph graph plot. canvas.width, canvas.height size tkplot drawing area. ... Additional plotting parameters. See igraph.plotting complete list. tkp.id id tkplot window close/reshape/etc. window.close Leave default value. width width rectangle generating new coordinates. height height rectangle generating new coordinates. newlayout new layout, see layout parameter tkplot. params Extra parameters list, pass layout function. norm Logical, norm coordinates. coords Two-column numeric matrix, new coordinates vertices, absolute coordinates. degree degree rotate plot. rad degree rotate plot, radian.","code":""},{"path":"/reference/tkplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive plotting of graphs — tkplot","text":"tkplot() returns integer, id plot, can used manipulate command line. tk_canvas() returns tkwin object, Tk canvas. tk_coords() returns matrix coordinates. tk_close(), tk_off(), tk_fit(), tk_reshape(), tk_postscript(), tk_center() tk_rotate() return NULL invisibly.","code":""},{"path":"/reference/tkplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interactive plotting of graphs — tkplot","text":"tkplot() interactive graph drawing facility. well developed stage, still useful. handling quite straightforward time, remarks hints. different popup menus, activated right mouse button, vertices edges. operate current selection vertex/edge cursor part selection operate vertex/edge cursor . One selection can active time, either vertex edge selection. vertex/edge can added selection holding control key clicking left mouse button. deselect vertex/edge. Selections can made also \"Select\" menu. \"Select vertices\" dialog allows give expression vertices selected: can list numeric R expessions separated commas, like 1,2:10,12,14,15 example. Similarly \"Select edges\" dialog two lists can given edges connecting vertex first list one second list selected. color dialog color name like 'orange' RGB notation can also used. tkplot() command creates new Tk window graphical representation graph. command returns integer number, tkplot id. commands utilize id able query manipulate plot. tk_close() closes Tk plot id tkp.id. tk_off() closes Tk plots. tk_fit() fits plot given rectangle (width height), NULL actual physical width od height plot window used. tk_reshape() applies new layout plot, optional parameters collected list analogous layout.par. tk_postscript() creates dialog window saving plot postscript format. tk_canvas() returns Tk canvas object belongs graph plot. canvas can directly manipulated , eg. labels can added, saved file programmatically, etc. See example . tk_coords() returns coordinates vertices matrix. row corresponds one vertex. tk_set_coords() sets coordinates vertices. two-column matrix specifies new positions, row corresponding single vertex. tk_center() shifts figure center plot window. tk_rotate() rotates figure, parameter can given either degrees radians.","code":""},{"path":"/reference/tkplot.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive plotting of graphs — tkplot","text":"","code":"g <- make_ring(10) tkplot(g)  ## Saving a tkplot() to a file programmatically g <- make_star(10, center=10)  E(g)$width <- sample(1:10, ecount(g), replace=TRUE) lay <- layout_nicely(g)  id <- tkplot(g, layout=lay) canvas <- tk_canvas(id) tcltk::tkpostscript(canvas, file=\"/tmp/output.eps\") tk_close(id)  ## Setting the coordinates and adding a title label g <- make_ring(10) id <- tkplot(make_ring(10), canvas.width=450, canvas.height=500)  canvas <- tk_canvas(id) padding <- 20 coords <- norm_coords(layout_in_circle(g), 0+padding, 450-padding,                       50+padding, 500-padding) tk_set_coords(id, coords)  width <- as.numeric(tkcget(canvas, \"-width\")) height <- as.numeric(tkcget(canvas, \"-height\")) tkcreate(canvas, \"text\", width/2, 25, text=\"My title\",          justify=\"center\", font=tcltk::tkfont.create(family=\"helvetica\",          size=20,weight=\"bold\"))"},{"path":[]},{"path":"/reference/tkplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interactive plotting of graphs — tkplot","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/to_prufer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tree graph to its Prufer sequence — to_prufer","title":"Convert a tree graph to its Prufer sequence — to_prufer","text":"to_prufer() converts tree graph Prufer sequence.","code":""},{"path":"/reference/to_prufer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tree graph to its Prufer sequence — to_prufer","text":"","code":"to_prufer(graph)"},{"path":"/reference/to_prufer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tree graph to its Prufer sequence — to_prufer","text":"graph graph convert Prufer sequence","code":""},{"path":"/reference/to_prufer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a tree graph to its Prufer sequence — to_prufer","text":"Prufer sequence graph, represented numeric vector vertex IDs sequence.","code":""},{"path":"/reference/to_prufer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a tree graph to its Prufer sequence — to_prufer","text":"Prufer sequence tree graph n labeled vertices sequence n-2 numbers, constructed follows. graph two vertices, find vertex degree one, remove tree add label vertex connected sequence. Repeat two vertices remaining graph.","code":""},{"path":[]},{"path":"/reference/to_prufer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a tree graph to its Prufer sequence — to_prufer","text":"","code":"g <- make_tree(13, 3) to_prufer(g) #>  [1] 2 2 2 1 3 3 3 1 4 4 4"},{"path":"/reference/topo_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Topological sorting of vertices in a graph — topo_sort","title":"Topological sorting of vertices in a graph — topo_sort","text":"topological sorting directed acyclic graph linear ordering nodes node comes nodes edges.","code":""},{"path":"/reference/topo_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Topological sorting of vertices in a graph — topo_sort","text":"","code":"topo_sort(graph, mode = c(\"out\", \"all\", \"in\"))"},{"path":"/reference/topo_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Topological sorting of vertices in a graph — topo_sort","text":"graph input graph, directed mode Specifies use direction edges.  “”, sorting order ensures node comes nodes edges, nodes incoming edges go first. “”, quite opposite: node comes nodes receives edges. Nodes outgoing edges go first.","code":""},{"path":"/reference/topo_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Topological sorting of vertices in a graph — topo_sort","text":"vertex sequence (default, see return.vs.es option igraph_options()) containing vertices topologically sorted order.","code":""},{"path":"/reference/topo_sort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Topological sorting of vertices in a graph — topo_sort","text":"Every DAG least one topological sort, may many.  function returns possible topological sort among . graph acyclic (least one cycle), partial topological sort returned warning issued.","code":""},{"path":[]},{"path":"/reference/topo_sort.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Topological sorting of vertices in a graph — topo_sort","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com R interface","code":""},{"path":"/reference/topo_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Topological sorting of vertices in a graph — topo_sort","text":"","code":"g <- barabasi.game(100) topo_sort(g) #> + 100/100 vertices, from d23ff5e: #>   [1]   9  10  11  14  15  16  17  18  20  24  25  30  31  35  37  38  39  44 #>  [19]  45  46  47  48  49  50  51  54  56  59  60  61  62  63  64  65  66  67 #>  [37]  68  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86 #>  [55]  87  88  89  90  91  92  93  94  95  96  97  98  99 100  13   4   6  19 #>  [73]   5  23  58  28  32  52  55  27  42  33  57  41  29  69  34  12  53   8 #>  [91]   3  36  43  26  40  21   7  22   2   1"},{"path":"/reference/transitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Transitivity of a graph — transitivity","title":"Transitivity of a graph — transitivity","text":"Transitivity measures probability adjacent vertices vertex connected. sometimes also called clustering coefficient.","code":""},{"path":"/reference/transitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transitivity of a graph — transitivity","text":"","code":"transitivity(   graph,   type = c(\"undirected\", \"global\", \"globalundirected\", \"localundirected\", \"local\",     \"average\", \"localaverage\", \"localaverageundirected\", \"barrat\", \"weighted\"),   vids = NULL,   weights = NULL,   isolates = c(\"NaN\", \"zero\") )"},{"path":"/reference/transitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transitivity of a graph — transitivity","text":"graph graph analyze. type type transitivity calculate. Possible values: \"global\" global transitivity undirected graph. simply ratio count triangles connected triples graph. directed graphs, edge directions ignored. \"local\" local transitivity undirected graph. calculated vertex given vids argument. local transitivity vertex ratio count triangles connected vertex triples centered vertex. directed graphs, edge directions ignored. \"undirected\" global. \"globalundirected\" global. \"localundirected\" local. \"barrat\" weighted transitivity defined . Barrat. See details . \"weighted\" barrat. vids vertex ids local transitivity calculated. ignored global transitivity types.  default value NULL, case vertices considered. slightly faster supply NULL V(graph). weights Optional weights weighted transitivity. ignored transitivity measures. NULL (default) graph weight edge attribute, used automatically. isolates Character scalar, defines treat vertices degree zero one. ‘NaN’ local transitivity reported NaN included averaging, transitivity types calculate average. vertices degree two higher, averaging still result NaN. ‘zero’, report 0 transitivity , included averaging, average calculated.","code":""},{"path":"/reference/transitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transitivity of a graph — transitivity","text":"‘global’ single number, NaN connected triples graph. ‘local’ vector transitivity scores, one vertex ‘vids’.","code":""},{"path":"/reference/transitivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transitivity of a graph — transitivity","text":"Note essentially two classes transitivity measures, one vertex-level, graph level property. several generalizations transitivity weighted graphs, use definition . Barrat, local vertex-level quantity, formula $$C_i^w=\\frac{1}{s_i(k_i-1)}\\sum_{j,h}\\frac{w_{ij}+w_{ih}}{2}a_{ij}a_{ih}a_{jh}$$ \\(s_i\\) strength vertex \\(\\), see strength(), \\(a_{ij}\\) elements adjacency matrix, \\(k_i\\) vertex degree, \\(w_{ij}\\) weights. formula gives back normal -weighted local transitivity edge weights . barrat type transitivity work graphs multiple /loop edges. want calculate directed graph, call .undirected() collapse mode first.","code":""},{"path":"/reference/transitivity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transitivity of a graph — transitivity","text":"Wasserman, S., Faust, K. (1994). Social Network Analysis: Methods Applications. Cambridge: Cambridge University Press. Alain Barrat, Marc Barthelemy, Romualdo Pastor-Satorras, Alessandro Vespignani: architecture complex weighted networks, Proc. Natl. Acad. Sci. USA 101, 3747 (2004)","code":""},{"path":[]},{"path":"/reference/transitivity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transitivity of a graph — transitivity","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/transitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transitivity of a graph — transitivity","text":"","code":"g <- make_ring(10) transitivity(g) #> [1] 0 g2 <- sample_gnp(1000, 10 / 1000) transitivity(g2) # this is about 10/1000 #> [1] 0.009790038  # Weighted version, the figure from the Barrat paper gw <- graph_from_literal(A - B:C:D:E, B - C:D, C - D) E(gw)$weight <- 1 E(gw)[V(gw)[name == \"A\"] %--% V(gw)[name == \"E\"]]$weight <- 5 transitivity(gw, vids = \"A\", type = \"local\") #> [1] 0.5 transitivity(gw, vids = \"A\", type = \"weighted\") #> [1] 0.25  # Weighted reduces to \"local\" if weights are the same gw2 <- sample_gnp(1000, 10 / 1000) E(gw2)$weight <- 1 t1 <- transitivity(gw2, type = \"local\") t2 <- transitivity(gw2, type = \"weighted\") all(is.na(t1) == is.na(t2)) #> [1] TRUE all(na.omit(t1 == t2)) #> [1] FALSE"},{"path":"/reference/triad_census.html","id":null,"dir":"Reference","previous_headings":"","what":"Triad census, subgraphs with three vertices — triad_census","title":"Triad census, subgraphs with three vertices — triad_census","text":"function counts different subgraphs three vertices graph.","code":""},{"path":"/reference/triad_census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Triad census, subgraphs with three vertices — triad_census","text":"","code":"triad_census(graph)"},{"path":"/reference/triad_census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Triad census, subgraphs with three vertices — triad_census","text":"graph input graph, directed. undirected graph results warning, undefined results.","code":""},{"path":"/reference/triad_census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Triad census, subgraphs with three vertices — triad_census","text":"numeric vector, subgraph counts, order given description.","code":""},{"path":"/reference/triad_census.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Triad census, subgraphs with three vertices — triad_census","text":"Triad census defined David Leinhardt (see References ). Every triple vertices (, B, C) classified 16 possible states: 003 ,B,C, empty graph. 012 ->B, C, graph single directed edge. 102 <->B, C, graph mutual connection two vertices. 021D <-B->C, -star. 021U ->B<-C, -star. 021C ->B->C, directed line. 111D <->B<-C. 111U <->B->C. 030T ->B<-C, ->C. 030C <-B<-C, ->C. 201 <->B<->C. 120D <-B->C, <->C. 120U ->B<-C, <->C. 120C ->B->C, <->C. 210 ->B<->C, <->C. 300 <->B<->C, <->C, complete graph. functions uses RANDESU motif finder algorithm find count subgraphs, see motifs().","code":""},{"path":"/reference/triad_census.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Triad census, subgraphs with three vertices — triad_census","text":"See also Davis, J.. Leinhardt, S.  (1972).  Structure Positive Interpersonal Relations Small Groups.  J. Berger (Ed.), Sociological Theories Progress, Volume 2, 218-251.  Boston: Houghton Mifflin.","code":""},{"path":[]},{"path":"/reference/triad_census.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Triad census, subgraphs with three vertices — triad_census","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/triad_census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Triad census, subgraphs with three vertices — triad_census","text":"","code":"g <- sample_gnm(15, 45, directed = TRUE) triad_census(g) #>  [1] 102 190  23  23  19  40  14  16  14   4   1   2   2   4   1   0"},{"path":"/reference/unfold_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a general graph into a forest — unfold_tree","title":"Convert a general graph into a forest — unfold_tree","text":"Perform breadth-first search graph convert tree forest replicating vertices found .","code":""},{"path":"/reference/unfold_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a general graph into a forest — unfold_tree","text":"","code":"unfold_tree(graph, mode = c(\"all\", \"out\", \"in\", \"total\"), roots)"},{"path":"/reference/unfold_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a general graph into a forest — unfold_tree","text":"graph input graph, can either directed undirected. mode Character string, defined types paths used breadth-first search. “” follows outgoing, “” incoming edges, “” “total” . argument ignored undirected graphs. roots vector giving vertices breadth-first search performed. Typically contains one vertex per component.","code":""},{"path":"/reference/unfold_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a general graph into a forest — unfold_tree","text":"list two components: tree result, igraph object, tree forest. vertex_index numeric vector, gives mapping vertices new graph vertices old graph.","code":""},{"path":"/reference/unfold_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a general graph into a forest — unfold_tree","text":"forest graph, whose components trees. roots vector can calculated simply topological sort components graph, see examples .","code":""},{"path":[]},{"path":"/reference/unfold_tree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a general graph into a forest — unfold_tree","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/unfold_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a general graph into a forest — unfold_tree","text":"","code":"g <- make_tree(10) %du% make_tree(10) V(g)$id <- seq_len(vcount(g)) - 1 roots <- sapply(decompose(g), function(x) {   V(x)$id[topo_sort(x)[1] + 1] }) tree <- unfold_tree(g, roots = roots)"},{"path":"/reference/union.html","id":null,"dir":"Reference","previous_headings":"","what":"Union of two or more sets — union","title":"Union of two or more sets — union","text":"S3 generic function. See methods(\"union\") actual implementations various S3 classes. Initially implemented igraph graphs igraph vertex edge sequences. See union.igraph(), union.igraph.vs().","code":""},{"path":"/reference/union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union of two or more sets — union","text":"","code":"union(...)"},{"path":"/reference/union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union of two or more sets — union","text":"... Arguments, number interpretation depends function implements union().","code":""},{"path":"/reference/union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union of two or more sets — union","text":"Depends function implements method.","code":""},{"path":"/reference/union.igraph.es.html","id":null,"dir":"Reference","previous_headings":"","what":"Union of edge sequences — union.igraph.es","title":"Union of edge sequences — union.igraph.es","text":"Union edge sequences","code":""},{"path":"/reference/union.igraph.es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union of edge sequences — union.igraph.es","text":"","code":"# S3 method for igraph.es union(...)"},{"path":"/reference/union.igraph.es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union of edge sequences — union.igraph.es","text":"... edge sequences take union .","code":""},{"path":"/reference/union.igraph.es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union of edge sequences — union.igraph.es","text":"edge sequence contains edges given sequences, exactly .","code":""},{"path":"/reference/union.igraph.es.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Union of edge sequences — union.igraph.es","text":"must belong graph. Note function ‘set’ semantics multiplicity edges lost result. (match behavior based unique function.)","code":""},{"path":[]},{"path":"/reference/union.igraph.es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Union of edge sequences — union.igraph.es","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) union(E(g)[1:6], E(g)[5:9], E(g)[\"A|J\"]) #> + 10/10 edges from 6fa5f08 (vertex names): #>  [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J"},{"path":"/reference/union.igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Union of graphs — union.igraph","title":"Union of graphs — union.igraph","text":"union two graphs created. graphs may identical overlapping vertex sets.","code":""},{"path":"/reference/union.igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union of graphs — union.igraph","text":"","code":"# S3 method for igraph union(..., byname = \"auto\")"},{"path":"/reference/union.igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union of graphs — union.igraph","text":"... Graph objects lists graph objects. byname logical scalar, character scalar auto. Whether perform operation based symbolic vertex names. auto, means TRUE graphs named FALSE otherwise. warning generated auto () graphs named.","code":""},{"path":"/reference/union.igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union of graphs — union.igraph","text":"new graph object.","code":""},{"path":"/reference/union.igraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Union of graphs — union.igraph","text":"union() creates union two graphs.  Edges included least one graph part new graph. function can also used via %u% operator. byname argument TRUE (auto graphs named), operation performed symbolic vertex names instead internal numeric vertex ids. union() keeps attributes graphs. graph, vertex edge attributes copied result. attribute present multiple graphs result name clash, attribute renamed adding suffixes: _1, _2, etc. name vertex attribute treated specially operation performed based symbolic vertex names. case name must present graphs, renamed result graph. error generated input graphs directed others undirected.","code":""},{"path":"/reference/union.igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Union of graphs — union.igraph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/union.igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Union of graphs — union.igraph","text":"","code":"## Union of two social networks with overlapping sets of actors net1 <- graph_from_literal(   D - A:B:F:G, A - C - F - A, B - E - G - B, A - B, F - G,   H - F:G, H - I - J ) net2 <- graph_from_literal(D - A:F:Y, B - A - X - F - H - Z, F - Y) print_all(net1 %u% net2) #> IGRAPH ea798aa UN-- 13 21 --  #> + attr: name (v/c) #> + vertex attributes: #> |      name #> | [1]     D #> | [2]     A #> | [3]     B #> | [4]     F #> | [5]     G #> | [6]     C #> | [7]     E #> | [8]     H #> | [9]     I #> | [10]    J #> | [11]    Y #> | [12]    X #> | [13]    Z #> + edges from ea798aa (vertex names): #>  [1] I--J H--Z H--I G--H G--E F--X F--Y F--H F--C F--G B--E B--G A--X A--C A--F #> [16] A--B D--Y D--G D--F D--B D--A"},{"path":"/reference/union.igraph.vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Union of vertex sequences — union.igraph.vs","title":"Union of vertex sequences — union.igraph.vs","text":"Union vertex sequences","code":""},{"path":"/reference/union.igraph.vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union of vertex sequences — union.igraph.vs","text":"","code":"# S3 method for igraph.vs union(...)"},{"path":"/reference/union.igraph.vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union of vertex sequences — union.igraph.vs","text":"... vertex sequences take union .","code":""},{"path":"/reference/union.igraph.vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union of vertex sequences — union.igraph.vs","text":"vertex sequence contains vertices given sequences, exactly .","code":""},{"path":"/reference/union.igraph.vs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Union of vertex sequences — union.igraph.vs","text":"must belong graph. Note function ‘set’ semantics multiplicity vertices lost result. (match behavior based unique function.)","code":""},{"path":[]},{"path":"/reference/union.igraph.vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Union of vertex sequences — union.igraph.vs","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) union(V(g)[1:6], V(g)[5:10]) #> + 10/10 vertices, named, from 6b767fa: #>  [1] A B C D E F G H I J"},{"path":"/reference/unique.igraph.es.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicate edges from an edge sequence — unique.igraph.es","title":"Remove duplicate edges from an edge sequence — unique.igraph.es","text":"Remove duplicate edges edge sequence","code":""},{"path":"/reference/unique.igraph.es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicate edges from an edge sequence — unique.igraph.es","text":"","code":"# S3 method for igraph.es unique(x, incomparables = FALSE, ...)"},{"path":"/reference/unique.igraph.es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicate edges from an edge sequence — unique.igraph.es","text":"x edge sequence. incomparables vector values compared. Passed base function duplicated. See details . ... Passed base function duplicated().","code":""},{"path":"/reference/unique.igraph.es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicate edges from an edge sequence — unique.igraph.es","text":"edge sequence duplicate vertices removed.","code":""},{"path":[]},{"path":"/reference/unique.igraph.es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicate edges from an edge sequence — unique.igraph.es","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) E(g)[1, 1:5, 1:10, 5:10] #> + 22/10 edges from b4867c6 (vertex names): #>  [1] A--B A--B B--C C--D D--E E--F A--B B--C C--D D--E E--F F--G G--H H--I I--J #> [16] A--J E--F F--G G--H H--I I--J A--J E(g)[1, 1:5, 1:10, 5:10] %>% unique() #> + 10/10 edges from b4867c6 (vertex names): #>  [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J"},{"path":"/reference/unique.igraph.vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicate vertices from a vertex sequence — unique.igraph.vs","title":"Remove duplicate vertices from a vertex sequence — unique.igraph.vs","text":"Remove duplicate vertices vertex sequence","code":""},{"path":"/reference/unique.igraph.vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicate vertices from a vertex sequence — unique.igraph.vs","text":"","code":"# S3 method for igraph.vs unique(x, incomparables = FALSE, ...)"},{"path":"/reference/unique.igraph.vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicate vertices from a vertex sequence — unique.igraph.vs","text":"x vertex sequence. incomparables vector values compared. Passed base function duplicated. See details . ... Passed base function duplicated().","code":""},{"path":"/reference/unique.igraph.vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicate vertices from a vertex sequence — unique.igraph.vs","text":"vertex sequence duplicate vertices removed.","code":""},{"path":[]},{"path":"/reference/unique.igraph.vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicate vertices from a vertex sequence — unique.igraph.vs","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) V(g)[1, 1:5, 1:10, 5:10] #> + 22/10 vertices, named, from 5848e43: #>  [1] A A B C D E A B C D E F G H I J E F G H I J V(g)[1, 1:5, 1:10, 5:10] %>% unique() #> + 10/10 vertices, named, from 5848e43: #>  [1] A B C D E F G H I J"},{"path":"/reference/upgrade_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"igraph data structure versions — upgrade_graph","title":"igraph data structure versions — upgrade_graph","text":"igraph's internal data representation changes sometimes versions. means possible use igraph objects created (possibly saved file) older igraph version.","code":""},{"path":"/reference/upgrade_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"igraph data structure versions — upgrade_graph","text":"","code":"upgrade_graph(graph)"},{"path":"/reference/upgrade_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"igraph data structure versions — upgrade_graph","text":"graph input graph.","code":""},{"path":"/reference/upgrade_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"igraph data structure versions — upgrade_graph","text":"graph current format.","code":""},{"path":"/reference/upgrade_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"igraph data structure versions — upgrade_graph","text":"graph_version() queries current data format, data format possibly older igraph graph. upgrade_graph() can convert older data format current one.","code":""},{"path":[]},{"path":"/reference/vertex.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for adding and deleting vertices — vertex","title":"Helper function for adding and deleting vertices — vertex","text":"helper function simplifies adding deleting vertices /graphs.","code":""},{"path":"/reference/vertex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for adding and deleting vertices — vertex","text":"","code":"vertex(...)  vertices(...)"},{"path":"/reference/vertex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for adding and deleting vertices — vertex","text":"... See details .","code":""},{"path":"/reference/vertex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for adding and deleting vertices — vertex","text":"special object can used together igraph graphs plus minus operators.","code":""},{"path":"/reference/vertex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function for adding and deleting vertices — vertex","text":"vertices() alias vertex(). adding vertices via +, unnamed arguments interpreted vertex names new vertices. Named arguments interpreted vertex attributes new vertices. deleting vertices via -, arguments vertex() (vertices()) concatenated via c() passed delete_vertices().","code":""},{"path":[]},{"path":"/reference/vertex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for adding and deleting vertices — vertex","text":"","code":"g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) +   vertices(\"X\", \"Y\") g #> [[1]] #> [1] 12 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 10 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"X\" \"Y\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf0d4760> #>  #> attr(,\"class\") #> [1] \"igraph\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/vertex.shape.pie.html","id":null,"dir":"Reference","previous_headings":"","what":"Using pie charts as vertices in graph plots — Pie charts as vertices","title":"Using pie charts as vertices in graph plots — Pie charts as vertices","text":"complex vertex images can used express addtional   information vertices. E.g. pie charts can used vertices,   denote vertex classes, fuzzy classification vertices, etc.","code":""},{"path":"/reference/vertex.shape.pie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Using pie charts as vertices in graph plots — Pie charts as vertices","text":"vertex shape ‘pie’ makes igraph draw pie chart every   vertex. extra graphical vertex parameters specify   pie charts look like: pie Numeric vector, gives sizes pie slices. pie.color list color vectors use pies.       list single vector, used pies.       color vector shorter number areas pie,       recycled. pie.angle slope shading lines, given angle       degrees (counter-clockwise). pie.density density shading lines, lines per       inch. Non-positive values inhibit drawing shading lines. pie.lty line type border slices.","code":""},{"path":"/reference/vertex.shape.pie.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Using pie charts as vertices in graph plots — Pie charts as vertices","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":[]},{"path":"/reference/vertex.shape.pie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Using pie charts as vertices in graph plots — Pie charts as vertices","text":"","code":"g <- make_ring(10) values <- lapply(1:10, function(x) sample(1:10,3)) if (interactive()) {   plot(g, vertex.shape=\"pie\", vertex.pie=values,        vertex.pie.color=list(heat.colors(5)),        vertex.size=seq(10,30,length.out=10), vertex.label=NA) }"},{"path":"/reference/vertex_attr-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set one or more vertex attributes — vertex_attr<-","title":"Set one or more vertex attributes — vertex_attr<-","text":"Set one vertex attributes","code":""},{"path":"/reference/vertex_attr-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set one or more vertex attributes — vertex_attr<-","text":"","code":"vertex_attr(graph, name, index = V(graph)) <- value"},{"path":"/reference/vertex_attr-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set one or more vertex attributes — vertex_attr<-","text":"graph graph. name name vertex attribute set. missing, value must named list, entries set vertex attributes. index optional vertex sequence set attributes subset vertices. value new value attribute(s) (index) vertices.","code":""},{"path":"/reference/vertex_attr-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set one or more vertex attributes — vertex_attr<-","text":"graph, vertex attribute(s) added set.","code":""},{"path":[]},{"path":"/reference/vertex_attr-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set one or more vertex attributes — vertex_attr<-","text":"","code":"g <- make_ring(10) vertex_attr(g) <- list(   name = LETTERS[1:10],   color = rep(\"yellow\", gorder(g)) ) vertex_attr(g, \"label\") <- V(g)$name g #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> [[9]][[3]]$name #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #> [[9]][[3]]$color #>  [1] \"yellow\" \"yellow\" \"yellow\" \"yellow\" \"yellow\" \"yellow\" \"yellow\" \"yellow\" #>  [9] \"yellow\" \"yellow\" #>  #> [[9]][[3]]$label #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb4d28868> #>  #> attr(,\"class\") #> [1] \"igraph\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/vertex_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Query vertex attributes of a graph — vertex_attr","title":"Query vertex attributes of a graph — vertex_attr","text":"Query vertex attributes graph","code":""},{"path":"/reference/vertex_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query vertex attributes of a graph — vertex_attr","text":"","code":"vertex_attr(graph, name, index = V(graph))"},{"path":"/reference/vertex_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query vertex attributes of a graph — vertex_attr","text":"graph graph. name Name attribute query. missing, vertex attributes returned list. index optional vertex sequence query attribute vertices.","code":""},{"path":"/reference/vertex_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query vertex attributes of a graph — vertex_attr","text":"value vertex attribute, list vertex attributes, name missing.","code":""},{"path":[]},{"path":"/reference/vertex_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query vertex attributes of a graph — vertex_attr","text":"","code":"g <- make_ring(10) %>%   set_vertex_attr(\"color\", value = \"red\") %>%   set_vertex_attr(\"label\", value = letters[1:10]) vertex_attr(g, \"label\") #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" vertex_attr(g) #> $color #>  [1] \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" \"red\" #>  #> $label #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/vertex_attr_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List names of vertex attributes — vertex_attr_names","title":"List names of vertex attributes — vertex_attr_names","text":"List names vertex attributes","code":""},{"path":"/reference/vertex_attr_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List names of vertex attributes — vertex_attr_names","text":"","code":"vertex_attr_names(graph)"},{"path":"/reference/vertex_attr_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List names of vertex attributes — vertex_attr_names","text":"graph graph.","code":""},{"path":"/reference/vertex_attr_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List names of vertex attributes — vertex_attr_names","text":"Character vector, names vertex attributes.","code":""},{"path":[]},{"path":"/reference/vertex_attr_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List names of vertex attributes — vertex_attr_names","text":"","code":"g <- make_ring(10) %>%   set_vertex_attr(\"name\", value = LETTERS[1:10]) %>%   set_vertex_attr(\"color\", value = rep(\"green\", 10)) vertex_attr_names(g) #> [1] \"name\"  \"color\" plot(g) #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/vertex_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Vertex connectivity. — vertex_connectivity","title":"Vertex connectivity. — vertex_connectivity","text":"vertex connectivity graph two vertices, recently also called group cohesion.","code":""},{"path":"/reference/vertex_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vertex connectivity. — vertex_connectivity","text":"","code":"vertex_connectivity(graph, source = NULL, target = NULL, checks = TRUE)  # S3 method for igraph cohesion(x, checks = TRUE, ...)"},{"path":"/reference/vertex_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vertex connectivity. — vertex_connectivity","text":"graph, x input graph. source id source vertex, vertex_connectivity() can NULL, see details . target id target vertex, vertex_connectivity() can NULL, see details . checks Logical constant. Whether check graph connected also degree vertices. graph (strongly) connected connectivity obviously zero. Otherwise minimum degree one vertex connectivity also one. good idea perform checks, can done quickly compared connectivity calculation .  suggested Peter McMahan, thanks Peter. ... Ignored.","code":""},{"path":"/reference/vertex_connectivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vertex connectivity. — vertex_connectivity","text":"scalar real value.","code":""},{"path":"/reference/vertex_connectivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vertex connectivity. — vertex_connectivity","text":"vertex connectivity two vertices (source target) directed graph minimum number vertices needed remove graph eliminate (directed) paths source target. vertex_connectivity() calculates quantity source target arguments given NULL. vertex connectivity graph minimum vertex connectivity (ordered) pairs vertices graph. words minimum number vertices needed remove make graph strongly connected. (graph strongly connected zero.) vertex_connectivity() calculates quantity neither source target arguments given. (Ie. NULL.) set vertex disjoint directed paths source vertex set directed paths whose vertices contain common vertices (apart source target). maximum number vertex disjoint paths two vertices vertex connectivity cases (two vertices connected edge). cohesion graph (defined White Harary, see references), vertex connectivity graph. calculated cohesion(). three functions essentially calculate measure(s), precisely vertex_connectivity() general, two included ease using descriptive function names.","code":""},{"path":"/reference/vertex_connectivity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vertex connectivity. — vertex_connectivity","text":"White, Douglas R Frank Harary 2001. Cohesiveness Blocks Social Networks: Node Connectivity Conditional Density. Sociological Methodology 31 (1) : 305-359.","code":""},{"path":[]},{"path":"/reference/vertex_connectivity.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vertex connectivity. — vertex_connectivity","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/vertex_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vertex connectivity. — vertex_connectivity","text":"","code":"g <- barabasi.game(100, m = 1) g <- delete_edges(g, E(g)[100 %--% 1]) g2 <- barabasi.game(100, m = 5) g2 <- delete_edges(g2, E(g2)[100 %--% 1]) vertex_connectivity(g, 100, 1) #> [1] 1 vertex_connectivity(g2, 100, 1) #> [1] 4 vertex_disjoint_paths(g2, 100, 1) #> [1] 4  g <- sample_gnp(50, 5 / 50) g <- as.directed(g) g <- induced_subgraph(g, subcomponent(g, 1)) cohesion(g) #> [1] 1"},{"path":"/reference/weighted_cliques.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to find weighted cliques, ie. weighted complete subgraphs in a graph — weighted_cliques","title":"Functions to find weighted cliques, ie. weighted complete subgraphs in a graph — weighted_cliques","text":"functions find , largest maximal weighted cliques undirected graph. weight clique sum weights edges.","code":""},{"path":"/reference/weighted_cliques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to find weighted cliques, ie. weighted complete subgraphs in a graph — weighted_cliques","text":"","code":"weighted_cliques(   graph,   vertex.weights = NULL,   min.weight = 0,   max.weight = 0,   maximal = FALSE )"},{"path":"/reference/weighted_cliques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to find weighted cliques, ie. weighted complete subgraphs in a graph — weighted_cliques","text":"graph input graph, directed graphs considered undirected ones, multiple edges loops ignored. vertex.weights Vertex weight vector. graph weight vertex attribute, used default. graph weight vertex attribute argument NULL, every vertex assumed weight 1. Note current implementation weighted clique finder supports positive integer weights . min.weight Numeric constant, lower limit weight cliques find. NULL means limit, ie. 0. max.weight Numeric constant, upper limit weight cliques find. NULL means limit. maximal Specifies whether look weighted cliques (FALSE) maximal ones (TRUE).","code":""},{"path":"/reference/weighted_cliques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to find weighted cliques, ie. weighted complete subgraphs in a graph — weighted_cliques","text":"weighted_cliques() largest_weighted_cliques() return list containing numeric vectors vertex IDs. list element weighted clique, .e. vertex sequence class igraph.vs(). weighted_clique_num() count_max_weighted_cliques return integer scalar.","code":""},{"path":"/reference/weighted_cliques.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions to find weighted cliques, ie. weighted complete subgraphs in a graph — weighted_cliques","text":"weighted_cliques() find complete subgraphs input graph, obeying weight limitations given min max arguments. largest_weighted_cliques() finds largest weighted cliques input graph. clique largest clique whose total weight larger weight clique. max_weighted_cliques finds maximal weighted cliques input graph. weighted clique maximal extended clique larger total weight. largest weighted cliques always maximal, maximal weighted clique necessarily largest. count_max_weighted_cliques counts maximal weighted cliques. weighted_clique_num() calculates weight largest weighted clique(s).","code":""},{"path":[]},{"path":"/reference/weighted_cliques.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions to find weighted cliques, ie. weighted complete subgraphs in a graph — weighted_cliques","text":"Tamas Nepusz ntamas@gmail.com Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/weighted_cliques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to find weighted cliques, ie. weighted complete subgraphs in a graph — weighted_cliques","text":"","code":"g <- make_graph(\"zachary\") V(g)$weight <- 1 V(g)[c(1, 2, 3, 4, 14)]$weight <- 3 weighted_cliques(g) #> [[1]] #> + 1/34 vertex, from eb7025e: #> [1] 34 #>  #> [[2]] #> + 1/34 vertex, from eb7025e: #> [1] 33 #>  #> [[3]] #> + 2/34 vertices, from eb7025e: #> [1] 33 34 #>  #> [[4]] #> + 1/34 vertex, from eb7025e: #> [1] 8 #>  #> [[5]] #> + 1/34 vertex, from eb7025e: #> [1] 9 #>  #> [[6]] #> + 2/34 vertices, from eb7025e: #> [1]  9 33 #>  #> [[7]] #> + 3/34 vertices, from eb7025e: #> [1]  9 33 34 #>  #> [[8]] #> + 2/34 vertices, from eb7025e: #> [1]  9 34 #>  #> [[9]] #> + 1/34 vertex, from eb7025e: #> [1] 32 #>  #> [[10]] #> + 2/34 vertices, from eb7025e: #> [1] 32 33 #>  #> [[11]] #> + 3/34 vertices, from eb7025e: #> [1] 32 33 34 #>  #> [[12]] #> + 2/34 vertices, from eb7025e: #> [1] 32 34 #>  #> [[13]] #> + 1/34 vertex, from eb7025e: #> [1] 22 #>  #> [[14]] #> + 1/34 vertex, from eb7025e: #> [1] 20 #>  #> [[15]] #> + 2/34 vertices, from eb7025e: #> [1] 20 34 #>  #> [[16]] #> + 1/34 vertex, from eb7025e: #> [1] 18 #>  #> [[17]] #> + 1/34 vertex, from eb7025e: #> [1] 13 #>  #> [[18]] #> + 1/34 vertex, from eb7025e: #> [1] 7 #>  #> [[19]] #> + 1/34 vertex, from eb7025e: #> [1] 28 #>  #> [[20]] #> + 2/34 vertices, from eb7025e: #> [1] 28 34 #>  #> [[21]] #> + 1/34 vertex, from eb7025e: #> [1] 11 #>  #> [[22]] #> + 1/34 vertex, from eb7025e: #> [1] 6 #>  #> [[23]] #> + 2/34 vertices, from eb7025e: #> [1]  6 11 #>  #> [[24]] #> + 2/34 vertices, from eb7025e: #> [1] 6 7 #>  #> [[25]] #> + 1/34 vertex, from eb7025e: #> [1] 31 #>  #> [[26]] #> + 2/34 vertices, from eb7025e: #> [1]  9 31 #>  #> [[27]] #> + 3/34 vertices, from eb7025e: #> [1]  9 31 33 #>  #> [[28]] #> + 4/34 vertices, from eb7025e: #> [1]  9 31 33 34 #>  #> [[29]] #> + 3/34 vertices, from eb7025e: #> [1]  9 31 34 #>  #> [[30]] #> + 2/34 vertices, from eb7025e: #> [1] 31 33 #>  #> [[31]] #> + 3/34 vertices, from eb7025e: #> [1] 31 33 34 #>  #> [[32]] #> + 2/34 vertices, from eb7025e: #> [1] 31 34 #>  #> [[33]] #> + 1/34 vertex, from eb7025e: #> [1] 29 #>  #> [[34]] #> + 2/34 vertices, from eb7025e: #> [1] 29 32 #>  #> [[35]] #> + 3/34 vertices, from eb7025e: #> [1] 29 32 34 #>  #> [[36]] #> + 2/34 vertices, from eb7025e: #> [1] 29 34 #>  #> [[37]] #> + 1/34 vertex, from eb7025e: #> [1] 12 #>  #> [[38]] #> + 1/34 vertex, from eb7025e: #> [1] 10 #>  #> [[39]] #> + 2/34 vertices, from eb7025e: #> [1] 10 34 #>  #> [[40]] #> + 1/34 vertex, from eb7025e: #> [1] 5 #>  #> [[41]] #> + 2/34 vertices, from eb7025e: #> [1]  5 11 #>  #> [[42]] #> + 2/34 vertices, from eb7025e: #> [1] 5 7 #>  #> [[43]] #> + 1/34 vertex, from eb7025e: #> [1] 30 #>  #> [[44]] #> + 2/34 vertices, from eb7025e: #> [1] 30 33 #>  #> [[45]] #> + 3/34 vertices, from eb7025e: #> [1] 30 33 34 #>  #> [[46]] #> + 2/34 vertices, from eb7025e: #> [1] 30 34 #>  #> [[47]] #> + 1/34 vertex, from eb7025e: #> [1] 26 #>  #> [[48]] #> + 2/34 vertices, from eb7025e: #> [1] 26 32 #>  #> [[49]] #> + 1/34 vertex, from eb7025e: #> [1] 27 #>  #> [[50]] #> + 2/34 vertices, from eb7025e: #> [1] 27 30 #>  #> [[51]] #> + 3/34 vertices, from eb7025e: #> [1] 27 30 34 #>  #> [[52]] #> + 2/34 vertices, from eb7025e: #> [1] 27 34 #>  #> [[53]] #> + 1/34 vertex, from eb7025e: #> [1] 25 #>  #> [[54]] #> + 2/34 vertices, from eb7025e: #> [1] 25 26 #>  #> [[55]] #> + 3/34 vertices, from eb7025e: #> [1] 25 26 32 #>  #> [[56]] #> + 2/34 vertices, from eb7025e: #> [1] 25 28 #>  #> [[57]] #> + 2/34 vertices, from eb7025e: #> [1] 25 32 #>  #> [[58]] #> + 1/34 vertex, from eb7025e: #> [1] 24 #>  #> [[59]] #> + 2/34 vertices, from eb7025e: #> [1] 24 26 #>  #> [[60]] #> + 2/34 vertices, from eb7025e: #> [1] 24 30 #>  #> [[61]] #> + 3/34 vertices, from eb7025e: #> [1] 24 30 33 #>  #> [[62]] #> + 4/34 vertices, from eb7025e: #> [1] 24 30 33 34 #>  #> [[63]] #> + 3/34 vertices, from eb7025e: #> [1] 24 30 34 #>  #> [[64]] #> + 2/34 vertices, from eb7025e: #> [1] 24 28 #>  #> [[65]] #> + 3/34 vertices, from eb7025e: #> [1] 24 28 34 #>  #> [[66]] #> + 2/34 vertices, from eb7025e: #> [1] 24 33 #>  #> [[67]] #> + 3/34 vertices, from eb7025e: #> [1] 24 33 34 #>  #> [[68]] #> + 2/34 vertices, from eb7025e: #> [1] 24 34 #>  #> [[69]] #> + 1/34 vertex, from eb7025e: #> [1] 23 #>  #> [[70]] #> + 2/34 vertices, from eb7025e: #> [1] 23 33 #>  #> [[71]] #> + 3/34 vertices, from eb7025e: #> [1] 23 33 34 #>  #> [[72]] #> + 2/34 vertices, from eb7025e: #> [1] 23 34 #>  #> [[73]] #> + 1/34 vertex, from eb7025e: #> [1] 21 #>  #> [[74]] #> + 2/34 vertices, from eb7025e: #> [1] 21 33 #>  #> [[75]] #> + 3/34 vertices, from eb7025e: #> [1] 21 33 34 #>  #> [[76]] #> + 2/34 vertices, from eb7025e: #> [1] 21 34 #>  #> [[77]] #> + 1/34 vertex, from eb7025e: #> [1] 19 #>  #> [[78]] #> + 2/34 vertices, from eb7025e: #> [1] 19 33 #>  #> [[79]] #> + 3/34 vertices, from eb7025e: #> [1] 19 33 34 #>  #> [[80]] #> + 2/34 vertices, from eb7025e: #> [1] 19 34 #>  #> [[81]] #> + 1/34 vertex, from eb7025e: #> [1] 17 #>  #> [[82]] #> + 2/34 vertices, from eb7025e: #> [1]  6 17 #>  #> [[83]] #> + 3/34 vertices, from eb7025e: #> [1]  6  7 17 #>  #> [[84]] #> + 2/34 vertices, from eb7025e: #> [1]  7 17 #>  #> [[85]] #> + 1/34 vertex, from eb7025e: #> [1] 16 #>  #> [[86]] #> + 2/34 vertices, from eb7025e: #> [1] 16 33 #>  #> [[87]] #> + 3/34 vertices, from eb7025e: #> [1] 16 33 34 #>  #> [[88]] #> + 2/34 vertices, from eb7025e: #> [1] 16 34 #>  #> [[89]] #> + 1/34 vertex, from eb7025e: #> [1] 15 #>  #> [[90]] #> + 2/34 vertices, from eb7025e: #> [1] 15 33 #>  #> [[91]] #> + 3/34 vertices, from eb7025e: #> [1] 15 33 34 #>  #> [[92]] #> + 2/34 vertices, from eb7025e: #> [1] 15 34 #>  #> [[93]] #> + 1/34 vertex, from eb7025e: #> [1] 14 #>  #> [[94]] #> + 2/34 vertices, from eb7025e: #> [1] 14 34 #>  #> [[95]] #> + 1/34 vertex, from eb7025e: #> [1] 4 #>  #> [[96]] #> + 2/34 vertices, from eb7025e: #> [1]  4 14 #>  #> [[97]] #> + 2/34 vertices, from eb7025e: #> [1]  4 13 #>  #> [[98]] #> + 2/34 vertices, from eb7025e: #> [1] 4 8 #>  #> [[99]] #> + 1/34 vertex, from eb7025e: #> [1] 3 #>  #> [[100]] #> + 2/34 vertices, from eb7025e: #> [1] 3 4 #>  #> [[101]] #> + 3/34 vertices, from eb7025e: #> [1]  3  4 14 #>  #> [[102]] #> + 3/34 vertices, from eb7025e: #> [1] 3 4 8 #>  #> [[103]] #> + 2/34 vertices, from eb7025e: #> [1]  3 14 #>  #> [[104]] #> + 2/34 vertices, from eb7025e: #> [1]  3 10 #>  #> [[105]] #> + 2/34 vertices, from eb7025e: #> [1]  3 29 #>  #> [[106]] #> + 2/34 vertices, from eb7025e: #> [1]  3 28 #>  #> [[107]] #> + 2/34 vertices, from eb7025e: #> [1] 3 9 #>  #> [[108]] #> + 3/34 vertices, from eb7025e: #> [1]  3  9 33 #>  #> [[109]] #> + 2/34 vertices, from eb7025e: #> [1] 3 8 #>  #> [[110]] #> + 2/34 vertices, from eb7025e: #> [1]  3 33 #>  #> [[111]] #> + 1/34 vertex, from eb7025e: #> [1] 2 #>  #> [[112]] #> + 2/34 vertices, from eb7025e: #> [1] 2 3 #>  #> [[113]] #> + 3/34 vertices, from eb7025e: #> [1] 2 3 4 #>  #> [[114]] #> + 4/34 vertices, from eb7025e: #> [1]  2  3  4 14 #>  #> [[115]] #> + 4/34 vertices, from eb7025e: #> [1] 2 3 4 8 #>  #> [[116]] #> + 3/34 vertices, from eb7025e: #> [1]  2  3 14 #>  #> [[117]] #> + 3/34 vertices, from eb7025e: #> [1] 2 3 8 #>  #> [[118]] #> + 2/34 vertices, from eb7025e: #> [1] 2 4 #>  #> [[119]] #> + 3/34 vertices, from eb7025e: #> [1]  2  4 14 #>  #> [[120]] #> + 3/34 vertices, from eb7025e: #> [1] 2 4 8 #>  #> [[121]] #> + 2/34 vertices, from eb7025e: #> [1]  2 14 #>  #> [[122]] #> + 2/34 vertices, from eb7025e: #> [1]  2 31 #>  #> [[123]] #> + 2/34 vertices, from eb7025e: #> [1]  2 18 #>  #> [[124]] #> + 2/34 vertices, from eb7025e: #> [1]  2 20 #>  #> [[125]] #> + 2/34 vertices, from eb7025e: #> [1]  2 22 #>  #> [[126]] #> + 2/34 vertices, from eb7025e: #> [1] 2 8 #>  #> [[127]] #> + 1/34 vertex, from eb7025e: #> [1] 1 #>  #> [[128]] #> + 2/34 vertices, from eb7025e: #> [1] 1 2 #>  #> [[129]] #> + 3/34 vertices, from eb7025e: #> [1] 1 2 3 #>  #> [[130]] #> + 4/34 vertices, from eb7025e: #> [1] 1 2 3 4 #>  #> [[131]] #> + 5/34 vertices, from eb7025e: #> [1]  1  2  3  4 14 #>  #> [[132]] #> + 5/34 vertices, from eb7025e: #> [1] 1 2 3 4 8 #>  #> [[133]] #> + 4/34 vertices, from eb7025e: #> [1]  1  2  3 14 #>  #> [[134]] #> + 4/34 vertices, from eb7025e: #> [1] 1 2 3 8 #>  #> [[135]] #> + 3/34 vertices, from eb7025e: #> [1] 1 2 4 #>  #> [[136]] #> + 4/34 vertices, from eb7025e: #> [1]  1  2  4 14 #>  #> [[137]] #> + 4/34 vertices, from eb7025e: #> [1] 1 2 4 8 #>  #> [[138]] #> + 3/34 vertices, from eb7025e: #> [1]  1  2 14 #>  #> [[139]] #> + 3/34 vertices, from eb7025e: #> [1]  1  2 18 #>  #> [[140]] #> + 3/34 vertices, from eb7025e: #> [1]  1  2 20 #>  #> [[141]] #> + 3/34 vertices, from eb7025e: #> [1]  1  2 22 #>  #> [[142]] #> + 3/34 vertices, from eb7025e: #> [1] 1 2 8 #>  #> [[143]] #> + 2/34 vertices, from eb7025e: #> [1] 1 3 #>  #> [[144]] #> + 3/34 vertices, from eb7025e: #> [1] 1 3 4 #>  #> [[145]] #> + 4/34 vertices, from eb7025e: #> [1]  1  3  4 14 #>  #> [[146]] #> + 4/34 vertices, from eb7025e: #> [1] 1 3 4 8 #>  #> [[147]] #> + 3/34 vertices, from eb7025e: #> [1]  1  3 14 #>  #> [[148]] #> + 3/34 vertices, from eb7025e: #> [1] 1 3 9 #>  #> [[149]] #> + 3/34 vertices, from eb7025e: #> [1] 1 3 8 #>  #> [[150]] #> + 2/34 vertices, from eb7025e: #> [1] 1 4 #>  #> [[151]] #> + 3/34 vertices, from eb7025e: #> [1]  1  4 14 #>  #> [[152]] #> + 3/34 vertices, from eb7025e: #> [1]  1  4 13 #>  #> [[153]] #> + 3/34 vertices, from eb7025e: #> [1] 1 4 8 #>  #> [[154]] #> + 2/34 vertices, from eb7025e: #> [1]  1 14 #>  #> [[155]] #> + 2/34 vertices, from eb7025e: #> [1] 1 5 #>  #> [[156]] #> + 3/34 vertices, from eb7025e: #> [1]  1  5 11 #>  #> [[157]] #> + 3/34 vertices, from eb7025e: #> [1] 1 5 7 #>  #> [[158]] #> + 2/34 vertices, from eb7025e: #> [1]  1 12 #>  #> [[159]] #> + 2/34 vertices, from eb7025e: #> [1] 1 6 #>  #> [[160]] #> + 3/34 vertices, from eb7025e: #> [1]  1  6 11 #>  #> [[161]] #> + 3/34 vertices, from eb7025e: #> [1] 1 6 7 #>  #> [[162]] #> + 2/34 vertices, from eb7025e: #> [1]  1 11 #>  #> [[163]] #> + 2/34 vertices, from eb7025e: #> [1] 1 7 #>  #> [[164]] #> + 2/34 vertices, from eb7025e: #> [1]  1 13 #>  #> [[165]] #> + 2/34 vertices, from eb7025e: #> [1]  1 18 #>  #> [[166]] #> + 2/34 vertices, from eb7025e: #> [1]  1 20 #>  #> [[167]] #> + 2/34 vertices, from eb7025e: #> [1]  1 22 #>  #> [[168]] #> + 2/34 vertices, from eb7025e: #> [1]  1 32 #>  #> [[169]] #> + 2/34 vertices, from eb7025e: #> [1] 1 9 #>  #> [[170]] #> + 2/34 vertices, from eb7025e: #> [1] 1 8 #>  weighted_cliques(g, maximal = TRUE) #> [[1]] #> + 3/34 vertices, from eb7025e: #> [1] 32 33 34 #>  #> [[2]] #> + 2/34 vertices, from eb7025e: #> [1] 20 34 #>  #> [[3]] #> + 4/34 vertices, from eb7025e: #> [1]  9 31 33 34 #>  #> [[4]] #> + 3/34 vertices, from eb7025e: #> [1] 29 32 34 #>  #> [[5]] #> + 2/34 vertices, from eb7025e: #> [1] 10 34 #>  #> [[6]] #> + 3/34 vertices, from eb7025e: #> [1] 27 30 34 #>  #> [[7]] #> + 3/34 vertices, from eb7025e: #> [1] 25 26 32 #>  #> [[8]] #> + 2/34 vertices, from eb7025e: #> [1] 25 28 #>  #> [[9]] #> + 2/34 vertices, from eb7025e: #> [1] 24 26 #>  #> [[10]] #> + 4/34 vertices, from eb7025e: #> [1] 24 30 33 34 #>  #> [[11]] #> + 3/34 vertices, from eb7025e: #> [1] 24 28 34 #>  #> [[12]] #> + 3/34 vertices, from eb7025e: #> [1] 23 33 34 #>  #> [[13]] #> + 3/34 vertices, from eb7025e: #> [1] 21 33 34 #>  #> [[14]] #> + 3/34 vertices, from eb7025e: #> [1] 19 33 34 #>  #> [[15]] #> + 3/34 vertices, from eb7025e: #> [1]  6  7 17 #>  #> [[16]] #> + 3/34 vertices, from eb7025e: #> [1] 16 33 34 #>  #> [[17]] #> + 3/34 vertices, from eb7025e: #> [1] 15 33 34 #>  #> [[18]] #> + 2/34 vertices, from eb7025e: #> [1] 14 34 #>  #> [[19]] #> + 2/34 vertices, from eb7025e: #> [1]  3 10 #>  #> [[20]] #> + 2/34 vertices, from eb7025e: #> [1]  3 29 #>  #> [[21]] #> + 2/34 vertices, from eb7025e: #> [1]  3 28 #>  #> [[22]] #> + 3/34 vertices, from eb7025e: #> [1]  3  9 33 #>  #> [[23]] #> + 2/34 vertices, from eb7025e: #> [1]  2 31 #>  #> [[24]] #> + 5/34 vertices, from eb7025e: #> [1]  1  2  3  4 14 #>  #> [[25]] #> + 5/34 vertices, from eb7025e: #> [1] 1 2 3 4 8 #>  #> [[26]] #> + 3/34 vertices, from eb7025e: #> [1]  1  2 18 #>  #> [[27]] #> + 3/34 vertices, from eb7025e: #> [1]  1  2 20 #>  #> [[28]] #> + 3/34 vertices, from eb7025e: #> [1]  1  2 22 #>  #> [[29]] #> + 3/34 vertices, from eb7025e: #> [1] 1 3 9 #>  #> [[30]] #> + 3/34 vertices, from eb7025e: #> [1]  1  4 13 #>  #> [[31]] #> + 3/34 vertices, from eb7025e: #> [1]  1  5 11 #>  #> [[32]] #> + 3/34 vertices, from eb7025e: #> [1] 1 5 7 #>  #> [[33]] #> + 2/34 vertices, from eb7025e: #> [1]  1 12 #>  #> [[34]] #> + 3/34 vertices, from eb7025e: #> [1]  1  6 11 #>  #> [[35]] #> + 3/34 vertices, from eb7025e: #> [1] 1 6 7 #>  #> [[36]] #> + 2/34 vertices, from eb7025e: #> [1]  1 32 #>  largest_weighted_cliques(g) #> [[1]] #> + 5/34 vertices, from eb7025e: #> [1]  1  2  3  4 14 #>  weighted_clique_num(g) #> [1] 15"},{"path":"/reference/which_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the multiple or loop edges in a graph — which_multiple","title":"Find the multiple or loop edges in a graph — which_multiple","text":"loop edge edge vertex . edge multiple edge exactly head tail vertices another edge. graph without multiple loop edges called simple graph.","code":""},{"path":"/reference/which_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the multiple or loop edges in a graph — which_multiple","text":"","code":"which_multiple(graph, eids = E(graph))"},{"path":"/reference/which_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the multiple or loop edges in a graph — which_multiple","text":"graph input graph. eids edges query restricted. default edges graph.","code":""},{"path":"/reference/which_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the multiple or loop edges in a graph — which_multiple","text":"any_loop() any_multiple() return logical scalar. which_loop() which_multiple() return logical vector. count_multiple() returns numeric vector.","code":""},{"path":"/reference/which_multiple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the multiple or loop edges in a graph — which_multiple","text":"any_loop() decides whether graph loop edges. which_loop() decides whether edges graph loop edges. any_multiple() decides whether graph multiple edges. which_multiple() decides whether edges graph multiple edges. count_multiple() counts multiplicity edge graph. Note semantics which_multiple() count_multiple() different. which_multiple() gives TRUE occurrences multiple edge except one. Ie. three -j edges graph which_multiple() returns TRUE two count_multiple() returns ‘3’ three. See examples getting rid multiple edges keeping original multiplicity edge attribute.","code":""},{"path":[]},{"path":"/reference/which_multiple.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find the multiple or loop edges in a graph — which_multiple","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/which_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the multiple or loop edges in a graph — which_multiple","text":"","code":"# Loops g <- graph(c(1, 1, 2, 2, 3, 3, 4, 5)) any_loop(g) #> [1] TRUE which_loop(g) #> [1]  TRUE  TRUE  TRUE FALSE  # Multiple edges g <- barabasi.game(10, m = 3, algorithm = \"bag\") any_multiple(g) #> [1] TRUE which_multiple(g) #>  [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE #> [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [25] FALSE FALSE  TRUE count_multiple(g) #>  [1] 3 3 3 1 2 2 2 1 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 which_multiple(simplify(g)) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE all(count_multiple(simplify(g)) == 1) #> [1] TRUE  # Direction of the edge is important which_multiple(graph(c(1, 2, 2, 1))) #> [1] FALSE FALSE which_multiple(graph(c(1, 2, 2, 1), dir = FALSE)) #> [1] FALSE  TRUE  # Remove multiple edges but keep multiplicity g <- barabasi.game(10, m = 3, algorithm = \"bag\") E(g)$weight <- count_multiple(g) g <- simplify(g, edge.attr.comb = list(weight = \"min\")) any(which_multiple(g)) #> [1] FALSE E(g)$weight #>  [1] 3 3 2 1 3 3 2 1 1 1 1 1 2 1 1 1"},{"path":"/reference/which_mutual.html","id":null,"dir":"Reference","previous_headings":"","what":"Find mutual edges in a directed graph — which_mutual","title":"Find mutual edges in a directed graph — which_mutual","text":"function checks reciprocal pair supplied edges.","code":""},{"path":"/reference/which_mutual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find mutual edges in a directed graph — which_mutual","text":"","code":"which_mutual(graph, eids = E(graph))"},{"path":"/reference/which_mutual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find mutual edges in a directed graph — which_mutual","text":"graph input graph. eids Edge sequence, edges probed. default includes edges order ids.","code":""},{"path":"/reference/which_mutual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find mutual edges in a directed graph — which_mutual","text":"logical vector length number edges supplied.","code":""},{"path":"/reference/which_mutual.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find mutual edges in a directed graph — which_mutual","text":"directed graph (,B) edge mutual graph also includes (B,) directed edge. Note multi-graphs handled properly, .e. graph contains two copies (,B) one copy (B,), three edges considered mutual. Undirected graphs contain mutual edges definition.","code":""},{"path":[]},{"path":"/reference/which_mutual.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find mutual edges in a directed graph — which_mutual","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/which_mutual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find mutual edges in a directed graph — which_mutual","text":"","code":"g <- sample_gnm(10, 50, directed = TRUE) reciprocity(g) #> [1] 0.64 dyad_census(g) #> $mut #> [1] 16 #>  #> $asym #> [1] 18 #>  #> $null #> [1] 11 #>  which_mutual(g) #>  [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE #> [13]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE #> [25] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [37] FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE #> [49] FALSE  TRUE sum(which_mutual(g)) / 2 == dyad_census(g)$mut #> [1] TRUE"},{"path":"/reference/with_edge_.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor modifier to add edge attributes — with_edge_","title":"Constructor modifier to add edge attributes — with_edge_","text":"Constructor modifier add edge attributes","code":""},{"path":"/reference/with_edge_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor modifier to add edge attributes — with_edge_","text":"","code":"with_edge_(...)"},{"path":"/reference/with_edge_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor modifier to add edge attributes — with_edge_","text":"... attributes add. must named.","code":""},{"path":[]},{"path":"/reference/with_edge_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor modifier to add edge attributes — with_edge_","text":"","code":"make_(   ring(10),   with_edge_(     color = \"red\",     weight = rep(1:2, 5)   ) ) %>%   plot() #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/with_graph_.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor modifier to add graph attributes — with_graph_","title":"Constructor modifier to add graph attributes — with_graph_","text":"Constructor modifier add graph attributes","code":""},{"path":"/reference/with_graph_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor modifier to add graph attributes — with_graph_","text":"","code":"with_graph_(...)"},{"path":"/reference/with_graph_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor modifier to add graph attributes — with_graph_","text":"... attributes add. must named.","code":""},{"path":[]},{"path":"/reference/with_graph_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor modifier to add graph attributes — with_graph_","text":"","code":"make_(ring(10), with_graph_(name = \"10-ring\")) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"10-ring\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbd953d60> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/with_igraph_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Run code with a temporary igraph options setting — with_igraph_opt","title":"Run code with a temporary igraph options setting — with_igraph_opt","text":"Run code temporary igraph options setting","code":""},{"path":"/reference/with_igraph_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run code with a temporary igraph options setting — with_igraph_opt","text":"","code":"with_igraph_opt(options, code)"},{"path":"/reference/with_igraph_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run code with a temporary igraph options setting — with_igraph_opt","text":"options named list options change. code code run.","code":""},{"path":"/reference/with_igraph_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run code with a temporary igraph options setting — with_igraph_opt","text":"result code.","code":""},{"path":[]},{"path":"/reference/with_igraph_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run code with a temporary igraph options setting — with_igraph_opt","text":"","code":"with_igraph_opt(   list(sparsematrices = FALSE),   make_ring(10)[] ) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    1    0    0    0    0    0    0    0     1 #>  [2,]    1    0    1    0    0    0    0    0    0     0 #>  [3,]    0    1    0    1    0    0    0    0    0     0 #>  [4,]    0    0    1    0    1    0    0    0    0     0 #>  [5,]    0    0    0    1    0    1    0    0    0     0 #>  [6,]    0    0    0    0    1    0    1    0    0     0 #>  [7,]    0    0    0    0    0    1    0    1    0     0 #>  [8,]    0    0    0    0    0    0    1    0    1     0 #>  [9,]    0    0    0    0    0    0    0    1    0     1 #> [10,]    1    0    0    0    0    0    0    0    1     0 igraph_opt(\"sparsematrices\") #> [1] TRUE"},{"path":"/reference/with_vertex_.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor modifier to add vertex attributes — with_vertex_","title":"Constructor modifier to add vertex attributes — with_vertex_","text":"Constructor modifier add vertex attributes","code":""},{"path":"/reference/with_vertex_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor modifier to add vertex attributes — with_vertex_","text":"","code":"with_vertex_(...)"},{"path":"/reference/with_vertex_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor modifier to add vertex attributes — with_vertex_","text":"... attributes add. must named.","code":""},{"path":[]},{"path":"/reference/with_vertex_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor modifier to add vertex attributes — with_vertex_","text":"","code":"make_(   ring(10),   with_vertex_(     color = \"#7fcdbb\",     frame.color = \"#7fcdbb\",     name = LETTERS[1:10]   ) ) %>%   plot() #> Error in xy.coords(x, y, xlabel, ylabel, log): 'x' is a list, but does not have components 'x' and 'y'"},{"path":"/reference/without_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Construtor modifier to remove all attributes from a graph — without_attr","title":"Construtor modifier to remove all attributes from a graph — without_attr","text":"Construtor modifier remove attributes graph","code":""},{"path":"/reference/without_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construtor modifier to remove all attributes from a graph — without_attr","text":"","code":"without_attr()"},{"path":[]},{"path":"/reference/without_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construtor modifier to remove all attributes from a graph — without_attr","text":"","code":"g1 <- make_ring(10) g1 #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Ring graph\" #>  #> [[9]][[2]]$mutual #> [1] FALSE #>  #> [[9]][[2]]$circular #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb9bb1468> #>  #> attr(,\"class\") #> [1] \"igraph\"  g2 <- make_(ring(10), without_attr()) g2 #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 5 6 7 8 9 9 #>  #> [[4]] #>  [1] 0 1 2 3 4 5 6 7 8 0 #>  #> [[5]] #>  [1] 0 1 2 3 4 5 6 7 9 8 #>  #> [[6]] #>  [1] 0 9 1 2 3 4 5 6 7 8 #>  #> [[7]] #>  [1]  0  0  1  2  3  4  5  6  7  8 10 #>  #> [[8]] #>  [1]  0  2  3  4  5  6  7  8  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> named list() #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cb9eaca60> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/without_loops.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor modifier to drop loop edges — without_loops","title":"Constructor modifier to drop loop edges — without_loops","text":"Constructor modifier drop loop edges","code":""},{"path":"/reference/without_loops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor modifier to drop loop edges — without_loops","text":"","code":"without_loops()"},{"path":[]},{"path":"/reference/without_loops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor modifier to drop loop edges — without_loops","text":"","code":"# An artificial example make_(full_graph(5, loops = TRUE)) #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 0 1 2 3 4 1 2 3 4 2 3 4 3 4 4 #>  #> [[4]] #>  [1] 0 0 0 0 0 1 1 1 1 2 2 2 3 3 4 #>  #> [[5]] #>  [1]  0  1  5  2  6  9  3  7 10 12  4  8 11 13 14 #>  #> [[6]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 #>  #> [[7]] #> [1]  0  1  3  6 10 15 #>  #> [[8]] #> [1]  0  5  9 12 14 15 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Full graph\" #>  #> [[9]][[2]]$loops #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cc0548550> #>  #> attr(,\"class\") #> [1] \"igraph\" make_(full_graph(5, loops = TRUE), without_loops()) #> [[1]] #> [1] 5 #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #>  [1] 1 2 3 4 2 3 4 3 4 4 #>  #> [[4]] #>  [1] 0 0 0 0 1 1 1 2 2 3 #>  #> [[5]] #>  [1] 0 1 4 2 5 7 3 6 8 9 #>  #> [[6]] #>  [1] 0 1 2 3 4 5 6 7 8 9 #>  #> [[7]] #> [1]  0  0  1  3  6 10 #>  #> [[8]] #> [1]  0  4  7  9 10 10 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Full graph\" #>  #> [[9]][[2]]$loops #> [1] TRUE #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbf572558> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/without_multiples.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor modifier to drop multiple edges — without_multiples","title":"Constructor modifier to drop multiple edges — without_multiples","text":"Constructor modifier drop multiple edges","code":""},{"path":"/reference/without_multiples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor modifier to drop multiple edges — without_multiples","text":"","code":"without_multiples()"},{"path":[]},{"path":"/reference/without_multiples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor modifier to drop multiple edges — without_multiples","text":"","code":"sample_(pa(10, m = 3, algorithm = \"bag\")) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7 8 8 8 9 9 9 #>  #> [[4]] #>  [1] 0 0 0 1 0 0 0 0 0 1 3 0 2 1 3 0 0 1 6 1 1 1 1 1 0 0 4 #>  #> [[5]] #>  [1]  2  1  0  5  4  3  8  7  6 11  9 10 13 12 14 16 15 17 20 19 18 23 22 21 25 #> [26] 24 26 #>  #> [[6]] #>  [1]  2  1  0  5  4  8  7  6 11 16 15 25 24  3  9 13 17 20 19 23 22 21 12 10 14 #> [26] 26 18 #>  #> [[7]] #>  [1]  0  0  3  6  9 12 15 18 21 24 27 #>  #> [[8]] #>  [1]  0 13 22 23 25 26 26 27 27 27 27 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Barabasi graph\" #>  #> [[9]][[2]]$power #> [1] 1 #>  #> [[9]][[2]]$m #> [1] 3 #>  #> [[9]][[2]]$zero.appeal #> [1] 1 #>  #> [[9]][[2]]$algorithm #> [1] \"bag\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> list() #>  #>  #> [[10]] #> <environment: 0x564cbae8f790> #>  #> attr(,\"class\") #> [1] \"igraph\" sample_(pa(10, m = 3, algorithm = \"bag\"), without_multiples()) #> [[1]] #> [1] 10 #>  #> [[2]] #> [1] TRUE #>  #> [[3]] #>  [1] 1 2 2 3 3 4 4 5 5 6 6 6 7 8 8 9 #>  #> [[4]] #>  [1] 0 0 1 0 1 0 3 0 1 0 1 4 0 0 7 0 #>  #> [[5]] #>  [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 #>  #> [[6]] #>  [1]  0  1  3  5  7  9 12 13 15  2  4  8 10  6 11 14 #>  #> [[7]] #>  [1]  0  0  1  3  5  7  9 12 13 15 16 #>  #> [[8]] #>  [1]  0  9 13 13 14 15 15 15 16 16 16 #>  #> [[9]] #> [[9]][[1]] #> [1] 1 0 1 #>  #> [[9]][[2]] #> [[9]][[2]]$name #> [1] \"Barabasi graph\" #>  #> [[9]][[2]]$power #> [1] 1 #>  #> [[9]][[2]]$m #> [1] 3 #>  #> [[9]][[2]]$zero.appeal #> [1] 1 #>  #> [[9]][[2]]$algorithm #> [1] \"bag\" #>  #>  #> [[9]][[3]] #> list() #>  #> [[9]][[4]] #> named list() #>  #>  #> [[10]] #> <environment: 0x564cbad9a690> #>  #> attr(,\"class\") #> [1] \"igraph\""},{"path":"/reference/write_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Writing the graph to a file in some format — write_graph","title":"Writing the graph to a file in some format — write_graph","text":"write_graph() general function exporting graphs foreign file formats, however many formats implemented right now.","code":""},{"path":"/reference/write_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writing the graph to a file in some format — write_graph","text":"","code":"write_graph(   graph,   file,   format = c(\"edgelist\", \"pajek\", \"ncol\", \"lgl\", \"graphml\", \"dimacs\", \"gml\", \"dot\",     \"leda\"),   ... )"},{"path":"/reference/write_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writing the graph to a file in some format — write_graph","text":"graph graph export. file connection string giving file name write graph . format Character string giving file format. Right now pajek, graphml, dot, gml, edgelist, lgl, ncol dimacs implemented. igraph 0.4 argument case insensitive. ... , format specific arguments, see .","code":""},{"path":"/reference/write_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writing the graph to a file in some format — write_graph","text":"NULL, invisibly.","code":""},{"path":"/reference/write_graph.html","id":"edge-list-format","dir":"Reference","previous_headings":"","what":"Edge list format","title":"Writing the graph to a file in some format — write_graph","text":"edgelist format simple text file, one edge line, two vertex ids separated space character. file sorted first second column. format additional arguments.","code":""},{"path":"/reference/write_graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Writing the graph to a file in some format — write_graph","text":"Adai , Date SV, Wieland S, Marcotte EM. LGL: creating map protein function algorithm visualizing large biological networks. J Mol Biol. 2004 Jun 25;340(1):179-90.","code":""},{"path":[]},{"path":"/reference/write_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Writing the graph to a file in some format — write_graph","text":"Gabor Csardi csardi.gabor@gmail.com","code":""},{"path":"/reference/write_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writing the graph to a file in some format — write_graph","text":"","code":"g <- make_ring(10) file <- tempfile(fileext = \".txt\") write_graph(g, file, \"edgelist\") if (!interactive()) {   unlink(file) }"},{"path":"/news/index.html","id":"igraph-1359098","dir":"Changelog","previous_headings":"","what":"igraph 1.3.5.9098","title":"igraph 1.3.5.9098","text":"Added igraph extended tutorial R vignette (@ntamas, #587). Update igraph_extended_tutorial_R_vignette_english.Rmd (@ntamas, #587). Bump version 1.3.5.9095 (@ntamas, #587). bunch fixes review rename (@ntamas, #587). Adapt one line suggested @szhorvat (@ntamas, #587). R vignette compiles html PDF using rmarkdown (@ntamas, #587). Remove methods since R much OO (@ntamas, #587). Bump version 1.3.5.9096 (@ntamas, #587). Corrections throughout (@ntamas, #587). Bump version 1.3.5.9097 (@ntamas, #587). Fix: fix deprecation warnings ‘’ ‘’ edge selectors (@ntamas, #587). Read/write files corrected (@ntamas, #587). Remove Spanish version, separate PR (@ntamas, #587). NEWS.md went spin, bring back (@ntamas, #587). Minor tweaks, adjusted figure sizes, work progress (@ntamas, #587). Title, notes, first paragraph (@ntamas, #587). Starting igraph (@ntamas, #587). corrections (@ntamas, #587). Clean bunch Python-isms second half (@ntamas, #587). Session info, headers notch, wording (@ntamas, #587). Bump version 1.3.5.9098 (@ntamas, #587). Doc: updates vignette (@ntamas, #587). Bump version 1.3.5.9099 (@ntamas, #587). Doc: vignette cleanup finished (@ntamas, #587). Revert changes DESCRIPTION (@ntamas, #587). Revert changes NEWS.md (@ntamas, #587).","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-1-3-5-9097","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"igraph 1.3.5.9097","text":"Handle default NULL value frame.plot properly. use ‘frame’ partial argument calling plot.default().","code":""},{"path":"/news/index.html","id":"chore-1-3-5-9097","dir":"Changelog","previous_headings":"","what":"Chore","title":"igraph 1.3.5.9097","text":"Track revdepcheck results (#621). Move single branch setup (#620).","code":""},{"path":"/news/index.html","id":"documentation-1-3-5-9097","dir":"Changelog","previous_headings":"","what":"Documentation","title":"igraph 1.3.5.9097","text":"Wrap README badges detection pkgdown (#637).","code":""},{"path":"/news/index.html","id":"uncategorized-1-3-5-9097","dir":"Changelog","previous_headings":"","what":"Uncategorized","title":"igraph 1.3.5.9097","text":"Ignore. Update instructions. Ignore. Automated changes. Run autoconf 22.04. Automated changes.","code":""},{"path":"/news/index.html","id":"igraph-1359096","dir":"Changelog","previous_headings":"","what":"igraph 1.3.5.9096","title":"igraph 1.3.5.9096","text":"Merge pull request #634 igraph/b-test-order. Fix test order Merge pull request #632 igraph/b-brittle-eigen-test. Fix brittle test","code":""},{"path":[]},{"path":"/news/index.html","id":"chore-1-3-5-9095","dir":"Changelog","previous_headings":"","what":"Chore","title":"igraph 1.3.5.9095","text":"Stabilize vs-es tests (#631).","code":""},{"path":[]},{"path":"/news/index.html","id":"documentation-1-3-5-9094","dir":"Changelog","previous_headings":"","what":"Documentation","title":"igraph 1.3.5.9094","text":"Clarify documentation alpha_centrality. Update Erdős-Rényi sampler docs, change incorrect G(n,p) G(n,m) sample_bipartite().","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-1-3-5-9093","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"igraph 1.3.5.9093","text":"NULL means empty vertex edge list functions (#625). NULL remains alias empty vertex edge list Reverts d05ac3140bde37d53365da464e23b22fe89e1b90. Special case Revert #608 Style doc: fix docs","code":""},{"path":"/news/index.html","id":"documentation-1-3-5-9093","dir":"Changelog","previous_headings":"","what":"Documentation","title":"igraph 1.3.5.9093","text":"Use Markdown documentation (#624). Enable Markdown, mostly whitespace changes Indent Parentheses .dendrogram() print() plot() summary() Pipe simple full","code":""},{"path":"/news/index.html","id":"uncategorized-1-3-5-9093","dir":"Changelog","previous_headings":"","what":"Uncategorized","title":"igraph 1.3.5.9093","text":"Fix: distances() algorithm=‘johnson’ now handles mode parameter values correctly. Docs: better explain use cases Johnson’s shortest path length algorithm.","code":""},{"path":"/news/index.html","id":"igraph-1359092","dir":"Changelog","previous_headings":"","what":"igraph 1.3.5.9092","title":"igraph 1.3.5.9092","text":"Merge pull request #619 dmurdoch/rgl. Use 3d functions rather rgl. functions","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-1-3-5-9091","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"igraph 1.3.5.9091","text":"Fix builds make variants (#617).","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-1-3-5-9090","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"igraph 1.3.5.9090","text":"Fix syntax error new unit test. Fixed indexing result vertices convex_hull(), closes #613.","code":""},{"path":"/news/index.html","id":"chore-1-3-5-9090","dir":"Changelog","previous_headings":"","what":"Chore","title":"igraph 1.3.5.9090","text":"Add fledge workflow. Prepare using fledge managing NEWS.md (#615). Style remaining files (#614). Clarify changelog item [skip ci].","code":""},{"path":"/news/index.html","id":"doc-1-3-5-9090","dir":"Changelog","previous_headings":"","what":"doc","title":"igraph 1.3.5.9090","text":"Switch https URL CRAN check complaining .","code":""},{"path":[]},{"path":"/news/index.html","id":"added-1-3-5-9089","dir":"Changelog","previous_headings":"","what":"Added","title":"igraph 1.3.5.9089","text":"tkplot() gained palette argument now using palette plot() default, sake consistency. plot.igraph() gained loop.size argument can used scale common radius loop edges.","code":""},{"path":"/news/index.html","id":"fixed-1-3-5-9089","dir":"Changelog","previous_headings":"","what":"Fixed","title":"igraph 1.3.5.9089","text":"default maximum number iterations ARPACK increased 3000 match igraph C core. Rare convergence problems corrected cluster_leading_eigen(). ARPACK-based functions now respect random seeds set R generating random starting vector. distances(algorithm='johnson') now throws error mode != '' directed graphs, mode currently supported. igraph_version() returned invalid value 1.3.4, now corrected. value par(xpd=...) now restored plotting graph. Fixed bug .dendrogram.communities() large dendrograms, thanks @pkharchenko (see PR #292). Fixed two bugs graph_from_incidence_matrix() prevented creation directed graphs mode=\"\" dense sparse matrices. dfs() accidentally returned zero-based root vertex indices result object; now fixed indices now 1-based. as_graphnel() duplicate loop edges . convex_hull() now returns vertices convex hull 1-based indexing.","code":""},{"path":"/news/index.html","id":"deprecated-1-3-5-9089","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"igraph 1.3.5.9089","text":"automorphisms() renamed count_automorphisms(); old name still available, deprecated.","code":""},{"path":"/news/index.html","id":"other-1-3-5-9089","dir":"Changelog","previous_headings":"","what":"Other","title":"igraph 1.3.5.9089","text":"Documentation improvements.","code":""},{"path":"/news/index.html","id":"igraph-135","dir":"Changelog","previous_headings":"","what":"igraph 1.3.5","title":"igraph 1.3.5","text":"CRAN release: 2022-09-22 Added: mark.groups=... argument plot.igraph() now accepts communities objects Fixed: Negative degree exponents allowed sample_pa() sample_aging_pa(). Package updated compatible Matrix 1.5. : Documentation improvements fixes.","code":""},{"path":"/news/index.html","id":"igraph-134","dir":"Changelog","previous_headings":"","what":"igraph 1.3.4","title":"igraph 1.3.4","text":"CRAN release: 2022-07-19 Added: sample_asym_pref() now returns generated types vertices vertex attributes named outtype intype. Fixed: layout_nicely() recurse infinitely assigned layout attribute graph layout_nicely() now ignores edge weights non-positive edge weights. needed igraph 1.3.3 started validating edge weights layout_with_fr() layout_with_drl(), resulting errors layout_nicely() used weighted graphs negative weights. Since layout_nicely() default layout algorithm plot(), users even aware using FR DrL layouts behind scenes. Now policy layout_nicely() attempts get job done without errors possible, even means edge weights must ignored. warning printed case.","code":""},{"path":"/news/index.html","id":"igraph-133","dir":"Changelog","previous_headings":"","what":"igraph 1.3.3","title":"igraph 1.3.3","text":"CRAN release: 2022-07-14 Added: reverse_edges() reverses specific edges graph. Single-bracket indexing V() E() resolves attribute names indexing expressions default (instance, E(g)[weight > x] matches edges weight larger threshold). can problematic attribute masks one variables local evaluation context. now pronoun called .env (similarly rlang::.env) allows force attribute name lookup calling environment. sake completeness, also provide .data (similarly rlang::.data) force attribute name lookup vertex / edge attributes . pronouns automatically injected environment indexing expression evaluated. Deprecated: Names functions can used inside V() E() indexing start dot since igraph 1.1.1; however, old dotless names print deprecation warning may gone unnoticed years. introducting deprecation warning nei(), innei(), outnei(), inc(), () () inside single-bracket indexing vertex edge sequences remove old variants soon.","code":""},{"path":"/news/index.html","id":"igraph-132","dir":"Changelog","previous_headings":"","what":"igraph 1.3.2","title":"igraph 1.3.2","text":"CRAN release: 2022-06-13 C core updated 0.9.9, fixing range bugs. Fixed: length size-zero communities objects now reported correctly. layout_with_kk() fail produce reasonable results default initial coordinates. corrected, however, function longer produces precisely output given graph . restore previous behaviour, use layout_with_kk(g, coord=layout_in_circle(g)) 2D layout_with_kk(g, dim=3, coord=layout_on_sphere(g)) 3D. Indexing igraph.vs object v[x, na_ok=T] now correctly handles na_ok argument cases; previous versions ignored x single number. : Documentation improvements fixes.","code":""},{"path":"/news/index.html","id":"igraph-131","dir":"Changelog","previous_headings":"","what":"igraph 1.3.1","title":"igraph 1.3.1","text":"CRAN release: 2022-04-20 Fixed: graph_from_adjacency_matrix() now works sparse matrices even cell values sparse matrix unspecified. Fixed crash cluster_walktrap() modularity=FALSE membership=FALSE. cluster_walktrap() longer accepts invalid weight vectors. cluster_walktrap() longer returns modularity vector invalid length disconnected graphs. also fixes rare failures function weighted disconnected graphs. edge_attr() ignore index=... argument . automorphisms(), automorphism_group() canonical_permutation() now allow possible values supported C core sh argument. Earlier versions supported \"fm\". vertex.frame.width plotting parameter now allows zero negative values; simply remove outline corresponding vertex. documentation sh argument BLISS isomorphism algorithm isomorphic() fixed; earlier versions incorrectly referred sh1 sh2. dominator_tree() now conforms documentation respect dom component result: contains indices dominator vertices vertex -1 root dominator tree. Mentions \"power\" algorithm page_rank() removed documentation, method longer available. Several documentation fixes bring docs date new behaviours igraph 1.3.","code":""},{"path":"/news/index.html","id":"igraph-130","dir":"Changelog","previous_headings":"","what":"igraph 1.3.0","title":"igraph 1.3.0","text":"CRAN release: 2022-04-01 C core updated 0.9.7, fixing range bugs introducing number new functions. Added: has_eulerian_path() has_eulerian_cycle() decides whether Eulerian path cycle graph. eulerian_path() eulerian_cycle() returns edges vertices Eulerian path cycle graph. any_loop() checks whether graph contains least one loop edge. is_tree() checks whether graph tree also finds possible root to_prufer() converts tree graph Prufer sequence make_from_prufer() creates tree graph Prufer sequence sample_tree() sample labelled trees uniformly random sample_spanning_tree() sample spanning trees undirected graph uniformly random automorphisms() canonical_permutation() now supports vertex colors random_edge_walk() record edges traversed random walk harmonic_centrality() calculates harmonic centrality vertices, optionally cutoff path lengths mean_distance() now supports edge weights can also return number unconnected vertex pairs details=TRUE passed argument greedy_vertex_coloring() finds vertex colorings based simple greedy algorithm. bridges() finds bridges (cut-edges) graph frame width circle, rectangle square vertex shapes can now adjusted plots frame.width vertex attribute vertex.frame.width keyword argument, thanks @simoncarrignon . See PR #500 details. automorphism_group() returns possible (necessarily minimal) generating set automorphism group graph. global_efficiency() calculates global efficiency graph. local_efficiency() calculates local efficiency vertex graph. average_local_efficiency() calculates average local efficiency across set vertices graph. rewire(each_edge(...)) now supports rewiring one endpoint edge. realize_degseq() generates graphs degree sequences deterministic manner. also available make_(degseq(..., deterministic=TRUE)). clique_size_counts() counts cliques different sizes without storing . feedback_arc_set() finds minimum-weight feedback arc set graph, either exact integer programming algorithm linear-time approximation. make_bipartite_graph() now handles vertices names. shortest_paths() now supports graphs negative edge weights. min_cut() now supports s-t mincuts even value.=FALSE. .matrix() now supports converting igraph graph adjacency edge list matrix representation. See .matrix.igraph() details. function migrated intergraph; thanks Michal Bojanowski. Fixed: is_connected() now returns FALSE null graph Calling length() graph now returns number vertices make consistent indexing graph [[. diameter() now corrently returns infinity disconnected graphs unconnected=FALSE. Previous versions returned number vertices plus one, clearly invalid weighted graphs. mean_distance() now correctly treats path length disconnected vertices infinite unconnected=FALSE. Previous versions used number vertices plus one, adding bias towards number, even graph weighted number vertices plus one path length safely considered longer “valid” path. layout_with_sugiyama() now handles case exactly one extra virtual node correctly; fixes #85 bfs() dfs() callback functions now correctly receive 1-based vertex indices ranks; used zero-based earlier versions Accidentally returning non-logical value bfs() dfs() callback crash R Calling print() graph small max.lines value (smaller number lines needed print attribute list header) raise error ; fixes #179 as_adjacency_matrix(edges=TRUE, sparse=TRUE) now consistently returns last edge ID cell matrix instead summing . Using + - operators path() object consisting two vertices now handled correctly; fixes #355 topo_sort() now throws error input graph acyclic instead returning incorrect partial ordering. Weighted transitivity calculations (.e. transitivity(mode=\"barrat\") now throw error multigraphs; implementation work correctly multigraphs earlier versions warn . Changed: neimode argument bfs() dfs() renamed mode sake consistency functions. old argument name deprecated removed 1.4.0. bfs() dfs() callback functions now correctly receive 1-based vertex indices ranks; used zero-based earlier versions. (actually bugfix ’s also mentioned “Fixed” section). closeness(), betweenness() edge_betweenness() now take cutoff argument . estimate_closeness(), estimate_betweenness() estimate_edge_betweenness() became aliases, identical signature. deprecated implementation might change future versions provide proper estimation schemes instead simple cutoff-based approximation. explicitly need cutoffs want results reproducible future versions, use closeness(), betweenness() edge_betweenness() code cutoff argument. closeness() now considers reachable vertices calculation; words, closeness centrality now calculated per-component basis disconnected graphs. Earlier versions considered vertices. Deprecated: Using cutoff=0 closeness(), betweenness() edge_betweenness() deprecated; want exact scores, use negative cutoff. cutoff=0 interpreted literally igraph 1.4.0. centr_degree_tmax() now prints warning invoked without explicit loops argument. loops mandatory igraph 1.4.0. nexus_list(), nexus_info(), nexus_get() nexus_search() functions now return error informing user Nexus graph repository taken offline (actually, several years ago). functions removed 1.4.0. edges argument as_adjacency_matrix() deprecated; removed igraph 1.4.0. Removed: deprecated page_rank_old() function deprecated power method page_rank() removed.","code":""},{"path":"/news/index.html","id":"igraph-1211","dir":"Changelog","previous_headings":"","what":"igraph 1.2.11","title":"igraph 1.2.11","text":"CRAN release: 2022-01-04 Dec 27, 2021 user visible changes.","code":""},{"path":"/news/index.html","id":"igraph-1210","dir":"Changelog","previous_headings":"","what":"igraph 1.2.10","title":"igraph 1.2.10","text":"CRAN release: 2021-12-15 Dec 14, 2021 Fixed: macOS versions igraph accidentally built without GraphML support CRAN; now fixed.","code":""},{"path":"/news/index.html","id":"igraph-129","dir":"Changelog","previous_headings":"","what":"igraph 1.2.9","title":"igraph 1.2.9","text":"CRAN release: 2021-11-23 Nov 22, 2021 user visible changes.","code":""},{"path":"/news/index.html","id":"igraph-128","dir":"Changelog","previous_headings":"","what":"igraph 1.2.8","title":"igraph 1.2.8","text":"CRAN release: 2021-11-07 Oct 26, 2021 user visible changes.","code":""},{"path":"/news/index.html","id":"igraph-127","dir":"Changelog","previous_headings":"","what":"igraph 1.2.7","title":"igraph 1.2.7","text":"CRAN release: 2021-10-15 Oct 15, 2021 C core updated 0.8.5, fixing range bugs introducing number new functions. Added: cluster_leiden added (#399). cluster_fluid_communities added (#454) Fixed: make_lattice() correctly rounds length nearest integer printing warning (#115). make_empty_graph(NULL) now prints error instead producing invalid graph (#404). make_graph(c()) now produces empty graph instead printing misleading error message (#431). Printing graph edges NA names endpoints produce misleading error message (#410). types argument functions related bipartite graphs now prints warning types coerced booleans (#476). Betweenness normalisation longer overflows (#442). layout_with_sugiyama() returns layout type matrix even one vertex graph (#408). Plotting null graph (.e. graph vertices) throw error (#387). Deprecated: membership argument modularity.matrix() now deprecated function never needed anyway. modularity() now prints warning applied directed graph implementation igraph’s C core support directed graphs version 0.8.5. warning turned error next minor (1.3.0) version R interface; error removed later C core updated version supports modularity directed networks. transitivity() now prints warning local variant (type=\"local\") called directed graph graph multiple edges beecause implementation C core igraph work reliably cases version 0.8.5. warning turned error next minor (1.3.0) version R interface; error removed later C core updated version supports transitivity networks multiple edges. Misc: Documentation improvements.","code":""},{"path":"/news/index.html","id":"igraph-126","dir":"Changelog","previous_headings":"","what":"igraph 1.2.6","title":"igraph 1.2.6","text":"CRAN release: 2020-10-06 Oct 5, 2020 user visible changes.","code":""},{"path":"/news/index.html","id":"igraph-125","dir":"Changelog","previous_headings":"","what":"igraph 1.2.5","title":"igraph 1.2.5","text":"CRAN release: 2020-03-19 Mar 27, 2020 user visible changes.","code":""},{"path":"/news/index.html","id":"igraph-124","dir":"Changelog","previous_headings":"","what":"igraph 1.2.4","title":"igraph 1.2.4","text":"CRAN release: 2019-02-13 Feb 13, 2019 user visible changes.","code":""},{"path":"/news/index.html","id":"igraph-123","dir":"Changelog","previous_headings":"","what":"igraph 1.2.3","title":"igraph 1.2.3","text":"CRAN release: 2019-02-10 Jan 27, 2019 user visible changes.","code":""},{"path":"/news/index.html","id":"igraph-122","dir":"Changelog","previous_headings":"","what":"igraph 1.2.2","title":"igraph 1.2.2","text":"CRAN release: 2018-07-27 Jul 27, 2018 user visible changes.","code":""},{"path":"/news/index.html","id":"igraph-121","dir":"Changelog","previous_headings":"","what":"igraph 1.2.1","title":"igraph 1.2.1","text":"CRAN release: 2018-03-10 GLPK library optional, available, cluster_optimal() function work. Unfortunately bundle GLPK library igraph CRAN , CRAN maintainers forbid pragmas source code. Removed NMF package dependency, related functions. Fix compilation without libxml2","code":""},{"path":"/news/index.html","id":"igraph-112","dir":"Changelog","previous_headings":"","what":"igraph 1.1.2","title":"igraph 1.1.2","text":"CRAN release: 2017-07-21 Jul 20, 2017 Fix compilation Solaris","code":""},{"path":"/news/index.html","id":"igraph-111","dir":"Changelog","previous_headings":"","what":"igraph 1.1.1","title":"igraph 1.1.1","text":"CRAN release: 2017-07-16 Jul 13, 2017 Graph id printed header, graph_id function added Fix edge_attr index values Fix bfs() bug, restricted argument zero-based match_vertices exported now %>% re-exported better way, avoid interference packages ego_ functions default order = 1 now New function igraph_with_opt run code temporary igraph options settings Fix broken sample_asym_pref function Fix curve_multiple avoid warnings graphs self-loops. NMF package suggested now, hard dependency Fix gen_uid.c _SVID_SOURCE issues Avoid drawing straight lines Bezier curves Use pkgconfig package options. allows setting options per-package basis. E.g. package using igraph can set return.vs.es FALSE .onLoad() function, igraph return plain numeric vectors instead vertex/edge sequences called package. igraph_options() returns old values updated options, actually useful, returning new values . with_igraph_opt() function temporarily change values igraph options. get.edge() deprecated, use ends() instead. (already case igraph 1.0.0, forgot add NEWS point .) redefine .Call(), make native calls faster. Speed special cases indexing vertex sequences. Removed anyNA() call, compatible older R versions. Fixed fast-greedy community finding bug, https://github.com/igraph/igraph/issues/836 Fixed head_of() tail_of(), mixed . Plot: make label.dist independent label lengths, fixes #63. Plot: error unknown graphical parameters. Import functions base packages, eliminate R CMD check NOTEs. Re-add support edge weights Fruchterman-Reingold layout Check membership vector modularity(). Rename str.igraph() print_all(). Use igraph version exported graphs, instead @VERSION@ #75. Functions can used inside V() E() indexing now begin dot. Old names deprecated. New names: .nei(), .innei(), .outnei(), .inc(), .(), .(). #22 Fix packages convert graphs graph::graphNEL: don’t need attach ‘graph’ manually . Fix bugs layout_with_dh, layout_with_gem layout_with_sugiyama. crashed cases.","code":""},{"path":"/news/index.html","id":"igraph-101","dir":"Changelog","previous_headings":"","what":"igraph 1.0.1","title":"igraph 1.0.1","text":"CRAN release: 2015-06-26 June 26, 2015 minor updates: Documentation fixes. require C++-11 compiler . Fedora, Solaris Windows compilation fixes.","code":""},{"path":"/news/index.html","id":"igraph-100","dir":"Changelog","previous_headings":"","what":"igraph 1.0.0","title":"igraph 1.0.0","text":"CRAN release: 2015-06-24 June 21, 2015","code":""},{"path":"/news/index.html","id":"release-notes-1-0-0","dir":"Changelog","previous_headings":"","what":"Release notes","title":"igraph 1.0.0","text":"new major version igraph, call 1.0.0. mean ready, ’ll never ready. biggest changes release - new function names. functions renamed make consistent readable. (Relax, old names can still used, need update code.) - Better operations vertex edge sequences. functions return proper vertex/edge sequences instead numeric ids. - versatile make_() make_graph() functions create graphs.","code":""},{"path":"/news/index.html","id":"major-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"igraph 1.0.0","text":"Many functions renamed. Old names documented, can still used. generic make_graph() function create graphs. generic layout_() (underscore!) function create graph layouts, see also add_layout_(). igraph data type changed. need call upgrade_graph() graphs created previous igraph versions. Vertex edge sequence operations: union, intersection, etc. Vertex edge sequences can used graphs belong . now strictly checked. functions return (sub)set vertices edges return vertex edge sequences instead. Vertex edge sequences [[ operator now, easy viewing vertex/edge metadata. Vertex edge sequences implemented weak references. See also as_ids() function convert simple ids. Vertex order can specified circle layout now. Davidson-Harel layout algorithm layout_with_dh(). GEM layout algorithm layout_with_gem(). Neighborhood functions mindist parameter smallest distance consider. all_simple_paths() function list simple paths graph. triangles() lists triangles graph. Fruchterman-Reingold Kamada-Kawai layout algorithms rewritten scratch. much faster follow original publications closely. Nicer printing graphs, vertex edge sequences. local_scan() function calculates scan statistics. Embeddings: embed_adjacency_matrix() embed_laplacian_matrix(). Product operator: *, graph multiple times. Can also used rep(). Better default colors, color palettes vertices. Random walk graph: random_walk() adjacent_vertices() incident_edges() functions, vectorized, opposed neighhors() incident(). Convert graph long data frame as_long_data_frame().","code":""},{"path":"/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"igraph 1.0.0","text":"many list. Please try issue fixed (re-)report . Thanks!","code":""},{"path":"/news/index.html","id":"igraph-071","dir":"Changelog","previous_headings":"","what":"igraph 0.7.1","title":"igraph 0.7.1","text":"CRAN release: 2014-04-22 April 21, 2014","code":""},{"path":"/news/index.html","id":"release-notes-0-7-1","dir":"Changelog","previous_headings":"","what":"Release Notes","title":"igraph 0.7.1","text":"bug fixes, make sure code included ‘Statistical Analysis Network Data R’ works. See https://github.com/kolaczyk/sand","code":""},{"path":"/news/index.html","id":"detailed-changes-0-7-1","dir":"Changelog","previous_headings":"","what":"Detailed changes:","title":"igraph 0.7.1","text":"Graph drawing: fix labels curved edges, issue #181. Graph drawing: allow fixing edge labels given positions, issue #181. Drop ‘type’ vertex attribute bipartite projection, projections bipartite , issue #255. Print logical attributes header properly (.e. encoded l, x, complex attributes. Issue #578. Add constructor communities objects, see create.communities(). Issue #547. Better error handling GraphML parser. GraphML reader bit lenient now; makes possible read GraphML files saved yWorks apps. Fixed bug constaint(), issue #580. Bipartite projection now detects invalid edges instead giving cryptic error, issue #543. Fixed simplify argument graph.formula(), broken, issue #586. function crossing() adds better names result, fixes issue #587. sir() function gives error input graph simple, fixes issue #582. Calling igraph functions igraph callbacks allowed now, fixes issue #571.","code":""},{"path":"/news/index.html","id":"igraph-070","dir":"Changelog","previous_headings":"","what":"igraph 0.7.0","title":"igraph 0.7.0","text":"CRAN release: 2014-02-05 February 4, 2014","code":""},{"path":"/news/index.html","id":"release-notes-0-7-0","dir":"Changelog","previous_headings":"","what":"Release Notes","title":"igraph 0.7.0","text":"bunch new features library , important changes life project. Thanks everyone sending code reporting bugs!","code":""},{"path":"/news/index.html","id":"igraph--github-0-7-0","dir":"Changelog","previous_headings":"Release Notes","what":"igraph @ github","title":"igraph 0.7.0","text":"igraph’s development moved Launchpad github. actually happened several month ago, never announced officially. place reporting bugs https://github.com/igraph/igraph/issues.","code":""},{"path":"/news/index.html","id":"new-homepage-0-7-0","dir":"Changelog","previous_headings":"Release Notes","what":"New homepage","title":"igraph 0.7.0","text":"igraph’s homepage now hosted http://igraph.org, brand new. wanted make easier use modern.","code":""},{"path":"/news/index.html","id":"better-nightly-downloads-0-7-0","dir":"Changelog","previous_headings":"Release Notes","what":"Better nightly downloads","title":"igraph 0.7.0","text":"can download nightly builds igraph http://igraph.org/nightly. Source binary R packages (windows OSX), built.","code":""},{"path":"/news/index.html","id":"new-features-and-bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"New features and bug fixes","title":"igraph 0.7.0","text":"Added demo hierarchical random graphs, invoke via demo(hrg). Make attribute prefixes optional writing GraphML file. Added function mod.matrix(). Support edge weights leading eigenvector community detection. Added LAD library checking (sub)graph isomorphism, version 1. Logical attributes. Added layout.bipartite() function, simple two-column layout bipartite graphs. Support incidence matrices bipartite Pajek files. Pajek files matrix format now directed default, unless bipartite. Support weighted (signed) networks Pajek file matrix format. Fixed bug barabasi.game(), algorithm psumtree-multiple just froze. Function layout.mds() default returns layout matrix now. Added support Boolean attributes GraphML GML readers writer. Change MDS layout coordinates, first dim according first eigenvalue, etc. plot.communities() (plot.igraph(), really) draws border around marked groups default. printing graphs now converts name graph attribute character Convenience functions query set attributes : vertex.attriubutes(), graph.attributes() edge.attributes(). Function graph.disjoint.union() handles attributes now. Rewrite graph.union() handle attributes properly. rewire(): now supports generation destruction loops. Erdos-Renyi type bipartite random graphs: bipartite.random.game(). Support new options (predecessors inbound_edges) get_shortest_paths(), reorganized output get.shortest.paths() completely. Added graphlets() related functions. Fix modularity values multilevel community merges . Fixed bug deleting edges FALSE matrix notation. Fix bonpow() alpha.centrality() make sure sparse solver called. tkplot() news: enable setting coordinates command line via tkplot.setcoords() access canvas via tkplot.canvas(). Fixed potential crash igraph_edge_connectivity(), un-initialized variable C code. Avoiding overflow closeness() related functions. Check NAs converting ‘type’ logical bipartite.projection(). graphNEL conversion functions load ‘graph’ package loaded load end search path, minimize conflicts. Fixed bug creating graphs adjacency matrices, now convert double, case integers. Fixed invalid memory read (potential crash) infomap community detection. Fixed memory leak functions attribute combinations. Removed memory leaks SCG functions. Fixed memory leaks ray tracer. Fixed memory leak graph.bfs() graph.dfs(). Fix bug triad census set first element result NaN. Fixed crash .chordal(). Fixed bug weighted modularity calculation, sum weights truncated integer. Fixed bug weighted multilevel communtiies, maximum weight rounded integer. Fixed bug centralization.closeness.tmax(). Reimplement push-relabel maximum flow gap heuristics. Maximum flow functions now return statistics push relabel algorithm steps. Function arpack() now gives error message unknown options given. Fixed missing whitespace Pajek writer ID attribute numeric. Fixed bug caused GML reader crash ID attribute non-numeric. Fixed issue #500, potential segfault two graphs BLISS differ number vertices edges. Added igraphtest() function. Fix dyad census instability, sometimes incorrect results reported. Dyad census detects integer overflow now gives warning. Function add.edges() allow now zeros vertex set. Added function count number adjacent triangles: adjacent.triangles(). Added graph.eigen() function, eigenproblems adjacency matrices. Added workarounds functions create lot graphs, decompose.graph() graph.neighborhood() use . Fixes issue #508. Added weights support optimal.community(), closes #511. Faster maximal clique finding. Added function count maximum cliques. Set operations: union, intersection, disjoint, union, difference, compose now work based vertex names (present) keep attributes, closes #20. Removed functions graph.intersection..name(), graph.union..name(), graph.difference..name(). + operator graphs now calls graph.union() argument graphs named, calls graph.disjoint.union() otherwise. Added function igraph.version(). Generate graphs stochastic block model: sbm.game(). suggest stats, XML, jpeg png packages . Fixed set.vertex/edge.attribute bug changed graph objects, copying (#533) Fixed bug barabasi.game caused crashes. use PRPACK calculate PageRank scores see https://github.com/dgleich/prpack Added'argument bipartite.projection (#307). Add normalized argument closeness functions, fixes issue #3. R: better handling complex attributes, [[ vertex/edge sets, fixes #231. Implement start argument hrg.fit (#225). Set root vertex Reingold-Tilford layout, solves #473. Fix betweenness normalization directed graphs. Fixed bug graph.density resulted incorrect values undirected graphs loops Fixed bug many graphs created one C call (e.g. graph.decompose), causing #550. Fixed sparse graph.adjacency bugs graphs one edge, graphs zero edges. Fixed bug made Bellman-Ford shortest paths calculations fail. Fixed graph.adjacency bug undirected, weighted graphs sparse matrices. main, sub, xlab ylab proper graphics parameters now (#555). graph.data.frame coerces arguments data frame (#557). Fixed minimum cut bug weighted undirected graphs (#564). Functions simulating epidemics (SIR model) networks, see sir function. Fixed argument ordering graph.mincut related functions. Avoid copying attributes query functions print (#573), functions much faster now graphs many vertices/edges attributes. Speed writing GML GraphML files, attributes integer. really-really slow. Fix multiple root vertices graph.bfs (#575).","code":""},{"path":"/news/index.html","id":"igraph-066","dir":"Changelog","previous_headings":"","what":"igraph 0.6.6","title":"igraph 0.6.6","text":"CRAN release: 2013-10-28 Released Oct 28, 2013 bugs fixed: Fixed potential crash infomap.community() function. Various fixed operators work vertex names (#136). Fixed example arpack() manual page. arpack() now gives error message unknown options supplied (#492). Better arpack() error messages. Fixed missing whitespace Pajek writer ID attribute numeric. Fixed dyad census instability, sometimes incorrect results reported (#496). Fixed bug caused GML reader crash ID attribute non-numeric Fixed potential segfault two graphs BLISS differ number vertices edges (#500). Added igraphtest() function run tests R (#485). Dyad census detects integer overflow now gives warning (#497). R: add.edges() allow now zeros vertex set (#503). Add C++ namespace files didn’t one. Fixes incompatibility packages (e.g. rgl) mysterious crashes (#523). Fixed bug caused side effect set.vertex.attributes(), set.edge.attributes() set.graph.attributes() (#533). Fixed bug degree.distribution() cluster.distribution() (#257).","code":""},{"path":"/news/index.html","id":"igraph-065-2","dir":"Changelog","previous_headings":"","what":"igraph 0.6.5-2","title":"igraph 0.6.5-2","text":"CRAN release: 2013-05-23 Released May 16, 2013 Worked two CRAN check problems, gfortran bug (string bound checking work code called C without string length arguments “right” place). Otherwise identical 0.6.5-1.","code":""},{"path":"/news/index.html","id":"igraph-065-1","dir":"Changelog","previous_headings":"","what":"igraph 0.6.5-1","title":"igraph 0.6.5-1","text":"CRAN release: 2013-02-28 Released February 27, 2013 Fixing annoying bug, broke two packages CRAN: Setting graph attributes failed sometimes, attributes lists complex objects.","code":""},{"path":"/news/index.html","id":"igraph-065","dir":"Changelog","previous_headings":"","what":"igraph 0.6.5","title":"igraph 0.6.5","text":"CRAN release: 2013-02-25 Released February 24, 2013 minor release, fix annoying bugs 0.6.4: igraph now work well older R versions. Eliminate gap vertex edge plotting edge without arrow. Fixes #1118448. Fixed --bounds array indexing error DrL layout, potentially caused crashes. Fixed crash weighted betweenness calculation. Plotting: fixed bug caused misplaced arrows rectangle vertex shapes.","code":""},{"path":"/news/index.html","id":"igraph-064","dir":"Changelog","previous_headings":"","what":"igraph 0.6.4","title":"igraph 0.6.4","text":"CRAN release: 2013-02-04 Released February 2, 2013 version number mistake, jump 0.6.4 0.6, technical reasons. version actually never really released, R packages version uploaded CRAN, include version NEW file.","code":""},{"path":"/news/index.html","id":"new-features-and-bug-fixes-0-6-4","dir":"Changelog","previous_headings":"","what":"New features and bug fixes","title":"igraph 0.6.4","text":"Added vertex shape API defining new vertex shapes, also couple new vertex shapes. Added get.data.frame() function, opposite graph.data.frame(). Added bipartite support Pajek reader writer, closes bug #1042298. degree.sequence.game() new method now: “simple_no_multiple”. Added .degree.sequence() .graphical.degree.sequence() functions. rewire() new method: “loops”, can create loop edges. Walktrap community detection now handles isolates. layout.mds() returns layout matrix now. layout.mds() uses LAPACK instead ARPACK. Handle ‘~’ character write.graph read.graph. Bug #1066986. Added k.regular.game(). Use vertex names plot labels specified function call vertex attributes. Fixes issue #1085431. power.law.fit() can now use C implementation. Fixed bug barabasi.game() .seq empty vector. Fixed bug made functions progress bar fail called another package. Fixed bug creating graphs weighted integer adjacency matrix via graph.adjacency(). Bug #1019624. Fixed overflow issues centralization calculations. Fixed minimal.st.separators() bug, vertex sets incorrectly reported separators. Bug #1033045. Fixed bug mishandled vertex colors VF2 isomorphism functions. Bug #1032819. Pajek exporter now always quotes strings, thanks Elena Tea Russo. Fixed bug handling small edge weights shortest paths calculation shortest.paths() (Dijkstra’s algorithm.) Thanks Martin J Reed. Weighted transitivity uses V(graph) ‘vids’ NULL. Fixed bug ‘pie’ vertices drawn together vertex shapes. Speed printing graphs. Speed attribute queries basic operations, avoiding copying graph. Bug #1043616. Fixed bug NCV setting ARPACK functions. bigger matrix size. layout.merge()’s DLA mode better defaults now. Fixed bug layout.mds() resulted vertices top . Fixed bug layout.spring(), working properly. Fixed layout.svd(), completely defunct. Fixed bug layout.graphopt() caused warnings platforms crashes. Fixed community..membership(). Bug #1022850. Fixed graph.incidence() crash called non-matrix argument. Fixed get.shortest.paths bug, output set “”. Motif finding functions return NA isomorphism classes motifs (.e. connected). Fixes bug #1050859. Fixed get.adjacency() attr given, attribute complex type. Bug #1025799. Fixed attribute name graph.adjacency() dense matrices. Bug #1066952. Fixed erratic behavior alpha.centrality(). Fixed igraph indexing, attr given. Bug #1073705. Fixed bug calculating largest cliques directed graph. Bug #1073800. Fixed bug maximal clique search, closes #1074402. Warn negative weights calculating PageRank. Fixed dense, unweighted graph.adjacency diag=FALSE. Closes issue #1077425. Fixed bug eccentricity() radius(), results often simply wrong. Fixed bug get..shortest.paths() edges zero weight. graph.data.frame() careful vertex names numbers, avoid scientific notation. Fixes issue #1082221. Better check NAs vertex names. Fixes issue #1087215 Fixed potential crash DrL layout generator. Fixed bug Reingold-Tilford layout graph directed mode != .","code":""},{"path":"/news/index.html","id":"igraph-06","dir":"Changelog","previous_headings":"","what":"igraph 0.6","title":"igraph 0.6","text":"CRAN release: 2012-06-14 Released June 11, 2012 See also release notes http://igraph.sf.net/relnotes-0.6.html","code":""},{"path":"/news/index.html","id":"r-major-new-features-0-6","dir":"Changelog","previous_headings":"","what":"R: Major new features","title":"igraph 0.6","text":"Vertices edges numbered 1 instead 0. Note makes old R igraph code incompatible igraph 0.6. want use old code, please use igraph0 package. See http://igraph.sf.net/relnotes-0.6.html. ‘[’ ‘[[’ operators can now used igraph graphs, ‘[’ graph behaves adjacency matrix, ‘[[’ treated adjacency list. also much simpler manipulate graph structure, .e. add/remove edges vertices, new operators. See ?graph.structure. functions take vector list vertices edges, vertex/edge names can given instead numeric ids. New package ‘igraphdata’, contains number data sets can used directly igraph. Igraph now supports loading graphs Nexus online data repository, see nexus.get(), nexus.info(), nexus.list() nexus.search(). community structure finding algorithm return ‘communities’ object now, bunch useful operations, see ?communities details. Vertex edge attributes handled much better now. kept whenever possible, can combined via flexible API. See ?attribute.combination. R now prints igraph graphs screen structured informative way. output summary() also updated accordingly.","code":""},{"path":"/news/index.html","id":"r-other-new-features-0-6","dir":"Changelog","previous_headings":"","what":"R: Other new features","title":"igraph 0.6","text":"possible mark vertex groups plots, via shading. Communities cohesive blocks plotted using default. igraph demos now available, see list via ‘demo(package=“igraph”)’. igraph now tries select optimal layout algorithm, plotting graph. Added simple console, using Tcl/Tk. contains text area status messages also status bar. See igraph.console(). Reimplemented igraph options support, see igraph.options() getIgraphOpt(). Igraph functions can now print status messages.","code":""},{"path":[]},{"path":"/news/index.html","id":"community-detection-0-6","dir":"Changelog","previous_headings":"R: New or updated functions","what":"Community detection","title":"igraph 0.6","text":"multi-level modularity optimization community structure detection algorithm Blondel et al. added, see multilevel.community(). Distance two community structures: compare.communities(). Community structure via exact modularity optimization, optimal.community(). Hierarchical random graphs community finding, porting code Aaron Clauset. See hrg.game(), hrg.fit(), etc. Added InfoMAP community finding method, thanks Emmanuel Navarro code. See infomap.community().","code":""},{"path":"/news/index.html","id":"shortest-paths-0-6","dir":"Changelog","previous_headings":"R: New or updated functions","what":"Shortest paths","title":"igraph 0.6","text":"Eccentricity (eccentricity()), radius (radius()) calculations. Shortest path calculations get.shortest.paths() can now return edges along shortest paths. get..shortest.paths() now supports edge weights.","code":""},{"path":"/news/index.html","id":"centrality-0-6","dir":"Changelog","previous_headings":"R: New or updated functions","what":"Centrality","title":"igraph 0.6","text":"Centralization scores degree, closeness, betweenness eigenvector centrality. See centralization.scores(). Personalized Page-Rank scores, see page.rank(). Subgraph centrality, subgraph.centrality(). Authority (authority.score()) hub (hub.score()) scores support edge weights now. Support edge weights betweenness closeness calculations. bonpow(), Bonacich’s power centrality alpha.centrality(), Alpha centrality calculations now use sparse matrices default. Eigenvector centrality calculation, evcent() now works directed graphs. Betweenness calculation can now use arbitrarily large integers, required lattice-like graphs avoid overflow.","code":""},{"path":"/news/index.html","id":"inputoutput-and-file-formats-0-6","dir":"Changelog","previous_headings":"R: New or updated functions","what":"Input/output and file formats","title":"igraph 0.6","text":"Support DL file format graph.read(). See http://www.analytictech.com/networks/dataentry.htm. Support writing LEDA file format write.graph().","code":""},{"path":"/news/index.html","id":"plotting-and-layouts-0-6","dir":"Changelog","previous_headings":"R: New or updated functions","what":"Plotting and layouts","title":"igraph 0.6","text":"Star layout: layout.star(). Layout based multidimensional scaling, layout.mds(). New layouts layout.grid() layout.grid.3d(). Sugiyama layout algorithm layered directed acyclic graphs, layout.sugiyama().","code":""},{"path":"/news/index.html","id":"graph-generators-0-6","dir":"Changelog","previous_headings":"R: New or updated functions","what":"Graph generators","title":"igraph 0.6","text":"New graph generators: static.fitness.game(), static.power.law.game(). barabasi.game() rewritten supports three algorithms now, default algorithm generate multiple loop edges. graph generation process can now start supplied graph. Watts-Strogatz graph generator, igraph_watts_strogatz() can now create graphs without loop edges.","code":""},{"path":"/news/index.html","id":"others-0-6","dir":"Changelog","previous_headings":"R: New or updated functions","what":"Others","title":"igraph 0.6","text":"Added Spectral Coarse Graining algorithm, see scg(). cohesive.blocks() function rewritten C, much faster now. nicer API, . See demo(“cohesive”). Added generic breadth-first depth-first search implementations many callbacks, graph.bfs() graph_dfs(). Support vertex edge coloring VF2 (sub)graph isomorphism functions (graph.isomorphic.vf2(), graph.count.isomorphisms.vf2(), graph.get.isomorphisms.vf2(), graph.subisomorphic.vf2(), graph.count.subisomorphisms.vf2(), graph.get.subisomorphisms.vf2()). Assortativity coefficient, assortativity(), assortativity.nominal() assortativity.degree(). Vertex operators work vertex names: graph.intersection..name(), graph.union..name(), graph.difference..name(). Thanks Magnus Torfason contributing code! Function calculate non-induced subgraph: subgraph.edges(). comprehensive maximum flow minimum cut calculation, see functions graph.maxflow(), graph.mincut(), stCuts(), stMincuts(). Check whether directed graph DAG, .dag(). .multiple() decide whether graph multiple edges. Added function calculate diversity score vertices, graph.diversity(). Graph Laplacian calculation (graph.laplacian()) supports edge weights now. Biconnected component calculation, biconnected.components() now returns components . bipartite.projection() calculates multiplicity edges. Maximum cardinality search: maximum.cardinality.search() chordality test: .chordal() Convex hull computation, convex.hull(). Contract vertices, contract.vertices().","code":""},{"path":"/news/index.html","id":"igraph-053","dir":"Changelog","previous_headings":"","what":"igraph 0.5.3","title":"igraph 0.5.3","text":"CRAN release: 2009-11-22 Released November 22, 2009","code":""},{"path":"/news/index.html","id":"bugs-corrected-in-the-r-interface-0-5-3","dir":"Changelog","previous_headings":"","what":"Bugs corrected in the R interface","title":"igraph 0.5.3","text":"small changes make ‘R CMD check’ clean Fixed bug graph.incidence, ‘directed’ ‘mode’ arguments handled correctly Betweenness edge betweenness functions work graphs many shortest paths now (limit long long int) compiling package, configure script fails C compiler available igraph..graphNEL creates right number loop edges now Fixed bug bipartite.projection() caused occasional crashes systems","code":""},{"path":"/news/index.html","id":"igraph-052","dir":"Changelog","previous_headings":"","what":"igraph 0.5.2","title":"igraph 0.5.2","text":"CRAN release: 2009-04-14 Released April 10, 2009 See also release notes http://igraph.sf.net/relnotes-0.5.2.html","code":""},{"path":"/news/index.html","id":"new-in-the-r-interface-0-5-2","dir":"Changelog","previous_headings":"","what":"New in the R interface","title":"igraph 0.5.2","text":"Added progress bar support beweenness() betweenness.estimate(), layout.drl() Speeded betweenness estimation Speeded .connected() Johnson’s shortest paths algorithm added shortest.paths() now ‘algorithm’ argument choose various implementations manually Always quote symbolic vertex names printing graphs edges Average nearest neighbor degree calculation, graph.knn() Weighted degree (also called strength) calculation, graph.strength() new functions support bipartite graphs: graph.bipartite(), .bipartite(), get.incidence(), graph.incidence(), bipartite.projection(), bipartite.projection.size() Support plotting curved edges plot.igraph() tkplot() Added support weighted graphs alpha.centrality() Added label propagation community detection algorithm Raghavan et al., label.propagation.community() cohesive.blocks() now ‘cutsetHeuristic’ argument choose two cutset algorithms Added function “unfold” tree, unfold.tree() New tkplot() arguments change drawing area Added minimal GUI, invoke tkigraph() DrL layout generator, layout.drl() three dimensional mode now.","code":""},{"path":"/news/index.html","id":"bugs-corrected-in-the-r-interface-0-5-2","dir":"Changelog","previous_headings":"","what":"Bugs corrected in the R interface","title":"igraph 0.5.2","text":"Fixed bug VF2 graph isomorphism functions Fixed bug sparse adjacency matrix requested get.adjacency() graph named VL graph generator degree.sequence.game() checks now sum degrees even Many fixes supporting various compilers, e.g. GCC 4.4 Sun’s C compiler Fixed memory leaks graph.automorphisms(), Bellman-Ford shortest.paths(), independent.vertex.sets() Fix bug graph imported LGL exported NCOL format (#289596) cohesive.blocks() creates temporary file session temporary directory write.graph() read.graph() now give error messages unknown arguments given GraphML reader checks name attributes avoid adding duplicate ‘id’ attribute possible change ‘ncv’ ARPACK parameter leading.eigenvector.community() Fixed bug path.length.hist(), ‘unconnected’ wrong unconnected undirected graphs Better handling attribute assingment via iterators, now also clarified manual Better error messages unknown vertex shapes Make R package unload cleanly unloadNamespace() used Fixed bug plotting square shaped vertices (#325244) Fixed bug graph.adjacency() matrix sparse matrix class “dgTMatrix”","code":""},{"path":"/news/index.html","id":"igraph-051","dir":"Changelog","previous_headings":"","what":"igraph 0.5.1","title":"igraph 0.5.1","text":"CRAN release: 2008-07-12 Released July 14, 2008 See also release notes http://igraph.sf.net/relnotes-0.5.1.html","code":""},{"path":"/news/index.html","id":"new-in-the-r-interface-0-5-1","dir":"Changelog","previous_headings":"","what":"New in the R interface","title":"igraph 0.5.1","text":"new layout generator called DrL. Uniform sampling random connected undirected graphs given degree sequence. Edge labels plotted 1/3 edge, better graph mutual edges. Initial experimental vertex shape support ‘plot’. New function, ‘graph.adjlist’ creates igraph graphs adjacency lists. Conversion /graphNEL graphs, ‘graph’ R package. Fastgreedy community detection can utilize edge weights now, missing R interface. ‘arrow.width’ graphical parameter added. graph.data.frame new argument ‘vertices’. graph.adjacency get.adjacency support sparse matrices, ‘Matrix’ package required use functionality. graph.adjacency adds column/row names ‘name’ attribute. Weighted shortest paths using Dijkstra’s Belmann-Ford algorithm. Shortest path functions return ‘Inf’ unreachable vertices. New function ‘.mutual’ find mutual edges directed graph. Added inverse log-weighted similarity measure (.k.. Adamic/Adar similarity). preference.game asymmetric.preference.game rewritten, O(|V|+|E|) now, instead O(|V|^2). Edge weight support function ‘get.shortest.paths’, uses Dijkstra’s algorithm.","code":""},{"path":"/news/index.html","id":"bugs-corrected-in-the-r-interface-0-5-1","dir":"Changelog","previous_headings":"","what":"Bugs corrected in the R interface","title":"igraph 0.5.1","text":"bug corrected write.pajek.bgraph. Several bugs corrected graph.adjacency. Pajek reader bug corrected, used segfault ’*Vertices’ missing. Directedness handled correctly writing GML files. (note ‘correct’ conflicts standard .) Corrected bug calculating weighted, directed PageRank undirected graph. (make sense anyway.) Several bugs fixed Reingold-Tilford layout avoid edge crossings. bug fixed GraphML reader, value graph attribute specified. Fixed bug graph isomorphism routine small (3-4 vertices) graphs. Corrected random sampling implementation (igraph_random_sample), now always generates unique numbers. affects Gnm Erdos-Renyi generator, always generates simple graphs now. basic igraph constructor (igraph_empty_attrs, functions expected call internally) now checks whether number vertices finite. LGL, NCOL Pajek graph readers handle errors properly now. non-symmetric ARPACK solver returns results consistent form now. fast greedy community detection routine now checks graph simple. LGL NCOL parsers corrected work kinds end--line encodings. Hub & authority score calculations initialize ARPACK parameters now. Fixed bug Walktrap community detection routine, applied unconnected graphs. Several small memory leaks removed, big one Spinglass community structure detection function","code":""},{"path":"/news/index.html","id":"igraph-05","dir":"Changelog","previous_headings":"","what":"igraph 0.5","title":"igraph 0.5","text":"CRAN release: 2008-02-13 Released February 14, 2008 See also release notes http://igraph.sf.net/relnotes-0.5.html","code":""},{"path":"/news/index.html","id":"new-in-the-r-interface-0-5","dir":"Changelog","previous_headings":"","what":"New in the R interface","title":"igraph 0.5","text":"‘rescale’, ‘asp’ ‘frame’ graphical parameters added Create graphs formula notation (graph.formula) Handle graph attributes properly Calculate actual minimum cut undirected graphs Adjacency lists, get.adjlist get.adjedgelist added Eigenvector centrality computation much faster now Proper R warnings, instead writing warning terminal R checks graphical parameters now, unknown ones just ignored, error message given plot.igraph ‘add’ argument now compose plots multiple graphs plot.igraph supports ‘main’ ‘sub’ arguments layout.norm public now, can normalize layout possible supply startup positions layout generators Always free memory CTRL+C/ESC pressed, operating systems plot.igraph can plot square vertices now, see ‘shape’ parameter graph.adjacency rewritten creating weighted graphs use match.arg whenever possible. means character scalar options can abbreviated always case insensitive VF2 graph isomorphism routines can check subgraph isomorphism now, able return matching(s) BLISS graph isomorphism algorithm included igraph now. See canonical.permutation, graph.isomorphic.bliss use ARPACK eigenvalue/eigenvector calculation. means following functions rewritten: page.rank, leading.eigenvector.community.*, evcent. New functions based ARPACK: hub.score, authority.score, arpack. Edge weights Fruchterman-Reingold layout (layout.fruchterman.reingold). Line graph calculation (line.graph) Kautz de Bruijn graph generators (graph.kautz, graph.de.bruijn) Support writing graphs DOT format Jaccard Dice similarity coefficients added (similarity.jaccard, similarity.dice) Counting multiplicity edges (count.multiple) graphopt layout algorithm added, layout.graphopt Generation “famous” graphs (graph.famous). Create graphs LCF notation (graph.cf). Dyad census triad cencus functions (dyad.census, triad.census) Cheking simple graphs (.simple) Create full citation networks (graph.full.citation) Create histogram path lengths (path.length.hist) Forest fire model added (forest.fire.game) DIMACS reader can handle different file types now Biconnected components articulation points (biconnected.components, articulation.points) Kleinberg’s hub authority scores (hub.score, authority.score) .undirected handles attributes now Geometric random graph generator (grg.game) can return coordinates vertices Function added convert leading eigenvector community structure result membership vector (community.le..membership) Weighted fast greedy community detection Weighted page rank calculation Functions estimating closeness, betweenness, edge betweenness introducing cutoff path lengths (closeness.estimate, betweenness.estimate, edge.betweenness.estimate) Weighted modularity calculation Function permuting vertices (permute.vertices) Betweenness closeness calculations speeded read.graph can handle possible line terminators now ( , , Error handling rewritten walktrap community detection, calculation can interrupted now maxflow/mincut functions allow supply NULL pointer edge capacities, implying unit capacities edges","code":""},{"path":"/news/index.html","id":"bugs-corrected-in-the-r-interface-0-5","dir":"Changelog","previous_headings":"","what":"Bugs corrected in the R interface","title":"igraph 0.5","text":"Fixed bug cohesive.blocks, cohesive blocks sometimes calculated correctly","code":""},{"path":"/news/index.html","id":"igraph-045","dir":"Changelog","previous_headings":"","what":"igraph 0.4.5","title":"igraph 0.4.5","text":"CRAN release: 2007-12-22 Released January 1, 2008 New: - Cohesive block finding R interface, thanks Peter McMahan contributing code. See James Moody Douglas R. White, 2003, Structural Cohesion Embeddedness: Hierarchical Conception Social Groups American Sociological Review 68(1):1-25 - Biconnected components articulation points. - R interface: better printing attributes. - R interface: graph attributes can used via ‘$’. Bug fixed: - Erdos-Renyi random graph generators rewritten.","code":""},{"path":"/news/index.html","id":"igraph-044","dir":"Changelog","previous_headings":"","what":"igraph 0.4.4","title":"igraph 0.4.4","text":"CRAN release: 2007-10-03 Released October 3, 2007 release work seamlessly new R 2.6.0 version. bugs also fixed: - bug fixed Erdos-Renyi graph generator, sometimes added extra vertex.","code":""},{"path":"/news/index.html","id":"igraph-043","dir":"Changelog","previous_headings":"","what":"igraph 0.4.3","title":"igraph 0.4.3","text":"CRAN release: 2007-08-09 Released August 13, 2007 next one sequence bugfix releases. Thanks many people sending bug reports. changes: - memory leaks removed using attributes R Python. - GraphML parser: entities character data multiple chunks now handled correctly. - bug corrected edge betweenness community structure detection, failed called many times program/session. - Edge betweeness community structure: handle unconnected graphs properly. - Fixed bug related fast greedy community detection unconnected graphs. - Use different kind parser (Push) reading GraphML files. almost invisible users fixed nondeterministic bug reading GraphML files. - R interface: plot now handles properly called vector edge.width argument directed graphs. - R interface: bug (typo) corrected walktrap.community weighted graphs.","code":""},{"path":"/news/index.html","id":"igraph-042","dir":"Changelog","previous_headings":"","what":"igraph 0.4.2","title":"igraph 0.4.2","text":"CRAN release: 2007-06-06 Released June 7, 2007 another bugfix release, serious bug R package previous version: read write graphs files format MS Windows. bits added: - circular Reingold-Tilford layout generator trees - corrected bug, Pajek files written properly MS Windows now. - arrow.size graphical edge parameter added R interface.","code":""},{"path":"/news/index.html","id":"igraph-041","dir":"Changelog","previous_headings":"","what":"igraph 0.4.1","title":"igraph 0.4.1","text":"CRAN release: 2007-05-23 Released May 23, 2007 minor release, corrects number bugs, mostly R package.","code":""},{"path":"/news/index.html","id":"igraph-04","dir":"Changelog","previous_headings":"","what":"igraph 0.4","title":"igraph 0.4","text":"CRAN release: 2007-05-21 Released May 21, 2007 major new additions release bunch community detection algorithms support GML file format. complete list changes:","code":""},{"path":"/news/index.html","id":"new-in-the-r-interface-0-4","dir":"Changelog","previous_headings":"","what":"New in the R interface","title":"igraph 0.4","text":"internal representation changed, graphs stored ‘save’ older igraph version read back new version reliably. neighbors returns ordered lists .loop .multiple added topological sorting VF2 isomorphism algorithm support reading graphs Graph Database isomorphism graph.mincut can calculate actual minimum cut girth calculation added, thanks Keith Briggs support reading writing GML files Walktrap community detection algorithm added, thanks Matthieu Latapy Pascal Pons edge betweenness based community detection algorithm added fast greedy algorithm community detection Clauset et al. added thanks Aaron Clauset sharing code leading eigenvector community detection algorithm Mark Newman added functions creating dendrograms output community detection algorithms added community.membership supporting function added, creates membership vector community structure merge tree modularity calculation added graphics parameter handling completely rewritten, uniform handling colors fonts, make sure read ?igraph.plotting new plotting parameter edges: arrow.mode bug corrected playing nonlinear barabasi.game better looking plotting 3d using rglplot: edges 3d rglplot layout allowed two dimensional now rglplot suspends updates drawing, makes faster loop edges correctly plotted three plotting functions better printing attributes printing graphs summary graph prints attribute names .igraph rewritten make possible inherit ‘igraph’ class somewhat better looking progress meter functions support ","code":""},{"path":"/news/index.html","id":"others-0-4","dir":"Changelog","previous_headings":"","what":"Others","title":"igraph 0.4","text":"many functions benefit new internal representation faster now: transitivity, reciprocity, graph operator functions like intersection union, etc.","code":""},{"path":"/news/index.html","id":"bugs-corrected-0-4","dir":"Changelog","previous_headings":"","what":"Bugs corrected","title":"igraph 0.4","text":"corrected bug reading Pajek files: directed graphs read undirected","code":""},{"path":"/news/index.html","id":"igraph-032","dir":"Changelog","previous_headings":"","what":"igraph 0.3.2","title":"igraph 0.3.2","text":"CRAN release: 2006-12-14 Released Dec 19, 2006 new major release, contains many new things:","code":""},{"path":"/news/index.html","id":"changes-in-the-r-interface-0-3-2","dir":"Changelog","previous_headings":"","what":"Changes in the R interface","title":"igraph 0.3.2","text":"bonpow function ported SNA calculate Bonacich power centrality get.adjacency supports attributes now, means sets colnames rownames attributes can return attribute values matrix instead 0/1 grg.game, geometric random graphs graph.density, graph density calculation edge vertex attributes can added easily now added new edges add.edges new vertices add.vertices graph.data.frame creates graph data frames, can used create graphs edge attributes easily plot.igraph tkplot can plot self-loop edges now graph.edgelist create graph edge list, can also handle edge lists symbolic names get.edgelist now ‘names’ argument can return symbolic vertex names instead vertex ids, default id uses ‘name’ vertex attribute returned printing graphs screen also prints symbolic symbolic names (‘name’ attribute present) maximum flow minimum cut functions: graph.maxflow, graph.mincut vertex edge connectivity: edge.connectivity, vertex.connectivity edge vertex disjoint paths: edge.disjoint.paths, vertex.disjoint.paths White’s cohesion adhesion measure: graph.adhesion, graph.cohesion dimacs file format added .directed handles attributes now constraint corrected, handles weighted graphs well now weighted attribute graph.adjacency spinglass-based community structure detection, Joerg Reichardt – Stefan Bornholdt algorithm added: spinglass.community graph.extended.chordal.ring, extended chordal ring generation .clusters calculates number clusters without calculating clusters minimum spanning tree functions updated keep attributes transitivity can calculate local transitivity well neighborhood related functions added: neighborhood, neighborhood.size, graph.neighborhood new graph generators based vertex types: preference.game asymmetric.preference.game","code":""},{"path":"/news/index.html","id":"bugs-corrected-0-3-2","dir":"Changelog","previous_headings":"","what":"Bugs corrected","title":"igraph 0.3.2","text":"attribute handling bug deleting edges corrected GraphML escaping NaN handling corrected bug corrected make possible compile R package without libxml2 library bug Erdos-Renyi graph generation corrected: problems generating large directed graphs bug constraint calculation corrected, works well now fixed memory leaks GraphML reader error handling bug corrected GraphML reader bug corrected R version graph.laplacian normalized Laplacian requested memory leak corrected get..shortest.paths R package","code":""},{"path":"/news/index.html","id":"igraph-021","dir":"Changelog","previous_headings":"","what":"igraph 0.2.1","title":"igraph 0.2.1","text":"CRAN release: 2006-08-24 Released Aug 23, 2006 bug-fix release. Bugs fixed: - reciprocity corrected avoid segfaults - docs updates - various R package updates make conform CRAN rules","code":""},{"path":"/news/index.html","id":"igraph-02","dir":"Changelog","previous_headings":"","what":"igraph 0.2","title":"igraph 0.2","text":"CRAN release: 2006-08-23 Released Aug 18, 2006 Release time last! many new things igraph 0.2, important ones: - reading writing Pajek GraphML formats attributes (Pajek GraphML files supported, see documentation details) - RANDEDU fast motif search algorithm implemented - many new graph generators, games regular graphs - many new structural properties: transitivity, reciprocity, etc. - graph operators: union, intersection, difference, structural holes, etc. - conversion directed undirected graphs - new layout algorithms trees large graphs, 3D layouts many . New things specifically R package: - support CTRL+C - new functions: Graph Laplacian, Burt’s constraint, etc. - vertex/edge sequences totally rewritten, smart indexing (see manual) - new R manual tutorial: `Network Analysis igraph’, still development useful - basic 3D plotting using OpenGL Although release somewhat tested Linux, MS Windows, Mac OSX, Solaris 8 FreeBSD, heavy testing done, might contain bugs, kindly ask send bug reports make igraph better.","code":""},{"path":"/news/index.html","id":"igraph-01","dir":"Changelog","previous_headings":"","what":"igraph 0.1","title":"igraph 0.1","text":"Released Jan 30, 2006 year development first “official” release igraph library. release considered beta software, useful general. Please send questions comments.","code":""}]
